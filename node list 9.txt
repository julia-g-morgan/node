================ Node #4001 ================
{
  "id": "74df223b-17ab-4189-a171-78224522e1c7",
  "name": "LLM Response Analysis",
  "type": "@n8n/n8n-nodes-langchain.chainLlm",
  "position": [
    1000,
    160
  ],
  "parameters": {
    "text": "={{ $('When chat message received').item.json.chatInput }}",
    "messages": {
      "messageValues": [
        {
          "message": "={{ $json.system_prompt }}"
        }
      ]
    },
    "promptType": "define"
  },
  "typeVersion": 1.4
}

================ Node #4002 ================
{
  "id": "65d8b0d3-7285-4c64-8ca5-4346e68ec075",
  "name": "Sticky Note8",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    380,
    780
  ],
  "parameters": {
    "color": 3,
    "width": 570.0000000000002,
    "height": 182.91935483870984,
    "content": "## \ud83d\ude80Pro Tip \n\nIf you are getting strange results, ensure that you are Deleting the previous chat (next to the Chat Button) to ensure you aren't bleeding responses into the next chat. "
  },
  "typeVersion": 1
}

================ Node #4003 ================
{
  "id": "082d1828-72b1-48c0-8426-c8051c29f0db",
  "name": "Session",
  "type": "n8n-nodes-base.httpRequest",
  "position": [
    -20,
    -20
  ],
  "parameters": {
    "url": "https://api.fastmail.com/jmap/session",
    "options": {},
    "authentication": "genericCredentialType",
    "genericAuthType": "httpHeaderAuth"
  },
  "credentials": {
    "httpHeaderAuth": {
      "id": "3IRsYkeB2ofrwQjv",
      "name": "Fastmail"
    }
  },
  "typeVersion": 4.2
}

================ Node #4004 ================
{
  "id": "d7dc4c50-c8fc-4999-918d-5d357567ed14",
  "name": "Get Mailbox IDs",
  "type": "n8n-nodes-base.httpRequest",
  "notes": "https://api.fastmail.com/.well-known/jmap\n\nhttps://api.fastmail.com/jmap/session",
  "position": [
    200,
    -20
  ],
  "parameters": {
    "url": "https://api.fastmail.com/jmap/api/",
    "method": "POST",
    "options": {},
    "jsonBody": "={\n \"using\": [\"urn:ietf:params:jmap:core\", \"urn:ietf:params:jmap:mail\"],\n \"methodCalls\": [\n [\n \"Mailbox/get\",\n {\n \"accountId\": \"{{ $('Session').item.json.primaryAccounts['urn:ietf:params:jmap:mail'] }}\"\n },\n \"c0\"\n ]\n ]\n }",
    "sendBody": true,
    "sendHeaders": true,
    "specifyBody": "json",
    "authentication": "genericCredentialType",
    "genericAuthType": "httpHeaderAuth",
    "headerParameters": {
      "parameters": [
        {
          "name": "Content-Type",
          "value": "application/json"
        },
        {
          "name": "Accept",
          "value": "application/json"
        }
      ]
    }
  },
  "credentials": {
    "httpHeaderAuth": {
      "id": "3IRsYkeB2ofrwQjv",
      "name": "Fastmail"
    }
  },
  "typeVersion": 4.2
}

================ Node #4005 ================
{
  "id": "31be3c1c-f4c5-4309-92b3-2fd0a3fcecc6",
  "name": "Split Out",
  "type": "n8n-nodes-base.splitOut",
  "position": [
    400,
    -20
  ],
  "parameters": {
    "options": {},
    "fieldToSplitOut": "methodResponses[0][1].list"
  },
  "typeVersion": 1
}

================ Node #4006 ================
{
  "id": "93de4dad-70d6-4e16-b351-7c540c3a4bfa",
  "name": "Email Trigger (IMAP)",
  "type": "n8n-nodes-base.emailReadImap",
  "position": [
    -20,
    -240
  ],
  "parameters": {
    "options": {
      "customEmailConfig": "[\"UNSEEN\"]"
    },
    "postProcessAction": "nothing",
    "downloadAttachments": true
  },
  "credentials": {
    "imap": {
      "id": "vFzz9hU9rTHVHs3I",
      "name": "IMAP"
    }
  },
  "typeVersion": 2
}

================ Node #4007 ================
{
  "id": "41e77a60-622f-426c-a50c-e0df03c53208",
  "name": "Get fields from source email",
  "type": "n8n-nodes-base.set",
  "position": [
    200,
    -240
  ],
  "parameters": {
    "options": {},
    "assignments": {
      "assignments": [
        {
          "id": "a9d425bd-e576-4e38-a251-b462240d3e2d",
          "name": "textPlain",
          "type": "string",
          "value": "={{ $json.textPlain }}"
        },
        {
          "id": "7071a252-fcad-4aa1-953f-205c3e403497",
          "name": "from",
          "type": "string",
          "value": "={{ $json.from }}"
        },
        {
          "id": "c4b0ed1b-590c-4d7f-b494-a0f34304cc1a",
          "name": "subject",
          "type": "string",
          "value": "={{ $json.subject }}"
        },
        {
          "id": "7e0badd1-02be-4149-b9ff-286f0943f051",
          "name": "metadata['message-id']",
          "type": "string",
          "value": "={{ $json.metadata['message-id'] }}"
        },
        {
          "id": "f87c7c15-c1d3-4696-bcd4-6677e5ddb240",
          "name": "metadata['reply-to']",
          "type": "string",
          "value": "={{ $json.metadata['reply-to'] }}"
        }
      ]
    }
  },
  "typeVersion": 3.4
}

================ Node #4008 ================
{
  "id": "f9d1a529-1377-456b-8357-d37fb3fe74f9",
  "name": "OpenAI",
  "type": "@n8n/n8n-nodes-langchain.openAi",
  "position": [
    400,
    -240
  ],
  "parameters": {
    "modelId": {
      "__rl": true,
      "mode": "list",
      "value": "gpt-4o",
      "cachedResultName": "GPT-4O"
    },
    "options": {},
    "messages": {
      "values": [
        {
          "content": "=Please analyze the following personal email and draft a casual response based solely on its content. Return only the response text without any additional introductions or formatting. The response should include appropriate greetings (e.g., \"Hi\", \"Hallo\", \"Moin\" in German or \"Hi\", \"Hello\" in English) and sign-offs (e.g., \"Gru\u00df\", \"Lieben Gru\u00df\" in German or \"Regards\" in English). Add a thanks if appropriate. Use \"Du\" only if appropriate; if the email contains \"Sie\", maintain the same formality.\n\nSubject: {{ $json.subject }}\nEmail Content: {{ $json.textPlain }}"
        }
      ]
    }
  },
  "credentials": {
    "openAiApi": {
      "id": "iW0ItIt1ZxCQrBqk",
      "name": "OpenAI"
    }
  },
  "typeVersion": 1.5
}

================ Node #4009 ================
{
  "id": "c421ddc9-b230-499c-a11d-a20a68d30c5b",
  "name": "Filter for drafts folder",
  "type": "n8n-nodes-base.filter",
  "position": [
    560,
    -20
  ],
  "parameters": {
    "options": {},
    "conditions": {
      "options": {
        "version": 2,
        "leftValue": "",
        "caseSensitive": true,
        "typeValidation": "strict"
      },
      "combinator": "and",
      "conditions": [
        {
          "id": "4e4c63d1-40fe-4314-bfe7-4fee62c78b88",
          "operator": {
            "name": "filter.operator.equals",
            "type": "string",
            "operation": "equals"
          },
          "leftValue": "={{ $json.role }}",
          "rightValue": "drafts"
        }
      ]
    }
  },
  "typeVersion": 2.2
}

================ Node #4010 ================
{
  "id": "ef19fde4-cf8c-4e19-912e-822611c18056",
  "name": "upload draft email",
  "type": "n8n-nodes-base.httpRequest",
  "notes": "https://api.fastmail.com/.well-known/jmap\n\nhttps://api.fastmail.com/jmap/session",
  "position": [
    1000,
    -120
  ],
  "parameters": {
    "url": "https://api.fastmail.com/jmap/api/",
    "method": "POST",
    "options": {},
    "jsonBody": "={\n \"using\": [\"urn:ietf:params:jmap:core\", \"urn:ietf:params:jmap:mail\"],\n \"methodCalls\": [\n [\n \"Email/set\",\n {\n \"accountId\": \"{{ $('Session').item.json.primaryAccounts['urn:ietf:params:jmap:mail'] }}\",\n \"create\": {\n \"newDraft\": {\n \"mailboxIds\": {\n \"{{ $json.draftsId }}\": true\n },\n \"keywords\": {\n \"$draft\": true\n },\n \"inReplyTo\": [\"{{ $json.metadata['message-id'] }}\"],\n \"references\": [\"{{ $json.metadata['message-id'] }}\"],\n \"from\": [{\n \"name\": \"\",\n \"email\": \"{{ $('Session').item.json.username }}\"\n }],\n \"to\": [{\n \"name\": \"{{ $json['to-friendly'] }}\",\n \"email\": \"{{ $json.to }}\"\n }],\n \"subject\": \"{{ $json.subject }}\",\n \"bodyValues\": {\n \"textBody\": {\n \"value\": \"{{ $json.message.content.replace(/\\n/g, '\\\\n') }}\"\n }\n },\n \"bodyStructure\": {\n \"partId\": \"textBody\"\n }\n }\n }\n },\n \"c1\"\n ]\n ]\n}",
    "sendBody": true,
    "sendHeaders": true,
    "specifyBody": "json",
    "authentication": "genericCredentialType",
    "genericAuthType": "httpHeaderAuth",
    "headerParameters": {
      "parameters": [
        {
          "name": "Content-Type",
          "value": "application/json"
        },
        {
          "name": "Accept",
          "value": "application/json"
        }
      ]
    }
  },
  "credentials": {
    "httpHeaderAuth": {
      "id": "3IRsYkeB2ofrwQjv",
      "name": "Fastmail"
    }
  },
  "typeVersion": 4.2
}

================ Node #4011 ================
{
  "id": "f4ecb64a-c978-4aa3-943e-c4a7f0592b91",
  "name": "gather data for draft email",
  "type": "n8n-nodes-base.set",
  "position": [
    800,
    -120
  ],
  "parameters": {
    "options": {},
    "assignments": {
      "assignments": [
        {
          "id": "78885ad0-fa62-407e-82de-f297190265be",
          "name": "draftsId",
          "type": "string",
          "value": "={{ $json.id }}"
        },
        {
          "id": "fcb31dde-0881-4b98-8bc2-e3e215148a5c",
          "name": "to-friendly",
          "type": "string",
          "value": "={{ $('Get fields from source email').item.json.from.match(/[^<]+/)[0].trim().replaceAll(/\\\"/g, \"\") }}"
        },
        {
          "id": "84c80af6-68dd-44bd-97ba-fde78a42e88a",
          "name": "subject",
          "type": "string",
          "value": "=Re: {{ $('Get fields from source email').item.json.subject }}"
        },
        {
          "id": "590e9856-9c6f-4d23-af42-8a0a1384ac00",
          "name": "message.content",
          "type": "string",
          "value": "={{ $('OpenAI').item.json.message.content }}"
        },
        {
          "id": "4f24e071-24e3-4101-a423-ad5bbcca9fc7",
          "name": "metadata['message-id']",
          "type": "string",
          "value": "={{ $('Get fields from source email').item.json.metadata['message-id'] }}"
        },
        {
          "id": "80c92734-0296-4299-9f98-15cc62e93d44",
          "name": "to",
          "type": "string",
          "value": "={{ $('Get fields from source email').item.json.metadata['reply-to'].match(/<([^>]+)>/)[1] ?? $('Get fields from source email').item.json.from.match(/<([^>]+)>/)[1] }}"
        }
      ]
    }
  },
  "typeVersion": 3.4
}

================ Node #4012 ================
{
  "id": "ca868672-85bd-4e2e-b2c6-6c6c69b78b24",
  "name": "Sticky Note",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    -580,
    -560
  ],
  "parameters": {
    "width": 493.9330818092735,
    "height": 695.2489786026621,
    "content": "## Workflow Description:\nThis n8n workflow automates the drafting of email replies for Fastmail using OpenAI's GPT-4 model. Here\u2019s the overall process:\n\n1. **Email Monitoring**: The workflow continuously monitors a specified IMAP inbox for new, unread emails.\n2. **Email Data Extraction**: When a new email is detected, it extracts relevant details such as the sender, subject, email body, and metadata.\n3. **AI Response Generation**: The extracted email content is sent to OpenAI's GPT-4, which generates a personalized draft response.\n4. **Get Fastmail Session and Mailbox IDs**: Connects to the Fastmail API to retrieve necessary session details and mailbox IDs.\n5. **Draft Identification**: Identifies the \"Drafts\" folder in the mailbox.\n6. **Draft Preparation**: Compiles all the necessary information to create the draft, including the generated response, original email details, and specified recipient.\n7. **Draft Uploading**: Uploads the prepared draft email to the \"Drafts\" folder in the Fastmail mailbox."
  },
  "typeVersion": 1
}

================ Node #4013 ================
{
  "id": "c4273cc2-1ac2-43f4-bcd1-7f42d3109373",
  "name": "Sticky Note1",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    -40,
    -560
  ],
  "parameters": {
    "color": 3,
    "width": 722.928660826031,
    "height": 285.5319148936168,
    "content": "## Prerequisites:\n1. **IMAP Email Account**: You need to configure an IMAP email account in n8n to monitor incoming emails.\n2. **Fastmail API Credentials**: A Fastmail account with JMAP API enabled. You should set up HTTP Header authentication in n8n with your Fastmail API credentials.\n3. **OpenAI API Key**: An API key from OpenAI to access GPT-4. Make sure to configure the OpenAI credentials in n8n."
  },
  "typeVersion": 1
}

================ Node #4014 ================
{
  "id": "f4b1bdd8-654d-4643-a004-ff1b2f32b5ae",
  "name": "When clicking \u2018Test workflow\u2019",
  "type": "n8n-nodes-base.manualTrigger",
  "position": [
    580,
    1100
  ],
  "parameters": {},
  "typeVersion": 1
}

================ Node #4015 ================
{
  "id": "d6b1c410-81c3-486d-bdcb-86a4c6f7bf9e",
  "name": "Create Asset",
  "type": "n8n-nodes-base.httpRequest",
  "position": [
    1940,
    580
  ],
  "parameters": {
    "url": "https://pdf-services.adobe.io/assets",
    "method": "POST",
    "options": {
      "redirect": {
        "redirect": {}
      }
    },
    "sendBody": true,
    "sendHeaders": true,
    "authentication": "genericCredentialType",
    "bodyParameters": {
      "parameters": [
        {
          "name": "mediaType",
          "value": "application/pdf"
        }
      ]
    },
    "genericAuthType": "httpHeaderAuth",
    "headerParameters": {
      "parameters": [
        {
          "name": "Authorization",
          "value": "=Bearer {{ $json.access_token }}"
        }
      ]
    }
  },
  "credentials": {
    "httpHeaderAuth": {
      "id": "PU8GmSwXswwM1Fzq",
      "name": "Adobe API calls"
    }
  },
  "typeVersion": 4.1
}

================ Node #4016 ================
{
  "id": "9e900a45-d792-4dc5-938c-0d5cdfd2e647",
  "name": "Execute Workflow Trigger",
  "type": "n8n-nodes-base.executeWorkflowTrigger",
  "position": [
    1140,
    440
  ],
  "parameters": {},
  "typeVersion": 1
}

================ Node #4017 ================
{
  "id": "859f369d-f36f-4c3f-a50d-a17214fef2a3",
  "name": "Sticky Note",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    20,
    140
  ],
  "parameters": {
    "color": 5,
    "width": 667.6107231291055,
    "height": 715.2927406867177,
    "content": "# Adobe API Wrapper\n\nSee Adobe documentation:\n- https://developer.adobe.com/document-services/docs/overview/pdf-services-api/howtos/\n- https://developer.adobe.com/document-services/docs/overview/pdf-extract-api/gettingstarted/\n\nIn short, this workflow does the following steps :\n\n- Authentication\n- Upload an asset (pdf) to adobe\n- Wait for the asset to be processed by Adobe\n- Download the result\n\n## Credential\n\nCredentials are not \"predefined\" and you'll have to create 2 custom credentials, detailed in the workflow.\n\n## Result\n\nThe result will depend on the transformation requested. It could be 1 of various files (json, zip...) accessible via download URL returned by the workflow.\n\nWorkflow can be tested with a PDF filed fetched with Dorpbox for example or any storage provider. "
  },
  "typeVersion": 1
}

================ Node #4018 ================
{
  "id": "450199c5-e588-486d-81cf-eb69cf729ab1",
  "name": "Sticky Note1",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    560,
    900
  ],
  "parameters": {
    "width": 857.2064431277577,
    "height": 463.937514110429,
    "content": "## Testing for development"
  },
  "typeVersion": 1
}

================ Node #4019 ================
{
  "id": "311a75d6-4fbe-4d8f-89b3-d4b0ee21f7ae",
  "name": "Adobe API Query",
  "type": "n8n-nodes-base.set",
  "position": [
    900,
    1000
  ],
  "parameters": {
    "options": {},
    "assignments": {
      "assignments": [
        {
          "id": "62bb6466-acf4-41e5-9444-c9ef608a6822",
          "name": "endpoint",
          "type": "string",
          "value": "extractpdf"
        },
        {
          "id": "0352f585-1434-4ab7-a704-a1e187fffa96",
          "name": "json_payload",
          "type": "object",
          "value": "={{ \n{\n \"renditionsToExtract\": [\n \"tables\"\n ],\n \"elementsToExtract\": [\n \"text\",\n \"tables\"\n ]\n }\n}}"
        }
      ]
    }
  },
  "typeVersion": 3.4
}

================ Node #4020 ================
{
  "id": "abf20778-db50-4787-a5f4-7af5d5c76efe",
  "name": "Load a test pdf file",
  "type": "n8n-nodes-base.dropbox",
  "position": [
    900,
    1180
  ],
  "parameters": {
    "path": "/valerian/w/prod/_freelance/ADEZIF/AI/Source data/Brochures pour GPT/Brochure 3M/3M_doc_emballage VERSION FINALE.pdf",
    "operation": "download",
    "authentication": "oAuth2"
  },
  "credentials": {
    "dropboxOAuth2Api": {
      "id": "9",
      "name": "Dropbox account"
    }
  },
  "typeVersion": 1
}

================ Node #4021 ================
{
  "id": "8bb2ae0c-df61-4110-af44-b1040b4340a2",
  "name": "Query + File",
  "type": "n8n-nodes-base.merge",
  "position": [
    1180,
    1080
  ],
  "parameters": {
    "mode": "combine",
    "options": {},
    "combinationMode": "mergeByPosition"
  },
  "typeVersion": 2.1
}

================ Node #4022 ================
{
  "id": "92afa6d6-daf8-4358-8c95-36473b810dc2",
  "name": "Query + File + Asset information",
  "type": "n8n-nodes-base.merge",
  "position": [
    2180,
    580
  ],
  "parameters": {
    "mode": "combine",
    "options": {},
    "combinationMode": "mergeByPosition"
  },
  "typeVersion": 2.1
}

================ Node #4023 ================
{
  "id": "5d88b8e4-0b0a-463a-88db-c45d5e87e823",
  "name": "Process Query",
  "type": "n8n-nodes-base.httpRequest",
  "position": [
    2640,
    580
  ],
  "parameters": {
    "url": "=https://pdf-services.adobe.io/operation/{{ $('Query + File + Asset information').item.json.endpoint }}",
    "method": "POST",
    "options": {
      "redirect": {
        "redirect": {}
      },
      "response": {
        "response": {
          "fullResponse": true
        }
      }
    },
    "jsonBody": "={{ \n{\n...{ \"assetID\":$('Query + File + Asset information').first().json.assetID },\n...$('Query + File + Asset information').first().json.json_payload\n}\n}}",
    "sendBody": true,
    "sendHeaders": true,
    "specifyBody": "json",
    "authentication": "genericCredentialType",
    "genericAuthType": "httpHeaderAuth",
    "headerParameters": {
      "parameters": [
        {
          "name": "Authorization",
          "value": "=Bearer {{ $('Authenticartion (get token)').first().json[\"access_token\"] }}"
        }
      ]
    }
  },
  "credentials": {
    "httpHeaderAuth": {
      "id": "PU8GmSwXswwM1Fzq",
      "name": "Adobe API calls"
    }
  },
  "typeVersion": 4.1
}

================ Node #4024 ================
{
  "id": "47278b2f-dd04-4609-90ab-52f34b9a0e72",
  "name": "Wait 5 second",
  "type": "n8n-nodes-base.wait",
  "position": [
    2860,
    580
  ],
  "webhookId": "ed00a9a8-d599-4a98-86f8-a15176352c0a",
  "parameters": {
    "unit": "seconds",
    "amount": 5
  },
  "typeVersion": 1
}

================ Node #4025 ================
{
  "id": "691b52ae-132a-4105-b1e4-bb7d55d0e347",
  "name": "Try to download the result",
  "type": "n8n-nodes-base.httpRequest",
  "position": [
    3080,
    580
  ],
  "parameters": {
    "url": "={{ $('Process Query').item.json[\"headers\"][\"location\"] }}",
    "options": {},
    "sendHeaders": true,
    "authentication": "genericCredentialType",
    "genericAuthType": "httpHeaderAuth",
    "headerParameters": {
      "parameters": [
        {
          "name": "Authorization",
          "value": "=Bearer {{ $('Authenticartion (get token)').first().json[\"access_token\"] }}"
        }
      ]
    }
  },
  "credentials": {
    "httpHeaderAuth": {
      "id": "PU8GmSwXswwM1Fzq",
      "name": "Adobe API calls"
    }
  },
  "typeVersion": 4.1
}

================ Node #4026 ================
{
  "id": "277dea14-de8d-4719-aff1-f4008d6d5c67",
  "name": "Switch",
  "type": "n8n-nodes-base.switch",
  "position": [
    3260,
    580
  ],
  "parameters": {
    "rules": {
      "values": [
        {
          "outputKey": "in progress",
          "conditions": {
            "options": {
              "leftValue": "",
              "caseSensitive": true,
              "typeValidation": "strict"
            },
            "combinator": "and",
            "conditions": [
              {
                "operator": {
                  "type": "string",
                  "operation": "equals"
                },
                "leftValue": "={{ $json.status }}",
                "rightValue": "in progress"
              }
            ]
          },
          "renameOutput": true
        },
        {
          "outputKey": "failed",
          "conditions": {
            "options": {
              "leftValue": "",
              "caseSensitive": true,
              "typeValidation": "strict"
            },
            "combinator": "and",
            "conditions": [
              {
                "id": "6d6917f6-abb9-4175-a070-a2f500d9f34f",
                "operator": {
                  "name": "filter.operator.equals",
                  "type": "string",
                  "operation": "equals"
                },
                "leftValue": "={{ $json.status }}",
                "rightValue": "failed"
              }
            ]
          },
          "renameOutput": true
        }
      ]
    },
    "options": {
      "fallbackOutput": "extra"
    }
  },
  "typeVersion": 3
}

================ Node #4027 ================
{
  "id": "8f6f8273-43ed-4a44-bb27-6ce137000472",
  "name": "Forward response to origin workflow",
  "type": "n8n-nodes-base.set",
  "position": [
    3820,
    600
  ],
  "parameters": {
    "options": {},
    "assignments": {
      "assignments": []
    },
    "includeOtherFields": true
  },
  "typeVersion": 3.4
}

================ Node #4028 ================
{
  "id": "00e2d7e3-94cd-49e5-a975-2fdc1a7a95fd",
  "name": "Sticky Note2",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    2780,
    480
  ],
  "parameters": {
    "width": 741.3069226712129,
    "height": 336.57433650102917,
    "content": "## Wait for file do be processed"
  },
  "typeVersion": 1
}

================ Node #4029 ================
{
  "id": "3667b1ba-b9a6-4e1a-94b1-61b37f1e7adc",
  "name": "Sticky Note3",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    1324.6733934850213,
    147.59707015795897
  ],
  "parameters": {
    "color": 5,
    "width": 402.63171535688423,
    "height": 700.9473619571734,
    "content": "### 1- Credential for token request\n\nCreate a \"Custom Auth\" credential like this :\n\n```\n{\n \"headers\": {\n \"Content-Type\":\"application/x-www-form-urlencoded\"\n }, \n \"body\" : {\n \"client_id\": \"****\", \n \"client_secret\":\"****\"\n }\n}\n```"
  },
  "typeVersion": 1
}

================ Node #4030 ================
{
  "id": "718bb738-8ce4-4b38-94e4-6ccac1adf9ec",
  "name": "Sticky Note4",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    1800,
    152.6219700851708
  ],
  "parameters": {
    "color": 5,
    "width": 1752.5923360342827,
    "height": 692.0175575715904,
    "content": "### 2- Credential for all other Queries\n\nCreate a \"Header Auth\" credential like this : \n\n```\nX-API-Key: **** (same value as client_id)\n```"
  },
  "typeVersion": 1
}

================ Node #4031 ================
{
  "id": "d6bc8011-699d-4388-82f5-e5f90ba8672a",
  "name": "Sticky Note5",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    740,
    140
  ],
  "parameters": {
    "color": 5,
    "width": 529.7500231395039,
    "height": 718.8735380890446,
    "content": "## Workflow Input\n\n- endpoint: splitpdf, extractpdf, ...\n- json_payload : all endpoint payload except assetID which is handled in current workflow\n- **PDF Data as n8n Binary**\n\n\n### Example for **split** : \n\n```\n{\n \"endpoint\": \"splitpdf\",\n \"json_payload\": {\n \"splitoption\": \n { \"pageRanges\": [{\"start\": 1,\"end\": 2}]}\n }\n }\n}\n```\n\n### Example for **extractpdf**\n\n```\n{\n \"endpoint\": \"splitpdf\",\n \"json_payload\": {\n \"renditionsToExtract\": [\n \"tables\"\n ],\n \"elementsToExtract\": [\n \"text\",\n \"tables\"\n ]\n }\n}\n```"
  },
  "typeVersion": 1
}

================ Node #4032 ================
{
  "id": "2bbf6d9d-8399-49ba-94ea-b90795ef44ba",
  "name": "Authenticartion (get token)",
  "type": "n8n-nodes-base.httpRequest",
  "position": [
    1500,
    580
  ],
  "parameters": {
    "url": "https://pdf-services.adobe.io/token",
    "method": "POST",
    "options": {},
    "sendBody": true,
    "contentType": "form-urlencoded",
    "authentication": "genericCredentialType",
    "bodyParameters": {
      "parameters": [
        {}
      ]
    },
    "genericAuthType": "httpCustomAuth"
  },
  "credentials": {
    "httpCustomAuth": {
      "id": "djeOoXpBafK4aiGX",
      "name": "Adobe API"
    }
  },
  "typeVersion": 4.1
}

================ Node #4033 ================
{
  "id": "be4e87e8-6e56-408f-b932-320023382f98",
  "name": "Upload PDF File (asset)",
  "type": "n8n-nodes-base.httpRequest",
  "position": [
    2440,
    580
  ],
  "parameters": {
    "url": "={{ $json.uploadUri }}",
    "method": "PUT",
    "options": {
      "redirect": {
        "redirect": {}
      }
    },
    "sendBody": true,
    "sendQuery": true,
    "contentType": "binaryData",
    "queryParameters": {
      "parameters": [
        {}
      ]
    },
    "inputDataFieldName": "data"
  },
  "typeVersion": 4.1
}

================ Node #4034 ================
{
  "id": "cb62c9a5-2f43-4328-af94-84c2cb731d9c",
  "name": "Base Image",
  "type": "n8n-nodes-base.googleDrive",
  "position": [
    260,
    660
  ],
  "parameters": {
    "fileId": {
      "__rl": true,
      "mode": "id",
      "value": "={{ $json.base }}"
    },
    "options": {
      "binaryPropertyName": "data_1"
    },
    "operation": "download"
  },
  "credentials": {
    "googleDriveOAuth2Api": {
      "id": "yOwz41gMQclOadgu",
      "name": "Google Drive account"
    }
  },
  "typeVersion": 3
}

================ Node #4035 ================
{
  "id": "b1c304cc-9949-441a-ac2a-275c8d4c51fc",
  "name": "Google Gemini Chat Model",
  "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
  "position": [
    1120,
    900
  ],
  "parameters": {
    "options": {},
    "modelName": "models/gemini-1.5-pro-latest"
  },
  "credentials": {
    "googlePalmApi": {
      "id": "dSxo6ns5wn658r8N",
      "name": "Google Gemini(PaLM) Api account"
    }
  },
  "typeVersion": 1
}

================ Node #4036 ================
{
  "id": "964d94bf-be2a-424e-ab0e-c1c1fe260ebd",
  "name": "Structured Output Parser",
  "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
  "position": [
    1320,
    900
  ],
  "parameters": {
    "schemaType": "manual",
    "inputSchema": "{\n \"type\": \"array\",\n \"items\": {\n \"type\": \"object\",\n\t\"properties\": {\n\t\t\"type\": {\n \t\t\"type\": \"string\",\n \"description\": \"type of regression. One of text, number, image, color or position.\"\n \t\t},\n\t\t\"description\": { \"type\": \"string\" },\n \"previous_state\": { \"type\": \"string\" },\n \"current_state\": { \"type\": \"string\" }\n\t}\n }\n}"
  },
  "typeVersion": 1.2
}

================ Node #4037 ================
{
  "id": "67195eb2-1729-42b0-8275-bdd6128b81aa",
  "name": "Sticky Note",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    -2340,
    20
  ],
  "parameters": {
    "color": 4,
    "width": 405.95003875719203,
    "height": 180.74812634463558,
    "content": "### Part A. Generate Base Images\nBefore we can run our visual regression tests, we must generate a series of base screenshots to compare against. This part of the workflow uses an external website screenshotting service, [Apify.com](https://www.apify.com?fpr=414q6), to achieve this. This part of the workflow should only be run when we want to update our base screenshots."
  },
  "typeVersion": 1
}

================ Node #4038 ================
{
  "id": "85f9b371-1710-4c9c-a0ed-210d9c0e5d64",
  "name": "Sticky Note1",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    162.7495769165307,
    500
  ],
  "parameters": {
    "color": 7,
    "width": 702.1744987652204,
    "height": 548.4621171664835,
    "content": "## 5. Download Base and Generate new Webpage Screenshot\n[Learn more about Apify.com](https://www.apify.com?fpr=414q6)\n\nLooping for each webpage, we'll do 2 tasks (1) download the base screenshot for the url and (2) and use our [Apify.com](https://www.apify.com?fpr=414q6) webpage screenshot actor again to generate a fresh screenshot."
  },
  "typeVersion": 1
}

================ Node #4039 ================
{
  "id": "8bff4efc-d9f9-485c-b51d-a8edc29d1105",
  "name": "Sticky Note2",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    900,
    500
  ],
  "parameters": {
    "color": 7,
    "width": 759.5372282495247,
    "height": 548.702446115556,
    "content": "## 6. Compare Screenshots using Vision Model\n[Read more about the basic LLM chain](https://docs.n8n.io/integrations/builtin/cluster-nodes/root-nodes/n8n-nodes-langchain.chainllm/)\n\nTo carry out our visual regression test, we need to send both screenshots simultaneously to our Vision model. This is easily achieved using n8n's built-in basic LLM chain where we can define two user messages of the binary type. For our vision model, we'll use Google's Gemini but any capable vision model will also do the job. A Structured Output Parser is used here to return the AI's response in JSON format, this is for easier formatting purposes which we'll get to in the next step."
  },
  "typeVersion": 1
}

================ Node #4040 ================
{
  "id": "a92d11e5-0985-4a8f-bc43-8bc0ca48e744",
  "name": "Sticky Note3",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    397.518987341772,
    93.8157360237642
  ],
  "parameters": {
    "color": 7,
    "width": 885.2402868841493,
    "height": 388.92815062755926,
    "content": "## 7. Create Report In Linear\n[Learn more about integrating with Linear.app](https://docs.n8n.io/integrations/builtin/app-nodes/n8n-nodes-base.linear)\n\nFor the final step, we'll generate a simple report which will capture any changes detected in our webpages list. Let's do this by first combining our webpages with their test results and filter out any in the page where no changes were detected. Next, we'll aggregate all changes into the Linear.app node which will be formatted into a markdown snippet and used to create a new issue in Linear. If you don't use Linear, feel free to swap this out for JIRA or even Slack."
  },
  "typeVersion": 1
}

================ Node #4041 ================
{
  "id": "3f52c006-6c0a-456d-ab3c-ee5a16726299",
  "name": "Loop Over Items",
  "type": "n8n-nodes-base.splitInBatches",
  "position": [
    -1680,
    580
  ],
  "parameters": {
    "options": {}
  },
  "typeVersion": 3
}

================ Node #4042 ================
{
  "id": "478ee25d-3f0f-4f6c-bf34-add1dc14c3cb",
  "name": "Wait",
  "type": "n8n-nodes-base.wait",
  "position": [
    -1240,
    820
  ],
  "webhookId": "f06eab66-30a7-48ad-90ee-cb3394eb2edb",
  "parameters": {
    "amount": 2
  },
  "typeVersion": 1.1
}

================ Node #4043 ================
{
  "id": "64b5f755-a85e-4ae5-ad81-113c1ef9b64c",
  "name": "Download Screenshot",
  "type": "n8n-nodes-base.httpRequest",
  "position": [
    -1260,
    360
  ],
  "parameters": {
    "url": "={{ $json.screenshotUrl }}",
    "options": {}
  },
  "typeVersion": 4.2
}

================ Node #4044 ================
{
  "id": "8f99ef1f-1cdc-4d80-b858-e9960a805dd4",
  "name": "Upload to Drive",
  "type": "n8n-nodes-base.googleDrive",
  "position": [
    -1080,
    360
  ],
  "parameters": {
    "name": "={{ $('Merge').item.json.url.urlEncode() }}",
    "driveId": {
      "__rl": true,
      "mode": "list",
      "value": "My Drive"
    },
    "options": {
      "simplifyOutput": true
    },
    "folderId": {
      "__rl": true,
      "mode": "list",
      "value": "1lAFxJPWcA_sOcjr3UUKKfFfoTwd4Stkh",
      "cachedResultUrl": "https://drive.google.com/drive/folders/1lAFxJPWcA_sOcjr3UUKKfFfoTwd4Stkh",
      "cachedResultName": "base_images"
    }
  },
  "credentials": {
    "googleDriveOAuth2Api": {
      "id": "yOwz41gMQclOadgu",
      "name": "Google Drive account"
    }
  },
  "typeVersion": 3
}

================ Node #4045 ================
{
  "id": "5e253123-89ba-42d5-b743-60bfd1ebae5b",
  "name": "Update Base Image",
  "type": "n8n-nodes-base.googleSheets",
  "position": [
    -900,
    360
  ],
  "parameters": {
    "columns": {
      "value": {
        "url": "={{ $('Merge').item.json.url }}",
        "base": "={{ $json.id }}"
      },
      "schema": [
        {
          "id": "service",
          "type": "string",
          "display": true,
          "required": false,
          "displayName": "service",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "url",
          "type": "string",
          "display": true,
          "removed": false,
          "required": false,
          "displayName": "url",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "base",
          "type": "string",
          "display": true,
          "required": false,
          "displayName": "base",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        }
      ],
      "mappingMode": "defineBelow",
      "matchingColumns": [
        "url"
      ]
    },
    "options": {},
    "operation": "appendOrUpdate",
    "sheetName": {
      "__rl": true,
      "mode": "list",
      "value": "gid=0",
      "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1RbobwHCJiYKnic6T-VA3kPr-Grd4Y_ZSQXqy2st_T84/edit#gid=0",
      "cachedResultName": "Sheet1"
    },
    "documentId": {
      "__rl": true,
      "mode": "list",
      "value": "1RbobwHCJiYKnic6T-VA3kPr-Grd4Y_ZSQXqy2st_T84",
      "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1RbobwHCJiYKnic6T-VA3kPr-Grd4Y_ZSQXqy2st_T84/edit?usp=drivesdk",
      "cachedResultName": "Visual Regression List"
    }
  },
  "credentials": {
    "googleSheetsOAuth2Api": {
      "id": "XHvC7jIRR8A2TlUl",
      "name": "Google Sheets account"
    }
  },
  "typeVersion": 4.5
}

================ Node #4046 ================
{
  "id": "fa7339b7-b7dd-4ecd-8dc2-f42f6549adb6",
  "name": "Merge",
  "type": "n8n-nodes-base.merge",
  "position": [
    -1440,
    360
  ],
  "parameters": {
    "mode": "combine",
    "options": {},
    "combineBy": "combineByPosition"
  },
  "typeVersion": 3
}

================ Node #4047 ================
{
  "id": "47845df9-a50e-429e-b81e-5eefd996d5c7",
  "name": "Schedule Trigger",
  "type": "n8n-nodes-base.scheduleTrigger",
  "position": [
    -560,
    380
  ],
  "parameters": {
    "rule": {
      "interval": [
        {
          "field": "weeks",
          "triggerAtDay": [
            1
          ],
          "triggerAtHour": 6
        }
      ]
    }
  },
  "typeVersion": 1.2
}

================ Node #4048 ================
{
  "id": "63492aa4-3535-4832-a9d0-0a949e46ec81",
  "name": "Get URLs with Missing Base Images",
  "type": "n8n-nodes-base.googleSheets",
  "position": [
    -1980,
    480
  ],
  "parameters": {
    "options": {},
    "sheetName": {
      "__rl": true,
      "mode": "list",
      "value": "gid=0",
      "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1RbobwHCJiYKnic6T-VA3kPr-Grd4Y_ZSQXqy2st_T84/edit#gid=0",
      "cachedResultName": "Sheet1"
    },
    "documentId": {
      "__rl": true,
      "mode": "list",
      "value": "1RbobwHCJiYKnic6T-VA3kPr-Grd4Y_ZSQXqy2st_T84",
      "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1RbobwHCJiYKnic6T-VA3kPr-Grd4Y_ZSQXqy2st_T84/edit?usp=drivesdk",
      "cachedResultName": "Visual Regression List"
    }
  },
  "credentials": {
    "googleSheetsOAuth2Api": {
      "id": "XHvC7jIRR8A2TlUl",
      "name": "Google Sheets account"
    }
  },
  "typeVersion": 4.5
}

================ Node #4049 ================
{
  "id": "8907f3b9-0613-4057-8adb-fd5c4e25cf72",
  "name": "Run Webpage Screenshot",
  "type": "n8n-nodes-base.httpRequest",
  "position": [
    -1420,
    820
  ],
  "parameters": {
    "url": "https://api.apify.com/v2/acts/apify~screenshot-url/run-sync-get-dataset-items",
    "method": "POST",
    "options": {},
    "jsonBody": "={{\n{\n \"delay\": 0,\n \"format\": \"png\",\n \"proxy\": {\n \"useApifyProxy\": true\n },\n \"scrollToBottom\": false,\n \"urls\": [\n {\n \"url\": $json.url\n }\n ],\n \"viewportWidth\": 1280,\n \"waitUntil\": \"domcontentloaded\",\n \"waitUntilNetworkIdleAfterScroll\": false\n}\n}}",
    "sendBody": true,
    "specifyBody": "json",
    "authentication": "genericCredentialType",
    "genericAuthType": "httpQueryAuth"
  },
  "credentials": {
    "httpQueryAuth": {
      "id": "cO2w8RDNOZg8DRa8",
      "name": "Apify API"
    }
  },
  "typeVersion": 4.2
}

================ Node #4050 ================
{
  "id": "3dc45b2d-4c4a-44d5-9b45-3e2144479603",
  "name": "Run Webpage Screenshot1",
  "type": "n8n-nodes-base.httpRequest",
  "position": [
    273,
    833
  ],
  "parameters": {
    "url": "https://api.apify.com/v2/acts/apify~screenshot-url/run-sync-get-dataset-items",
    "method": "POST",
    "options": {},
    "jsonBody": "={{\n{\n \"delay\": 0,\n \"format\": \"png\",\n \"proxy\": {\n \"useApifyProxy\": true\n },\n \"scrollToBottom\": false,\n \"urls\": [\n {\n \"url\": $json.url\n }\n ],\n \"viewportWidth\": 1280,\n \"waitUntil\": \"domcontentloaded\",\n \"waitUntilNetworkIdleAfterScroll\": false\n}\n}}",
    "sendBody": true,
    "specifyBody": "json",
    "authentication": "genericCredentialType",
    "genericAuthType": "httpQueryAuth"
  },
  "credentials": {
    "httpQueryAuth": {
      "id": "cO2w8RDNOZg8DRa8",
      "name": "Apify API"
    }
  },
  "typeVersion": 4.2
}

================ Node #4051 ================
{
  "id": "672d64fb-7782-427e-8779-953e51118fbc",
  "name": "Has Changes",
  "type": "n8n-nodes-base.filter",
  "position": [
    680,
    300
  ],
  "parameters": {
    "options": {},
    "conditions": {
      "options": {
        "version": 2,
        "leftValue": "",
        "caseSensitive": true,
        "typeValidation": "strict"
      },
      "combinator": "and",
      "conditions": [
        {
          "id": "20b18a7e-bf98-4f39-baa9-4d965097526a",
          "operator": {
            "type": "array",
            "operation": "lengthGt",
            "rightType": "number"
          },
          "leftValue": "={{ $json.output }}",
          "rightValue": 0
        }
      ]
    }
  },
  "typeVersion": 2.2
}

================ Node #4052 ================
{
  "id": "efa168ec-ff05-471b-869f-cee5a222594a",
  "name": "Combine Row and Result",
  "type": "n8n-nodes-base.set",
  "position": [
    500,
    300
  ],
  "parameters": {
    "mode": "raw",
    "options": {},
    "jsonOutput": "={{\n{\n ...$('Get Webpages List').item.json,\n output: $json.output\n}\n}}\n"
  },
  "typeVersion": 3.4
}

================ Node #4053 ================
{
  "id": "1fe901dc-f460-41b8-8042-0fcb0474092f",
  "name": "Wait1",
  "type": "n8n-nodes-base.wait",
  "position": [
    1580,
    900
  ],
  "webhookId": "6bbf2e65-bed1-4efc-bb31-09d12c644dc5",
  "parameters": {
    "amount": 1
  },
  "typeVersion": 1.1
}

================ Node #4054 ================
{
  "id": "7891f052-4073-4746-a04b-27c7c4fa1e63",
  "name": "Aggregate",
  "type": "n8n-nodes-base.aggregate",
  "position": [
    860,
    300
  ],
  "parameters": {
    "options": {},
    "aggregate": "aggregateAllItemData"
  },
  "typeVersion": 1
}

================ Node #4055 ================
{
  "id": "ef2b2ddb-51f9-4576-bd99-9efa39be5163",
  "name": "Create Report",
  "type": "n8n-nodes-base.linear",
  "position": [
    1040,
    300
  ],
  "parameters": {
    "title": "=Visual Regression Report {{ $now.format('yyyy-MM-dd') }}",
    "teamId": "1c721608-321d-4132-ac32-6e92d04bb487",
    "additionalFields": {
      "description": "=Visual Regression Workflow picked up the following changes:\n\n{{\n$json.data.map(row =>\n`### ${row.url}\n${row.output.map(issue =>\n`* **${issue.description}** - expected \"${issue.previous_state}\" but got \"${issue.current_state}\"`\n).join('\\n')}`\n).join('\\n');\n}}"
    }
  },
  "credentials": {
    "linearApi": {
      "id": "Nn0F7T9FtvRUtEbe",
      "name": "Linear account"
    }
  },
  "typeVersion": 1
}

================ Node #4056 ================
{
  "id": "477b89f7-00ca-4001-a246-0887bcb553eb",
  "name": "When clicking \u2018Test workflow\u2019",
  "type": "n8n-nodes-base.manualTrigger",
  "position": [
    -2180,
    480
  ],
  "parameters": {},
  "typeVersion": 1
}

================ Node #4057 ================
{
  "id": "eb7f6310-5465-4638-b702-5ecbd98a0199",
  "name": "Get Webpages List",
  "type": "n8n-nodes-base.googleSheets",
  "position": [
    -360,
    380
  ],
  "parameters": {
    "options": {},
    "filtersUI": {
      "values": [
        {
          "lookupValue": "2",
          "lookupColumn": "=row_number"
        }
      ]
    },
    "sheetName": {
      "__rl": true,
      "mode": "list",
      "value": "gid=0",
      "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1RbobwHCJiYKnic6T-VA3kPr-Grd4Y_ZSQXqy2st_T84/edit#gid=0",
      "cachedResultName": "Sheet1"
    },
    "documentId": {
      "__rl": true,
      "mode": "list",
      "value": "1RbobwHCJiYKnic6T-VA3kPr-Grd4Y_ZSQXqy2st_T84",
      "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1RbobwHCJiYKnic6T-VA3kPr-Grd4Y_ZSQXqy2st_T84/edit?usp=drivesdk",
      "cachedResultName": "Visual Regression List"
    }
  },
  "credentials": {
    "googleSheetsOAuth2Api": {
      "id": "XHvC7jIRR8A2TlUl",
      "name": "Google Sheets account"
    }
  },
  "typeVersion": 4.5
}

================ Node #4058 ================
{
  "id": "6c0f7341-14c9-48c2-9447-edab0ad18df7",
  "name": "For Each Webpage...",
  "type": "n8n-nodes-base.splitInBatches",
  "position": [
    -40,
    440
  ],
  "parameters": {
    "options": {}
  },
  "typeVersion": 3
}

================ Node #4059 ================
{
  "id": "62e13166-458d-4c63-8911-740f9ceaeb54",
  "name": "Sticky Note4",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    -660,
    160
  ],
  "parameters": {
    "color": 7,
    "width": 561.2038065501644,
    "height": 408.0284015307624,
    "content": "## 4. Trigger Visual Regression Test Run\n[Read more about the Schedule Trigger](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.scheduletrigger/)\n\nOnce we've generated our base images to compare with in Part A, we can now run our Visual Regression Tests. These tests are intended to check for unexpected changes to a webpage by using some form of image detection. To trigger Part B, we'll start with a schedule trigger and pull a list of webpages to test from Google Sheets."
  },
  "typeVersion": 1
}

================ Node #4060 ================
{
  "id": "8d958f44-fd2c-49b4-adbd-d8a99b2614c8",
  "name": "Sticky Note5",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    -2340,
    218.0216140230686
  ],
  "parameters": {
    "color": 7,
    "width": 626.9985071319608,
    "height": 487.40071048786325,
    "content": "## 1. Get List of Webpages to Generate Base Images\n[Learn more about using Google Sheets](https://docs.n8n.io/integrations/builtin/app-nodes/n8n-nodes-base.googlesheets/)\n\nThis workflow is split into 2 parts: Part A will generate the \"base\" screenshots to compare new screenshots against. To capture these base screenshots, we'll use Google Sheets to hold our list of webpages and their screenshot references (we'll come on to that later).\n\nExample Sheet: https://docs.google.com/spreadsheets/d/e/2PACX-1vTXRZRi55dUbLAsWZboJqH5U-EK0ZRSse8pkqANAV4Ss70otpQ97zgT8YBd3dL4d2u2UC1TTx_o1o1R/pubhtml"
  },
  "typeVersion": 1
}

================ Node #4061 ================
{
  "id": "ee776b4d-4532-4c08-ac38-35d40afbd8ad",
  "name": "Sticky Note6",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    -1480,
    580
  ],
  "parameters": {
    "color": 7,
    "width": 653.369086691465,
    "height": 443.1120543367141,
    "content": "## 2. Generate Webpage Screenshot via Apify\n[Learn more about Apify.com](https://www.apify.com?fpr=414q6)\n\nTo generate a screenshot of the webpage, we'll need a third party service since this functionality is outside the scope of n8n. Feel free to pick whichever internal or external service works for you but I've had great experience using [Apify.com](https://www.apify.com?fpr=414q6) - a popular webscraping SaaS who offer a generous free plan and require very little configuration to get started.\n\nThe Apify \"actor\" (ie. a type of scraper) we'll be using is specifically designed to take webpage screenshots."
  },
  "typeVersion": 1
}

================ Node #4062 ================
{
  "id": "3d90e103-2829-4075-b3d4-5ba848af4843",
  "name": "Sticky Note7",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    -1520,
    160
  ],
  "parameters": {
    "color": 7,
    "width": 808.188722669735,
    "height": 397.73072497123115,
    "content": "## 3. Upload Screenshot to Google Drive\n[Read more about using the Google Drive node](https://docs.n8n.io/integrations/builtin/app-nodes/n8n-nodes-base.googledrive/)\n\nOnce we have our screenshots, we'll download them from Apify and upload them to our Google Drive for safe keeping. After uploading, we'll capture the new Google Drive IDs for the images into our Google Sheet, this will allow us to reference them again when we perform the visual regression testing."
  },
  "typeVersion": 1
}

================ Node #4063 ================
{
  "id": "e47d14ec-ad78-42c8-a294-301dcd581a67",
  "name": "Download New Screenshot",
  "type": "n8n-nodes-base.httpRequest",
  "position": [
    453,
    833
  ],
  "parameters": {
    "url": "={{ $json.screenshotUrl }}",
    "options": {
      "response": {
        "response": {
          "responseFormat": "file",
          "outputPropertyName": "data_2"
        }
      }
    }
  },
  "typeVersion": 4.2
}

================ Node #4064 ================
{
  "id": "8ca118bc-3d19-48ac-9d9c-0892993da736",
  "name": "Combine Screenshots",
  "type": "n8n-nodes-base.merge",
  "position": [
    660,
    660
  ],
  "parameters": {
    "mode": "combine",
    "options": {},
    "combineBy": "combineByPosition"
  },
  "typeVersion": 3
}

================ Node #4065 ================
{
  "id": "03359cbb-d7af-4118-a32a-3fe24062dc9f",
  "name": "Sticky Note8",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    -660,
    20
  ],
  "parameters": {
    "color": 4,
    "width": 394.03359370567625,
    "height": 111.52173490405977,
    "content": "### Part B. Run Visual Regression Test\nIn this part of the workflow, we'll retrieve our list of webpages to test with our AI vision model. This part can be run as many times as required."
  },
  "typeVersion": 1
}

================ Node #4066 ================
{
  "id": "a78c0f92-aa61-483b-95bf-dd60958f182d",
  "name": "Sticky Note9",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    -2920,
    220
  ],
  "parameters": {
    "width": 553.2963720930223,
    "height": 473.4987906976746,
    "content": "## Try It Out!\n\n### This workflow implements an approach to Visual Regression Testing - a means to test websites for defects - using AI Vision Models.\n\nThis workflow uses a Google Sheet to track a list of webpages to test and is split into 2 parts; Part A generates the base screenshots of the list and Part B runs the visual regression testing.\n\nThe example spreadsheet can be found here: https://docs.google.com/spreadsheets/d/e/2PACX-1vTXRZRi55dUbLAsWZboJqH5U-EK0ZRSse8pkqANAV4Ss70otpQ97zgT8YBd3dL4d2u2UC1TTx_o1o1R/pubhtml\n\n**[Apify.com](https://www.apify.com?fpr=414q6)** is the screenshot generator of choice and a free account with $5 in credit is available via this [link](https://www.apify.com?fpr=414q6).\n\n\n### Need Help?\nJoin the [Discord](https://discord.com/invite/XPKeKXeB7d) or ask in the [Forum](https://community.n8n.io/)!"
  },
  "typeVersion": 1
}

================ Node #4067 ================
{
  "id": "a0b257e5-99f8-409a-bc67-2468db377d6c",
  "name": "Visual Regression Agent",
  "type": "@n8n/n8n-nodes-langchain.chainLlm",
  "position": [
    1120,
    740
  ],
  "parameters": {
    "text": "Identify changes between the base image and test image.",
    "messages": {
      "messageValues": [
        {
          "message": "=You help with visual regression testing for websites. Identify changes to text content, images, colors, position and layouts of the elements in the screenshots. Ignore text styling or casing changes.\nThe first image will be the base image and the second image will be the test. Note all changes to the test image which differ from the base. If there are no changes, it is okay to return an empty array."
        },
        {
          "type": "HumanMessagePromptTemplate",
          "messageType": "imageBinary",
          "binaryImageDataKey": "data_1"
        },
        {
          "type": "HumanMessagePromptTemplate",
          "messageType": "imageBinary",
          "binaryImageDataKey": "data_2"
        }
      ]
    },
    "promptType": "define",
    "hasOutputParser": true
  },
  "typeVersion": 1.4
}

================ Node #4068 ================
{
  "id": "8e1e0861-9f06-4fe2-a9c1-423bab246959",
  "name": "Get invoice",
  "type": "n8n-nodes-base.gmailTrigger",
  "position": [
    600,
    380
  ],
  "parameters": {
    "simple": false,
    "filters": {
      "labelIds": [
        "Label_7885838942566773656"
      ]
    },
    "options": {
      "downloadAttachments": true
    },
    "pollTimes": {
      "item": [
        {
          "mode": "everyMinute"
        }
      ]
    }
  },
  "credentials": {
    "gmailOAuth2": {
      "id": "fegneFqi8XJX3NJH",
      "name": "Gmail account (hana@hanamizuki.tw)"
    }
  },
  "typeVersion": 1.1
}

================ Node #4069 ================
{
  "id": "364fe355-672a-4074-800a-a7496c4fb1b2",
  "name": "Get payment",
  "type": "n8n-nodes-base.gmailTrigger",
  "position": [
    600,
    580
  ],
  "parameters": {
    "simple": false,
    "filters": {
      "labelIds": [
        "Label_371722915607774622"
      ]
    },
    "options": {
      "downloadAttachments": true
    },
    "pollTimes": {
      "item": [
        {
          "mode": "everyMinute"
        }
      ]
    }
  },
  "credentials": {
    "gmailOAuth2": {
      "id": "fegneFqi8XJX3NJH",
      "name": "Gmail account (hana@hanamizuki.tw)"
    }
  },
  "typeVersion": 1.1
}

================ Node #4070 ================
{
  "id": "e3218faf-2486-46e0-bf43-3bc52927e2bd",
  "name": "Extract invoice",
  "type": "n8n-nodes-base.extractFromFile",
  "notes": "No attachements",
  "onError": "continueRegularOutput",
  "position": [
    820,
    380
  ],
  "parameters": {
    "options": {
      "password": "E223706995"
    },
    "operation": "pdf",
    "binaryPropertyName": "attachment_0"
  },
  "typeVersion": 1
}

================ Node #4071 ================
{
  "id": "3772b3dc-7601-4005-9b61-263b2c1abd5f",
  "name": "Extract payment",
  "type": "n8n-nodes-base.extractFromFile",
  "notes": "No attachements",
  "onError": "continueRegularOutput",
  "position": [
    820,
    580
  ],
  "parameters": {
    "options": {
      "password": "E223706995"
    },
    "operation": "pdf",
    "binaryPropertyName": "attachment_0"
  },
  "typeVersion": 1
}

================ Node #4072 ================
{
  "id": "10d57038-940e-47aa-84ea-3850f61ac757",
  "name": "HTML",
  "type": "n8n-nodes-base.html",
  "notes": "\".spend-table\" here is an example when the email use \"spend\" html tags to display each spends.\ne.g.\n<div class=spend-table>Spend 1</div>\n<div class=spend-table>Spend 2</div>",
  "position": [
    1440,
    200
  ],
  "parameters": {
    "options": {},
    "operation": "extractHtmlContent",
    "dataPropertyName": "=html",
    "extractionValues": {
      "values": [
        {
          "key": "spend",
          "cssSelector": ".spend-table",
          "returnArray": true
        }
      ]
    }
  },
  "typeVersion": 1.2
}

================ Node #4073 ================
{
  "id": "dae6d22e-587d-4102-b006-20a341ede5ee",
  "name": "Split Out",
  "type": "n8n-nodes-base.splitOut",
  "position": [
    1660,
    200
  ],
  "parameters": {
    "options": {},
    "fieldToSplitOut": "spend"
  },
  "typeVersion": 1
}

================ Node #4074 ================
{
  "id": "0d75443d-0d23-4120-95e5-b3128a760fb4",
  "name": "Structured Output Parser1",
  "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
  "position": [
    2500,
    640
  ],
  "parameters": {
    "schemaType": "manual",
    "inputSchema": "{\n \"title\": \"Expense Record Schema\",\n \"description\": \"Schema used to parse expense record emails, including date, service name, transaction details, amount, category, currency, and card.\",\n \"type\": \"object\",\n \"properties\": {\n \"date\": {\n \"type\": \"string\",\n \"description\": \"Transaction date, can refer to the email date or the consumption date within the content. If there are multiple dates, use the earliest one. The format is 'YYYY-MM-DD hh:mm', e.g., '2024-09-02 10:12'.\",\n \"examples\": [\"2024-09-02 10:12\"]\n },\n \"service\": {\n \"type\": [\"string\", \"null\"],\n \"description\": \"Name of the service or store, such as 'GOOGLE', 'Uber', etc.\",\n \"examples\": [\"GOOGLE\", \"Uber Eats\", \"Uber\", \"CLAUDE.AI\"]\n },\n \"details\": {\n \"type\": [\"string\", \"null\"],\n \"description\": \"Detailed transaction information, such as overseas card usage, online transactions, restaurant names, or consumption details. If none, can be left blank or null.\",\n \"examples\": [\"Uber: from Fuxing North Road to Minquan East Road\", \"Restaurant name\", null]\n },\n \"amount\": {\n \"type\": \"number\",\n \"description\": \"Transaction amount. If in USD, keep two decimal places (e.g., 50.12); if in TWD, use integers (e.g., 550).\",\n \"examples\": [50.12, 550]\n },\n \"category\": {\n \"type\": \"string\",\n \"description\": \"Transaction category\",\n \"enum\": [\"Food & Beverage\", \"Transportation\", \"Daily Necessities\", \"Housing\", \"Electronics\", \"Beauty & Hair\", \"Apparel & Accessories\", \"Medical & Healthcare\", \"Pets\", \"Education\", \"Entertainment\", \"Cloud Services\", \"Automobile\", \"Gifts\", \"Family Care\", \"Counseling\", \"Insurance\", \"Taxes\", \"Transfer Fees\", \"Music\", \"Fitness\", \"Travel\", \"Lending\", \"Donations\", \"Advertising\", \"Finance\"],\n \"examples\": [\"Food & Beverage\", \"Transportation\"]\n },\n \"currency\": {\n \"type\": \"string\",\n \"description\": \"Currency code used in the transaction. If the amount starts with NT$, then currency is TWD.\",\n \"enum\": [\"TWD\", \"USD\", \"JPY\", \"EUR\", \"SGD\"],\n \"examples\": [\"USD\", \"TWD\"]\n },\n \"card\": {\n \"type\": [\"string\", \"null\"],\n \"description\": \"Credit card used for the transaction.\",\n \"enum\": [\"HSBC 3088\", \"HSBC 3854\", \"Fubon Card\", \"Crypto.com Card\", \"Cathay Card\", null],\n \"examples\": [\"HSBC 3088\", \"HSBC 3854\"]\n }\n },\n \"required\": [\"date\", \"amount\", \"category\", \"currency\"]\n}\n"
  },
  "typeVersion": 1.2
}

================ Node #4075 ================
{
  "id": "7ade499c-015b-4903-8129-6c135264bf75",
  "name": "Google Gemini Chat Model1",
  "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
  "position": [
    2320,
    640
  ],
  "parameters": {
    "options": {},
    "modelName": "models/gemini-1.5-flash"
  },
  "credentials": {
    "googlePalmApi": {
      "id": "QR3KfTwhKpbgAGWU",
      "name": "Google Gemini(PaLM) Api account"
    }
  },
  "typeVersion": 1
}

================ Node #4076 ================
{
  "id": "10fe4a38-139b-4284-9e86-dd36e472f59e",
  "name": "Send",
  "type": "n8n-nodes-base.googleSheets",
  "position": [
    2740,
    480
  ],
  "parameters": {
    "columns": {
      "value": {
        "date": "={{ $json.output.date }}",
        "amount": "={{ $json.output.amount }}",
        "source": "n8n",
        "details": "={{ $json.output.details }}",
        "payment": "={{ $json.output.card }}",
        "service": "={{ $json.output.service }}",
        "category": "={{ $json.output.category }}",
        "currency": "={{ $json.output.currency }}"
      },
      "schema": [
        {
          "id": "date",
          "type": "string",
          "display": true,
          "required": false,
          "displayName": "date",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "service",
          "type": "string",
          "display": true,
          "required": false,
          "displayName": "service",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "details",
          "type": "string",
          "display": true,
          "required": false,
          "displayName": "details",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "amount",
          "type": "string",
          "display": true,
          "required": false,
          "displayName": "amount",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "category",
          "type": "string",
          "display": true,
          "removed": false,
          "required": false,
          "displayName": "category",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "currency",
          "type": "string",
          "display": true,
          "required": false,
          "displayName": "currency",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "payment",
          "type": "string",
          "display": true,
          "removed": false,
          "required": false,
          "displayName": "payment",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "source",
          "type": "string",
          "display": true,
          "removed": false,
          "required": false,
          "displayName": "source",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        }
      ],
      "mappingMode": "defineBelow",
      "matchingColumns": []
    },
    "options": {},
    "operation": "append",
    "sheetName": {
      "__rl": true,
      "mode": "list",
      "value": 2071031170,
      "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1ccwhQeUSUkINccAucC6_clRyNF5Mw4IjIxAtcH4ftIs/edit#gid=2071031170",
      "cachedResultName": "raw data 2"
    },
    "documentId": {
      "__rl": true,
      "mode": "url",
      "value": "https://docs.google.com/spreadsheets/d/1ccwhQeUSUkINccAucC6_clRyNF5Mw4IjIxAtcH4ftIs/edit?gid=370005862#gid=370005862"
    }
  },
  "credentials": {
    "googleSheetsOAuth2Api": {
      "id": "flAcWUeyvdjh7MiW",
      "name": "Google Sheets account: hana@hanamizuki.tw (GCP: n8n)"
    }
  },
  "retryOnFail": true,
  "typeVersion": 4.5
}

================ Node #4077 ================
{
  "id": "87ab4932-aae5-4c5a-a175-c782bebdf781",
  "name": "Set data 0",
  "type": "n8n-nodes-base.set",
  "position": [
    1860,
    200
  ],
  "parameters": {
    "options": {},
    "assignments": {
      "assignments": [
        {
          "id": "75b16672-71cf-4157-bcb6-683099ff1620",
          "name": "email_date",
          "type": "string",
          "value": "={{ $('Switch').item.json.date }}"
        },
        {
          "id": "3298f680-5d17-42fd-8b41-a6ca621af37d",
          "name": "email_subject",
          "type": "string",
          "value": "={{ $('Switch').item.json.subject }}"
        },
        {
          "id": "cf7181b7-fef9-437a-8bbe-cd4a4eda85b8",
          "name": "email_content",
          "type": "string",
          "value": "={{ $ifEmpty($json.spend, $ifEmpty( $json.text, $json.html)) }}"
        },
        {
          "id": "1a524cb4-6975-4d45-ac0e-f1ac1f9b0417",
          "name": "email_type",
          "type": "number",
          "value": "=0"
        }
      ]
    }
  },
  "typeVersion": 3.4
}

================ Node #4078 ================
{
  "id": "c2829f41-1e3f-40bc-8d4b-9fd1bac41381",
  "name": "Set data 1",
  "type": "n8n-nodes-base.set",
  "position": [
    1660,
    440
  ],
  "parameters": {
    "options": {},
    "assignments": {
      "assignments": [
        {
          "id": "75b16672-71cf-4157-bcb6-683099ff1620",
          "name": "email_date",
          "type": "string",
          "value": "={{ $json.date }}"
        },
        {
          "id": "3298f680-5d17-42fd-8b41-a6ca621af37d",
          "name": "email_subject",
          "type": "string",
          "value": "={{ $json.subject }}"
        },
        {
          "id": "cf7181b7-fef9-437a-8bbe-cd4a4eda85b8",
          "name": "email_content",
          "type": "string",
          "value": "={{ $ifEmpty( $json.text, $json.html) }}"
        },
        {
          "id": "1a524cb4-6975-4d45-ac0e-f1ac1f9b0417",
          "name": "email_type",
          "type": "number",
          "value": "=1"
        }
      ]
    }
  },
  "typeVersion": 3.4
}

================ Node #4079 ================
{
  "id": "ecf9ea3c-3f34-43ef-b101-ca4a420e4c24",
  "name": "Set data 2",
  "type": "n8n-nodes-base.set",
  "position": [
    1640,
    740
  ],
  "parameters": {
    "options": {},
    "assignments": {
      "assignments": [
        {
          "id": "75b16672-71cf-4157-bcb6-683099ff1620",
          "name": "email_date",
          "type": "string",
          "value": "={{ $json.date }}"
        },
        {
          "id": "3298f680-5d17-42fd-8b41-a6ca621af37d",
          "name": "email_subject",
          "type": "string",
          "value": "={{ $json.subject }}"
        },
        {
          "id": "cf7181b7-fef9-437a-8bbe-cd4a4eda85b8",
          "name": "email_content",
          "type": "string",
          "value": "={{ $ifEmpty( $json.text, $json.html) }}"
        },
        {
          "id": "1a524cb4-6975-4d45-ac0e-f1ac1f9b0417",
          "name": "email_type",
          "type": "number",
          "value": "=2"
        }
      ]
    }
  },
  "typeVersion": 3.4
}

================ Node #4080 ================
{
  "id": "0d9f8bde-af54-480c-bdc9-15cd5b0e6f28",
  "name": "Invoice data",
  "type": "n8n-nodes-base.set",
  "position": [
    1040,
    380
  ],
  "parameters": {
    "options": {},
    "assignments": {
      "assignments": [
        {
          "id": "ac7c18ba-1944-4019-aa85-03d7751a7e1c",
          "name": "html",
          "type": "string",
          "value": "={{ $('Get invoice').item.json.html }}"
        },
        {
          "id": "5eb54501-9c55-437d-9918-e5eff92e2229",
          "name": "subject",
          "type": "string",
          "value": "={{ $('Get invoice').item.json.subject }}"
        },
        {
          "id": "87eebc48-0b95-46ae-b41b-b6540b1afaa9",
          "name": "date",
          "type": "string",
          "value": "={{ $('Get invoice').item.json.date }}"
        },
        {
          "id": "c6b75367-239e-4e88-9e17-90ee75a064e2",
          "name": "text",
          "type": "string",
          "value": "={{ $('Get invoice').item.json.text }} \\n {{ $json.text }}"
        },
        {
          "id": "7d5b4b42-6b90-4ffe-ab8f-4288771d1302",
          "name": "label",
          "type": "string",
          "value": "={{ $('Get invoice').item.json.labelIds }}"
        },
        {
          "id": "551ea1c3-01ca-4615-9d52-a880e24252ed",
          "name": "from",
          "type": "string",
          "value": "={{ $('Get invoice').item.json.from.text }}"
        }
      ]
    }
  },
  "typeVersion": 3.4
}

================ Node #4081 ================
{
  "id": "c1c4c490-d7a9-4b16-a81b-a338103764b6",
  "name": "Payment data",
  "type": "n8n-nodes-base.set",
  "position": [
    1040,
    580
  ],
  "parameters": {
    "options": {},
    "assignments": {
      "assignments": [
        {
          "id": "ac7c18ba-1944-4019-aa85-03d7751a7e1c",
          "name": "html",
          "type": "string",
          "value": "={{ $('Get payment').item.json.html }}"
        },
        {
          "id": "5eb54501-9c55-437d-9918-e5eff92e2229",
          "name": "subject",
          "type": "string",
          "value": "={{ $('Get payment').item.json.subject }}"
        },
        {
          "id": "87eebc48-0b95-46ae-b41b-b6540b1afaa9",
          "name": "date",
          "type": "string",
          "value": "={{ $('Get payment').item.json.date }}"
        },
        {
          "id": "c6b75367-239e-4e88-9e17-90ee75a064e2",
          "name": "text",
          "type": "string",
          "value": "={{ $('Get payment').item.json.text }} \\n {{ $json.text }}"
        },
        {
          "id": "7d5b4b42-6b90-4ffe-ab8f-4288771d1302",
          "name": "label",
          "type": "string",
          "value": "={{ $('Get payment').item.json.labelIds }}"
        },
        {
          "id": "2c976be1-48b8-42fa-b1c9-2fd315da89ae",
          "name": "from",
          "type": "string",
          "value": "={{ $('Get payment').item.json.from.text }}"
        }
      ]
    }
  },
  "typeVersion": 3.4
}

================ Node #4082 ================
{
  "id": "01c5a934-9412-4ef9-81a8-c4aef19c8868",
  "name": "Switch",
  "type": "n8n-nodes-base.switch",
  "position": [
    1300,
    480
  ],
  "parameters": {
    "rules": {
      "values": [
        {
          "outputKey": "Multiple payment info in one mail",
          "conditions": {
            "options": {
              "version": 1,
              "leftValue": "",
              "caseSensitive": true,
              "typeValidation": "strict"
            },
            "combinator": "and",
            "conditions": [
              {
                "operator": {
                  "type": "string",
                  "operation": "contains"
                },
                "leftValue": "={{ $json.from }}",
                "rightValue": "service@pxbillrc01.cathaybk.com.tw"
              }
            ]
          },
          "renameOutput": true
        },
        {
          "outputKey": "One payment info in one mail",
          "conditions": {
            "options": {
              "version": 1,
              "leftValue": "",
              "caseSensitive": true,
              "typeValidation": "strict"
            },
            "combinator": "and",
            "conditions": [
              {
                "id": "47e3b84f-903c-4594-9297-785cfbea0316",
                "operator": {
                  "type": "string",
                  "operation": "regex"
                },
                "leftValue": "={{ $json.from }}",
                "rightValue": "\\b(?:noreply@messaging\\.hsbc\\.com\\.tw|hello@crypto\\.com|taipeifubon\\.com\\.tw)\\b"
              }
            ]
          },
          "renameOutput": true
        },
        {
          "outputKey": "Invoices",
          "conditions": {
            "options": {
              "version": 1,
              "leftValue": "",
              "caseSensitive": true,
              "typeValidation": "strict"
            },
            "combinator": "and",
            "conditions": [
              {
                "id": "db9d40f1-8fa4-4908-9010-985072b3f319",
                "operator": {
                  "type": "string",
                  "operation": "notRegex"
                },
                "leftValue": "={{ $json.from }}",
                "rightValue": "\\b(?:noreply@messaging\\.hsbc\\.com\\.tw|hello@crypto\\.com|taipeifubon\\.com\\.tw)\\b"
              }
            ]
          },
          "renameOutput": true
        }
      ]
    },
    "options": {}
  },
  "executeOnce": false,
  "typeVersion": 3.1,
  "alwaysOutputData": false
}

================ Node #4083 ================
{
  "id": "250bbd9a-3d22-4a04-910c-7cec437b3c33",
  "name": "Groq Chat Model",
  "type": "@n8n/n8n-nodes-langchain.lmChatGroq",
  "position": [
    2320,
    1120
  ],
  "parameters": {
    "model": "llama-3.2-11b-text-preview",
    "options": {}
  },
  "credentials": {
    "groqApi": {
      "id": "vaG2nZFaKeQarQHw",
      "name": "Groq account"
    }
  },
  "typeVersion": 1
}

================ Node #4084 ================
{
  "id": "b8d2b2fc-748c-43c5-a82b-d5e7357bbef8",
  "name": "Structured Output Parser",
  "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
  "position": [
    2520,
    1120
  ],
  "parameters": {
    "schemaType": "manual",
    "inputSchema": "{\n \"title\": \"Transaction Record Schema\",\n \"description\": \"Schema for parsing transaction record emails, including date, service name, transaction details, amount, category, currency, and card.\",\n \"type\": \"object\",\n \"properties\": {\n \"date\": {\n \"type\": \"string\",\n \"description\": \"Transaction date, can refer to email date or transaction date in content. If multiple dates exist, use the earliest date. Format is 'YYYY-MM-DD hh:mm', e.g., '2024-09-02 10:12'.\",\n \"examples\": [\"2024-09-02 10:12\"]\n },\n \"service\": {\n \"type\": [\"string\", \"null\"],\n \"description\": \"Name of service or store, e.g., 'GOOGLE', 'Uber', etc.\",\n \"examples\": [\"GOOGLE\", \"Uber Eats\", \"Uber\", \"CLAUDE.AI\"]\n },\n \"details\": {\n \"type\": [\"string\", \"null\"],\n \"description\": \"Detailed transaction information, such as overseas purchase, online purchase, restaurant name, or consumption details. Can be empty or null if not available.\",\n \"examples\": [\"Uber: From Fuxing North Road to Minquan East Road\", \"Restaurant name\", null]\n },\n \"amount\": {\n \"type\": \"number\",\n \"description\": \"Transaction amount. For USD, keep two decimal places (e.g., 50.12); for TWD, use integers (e.g., 550).\",\n \"examples\": [50.12, 550]\n },\n \"category\": {\n \"type\": \"string\",\n \"description\": \"Transaction category\",\n \"enum\": [\"Food & Beverage\", \"Transportation\", \"Daily Necessities\", \"Housing\", \"Electronics\", \"Beauty & Hair\", \"Clothing & Accessories\", \"Healthcare\", \"Pets\", \"Education\", \"Entertainment\", \"Cloud Services\", \"Automotive\", \"Gifts\", \"Family Support\", \"Counseling\", \"Insurance\", \"Taxes\", \"Transfer Fee\", \"Music\", \"Fitness\", \"Travel\", \"Lending\", \"Donations\", \"Advertising\", \"Finance\"],\n \"examples\": [\"Food & Beverage\", \"Transportation\"]\n },\n \"currency\": {\n \"type\": \"string\",\n \"description\": \"Currency code used for the transaction, if amount starts with NT$, currency is TWD.\",\n \"enum\": [\"TWD\", \"USD\", \"JPY\", \"EUR\", \"SGD\"],\n \"examples\": [\"USD\", \"TWD\"]\n }\n },\n \"required\": [\"date\", \"amount\", \"category\", \"currency\"]\n}"
  },
  "typeVersion": 1.2
}

================ Node #4085 ================
{
  "id": "39b10715-54fe-4c07-9ca1-afbe43ae519e",
  "name": "Send1",
  "type": "n8n-nodes-base.googleSheets",
  "position": [
    2740,
    900
  ],
  "parameters": {
    "columns": {
      "value": {
        "date": "={{ $json.output.date }}",
        "amount": "={{ $json.output.amount }}",
        "source": "n8n",
        "details": "={{ $json.output.details }}",
        "payment": "=",
        "service": "={{ $json.output.service }}",
        "category": "={{ $json.output.category }}",
        "currency": "={{ $json.output.currency }}"
      },
      "schema": [
        {
          "id": "date",
          "type": "string",
          "display": true,
          "required": false,
          "displayName": "date",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "service",
          "type": "string",
          "display": true,
          "required": false,
          "displayName": "service",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "details",
          "type": "string",
          "display": true,
          "required": false,
          "displayName": "details",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "amount",
          "type": "string",
          "display": true,
          "required": false,
          "displayName": "amount",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "category",
          "type": "string",
          "display": true,
          "removed": false,
          "required": false,
          "displayName": "category",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "currency",
          "type": "string",
          "display": true,
          "required": false,
          "displayName": "currency",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "payment",
          "type": "string",
          "display": true,
          "removed": false,
          "required": false,
          "displayName": "payment",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "source",
          "type": "string",
          "display": true,
          "removed": false,
          "required": false,
          "displayName": "source",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        }
      ],
      "mappingMode": "defineBelow",
      "matchingColumns": []
    },
    "options": {},
    "operation": "append",
    "sheetName": {
      "__rl": true,
      "mode": "list",
      "value": 2071031170,
      "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1ccwhQeUSUkINccAucC6_clRyNF5Mw4IjIxAtcH4ftIs/edit#gid=2071031170",
      "cachedResultName": "raw data 2"
    },
    "documentId": {
      "__rl": true,
      "mode": "url",
      "value": "https://docs.google.com/spreadsheets/d/1ccwhQeUSUkINccAucC6_clRyNF5Mw4IjIxAtcH4ftIs/edit?gid=370005862#gid=370005862"
    }
  },
  "credentials": {
    "googleSheetsOAuth2Api": {
      "id": "flAcWUeyvdjh7MiW",
      "name": "Google Sheets account: hana@hanamizuki.tw (GCP: n8n)"
    }
  },
  "retryOnFail": true,
  "typeVersion": 4.5
}

================ Node #4086 ================
{
  "id": "112f5198-871e-42f9-9376-5fa074497413",
  "name": "Extract details1",
  "type": "@n8n/n8n-nodes-langchain.chainLlm",
  "position": [
    2320,
    900
  ],
  "parameters": {
    "text": "=Email Date: {{ $json.email_date }}\nEmail Subject: {{ $json.email_subject }}\nEmail Content:\n{{ $json.email_content }}",
    "messages": {
      "messageValues": [
        {
          "message": "=Please analyze the following email to extract transaction details for bookkeeping purposes.\n\nPlease extract relevant transaction details such as transaction date, amount, merchant name, and any other pertinent information, and provide them in a structured format suitable for accounting records."
        }
      ]
    },
    "promptType": "define",
    "hasOutputParser": true
  },
  "retryOnFail": true,
  "typeVersion": 1.4
}

================ Node #4087 ================
{
  "id": "b9c3cb29-e68e-4ae0-8930-185c17bc6cab",
  "name": "Merge",
  "type": "n8n-nodes-base.merge",
  "position": [
    2060,
    440
  ],
  "parameters": {},
  "typeVersion": 3
}

================ Node #4088 ================
{
  "id": "b50d632c-b762-4f61-b34a-91f941100668",
  "name": "Extract details",
  "type": "@n8n/n8n-nodes-langchain.chainLlm",
  "position": [
    2320,
    480
  ],
  "parameters": {
    "text": "=Email Date: {{ $json.email_date }}\nEmail Subject: {{ $json.email_subject }}\nEmail Content:\n{{ $json.email_content }}\nEmail Source: {{ $json.email_type }}",
    "messages": {
      "messageValues": [
        {
          "message": "=Please analyze the following email to extract transaction details for bookkeeping purposes. The \"Email Source\" field indicates the origin of the email, where 0 represents Cathay Bank card statements and 1 represents other credit card statements.\n\nPlease extract relevant transaction details such as transaction date, amount, merchant name, and any other pertinent information, and provide them in a structured format suitable for accounting records."
        }
      ]
    },
    "promptType": "define",
    "hasOutputParser": true
  },
  "retryOnFail": true,
  "typeVersion": 1.4
}

================ Node #4089 ================
{
  "id": "7a7e2e36-a8b6-48dc-ad57-2f5eea691285",
  "name": "Sticky Note",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    500,
    220
  ],
  "parameters": {
    "width": 720,
    "height": 560,
    "content": "# A. Get data\n- Set up labels in Gmail\n- Suggested using Gmail filters to move emails to labels automatically"
  },
  "typeVersion": 1
}

================ Node #4090 ================
{
  "id": "108becad-1a7b-4409-9cb3-36a1c7b64786",
  "name": "Sticky Note1",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    1280,
    -20
  ],
  "parameters": {
    "width": 920,
    "height": 960,
    "content": "# B. Deal with the data\n1. Multiple payment info in one mail: input the \"sender\" of the emails that contain more than one payment info. e.g. credit card daily spend notification\n2. One payment info in one mail: input the \"sender\" of the emails that contain only one payment info. e.g. instant credit card spend notification\n3. Invoices: input the mails that contain one invoice in one mail"
  },
  "typeVersion": 1
}

================ Node #4091 ================
{
  "id": "7123f576-87f9-4df1-ae24-f3e5289c7234",
  "name": "Sticky Note2",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    2240,
    320
  ],
  "parameters": {
    "width": 840,
    "height": 980,
    "content": "# C. Get spend details and send to google sheet\n- Edit the output schema to fit your google sheet format\n- Edit the prompt to fit your needs"
  },
  "typeVersion": 1
}

================ Node #4092 ================
{
  "id": "f1142274-898d-43da-a7ff-2b2e03f2dc73",
  "name": "Execute Workflow Trigger",
  "type": "n8n-nodes-base.executeWorkflowTrigger",
  "position": [
    1220,
    840
  ],
  "parameters": {},
  "typeVersion": 1
}

================ Node #4093 ================
{
  "id": "1f407421-2dd6-4e0c-bc74-cfb291e475ed",
  "name": "Query Confluence",
  "type": "n8n-nodes-base.httpRequest",
  "position": [
    1640,
    840
  ],
  "parameters": {
    "url": "https://n8n-labs.atlassian.net/wiki/rest/api/search",
    "options": {},
    "sendQuery": true,
    "sendHeaders": true,
    "authentication": "genericCredentialType",
    "genericAuthType": "httpBasicAuth",
    "queryParameters": {
      "parameters": [
        {
          "name": "cql",
          "value": "=text ~ \"{{ $json.query }}\""
        }
      ]
    },
    "headerParameters": {
      "parameters": [
        {
          "name": "accept",
          "value": "application/json"
        }
      ]
    }
  },
  "credentials": {
    "httpBasicAuth": {
      "id": "B1Cj4Uh9d9WKWxBO",
      "name": "Confluence API Key"
    }
  },
  "typeVersion": 4.2
}

================ Node #4094 ================
{
  "id": "f1ab7e79-6bd8-4b87-b6dc-96f9d46cdd16",
  "name": "Return Tool Response",
  "type": "n8n-nodes-base.set",
  "position": [
    2040,
    840
  ],
  "parameters": {
    "options": {},
    "assignments": {
      "assignments": [
        {
          "id": "c1d46e59-9340-43f3-bc2a-fbd4e0def74f",
          "name": "response",
          "type": "string",
          "value": "=\"Title\": \"{{ $json.results[0].content.title }}\"\n\"Link\": \"{{ $json._links.base }}{{ $json.results[0].content._links.webui }}\"\n\"Content\": {{ $json[\"results\"][0][\"excerpt\"] }}\nWhen users request the password, make sure to send them the link above to reset it in markdown. "
        }
      ]
    }
  },
  "typeVersion": 3.3
}

================ Node #4095 ================
{
  "id": "19be50a2-4835-48a6-b06a-7996231c519d",
  "name": "Sticky Note",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    1037.1879432624112,
    466.2978723404259
  ],
  "parameters": {
    "color": 7,
    "width": 460.26595744680884,
    "height": 598.588007755415,
    "content": "![n8n](https://i.imgur.com/lKnBNnH.png)\n## Receive Query from Parent Workflow\nThis node receives input from the AI Agent in the top level workflow where it passes just the Slack Message directly to this workflow."
  },
  "typeVersion": 1
}

================ Node #4096 ================
{
  "id": "0012feaa-89f5-40a4-86d6-98e0e9648bd5",
  "name": "Sticky Note3",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    1520,
    469.2511978555872
  ],
  "parameters": {
    "color": 7,
    "width": 350.94680851063845,
    "height": 588.3931371954408,
    "content": "![confluence](https://i.imgur.com/rM48yHY.png)\n## Search Confluence\nThe newly created prompt is then sent into Confluence's API as a search string. \n\nTo replace this with your own KB tool, find the Endpoint that allows search, and replace this HTTP Request node with your own HTTP Request or Built in n8n node and pass the search variable into the search input. "
  },
  "typeVersion": 1
}

================ Node #4097 ================
{
  "id": "6982692e-61c5-47fc-9946-ada32d5fa2a1",
  "name": "Sticky Note4",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    1900,
    460
  ],
  "parameters": {
    "color": 7,
    "width": 648.2749545725208,
    "height": 597.2865893156994,
    "content": "![n8n](https://i.imgur.com/lKnBNnH.png)\n## Respond to Parent Workflow with Confluence Results\nThe final output is then sent to the Parent workflow to be used in the final AI Agent API call to the LLM of your choice as part of the final output. Here is the prompt output: \n```\n\"Title\": \"Title of content so AI Agent will know the name of the content\"\n\"Link\": \"Link to URL of KB article. Great for giving back to user to self help\"\n\"Content\": Truncated output of content so that the large language model will have more context in it's final response. \nWhen users request the password, make sure to send them the link above to reset it in markdown. \n```"
  },
  "typeVersion": 1
}

================ Node #4098 ================
{
  "id": "9570ee97-8508-4c7f-a2da-a327fbc7db46",
  "name": "Sticky Note5",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    460,
    460
  ],
  "parameters": {
    "width": 543.0233137166141,
    "height": 854.6009864319319,
    "content": "![n8n](https://i.imgur.com/qXWqiOd.png)\n## Enhance Query Resolution with the Knowledge Base Tool!\n\nOur **Knowledge Base Tool** is crafted to seamlessly integrate into the IT Department Q&A Workflow, enhancing the IT support process by enabling sophisticated search and response capabilities via Slack.\n\n**Workflow Functionality:**\n- **Receive Queries**: Directly accepts user queries from the main workflow, initiating a dynamic search process.\n- **AI-Powered Query Transformation**: Utilizes OpenAI's GPT-4 to refine user queries into searchable keywords that are most likely to retrieve relevant information from the Knowledge Base.\n- **Confluence Integration**: Executes searches within Confluence using the refined keywords to find the most applicable articles and information.\n- **Deliver Accurate Responses**: Gathers essential details from the Confluence results, including article titles, links, and summaries, preparing them to be sent back to the parent workflow for final user response.\n\n\n**Quick Setup Guide:**\n- Ensure correct configurations are set for OpenAI and Confluence API integrations.\n- Customize query transformation logic as per your specific Knowledge Base structure to improve search accuracy.\n\n\n**Need Help?**\n- Dive into our [Documentation](https://docs.n8n.io) or get support from the [Community Forum](https://community.n8n.io)!\n\n\nDeploy this tool to provide precise and informative responses, significantly boosting the efficiency and reliability of your IT support workflow.\n"
  },
  "typeVersion": 1
}

================ Node #4099 ================
{
  "id": "d45cf237-dbbc-48ed-a7f0-fa9506ae1d67",
  "name": "Update priority in todoist",
  "type": "n8n-nodes-base.todoist",
  "position": [
    2060,
    520
  ],
  "parameters": {
    "taskId": "={{ $('Get inbox tasks').item.json.id }}",
    "operation": "update",
    "updateFields": {
      "priority": "={{ $('Your Projects').first().json.projects[$json.message.content] }}"
    }
  },
  "credentials": {
    "todoistApi": {
      "id": "1",
      "name": "Todoist account"
    }
  },
  "retryOnFail": true,
  "typeVersion": 2,
  "waitBetweenTries": 5000
}

================ Node #4100 ================
{
  "id": "4d0ebf98-5a1d-4dfd-85df-da182b3c5099",
  "name": "Schedule Trigger",
  "type": "n8n-nodes-base.scheduleTrigger",
  "position": [
    600,
    520
  ],
  "parameters": {
    "rule": {
      "interval": [
        {}
      ]
    }
  },
  "typeVersion": 1.2
}

================ Node #4101 ================
{
  "id": "a950e470-6885-42f4-9b17-7b2c2525d3e4",
  "name": "Get inbox tasks",
  "type": "n8n-nodes-base.todoist",
  "position": [
    1020,
    520
  ],
  "parameters": {
    "filters": {
      "projectId": "938017196"
    },
    "operation": "getAll",
    "returnAll": true
  },
  "credentials": {
    "todoistApi": {
      "id": "1",
      "name": "Todoist account"
    }
  },
  "retryOnFail": true,
  "typeVersion": 2,
  "waitBetweenTries": 5000
}

================ Node #4102 ================
{
  "id": "093bcb2e-79b7-427e-b13d-540a5b28f427",
  "name": "Sticky Note",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    540,
    200
  ],
  "parameters": {
    "color": 3,
    "width": 358.6620209059232,
    "height": 256.5853658536585,
    "content": "## \ud83d\udcab To setup this template\n\n1. Add your Todoist credentials\n2. Add your OpenAI credentials\n3. Set your project names and add priority"
  },
  "typeVersion": 1
}

================ Node #4103 ================
{
  "id": "430290e7-1732-46fe-a38d-fa6dc7f78a26",
  "name": "Sticky Note1",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    800,
    700
  ],
  "parameters": {
    "width": 192.77351916376313,
    "height": 80,
    "content": " \ud83d\udc46\ud83c\udffd Add your projects and priority here"
  },
  "typeVersion": 1
}

================ Node #4104 ================
{
  "id": "6d5a1b7e-f7fa-4a1b-848c-1b4e79f6f667",
  "name": "Sticky Note2",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    1020,
    420
  ],
  "parameters": {
    "width": 192.77351916376313,
    "height": 80,
    "content": " \ud83d\udc47\ud83c\udffd Add your Todoist credentials here"
  },
  "typeVersion": 1
}

================ Node #4105 ================
{
  "id": "feff35d2-e37d-48a5-9a90-c5a2efde688f",
  "name": "Sticky Note3",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    2060,
    420
  ],
  "parameters": {
    "width": 192.77351916376313,
    "height": 80,
    "content": " \ud83d\udc47\ud83c\udffd Add your Todoist credentials here"
  },
  "typeVersion": 1
}

================ Node #4106 ================
{
  "id": "e454ebfe-47f6-4e39-8b89-d706da742911",
  "name": "Sticky Note4",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    1540,
    700
  ],
  "parameters": {
    "width": 192.77351916376313,
    "height": 80,
    "content": " \ud83d\udc46\ud83c\udffd Add your OpenAI credentials here"
  },
  "typeVersion": 1
}

================ Node #4107 ================
{
  "id": "a79effcb-6904-4abf-835b-e1ccd94ca429",
  "name": "Your Projects",
  "type": "n8n-nodes-base.set",
  "position": [
    820,
    520
  ],
  "parameters": {
    "options": {},
    "assignments": {
      "assignments": [
        {
          "id": "50dc1412-21f8-4158-898d-3940a146586b",
          "name": "projects",
          "type": "object",
          "value": "={{ {\n apartment: 1,\n health: 2,\n german: 3\n} }}"
        }
      ]
    }
  },
  "typeVersion": 3.4
}

================ Node #4108 ================
{
  "id": "b5988629-2225-455f-b579-73e60449d2a3",
  "name": "Categorize",
  "type": "@n8n/n8n-nodes-langchain.openAi",
  "position": [
    1460,
    520
  ],
  "parameters": {
    "modelId": {
      "__rl": true,
      "mode": "list",
      "value": "gpt-4o-mini",
      "cachedResultName": "GPT-4O-MINI"
    },
    "options": {},
    "messages": {
      "values": [
        {
          "role": "system",
          "content": "=Categorize the user's todo item to a project. Return the project name or just \"other\" if it does not belong to a project."
        },
        {
          "content": "=Projects:\n{{ $('Your Projects').first().json.projects.keys().join('\\n') }}\n\nTodo item:\n{{ $('Get inbox tasks').item.json.content }}"
        }
      ]
    }
  },
  "credentials": {
    "openAiApi": {
      "id": "9",
      "name": "n8n OpenAi"
    }
  },
  "typeVersion": 1.4
}

================ Node #4109 ================
{
  "id": "0dca3953-c0ac-4319-9323-c3aed9488bfb",
  "name": "If task is not a subtask",
  "type": "n8n-nodes-base.filter",
  "position": [
    1240,
    520
  ],
  "parameters": {
    "options": {},
    "conditions": {
      "options": {
        "leftValue": "",
        "caseSensitive": true,
        "typeValidation": "strict"
      },
      "combinator": "and",
      "conditions": [
        {
          "id": "36dd4bc9-1282-4342-89dd-1dac81c7290e",
          "operator": {
            "type": "string",
            "operation": "empty",
            "singleValue": true
          },
          "leftValue": "={{ $json.parent_id }}",
          "rightValue": ""
        }
      ]
    }
  },
  "typeVersion": 2.1
}

================ Node #4110 ================
{
  "id": "12e25a81-dbde-4542-a137-365329da415e",
  "name": "If other or ai hallucinates",
  "type": "n8n-nodes-base.filter",
  "position": [
    1820,
    520
  ],
  "parameters": {
    "options": {},
    "conditions": {
      "options": {
        "leftValue": "",
        "caseSensitive": true,
        "typeValidation": "strict"
      },
      "combinator": "and",
      "conditions": [
        {
          "id": "c4f69265-abe1-451c-8462-e68ff3b06799",
          "operator": {
            "type": "array",
            "operation": "contains",
            "rightType": "any"
          },
          "leftValue": "={{ $('Your Projects').first().json.projects.keys() }}",
          "rightValue": "={{ $json.message.content }}"
        }
      ]
    }
  },
  "typeVersion": 2.1
}

================ Node #4111 ================
{
  "id": "63501cc8-77c9-4037-9f70-da23b6d20b03",
  "name": "When clicking \u2018Test workflow\u2019",
  "type": "n8n-nodes-base.manualTrigger",
  "position": [
    280,
    440
  ],
  "parameters": {},
  "typeVersion": 1
}

================ Node #4112 ================
{
  "id": "00de989c-d9e9-4b42-b5db-7097800a6017",
  "name": "Zip Entries",
  "type": "n8n-nodes-base.set",
  "position": [
    1380,
    360
  ],
  "parameters": {
    "options": {},
    "assignments": {
      "assignments": [
        {
          "id": "833a554d-2b39-4160-9348-18b17b28ce30",
          "name": "data",
          "type": "array",
          "value": "={{ \n $json.review_author.map((review_author, idx) => ({\n review_author,\n review_author_reviews_count: $json.review_author_reviews_count[idx].replace(' reviews', '').toInt(),\n review_country: $json.review_country[idx],\n review_date: $json.review_date[idx].toDate(),\n review_date_of_experience: $json.review_date_of_experience[idx].replace('Date of experience: ', '').toDate(),\n review_rating: $json.review_rating[idx].toInt(),\n review_text: $json.review_text[idx],\n review_title: $json.review_title[idx],\n review_url: $('Get TrustPilot Page').params.url.match(/https:\\/\\/[^/]+/) + $json.review_url[idx],\n }))\n}}"
        }
      ]
    }
  },
  "typeVersion": 3.4
}

================ Node #4113 ================
{
  "id": "9290e116-c001-49d5-ae4c-d91cd246f2c2",
  "name": "Extract Reviews",
  "type": "n8n-nodes-base.html",
  "position": [
    1140,
    520
  ],
  "parameters": {
    "options": {
      "trimValues": true
    },
    "operation": "extractHtmlContent",
    "extractionValues": {
      "values": [
        {
          "key": "review_author",
          "cssSelector": "[data-service-review-card-paper] [data-consumer-name-typography]",
          "returnArray": true
        },
        {
          "key": "review_rating",
          "attribute": "data-service-review-rating",
          "cssSelector": "[data-service-review-rating]",
          "returnArray": true,
          "returnValue": "attribute"
        },
        {
          "key": "review_title",
          "cssSelector": "[data-service-review-title-typography]",
          "returnArray": true
        },
        {
          "key": "review_text",
          "cssSelector": "[data-service-review-text-typography]",
          "returnArray": true
        },
        {
          "key": "review_date_of_experience",
          "cssSelector": "[data-service-review-date-of-experience-typography]",
          "returnArray": true
        },
        {
          "key": "review_date",
          "attribute": "datetime",
          "cssSelector": "[data-service-review-date-time-ago]",
          "returnArray": true,
          "returnValue": "attribute"
        },
        {
          "key": "review_country",
          "cssSelector": "[data-consumer-country-typography]",
          "returnArray": true
        },
        {
          "key": "review_author_reviews_count",
          "cssSelector": "[data-consumer-reviews-count-typography]",
          "returnArray": true
        },
        {
          "key": "review_url",
          "attribute": "href",
          "cssSelector": "a[data-review-title-typography]",
          "returnArray": true,
          "returnValue": "attribute"
        }
      ]
    }
  },
  "typeVersion": 1.2
}

================ Node #4114 ================
{
  "id": "4aa3e50d-fcce-48a7-8237-c12f8592f69e",
  "name": "Reviews to List",
  "type": "n8n-nodes-base.splitOut",
  "position": [
    1380,
    520
  ],
  "parameters": {
    "options": {},
    "fieldToSplitOut": "data"
  },
  "typeVersion": 1
}

================ Node #4115 ================
{
  "id": "a6b9abf9-a17a-4f30-9f90-6183770c4933",
  "name": "Default Data Loader",
  "type": "@n8n/n8n-nodes-langchain.documentDefaultDataLoader",
  "position": [
    1980,
    520
  ],
  "parameters": {
    "options": {
      "metadata": {
        "metadataValues": [
          {
            "name": "review_author",
            "value": "={{ $json.review_author }}"
          },
          {
            "name": "review_author_reviews_count",
            "value": "={{ $json.review_author_reviews_count }}"
          },
          {
            "name": "review_country",
            "value": "={{ $json.review_country }}"
          },
          {
            "name": "review_date",
            "value": "={{ $json.review_date }}"
          },
          {
            "name": "review_date_of_experience",
            "value": "={{ $json.review_date_of_experience }}"
          },
          {
            "name": "review_rating",
            "value": "={{ $json.review_rating }}"
          },
          {
            "name": "review_date_month",
            "value": "={{ $json.review_date.toDateTime().format('M') }}"
          },
          {
            "name": "review_date_year",
            "value": "={{ $json.review_date.toDateTime().format('yyyy') }}"
          },
          {
            "name": "review_date_of_experience_month",
            "value": "={{ $json.review_date_of_experience.toDateTime().format('M') }}"
          },
          {
            "name": "review_date_of_experience_year",
            "value": "={{ $json.review_date_of_experience.toDateTime().format('yyyy') }}"
          },
          {
            "name": "company_id",
            "value": "={{ $('Set Variables').item.json.companyId }}"
          },
          {
            "name": "review_url",
            "value": "={{ $json.review_url }}"
          }
        ]
      }
    },
    "jsonData": "={{ $json.review_title }}\n{{ $json.review_text }}",
    "jsonMode": "expressionData"
  },
  "typeVersion": 1
}

================ Node #4116 ================
{
  "id": "afd8907c-9a59-4dcc-94c5-2114fb2a7d5d",
  "name": "Recursive Character Text Splitter",
  "type": "@n8n/n8n-nodes-langchain.textSplitterRecursiveCharacterTextSplitter",
  "position": [
    1980,
    660
  ],
  "parameters": {
    "options": {},
    "chunkSize": 4000
  },
  "typeVersion": 1
}

================ Node #4117 ================
{
  "id": "e22d92b8-e8e9-42aa-9d02-2e70234f11ed",
  "name": "Embeddings OpenAI",
  "type": "@n8n/n8n-nodes-langchain.embeddingsOpenAi",
  "position": [
    1860,
    520
  ],
  "parameters": {
    "model": "text-embedding-3-small",
    "options": {}
  },
  "credentials": {
    "openAiApi": {
      "id": "8gccIjcuf3gvaoEr",
      "name": "OpenAi account"
    }
  },
  "typeVersion": 1
}

================ Node #4118 ================
{
  "id": "f0ea6b63-c96d-4b3f-8a21-d0f2dbb4efc3",
  "name": "Set Variables",
  "type": "n8n-nodes-base.set",
  "position": [
    520,
    440
  ],
  "parameters": {
    "options": {},
    "assignments": {
      "assignments": [
        {
          "id": "2e58a9fa-a14d-4a6c-8cc8-8ec947c791fb",
          "name": "companyId",
          "type": "string",
          "value": "www.freddiesflowers.com"
        }
      ]
    }
  },
  "typeVersion": 3.4
}

================ Node #4119 ================
{
  "id": "0188986f-fbe9-4c06-892a-3cb71b52a309",
  "name": "Get Payload of Points",
  "type": "n8n-nodes-base.httpRequest",
  "position": [
    1740,
    1120
  ],
  "parameters": {
    "url": "=http://qdrant:6333/collections/trustpilot_reviews/points",
    "method": "POST",
    "options": {},
    "jsonBody": "={{\n {\n \"ids\": $json.points,\n \"with_payload\": true\n }\n}}",
    "sendBody": true,
    "specifyBody": "json",
    "authentication": "predefinedCredentialType",
    "nodeCredentialType": "qdrantApi"
  },
  "credentials": {
    "qdrantApi": {
      "id": "NyinAS3Pgfik66w5",
      "name": "QdrantApi account"
    }
  },
  "typeVersion": 4.2
}

================ Node #4120 ================
{
  "id": "5fc6e0b6-507f-4cfd-951b-be3709b86ac2",
  "name": "Clusters To List",
  "type": "n8n-nodes-base.splitOut",
  "position": [
    1480,
    1120
  ],
  "parameters": {
    "options": {},
    "fieldToSplitOut": "output"
  },
  "typeVersion": 1
}

================ Node #4121 ================
{
  "id": "f21369b9-1dd5-4b35-a1f3-00fd67794051",
  "name": "OpenAI Chat Model",
  "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
  "position": [
    2140,
    1340
  ],
  "parameters": {
    "model": "gpt-4o-mini",
    "options": {}
  },
  "credentials": {
    "openAiApi": {
      "id": "8gccIjcuf3gvaoEr",
      "name": "OpenAi account"
    }
  },
  "typeVersion": 1
}

================ Node #4122 ================
{
  "id": "b0075699-6513-4781-b5de-81d1ab81dfe1",
  "name": "Only Clusters With 3+ points",
  "type": "n8n-nodes-base.filter",
  "position": [
    1480,
    1300
  ],
  "parameters": {
    "options": {},
    "conditions": {
      "options": {
        "leftValue": "",
        "caseSensitive": true,
        "typeValidation": "strict"
      },
      "combinator": "and",
      "conditions": [
        {
          "id": "328f806c-0792-4d90-9bee-a1e10049e78f",
          "operator": {
            "type": "array",
            "operation": "lengthGt",
            "rightType": "number"
          },
          "leftValue": "={{ $json.points }}",
          "rightValue": 2
        }
      ]
    }
  },
  "typeVersion": 2
}

================ Node #4123 ================
{
  "id": "f6a6209c-d269-4238-8e92-230df7b41df9",
  "name": "Set Variables1",
  "type": "n8n-nodes-base.set",
  "position": [
    519,
    1220
  ],
  "parameters": {
    "options": {},
    "assignments": {
      "assignments": [
        {
          "id": "2e58a9fa-a14d-4a6c-8cc8-8ec947c791fb",
          "name": "companyId",
          "type": "string",
          "value": "={{ $json.companyId }}"
        },
        {
          "id": "37cf8af2-6f0f-40b1-b822-c9bd6a620a3c",
          "name": "review_date_from",
          "type": "string",
          "value": "={{ $today.startOf('month').toISO() }}"
        },
        {
          "id": "8d72f739-f832-4c25-b62a-2ae70ad2b1e7",
          "name": "review_date_to",
          "type": "string",
          "value": "={{ $today.endOf('month').toISO() }}"
        }
      ]
    }
  },
  "typeVersion": 3.4
}

================ Node #4124 ================
{
  "id": "85cb48b1-0ab9-4f88-88f3-82fcfb041ebe",
  "name": "Find Reviews",
  "type": "n8n-nodes-base.httpRequest",
  "position": [
    896,
    1160
  ],
  "parameters": {
    "url": "=http://qdrant:6333/collections/trustpilot_reviews/points/scroll",
    "method": "POST",
    "options": {},
    "jsonBody": "={\n \"limit\": 500,\n \"filter\":{\n \"must\": [\n {\n \"key\": \"metadata.company_id\",\n \"match\": { \"value\": \"{{ $('Set Variables1').item.json.companyId }}\" }\n },\n {\n \"key\": \"metadata.review_date\",\n \"range\": {\n \"gte\": \"{{ $('Set Variables1').item.json.review_date_from }}\",\n \"gt\": null,\n \"lt\": null,\n \"lte\": \"{{ $('Set Variables1').item.json.review_date_to }}\"\n }\n }\n ]\n },\n \"with_vector\":true\n}",
    "sendBody": true,
    "specifyBody": "json",
    "authentication": "predefinedCredentialType",
    "nodeCredentialType": "qdrantApi"
  },
  "credentials": {
    "qdrantApi": {
      "id": "NyinAS3Pgfik66w5",
      "name": "QdrantApi account"
    }
  },
  "typeVersion": 4.2
}

================ Node #4125 ================
{
  "id": "69bbd197-c78f-4dae-9300-fe23d4d49855",
  "name": "Prep Output For Export",
  "type": "n8n-nodes-base.set",
  "position": [
    2720,
    1203
  ],
  "parameters": {
    "mode": "raw",
    "options": {},
    "jsonOutput": "={{ {\n ...$json.output,\n \"CompanyID\": $('Set Variables1').item.json.companyId,\n \"From\": $('Set Variables1').item.json.review_date_from,\n \"To\": $('Set Variables1').item.json.review_date_to,\n \"Number of Responses\": $('Get Payload of Points').item.json.result.length,\n \"Raw Responses\": $('Get Payload of Points').item.json.result.map(item =>\n [\n item.payload.metadata.review_date,\n item.payload.metadata.review_author,\n item.payload.metadata.review_rating,\n item.payload.content.replaceAll('\"', '\\\"').replaceAll('\\n', ' '),\n item.payload.metadata.review_url,\n ]\n ).join('\\n')\n} }}\n"
  },
  "typeVersion": 3.4
}

================ Node #4126 ================
{
  "id": "d77daa23-6acf-4daa-bf4c-33da4d05a54c",
  "name": "Export To Sheets",
  "type": "n8n-nodes-base.googleSheets",
  "position": [
    2940,
    1203
  ],
  "parameters": {
    "columns": {
      "value": {},
      "schema": [
        {
          "id": "CompanyID",
          "type": "string",
          "display": true,
          "removed": false,
          "required": false,
          "displayName": "CompanyID",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "From",
          "type": "string",
          "display": true,
          "removed": false,
          "required": false,
          "displayName": "From",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "To",
          "type": "string",
          "display": true,
          "removed": false,
          "required": false,
          "displayName": "To",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "Insight",
          "type": "string",
          "display": true,
          "removed": false,
          "required": false,
          "displayName": "Insight",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "Sentiment",
          "type": "string",
          "display": true,
          "removed": false,
          "required": false,
          "displayName": "Sentiment",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "Suggested Improvements",
          "type": "string",
          "display": true,
          "removed": false,
          "required": false,
          "displayName": "Suggested Improvements",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "Number of Responses",
          "type": "string",
          "display": true,
          "removed": false,
          "required": false,
          "displayName": "Number of Responses",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "Raw Responses",
          "type": "string",
          "display": true,
          "removed": false,
          "required": false,
          "displayName": "Raw Responses",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        }
      ],
      "mappingMode": "autoMapInputData",
      "matchingColumns": []
    },
    "options": {},
    "operation": "append",
    "sheetName": {
      "__rl": true,
      "mode": "name",
      "value": "=Sheet1"
    },
    "documentId": {
      "__rl": true,
      "mode": "id",
      "value": "=1wAwWCcIZod00IGtxwTbTgjIRbKHu3Yl9wYWJ8GeT2Os"
    }
  },
  "credentials": {
    "googleSheetsOAuth2Api": {
      "id": "XHvC7jIRR8A2TlUl",
      "name": "Google Sheets account"
    }
  },
  "typeVersion": 4.4
}

================ Node #4127 ================
{
  "id": "1f60c3a5-a47a-4313-9b29-8ea652d573f7",
  "name": "Clear Existing Reviews",
  "type": "n8n-nodes-base.httpRequest",
  "position": [
    760,
    440
  ],
  "parameters": {
    "url": "http://qdrant:6333/collections/trustpilot_reviews/points/delete",
    "method": "POST",
    "options": {},
    "jsonBody": "={\n \"filter\": {\n \"must\": [\n {\n \"key\": \"metadata.company_id\",\n \"match\": {\n \"value\": \"{{ $('Set Variables').item.json.companyId }}\"\n }\n }\n ]\n }\n}",
    "sendBody": true,
    "specifyBody": "json",
    "authentication": "predefinedCredentialType",
    "nodeCredentialType": "qdrantApi"
  },
  "credentials": {
    "qdrantApi": {
      "id": "NyinAS3Pgfik66w5",
      "name": "QdrantApi account"
    }
  },
  "typeVersion": 4.2
}

================ Node #4128 ================
{
  "id": "61c3117c-757c-45dd-b9d5-1122b793be30",
  "name": "Trigger Insights",
  "type": "n8n-nodes-base.executeWorkflow",
  "position": [
    2660,
    440
  ],
  "parameters": {
    "options": {},
    "workflowId": "={{ $workflow.id }}"
  },
  "typeVersion": 1
}

================ Node #4129 ================
{
  "id": "d3c6e81f-34bb-4be9-b869-2c219b87c4fb",
  "name": "Prep Values For Trigger",
  "type": "n8n-nodes-base.set",
  "position": [
    2460,
    440
  ],
  "parameters": {
    "options": {},
    "assignments": {
      "assignments": [
        {
          "id": "24dd90ad-390f-444e-ba6c-8c06a41e836e",
          "name": "companyId",
          "type": "string",
          "value": "={{ $('Set Variables').item.json.companyId }}"
        }
      ]
    }
  },
  "executeOnce": true,
  "typeVersion": 3.4
}

================ Node #4130 ================
{
  "id": "64af9cc7-a194-4427-ba78-d9a1136b962f",
  "name": "Execute Workflow Trigger",
  "type": "n8n-nodes-base.executeWorkflowTrigger",
  "position": [
    316,
    1220
  ],
  "parameters": {},
  "typeVersion": 1
}

================ Node #4131 ================
{
  "id": "7b6ba502-36c2-41e6-9d67-781d0d40a569",
  "name": "Sticky Note",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    186.9455564469605,
    263.2301011325764
  ],
  "parameters": {
    "color": 7,
    "width": 787.3314861380661,
    "height": 465.52420584035275,
    "content": "## Step 1. Starting Fresh\nFor this demo, we'll clear any existing records in our Qdrant vector store for the selected company. We do this using the Qdrant's delete points API."
  },
  "typeVersion": 1
}

================ Node #4132 ================
{
  "id": "a99389d4-8ea6-4379-b725-f30e92b0d29e",
  "name": "Sticky Note1",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    1006.3778510483207,
    148.50042906971555
  ],
  "parameters": {
    "color": 7,
    "width": 638.5221986278162,
    "height": 580.2538779032135,
    "content": "## Step 2. Scraping TrustPilot For Company Reviews\n[Read more about HTTP Request Node](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.httprequest/)\n\nWe'll scrape at the most recent 3 pages of reviews for illustrative purposes but we could easily scrape them all if required. The HTML node offers a convenient way to extract data from the returned html pages and using it, we'll retrieve all the reviews data."
  },
  "typeVersion": 1
}

================ Node #4133 ================
{
  "id": "139ccadd-9135-4681-b2eb-403b8d8bd710",
  "name": "Get TrustPilot Page",
  "type": "n8n-nodes-base.httpRequest",
  "position": [
    1140,
    360
  ],
  "parameters": {
    "url": "=https://uk.trustpilot.com/review/{{ $('Set Variables').item.json.companyId }}?sort=recency",
    "options": {
      "pagination": {
        "pagination": {
          "parameters": {
            "parameters": [
              {
                "name": "page",
                "value": "={{ $pageCount + 1 }}"
              }
            ]
          },
          "maxRequests": 3,
          "limitPagesFetched": true
        }
      }
    }
  },
  "executeOnce": false,
  "typeVersion": 4.2
}

================ Node #4134 ================
{
  "id": "1c71db65-713b-4c31-9c11-5ff678fb327a",
  "name": "Sticky Note2",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    1680,
    140
  ],
  "parameters": {
    "color": 7,
    "width": 638.5221986278162,
    "height": 689.8000993522735,
    "content": "## Step 3. Store Reviews in Qdrant\n[Learn more about the Qdrant Vector Store](https://docs.n8n.io/integrations/builtin/cluster-nodes/root-nodes/n8n-nodes-langchain.vectorstoreqdrant/)\n\nVector databases are a great way to store data if you're interested in perform similiarity searches which applies here as we want to group similar reviews to find patterns. Qdrant is a powerful vector database and tool of choice because of its robust API implementation and advanced filtering capabilities."
  },
  "typeVersion": 1
}

================ Node #4135 ================
{
  "id": "a4f82a1b-5a76-46b6-a7a3-84ab09b46699",
  "name": "Qdrant Vector Store",
  "type": "@n8n/n8n-nodes-langchain.vectorStoreQdrant",
  "position": [
    1860,
    360
  ],
  "parameters": {
    "mode": "insert",
    "options": {},
    "qdrantCollection": {
      "__rl": true,
      "mode": "id",
      "value": "=trustpilot_reviews"
    }
  },
  "credentials": {
    "qdrantApi": {
      "id": "NyinAS3Pgfik66w5",
      "name": "QdrantApi account"
    }
  },
  "typeVersion": 1
}

================ Node #4136 ================
{
  "id": "cbad9e73-c5b3-474c-95ef-7269addc4e62",
  "name": "Sticky Note3",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    216,
    1000
  ],
  "parameters": {
    "color": 7,
    "width": 543.4265511994403,
    "height": 453.31956386852846,
    "content": "## Step 5. The Insight Subworkflow\n[Learn more about Workflow Triggers](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.executeworkflowtrigger)\n\nThis subworkflow takes the companyId to find the relevant records in our Qdrant vector store. It also takes a \"from\" and \"to\" date to scope the insights to a particular range - doing this we can say something like \"we only want insights for the past month of reviews\". "
  },
  "typeVersion": 1
}

================ Node #4137 ================
{
  "id": "9c530716-63f4-4368-8d0e-0cdbe8f5b08e",
  "name": "Sticky Note4",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    780,
    920
  ],
  "parameters": {
    "color": 7,
    "width": 557.7420442679241,
    "height": 526.2781960611934,
    "content": "## Step 6. Apply Clustering Algorithm to Reviews\n[Read more about using Python in n8n](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.code)\n\nWe'll retrieve our vectors embeddings for the desired company reviews and perform an advanced clustering algorithm on them. This powerful echnique allows us to quickly group similar embeddings into clusters which we can then use to discover popular feedback, opinions and pain-points!"
  },
  "typeVersion": 1
}

================ Node #4138 ================
{
  "id": "9790b3a5-cc7c-4e12-8038-fc661c8226f8",
  "name": "Sticky Note5",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    1360,
    920
  ],
  "parameters": {
    "color": 7,
    "width": 598.5585287222906,
    "height": 605.9905193915599,
    "content": "## Step 7. Fetch Reviews By Cluster\n[Learn more about using the Code Node](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.code/)\n\nWith the Qdrant point IDs grouped and returned by our code node, all that's left is to fetch the payload of each. Note that the clustering algorithm isn't perfect and may require some tweaking depending on your data."
  },
  "typeVersion": 1
}

================ Node #4139 ================
{
  "id": "267057b6-9727-4a45-9d87-5429da42f48e",
  "name": "Sticky Note7",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    1980,
    969
  ],
  "parameters": {
    "color": 7,
    "width": 587.6069484146701,
    "height": 552.9535170892194,
    "content": "## Step 8. Getting Insights from Grouped Reviews\n[Read more about using Information Extractor Node](https://docs.n8n.io/integrations/builtin/cluster-nodes/root-nodes/n8n-nodes-langchain.information-extractor)\n\nNext, we'll use our state-of-the-art LLM to generate insights on our reviews. Doing it this way, we'll able to pull more granular results addressing many key topics within the reviews."
  },
  "typeVersion": 1
}

================ Node #4140 ================
{
  "id": "b8cc07d0-ffa3-425f-ae74-76dcb68fa88f",
  "name": "Sticky Note8",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    2600,
    980
  ],
  "parameters": {
    "color": 7,
    "width": 572.5638733479158,
    "height": 464.4019616956416,
    "content": "## Step 9. Write To Insights Sheet\nFinally, our completed insights to appended to the Insights Sheet we created earlier in the workflow.\n\nYou can find a sample sheet here: https://docs.google.com/spreadsheets/d/e/2PACX-1vQ6ipJnXWXgr5wlUJnhioNpeYrxaIpsRYZCwN3C-fFXumkbh9TAsA_JzE0kbv7DcGAVIP7az0L46_2P/pubhtml"
  },
  "typeVersion": 1
}

================ Node #4141 ================
{
  "id": "0dac0854-7106-44e3-bd68-fad7b201a6bc",
  "name": "Sticky Note6",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    2340,
    240
  ],
  "parameters": {
    "color": 7,
    "width": 519.6419932444072,
    "height": 429.11782776909047,
    "content": "## Step 4. Trigger Insights SubWorkflow\n[Learn more about Workflow Triggers](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.executeworkflow)\n\nA subworkflow is used to trigger the analysis for the survey. This separation is optional but used here to better demonstrate the two part process."
  },
  "typeVersion": 1
}

================ Node #4142 ================
{
  "id": "4aa7e73e-c29d-41df-b2f8-a62109285ccb",
  "name": "Sticky Note9",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    460,
    380
  ],
  "parameters": {
    "width": 226.36363118160727,
    "height": 327.0249036433755,
    "content": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n### \ud83d\udea8 Set company here!\nTrustpilot must recognise it as part of the url."
  },
  "typeVersion": 1
}

================ Node #4143 ================
{
  "id": "4d895cf9-452c-401e-a6f3-b9d3a359a96d",
  "name": "Apply K-means Clustering Algorithm",
  "type": "n8n-nodes-base.code",
  "position": [
    1116,
    1160
  ],
  "parameters": {
    "language": "python",
    "pythonCode": "import numpy as np\nfrom sklearn.cluster import KMeans\n\n# get vectors for all answers\npoint_ids = [item.id for item in _input.first().json.result.points]\nvectors = [item.vector.to_py() for item in _input.first().json.result.points]\nvectors_array = np.array(vectors)\n\n# apply k-means clustering where n_clusters = 5\n# this is a max and we'll discard some of these clusters later\nkmeans = KMeans(n_clusters=min(len(vectors), 5), random_state=42).fit(vectors_array)\nlabels = kmeans.labels_\nunique_labels = set(labels)\n\n# Extract and print points in each cluster\nclusters = {}\nfor label in set(labels):\n clusters[label] = vectors_array[labels == label]\n\n# return Qdrant point ids for each cluster\n# we'll use these ids to fetch the payloads from the vector store.\noutput = []\nfor cluster_id, cluster_points in clusters.items():\n points = [point_ids[i] for i in range(len(labels)) if labels[i] == cluster_id]\n output.append({\n \"id\": f\"Cluster {cluster_id}\",\n \"total\": len(cluster_points),\n \"points\": points\n })\n\nreturn {\"json\": {\"output\": output } }"
  },
  "typeVersion": 2
}

================ Node #4144 ================
{
  "id": "95c57019-d9d7-4d9f-93dd-21d3d9708861",
  "name": "Sticky Note10",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    -260,
    40
  ],
  "parameters": {
    "width": 400.381109509268,
    "height": 612.855812336249,
    "content": "## Try It Out!\n\n### This workflow generates highly-detailed customer insights from Trustpilot reviews. Works best when dealing with a large number of reviews.\n\n* Import Trustpilot reviews and vectorise in Qdrant vectorstore.\n* Identify clusters of popular topics in reviews using K-means clustering algorithm. \n* Each valid cluster is analysed and summarised by LLM.\n* Export LLM response and cluster results back into sheet.\n\nCheck out the reference google sheet here: https://docs.google.com/spreadsheets/d/e/2PACX-1vQ6ipJnXWXgr5wlUJnhioNpeYrxaIpsRYZCwN3C-fFXumkbh9TAsA_JzE0kbv7DcGAVIP7az0L46_2P/pubhtml\n\n### Need Help?\nJoin the [Discord](https://discord.com/invite/XPKeKXeB7d) or ask in the [Forum](https://community.n8n.io/)!\n\nHappy Hacking!"
  },
  "typeVersion": 1
}

================ Node #4145 ================
{
  "id": "9bba9480-792e-48e3-ad9f-8809ce3aba09",
  "name": "Customer Insights Agent",
  "type": "@n8n/n8n-nodes-langchain.informationExtractor",
  "position": [
    2140,
    1180
  ],
  "parameters": {
    "text": "=The {{ $json.result.length }} reviews were:\n{{\n$json.result.map(item =>\n`* ${item.payload.metadata.review_author} gave ${item.payload.metadata.review_rating} stars: \"${item.payload.content.replaceAll('\"', '\\\"').replaceAll('\\n', ' ')}\"`\n).join('\\n')\n}}",
    "options": {
      "systemPromptTemplate": "=You help summarise a selection of trustpilot reviews for a company called \"{{ $json.result[0].payload.metadata.company_id }}\".\nThe {{ $json.result.length }} reviews were selected because their contents were similar in context.\n\nYour task is to: \n* summarise the given reviews into a short paragraph. Provide an insight from this summary and what we could learn from the reviews.\n* determine if the overall sentiment of all the listed responses to be either strongly negative, negative, neutral, positive or strongly positive."
    },
    "schemaType": "fromJson",
    "jsonSchemaExample": "{\n\t\"Insight\": \"\",\n \"Sentiment\": \"\",\n \"Suggested Improvements\": \"\"\n}"
  },
  "typeVersion": 1
}

================ Node #4146 ================
{
  "id": "4488deb9-27f6-4f9d-b17e-9b5e7a1bba33",
  "name": "Sticky Note12",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    180,
    760
  ],
  "parameters": {
    "color": 5,
    "width": 323.2987132716669,
    "height": 80,
    "content": "### Run this once! \nIf for any reason you need to run more than once, be sure to clear the existing data first."
  },
  "typeVersion": 1
}

================ Node #4147 ================
{
  "id": "5cb3bd73-1e77-4eba-9d2e-634fdc374330",
  "name": "Sticky Note11",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    780,
    1480
  ],
  "parameters": {
    "color": 5,
    "width": 323.2987132716669,
    "height": 110.05160146874424,
    "content": "### First Time Running?\nThere is a slight delay on first run because the code node has to download the required packages."
  },
  "typeVersion": 1
}

================ Node #4148 ================
{
  "id": "0404384b-10b6-4666-84a4-8870db30c607",
  "name": "Embeddings OpenAI",
  "type": "@n8n/n8n-nodes-langchain.embeddingsOpenAi",
  "position": [
    1220,
    280
  ],
  "parameters": {
    "model": "text-embedding-3-small",
    "options": {}
  },
  "credentials": {
    "openAiApi": {
      "id": "8gccIjcuf3gvaoEr",
      "name": "OpenAi account"
    }
  },
  "typeVersion": 1
}

================ Node #4149 ================
{
  "id": "a6741f04-5a5b-47a9-ac08-eb562f9f6052",
  "name": "Default Data Loader",
  "type": "@n8n/n8n-nodes-langchain.documentDefaultDataLoader",
  "position": [
    1340,
    280
  ],
  "parameters": {
    "options": {
      "metadata": {
        "metadataValues": [
          {
            "name": "question",
            "value": "={{ $json.question }}"
          },
          {
            "name": "participant",
            "value": "={{ $json.participant }}"
          },
          {
            "name": "survey",
            "value": "={{ $('Get Survey Results').params.documentId.cachedResultName }}"
          }
        ]
      }
    },
    "jsonData": "={{ $json.answer }}",
    "jsonMode": "expressionData"
  },
  "typeVersion": 1
}

================ Node #4150 ================
{
  "id": "7663c3dd-f713-4034-bef6-0c000285f54f",
  "name": "Convert to Question Answer Pairs",
  "type": "n8n-nodes-base.set",
  "position": [
    720,
    160
  ],
  "parameters": {
    "options": {},
    "assignments": {
      "assignments": [
        {
          "id": "6b593ffb-ffbd-4cf5-a508-cd4f2a6d1004",
          "name": "data",
          "type": "array",
          "value": "={{\n Object.keys($json)\n .filter(key => !['row_number', 'Participant'].includes(key))\n .map(key => ({ question: key, answer: $json[key], participant: $json.Participant }))\n}}"
        }
      ]
    }
  },
  "typeVersion": 3.4
}

================ Node #4151 ================
{
  "id": "84873f0c-81ce-442f-a33c-d7c6c2efa11b",
  "name": "Recursive Character Text Splitter",
  "type": "@n8n/n8n-nodes-langchain.textSplitterRecursiveCharacterTextSplitter",
  "position": [
    1340,
    420
  ],
  "parameters": {
    "options": {}
  },
  "typeVersion": 1
}

================ Node #4152 ================
{
  "id": "da9a8ee8-5e3f-49db-8d1f-26a61ca82344",
  "name": "Get Survey Results",
  "type": "n8n-nodes-base.googleSheets",
  "position": [
    540,
    160
  ],
  "parameters": {
    "options": {},
    "sheetName": {
      "__rl": true,
      "mode": "list",
      "value": "gid=0",
      "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1-168Vm-1kCeHkqGLAs6odha4DhPE93njfHlYIviKE50/edit#gid=0",
      "cachedResultName": "Sheet1"
    },
    "documentId": {
      "__rl": true,
      "mode": "list",
      "value": "1-168Vm-1kCeHkqGLAs6odha4DhPE93njfHlYIviKE50",
      "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1-168Vm-1kCeHkqGLAs6odha4DhPE93njfHlYIviKE50/edit?usp=drivesdk",
      "cachedResultName": "Remote Working Survey Responses"
    }
  },
  "credentials": {
    "googleSheetsOAuth2Api": {
      "id": "XHvC7jIRR8A2TlUl",
      "name": "Google Sheets account"
    }
  },
  "typeVersion": 4.4
}

================ Node #4153 ================
{
  "id": "4bad90b2-eefe-49c8-8caa-41cd4cb5e60f",
  "name": "Get Survey Headers",
  "type": "n8n-nodes-base.googleSheets",
  "position": [
    740,
    940
  ],
  "parameters": {
    "options": {
      "dataLocationOnSheet": {
        "values": {
          "range": "A1:Z2",
          "rangeDefinition": "specifyRangeA1"
        }
      }
    },
    "sheetName": {
      "__rl": true,
      "mode": "id",
      "value": "={{ $('Execute Workflow Trigger').first().json.sheetName }}"
    },
    "documentId": {
      "__rl": true,
      "mode": "id",
      "value": "={{ $('Execute Workflow Trigger').first().json.sheetID }}"
    }
  },
  "credentials": {
    "googleSheetsOAuth2Api": {
      "id": "XHvC7jIRR8A2TlUl",
      "name": "Google Sheets account"
    }
  },
  "typeVersion": 4.4
}

================ Node #4154 ================
{
  "id": "47c64994-9d1f-42ca-a849-3eeab5335b66",
  "name": "Extract Questions",
  "type": "n8n-nodes-base.set",
  "position": [
    940,
    940
  ],
  "parameters": {
    "options": {},
    "assignments": {
      "assignments": [
        {
          "id": "d655b165-dfa2-46cb-bc27-140399bc4227",
          "name": "question",
          "type": "array",
          "value": "={{\n Object.keys($('Get Survey Headers').item.json)\n .filter(key => key.includes('?'))\n}}"
        }
      ]
    }
  },
  "typeVersion": 3.4
}

================ Node #4155 ================
{
  "id": "c237d523-b290-41ca-b323-4cc7c7f6ff37",
  "name": "Questions to List",
  "type": "n8n-nodes-base.splitOut",
  "position": [
    940,
    1120
  ],
  "parameters": {
    "options": {},
    "fieldToSplitOut": "question"
  },
  "typeVersion": 1
}

================ Node #4156 ================
{
  "id": "7f44a770-4c5d-4404-ae95-d9dee8348380",
  "name": "Find All Answers",
  "type": "n8n-nodes-base.httpRequest",
  "position": [
    1460,
    1120
  ],
  "parameters": {
    "url": "=http://qdrant:6333/collections/{{ $('Set Variables').item.json.collectionName }}/points/scroll",
    "method": "POST",
    "options": {},
    "jsonBody": "={\n \"limit\": 500,\n \"filter\":{\n \"must\": [\n {\n \"key\": \"metadata.question\",\n \"match\": { \"value\": \"{{ $('For Each Question...').item.json.question }}\" }\n },\n {\n \"key\": \"metadata.survey\",\n \"match\": { \"value\": \"{{ $('Set Variables').item.json.surveyName }}\" }\n }\n ]\n },\n \"with_vector\":true\n}",
    "sendBody": true,
    "specifyBody": "json",
    "authentication": "predefinedCredentialType",
    "nodeCredentialType": "qdrantApi"
  },
  "credentials": {
    "qdrantApi": {
      "id": "NyinAS3Pgfik66w5",
      "name": "QdrantApi account"
    }
  },
  "typeVersion": 4.2
}

================ Node #4157 ================
{
  "id": "2b6dc317-f8f3-4201-a9e1-d35ee578e79e",
  "name": "Get Payload of Points",
  "type": "n8n-nodes-base.httpRequest",
  "position": [
    2380,
    800
  ],
  "parameters": {
    "url": "=http://qdrant:6333/collections/{{ $('Set Variables').first().json.collectionName }}/points",
    "method": "POST",
    "options": {},
    "jsonBody": "={{\n {\n \"ids\": $json.points,\n \"with_payload\": true\n }\n}}",
    "sendBody": true,
    "specifyBody": "json",
    "authentication": "predefinedCredentialType",
    "nodeCredentialType": "qdrantApi"
  },
  "credentials": {
    "qdrantApi": {
      "id": "NyinAS3Pgfik66w5",
      "name": "QdrantApi account"
    }
  },
  "typeVersion": 4.2
}

================ Node #4158 ================
{
  "id": "d4a37d97-975a-4243-a7ea-81b3e30558a5",
  "name": "Clusters To List",
  "type": "n8n-nodes-base.splitOut",
  "position": [
    2180,
    800
  ],
  "parameters": {
    "options": {},
    "fieldToSplitOut": "output"
  },
  "typeVersion": 1
}

================ Node #4159 ================
{
  "id": "c78f1bf6-8390-48ee-88f4-7d1a893a8ade",
  "name": "Set Variables",
  "type": "n8n-nodes-base.set",
  "position": [
    200,
    1060
  ],
  "parameters": {
    "options": {},
    "assignments": {
      "assignments": [
        {
          "id": "b77c94a0-d865-4bd6-b078-a09b2ddb2a99",
          "name": "collectionName",
          "type": "string",
          "value": "ux_survey_insights"
        },
        {
          "id": "7b0a4d14-b5f9-4597-84c0-8cfdb363c3d3",
          "name": "surveyName",
          "type": "string",
          "value": "={{ $json.properties.title }}"
        },
        {
          "id": "45434b3b-3b74-4262-82e0-7ed02155caad",
          "name": "insightsSheetName",
          "type": "string",
          "value": "=Insights-{{ $now.format('yyyyMMdd') }}"
        }
      ]
    }
  },
  "typeVersion": 3.4
}

================ Node #4160 ================
{
  "id": "fbb1f3c3-06ad-44b5-b020-6fc3c8eda7c4",
  "name": "OpenAI Chat Model",
  "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
  "position": [
    2560,
    980
  ],
  "parameters": {
    "model": "gpt-4o-mini",
    "options": {}
  },
  "credentials": {
    "openAiApi": {
      "id": "8gccIjcuf3gvaoEr",
      "name": "OpenAi account"
    }
  },
  "typeVersion": 1
}

================ Node #4161 ================
{
  "id": "83d3b413-a661-4c4c-9b8d-6ee395a15348",
  "name": "Prep Output For Export",
  "type": "n8n-nodes-base.set",
  "position": [
    3160,
    1300
  ],
  "parameters": {
    "mode": "raw",
    "options": {},
    "jsonOutput": "={{ {\n ...$json.output,\n \"Number of Response\": $('Get Payload of Points').item.json.result.length,\n \"Participant IDs\": $('Get Payload of Points').item.json.result.map(item =>\n item.payload.metadata.participant\n ).join(','),\n \"Raw Responses\": $('Get Payload of Points').item.json.result.map(item =>\n `Participant ${item.payload.metadata.participant},${item.payload.content.replaceAll('\"', '\\\"')}`\n ).join('\\n')\n} }}\n"
  },
  "typeVersion": 3.4
}

================ Node #4162 ================
{
  "id": "14784dff-a8ea-4b6b-8379-b0c9051a8f98",
  "name": "Export To Sheets",
  "type": "n8n-nodes-base.googleSheets",
  "position": [
    3360,
    1300
  ],
  "parameters": {
    "columns": {
      "value": {},
      "schema": [
        {
          "id": "What is your name?",
          "type": "string",
          "display": true,
          "removed": false,
          "required": false,
          "displayName": "What is your name?",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "The responses indicate that two participants have the same name, 'Kwame Nkosi', which suggests a commonality in names or cultural naming traditions among the respondents. This could highlight the importance of understanding cultural context in survey responses.",
          "type": "string",
          "display": true,
          "removed": false,
          "required": false,
          "displayName": "The responses indicate that two participants have the same name, 'Kwame Nkosi', which suggests a commonality in names or cultural naming traditions among the respondents. This could highlight the importance of understanding cultural context in survey responses.",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "neutral",
          "type": "string",
          "display": true,
          "removed": false,
          "required": false,
          "displayName": "neutral",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "3",
          "type": "string",
          "display": true,
          "removed": false,
          "required": false,
          "displayName": "3",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "77,17,54",
          "type": "string",
          "display": true,
          "removed": false,
          "required": false,
          "displayName": "77,17,54",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "Participant 77,Kwame Nkosi\nParticipant 17,Kwame Nkosi\nParticipant 54,Kwame Nkansah",
          "type": "string",
          "display": true,
          "removed": false,
          "required": false,
          "displayName": "Participant 77,Kwame Nkosi\nParticipant 17,Kwame Nkosi\nParticipant 54,Kwame Nkansah",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        }
      ],
      "mappingMode": "autoMapInputData",
      "matchingColumns": []
    },
    "options": {},
    "operation": "append",
    "sheetName": {
      "__rl": true,
      "mode": "name",
      "value": "={{ $('Set Variables').first().json.insightsSheetName }}"
    },
    "documentId": {
      "__rl": true,
      "mode": "id",
      "value": "={{ $('Execute Workflow Trigger').first().json.sheetID }}"
    }
  },
  "credentials": {
    "googleSheetsOAuth2Api": {
      "id": "XHvC7jIRR8A2TlUl",
      "name": "Google Sheets account"
    }
  },
  "typeVersion": 4.4
}

================ Node #4163 ================
{
  "id": "779b9411-db3e-44f3-ad2a-c9d40a70580d",
  "name": "Export To Sheets1",
  "type": "n8n-nodes-base.googleSheets",
  "position": [
    2360,
    1300
  ],
  "parameters": {
    "columns": {
      "value": {},
      "schema": [],
      "mappingMode": "autoMapInputData",
      "matchingColumns": []
    },
    "options": {},
    "operation": "append",
    "sheetName": {
      "__rl": true,
      "mode": "name",
      "value": "={{ $('Set Variables').first().json.insightsSheetName }}"
    },
    "documentId": {
      "__rl": true,
      "mode": "id",
      "value": "={{ $('Execute Workflow Trigger').first().json.sheetID }}"
    }
  },
  "credentials": {
    "googleSheetsOAuth2Api": {
      "id": "XHvC7jIRR8A2TlUl",
      "name": "Google Sheets account"
    }
  },
  "typeVersion": 4.4
}

================ Node #4164 ================
{
  "id": "a31ab677-f57c-4b78-a290-d4a913ed4f8e",
  "name": "For Each Question...",
  "type": "n8n-nodes-base.splitInBatches",
  "position": [
    1280,
    940
  ],
  "parameters": {
    "options": {}
  },
  "typeVersion": 3
}

================ Node #4165 ================
{
  "id": "dcfaf927-6ecd-4ebe-aee0-5fb3367b2725",
  "name": "Trigger Insights",
  "type": "n8n-nodes-base.executeWorkflow",
  "position": [
    1980,
    160
  ],
  "parameters": {
    "options": {},
    "workflowId": "={{ $workflow.id }}"
  },
  "typeVersion": 1
}

================ Node #4166 ================
{
  "id": "2579adf0-9c00-4b87-b53e-740044577ab0",
  "name": "Prep Values For Trigger",
  "type": "n8n-nodes-base.set",
  "position": [
    1800,
    160
  ],
  "parameters": {
    "options": {},
    "assignments": {
      "assignments": [
        {
          "id": "24dd90ad-390f-444e-ba6c-8c06a41e836e",
          "name": "sheetID",
          "type": "string",
          "value": "={{ $('Get Survey Results').params.documentId.value }}"
        },
        {
          "id": "90199bbb-3938-411c-a7a8-faa7ccba6059",
          "name": "sheetName",
          "type": "string",
          "value": "={{ $('Get Survey Results').params.sheetName.value }}"
        }
      ]
    }
  },
  "executeOnce": true,
  "typeVersion": 3.4
}

================ Node #4167 ================
{
  "id": "9b29e850-b9d0-4358-af62-92c20ab3b088",
  "name": "Execute Workflow Trigger",
  "type": "n8n-nodes-base.executeWorkflowTrigger",
  "position": [
    20,
    900
  ],
  "parameters": {},
  "typeVersion": 1
}

================ Node #4168 ================
{
  "id": "70a0dcec-9f74-4af2-bd64-0ab762a77e51",
  "name": "Create Insights Sheet",
  "type": "n8n-nodes-base.googleSheets",
  "position": [
    420,
    900
  ],
  "parameters": {
    "title": "={{ $('Set Variables').first().json.insightsSheetName }}",
    "options": {},
    "operation": "create",
    "documentId": {
      "__rl": true,
      "mode": "id",
      "value": "={{ $('Execute Workflow Trigger').first().json.sheetID }}"
    }
  },
  "credentials": {
    "googleSheetsOAuth2Api": {
      "id": "XHvC7jIRR8A2TlUl",
      "name": "Google Sheets account"
    }
  },
  "typeVersion": 4.4,
  "alwaysOutputData": true
}

================ Node #4169 ================
{
  "id": "f31400fb-dd7a-4c62-90ec-e9d78bbaa5e8",
  "name": "Prep Values For Export",
  "type": "n8n-nodes-base.set",
  "position": [
    2180,
    1300
  ],
  "parameters": {
    "mode": "raw",
    "options": {},
    "jsonOutput": "={\n \"Question\": \"{{ $('For Each Question...').item.json.question }}\",\n \"Insight\": \"No Insight Found\"\n}\n"
  },
  "typeVersion": 3.4
}

================ Node #4170 ================
{
  "id": "506c20df-5109-422c-8c9e-0eb50fbd3ff9",
  "name": "Sticky Note",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    459.27570452141345,
    -42.168106366729035
  ],
  "parameters": {
    "color": 7,
    "width": 617.2130261221611,
    "height": 420.7389587470384,
    "content": "## Step 1. Import Survey Responses\n[Read more about Google Sheets](https://docs.n8n.io/integrations/builtin/app-nodes/n8n-nodes-base.googlesheets)\n\nOur approach requires to import all participant responses as vectors with metadata linking them to the questions being answered. To do this, we'll generate questiona and answer pairs from the survey."
  },
  "typeVersion": 1
}

================ Node #4171 ================
{
  "id": "bddcafa8-6f54-4829-93c9-37bbb9e7edf3",
  "name": "QA Pairs to List",
  "type": "n8n-nodes-base.splitOut",
  "position": [
    900,
    160
  ],
  "parameters": {
    "options": {},
    "fieldToSplitOut": "data"
  },
  "typeVersion": 1
}

================ Node #4172 ================
{
  "id": "8d6e6bf6-c94c-43cb-a29e-5d10207cb8bd",
  "name": "Sticky Note1",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    1100,
    -102.05898437632061
  ],
  "parameters": {
    "color": 7,
    "width": 563.8350682199533,
    "height": 678.1641960508446,
    "content": "## Step 2. Vectorize Each Response Into Qdrant\n[Read more about using Qdrant](https://docs.n8n.io/integrations/builtin/cluster-nodes/root-nodes/n8n-nodes-langchain.vectorstoreqdrant)\n\nSpecial attention is given to how metadata is captured as it becomes key to this workflow is being able to retrieve subsets of the data for analysis."
  },
  "typeVersion": 1
}

================ Node #4173 ================
{
  "id": "613d4a32-a87a-423e-a1d1-ee23db0de6d1",
  "name": "Sticky Note2",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    1680,
    -30.440883940004255
  ],
  "parameters": {
    "color": 7,
    "width": 519.6419932444072,
    "height": 429.11782776909047,
    "content": "## Step 3. Trigger Insights SubWorkflow\n[Learn more about Workflow Triggers](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.executeworkflow)\n\nA subworkflow is used to trigger the analysis for the survey. This separation is optional but used here to better demonstrate the two part process."
  },
  "typeVersion": 1
}

================ Node #4174 ================
{
  "id": "1e858e4a-b91b-4411-8e2a-6eb76647b796",
  "name": "Sticky Note3",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    -57.47778952966382,
    710.393394209128
  ],
  "parameters": {
    "color": 7,
    "width": 668.3083616841852,
    "height": 528.2386658883073,
    "content": "## Step 4. Create Insights Sheet\n[Learn more about Workflow Triggers](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.executeworkflowtrigger)\n\nTo capture the generated insights, we'll create a new unique sheet within the survey spreadsheet. This is optional and you may want to capture in other datastores depending on your needs."
  },
  "typeVersion": 1
}

================ Node #4175 ================
{
  "id": "9170c566-07d3-49dc-aafb-2dbe79940d2c",
  "name": "Sticky Note4",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    640,
    683.5153164275844
  ],
  "parameters": {
    "color": 7,
    "width": 536.9288458983389,
    "height": 622.1362463986454,
    "content": "## Step 5. Get List Of Questions From Survey\n[Read more about using Google Sheets](https://docs.n8n.io/integrations/builtin/app-nodes/n8n-nodes-base.googlesheets)\n\nNext we'll fetch the survey for metadata and questions, splitting them into separate workflow items. Our intention is to process each question end-to-end before moving to the next. This approach is a little \"safer\" in the scenario where an interruption occurs we won't lose all our work."
  },
  "typeVersion": 1
}

================ Node #4176 ================
{
  "id": "8488df77-055d-41cc-94f1-92ac5d54ef10",
  "name": "Sticky Note5",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    1200,
    673.291535602609
  ],
  "parameters": {
    "color": 7,
    "width": 823.147012265536,
    "height": 868.2579789328703,
    "content": "## Step 6. Find Groups of Similar Answers For Each Question\n[Learn more about using the Code Node](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.code/)\n\nGiving all the responses to an LLM to analyse is the common but naive approach; the summarisation is usually too high level for real insights and loses a lot of detail such as the number and identity of respondants. What we want to do instead is find and group popular answers for each question to ensure all perspectives are considered.\n\nOur approach does this by mapping our answer vectors to a 2D grid and then identifying where the vector points are \"clustered\"; where a group of points are within close proximity to each other."
  },
  "typeVersion": 1
}

================ Node #4177 ================
{
  "id": "f4748b6d-5bd8-48cf-942f-3a0dc681078d",
  "name": "Sticky Note6",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    2060,
    1180
  ],
  "parameters": {
    "color": 7,
    "width": 536.9288458983389,
    "height": 359.90385684071794,
    "content": "## Step 7b. Skip If No Clusters Found\nWhere no clusters were found, it means the answers were unique enough to not show any pattern. eg. \"What's you name?\""
  },
  "typeVersion": 1
}

================ Node #4178 ================
{
  "id": "d55d6a47-da8c-46ae-bd10-0eb671dcd121",
  "name": "Sticky Note7",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    2060,
    611.6915003841909
  ],
  "parameters": {
    "color": 7,
    "width": 871.451300407926,
    "height": 541.1135860445843,
    "content": "## Step 7a. Summarise the Top Groups of Similar Answers\n[Read more about using the Information Extractor Node](https://docs.n8n.io/integrations/builtin/cluster-nodes/root-nodes/n8n-nodes-langchain.information-extractor)\n\nEach discovered cluster will return a reference vector which is used to fetch all related answers in the group.\nThe group is then sent to the LLM to summarise as well as assign a sentiment score."
  },
  "typeVersion": 1
}

================ Node #4179 ================
{
  "id": "e5d5f88f-5832-43fc-a5b9-f747d08e7e77",
  "name": "Sticky Note8",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    2620,
    1180
  ],
  "parameters": {
    "color": 7,
    "width": 924.2798021207429,
    "height": 363.07347551845976,
    "content": "## Step 8. Write To Insights Sheet\nFinally, our completed insights to appended to\nthe Insights Sheet we created earlier in the workflow."
  },
  "typeVersion": 1
}

================ Node #4180 ================
{
  "id": "49ac1504-7b43-4fa1-b4ce-15c7a53c9018",
  "name": "Sticky Note9",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    460,
    400
  ],
  "parameters": {
    "color": 5,
    "width": 323.2987132716669,
    "height": 80,
    "content": "### Run this once! \nIf for any reason you need to run more than once, be sure to clear the existing data first."
  },
  "typeVersion": 1
}

================ Node #4181 ================
{
  "id": "450f89c5-ef0f-4bf8-8db9-6347247c7f4d",
  "name": "Has Clusters?",
  "type": "n8n-nodes-base.if",
  "position": [
    1820,
    1120
  ],
  "parameters": {
    "options": {},
    "conditions": {
      "options": {
        "leftValue": "",
        "caseSensitive": true,
        "typeValidation": "strict"
      },
      "combinator": "and",
      "conditions": [
        {
          "id": "40b6bb62-a2d6-4422-8fbb-7ae49898bad9",
          "operator": {
            "type": "array",
            "operation": "notEmpty",
            "singleValue": true
          },
          "leftValue": "={{ $json.output }}",
          "rightValue": ""
        }
      ]
    }
  },
  "typeVersion": 2
}

================ Node #4182 ================
{
  "id": "1652a108-8fb8-4229-a76d-abf9fbcff626",
  "name": "Sticky Note10",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    20,
    -400
  ],
  "parameters": {
    "width": 400.381109509268,
    "height": 679.5610243514676,
    "content": "## Try It Out!\n\n### This workflow generates highly-detailed insights from survey responses. Works best when dealing with a large number of participants.\n\n* Import survey responses and vectorise in Qdrant vectorstore.\n* Identify clusters of popular responses to questions using K-means clustering algorithm. \n* Each valid cluster is analysed and summarised by LLM.\n* Export LLM response and cluster results back into sheet.\n\nCheck out the reference google sheet here: https://docs.google.com/spreadsheets/d/e/2PACX-1vT6m8XH8JWJTUAfwojc68NAUGC7q0lO7iV738J7aO5fuVjiVzdTRRPkMmT1C4N8TwejaiT0XrmF1Q48/pubhtml\n\n### Need Help?\nJoin the [Discord](https://discord.com/invite/XPKeKXeB7d) or ask in the [Forum](https://community.n8n.io/)!\n\nHappy Hacking!"
  },
  "typeVersion": 1
}

================ Node #4183 ================
{
  "id": "6eef981e-b2ce-433c-b71f-78be64812a56",
  "name": "Sticky Note11",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    1260,
    1340
  ],
  "parameters": {
    "color": 5,
    "width": 323.2987132716669,
    "height": 110.05160146874424,
    "content": "### First Time Running?\nThere is a slight delay on first run because the code node has to download the required packages."
  },
  "typeVersion": 1
}

================ Node #4184 ================
{
  "id": "fa0c14be-03f4-4ed2-bd60-e93817382ded",
  "name": "When clicking \u2018Test workflow\u2019",
  "type": "n8n-nodes-base.manualTrigger",
  "position": [
    240,
    100
  ],
  "parameters": {},
  "typeVersion": 1
}

================ Node #4185 ================
{
  "id": "30323019-59ba-4a19-a46e-196d469f097d",
  "name": "Get Sheet Details",
  "type": "n8n-nodes-base.httpRequest",
  "position": [
    200,
    900
  ],
  "parameters": {
    "url": "=https://sheets.googleapis.com/v4/spreadsheets/{{ $json.sheetID }}",
    "options": {},
    "authentication": "predefinedCredentialType",
    "nodeCredentialType": "googleSheetsOAuth2Api"
  },
  "credentials": {
    "googleSheetsOAuth2Api": {
      "id": "XHvC7jIRR8A2TlUl",
      "name": "Google Sheets account"
    }
  },
  "typeVersion": 4.2
}

================ Node #4186 ================
{
  "id": "6ced8012-1dd3-4da3-8c27-e4f4dfc959f6",
  "name": "Only Clusters With 3+ points",
  "type": "n8n-nodes-base.filter",
  "position": [
    2180,
    960
  ],
  "parameters": {
    "options": {},
    "conditions": {
      "options": {
        "leftValue": "",
        "caseSensitive": true,
        "typeValidation": "strict"
      },
      "combinator": "and",
      "conditions": [
        {
          "id": "328f806c-0792-4d90-9bee-a1e10049e78f",
          "operator": {
            "type": "array",
            "operation": "lengthGt",
            "rightType": "number"
          },
          "leftValue": "={{ $json.points }}",
          "rightValue": 2
        }
      ]
    }
  },
  "typeVersion": 2
}

================ Node #4187 ================
{
  "id": "8ae81a55-75e2-40a3-bef6-0935ff08128f",
  "name": "Apply K-means Clustering Algorithm",
  "type": "n8n-nodes-base.code",
  "position": [
    1640,
    1120
  ],
  "parameters": {
    "language": "python",
    "pythonCode": "import numpy as np\nfrom sklearn.cluster import KMeans\n\n# get vectors for all answers\npoint_ids = [item.id for item in _input.first().json.result.points]\nvectors = [item.vector.to_py() for item in _input.first().json.result.points]\nvectors_array = np.array(vectors)\n\n# apply k-means clustering where n_clusters = 10\n# this is a max and we'll discard some of these clusters later\nkmeans = KMeans(n_clusters=min(len(vectors), 10), random_state=42).fit(vectors_array)\nlabels = kmeans.labels_\nunique_labels = set(labels)\n\n# Extract and print points in each cluster\nclusters = {}\nfor label in set(labels):\n clusters[label] = vectors_array[labels == label]\n\n# return Qdrant point ids for each cluster\n# we'll use these ids to fetch the payloads from the vector store.\noutput = []\nfor cluster_id, cluster_points in clusters.items():\n points = [point_ids[i] for i in range(len(labels)) if labels[i] == cluster_id]\n output.append({\n \"id\": f\"Cluster {cluster_id}\",\n \"total\": len(cluster_points),\n \"points\": points\n })\n\nreturn {\"json\": {\"output\": output } }"
  },
  "typeVersion": 2
}

================ Node #4188 ================
{
  "id": "cbb42384-d46b-471f-a7d8-27e3de042492",
  "name": "Qdrant Vector Store",
  "type": "@n8n/n8n-nodes-langchain.vectorStoreQdrant",
  "position": [
    1220,
    100
  ],
  "parameters": {
    "mode": "insert",
    "options": {},
    "qdrantCollection": {
      "__rl": true,
      "mode": "list",
      "value": "ux_survey_insights",
      "cachedResultName": "ux_survey_insights"
    }
  },
  "credentials": {
    "qdrantApi": {
      "id": "NyinAS3Pgfik66w5",
      "name": "QdrantApi account"
    }
  },
  "typeVersion": 1
}

================ Node #4189 ================
{
  "id": "17584901-15d6-421f-ad69-3ba872276055",
  "name": "Survey Insights Agent",
  "type": "@n8n/n8n-nodes-langchain.informationExtractor",
  "position": [
    2580,
    800
  ],
  "parameters": {
    "text": "=The {{ $json.result.length }} participant responses were:\n{{\n$json.result.map(item =>\n`* Participant ${item.payload.metadata.participant}: \"${item.payload.content.replaceAll('\"', '\\\"')}\"`\n).join('\\n')\n}}",
    "options": {
      "systemPromptTemplate": "=You help summarise a selection of participant responses to a specific question for a survey called \"{{ $json.result[0].payload.metadata.survey }}\".\nThe question asked was \"{{ $json.result[0].payload.metadata.question }}\".\nThe {{ $json.result.length }} participant responses were selected because their answers were similar in context.\n\nYour task is to: \n* summarise the given participant responses into a short paragraph. Provide an insight from this summary and what we could learn from the answers.\n* determine if the overall sentiment of all the listed responses to be either negative, mildy negative, neutral, mildy positive or positive."
    },
    "schemaType": "fromJson",
    "jsonSchemaExample": "{\n\t\"Question\": \"What do you enjoy most about working remotely, and why?\",\n\t\"Insight\": \"\",\n \"Sentiment\": \"Positive\"\n}"
  },
  "typeVersion": 1
}

================ Node #4190 ================
{
  "id": "382dddd4-da50-49fa-90a2-f7d6d160afdf",
  "name": "When clicking \"Test workflow\"",
  "type": "n8n-nodes-base.manualTrigger",
  "position": [
    920,
    280
  ],
  "parameters": {},
  "typeVersion": 1
}

================ Node #4191 ================
{
  "id": "efa8f415-62f7-43b3-a76a-a2eabf779cb8",
  "name": "Map Workflows & Credentials",
  "type": "n8n-nodes-base.set",
  "position": [
    1360,
    280
  ],
  "parameters": {
    "options": {},
    "assignments": {
      "assignments": [
        {
          "id": "0fd19a68-c561-4cc2-94d6-39848977e6d2",
          "name": "workflow_id",
          "type": "string",
          "value": "={{ $json.id }}"
        },
        {
          "id": "a81f9e6f-9c78-4c3d-9b79-e820f8c5ba29",
          "name": "workflow_name",
          "type": "string",
          "value": "={{ $json.name }}"
        },
        {
          "id": "58ab0f2f-7598-48de-bea1-f3373c5731fe",
          "name": "credentials",
          "type": "array",
          "value": "={{ $json.nodes.map(node => node.credentials).compact().reduce((acc,cred) => { const keys = Object.keys(cred); const items = keys.map(key => ({ type: key, ...cred[key] })); acc.push(...items); return acc; }, []) }}"
        }
      ]
    }
  },
  "typeVersion": 3.3
}

================ Node #4192 ================
{
  "id": "9e9b4f9c-12b7-47ba-8cf4-a9818902a538",
  "name": "Sticky Note",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    1084,
    252
  ],
  "parameters": {
    "width": 216,
    "height": 299.56273929030715,
    "content": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n### \ud83d\udea8Required\nYou'll need an n8n API key. Note: available workflows will be scoped to your key."
  },
  "typeVersion": 1
}

================ Node #4193 ================
{
  "id": "cf04eff5-12b2-42fb-9089-2d0c992af1b8",
  "name": "Save to Database",
  "type": "n8n-nodes-base.code",
  "position": [
    1540,
    280
  ],
  "parameters": {
    "language": "python",
    "pythonCode": "import json\nimport sqlite3\ncon = sqlite3.connect(\"n8n_workflow_credentials.db\")\n\ncur = con.cursor()\ncur.execute(\"CREATE TABLE IF NOT EXISTS n8n_workflow_credentials (workflow_id TEXT PRIMARY KEY, workflow_name TEXT, credentials TEXT);\")\n\nfor item in _input.all():\n cur.execute('INSERT OR REPLACE INTO n8n_workflow_credentials VALUES(?,?,?)', (\n item.json.workflow_id,\n item.json.workflow_name,\n json.dumps(item.json.credentials.to_py())\n ))\n\ncon.commit()\ncon.close()\n\nreturn [{ \"affected_rows\": len(_input.all()) }]"
  },
  "typeVersion": 2
}

================ Node #4194 ================
{
  "id": "7e32cf83-0498-4666-8677-7fd32eec779c",
  "name": "Chat Trigger",
  "type": "@n8n/n8n-nodes-langchain.chatTrigger",
  "position": [
    1880,
    280
  ],
  "webhookId": "993ce267-a1e5-4657-a38c-08f86715063d",
  "parameters": {},
  "typeVersion": 1
}

================ Node #4195 ================
{
  "id": "8c37f2ae-192b-4f98-a6fa-5aabf870e9e0",
  "name": "Query Workflow Credentials Database",
  "type": "@n8n/n8n-nodes-langchain.toolCode",
  "position": [
    2320,
    440
  ],
  "parameters": {
    "name": "query_workflow_credentials_database",
    "language": "python",
    "pythonCode": "import json\nimport sqlite3\ncon = sqlite3.connect(\"n8n_workflow_credentials.db\")\n\ncur = con.cursor()\nres = cur.execute(query);\n\noutput = json.dumps(res.fetchall())\n\ncon.close()\nreturn output;",
    "description": "Call this tool to query the workflow credentials database. The database is already set. The available tables are as follows:\n* n8n_workflow_credentials (workflow_id TEXT PRIMARY KEY, workflow_name TEXT, credentials TEXT);\n * n8n_workflow_credentials.credentials are stored as json string and the app name may be obscured. Prefer querying using the %LIKE% operation for best results.\n\nPass a SQL SELECT query to this tool for the available tables."
  },
  "typeVersion": 1.1
}

================ Node #4196 ================
{
  "id": "60b2ab16-dc7c-4cb8-a58f-696f721b8d6f",
  "name": "OpenAI Chat Model",
  "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
  "position": [
    2060,
    440
  ],
  "parameters": {
    "options": {}
  },
  "credentials": {
    "openAiApi": {
      "id": "8gccIjcuf3gvaoEr",
      "name": "OpenAi account"
    }
  },
  "typeVersion": 1
}

================ Node #4197 ================
{
  "id": "adf576c1-ddb0-4fef-980c-5b485a3204f2",
  "name": "Window Buffer Memory",
  "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
  "position": [
    2180,
    440
  ],
  "parameters": {},
  "typeVersion": 1.2
}

================ Node #4198 ================
{
  "id": "4335b038-3e9f-4173-986d-cabdb87cc0b4",
  "name": "Sticky Note1",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    860,
    100
  ],
  "parameters": {
    "color": 7,
    "width": 930.8402221561373,
    "height": 488.8805508857059,
    "content": "## Step 1. Store Workflows Credential Mappings to Database\n\nWe'll achieve this by querying n8n's built-in API to query all workflows, extract the credentials list from the nodes within and then store them in a SQLite database. Don't worry, the actual credential data won't be exposed! For the database, we'll abuse the fact that the code node is able to create Sqlite databases - however, this is created in memory and will be wiped if the n8n instance is restarted."
  },
  "typeVersion": 1
}

================ Node #4199 ================
{
  "id": "c1f557ee-1176-4f3e-8431-d162f1a59990",
  "name": "Sticky Note2",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    1820,
    100
  ],
  "parameters": {
    "color": 7,
    "width": 688.6507290693205,
    "height": 527.3794193342486,
    "content": "## Step 2. Use Agent as Search Interface\n\nInstead of building a form interface like a regular person, we'll just use an AI tools agent who is given aaccess to perform queries on our database. You can ask it things like \"which workflows are using slack + airtable + googlesheets?\""
  },
  "typeVersion": 1
}

================ Node #4200 ================
{
  "id": "9bdc3fa9-d4a0-4040-bb32-6c76aaca3ad9",
  "name": "Workflow Credentials Helper Agent",
  "type": "@n8n/n8n-nodes-langchain.agent",
  "position": [
    2080,
    280
  ],
  "parameters": {
    "options": {
      "systemMessage": "=You help find information on n8n workflow credentials. When user mentions an app, assume they mean the workflow credential for the app.\n* Only if the user requests to provide a link to the workflow, replace $workflow_id with the workflow id in the following url schema: {{ window.location.protocol + '//' + window.location.host }}/workflow/$workflow_id"
    }
  },
  "typeVersion": 1.6
}

================ Node #4201 ================
{
  "id": "ff39f504-9953-47c9-81eb-3146dfd6c8c5",
  "name": "Sticky Note4",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    420,
    100
  ],
  "parameters": {
    "width": 415.13049730628427,
    "height": 347.7398931123371,
    "content": "## Try It Out!\n\n### This workflow let's you query workflow credentials using an AI SQL agent. Example use-case could be:\n* \"Which workflows are using Slack and Google Calendar?\"\n* \"Which workflows have AI in their name but are not using openAI?\"\n\n### Run the Steps separately!\n* Step 1 populates a local database\n* Step 2 engages with the chatbot"
  },
  "typeVersion": 1
}

================ Node #4202 ================
{
  "id": "3db2116c-abde-4856-bd1e-a15e0275477f",
  "name": "n8n",
  "type": "n8n-nodes-base.n8n",
  "position": [
    1140,
    280
  ],
  "parameters": {
    "filters": {},
    "requestOptions": {}
  },
  "credentials": {
    "n8nApi": {
      "id": "5vELmsVPmK4Bkqkg",
      "name": "n8n account"
    }
  },
  "typeVersion": 1
}

================ Node #4203 ================
{
  "id": "d61d8ff3-532a-4b0d-a5a7-e02d2e79ddce",
  "name": "OpenAI Chat Model",
  "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
  "position": [
    2660,
    480
  ],
  "parameters": {
    "options": {}
  },
  "credentials": {
    "openAiApi": {
      "id": "8gccIjcuf3gvaoEr",
      "name": "OpenAi account"
    }
  },
  "typeVersion": 1
}

================ Node #4204 ================
{
  "id": "b6d5c1cf-b4a1-4901-b001-0c375747ee63",
  "name": "No Operation, do nothing",
  "type": "n8n-nodes-base.noOp",
  "position": [
    1660,
    520
  ],
  "parameters": {},
  "typeVersion": 1
}

================ Node #4205 ================
{
  "id": "f4e08e32-bb96-4b5d-852e-26ad6fec3c8c",
  "name": "Add to Messages Stack",
  "type": "n8n-nodes-base.redis",
  "position": [
    1340,
    200
  ],
  "parameters": {
    "list": "=chat-buffer:{{ $json.From }}",
    "tail": true,
    "operation": "push",
    "messageData": "={{ $json.Body }}"
  },
  "credentials": {
    "redis": {
      "id": "zU4DA70qSDrZM1El",
      "name": "Redis account"
    }
  },
  "typeVersion": 1
}

================ Node #4206 ================
{
  "id": "181ae99e-ebe7-4e99-b5a5-999acc249621",
  "name": "Should Continue?",
  "type": "n8n-nodes-base.if",
  "position": [
    1660,
    360
  ],
  "parameters": {
    "options": {},
    "conditions": {
      "options": {
        "leftValue": "",
        "caseSensitive": true,
        "typeValidation": "strict"
      },
      "combinator": "and",
      "conditions": [
        {
          "id": "ec39573f-f92a-4fe4-a832-0a137de8e7d0",
          "operator": {
            "type": "string",
            "operation": "equals"
          },
          "leftValue": "={{ $('Get Latest Message Stack').item.json.messages.last() }}",
          "rightValue": "={{ $('Twilio Trigger').item.json.Body }}"
        }
      ]
    }
  },
  "typeVersion": 2
}

================ Node #4207 ================
{
  "id": "640c63ca-2798-48a9-8484-b834c1a36301",
  "name": "Window Buffer Memory",
  "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
  "position": [
    2780,
    480
  ],
  "parameters": {
    "sessionKey": "=chat-debouncer:{{ $('Twilio Trigger').item.json.From }}",
    "sessionIdType": "customKey"
  },
  "typeVersion": 1.2
}

================ Node #4208 ================
{
  "id": "123c35c5-f7b2-4b4d-b220-0e5273e25115",
  "name": "Twilio Trigger",
  "type": "n8n-nodes-base.twilioTrigger",
  "position": [
    940,
    360
  ],
  "webhookId": "0ca3da0e-e4e1-4e94-8380-06207bf9b429",
  "parameters": {
    "updates": [
      "com.twilio.messaging.inbound-message.received"
    ]
  },
  "credentials": {
    "twilioApi": {
      "id": "TJv4H4lXxPCLZT50",
      "name": "Twilio account"
    }
  },
  "typeVersion": 1
}

================ Node #4209 ================
{
  "id": "f4e86455-7f4d-4401-8f61-a859be1433a9",
  "name": "Get Latest Message Stack",
  "type": "n8n-nodes-base.redis",
  "position": [
    1500,
    360
  ],
  "parameters": {
    "key": "=chat-buffer:{{ $json.From }}",
    "keyType": "list",
    "options": {},
    "operation": "get",
    "propertyName": "messages"
  },
  "credentials": {
    "redis": {
      "id": "zU4DA70qSDrZM1El",
      "name": "Redis account"
    }
  },
  "typeVersion": 1,
  "alwaysOutputData": false
}

================ Node #4210 ================
{
  "id": "02f8e7f5-12b4-4a5a-9ce9-5f0558e447aa",
  "name": "Sticky Note",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    1232.162872321277,
    -50.203627749982275
  ],
  "parameters": {
    "color": 7,
    "width": 632.8309394802918,
    "height": 766.7069233634998,
    "content": "## Step 2. Buffer Incoming Messages\n[Learn more about using Redis](https://docs.n8n.io/integrations/builtin/app-nodes/n8n-nodes-base.redis)\n\n* New messages are captured into a list.\n* After X seconds, we get a fresh copy of this list\n* If the last message on the list is the same as the incoming message, then we know no new follow-on messages were sent within the last 5 seconds. Hence the user should be waiting and it is safe to reply.\n* But if the reverse is true, then we will abort the execution here."
  },
  "typeVersion": 1
}

================ Node #4211 ================
{
  "id": "311c0d69-a735-4435-91b6-e80bf7d4c012",
  "name": "Send Reply",
  "type": "n8n-nodes-base.twilio",
  "position": [
    3000,
    320
  ],
  "parameters": {
    "to": "={{ $('Twilio Trigger').item.json.From }}",
    "from": "={{ $('Twilio Trigger').item.json.To }}",
    "message": "={{ $json.output }}",
    "options": {}
  },
  "credentials": {
    "twilioApi": {
      "id": "TJv4H4lXxPCLZT50",
      "name": "Twilio account"
    }
  },
  "typeVersion": 1
}

================ Node #4212 ================
{
  "id": "c0e0cd08-66e3-4ca3-9441-8436c0d9e664",
  "name": "Wait 5 seconds",
  "type": "n8n-nodes-base.wait",
  "position": [
    1340,
    360
  ],
  "webhookId": "d486979c-8074-4ecb-958e-fcb24455086b",
  "parameters": {},
  "typeVersion": 1.1
}

================ Node #4213 ================
{
  "id": "c7959fa2-69a5-46b4-8e67-1ef824860f4e",
  "name": "Get Chat History",
  "type": "@n8n/n8n-nodes-langchain.memoryManager",
  "position": [
    2000,
    280
  ],
  "parameters": {
    "options": {
      "groupMessages": true
    }
  },
  "typeVersion": 1.1
}

================ Node #4214 ================
{
  "id": "55933c54-5546-4770-8b36-a31496163528",
  "name": "Window Buffer Memory1",
  "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
  "position": [
    2000,
    420
  ],
  "parameters": {
    "sessionKey": "=chat-debouncer:{{ $('Twilio Trigger').item.json.From }}",
    "sessionIdType": "customKey"
  },
  "typeVersion": 1.2
}

================ Node #4215 ================
{
  "id": "459c0181-d239-4eec-88b6-c9603868d518",
  "name": "Sticky Note1",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    774.3250485705519,
    198.07493876489747
  ],
  "parameters": {
    "color": 7,
    "width": 431.1629802181097,
    "height": 357.49804533541777,
    "content": "## Step 1. Listen for Twilio Messages\n[Read more about Twilio Trigger](https://docs.n8n.io/integrations/builtin/trigger-nodes/n8n-nodes-base.twiliotrigger)\n\nIn this example, we'll use the sender's phone number as the session ID. This will be important in retrieving chat history."
  },
  "typeVersion": 1
}

================ Node #4216 ================
{
  "id": "e06313a9-066a-4387-a36c-a6c6ff57d6f9",
  "name": "Sticky Note2",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    1900,
    80
  ],
  "parameters": {
    "color": 7,
    "width": 618.970917763344,
    "height": 501.77420646931444,
    "content": "## Step 3. Get Messages Since Last Reply\n[Read more about using Chat Memory](https://docs.n8n.io/integrations/builtin/cluster-nodes/sub-nodes/n8n-nodes-langchain.memorymanager)\n\nOnce conditions are met and we allow the agent to reply, we'll need to find the bot's last reply and work out the buffer of user messages since then. We can do this by looking using chat memory and comparing this to the latest message in our redis messages stack."
  },
  "typeVersion": 1
}

================ Node #4217 ================
{
  "id": "601a71f6-c6f8-4b73-98c7-cfa11b1facaa",
  "name": "Get Messages Buffer",
  "type": "n8n-nodes-base.set",
  "position": [
    2320,
    280
  ],
  "parameters": {
    "options": {},
    "assignments": {
      "assignments": [
        {
          "id": "01434acb-c224-46d2-99b0-7a81a2bb50c5",
          "name": "messages",
          "type": "string",
          "value": "={{\n$('Get Latest Message Stack').item.json.messages\n .slice(\n $('Get Latest Message Stack').item.json.messages.lastIndexOf(\n $('Get Chat History').item.json.messages.last().human\n || $('Twilio Trigger').item.json.chatInput\n ),\n $('Get Latest Message Stack').item.json.messages.length\n )\n .join('\\n')\n}}"
        }
      ]
    }
  },
  "typeVersion": 3.4
}

================ Node #4218 ================
{
  "id": "9e49f2de-89e6-4152-8e9c-ed47c5fc4654",
  "name": "Sticky Note3",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    2549,
    120
  ],
  "parameters": {
    "color": 7,
    "width": 670.2274698011594,
    "height": 522.5993538768389,
    "content": "## Step 4. Send Single Agent Reply For Many Messages\n[Learn more about using AI Agents](https://docs.n8n.io/integrations/builtin/cluster-nodes/root-nodes/n8n-nodes-langchain.agent)\n\nFinally, our buffered messages are sent to the AI Agent that can formulate a single response for all. This could potentially improve the conversation experience if the chat interaction is naturally more rapid and spontaneous. A drawback however is that responses could be feel much slower - tweak the wait threshold to suit your needs!"
  },
  "typeVersion": 1
}

================ Node #4219 ================
{
  "id": "be13c74a-467c-4ab1-acca-44878c68dba4",
  "name": "Sticky Note4",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    380,
    80
  ],
  "parameters": {
    "width": 375.55385425077225,
    "height": 486.69228315530853,
    "content": "## Try It Out!\n### This workflow demonstrates a simple approach to stagger an AI Agent's reply if users often send in a sequence of partial messages and in short bursts.\n\n* Twilio webhook receives user's messages which are recorded in a message stack powered by Redis.\n* The execution is immediately paused for 5 seconds and then another check is done against the message stack for the latest message.\n* The purpose of this check lets use know if the user is sending more messages or if they are waiting for a reply.\n* The execution is aborted if the latest message on the stack differs from the incoming message and continues if they are the same.\n* For the latter, the agent receives buffered messages and is able to respond to all in a single reply."
  },
  "typeVersion": 1
}

================ Node #4220 ================
{
  "id": "334d38e1-ec16-46f2-a57d-bf531adb8d3d",
  "name": "AI Agent",
  "type": "@n8n/n8n-nodes-langchain.agent",
  "position": [
    2660,
    320
  ],
  "parameters": {
    "text": "={{ $json.messages }}",
    "agent": "conversationalAgent",
    "options": {},
    "promptType": "define"
  },
  "typeVersion": 1.6
}

================ Node #4221 ================
{
  "id": "141638a4-b340-473f-a800-be7dbdcff131",
  "name": "When clicking \"Test workflow\"",
  "type": "n8n-nodes-base.manualTrigger",
  "position": [
    695,
    380
  ],
  "parameters": {},
  "typeVersion": 1
}

================ Node #4222 ================
{
  "id": "6ccdaca5-f620-4afa-bed6-92f3a450687d",
  "name": "Google Drive",
  "type": "n8n-nodes-base.googleDrive",
  "position": [
    875,
    380
  ],
  "parameters": {
    "fileId": {
      "__rl": true,
      "mode": "list",
      "value": "0B43u2YYOTJR2cC1BRkptZ3N4QTk4NEtxRko5cjhKUUFyemw0",
      "cachedResultUrl": "https://drive.google.com/file/d/0B43u2YYOTJR2cC1BRkptZ3N4QTk4NEtxRko5cjhKUUFyemw0/view?usp=drivesdk&resourcekey=0-UJ8EfTMMBRNVyBb6KhN2Tg",
      "cachedResultName": "0B0A0255.jpeg"
    },
    "options": {},
    "operation": "download"
  },
  "credentials": {
    "googleDriveOAuth2Api": {
      "id": "yOwz41gMQclOadgu",
      "name": "Google Drive account"
    }
  },
  "typeVersion": 3
}

================ Node #4223 ================
{
  "id": "b0c2f7a4-a336-4705-aeda-411f2518aaef",
  "name": "Get Color Information",
  "type": "n8n-nodes-base.editImage",
  "position": [
    1200,
    200
  ],
  "parameters": {
    "operation": "information"
  },
  "typeVersion": 1
}

================ Node #4224 ================
{
  "id": "3e42b3f1-6900-4622-8c0d-2d9a27a7e1c9",
  "name": "Resize Image",
  "type": "n8n-nodes-base.editImage",
  "position": [
    1200,
    580
  ],
  "parameters": {
    "width": 512,
    "height": 512,
    "options": {},
    "operation": "resize",
    "resizeOption": "onlyIfLarger"
  },
  "typeVersion": 1
}

================ Node #4225 ================
{
  "id": "00425bb2-289e-4a09-8fcb-52319281483c",
  "name": "Default Data Loader",
  "type": "@n8n/n8n-nodes-langchain.documentDefaultDataLoader",
  "position": [
    2300,
    380
  ],
  "parameters": {
    "options": {
      "metadata": {
        "metadataValues": [
          {
            "name": "source",
            "value": "={{ $('Document for Embedding').item.json.metadata.source }}"
          },
          {
            "name": "format",
            "value": "={{ $('Document for Embedding').item.json.metadata.format }}"
          },
          {
            "name": "backgroundColor",
            "value": "={{ $('Document for Embedding').item.json.metadata.backgroundColor }}"
          }
        ]
      }
    }
  },
  "typeVersion": 1
}

================ Node #4226 ================
{
  "id": "06dbdf39-9d72-460e-a29c-1ae4e9f3552a",
  "name": "Recursive Character Text Splitter",
  "type": "@n8n/n8n-nodes-langchain.textSplitterRecursiveCharacterTextSplitter",
  "position": [
    2300,
    500
  ],
  "parameters": {
    "options": {}
  },
  "typeVersion": 1
}

================ Node #4227 ================
{
  "id": "139cac42-c006-4c9d-8298-ade845e137a7",
  "name": "Sticky Note",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    1140,
    100
  ],
  "parameters": {
    "color": 7,
    "width": 372,
    "height": 288,
    "content": "### Get Color Channels\n[Source: https://www.pinecone.io/learn/series/image-search/color-histograms/](https://www.pinecone.io/learn/series/image-search/color-histograms/)"
  },
  "typeVersion": 1
}

================ Node #4228 ================
{
  "id": "9b8584ae-067c-4515-b194-32986ba3bf8b",
  "name": "Sticky Note1",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    1140,
    418
  ],
  "parameters": {
    "color": 7,
    "width": 376.4067897296865,
    "height": 335.30166772984643,
    "content": "### Generate Image Keywords\n[Source: https://www.pinecone.io/learn/series/image-search/bag-of-visual-words/](https://www.pinecone.io/learn/series/image-search/bag-of-visual-words/)\n\nNote, OpenAI Image models work best when image is resized to 512x512."
  },
  "typeVersion": 1
}

================ Node #4229 ================
{
  "id": "7f2c27d7-9947-42fa-aafb-78f4f95ac433",
  "name": "Sticky Note2",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    240,
    540
  ],
  "parameters": {
    "color": 3,
    "width": 359.1981770749933,
    "height": 98.40143173756314,
    "content": "\u26a0\ufe0f **Multimodal embedding is not designed analyze medical images for diagnostic features or disease patterns.** Please do not use Multimodal embedding for medical purposes."
  },
  "typeVersion": 1
}

================ Node #4230 ================
{
  "id": "cb6b4a82-db5f-41f0-94dc-6cfabe0905eb",
  "name": "Combine Image Analysis",
  "type": "n8n-nodes-base.merge",
  "position": [
    1700,
    260
  ],
  "parameters": {
    "mode": "combine",
    "options": {},
    "combinationMode": "mergeByPosition"
  },
  "typeVersion": 2.1
}

================ Node #4231 ================
{
  "id": "1ba33665-3ebb-4b23-989d-eec53dfd225a",
  "name": "Document for Embedding",
  "type": "n8n-nodes-base.set",
  "position": [
    1860,
    257
  ],
  "parameters": {
    "options": {},
    "assignments": {
      "assignments": [
        {
          "id": "8204b731-24e2-4993-9e6d-4cea80393580",
          "name": "data",
          "type": "string",
          "value": "=## keywords\\n\n{{ $json.content }}\\n\n## color information:\\n\n{{ JSON.stringify($json[\"Channel Statistics\"]) }}"
        },
        {
          "id": "ca49cccf-ea4e-4362-bf49-ac836c8758d3",
          "name": "metadata",
          "type": "object",
          "value": "={ \"format\": \"{{ $json.format }}\", \"backgroundColor\": \"{{ $json[\"Background Color\"] }}\", \"source\": \"{{ $binary.data.fileName }}\" } "
        }
      ]
    }
  },
  "typeVersion": 3.3
}

================ Node #4232 ================
{
  "id": "5d01a2fd-0190-48fc-b588-d5872c5cd793",
  "name": "Sticky Note3",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    640,
    250.0169327052916
  ],
  "parameters": {
    "color": 7,
    "width": 418.6907913057789,
    "height": 316.7698949693208,
    "content": "## 1. Get the Source Image\nIn this demo, we just need an image file. We'll pull an image from google drive but you can use all input trigger or source you prefer."
  },
  "typeVersion": 1
}

================ Node #4233 ================
{
  "id": "4c9825f3-6a2b-4fd2-bdb1-e49f8d947e7a",
  "name": "Sticky Note4",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    1098.439755647174,
    -145.1609149026466
  ],
  "parameters": {
    "color": 7,
    "width": 462.52060804115854,
    "height": 938.3723985625845,
    "content": "## 2. Image Embedding Methods\n[Read more about working with images in n8n](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.editimage)\n\nThere are a [myriad of image embedding techniques](https://www.pinecone.io/learn/series/image-search/) some which involve specialised models and some which do a simplified image-to-text representation.\nIn this demo, we'll use the simplified text representation methods: collecting color channel information and using Multimodal LLMs to produce keywords for the image. Together, these will form the document we'll embed to represent our image for search."
  },
  "typeVersion": 1
}

================ Node #4234 ================
{
  "id": "e4035987-16c0-4d03-9e20-5f2042a6a020",
  "name": "Sticky Note5",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    1600,
    120
  ],
  "parameters": {
    "color": 7,
    "width": 418.6907913057789,
    "height": 343.6004071339855,
    "content": "## 3. Generate Embedding Doc\nIt is important to define your metadata for later filtering and retrieval purposes.\n\n"
  },
  "typeVersion": 1
}

================ Node #4235 ================
{
  "id": "91fe4c5c-c063-48e2-b248-801c11880c69",
  "name": "Sticky Note6",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    2060,
    -11.068945113406585
  ],
  "parameters": {
    "color": 7,
    "width": 532.5269726975372,
    "height": 665.9365418117011,
    "content": "## 3. Store in Vector Store\n[Read more about vector stores](https://docs.n8n.io/integrations/builtin/cluster-nodes/root-nodes/n8n-nodes-langchain.vectorstoreinmemory)\n\nOnce our document is ready, we can just insert into any vector store to make it ready for searching. When searching, be sure to defined the same vector store index used here!\nNote: Metadata is defined in the document loader which must be mapped manually.\n\n"
  },
  "typeVersion": 1
}

================ Node #4236 ================
{
  "id": "6e8ffa06-ddec-463a-b8d6-581ad7095398",
  "name": "Embeddings OpenAI1",
  "type": "@n8n/n8n-nodes-langchain.embeddingsOpenAi",
  "position": [
    2680,
    547
  ],
  "parameters": {
    "options": {}
  },
  "credentials": {
    "openAiApi": {
      "id": "8gccIjcuf3gvaoEr",
      "name": "OpenAi account"
    }
  },
  "typeVersion": 1
}

================ Node #4237 ================
{
  "id": "3dea73b2-6aa1-4158-945e-a5d6bea65244",
  "name": "Sticky Note7",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    2620,
    200
  ],
  "parameters": {
    "color": 7,
    "width": 400.96585774172854,
    "height": 512.739000439197,
    "content": "## 4. Try it out!\n[Read more about vector stores](https://docs.n8n.io/integrations/builtin/cluster-nodes/root-nodes/n8n-nodes-langchain.vectorstoreinmemory)\n\nHere's a quick test to use a simple text prompt to search for the image. Next step would be to implement image-to-image search by using the \"Embedding Doc\" to search rather to store in the vector database.\n\n"
  },
  "typeVersion": 1
}

================ Node #4238 ================
{
  "id": "f6a543d4-df3b-456c-8f85-4dca29029b55",
  "name": "Sticky Note8",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    240,
    140
  ],
  "parameters": {
    "width": 359.6648027457353,
    "height": 384.6280362222034,
    "content": "## Try It Out!\n### This workflow does the following:\n* Downloads a selected image from Google Drive.\n* Extracts colour channel information from the image.\n* Generates semantic keywords of the iamge using OpenAI vision model.\n* Combines extracted and generated data to create an embedding document for the image.\n* Inserts this document into a vector store to allow for vector search on the original image. \n\n### Need Help?\nJoin the [Discord](https://discord.com/invite/XPKeKXeB7d) or ask in the [Forum](https://community.n8n.io/)!\n\nHappy Hacking!"
  },
  "typeVersion": 1
}

================ Node #4239 ================
{
  "id": "1b1e8568-3779-4ee1-b520-517246d9bf86",
  "name": "Get Image Keywords",
  "type": "@n8n/n8n-nodes-langchain.openAi",
  "position": [
    1360,
    580
  ],
  "parameters": {
    "text": "Extract all possible semantic keywords which describe the image. Be comprehensive and be sure to identify subjects (if applicable) such as biological and non-biological objects, lightning, mood, tone, color, special effects, camera and/or techniques used if known. Respond with a comma-separated list.",
    "options": {
      "detail": "high"
    },
    "resource": "image",
    "inputType": "base64",
    "operation": "analyze"
  },
  "credentials": {
    "openAiApi": {
      "id": "8gccIjcuf3gvaoEr",
      "name": "OpenAi account"
    }
  },
  "typeVersion": 1.3
}

================ Node #4240 ================
{
  "id": "724acae9-75d2-4421-b5a3-b920f7bda825",
  "name": "In-Memory Vector Store",
  "type": "@n8n/n8n-nodes-langchain.vectorStoreInMemory",
  "position": [
    2180,
    200
  ],
  "parameters": {
    "mode": "insert",
    "memoryKey": "image_embeddings"
  },
  "typeVersion": 1
}

================ Node #4241 ================
{
  "id": "52afd512-0d55-4ae3-9377-4cb324c571a8",
  "name": "Embeddings OpenAI",
  "type": "@n8n/n8n-nodes-langchain.embeddingsOpenAi",
  "position": [
    2180,
    420
  ],
  "parameters": {
    "options": {}
  },
  "credentials": {
    "openAiApi": {
      "id": "8gccIjcuf3gvaoEr",
      "name": "OpenAi account"
    }
  },
  "typeVersion": 1
}

================ Node #4242 ================
{
  "id": "c769f279-22ef-4cb1-aef3-9089bb92a0a4",
  "name": "Search for Image",
  "type": "@n8n/n8n-nodes-langchain.vectorStoreInMemory",
  "position": [
    2680,
    387
  ],
  "parameters": {
    "mode": "load",
    "prompt": "student having fun",
    "memoryKey": "image_embeddings"
  },
  "typeVersion": 1
}

================ Node #4243 ================
{
  "id": "abccacce-bbdc-428e-94e0-19996c5bfe02",
  "name": "Sticky Note",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    1720,
    160
  ],
  "parameters": {
    "color": 7,
    "width": 319.5392879244982,
    "height": 218.88813194060202,
    "content": "### AI agent that can scrape webpages\nRemake of https://n8n.io/workflows/2006-ai-agent-that-can-scrape-webpages/\n\n**Changes**:\n* Replaces Execute Workflow Tool and Subworkflow\n* Replaces Response Formatting"
  },
  "typeVersion": 1
}

================ Node #4244 ================
{
  "id": "9fc05c79-5a2d-4ac4-a4f5-32b9c1b385e1",
  "name": "OpenAI Chat Model",
  "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
  "position": [
    1340,
    340
  ],
  "parameters": {
    "options": {}
  },
  "credentials": {
    "openAiApi": {
      "id": "8gccIjcuf3gvaoEr",
      "name": "OpenAi account"
    }
  },
  "typeVersion": 1
}

================ Node #4245 ================
{
  "id": "45c9bdaf-d51e-4026-8911-4b04c5473b06",
  "name": "Sticky Note1",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    1720,
    560
  ],
  "parameters": {
    "color": 7,
    "width": 365.9021913627245,
    "height": 245.35379866205295,
    "content": "### Allow your AI to call an API to fetch data\nRemake of https://n8n.io/workflows/2094-allow-your-ai-to-call-an-api-to-fetch-data/\n\n**Changes**:\n* Replaces Execute Workflow Tool and Subworkflow\n* Replaces Manual Query Params Definitions\n* Replaces Response Formatting"
  },
  "typeVersion": 1
}

================ Node #4246 ================
{
  "id": "bc1754e6-01f4-4561-8814-c08feb45acec",
  "name": "OpenAI Chat Model1",
  "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
  "position": [
    1340,
    740
  ],
  "parameters": {
    "options": {}
  },
  "credentials": {
    "openAiApi": {
      "id": "8gccIjcuf3gvaoEr",
      "name": "OpenAi account"
    }
  },
  "typeVersion": 1
}

================ Node #4247 ================
{
  "id": "a40230ae-6050-4bb8-b275-3a893dc3ad98",
  "name": "Activity Tool",
  "type": "@n8n/n8n-nodes-langchain.toolHttpRequest",
  "position": [
    1560,
    740
  ],
  "parameters": {
    "url": "https://bored-api.appbrewery.com/filter",
    "sendQuery": true,
    "parametersQuery": {
      "values": [
        {
          "name": "type"
        },
        {
          "name": "participants"
        }
      ]
    },
    "toolDescription": "Call this tool to suggest an activity where:\n* the parameter \"type\" is one of \"education\", \"recreational\",\"social\",\"diy\",\"charity\",\"cooking\",\"relaxation\",\"music\",\"busywork\"\n* the parameter \"participants\" is the number of participants for the activity"
  },
  "typeVersion": 1
}

================ Node #4248 ================
{
  "id": "297377e0-e149-4786-b521-82670ac390a7",
  "name": "Set ChatInput1",
  "type": "n8n-nodes-base.set",
  "position": [
    1180,
    560
  ],
  "parameters": {
    "options": {},
    "assignments": {
      "assignments": [
        {
          "id": "e976bf5f-8803-4129-9136-115b3d15755c",
          "name": "chatInput",
          "type": "string",
          "value": "Hi! Please suggest something to do. I feel like learning something new!"
        }
      ]
    }
  },
  "typeVersion": 3.4
}

================ Node #4249 ================
{
  "id": "a9128da1-4486-4a17-b9b3-64ebc402348d",
  "name": "AI Agent1",
  "type": "@n8n/n8n-nodes-langchain.agent",
  "position": [
    1360,
    560
  ],
  "parameters": {
    "text": "={{ $json.chatInput }}",
    "options": {},
    "promptType": "define"
  },
  "typeVersion": 1.6
}

================ Node #4250 ================
{
  "id": "28a5e75e-e32d-4c94-bea2-7347923e6bb9",
  "name": "Set ChatInput",
  "type": "n8n-nodes-base.set",
  "position": [
    1160,
    160
  ],
  "parameters": {
    "options": {},
    "assignments": {
      "assignments": [
        {
          "id": "9695c156-c882-4e43-8a4e-70fbdc1a63de",
          "name": "chatInput",
          "type": "string",
          "value": "Can get the latest 10 issues from https://github.com/n8n-io/n8n/issues?"
        }
      ]
    }
  },
  "typeVersion": 3.4
}

================ Node #4251 ================
{
  "id": "d29b30fb-7edb-4665-bc6b-a511caf9db9f",
  "name": "When clicking \u2018Test workflow\u2019",
  "type": "n8n-nodes-base.manualTrigger",
  "position": [
    900,
    400
  ],
  "parameters": {},
  "typeVersion": 1
}

================ Node #4252 ================
{
  "id": "066f9cdd-4bd3-48a1-bf9b-32eda3e28945",
  "name": "AI Agent",
  "type": "@n8n/n8n-nodes-langchain.agent",
  "position": [
    1360,
    160
  ],
  "parameters": {
    "text": "={{ $json.chatInput }}",
    "options": {},
    "promptType": "define"
  },
  "typeVersion": 1.6
}

================ Node #4253 ================
{
  "id": "fb4abae8-7e38-47b7-9595-403e523f7125",
  "name": "Webscraper Tool",
  "type": "@n8n/n8n-nodes-langchain.toolHttpRequest",
  "position": [
    1560,
    340
  ],
  "parameters": {
    "url": "https://api.firecrawl.dev/v0/scrape",
    "fields": "markdown",
    "method": "POST",
    "sendBody": true,
    "dataField": "data",
    "authentication": "genericCredentialType",
    "parametersBody": {
      "values": [
        {
          "name": "url"
        },
        {
          "name": "pageOptions",
          "value": "={{ {\n onlyMainContent: true,\n replaceAllPathsWithAbsolutePaths: true,\n removeTags: 'img,svg,video,audio'\n} }}",
          "valueProvider": "fieldValue"
        }
      ]
    },
    "fieldsToInclude": "selected",
    "genericAuthType": "httpHeaderAuth",
    "toolDescription": "Call this tool to fetch a webpage content.",
    "optimizeResponse": true
  },
  "credentials": {
    "httpHeaderAuth": {
      "id": "OUOnyTkL9vHZNorB",
      "name": "Firecrawl API"
    }
  },
  "typeVersion": 1
}

================ Node #4254 ================
{
  "id": "73d3213c-1ecb-4007-b882-1cc756a6f6e0",
  "name": "Sticky Note2",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    420,
    120
  ],
  "parameters": {
    "width": 413.82332632615135,
    "height": 435.92895157500243,
    "content": "## Try It Out!\n\n### The HTTP tool is drastically simplifies API-enabled AI agents cutting down the number of workflow nodes by as much as 10!\n\n* Available since v1.47.0\n* Recommended for single purpose APIs which don't require much post-fetch formatting.\n* If you require a chain of API calls, you may need to implement a subworkflow instead.\n\n### Need Help?\nJoin the [Discord](https://discord.com/invite/XPKeKXeB7d) or ask in the [Forum](https://community.n8n.io/)!\n\nHappy Hacking!"
  },
  "typeVersion": 1
}

================ Node #4255 ================
{
  "id": "1bb3c94e-326e-41ca-82e4-102a598dba39",
  "name": "When clicking \u2018Test workflow\u2019",
  "type": "n8n-nodes-base.manualTrigger",
  "position": [
    -320,
    300
  ],
  "parameters": {},
  "typeVersion": 1
}

================ Node #4256 ================
{
  "id": "751b283b-ea88-4fcd-ace3-3c86631f8876",
  "name": "Embeddings Mistral Cloud",
  "type": "@n8n/n8n-nodes-langchain.embeddingsMistralCloud",
  "position": [
    1760,
    560
  ],
  "parameters": {
    "options": {}
  },
  "credentials": {
    "mistralCloudApi": {
      "id": "EIl2QxhXAS9Hkg37",
      "name": "Mistral Cloud account"
    }
  },
  "typeVersion": 1
}

================ Node #4257 ================
{
  "id": "f0851949-1036-4040-84df-61295cc5db74",
  "name": "Default Data Loader",
  "type": "@n8n/n8n-nodes-langchain.documentDefaultDataLoader",
  "position": [
    1900,
    560
  ],
  "parameters": {
    "options": {
      "metadata": {
        "metadataValues": [
          {
            "name": "chapter",
            "value": "={{ $('For Each Section...').item.json.chapter }}"
          },
          {
            "name": "section",
            "value": "={{ $('For Each Section...').item.json.label }}"
          },
          {
            "name": "=title",
            "value": "={{ $('For Each Section...').item.json.title }}"
          },
          {
            "name": "content_order",
            "value": "={{ $itemIndex }}"
          }
        ]
      }
    },
    "jsonData": "={{ $json.content }}",
    "jsonMode": "expressionData"
  },
  "typeVersion": 1
}

================ Node #4258 ================
{
  "id": "41d10b61-9fbe-446e-a65a-0db6e0116e5b",
  "name": "Recursive Character Text Splitter",
  "type": "@n8n/n8n-nodes-langchain.textSplitterRecursiveCharacterTextSplitter",
  "position": [
    1920,
    680
  ],
  "parameters": {
    "options": {},
    "chunkSize": 2000
  },
  "typeVersion": 1
}

================ Node #4259 ================
{
  "id": "a1ecb096-4d31-4993-b801-ca3f09a9edc7",
  "name": "Get Tax Code Zip File",
  "type": "n8n-nodes-base.httpRequest",
  "position": [
    -20,
    340
  ],
  "parameters": {
    "url": "https://statutes.capitol.texas.gov/Docs/Zips/TX.pdf.zip",
    "options": {
      "response": {
        "response": {
          "responseFormat": "file"
        }
      }
    }
  },
  "typeVersion": 4.2
}

================ Node #4260 ================
{
  "id": "cf983315-fe2a-43c1-8dc6-b17a217b845e",
  "name": "Extract Zip Files",
  "type": "n8n-nodes-base.compression",
  "position": [
    140,
    340
  ],
  "parameters": {},
  "typeVersion": 1.1
}

================ Node #4261 ================
{
  "id": "8d02dd80-d14a-4e56-ab40-f2c4a445c57b",
  "name": "Files as Items",
  "type": "n8n-nodes-base.splitOut",
  "position": [
    300,
    340
  ],
  "parameters": {
    "include": "allOtherFields",
    "options": {},
    "fieldToSplitOut": "$binary"
  },
  "typeVersion": 1
}

================ Node #4262 ================
{
  "id": "038060dc-e01d-40ae-878d-5043bc36ab91",
  "name": "Extract PDF Contents",
  "type": "n8n-nodes-base.extractFromFile",
  "position": [
    560,
    380
  ],
  "parameters": {
    "options": {},
    "operation": "pdf",
    "binaryPropertyName": "=file_{{ $itemIndex }}"
  },
  "typeVersion": 1
}

================ Node #4263 ================
{
  "id": "4a85003b-b988-467b-b1cb-29206cbed879",
  "name": "Extract From Chapter",
  "type": "n8n-nodes-base.set",
  "position": [
    740,
    380
  ],
  "parameters": {
    "options": {},
    "assignments": {
      "assignments": [
        {
          "id": "d791928a-d775-48cc-9004-a92cbe2403d3",
          "name": "contents",
          "type": "array",
          "value": "={{\n $json.text\n .substring($json.text.search(/\\nSec\\.\\nA[0-9]{1,4}\\.[0-9]{1,5}\\.AA/), $json.text.length)\n .split(/\\nSec\\.\\nA[0-9]{1,2}\\.[0-9]{1,2}\\.AA/g)\n .filter(text => !text.isEmpty())\n .map(text => {\n const output = text.replaceAll('AA', ' ').replaceAll('\\nA', ' ');\n const title = output.substring(0, output.indexOf('.'));\n const content = output.substring(output.indexOf('.')+1, output.length).replaceAll('\\n', ' ').trim();\n return { title, content };\n })\n}}"
        },
        {
          "id": "bc06641f-0b75-4a35-8752-78803231d5d6",
          "name": "labels",
          "type": "array",
          "value": "={{\n $json.text\n .match(/\\nSec\\.\\nA[0-9]{1,4}\\.[0-9]{1,5}\\.AA/g)\n .map(text => ({\n label: text.replaceAll('AA', ' ')\n .replaceAll('\\nA', ' ')\n .replaceAll('\\n', '')\n .trim()\n }))\n}}"
        }
      ]
    }
  },
  "typeVersion": 3.3
}

================ Node #4264 ================
{
  "id": "ee338786-91df-4784-bd7e-f86c0e13ca26",
  "name": "Map To Sections",
  "type": "n8n-nodes-base.set",
  "position": [
    740,
    520
  ],
  "parameters": {
    "options": {},
    "assignments": {
      "assignments": [
        {
          "id": "60109e60-d760-45bb-be09-7cb2b5eb85bc",
          "name": "section",
          "type": "array",
          "value": "={{\n $json.labels.map((label, idx) => ({\n label: label.label.match(/\\d.+/)[0].replace(/\\.$/, ''),\n title: $json.contents[idx].title,\n content: $json.contents[idx].content,\n chapter: $('Extract PDF Contents').first().json.info.Title,\n }))\n}}"
        }
      ]
    }
  },
  "typeVersion": 3.3
}

================ Node #4265 ================
{
  "id": "41c9899d-26d7-48af-9af2-8563ab0fb7e4",
  "name": "Execute Workflow Trigger",
  "type": "n8n-nodes-base.executeWorkflowTrigger",
  "position": [
    1313,
    1200
  ],
  "parameters": {},
  "typeVersion": 1
}

================ Node #4266 ================
{
  "id": "3a93c19b-09d9-4e38-8b0c-2008fc03f7fc",
  "name": "Get Mistral Embeddings",
  "type": "n8n-nodes-base.httpRequest",
  "position": [
    1660,
    1060
  ],
  "parameters": {
    "url": "https://api.mistral.ai/v1/embeddings",
    "method": "POST",
    "options": {},
    "sendBody": true,
    "authentication": "predefinedCredentialType",
    "bodyParameters": {
      "parameters": [
        {
          "name": "model",
          "value": "mistral-embed"
        },
        {
          "name": "encoding_format",
          "value": "float"
        },
        {
          "name": "input",
          "value": "={{ $json.query }}"
        }
      ]
    },
    "nodeCredentialType": "mistralCloudApi"
  },
  "credentials": {
    "mistralCloudApi": {
      "id": "EIl2QxhXAS9Hkg37",
      "name": "Mistral Cloud account"
    }
  },
  "typeVersion": 4.2
}

================ Node #4267 ================
{
  "id": "1adc12bd-ba61-4f1a-b1f9-3f19a542e294",
  "name": "Content Chunking @ 50k Chars",
  "type": "n8n-nodes-base.set",
  "position": [
    1580,
    400
  ],
  "parameters": {
    "options": {},
    "assignments": {
      "assignments": [
        {
          "id": "7753a4f4-3ec2-4c05-81df-3d5e8979a478",
          "name": "=content",
          "type": "array",
          "value": "={{ new Array(Math.round($json.content.length / Math.min($json.content.length, 30000))).fill('').map((_,idx) => $json.content.substring(idx * 30000, idx * 50000 + 30000)) }}"
        }
      ]
    }
  },
  "typeVersion": 3.3
}

================ Node #4268 ================
{
  "id": "ff8adce2-8f73-4a8f-b512-5aa560ca0954",
  "name": "Split Out Chunks",
  "type": "n8n-nodes-base.splitOut",
  "position": [
    1580,
    580
  ],
  "parameters": {
    "options": {},
    "fieldToSplitOut": "content"
  },
  "typeVersion": 1
}

================ Node #4269 ================
{
  "id": "5f08ce3c-240d-4c91-bb23-953866fd0361",
  "name": "For Each Section...",
  "type": "n8n-nodes-base.splitInBatches",
  "position": [
    1400,
    280
  ],
  "parameters": {
    "options": {},
    "batchSize": 5
  },
  "typeVersion": 3
}

================ Node #4270 ================
{
  "id": "6346cf67-7d93-4315-bb0d-2e016c9853b9",
  "name": "Sections To List",
  "type": "n8n-nodes-base.splitOut",
  "position": [
    940,
    380
  ],
  "parameters": {
    "options": {},
    "fieldToSplitOut": "section"
  },
  "typeVersion": 1
}

================ Node #4271 ================
{
  "id": "95e34952-03e2-40e3-a245-9da8c9e1f249",
  "name": "Only Valid Sections",
  "type": "n8n-nodes-base.filter",
  "position": [
    1100,
    380
  ],
  "parameters": {
    "options": {},
    "conditions": {
      "options": {
        "leftValue": "",
        "caseSensitive": true,
        "typeValidation": "strict"
      },
      "combinator": "or",
      "conditions": [
        {
          "id": "121e8f86-2ead-47e0-8e17-52d7c6ba8265",
          "operator": {
            "type": "string",
            "operation": "notEmpty",
            "singleValue": true
          },
          "leftValue": "={{ $json.content }}",
          "rightValue": ""
        }
      ]
    }
  },
  "typeVersion": 2
}

================ Node #4272 ================
{
  "id": "dfe1818f-93b7-4116-8a6e-dcb2e6c23fcf",
  "name": "Use Qdrant Search API1",
  "type": "n8n-nodes-base.httpRequest",
  "position": [
    1860,
    1060
  ],
  "parameters": {
    "url": "=http://qdrant:6333/collections/texas_tax_codes/points/search",
    "method": "POST",
    "options": {},
    "sendBody": true,
    "authentication": "predefinedCredentialType",
    "bodyParameters": {
      "parameters": [
        {
          "name": "limit",
          "value": "={{ 4 }}"
        },
        {
          "name": "vector",
          "value": "={{ $json.data[0].embedding }}"
        },
        {
          "name": "with_payload",
          "value": "={{ true }}"
        }
      ]
    },
    "nodeCredentialType": "qdrantApi"
  },
  "credentials": {
    "qdrantApi": {
      "id": "NyinAS3Pgfik66w5",
      "name": "QdrantApi account"
    }
  },
  "typeVersion": 4.2
}

================ Node #4273 ================
{
  "id": "588318e6-e188-4d99-9c11-39b2f3fb1c18",
  "name": "Use Qdrant Scroll API",
  "type": "n8n-nodes-base.httpRequest",
  "position": [
    1660,
    1320
  ],
  "parameters": {
    "url": "=http://qdrant:6333/collections/texas_tax_codes/points/scroll",
    "method": "POST",
    "options": {
      "pagination": {
        "pagination": {
          "parameters": {
            "parameters": [
              {
                "name": "next_page_offset",
                "type": "body",
                "value": "={{ $response.body.result.next_page_offset }}"
              }
            ]
          },
          "completeExpression": "={{ $response.body.result.next_page_offset === null }}",
          "paginationCompleteWhen": "other"
        }
      }
    },
    "sendBody": true,
    "authentication": "predefinedCredentialType",
    "bodyParameters": {
      "parameters": [
        {
          "name": "limit",
          "value": "={{ 100 }}"
        },
        {
          "name": "with_payload",
          "value": "={{ true }}"
        },
        {
          "name": "filter",
          "value": "={{\n{\n \"must\": [\n ($json.query.section\n ? { \"key\": \"metadata.section\", \"match\": { \"value\": $json.query.section } }\n : { \"key\": \"metadata.chapter\", \"match\": { \"value\": $json.query.chapter } }\n )\n ]\n}\n}}"
        }
      ]
    },
    "nodeCredentialType": "qdrantApi"
  },
  "credentials": {
    "qdrantApi": {
      "id": "NyinAS3Pgfik66w5",
      "name": "QdrantApi account"
    }
  },
  "typeVersion": 4.2
}

================ Node #4274 ================
{
  "id": "bbf01344-c60e-42b3-8d7d-2bb360876d79",
  "name": "Get Search Response",
  "type": "n8n-nodes-base.set",
  "position": [
    1860,
    1320
  ],
  "parameters": {
    "options": {},
    "assignments": {
      "assignments": [
        {
          "id": "08ad2d6e-4ed1-409e-b89c-1f0c7fdf1b64",
          "name": "response",
          "type": "string",
          "value": "=---\nchapter: {{ $json.result.points.first().payload.metadata.chapter }}\nsection: {{ $json.result.points.first().payload.metadata.section }}\ntitle: {{ $json.result.points.first().payload.metadata.title }}\n---\n{{ $json.result.points\n .toSorted((a,b) => (a.payload.metadata.content_order || 0) - (b.payload.metadata.content_order || 0))\n .map(point => point.payload.content).join('\\n') }}"
        }
      ]
    }
  },
  "typeVersion": 3.3
}

================ Node #4275 ================
{
  "id": "3b23ff5e-158a-470f-a262-d001d52feeba",
  "name": "Sticky Note",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    -100,
    183.38345554113084
  ],
  "parameters": {
    "color": 7,
    "width": 571.4359274276384,
    "height": 352.65642339230595,
    "content": "## Step 1. Download the Tax Code PDF\n[Read more about handling Zip Files](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.compression/)\n\nLet's begin by pulling a zip file containing all the tax codes as separate PDF files. We can unzip on the fly with n8n's compression node."
  },
  "typeVersion": 1
}

================ Node #4276 ================
{
  "id": "02826887-eb26-48a0-928e-fe56ee008425",
  "name": "Sticky Note1",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    500,
    199.87747230655896
  ],
  "parameters": {
    "color": 7,
    "width": 777.897719182587,
    "height": 503.3459981018574,
    "content": "## Step 2. Extract and Partition Into Chapters & Sections\n[Learn more about reading PDF Files](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.extractfromfile)\n\nRather than ingest the raw text of the PDF, we'll be a little more strategic and extract the tax code sections separately instead. Not only will this provide cleaner results, we'll also be able to fetch sections in isolation if required."
  },
  "typeVersion": 1
}

================ Node #4277 ================
{
  "id": "31a34972-31ab-4b96-9d09-cd30a3b184cf",
  "name": "Sticky Note2",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    1300,
    108.82958126396
  ],
  "parameters": {
    "color": 7,
    "width": 1045.1698686248747,
    "height": 771.1260499456115,
    "content": "## Step 3. Save into Qdrant VectorStore\n[Read more about using the Qdrant Vectorstore](https://docs.n8n.io/integrations/builtin/cluster-nodes/root-nodes/n8n-nodes-langchain.vectorstoreqdrant)\n\nWe'll save our data into a Qdrant collection being mindful to use metadata to take full advantage of Qdrant's filtering capabilities later.\nThough not always required, since the tax code documents can be quite large we'll implement a loop here to throttle the number of tokens being processed as to not trip the Mistral.ai rate limits for embeddings."
  },
  "typeVersion": 1
}

================ Node #4278 ================
{
  "id": "27039fa6-6388-45ee-a2d5-6bb68554944b",
  "name": "Qdrant Vector Store",
  "type": "@n8n/n8n-nodes-langchain.vectorStoreQdrant",
  "position": [
    1760,
    400
  ],
  "parameters": {
    "mode": "insert",
    "options": {},
    "qdrantCollection": {
      "__rl": true,
      "mode": "list",
      "value": "texas_tax_codes",
      "cachedResultName": "texas_tax_codes"
    }
  },
  "credentials": {
    "qdrantApi": {
      "id": "NyinAS3Pgfik66w5",
      "name": "QdrantApi account"
    }
  },
  "typeVersion": 1
}

================ Node #4279 ================
{
  "id": "5ec16c20-eb1e-454a-8165-594d83dd8711",
  "name": "Sticky Note3",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    360,
    900
  ],
  "parameters": {
    "color": 7,
    "width": 858.1415560000298,
    "height": 513.2269439624808,
    "content": "## Step 4. Build a Tax Code Assistant ChatBot\n[Learn more about using AI Agents in n8n](https://docs.n8n.io/integrations/builtin/cluster-nodes/root-nodes/n8n-nodes-langchain.agent)\n\nFor our chatbot, we'll use an AI agent node because we want to achieve more than one functionality. The first will be querying to relevant texts to answer a user's question and secondly, a direct search feature to pull full section text when requested."
  },
  "typeVersion": 1
}

================ Node #4280 ================
{
  "id": "d5145c6f-768b-42d8-a045-20e045f52b0b",
  "name": "Sticky Note4",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    1240,
    904.6076722083936
  ],
  "parameters": {
    "color": 7,
    "width": 1030.0926850706744,
    "height": 577.7854680142904,
    "content": "## Step 5. Use Qdrant API as Tools\n[Learn more about using AI Agents in n8n](https://docs.n8n.io/integrations/builtin/cluster-nodes/root-nodes/n8n-nodes-langchain.agent)\n\nOur Ask Tool will generate embeddings using Mistral.ai and query our Qdrant collection using the Qdrant Search API.\nOur Search Tool will use filter our Qdrant collection using the Qdrant Scroll API, matching on each doc's section metadata key."
  },
  "typeVersion": 1
}

================ Node #4281 ================
{
  "id": "ccf50479-53d8-4edf-8f2b-73060a6a6e0f",
  "name": "AI Agent",
  "type": "@n8n/n8n-nodes-langchain.agent",
  "position": [
    700,
    1063
  ],
  "parameters": {
    "options": {
      "systemMessage": "You are a helpful assistant answering user questions on the tax code legistration for the state of Texas, united states of america.\n\nAlong with your response also note in which chapter and section number the information was found. "
    }
  },
  "typeVersion": 1.6
}

================ Node #4282 ================
{
  "id": "d7e7fa9e-73ba-4df3-862e-25af63d9d9b4",
  "name": "Window Buffer Memory",
  "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
  "position": [
    820,
    1223
  ],
  "parameters": {},
  "typeVersion": 1.2
}

================ Node #4283 ================
{
  "id": "a79bdbcd-7157-470a-aadc-bd3f8a4c40d2",
  "name": "When chat message received",
  "type": "@n8n/n8n-nodes-langchain.chatTrigger",
  "position": [
    420,
    1063
  ],
  "webhookId": "db2b118d-942e-4be9-b154-7df887232f97",
  "parameters": {
    "public": true,
    "options": {
      "loadPreviousSession": "memory"
    },
    "initialMessages": ""
  },
  "typeVersion": 1
}

================ Node #4284 ================
{
  "id": "6046f137-b508-484f-8577-ac51a35eee09",
  "name": "Window Buffer Memory1",
  "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
  "position": [
    420,
    1223
  ],
  "parameters": {},
  "typeVersion": 1.2
}

================ Node #4285 ================
{
  "id": "30f238f8-1987-4d6d-b06d-ac2106ea3734",
  "name": "OpenAI Chat Model",
  "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
  "position": [
    700,
    1223
  ],
  "parameters": {
    "options": {}
  },
  "credentials": {
    "openAiApi": {
      "id": "8gccIjcuf3gvaoEr",
      "name": "OpenAi account"
    }
  },
  "typeVersion": 1
}

================ Node #4286 ================
{
  "id": "8a8490f6-5957-495c-a7af-15cec669f39c",
  "name": "1sec",
  "type": "n8n-nodes-base.wait",
  "position": [
    2160,
    660
  ],
  "webhookId": "852317f0-aadf-4658-ae44-d05e5de29302",
  "parameters": {
    "amount": 1
  },
  "executeOnce": false,
  "typeVersion": 1.1
}

================ Node #4287 ================
{
  "id": "142450f5-8ec1-4ae6-b25c-df3233394d4e",
  "name": "Ask Tool",
  "type": "@n8n/n8n-nodes-langchain.toolWorkflow",
  "position": [
    960,
    1223
  ],
  "parameters": {
    "name": "query_tax_code_knowledgebase",
    "fields": {
      "values": [
        {
          "name": "route",
          "stringValue": "ask_tool"
        }
      ]
    },
    "workflowId": "={{ $workflow.id }}",
    "description": "Call this tool to query the tax code database for information. Structure your query in the form of a question for best results."
  },
  "typeVersion": 1.1
}

================ Node #4288 ================
{
  "id": "ee455a4e-c9a1-49b2-a036-d3f3d34099c6",
  "name": "Search Tool",
  "type": "@n8n/n8n-nodes-langchain.toolWorkflow",
  "position": [
    1060,
    1223
  ],
  "parameters": {
    "name": "get_tax_code_section",
    "fields": {
      "values": [
        {
          "name": "route",
          "stringValue": "search_tool"
        }
      ]
    },
    "workflowId": "={{ $workflow.id }}",
    "description": "Call this tool to search for specific sections of the tax code document. Pass in either a known section number/id to get the section's text or a known chapter name to return all sections for the chapter.",
    "jsonSchemaExample": "{\n\t\"chapter\": \"some_value\",\n \"section\": \"Sec 1.01\"\n}",
    "specifyInputSchema": true
  },
  "typeVersion": 1.1
}

================ Node #4289 ================
{
  "id": "f3240f8d-8869-4088-8e4f-d4e23a3c12a8",
  "name": "Switch",
  "type": "n8n-nodes-base.switch",
  "position": [
    1473,
    1200
  ],
  "parameters": {
    "rules": {
      "values": [
        {
          "outputKey": "ask_tool",
          "conditions": {
            "options": {
              "leftValue": "",
              "caseSensitive": true,
              "typeValidation": "strict"
            },
            "combinator": "and",
            "conditions": [
              {
                "operator": {
                  "type": "string",
                  "operation": "equals"
                },
                "leftValue": "={{ $json.route }}",
                "rightValue": "ask_tool"
              }
            ]
          },
          "renameOutput": true
        },
        {
          "outputKey": "search_tool",
          "conditions": {
            "options": {
              "leftValue": "",
              "caseSensitive": true,
              "typeValidation": "strict"
            },
            "combinator": "and",
            "conditions": [
              {
                "id": "909362ed-eb97-405c-9f2f-f404a3bfeaf3",
                "operator": {
                  "name": "filter.operator.equals",
                  "type": "string",
                  "operation": "equals"
                },
                "leftValue": "={{ $json.route }}",
                "rightValue": "search_tool"
              }
            ]
          },
          "renameOutput": true
        }
      ]
    },
    "options": {}
  },
  "typeVersion": 3
}

================ Node #4290 ================
{
  "id": "71441b5a-099b-49e0-a212-3087d958b38b",
  "name": "Get Ask Response",
  "type": "n8n-nodes-base.set",
  "position": [
    2060,
    1060
  ],
  "parameters": {
    "options": {},
    "assignments": {
      "assignments": [
        {
          "id": "eb5f2b3c-bb88-4cae-a960-164016c9a9e4",
          "name": "response",
          "type": "string",
          "value": "=|chapter|section|title|content|\n|-|-|-|-|\n{{\n $json.result.map(row => [\n '',\n row.payload.metadata.chapter,\n row.payload.metadata.section,\n row.payload.metadata.title,\n row.payload.content,\n ''\n ].join('|')).join('\\n')\n}}"
        }
      ]
    }
  },
  "typeVersion": 3.3
}

================ Node #4291 ================
{
  "id": "54a744a3-95c9-4d9a-b1e7-e266a51f77ca",
  "name": "Sticky Note5",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    -520,
    -79.56762868134751
  ],
  "parameters": {
    "width": 383.14868794462586,
    "height": 563.604204119637,
    "content": "## Try Me Out!\n### This workflow builds an AI powered Legal assistant who answers questions about tax codes.\n* Download publically available tax code PDFs from the relevant government website.\n* Strategically exact tax code sections and store these in our Qdrant Vectorstore using Mistral.ai embeddings.\n* Use an AI Agent to answer user's tax questions by attaching tools which query our Qdrant vectorstore.\n\n### Need Help?\nJoin the [Discord](https://discord.com/invite/XPKeKXeB7d) or ask in the [Forum](https://community.n8n.io/)!\n\nHappy Hacking!"
  },
  "typeVersion": 1
}

================ Node #4292 ================
{
  "id": "7f802f12-03e0-4b8e-a880-8c26242c1152",
  "name": "Sticky Note6",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    790.1971986436472,
    720
  ],
  "parameters": {
    "color": 5,
    "width": 489.3944544742706,
    "height": 131.61363932813174,
    "content": "### \ud83d\ude4b\u200d\u2640\ufe0fWhat's the difference?\nWith raw PDF data, we may blur the boundaries between chapters and sections making later results hard to find, incoherent or misleading.\nDepending on your use-case, store your data in a way you intend to retrieve it!"
  },
  "typeVersion": 1
}

================ Node #4293 ================
{
  "id": "bebbf9cf-8103-4694-a3be-ae3ee1e9ebaf",
  "name": "Watch For Bank Statements",
  "type": "n8n-nodes-base.localFileTrigger",
  "position": [
    780,
    400
  ],
  "parameters": {
    "path": "/home/node/host_mount/reconciliation_project",
    "events": [
      "add"
    ],
    "options": {
      "ignored": "!**/*.csv"
    },
    "triggerOn": "folder"
  },
  "typeVersion": 1
}

================ Node #4294 ================
{
  "id": "eca26bed-ba44-4507-97d4-9154e26908a5",
  "name": "Get Tenant Details",
  "type": "@n8n/n8n-nodes-langchain.toolCode",
  "position": [
    1660,
    540
  ],
  "parameters": {
    "name": "get_tenant_details",
    "jsCode": "const xlsx = require('xlsx');\n\nconst { spreadsheet_location } = $('Set Variables').item.json;\nconst sheetName = 'tenants';\n\nconst wb = xlsx.readFile(spreadsheet_location, { sheets: [sheetName] });\nconst rows = xlsx.utils.sheet_to_json(wb.Sheets[sheetName], { raw: false });\n\nconst queryToList = [].concat(typeof query === 'string' ? query.split(',') : query);\n\nconst result = queryToList.map(q => (\n rows.find(row =>\n row['Tenant Name'].toLowerCase() === q.toLowerCase()\n || row['Tenant ID'].toLowerCase() === q.toString().toLowerCase()\n )\n));\n\nreturn result ? JSON.stringify(result) : `No results were found for ${query}`;",
    "description": "Call this tool to get a tenant's details which includes their tenancy terms, rent amount and any notes attached to their account. Pass in one or an array of either the tenant ID or the name of the tenant."
  },
  "typeVersion": 1.1
}

================ Node #4295 ================
{
  "id": "76b68c2f-8d33-4f61-a442-732e784b733a",
  "name": "Structured Output Parser",
  "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
  "position": [
    1920,
    540
  ],
  "parameters": {
    "jsonSchemaExample": "[{\n \"tenant_id\": \"\",\n \"tenant_name\": \"\",\n \"property_id\": \"\",\n \"property_postcode\": \"\",\n \"action_required\": \"\",\n \"details\": \"\",\n \"date\": \"\"\n}]"
  },
  "typeVersion": 1.2
}

================ Node #4296 ================
{
  "id": "be01720f-4617-4a2b-aaed-2474f9f0e25b",
  "name": "Get Bank Statement File",
  "type": "n8n-nodes-base.readWriteFile",
  "position": [
    1100,
    400
  ],
  "parameters": {
    "options": {},
    "fileSelector": "={{ $('Watch For Bank Statements').item.json.path }}"
  },
  "typeVersion": 1
}

================ Node #4297 ================
{
  "id": "2aba5f6a-56b0-411f-9124-33025d90e325",
  "name": "Get CSV Data",
  "type": "n8n-nodes-base.extractFromFile",
  "position": [
    1260,
    400
  ],
  "parameters": {
    "options": {}
  },
  "typeVersion": 1
}

================ Node #4298 ================
{
  "id": "a60d5851-f938-4696-855b-1f0845ffbc6c",
  "name": "Alert Actions To List",
  "type": "n8n-nodes-base.splitOut",
  "position": [
    2260,
    400
  ],
  "parameters": {
    "options": {},
    "fieldToSplitOut": "output"
  },
  "typeVersion": 1
}

================ Node #4299 ================
{
  "id": "f804d9fb-f679-4e95-b70f-722e7c222c40",
  "name": "Sticky Note",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    690.6721905682555,
    177.80249392766257
  ],
  "parameters": {
    "color": 7,
    "width": 748.2548372021405,
    "height": 457.6238063670572,
    "content": "## Step 1. Wait For Incoming Bank Statements\n[Read more about the local file triggers](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.localfiletrigger)\n\nFor this demo, we'll show that n8n is more than capable working with the local filesystem. This gives great benefits in terms of privacy and data security.\n\nFor our datastore, we're using a locally hosted XLSX Excel file which we'll query and update throughout this workflow."
  },
  "typeVersion": 1
}

================ Node #4300 ================
{
  "id": "01e9c335-320c-4fff-9ade-ad1cf808db00",
  "name": "Sticky Note1",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    1460,
    80
  ],
  "parameters": {
    "color": 7,
    "width": 634.3165117416636,
    "height": 675.2455596085985,
    "content": "## Step 2. Delegate to AI Agent to Quickly Identify Issues with Rental Payments\n[Read more about AI Agents](https://docs.n8n.io/integrations/builtin/cluster-nodes/root-nodes/n8n-nodes-langchain.agent/)\n\nAn AI agent can not only check against agreed amounts and compare due dates but also consider contract exceptions and tenant notes before deciding to take action. In a scenario of 10+ of tenants, this can save a lot of admin time.\n\nFor this demo, we're using a remote LLM Model but this can easily be swapped out for other self-hosted LLMS models that support function calling."
  },
  "typeVersion": 1
}

================ Node #4301 ================
{
  "id": "2456b1e5-ceec-45c3-91a7-52e21125e6e5",
  "name": "Sticky Note2",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    2120,
    143.8836673253448
  ],
  "parameters": {
    "color": 7,
    "width": 618.3293247808133,
    "height": 473.7439917476675,
    "content": "## Step 3. Generate a Report to Action any Issues\n[Read more about using the Code Node](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.code)\n\nAfter the AI Agent has helped identify issues to action, we can generate a report and update a locally hosted xlsx file. This again helps keep workflows private to nothing senstive goes over the wire.\n\nThough n8n lacks a builtin node for editing local xlsx file, we can tap into the sheetJS library available to the \"Code\" node."
  },
  "typeVersion": 1
}

================ Node #4302 ================
{
  "id": "7b32e8f9-b543-47e1-a08e-53ee47105966",
  "name": "Sticky Note3",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    260,
    80
  ],
  "parameters": {
    "width": 399.5148533727183,
    "height": 558.2628336538015,
    "content": "## Try It Out!\n### This workflow ingests bank statements to analyses them against a list of tenants using an AI Agent. The agent then flags any issues such as missing payments or incorrect amounts which are exported to a XLSX spreadsheet.\n\n### Note: This workflow is intended to work with a self-hosted version of n8n and has access to the local file system.\n\n* Watches for CSV files (bank statements)\n* Imports into AI agent for analysis.\n* AI agent will query the Excel spreadsheet for tenant and property details.\n* AI agent will generate report on discrepancies or issues and write them to the Excel file.\n\n\n### Need Help?\nJoin the [Discord](https://discord.com/invite/XPKeKXeB7d) or ask in the [Forum](https://community.n8n.io/)!\n\nHappy Hacking!"
  },
  "typeVersion": 1
}

================ Node #4303 ================
{
  "id": "ba35ed0b-7ace-4b76-b915-0dc516a07fb1",
  "name": "Get Property Details",
  "type": "@n8n/n8n-nodes-langchain.toolCode",
  "position": [
    1800,
    540
  ],
  "parameters": {
    "name": "get_property_details",
    "jsCode": "const xlsx = require('xlsx');\n\nconst { spreadsheet_location } = $('Set Variables').item.json;\nconst sheetName = 'properties'\n\nconst wb = xlsx.readFile(spreadsheet_location, { sheets: [sheetName] });\nconst rows = xlsx.utils.sheet_to_json(wb.Sheets[sheetName], { raw: false });\n\nconst queryToList = [].concat(typeof query === 'string' ? query.split(',') :query);\n\nconst result = queryToList.map(q => rows.find(row => row['Property ID'] === q));\n\nreturn result ? JSON.stringify(result) : `No results were found for ${query}`;",
    "description": "Call this tool to get a property details which includes the address, postcode and type of the property. Pass in one or an array of Property IDs."
  },
  "typeVersion": 1.1
}

================ Node #4304 ================
{
  "id": "8c85a2f5-6741-41f4-b377-c74a74b14d0f",
  "name": "Set Variables",
  "type": "n8n-nodes-base.set",
  "position": [
    940,
    400
  ],
  "parameters": {
    "options": {},
    "assignments": {
      "assignments": [
        {
          "id": "bcd3dd04-0082-4da6-b36b-e5ad09c4de30",
          "name": "spreadsheet_location",
          "type": "string",
          "value": "/home/node/host_mount/reconciliation_project/reconcilation-workbook.xlsx"
        }
      ]
    }
  },
  "typeVersion": 3.4
}

================ Node #4305 ================
{
  "id": "bd75bad8-caa3-48f1-8892-3d1221765564",
  "name": "Append To Spreadsheet",
  "type": "n8n-nodes-base.code",
  "position": [
    2480,
    400
  ],
  "parameters": {
    "jsCode": "const xlsx = require('xlsx');\n\nconst { spreadsheet_location } = $('Set Variables').first().json;\nconst sheetName = 'alerts';\n\nconst wb = xlsx.readFile(spreadsheet_location);\nxlsx.writeFile(wb, spreadsheet_location + '.bak.xlsx'); // create backup\n\nconst worksheet = wb.Sheets[sheetName];\n\nconst inputs = $input.all();\n\nfor (input of inputs) {\n xlsx.utils.sheet_add_aoa(worksheet, [\n [\n input.json.date,\n input.json[\"property_id\"],\n input.json[\"property_postcode\"],\n input.json[\"tenant_id\"],\n input.json[\"tenant_name\"],\n input.json[\"action_required\"],\n input.json[\"details\"],\n ]\n ], { origin: -1 });\n}\n\n// update sheet ref\nconst range = xlsx.utils.decode_range(worksheet['!ref']);\nconst rowIndex = range.e.r + 1; // The next row index to append\nworksheet['!ref'] = xlsx.utils.encode_range({\n s: range.s,\n e: { r: rowIndex, c: range.e.c }\n});\n\nxlsx.writeFile(wb, spreadsheet_location, {\n cellDates: true,\n cellStyles: true,\n bookType: 'xlsx',\n});\n\nreturn {\"json\": { \"output\": `${inputs.length} rows added` }}"
  },
  "typeVersion": 2
}

================ Node #4306 ================
{
  "id": "c818ea7e-dc57-4680-b797-abb21cca87fb",
  "name": "OpenAI Chat Model",
  "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
  "position": [
    1540,
    540
  ],
  "parameters": {
    "model": "gpt-4o",
    "options": {}
  },
  "credentials": {
    "openAiApi": {
      "id": "8gccIjcuf3gvaoEr",
      "name": "OpenAi account"
    }
  },
  "typeVersion": 1
}

================ Node #4307 ================
{
  "id": "b2a97514-6020-49a6-bbdb-ee1251eb6aed",
  "name": "Sticky Note4",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    2280,
    640
  ],
  "parameters": {
    "color": 3,
    "width": 461.5505566920007,
    "height": 106.59049079746408,
    "content": "### \ud83d\udea8Warning! Potentially Destructive Operations!\nWith code comes great responsibility! There is a risk you may overwrite/delete data you didn't intend. Always makes backups and test on a copy of your spreadsheets!"
  },
  "typeVersion": 1
}

================ Node #4308 ================
{
  "id": "f869f6eb-cf19-4b14-bf3a-4db5d636646f",
  "name": "Reconcile Rental Payments",
  "type": "@n8n/n8n-nodes-langchain.agent",
  "position": [
    1640,
    360
  ],
  "parameters": {
    "text": "=Bank Statement for {{ $input.first().json.date }} to {{ $input.last().json.date }}:\n|date|reference|money in|money out|\n|-|-|-|-|\n{{ $input.all().map(row => `|${row.json.date}|${row.json.reference}|${row.json.money_in || ''}|${row.json.money_out || ''}|`).join('\\n') }}",
    "options": {
      "systemMessage": "Your task is to help reconcile rent payments with the uploaded bank statement and alert only if there are any actions to be taken in regards to the tenants.\n* Identify and flag any tenants who have have missed their rent according to the month. Late payments which are within a few days of the due date are acceptable and should not be flagged.\n* Identify and flag if any tenants have not paid the correct ammount due, either less or more.\n* Identify and flag any tenants who are finishing their rentals within the time period of the current statement.\n* Identify and flag any remaining fees which are due and have not been paid from any tenant in the last month of their rental.\n\nIf the bank statement show incomplete months due to cut off, it is ok to assume the payment is pending and not actually missing.\n\nThe alert system requires a JSON formatted message. It is important that you format your response as follows:\n[{\n \"tenant_id\": \"\",\n \"tenant_name\": \"\",\n \"property_id\": \"\",\n \"property_postcode\": \"\",\n \"action required\": \"\",\n \"details\": \"\",\n \"date\": \"\"\n}]"
    },
    "promptType": "define",
    "hasOutputParser": true
  },
  "executeOnce": true,
  "typeVersion": 1.6
}

================ Node #4309 ================
{
  "id": "510dc73c-f267-41f3-a981-58f5bfc229a6",
  "name": "Sticky Note5",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    360,
    660
  ],
  "parameters": {
    "color": 5,
    "width": 302.6142384407349,
    "height": 86.00673806595168,
    "content": "### \ud83d\udca1I'm designed to work self-hosted!\nSome nodes in this workflow are only available to the self-hosted version of n8n."
  },
  "typeVersion": 1
}

================ Node #4310 ================
{
  "id": "c92e3d01-4385-4e99-a9a7-77279b3d9cb3",
  "name": "Local File Trigger",
  "type": "n8n-nodes-base.localFileTrigger",
  "position": [
    720,
    120
  ],
  "parameters": {
    "path": "/home/node/host_mount/shared_drive",
    "events": [
      "add"
    ],
    "options": {
      "awaitWriteFinish": true
    },
    "triggerOn": "folder"
  },
  "typeVersion": 1
}

================ Node #4311 ================
{
  "id": "a08f5acc-ee46-49e7-be4d-99edc95ab41f",
  "name": "Get Files and Folders",
  "type": "n8n-nodes-base.executeCommand",
  "position": [
    1200,
    120
  ],
  "parameters": {
    "command": "=ls -p {{ $json.directory }} | grep -v / || true; \\\necho \"===\"; \\\nls -p {{ $json.directory }} | grep / || true;"
  },
  "typeVersion": 1
}

================ Node #4312 ================
{
  "id": "f3ab100a-986d-49bc-aeb5-979f16b2fd46",
  "name": "Files and Folders to Array",
  "type": "n8n-nodes-base.set",
  "position": [
    1380,
    120
  ],
  "parameters": {
    "options": {},
    "assignments": {
      "assignments": [
        {
          "id": "ad893795-cae8-4418-99e0-2c68126337d3",
          "name": "files",
          "type": "array",
          "value": "={{ $json.stdout.split('===')[0].split('\\n').filter(item => !item.endsWith('Zone.Identifier')).compact() }}"
        },
        {
          "id": "0e7e8571-6b86-481d-a20c-3a7c621c562f",
          "name": "folders",
          "type": "array",
          "value": "={{ $json.stdout.split('===')[1].split('\\n').compact() }}"
        }
      ]
    }
  },
  "typeVersion": 3.3
}

================ Node #4313 ================
{
  "id": "56c4a8b4-c5b0-4e2f-806b-fef5fb5260b5",
  "name": "Mistral Cloud Chat Model",
  "type": "@n8n/n8n-nodes-langchain.lmChatMistralCloud",
  "position": [
    1860,
    240
  ],
  "parameters": {
    "model": "mistral-small-2402",
    "options": {}
  },
  "credentials": {
    "mistralCloudApi": {
      "id": "EIl2QxhXAS9Hkg37",
      "name": "Mistral Cloud account"
    }
  },
  "typeVersion": 1
}

================ Node #4314 ================
{
  "id": "0d586481-904d-4fbd-9b53-77bc2faf08dd",
  "name": "Structured Output Parser",
  "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
  "position": [
    2040,
    240
  ],
  "parameters": {
    "schemaType": "manual",
    "inputSchema": "{\n\t\"type\": \"array\",\n\t\"items\": {\n \t\"type\": \"object\",\n \"properties\": {\n \"folder\": { \"type\": \"string\" },\n \"files\": {\n \"type\": \"array\",\n \"items\": { \"type\": \"string\" }\n }\n\t\t}\n }\n}"
  },
  "typeVersion": 1.2
}

================ Node #4315 ================
{
  "id": "86025668-aac9-49a2-92ff-ce15df16488c",
  "name": "Set Variables",
  "type": "n8n-nodes-base.set",
  "position": [
    940,
    120
  ],
  "parameters": {
    "options": {},
    "assignments": {
      "assignments": [
        {
          "id": "35ea70c4-8669-4975-a68d-bbaa094713c0",
          "name": "directory",
          "type": "string",
          "value": "={{ $('Local File Trigger').params.path }}"
        }
      ]
    }
  },
  "typeVersion": 3.3
}

================ Node #4316 ================
{
  "id": "457bfd30-5cca-417a-88d3-666afe567fd5",
  "name": "Move Files into Folders",
  "type": "n8n-nodes-base.executeCommand",
  "position": [
    2560,
    140
  ],
  "parameters": {
    "command": "=directory=\"{{ $('Set Variables').item.json.directory }}\"\nsubdirectory=\"$directory/{{ $json.folder }}\";\nfile_list=\"{{ $json.files.join(' ') }}\";\n\n# create subdirectory if not exists\nmkdir -p $subdirectory;\n\n# for each suggestion, move the file into the subdirectory.\n# If the file in the subdirectory exists, then we'll rename the current file by adding a small random string to the end of the filename.\nfor filename in $file_list; do\n if [ -e \"$subdirectory/$filename\" ]; then\n mv \"$directory/$filename-$RANDOM\" -t $subdirectory;\n else\n mv \"$directory/$filename\" -t $subdirectory;\n fi\ndone",
    "executeOnce": false
  },
  "typeVersion": 1
}

================ Node #4317 ================
{
  "id": "e9a610bf-b2ae-4b98-870a-2e63790a3b5f",
  "name": "Sticky Note",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    635.4233386400999,
    -161.84747801133517
  ],
  "parameters": {
    "color": 7,
    "width": 483.7926535356806,
    "height": 501.2939838391483,
    "content": "## Step 1. Select the target folder\n[Read more about local file trigger](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.localfiletrigger)\n\nIn this workflow, we'll monitor a specific folder on disk that n8n has access to. Since we're using docker, we can either use the n8n volume or mount a folder from the host machine.\n\nThe local file trigger is useful to execute the workflow whenever changes are made to our target folder."
  },
  "typeVersion": 1
}

================ Node #4318 ================
{
  "id": "c8961322-a6da-4fc0-a46d-6119c5eac2b0",
  "name": "Sticky Note1",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    1140,
    -54.28207683557787
  ],
  "parameters": {
    "color": 7,
    "width": 583.2857596176409,
    "height": 391.527066537946,
    "content": "## Step 2. Identify files that need to be organised\n[Read more about Execute Command node](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.executecommand)\n\nFor all Files in the root level of our selected target folder, we want them to be sorted and moved into categorised subdirectories. In this step, we'll use linux commands to get a list of files and folders currently present in the target folder."
  },
  "typeVersion": 1
}

================ Node #4319 ================
{
  "id": "6e31b2d1-288c-479b-8dd8-a171ecd03dea",
  "name": "If Has Target Files...",
  "type": "n8n-nodes-base.if",
  "position": [
    1560,
    120
  ],
  "parameters": {
    "options": {},
    "conditions": {
      "options": {
        "leftValue": "",
        "caseSensitive": true,
        "typeValidation": "strict"
      },
      "combinator": "and",
      "conditions": [
        {
          "id": "9be5a175-e7aa-4d68-9ddc-8b43b43e2d37",
          "operator": {
            "type": "array",
            "operation": "lengthGte",
            "rightType": "number"
          },
          "leftValue": "={{ $json.files }}",
          "rightValue": "={{ 1 }}"
        }
      ]
    }
  },
  "typeVersion": 2
}

================ Node #4320 ================
{
  "id": "07fd70ca-9126-4846-a2b0-4f3a8fc5eb69",
  "name": "Sticky Note2",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    1760,
    -107.13740439436373
  ],
  "parameters": {
    "color": 7,
    "width": 631.2649908751414,
    "height": 506.8242545618477,
    "content": "## Step 3. Using Mistral AI to organise our target folder\n[Read more about Mistral AI](https://docs.n8n.io/integrations/builtin/cluster-nodes/sub-nodes/n8n-nodes-langchain.lmchatmistralcloud)\n\nUsing Mistral AI as our AI file manager, it can help us suggest which files go into which categorised subdirectory. If the subdirectory doesn't exist, Mistral can also suggest one to be created."
  },
  "typeVersion": 1
}

================ Node #4321 ================
{
  "id": "2ca9a56c-ed1b-4f16-b207-7229c8d90b76",
  "name": "Get Suggestions to List",
  "type": "n8n-nodes-base.splitOut",
  "position": [
    2200,
    80
  ],
  "parameters": {
    "options": {},
    "fieldToSplitOut": "output"
  },
  "typeVersion": 1
}

================ Node #4322 ================
{
  "id": "29d425df-e513-429a-802f-02ad3ad86344",
  "name": "Sticky Note3",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    2420,
    -62.701160902940615
  ],
  "parameters": {
    "color": 7,
    "width": 401.0065589583014,
    "height": 374.8503908496576,
    "content": "## Step 4. Move the files into subdirectories\n[Read more about Execute Command node](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.executecommand)\n\nFor this step, we'll use the execute command node to execute a shellscript to move the files into their respective subdirectories."
  },
  "typeVersion": 1
}

================ Node #4323 ================
{
  "id": "a2ee79ea-6b0d-46c0-876f-8cfe12130a62",
  "name": "Sticky Note4",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    240,
    -160
  ],
  "parameters": {
    "width": 372.51107341403605,
    "height": 422.70324544339167,
    "content": "## Try It Out!\n### This workflow does the following:\n* Monitors a target folder for changes using the local file trigger\n* identifies all files and subdirectories in the target folder and passes this to Mistral AI\n* Mistral AI suggests where to move top level files into which subdirectories. It can also suggest subdirectories tp create if none are suitable.\n* Finally, we take the AI's suggestions are perform the move operations using the execute command node.\n\n### Need Help?\nJoin the [Discord](https://discord.com/invite/XPKeKXeB7d) or ask in the [Forum](https://community.n8n.io/)!\n\nHappy Hacking!"
  },
  "typeVersion": 1
}

================ Node #4324 ================
{
  "id": "a0db31b1-10e2-40bb-9ec6-b91569bf1072",
  "name": "Sticky Note5",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    174.82571715185748,
    280
  ],
  "parameters": {
    "color": 3,
    "width": 438.23697639546396,
    "height": 97.88076166036412,
    "content": "### \ud83d\udea8 Warning! Potential destructive operations ahead!\nThis workflow manipulates the filesystem. Always make backups of your files before running local workflows."
  },
  "typeVersion": 1
}

================ Node #4325 ================
{
  "id": "c932813c-913c-47bd-a4ba-79056bc6dfd7",
  "name": "AI File Manager",
  "type": "@n8n/n8n-nodes-langchain.chainLlm",
  "position": [
    1860,
    80
  ],
  "parameters": {
    "text": "=Here is the list of current files in the directory:\n{{ $json.files.map(file => `* ${file}`).join('\\n') }}\n\nHere is the list of current folders in the directory:\n{{ $json.folders.length ? $json.folders.map(item => `* ${item}`).join('\\n') : 'There are currently no directories' }}\n\nGroup the current files using the filename as a hint and decide which of the current folders should they be moved to. If there are no current folders, then suggest a folder to be created.\n\nIf you can't decide which folder to put the file in, the file should be moved to the misc folder.",
    "messages": {
      "messageValues": [
        {
          "message": "You manage a linux directory on behalf of the user."
        }
      ]
    },
    "promptType": "define",
    "hasOutputParser": true
  },
  "typeVersion": 1.4
}

================ Node #4326 ================
{
  "id": "6359f725-1ede-4b05-bc19-05a7e85c0865",
  "name": "When clicking \"Test workflow\"",
  "type": "n8n-nodes-base.manualTrigger",
  "position": [
    680,
    292
  ],
  "parameters": {},
  "typeVersion": 1
}

================ Node #4327 ================
{
  "id": "9e1e61c7-f5fd-4e8a-99a6-ccc5a24f5528",
  "name": "Fetch Source Image",
  "type": "n8n-nodes-base.httpRequest",
  "position": [
    1000,
    292
  ],
  "parameters": {
    "url": "={{ $json.source_image }}",
    "options": {}
  },
  "typeVersion": 4.2
}

================ Node #4328 ================
{
  "id": "9b1b94cf-3a7d-4c43-ab6c-8df9824b5667",
  "name": "Split Out Results Only",
  "type": "n8n-nodes-base.splitOut",
  "position": [
    1428,
    323
  ],
  "parameters": {
    "options": {},
    "fieldToSplitOut": "result"
  },
  "typeVersion": 1
}

================ Node #4329 ================
{
  "id": "fcbaf6c3-2aee-4ea1-9c5e-2833dd7a9f50",
  "name": "Filter Score >= 0.9",
  "type": "n8n-nodes-base.filter",
  "position": [
    1608,
    323
  ],
  "parameters": {
    "options": {},
    "conditions": {
      "options": {
        "leftValue": "",
        "caseSensitive": true,
        "typeValidation": "strict"
      },
      "combinator": "and",
      "conditions": [
        {
          "id": "367d83ef-8ecf-41fe-858c-9bfd78b0ae9f",
          "operator": {
            "type": "number",
            "operation": "gte"
          },
          "leftValue": "={{ $json.score }}",
          "rightValue": 0.9
        }
      ]
    }
  },
  "typeVersion": 2
}

================ Node #4330 ================
{
  "id": "954ce7b0-ef82-4203-8706-17cfa5e5e3ff",
  "name": "Crop Object From Image",
  "type": "n8n-nodes-base.editImage",
  "position": [
    2080,
    432
  ],
  "parameters": {
    "width": "={{ $json.box.xmax - $json.box.xmin }}",
    "height": "={{ $json.box.ymax - $json.box.ymin }}",
    "options": {
      "format": "jpeg",
      "fileName": "={{ $binary.data.fileName.split('.')[0].urlEncode()+'-'+$json.label.urlEncode() + '-' + $itemIndex }}.jpg"
    },
    "operation": "crop",
    "positionX": "={{ $json.box.xmin }}",
    "positionY": "={{ $json.box.ymin }}"
  },
  "typeVersion": 1
}

================ Node #4331 ================
{
  "id": "40027456-4bf9-4eea-8d71-aa28e69b29e5",
  "name": "Set Variables",
  "type": "n8n-nodes-base.set",
  "position": [
    840,
    292
  ],
  "parameters": {
    "options": {},
    "assignments": {
      "assignments": [
        {
          "id": "9e95d951-8530-4a80-bd00-6bb55623a71f",
          "name": "CLOUDFLARE_ACCOUNT_ID",
          "type": "string",
          "value": ""
        },
        {
          "id": "66807a90-63a1-4d4e-886e-e8abf3019a34",
          "name": "model",
          "type": "string",
          "value": "@cf/facebook/detr-resnet-50"
        },
        {
          "id": "a13ccde6-e6e3-46f4-afa3-2134af7bc765",
          "name": "source_image",
          "type": "string",
          "value": "https://images.pexels.com/photos/2293367/pexels-photo-2293367.jpeg?auto=compress&cs=tinysrgb&w=600"
        },
        {
          "id": "0734fc55-b414-47f7-8b3e-5c880243f3ed",
          "name": "elasticsearch_index",
          "type": "string",
          "value": "n8n-image-search"
        }
      ]
    }
  },
  "typeVersion": 3.3
}

================ Node #4332 ================
{
  "id": "c3d8c5e3-546e-472c-9e6e-091cf5cee3c3",
  "name": "Use Detr-Resnet-50 Object Classification",
  "type": "n8n-nodes-base.httpRequest",
  "position": [
    1248,
    324
  ],
  "parameters": {
    "url": "=https://api.cloudflare.com/client/v4/accounts/{{ $('Set Variables').item.json.CLOUDFLARE_ACCOUNT_ID }}/ai/run/{{ $('Set Variables').item.json.model }}",
    "method": "POST",
    "options": {},
    "sendBody": true,
    "contentType": "binaryData",
    "authentication": "predefinedCredentialType",
    "inputDataFieldName": "data",
    "nodeCredentialType": "cloudflareApi"
  },
  "credentials": {
    "cloudflareApi": {
      "id": "qOynkQdBH48ofOSS",
      "name": "Cloudflare account"
    }
  },
  "typeVersion": 4.2
}

================ Node #4333 ================
{
  "id": "3c7aa2fc-9ca1-41ba-a10d-aa5930d45f18",
  "name": "Upload to Cloudinary",
  "type": "n8n-nodes-base.httpRequest",
  "position": [
    2380,
    380
  ],
  "parameters": {
    "url": "https://api.cloudinary.com/v1_1/daglih2g8/image/upload",
    "method": "POST",
    "options": {},
    "sendBody": true,
    "sendQuery": true,
    "contentType": "multipart-form-data",
    "authentication": "genericCredentialType",
    "bodyParameters": {
      "parameters": [
        {
          "name": "file",
          "parameterType": "formBinaryData",
          "inputDataFieldName": "data"
        }
      ]
    },
    "genericAuthType": "httpQueryAuth",
    "queryParameters": {
      "parameters": [
        {
          "name": "upload_preset",
          "value": "n8n-workflows-preset"
        }
      ]
    }
  },
  "credentials": {
    "httpQueryAuth": {
      "id": "sT9jeKzZiLJ3bVPz",
      "name": "Cloudinary API"
    }
  },
  "typeVersion": 4.2
}

================ Node #4334 ================
{
  "id": "3c4e1f04-a0ba-4cce-b82a-aa3eadc4e7e1",
  "name": "Create Docs In Elasticsearch",
  "type": "n8n-nodes-base.elasticsearch",
  "position": [
    2580,
    380
  ],
  "parameters": {
    "indexId": "={{ $('Set Variables').item.json.elasticsearch_index }}",
    "options": {},
    "fieldsUi": {
      "fieldValues": [
        {
          "fieldId": "image_url",
          "fieldValue": "={{ $json.secure_url.replace('upload','upload/f_auto,q_auto') }}"
        },
        {
          "fieldId": "source_image_url",
          "fieldValue": "={{ $('Set Variables').item.json.source_image }}"
        },
        {
          "fieldId": "label",
          "fieldValue": "={{ $('Crop Object From Image').item.json.label }}"
        },
        {
          "fieldId": "metadata",
          "fieldValue": "={{ JSON.stringify(Object.assign($('Crop Object From Image').item.json, { filename: $json.original_filename })) }}"
        }
      ]
    },
    "operation": "create",
    "additionalFields": {}
  },
  "credentials": {
    "elasticsearchApi": {
      "id": "dRuuhAgS7AF0mw0S",
      "name": "Elasticsearch account"
    }
  },
  "typeVersion": 1
}

================ Node #4335 ================
{
  "id": "292c9821-c123-44fa-9ba1-c37bf84079bc",
  "name": "Sticky Note",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    620,
    120
  ],
  "parameters": {
    "color": 7,
    "width": 541.1455500767354,
    "height": 381.6388867600897,
    "content": "## 1. Get Source Image\n[Read more about setting variables for your workflow](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.set)\n\nFor this demo, we'll manually define an image to process. In production however, this image can come from a variety of sources such as drives, webhooks and more."
  },
  "typeVersion": 1
}

================ Node #4336 ================
{
  "id": "863271dc-fb9d-4211-972d-6b57336073b4",
  "name": "Sticky Note1",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    1180,
    80
  ],
  "parameters": {
    "color": 7,
    "width": 579.7748008857744,
    "height": 437.4680103498263,
    "content": "## 2. Use Detr-Resnet-50 Object Classification\n[Learn more about Cloudflare Workers AI](https://developers.cloudflare.com/workers-ai/)\n\nNot all AI workflows need an LLM! As in this example, we're using a non-LLM vision model to parse the source image and return what objects are contained within. The image search feature we're building will be based on the objects in the image making for a much more granular search via object association.\n\nWe'll use the Cloudflare Workers AI service which conveniently provides this model via API use."
  },
  "typeVersion": 1
}

================ Node #4337 ================
{
  "id": "b73b45da-0436-4099-b538-c6b3b84822f2",
  "name": "Sticky Note2",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    1800,
    260
  ],
  "parameters": {
    "color": 7,
    "width": 466.35460775498495,
    "height": 371.9272151757119,
    "content": "## 3. Crop Objects Out of Source Image\n[Read more about Editing Images in n8n](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.editimage)\n\nWith our objects identified by their bounding boxes, we can \"cut\" them out of the source image as separate images."
  },
  "typeVersion": 1
}

================ Node #4338 ================
{
  "id": "465bd842-8a35-49d8-a9ff-c30d164620db",
  "name": "Sticky Note3",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    2300,
    180
  ],
  "parameters": {
    "color": 7,
    "width": 478.20345439832454,
    "height": 386.06196032653685,
    "content": "## 4. Index Object Images In ElasticSearch\n[Read more about using ElasticSearch](https://docs.n8n.io/integrations/builtin/app-nodes/n8n-nodes-base.elasticsearch)\n\nBy storing the newly created object images externally and indexing them in Elasticsearch, we now have a foundation for our Image Search service which queries by object association."
  },
  "typeVersion": 1
}

================ Node #4339 ================
{
  "id": "6a04b4b5-7830-410d-9b5b-79acb0b1c78b",
  "name": "Sticky Note4",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    1800,
    -220
  ],
  "parameters": {
    "color": 7,
    "width": 328.419768654291,
    "height": 462.65463700396174,
    "content": "Fig 1. Result of Classification\n![image of classification](https://res.cloudinary.com/daglih2g8/image/upload/f_auto,q_auto,w_300/v1/n8n-workflows/ywtzjcmqrypihci1npgh)"
  },
  "typeVersion": 1
}

================ Node #4340 ================
{
  "id": "8f607951-ba41-4362-8323-e8b4b96ad122",
  "name": "Fetch Source Image Again",
  "type": "n8n-nodes-base.httpRequest",
  "position": [
    1880,
    432
  ],
  "parameters": {
    "url": "={{ $('Set Variables').item.json.source_image }}",
    "options": {}
  },
  "typeVersion": 4.2
}

================ Node #4341 ================
{
  "id": "6933f67d-276b-4908-8602-654aa352a68b",
  "name": "Sticky Note8",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    220,
    120
  ],
  "parameters": {
    "width": 359.6648027457353,
    "height": 352.41026669883723,
    "content": "## Try It Out!\n### This workflow does the following:\n* Downloads an image\n* Uses an object classification AI model to identify objects in the image.\n* Crops the objects out from the original image into new image files.\n* Indexes the image's object in an Elasticsearch Database to enable image search.\n\n### Need Help?\nJoin the [Discord](https://discord.com/invite/XPKeKXeB7d) or ask in the [Forum](https://community.n8n.io/)!\n\nHappy Hacking!"
  },
  "typeVersion": 1
}

================ Node #4342 ================
{
  "id": "35615ed5-43e8-43f0-95fe-1f95a1177d69",
  "name": "Sticky Note5",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    800,
    280
  ],
  "parameters": {
    "width": 172.9365918827757,
    "height": 291.6881468483679,
    "content": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ud83d\udea8**Required**\n* Set your variables here first!"
  },
  "typeVersion": 1
}

================ Node #4343 ================
{
  "id": "192d3e4f-6bb0-4b87-a1fa-e32c9efb49cc",
  "name": "When clicking \"Test workflow\"",
  "type": "n8n-nodes-base.manualTrigger",
  "position": [
    336,
    34
  ],
  "parameters": {},
  "typeVersion": 1
}

================ Node #4344 ================
{
  "id": "32a7a772-76a6-4614-a6ab-d2b152a5811f",
  "name": "OpenAI Chat Model1",
  "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
  "position": [
    1220,
    180
  ],
  "parameters": {
    "model": "gpt-4o",
    "options": {
      "temperature": 0
    }
  },
  "credentials": {
    "openAiApi": {
      "id": "8gccIjcuf3gvaoEr",
      "name": "OpenAi account"
    }
  },
  "typeVersion": 1
}

================ Node #4345 ================
{
  "id": "8c444314-ed7d-4ca0-b0fa-b6d1e964c698",
  "name": "Get Applicable Rows",
  "type": "n8n-nodes-base.airtable",
  "position": [
    516,
    34
  ],
  "parameters": {
    "base": {
      "__rl": true,
      "mode": "list",
      "value": "appbgxPBurOmQK3E7",
      "cachedResultUrl": "https://airtable.com/appbgxPBurOmQK3E7",
      "cachedResultName": "Building Inventory Survey Example"
    },
    "table": {
      "__rl": true,
      "mode": "id",
      "value": "tblEHkoTvKpa4Aa0Q"
    },
    "options": {},
    "operation": "search",
    "returnAll": false,
    "filterByFormula": "AND(Image!=\"\", AI_status=FALSE())"
  },
  "credentials": {
    "airtableTokenApi": {
      "id": "Und0frCQ6SNVX3VV",
      "name": "Airtable Personal Access Token account"
    }
  },
  "typeVersion": 2
}

================ Node #4346 ================
{
  "id": "f90578fa-b886-4653-8ff7-0c91884dc517",
  "name": "Execute Workflow Trigger",
  "type": "n8n-nodes-base.executeWorkflowTrigger",
  "position": [
    1257,
    733
  ],
  "parameters": {},
  "typeVersion": 1
}

================ Node #4347 ================
{
  "id": "8f5959eb-45bd-4185-a959-10268827e41d",
  "name": "Edit Fields",
  "type": "n8n-nodes-base.set",
  "position": [
    1417,
    733
  ],
  "parameters": {
    "options": {},
    "assignments": {
      "assignments": [
        {
          "id": "7263764b-8409-4cea-8db3-3278dd7ef9d8",
          "name": "=route",
          "type": "string",
          "value": "={{ $json.route }}"
        },
        {
          "id": "55c3b207-2e98-4137-8413-f72cbff17986",
          "name": "query",
          "type": "string",
          "value": "={{ $json.query }}"
        },
        {
          "id": "6eb873de-3c3a-4135-9dc0-1d441c63647c",
          "name": "",
          "type": "string",
          "value": ""
        }
      ]
    }
  },
  "typeVersion": 3.3
}

================ Node #4348 ================
{
  "id": "2c7f7274-12e9-4dd3-8ee4-679b408d5430",
  "name": "Fallback Response",
  "type": "n8n-nodes-base.set",
  "position": [
    1580,
    875
  ],
  "parameters": {
    "mode": "raw",
    "options": {},
    "jsonOutput": "{\n \"response\": {\n \"ok\": false,\n \"error\": \"The requested tool was not found or the service may be unavailable. Do not retry.\"\n }\n}\n"
  },
  "typeVersion": 3.3
}

================ Node #4349 ================
{
  "id": "09f36f4d-eb88-4d93-a8b3-e9ba66b46b54",
  "name": "SERP Google Reverse Image API",
  "type": "n8n-nodes-base.httpRequest",
  "position": [
    1860,
    549
  ],
  "parameters": {
    "url": "https://serpapi.com/search.json",
    "options": {},
    "sendQuery": true,
    "authentication": "predefinedCredentialType",
    "queryParameters": {
      "parameters": [
        {
          "name": "engine",
          "value": "google_reverse_image"
        },
        {
          "name": "image_url",
          "value": "={{ $json.query }}"
        }
      ]
    },
    "nodeCredentialType": "serpApi"
  },
  "credentials": {
    "serpApi": {
      "id": "aJCKjxx6U3K7ydDe",
      "name": "SerpAPI account"
    }
  },
  "typeVersion": 4.2
}

================ Node #4350 ================
{
  "id": "8e3a0f38-8663-4f5c-837f-4b9aa21f14fb",
  "name": "Reverse Image Search Response",
  "type": "n8n-nodes-base.set",
  "position": [
    2037,
    547
  ],
  "parameters": {
    "options": {},
    "assignments": {
      "assignments": [
        {
          "id": "de99a504-713f-4c78-8679-08139b2def31",
          "name": "response",
          "type": "string",
          "value": "={{ JSON.stringify($json.image_results.map(x => ({ position: x.position, title: x.title, link: x.link, description: x.snippet }))) }}"
        }
      ]
    }
  },
  "typeVersion": 3.3
}

================ Node #4351 ================
{
  "id": "0cd2269a-5b1f-4f10-b180-7f9cff9b1102",
  "name": "Reverse Image Search Tool",
  "type": "@n8n/n8n-nodes-langchain.toolWorkflow",
  "position": [
    1300,
    340
  ],
  "parameters": {
    "name": "reverse_image_search",
    "fields": {
      "values": [
        {
          "name": "route",
          "stringValue": "serp.google_reverse_image"
        }
      ]
    },
    "workflowId": "={{ $workflow.id }}",
    "description": "Call this tool to perform a reverse image search. Reverse image searches return urls where similar looking products exists. Fetch the returned urls to gather more information. This tool requires the following object request body.\n```\n{\n \"type\": \"object\",\n \"properties\": {\n \"image_url\": { \"type\": \"string\" },\n }\n}\n```\nimage_url should be an absolute URL to the image."
  },
  "typeVersion": 1.1
}

================ Node #4352 ================
{
  "id": "9825651e-b382-4e0a-97ef-37764cb5be9e",
  "name": "Firecrawl Scrape API",
  "type": "n8n-nodes-base.httpRequest",
  "position": [
    1860,
    889
  ],
  "parameters": {
    "url": "https://api.firecrawl.dev/v0/scrape",
    "method": "POST",
    "options": {},
    "sendBody": true,
    "sendHeaders": true,
    "authentication": "genericCredentialType",
    "bodyParameters": {
      "parameters": [
        {
          "name": "url",
          "value": "={{ $json.query }}"
        }
      ]
    },
    "genericAuthType": "httpHeaderAuth",
    "headerParameters": {
      "parameters": [
        {
          "name": "Content-Type",
          "value": "application/json"
        }
      ]
    }
  },
  "credentials": {
    "httpHeaderAuth": {
      "id": "OUOnyTkL9vHZNorB",
      "name": "Firecrawl API"
    }
  },
  "typeVersion": 4.2
}

================ Node #4353 ================
{
  "id": "7f61d60b-b052-4b7c-abfd-9eb8e05a45a2",
  "name": "Scrape Success?",
  "type": "n8n-nodes-base.if",
  "position": [
    2020,
    889
  ],
  "parameters": {
    "options": {},
    "conditions": {
      "options": {
        "leftValue": "",
        "caseSensitive": true,
        "typeValidation": "strict"
      },
      "combinator": "and",
      "conditions": [
        {
          "id": "a15a164f-d0c5-478f-8b27-f3d51746c214",
          "operator": {
            "type": "boolean",
            "operation": "true",
            "singleValue": true
          },
          "leftValue": "={{ $json.success }}",
          "rightValue": ""
        }
      ]
    }
  },
  "typeVersion": 2
}

================ Node #4354 ================
{
  "id": "29c65ef4-6350-490a-b8e3-a5c869e656b2",
  "name": "Firecrawl Scrape Success Response",
  "type": "n8n-nodes-base.set",
  "position": [
    2180,
    889
  ],
  "parameters": {
    "options": {},
    "assignments": {
      "assignments": [
        {
          "id": "7db5c81f-de90-40e1-8086-3f13d40451c7",
          "name": "response",
          "type": "string",
          "value": "={{ $json.data.markdown.substring(0, 3000) }}"
        }
      ]
    }
  },
  "typeVersion": 3.3
}

================ Node #4355 ================
{
  "id": "229b4008-d8a8-4609-854a-fc244a4ed630",
  "name": "Firecrawl scrape Error Response",
  "type": "n8n-nodes-base.set",
  "position": [
    2180,
    1049
  ],
  "parameters": {
    "options": {},
    "assignments": {
      "assignments": [
        {
          "id": "e691d86a-d366-44a2-baa6-3dba42527f6e",
          "name": "response",
          "type": "string",
          "value": "{ error: \"Unable to scrape website due to unknown error. Do not retry.\" }"
        }
      ]
    }
  },
  "typeVersion": 3.3
}

================ Node #4356 ================
{
  "id": "f080069b-e849-45e0-88cf-03707d22c704",
  "name": "Firecrawl Web Scaper Tool",
  "type": "@n8n/n8n-nodes-langchain.toolWorkflow",
  "position": [
    1440,
    340
  ],
  "parameters": {
    "name": "webpage_url_scraper_tool",
    "fields": {
      "values": [
        {
          "name": "route",
          "stringValue": "firecrawl.scrape"
        }
      ]
    },
    "workflowId": "={{ $workflow.id }}",
    "description": "Call this tool to retrieve page contents of a url.\n```\n{\n \"type\": \"object\",\n \"properties\": {\n \"url\": { \"type\": \"string\" },\n }\n}\n```\nurl should be an absolute URL."
  },
  "typeVersion": 1.1
}

================ Node #4357 ================
{
  "id": "4eff88bb-bd5e-4d6a-b5e1-8521632c461f",
  "name": "Structured Output Parser",
  "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
  "position": [
    1500,
    180
  ],
  "parameters": {
    "jsonSchema": "{\n \"type\": \"object\",\n \"properties\": {\n \"title\": { \"type\": \"string\" },\n \"description\": { \"type\": \"string\" },\n \"model\": { \"type\": \"string\" },\n \"material\": { \"type\": \"string\" },\n \"color\": { \"type\": \"string\" },\n \"condition\": { \"type\": \"string\" }\n }\n}"
  },
  "typeVersion": 1.1
}

================ Node #4358 ================
{
  "id": "328d106b-a473-4f54-82fd-55c30d813da9",
  "name": "Sticky Note",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    280,
    -260
  ],
  "parameters": {
    "color": 7,
    "width": 402.5984702109446,
    "height": 495.4071184783251,
    "content": "## 1. Use Airtable to Capture Survey Photos\n[Read more about AirTable](https://docs.n8n.io/integrations/builtin/app-nodes/n8n-nodes-base.airtable)\n\nTo enable this workflow, we need a database where we can retreive the title and photo to analyse and write the generate values back to. Airtable is perfect for this since it has a robust API we can work with.\n\nFor this demo, we'll manually trigger but this can be changed for forms or other triggers."
  },
  "typeVersion": 1
}

================ Node #4359 ================
{
  "id": "e358775d-ff83-411d-9364-b43c87d98134",
  "name": "Sticky Note1",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    716.3106363781314,
    -160
  ],
  "parameters": {
    "color": 7,
    "width": 359.40869874940336,
    "height": 428.4787925736586,
    "content": "## 2. Use AI Vision Model to Analyse the Photo.\n[Read more about OpenAI Vision](https://docs.n8n.io/integrations/builtin/app-nodes/n8n-nodes-langchain.openai)\n\nWe'll use OpenAi vision model to create a detailed description of the product in the photo. We split this step from the agent because it uses an image model rather than the usual text-based one."
  },
  "typeVersion": 1
}

================ Node #4360 ================
{
  "id": "51b4a70c-9583-4e8a-8e8d-896a80ad53c3",
  "name": "Sticky Note2",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    1111.3914848823072,
    -293.9250474768817
  ],
  "parameters": {
    "color": 7,
    "width": 593.0683948010671,
    "height": 803.956942672397,
    "content": "## 3. Build an AI Agent who Searches the Internet\n[Read more about OpenAI Agents](https://docs.n8n.io/integrations/builtin/app-nodes/n8n-nodes-langchain.openai)\n\nThis AI Agent has the ability to perform reverse image searches using our captured photos as well visit external webpages in order to obtain accurate product names and attributes. The Agent along with the tools might mimic what the average human user would carry out the same task.\n\n* For reverse image search, we're using SERP API service however we won't use the built-in SERP node as we need to specify custom parameters. \n* For scraping, we'll use [Firecrawl](https://www.firecrawl.dev/) as this service also helps to parse and return the page as markdown which is more efficient."
  },
  "typeVersion": 1
}

================ Node #4361 ================
{
  "id": "adfb519b-a5c7-432c-be32-5acfcc388b49",
  "name": "Sticky Note3",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    1740,
    -149.28190375244515
  ],
  "parameters": {
    "color": 7,
    "width": 373.3601237414979,
    "height": 397.7168664109706,
    "content": "## 4. Overwrite our Rows with Enriched Results\n\nAnd Viola! Our AI agent has potentially saved hours of manual data entry work for our surveyor. This technique can be used for many other usecases."
  },
  "typeVersion": 1
}

================ Node #4362 ================
{
  "id": "6444e217-b944-450e-892a-5822d4d390ce",
  "name": "Sticky Note4",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    1200,
    549
  ],
  "parameters": {
    "color": 7,
    "width": 554.6092633638649,
    "height": 490.7010880746526,
    "content": "## 5. Using the Custom Workflow Tool\n[Read more about Workflow Tools](https://docs.n8n.io/integrations/builtin/cluster-nodes/sub-nodes/n8n-nodes-langchain.toolworkflow)\n\nAI Agents rely on Tools to make decisions and become exponentially more powerful the more tools they have. A common pattern to manage multiple tools is to create a routing system for tools using the API pattern."
  },
  "typeVersion": 1
}

================ Node #4363 ================
{
  "id": "bf2459cf-a931-4232-9504-b36b15721194",
  "name": "Enrich Product Rows",
  "type": "n8n-nodes-base.airtable",
  "position": [
    1880,
    60
  ],
  "parameters": {
    "base": {
      "__rl": true,
      "mode": "list",
      "value": "appbgxPBurOmQK3E7",
      "cachedResultUrl": "https://airtable.com/appbgxPBurOmQK3E7",
      "cachedResultName": "Building Inventory Survey Example"
    },
    "table": {
      "__rl": true,
      "mode": "id",
      "value": "tblEHkoTvKpa4Aa0Q"
    },
    "columns": {
      "value": {
        "id": "={{ $('Get Applicable Rows').item.json.id }}",
        "Color": "={{ $json.output.output.color }}",
        "Model": "={{ $json.output.output.model }}",
        "Title": "={{ $json.output.output.title }}",
        "Material": "={{ $json.output.output.material }}",
        "AI_status": true,
        "Condition": "={{ $json.output.output.condition }}",
        "Description": "={{ $json.output.output.description }}"
      },
      "schema": [
        {
          "id": "id",
          "type": "string",
          "display": true,
          "removed": false,
          "readOnly": true,
          "required": false,
          "displayName": "id",
          "defaultMatch": true
        },
        {
          "id": "Title",
          "type": "string",
          "display": true,
          "removed": false,
          "readOnly": false,
          "required": false,
          "displayName": "Title",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "Image",
          "type": "array",
          "display": true,
          "removed": false,
          "readOnly": false,
          "required": false,
          "displayName": "Image",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "Description",
          "type": "string",
          "display": true,
          "removed": false,
          "readOnly": false,
          "required": false,
          "displayName": "Description",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "Model",
          "type": "string",
          "display": true,
          "removed": false,
          "readOnly": false,
          "required": false,
          "displayName": "Model",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "Material",
          "type": "string",
          "display": true,
          "removed": false,
          "readOnly": false,
          "required": false,
          "displayName": "Material",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "Color",
          "type": "string",
          "display": true,
          "removed": false,
          "readOnly": false,
          "required": false,
          "displayName": "Color",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "Condition",
          "type": "string",
          "display": true,
          "removed": false,
          "readOnly": false,
          "required": false,
          "displayName": "Condition",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "AI_status",
          "type": "boolean",
          "display": true,
          "removed": false,
          "readOnly": false,
          "required": false,
          "displayName": "AI_status",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        }
      ],
      "mappingMode": "defineBelow",
      "matchingColumns": [
        "id"
      ]
    },
    "options": {},
    "operation": "update"
  },
  "credentials": {
    "airtableTokenApi": {
      "id": "Und0frCQ6SNVX3VV",
      "name": "Airtable Personal Access Token account"
    }
  },
  "typeVersion": 2
}

================ Node #4364 ================
{
  "id": "19d736bf-c29d-46a2-93bc-b536ff28c4b5",
  "name": "Sticky Note6",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    -100,
    -260
  ],
  "parameters": {
    "width": 359.6648027457353,
    "height": 381.0536322713287,
    "content": "## Try It Out!\n### This workflow does the following:\n* Scans an Airtable spreadsheet for rows with product photo images.\n* Uses an AI vision model to attempt to identify the product.\n* Uses an AI Agent to research the product on the internet to enrich the product data.\n* Overwrites our Airtable spreadsheet with the enriched data.\n\n### Need Help?\nJoin the [Discord](https://discord.com/invite/XPKeKXeB7d) or ask in the [Forum](https://community.n8n.io/)!\n\nHappy Hacking!"
  },
  "typeVersion": 1
}

================ Node #4365 ================
{
  "id": "25f15c48-16bf-4f92-942d-c224ed88d208",
  "name": "Analyse Image",
  "type": "@n8n/n8n-nodes-langchain.openAi",
  "position": [
    840,
    80
  ],
  "parameters": {
    "text": "=Focus on the {{ $json.Title }} in the image - we'll refer to this as the \"object\". Identify the following attributes of the object. If you cannot determine confidently, then leave blank and move to next attribute.\n* Decription of the object.\n* The model/make of the object.\n* The material(s) used in the construction of the object.\n* The color(s) of the object\n* The condition of the object. Use one of poor, good, excellent.\n",
    "options": {},
    "resource": "image",
    "imageUrls": "={{ $json.Image[0].thumbnails.large.url }}",
    "operation": "analyze"
  },
  "credentials": {
    "openAiApi": {
      "id": "8gccIjcuf3gvaoEr",
      "name": "OpenAi account"
    }
  },
  "typeVersion": 1.3
}

================ Node #4366 ================
{
  "id": "e6c99f71-ccc9-426e-b916-cc38864e3224",
  "name": "Object Identifier Agent",
  "type": "@n8n/n8n-nodes-langchain.agent",
  "position": [
    1260,
    20
  ],
  "parameters": {
    "text": "=system: Your role is to help an building surveyor perform a object classification and data collection task whereby the surveyor will take photos of various objects and your job is to try and identify accurately certain product attributes of the objects as detailed below.\n\nThe surveyor has given you the following:\n1) photo url ```{{ $('Get Applicable Rows').item.json.Image[0].thumbnails.large.url }}```.\n2) photo description ```{{ $json.content }}```.\n\nFor each product attribute the surveyor is unable to determine, you may:\n1) use the reverse image search tool to search the product on the internet via the provided image url.\n2) use the web scraper tool to read webpages on the internet which may be relevant to the product.\n3) If after using these tools, you are still unable to determine the required product attributes then leave the data blank.\n\nUse all the information provided and gathered, to extract the following product attributes: title, description, model, material, color and condition.",
    "agent": "openAiFunctionsAgent",
    "options": {},
    "promptType": "define",
    "hasOutputParser": true
  },
  "typeVersion": 1.5
}

================ Node #4367 ================
{
  "id": "661b14bd-6511-4f20-981c-2e68a7c34ec5",
  "name": "Actions Router",
  "type": "n8n-nodes-base.switch",
  "position": [
    1577,
    733
  ],
  "parameters": {
    "rules": {
      "values": [
        {
          "outputKey": "serp.google_reverse_image",
          "conditions": {
            "options": {
              "leftValue": "",
              "caseSensitive": true,
              "typeValidation": "strict"
            },
            "combinator": "and",
            "conditions": [
              {
                "operator": {
                  "type": "string",
                  "operation": "equals"
                },
                "leftValue": "={{ $json.route }}",
                "rightValue": "serp.google_reverse_image"
              }
            ]
          },
          "renameOutput": true
        },
        {
          "outputKey": "firecrawl.scrape",
          "conditions": {
            "options": {
              "leftValue": "",
              "caseSensitive": true,
              "typeValidation": "strict"
            },
            "combinator": "and",
            "conditions": [
              {
                "id": "0a1f54ae-39f1-468d-ba6e-1376d13e4ee8",
                "operator": {
                  "name": "filter.operator.equals",
                  "type": "string",
                  "operation": "equals"
                },
                "leftValue": "={{ $json.route }}",
                "rightValue": "firecrawl.scrape"
              }
            ]
          },
          "renameOutput": true
        }
      ]
    },
    "options": {
      "fallbackOutput": "extra"
    }
  },
  "typeVersion": 3
}

================ Node #4368 ================
{
  "id": "c5078221-9239-4ec0-b25e-7cd880b58216",
  "name": "Sticky Note5",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    480,
    20
  ],
  "parameters": {
    "width": 181.2788838920522,
    "height": 297.0159375852115,
    "content": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ud83d\udea8**Required**\n* Set Airtable Base and Table IDs here."
  },
  "typeVersion": 1
}

================ Node #4369 ================
{
  "id": "c58c0db4-9b99-4a77-90ae-66fa3981b684",
  "name": "Sticky Note7",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    1840,
    40
  ],
  "parameters": {
    "width": 181.2788838920522,
    "height": 297.0159375852115,
    "content": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ud83d\udea8**Required**\n* Set Airtable Base and Table IDs here."
  },
  "typeVersion": 1
}

================ Node #4370 ================
{
  "id": "e3a666d7-d7a5-43f5-8f04-7972332f8916",
  "name": "Sticky Note8",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    1780,
    440
  ],
  "parameters": {
    "color": 7,
    "width": 460.3301604548244,
    "height": 298.81538450684064,
    "content": "## 5.1 Google Reverse Image Tool\nThis tool uses Google's reverse image API to return websites where similar images are found."
  },
  "typeVersion": 1
}

================ Node #4371 ================
{
  "id": "d7407cdb-16bb-4bd9-a28e-7a72a5289354",
  "name": "Sticky Note9",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    1780,
    769.9385328672522
  ],
  "parameters": {
    "color": 7,
    "width": 575.3216480295998,
    "height": 463.34699288922565,
    "content": "## 5.2 Webscraper Tool\nThis tool uses Firecrawl.dev API to crawl webpages and returns those pages in markdown format."
  },
  "typeVersion": 1
}

================ Node #4372 ================
{
  "id": "2b3112a9-046e-4aae-8fcc-95bddf3bb02e",
  "name": "Slack",
  "type": "n8n-nodes-base.slack",
  "position": [
    828,
    327
  ],
  "parameters": {
    "limit": 10,
    "query": "in:#n8n-tickets has::ticket:",
    "options": {},
    "operation": "search"
  },
  "credentials": {
    "slackApi": {
      "id": "VfK3js0YdqBdQLGP",
      "name": "Slack account"
    }
  },
  "typeVersion": 2.2
}

================ Node #4373 ================
{
  "id": "65fd6821-4d19-436c-81d9-9bdb0f5efddd",
  "name": "OpenAI Chat Model",
  "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
  "position": [
    1920,
    480
  ],
  "parameters": {
    "options": {}
  },
  "credentials": {
    "openAiApi": {
      "id": "8gccIjcuf3gvaoEr",
      "name": "OpenAi account"
    }
  },
  "typeVersion": 1
}

================ Node #4374 ================
{
  "id": "85125704-7363-40de-af84-f267f8c7e919",
  "name": "Structured Output Parser",
  "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
  "position": [
    2100,
    480
  ],
  "parameters": {
    "jsonSchema": "{\n \"type\": \"object\",\n \"properties\": {\n \"title\": { \"type\": \"string\" },\n \"summary\": { \"type\": \"string\" },\n \"ideas\": {\n \"type\": \"array\",\n \"items\": { \"type\": \"string\" }\n },\n \"priority\": { \"type\": \"string\" }\n }\n}"
  },
  "typeVersion": 1.1
}

================ Node #4375 ================
{
  "id": "eda8851a-1929-4f2f-9149-627c0fe62fbc",
  "name": "Schedule Trigger",
  "type": "n8n-nodes-base.scheduleTrigger",
  "position": [
    628,
    327
  ],
  "parameters": {
    "rule": {
      "interval": [
        {
          "field": "minutes"
        }
      ]
    }
  },
  "typeVersion": 1.2
}

================ Node #4376 ================
{
  "id": "ad0d56b5-5caf-4fc0-bdbb-4e6207e4eb03",
  "name": "Sticky Note",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    580,
    112.87898199907983
  ],
  "parameters": {
    "color": 7,
    "width": 432.4578914269739,
    "height": 427.09547550768553,
    "content": "## 1. Query Slack for Messages \n[Read more about the Slack Trigger](https://docs.n8n.io/integrations/builtin/app-nodes/n8n-nodes-base.slack)\n\nSlack API search uses the same search syntax found in the app. Here, we'll use it to filter the latest messages with the ticket emoji within our designated channel called #n8n-tickets. "
  },
  "typeVersion": 1
}

================ Node #4377 ================
{
  "id": "d4ebe5b3-6d9a-4547-8af8-0985206c4ca4",
  "name": "Sticky Note1",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    1040,
    180.44851541532478
  ],
  "parameters": {
    "color": 7,
    "width": 711.6907825442045,
    "height": 632.7258798316449,
    "content": "## 2. Decide If We Need to Create a New Ticket \n[Read more about using Linear](https://docs.n8n.io/integrations/builtin/app-nodes/n8n-nodes-base.linear)\n\nFor generated issues, we add the message id to the description of the message so that we can check them at this point in the workflow to avoid duplicates."
  },
  "typeVersion": 1
}

================ Node #4378 ================
{
  "id": "b2920271-6698-47a4-8cac-ea4cec7b47d6",
  "name": "Get Values",
  "type": "n8n-nodes-base.set",
  "position": [
    1100,
    360
  ],
  "parameters": {
    "mode": "raw",
    "options": {},
    "jsonOutput": "={\n \"id\": \"#{{ $json.permalink.split('/').last() }}\",\n \"type\": \"{{ $json.type }}\",\n \"title\": \"__NOT_SET__\",\n \"channel\": \"{{ $json.channel.name }}\",\n \"user\": \"{{ $json.username }} ({{ $json.user }})\",\n \"ts\": \"{{ $json.ts }}\",\n \"permalink\": \"{{ $json.permalink }}\",\n \"message\": \"{{ $json.text.replaceAll('\"','\\\\\"').replaceAll('\\n', '\\\\n') }}\"\n}"
  },
  "typeVersion": 3.3
}

================ Node #4379 ================
{
  "id": "c4a4db2a-5d1c-4726-8c98-aef57fdcfaa6",
  "name": "Create New Ticket?",
  "type": "n8n-nodes-base.if",
  "position": [
    1600,
    360
  ],
  "parameters": {
    "options": {},
    "conditions": {
      "options": {
        "leftValue": "",
        "caseSensitive": true,
        "typeValidation": "strict"
      },
      "combinator": "and",
      "conditions": [
        {
          "id": "c11109b6-ee45-4b52-adc3-4be5fe420202",
          "operator": {
            "type": "boolean",
            "operation": "false",
            "singleValue": true
          },
          "leftValue": "={{ Boolean(($json.hashes ?? []).includes($json.id)) }}",
          "rightValue": "=false"
        }
      ]
    }
  },
  "typeVersion": 2
}

================ Node #4380 ================
{
  "id": "46acb0de-1df1-4116-8aaf-704ec6644d7c",
  "name": "Sticky Note2",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    1780,
    80
  ],
  "parameters": {
    "color": 7,
    "width": 530.6864600881105,
    "height": 578.3950618708791,
    "content": "## 3. Use AI to Generate Ticket Contents\n[Read more about using Basic LLM Chain](https://docs.n8n.io/integrations/builtin/cluster-nodes/root-nodes/n8n-nodes-langchain.chainllm)\n\nFor this demo, we've instructed the AI to do the following:\n* Generate a descriptive title of the issue\n* Summarise the user message into an actionable request.\n* Determine a prority based on tone and context of the user message. \n* Can offer possible fixes through use of tools or RAG. (not implemented)\n"
  },
  "typeVersion": 1
}

================ Node #4381 ================
{
  "id": "503d4ae7-9d5b-4dab-94a2-da28bc0e49da",
  "name": "Sticky Note6",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    200,
    120
  ],
  "parameters": {
    "width": 359.6648027457353,
    "height": 400.4748439127683,
    "content": "## Try It Out!\n### This workflow does the following:\n* Monitors a Slack channel for new user messages asking for assistance\n* Only user messages which are tagged with the ticket(\ud83c\udfab) emoji are processed.\n* Linear is first checked to see if a ticket was created for the user message.\n* User messages are sent to ChatGPT to generate title, description and priority.\n* Support ticket is created in Linear.\n\n### Need Help?\nJoin the [Discord](https://discord.com/invite/XPKeKXeB7d) or ask in the [Forum](https://community.n8n.io/)!\n\nHappy Hacking!"
  },
  "typeVersion": 1
}

================ Node #4382 ================
{
  "id": "11e423a4-36b6-4ecd-8bf7-58a7d4a1aa9a",
  "name": "Get Existing Issues",
  "type": "n8n-nodes-base.linear",
  "position": [
    1260,
    360
  ],
  "parameters": {
    "operation": "getAll"
  },
  "credentials": {
    "linearApi": {
      "id": "Nn0F7T9FtvRUtEbe",
      "name": "Linear account"
    }
  },
  "typeVersion": 1,
  "alwaysOutputData": true
}

================ Node #4383 ================
{
  "id": "413fde96-346a-468e-80b7-d465bd8add14",
  "name": "Generate Ticket Using ChatGPT",
  "type": "@n8n/n8n-nodes-langchain.chainLlm",
  "position": [
    1920,
    320
  ],
  "parameters": {
    "text": "=The \"user issue\" is enclosed by 3 backticks:\n```\n{{ $('Get Values').item.json.message }}\n```\nYou will complete the following 4 tasks:\n1. Generate a title intended for a support ticket based on the user issue only. Be descriptive but use no more than 10 words.\n2. Summarise the user issue only by identifying the key expectations and steps that were taken to reach the conclusion.\n3. Offer at most 3 suggestions to debug or resolve the user issue only. ignore the previous issues for this task.\n4. Identify the urgency of the user issue only and denote the priority as one of \"low\", \"medium\", \"high\" or \"urgent\". If you cannot determine the urgency of the issue, then assign the \"low\" priority. Also consider that requests which require action either today or tomorrow should be prioritised as \"high\".",
    "promptType": "define",
    "hasOutputParser": true
  },
  "typeVersion": 1.4
}

================ Node #4384 ================
{
  "id": "66aecf53-6e8a-4ee8-88c3-be6b7d8d0527",
  "name": "Sticky Note3",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    2340,
    206
  ],
  "parameters": {
    "color": 7,
    "width": 374.7406065828194,
    "height": 352.3865785298774,
    "content": "## 4. Create New Ticket in Linear\n[Read more about using Linear](https://docs.n8n.io/integrations/builtin/app-nodes/n8n-nodes-base.linear)\n\nWith our ticket contents generated, we can now create our ticket in Linear for support to handle.\n"
  },
  "typeVersion": 1
}

================ Node #4385 ================
{
  "id": "f7898b7b-f60a-4315-a870-8c8ec4ad848f",
  "name": "Create Ticket",
  "type": "n8n-nodes-base.linear",
  "position": [
    2480,
    380
  ],
  "parameters": {
    "title": "={{ $json.output.title }}",
    "teamId": "1c721608-321d-4132-ac32-6e92d04bb487",
    "additionalFields": {
      "stateId": "92962324-3d1f-4cf8-993b-0c982cc95245",
      "priorityId": "={{ { 'urgent': 1, 'high': 2, 'medium': 3, 'low': 4 }[$json.output.priority.toLowerCase()] ?? 0 }}",
      "description": "=## {{ $json.output.summary }}\n\n### Suggestions\n{{ $json.output.ideas.map(idea => '* ' + idea).join('\\n') }}\n\n## Original Message\n{{ $('Get Values').item.json[\"user\"] }} asks:\n> {{ $('Get Values').item.json[\"message\"] }}\n\n### Metadata\nchannel: {{ $('Get Values').item.json.channel }}\nts: {{ $('Get Values').item.json.ts }}\npermalink: {{ $('Get Values').item.json.permalink }}\nhash: {{ $('Get Values').item.json.id }}\n"
    }
  },
  "credentials": {
    "linearApi": {
      "id": "Nn0F7T9FtvRUtEbe",
      "name": "Linear account"
    }
  },
  "typeVersion": 1
}

================ Node #4386 ================
{
  "id": "0b706c12-6ce0-41af-ad4b-9d98d7d03a41",
  "name": "Merge",
  "type": "n8n-nodes-base.merge",
  "position": [
    1440,
    360
  ],
  "parameters": {
    "mode": "combine",
    "options": {},
    "combinationMode": "multiplex"
  },
  "typeVersion": 2.1
}

================ Node #4387 ================
{
  "id": "d5b30127-f237-459d-860a-2589e3b54fb8",
  "name": "Get Hashes Only",
  "type": "n8n-nodes-base.set",
  "position": [
    1260,
    640
  ],
  "parameters": {
    "options": {},
    "assignments": {
      "assignments": [
        {
          "id": "9b0e8527-ea17-4b1e-ba62-287111f4b37e",
          "name": "hashes",
          "type": "array",
          "value": "={{ $json.descriptions.map(desc => desc.match(/hash\\:\\s([\\w#]+)/i)[1]) }}"
        }
      ]
    }
  },
  "typeVersion": 3.3
}

================ Node #4388 ================
{
  "id": "9de103e1-b6a4-4454-b1b9-73eff730fcb6",
  "name": "Collect Descriptions",
  "type": "n8n-nodes-base.aggregate",
  "position": [
    1260,
    500
  ],
  "parameters": {
    "options": {},
    "fieldsToAggregate": {
      "fieldToAggregate": [
        {
          "renameField": true,
          "outputFieldName": "descriptions",
          "fieldToAggregate": "description"
        }
      ]
    }
  },
  "typeVersion": 1,
  "alwaysOutputData": true
}

================ Node #4389 ================
{
  "id": "af34916f-7888-4d41-aee6-752b78e88c0c",
  "name": "Sticky Note4",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    780,
    300
  ],
  "parameters": {
    "width": 204.96868508214473,
    "height": 296.735132421306,
    "content": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ud83d\udea8**Required**\n* Set the Slack channel to monitor here."
  },
  "typeVersion": 1
}

================ Node #4390 ================
{
  "id": "58ab44f7-5fe5-4804-8bf1-36f351d86528",
  "name": "Sticky Note5",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    2440,
    360
  ],
  "parameters": {
    "width": 183.49787916474958,
    "height": 296.735132421306,
    "content": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ud83d\udea8**Required**\n* Set the Linear Team Name or ID here."
  },
  "typeVersion": 1
}

================ Node #4391 ================
{
  "id": "81ea4c6a-d603-4688-8b72-d9c79faf7adf",
  "name": "n8n Form Trigger",
  "type": "n8n-nodes-base.formTrigger",
  "position": [
    1272,
    455
  ],
  "webhookId": "d280e773-3bd8-44ce-a147-8b404251fce9",
  "parameters": {
    "path": "d280e773-3bd8-44ce-a147-8b404251fce9",
    "options": {},
    "formTitle": "BannerBear Clone",
    "formFields": {
      "values": [
        {
          "fieldType": "dropdown",
          "fieldLabel": "Template",
          "fieldOptions": {
            "values": [
              {
                "option": "n8n Meetup Template"
              },
              {
                "option": "AI Meetup Template"
              }
            ]
          }
        },
        {
          "fieldType": "textarea",
          "fieldLabel": "Title of Event",
          "requiredField": true
        },
        {
          "fieldType": "textarea",
          "fieldLabel": "Location of Event",
          "requiredField": true
        },
        {
          "fieldType": "textarea",
          "fieldLabel": "Date of Event",
          "requiredField": true
        },
        {
          "fieldType": "textarea",
          "fieldLabel": "Image Prompt",
          "requiredField": true
        }
      ]
    },
    "formDescription": "Generate an image and apply text"
  },
  "typeVersion": 2
}

================ Node #4392 ================
{
  "id": "dea26687-4060-488b-a09f-e21900fec2fc",
  "name": "Upload to Cloudinary",
  "type": "n8n-nodes-base.httpRequest",
  "position": [
    1920,
    480
  ],
  "parameters": {
    "url": "https://api.cloudinary.com/v1_1/daglih2g8/image/upload",
    "method": "POST",
    "options": {},
    "sendBody": true,
    "sendQuery": true,
    "contentType": "multipart-form-data",
    "authentication": "genericCredentialType",
    "bodyParameters": {
      "parameters": [
        {
          "name": "file",
          "parameterType": "formBinaryData",
          "inputDataFieldName": "data"
        }
      ]
    },
    "genericAuthType": "httpQueryAuth",
    "queryParameters": {
      "parameters": [
        {
          "name": "upload_preset",
          "value": "n8n-workflows-preset"
        }
      ]
    }
  },
  "credentials": {
    "httpQueryAuth": {
      "id": "sT9jeKzZiLJ3bVPz",
      "name": "Cloudinary API"
    }
  },
  "typeVersion": 4.2
}

================ Node #4393 ================
{
  "id": "4b73ba35-eac9-467b-b711-49061da30fbc",
  "name": "Send to Bannerbear Template",
  "type": "n8n-nodes-base.bannerbear",
  "position": [
    2260,
    440
  ],
  "parameters": {
    "templateId": "={{ $('Set Parameters').item.json.template_id }}",
    "modificationsUi": {
      "modificationsValues": [
        {
          "name": "placeholder_image",
          "text": "=",
          "imageUrl": "={{ $json.secure_url.replace('upload/','upload/f_auto,q_auto/') }}"
        },
        {
          "name": "placeholder_text",
          "text": "={{ $('Set Parameters').item.json.title }}"
        },
        {
          "name": "placeholder_location",
          "text": "={{ $('Set Parameters').item.json.location }}"
        },
        {
          "name": "placeholder_date",
          "text": "={{ $('Set Parameters').item.json.date }}"
        }
      ]
    },
    "additionalFields": {
      "waitForImage": true,
      "waitForImageMaxTries": 10
    }
  },
  "credentials": {
    "bannerbearApi": {
      "id": "jXg71GVWN3F4PvI8",
      "name": "Bannerbear account"
    }
  },
  "typeVersion": 1
}

================ Node #4394 ================
{
  "id": "d9b8f63b-ee0f-40d6-9b1a-8213c7043b3a",
  "name": "Set Parameters",
  "type": "n8n-nodes-base.set",
  "position": [
    1452,
    455
  ],
  "parameters": {
    "options": {},
    "assignments": {
      "assignments": [
        {
          "id": "8c526649-b8a8-4b9f-a805-41de053bb642",
          "name": "template_id",
          "type": "string",
          "value": "={{ {\n'AI Meetup Template': 'lzw71BD6VNLgD0eYkn',\n'n8n Meetup Template': 'n1MJGd52o696D7LaPV'\n}[$json.Template] ?? '' }}"
        },
        {
          "id": "f5a3c285-719b-4a12-a669-47a63a880ac4",
          "name": "title",
          "type": "string",
          "value": "={{ $json[\"Title of Event\"] }}"
        },
        {
          "id": "6713a88e-815c-416a-b838-b07006a090a3",
          "name": "location",
          "type": "string",
          "value": "={{ $json[\"Location of Event\"] }}"
        },
        {
          "id": "3c331756-1f1f-4e27-b769-e3de860bfdf0",
          "name": "date",
          "type": "string",
          "value": "={{ $json[\"Date of Event\"] }}"
        },
        {
          "id": "b933df30-8067-4a0a-bff1-64441490478d",
          "name": "image_prompt",
          "type": "string",
          "value": "={{ $json[\"Image Prompt\"] }}"
        }
      ]
    }
  },
  "typeVersion": 3.3
}

================ Node #4395 ================
{
  "id": "3290571f-e858-4b73-b27d-7077d4efad15",
  "name": "Sticky Note",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    1220,
    280
  ],
  "parameters": {
    "color": 7,
    "width": 392.4891967891814,
    "height": 357.1079372601395,
    "content": "## 1. Start with n8n Forms\n[Read more about using forms](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.formtrigger/)\n\nFor this demo, we'll use the form trigger for simple data capture but you could use webhooks for better customisation and/or integration into other workflows."
  },
  "typeVersion": 1
}

================ Node #4396 ================
{
  "id": "560a6c43-07bd-4a5c-8af7-0cda78f345d4",
  "name": "Sticky Note1",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    1640,
    215.68990043281633
  ],
  "parameters": {
    "color": 7,
    "width": 456.99271465116215,
    "height": 475.77059293291677,
    "content": "## 2. Use AI to Generate an Image\n[Read more about using OpenAI](https://docs.n8n.io/integrations/builtin/app-nodes/n8n-nodes-langchain.openai)\n\nGenerating AI images is just as easy as generating text thanks for n8n's OpenAI node. Once completed, OpenAI will return a binary image file. We'll have to store this image externally however since we can't upload it directly BannerBear. I've chosen to use Cloudinary CDN but S3 is also a good choice."
  },
  "typeVersion": 1
}

================ Node #4397 ================
{
  "id": "0ffe2ada-9cb6-4d4c-9d15-df83d5a596ce",
  "name": "Sticky Note2",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    2120,
    168.04517481270597
  ],
  "parameters": {
    "color": 7,
    "width": 387.4250119152741,
    "height": 467.21699325771294,
    "content": "## 3. Create Social Media Banners with BannerBear.com\n[Read more about the BannerBear Node](https://docs.n8n.io/integrations/builtin/app-nodes/n8n-nodes-base.bannerbear)\n\nNow with your generated AI image and template variables, we're ready to send them to BannerBear which will use a predefined template to create our social media banner.\n"
  },
  "typeVersion": 1
}

================ Node #4398 ================
{
  "id": "e8269a57-caab-40c6-bf47-95b64eccde81",
  "name": "Sticky Note3",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    2540,
    299.6729638445606
  ],
  "parameters": {
    "color": 7,
    "width": 404.9582850950252,
    "height": 356.8876009810222,
    "content": "## 4. Post directly to Social Media\n[Read more about using the Discord Node](https://docs.n8n.io/integrations/builtin/app-nodes/n8n-nodes-base.discord)\n\nWe'll share our event banner with our community in Discord. You can also choose to post this on your favourite social media channels."
  },
  "typeVersion": 1
}

================ Node #4399 ================
{
  "id": "457a0744-4c08-4489-af50-5a746fa4b756",
  "name": "Sticky Note4",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    2120,
    40
  ],
  "parameters": {
    "color": 5,
    "width": 388.96199194175017,
    "height": 122.12691731521146,
    "content": "### \ud83d\ude4b\u200d\u2642\ufe0f Optimise your images!\nAI generated images can get quite large (20mb+) which may hit filesize limits for some services. I've used Cloudinary's optimise API to reduce the file size before sending to BannerBear."
  },
  "typeVersion": 1
}

================ Node #4400 ================
{
  "id": "c38cc2c6-a595-48c8-a5be-668fd609c76b",
  "name": "Sticky Note5",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    2960,
    220
  ],
  "parameters": {
    "color": 5,
    "width": 391.9308945140308,
    "height": 288.0739771936459,
    "content": "### Result!\nHere is a screenshot of the generated banner.\n![Result](https://res.cloudinary.com/daglih2g8/image/upload/f_auto,q_auto,w_360/v1/n8n-workflows/qlzyrjjhxeh3zgerglti)"
  },
  "typeVersion": 1
}

================ Node #4401 ================
{
  "id": "29ce299d-3444-4e71-b83c-edbe867e833f",
  "name": "Sticky Note6",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    800,
    240
  ],
  "parameters": {
    "width": 392.9673182916798,
    "height": 404.96428251481916,
    "content": "## Try It Out!\n### This workflow does the following:\n* Uses an n8n form to capture an event to be announced.\n* Form includes imagery required for the event and this is sent to OpenAI Dalle-3 service to generate.\n* Event details as well as the ai-generated image is then sent to the BannerBear.com service where a template is used.\n* The final event poster is created and posted to X (formerly Twitter)\n\n### Need Help?\nJoin the [Discord](https://discord.com/invite/XPKeKXeB7d) or ask in the [Forum](https://community.n8n.io/)!\n\nHappy Hacking!"
  },
  "typeVersion": 1
}

================ Node #4402 ================
{
  "id": "c01d1ac0-5ebe-4ef1-bece-d6ad8bbff94e",
  "name": "Sticky Note7",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    2200,
    400
  ],
  "parameters": {
    "width": 221.3032167915293,
    "height": 368.5789698912447,
    "content": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ud83d\udea8**Required**\n* You'll need to create a template in BannerBear.\n* Once you have, map the template variables to fields in this node!"
  },
  "typeVersion": 1
}

================ Node #4403 ================
{
  "id": "c929d9c4-1e18-4806-9fc6-fb3bf0fa75ad",
  "name": "Download Banner",
  "type": "n8n-nodes-base.httpRequest",
  "position": [
    2600,
    480
  ],
  "parameters": {
    "url": "={{ $json.image_url_jpg }}",
    "options": {}
  },
  "typeVersion": 4.2
}

================ Node #4404 ================
{
  "id": "79d19004-7d82-42be-89d5-dcb3af5e3fb1",
  "name": "Sticky Note8",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    1857.0197380966872,
    440
  ],
  "parameters": {
    "width": 224.2834786948422,
    "height": 368.5789698912447,
    "content": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ud83d\udea8**Required**\n* You'll need to change all ids and references to your own Cloudinary instance.\n* Feel free to change this to another service!"
  },
  "typeVersion": 1
}

================ Node #4405 ================
{
  "id": "18ccd15f-65b6-46eb-8235-7fe19b13649d",
  "name": "Discord",
  "type": "n8n-nodes-base.discord",
  "position": [
    2780,
    480
  ],
  "parameters": {
    "files": {
      "values": [
        {}
      ]
    },
    "content": "=\ud83d\udcc5 New Event Alert! {{ $('Set Parameters').item.json.title }} being held at {{ $('Set Parameters').item.json.location }} on the {{ $('Set Parameters').item.json.date }}! Don't miss it!",
    "guildId": {
      "__rl": true,
      "mode": "list",
      "value": "1248678443432808509",
      "cachedResultUrl": "https://discord.com/channels/1248678443432808509",
      "cachedResultName": "Datamoldxyz"
    },
    "options": {},
    "resource": "message",
    "channelId": {
      "__rl": true,
      "mode": "list",
      "value": "1248678443432808512",
      "cachedResultUrl": "https://discord.com/channels/1248678443432808509/1248678443432808512",
      "cachedResultName": "general"
    }
  },
  "credentials": {
    "discordBotApi": {
      "id": "YUwD52E3oHsSUWdW",
      "name": "Discord Bot account"
    }
  },
  "typeVersion": 2
}

================ Node #4406 ================
{
  "id": "7122fac9-4b4d-4fcf-a188-21af025a7fa8",
  "name": "Generate AI Banner Image",
  "type": "@n8n/n8n-nodes-langchain.openAi",
  "position": [
    1700,
    480
  ],
  "parameters": {
    "prompt": "={{ $json.image_prompt }}",
    "options": {
      "size": "1024x1024",
      "quality": "standard"
    },
    "resource": "image"
  },
  "credentials": {
    "openAiApi": {
      "id": "8gccIjcuf3gvaoEr",
      "name": "OpenAi account"
    }
  },
  "typeVersion": 1.3
}

================ Node #4407 ================
{
  "id": "51dbe3b4-42f6-43c9-85dc-42ae49be6ba9",
  "name": "Get RFP Data",
  "type": "n8n-nodes-base.extractFromFile",
  "position": [
    1003,
    278
  ],
  "parameters": {
    "options": {},
    "operation": "pdf"
  },
  "typeVersion": 1
}

================ Node #4408 ================
{
  "id": "c42e6bfc-a426-4d12-bf95-f3fe6e944631",
  "name": "Item List Output Parser",
  "type": "@n8n/n8n-nodes-langchain.outputParserItemList",
  "position": [
    2140,
    540
  ],
  "parameters": {
    "options": {}
  },
  "typeVersion": 1
}

================ Node #4409 ================
{
  "id": "1703e9c3-f49e-4272-ad11-0b9d4e9a76c6",
  "name": "For Each Question...",
  "type": "n8n-nodes-base.splitInBatches",
  "position": [
    2460,
    340
  ],
  "parameters": {
    "options": {}
  },
  "typeVersion": 3
}

================ Node #4410 ================
{
  "id": "a54fa4ee-6f67-41a9-89fe-fd9f2bf094de",
  "name": "Sticky Note",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    760,
    60
  ],
  "parameters": {
    "color": 7,
    "width": 532.597092515486,
    "height": 508.1316876142587,
    "content": "## 1. API to Trigger Workflow\n[Read more about using Webhooks](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.webhook/)\n\nThis workflow requires the user to submit the RFP document via an API request. It's a common pattern to use the webhook node for this purpose. Be sure to secure this webhook endpoint in production!"
  },
  "typeVersion": 1
}

================ Node #4411 ================
{
  "id": "fdef005f-7838-4b8c-8af4-4b7c6f947ee2",
  "name": "Set Variables",
  "type": "n8n-nodes-base.set",
  "position": [
    1143,
    278
  ],
  "parameters": {
    "mode": "raw",
    "options": {},
    "jsonOutput": "={\n \"doc_title\": \"{{ $('Wait for Request').item.json.body.title }}\",\n \"doc_filename\": \"{{ $('Wait for Request').item.json.body.id }} | {{ $('Wait for Request').item.json.body.title }} | {{ $now.format('yyyyMMddhhmmss') }}| RFP Response\",\n \"reply_to\": \"{{ $('Wait for Request').item.json.body.reply_to }}\"\n}\n"
  },
  "typeVersion": 3.3
}

================ Node #4412 ================
{
  "id": "a64f6274-62fc-42fb-b7c7-5aa85746c621",
  "name": "Sticky Note1",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    1320,
    148.42417112849222
  ],
  "parameters": {
    "color": 7,
    "width": 493.289385759178,
    "height": 418.29352785836636,
    "content": "## 2. Create a new Doc to Capture Responses For RFP Questions\n[Read more about working with Google Docs](https://docs.n8n.io/integrations/builtin/app-nodes/n8n-nodes-base.googledocs/)\n\nFor each RFP we process, let's create its very own document to store the results. It will serve as a draft document for the RFP response."
  },
  "typeVersion": 1
}

================ Node #4413 ================
{
  "id": "2b3df6af-c1ab-44a1-8907-425944294477",
  "name": "Create new RFP Response Document",
  "type": "n8n-nodes-base.googleDocs",
  "position": [
    1420,
    340
  ],
  "parameters": {
    "title": "={{ $json.doc_filename }}",
    "folderId": "=1y0I8MH32maIWCJh767mRE_NMHC6A3bUu"
  },
  "credentials": {
    "googleDocsOAuth2Api": {
      "id": "V0G0vi1DRj7Cqbp9",
      "name": "Google Docs account"
    }
  },
  "typeVersion": 2
}

================ Node #4414 ================
{
  "id": "0bf30bef-2910-432b-b5eb-dee3fe39b797",
  "name": "Sticky Note2",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    1840,
    110.52747078833045
  ],
  "parameters": {
    "color": 7,
    "width": 500.1029039641811,
    "height": 599.9895116376663,
    "content": "## 3. Identifying Questions using AI\n[Read more about Question & Answer Chain](https://docs.n8n.io/integrations/builtin/cluster-nodes/root-nodes/n8n-nodes-langchain.chainretrievalqa/)\n\nUsing the power of LLMs, we're able to extract the RFP questionnaire regardless of original formatting or layout. This allows AutoRFP to handle a wide range of RFPs without requiring explicit extraction rules for edge cases.\n\nAdditionally, We'll use the Input List Output Parser to return a list of questions for further processing."
  },
  "typeVersion": 1
}

================ Node #4415 ================
{
  "id": "1c064047-1f6a-47c8-bb49-85b4d6f8e854",
  "name": "Sticky Note3",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    2380,
    84.66944065837868
  ],
  "parameters": {
    "color": 7,
    "width": 746.3888903304862,
    "height": 600.3660610069576,
    "content": "## 4. Generating Question & Answer Pairs with AI\n[Read more about using OpenAI Assistants in n8n](https://docs.n8n.io/integrations/builtin/app-nodes/n8n-nodes-langchain.openai/)\n\nBy preparing an OpenAI Assistant with marketing material and sales documents about our company and business, we are able to use AI to answer RFP questions with the accurate and relevant context. Potentially allowing sales teams to increase the number of RFPs they can reply to.\n\nThis portion of the workflow loops through and answers each question individually for better answers. We can record the Question and Answer pairings to the RFP response document we created earlier."
  },
  "typeVersion": 1
}

================ Node #4416 ================
{
  "id": "e663ba01-e9a6-4247-9d97-8f796d29d72a",
  "name": "OpenAI Chat Model",
  "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
  "position": [
    1960,
    540
  ],
  "parameters": {
    "options": {}
  },
  "credentials": {
    "openAiApi": {
      "id": "8gccIjcuf3gvaoEr",
      "name": "OpenAi account"
    }
  },
  "typeVersion": 1
}

================ Node #4417 ================
{
  "id": "ec0b439e-9fd8-4960-b8bb-04f4f7814a0a",
  "name": "Sticky Note4",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    300,
    60
  ],
  "parameters": {
    "width": 421.778219154496,
    "height": 515.8006969458895,
    "content": "## Try It Out!\n\n**This workflow does the following:**\n* Receives a RFP document via webhook\n* Creates a new RFP response document via Google Docs\n* Uses LLMs to extract the questions from the RFP document into a questions list\n* Loops through each question and uses an OpenAI Assistant to generate an answer. Saving each answer into the response document.\n* Once complete, sends a gmail and slack notification to the team.\n\n\n\ud83d\udcc3**Example Documents**\nTo run this workflow, you'll need to following 2 documents:\n* [RFP Document](https://drive.google.com/file/d/1G42h4Vz2lBuiNCnOiXF_-EBP1MaIEVq5/view?usp=sharing)\n* [Example Company Document](https://drive.google.com/file/d/16WywCYcxBgYHXB3TY3wXUTyfyG2n_BA0/view?usp=sharing)\n\n### Need Help?\nJoin the [Discord](https://discord.com/invite/XPKeKXeB7d) or ask in the [Forum](https://community.n8n.io/)!\n\nHappy Hacking!"
  },
  "typeVersion": 1
}

================ Node #4418 ================
{
  "id": "244ff32d-9bc4-4a67-a6c2-4a7dc308058e",
  "name": "Sticky Note5",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    3160,
    80
  ],
  "parameters": {
    "color": 7,
    "width": 474.3513281516049,
    "height": 390.51033452105344,
    "content": "## 5. Send Notification Once Completed\n[Read more about using Slack](https://docs.n8n.io/integrations/builtin/app-nodes/n8n-nodes-base.slack)\n\n\nFinally, we can use a number of ways to notify the sales team when the process is complete. Here, we've opted to send the requesting user an email with a link to the RFP response document."
  },
  "typeVersion": 1
}

================ Node #4419 ================
{
  "id": "94243b69-43b8-4731-9a6b-2934db832cc6",
  "name": "Send Chat Notification",
  "type": "n8n-nodes-base.slack",
  "position": [
    3440,
    280
  ],
  "parameters": {
    "text": "=RFP document \"{{ $('Set Variables').item.json.title }}\" completed!",
    "select": "channel",
    "channelId": {
      "__rl": true,
      "mode": "name",
      "value": "RFP-channel"
    },
    "otherOptions": {}
  },
  "credentials": {
    "slackApi": {
      "id": "VfK3js0YdqBdQLGP",
      "name": "Slack account"
    }
  },
  "typeVersion": 2.1
}

================ Node #4420 ================
{
  "id": "391d7e07-2a6d-4c4d-bf42-9cc5466cc1b5",
  "name": "Send Email Notification",
  "type": "n8n-nodes-base.gmail",
  "position": [
    3240,
    280
  ],
  "parameters": {
    "sendTo": "={{ $('Set Variables').item.json.reply_to }}",
    "message": "=Your RFP document \"{{ $('Set Variables').item.json.title }}\" is now complete!",
    "options": {},
    "subject": "=RFP Questionnaire \"{{ $('Set Variables').item.json.title }}\" Completed!",
    "emailType": "text"
  },
  "credentials": {
    "gmailOAuth2": {
      "id": "Sf5Gfl9NiFTNXFWb",
      "name": "Gmail account"
    }
  },
  "typeVersion": 2.1
}

================ Node #4421 ================
{
  "id": "34115f45-21ff-49a0-95f4-1fed53b53583",
  "name": "Add Metadata to Response Doc",
  "type": "n8n-nodes-base.googleDocs",
  "position": [
    1600,
    340
  ],
  "parameters": {
    "actionsUi": {
      "actionFields": [
        {
          "text": "=Title: {{ $('Set Variables').item.json.doc_title }}\nDate generated: {{ $now.format(\"yyyy-MM-dd @ hh:mm\") }}\nRequested by: {{ $('Set Variables').item.json.reply_to }}\nExecution Id: http://localhost:5678/workflow/{{ $workflow.id }}/executions/{{ $execution.id }}\n\n---\n\n",
          "action": "insert"
        }
      ]
    },
    "operation": "update",
    "documentURL": "={{ $json.id }}"
  },
  "credentials": {
    "googleDocsOAuth2Api": {
      "id": "V0G0vi1DRj7Cqbp9",
      "name": "Google Docs account"
    }
  },
  "typeVersion": 2
}

================ Node #4422 ================
{
  "id": "f285d896-ba15-4f8a-b041-7cbcbe2e1050",
  "name": "Sticky Note6",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    783,
    238
  ],
  "parameters": {
    "width": 192.30781285767205,
    "height": 306.5264325350084,
    "content": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ud83d\udea8**Required**\n* Use a tool such as Postman to send data to the webhook."
  },
  "typeVersion": 1
}

================ Node #4423 ================
{
  "id": "b6e4e40e-b10b-48f2-bfe2-1ad38b1c6518",
  "name": "Record Question & Answer in Response Doc",
  "type": "n8n-nodes-base.googleDocs",
  "position": [
    2940,
    460
  ],
  "parameters": {
    "actionsUi": {
      "actionFields": [
        {
          "text": "={{ $runIndex+1 }}. {{ $json.content }}\n{{ $json.output }}\n\n",
          "action": "insert"
        }
      ]
    },
    "operation": "update",
    "documentURL": "={{ $('Create new RFP Response Document').item.json.id }}"
  },
  "credentials": {
    "googleDocsOAuth2Api": {
      "id": "V0G0vi1DRj7Cqbp9",
      "name": "Google Docs account"
    }
  },
  "typeVersion": 2
}

================ Node #4424 ================
{
  "id": "ae8cc28f-4fd3-41d7-8a30-2675f58d1067",
  "name": "Sticky Note7",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    2600,
    440
  ],
  "parameters": {
    "width": 306.8994213707367,
    "height": 481.01365258903786,
    "content": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ud83d\udea8**Required**\nYou'll need to create an OpenAI Assistant to use this workflow.\n* Sign up for [OpenAI Dashboard](https://platform.openai.com) if you haven't already.\n* Create an [OpenAI Assistant](https://platform.openai.com/playground/assistants)\n* Upload the [example company doc](https://drive.google.com/file/d/16WywCYcxBgYHXB3TY3wXUTyfyG2n_BA0/view?usp=sharing) to the assistant.\n\nThe assistant will use the company doc to answer the questions."
  },
  "typeVersion": 1
}

================ Node #4425 ================
{
  "id": "81825554-5cbe-469b-8511-a92d5ea165cb",
  "name": "Sticky Note8",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    3200,
    460
  ],
  "parameters": {
    "width": 386.79263167741857,
    "height": 94.04968721739164,
    "content": "\ud83d\udea8**Required**\n* Update the email address to send to in Gmail Node.\n* Update the channel and message for Slack."
  },
  "typeVersion": 1
}

================ Node #4426 ================
{
  "id": "25a57ca0-6789-499c-873b-07aba40530ed",
  "name": "Answer Question with Context",
  "type": "@n8n/n8n-nodes-langchain.openAi",
  "position": [
    2620,
    460
  ],
  "parameters": {
    "text": "={{ $json.response.text }}",
    "prompt": "define",
    "options": {},
    "resource": "assistant",
    "assistantId": {
      "__rl": true,
      "mode": "list",
      "value": "asst_QBI5lLKOsjktr3DRB4MwrgZd",
      "cachedResultName": "Nexus Digital Solutions Bot"
    }
  },
  "credentials": {
    "openAiApi": {
      "id": "8gccIjcuf3gvaoEr",
      "name": "OpenAi account"
    }
  },
  "typeVersion": 1.3
}

================ Node #4427 ================
{
  "id": "1b4cc83b-a793-47c1-9dd6-0d7484db07b4",
  "name": "Wait for Request",
  "type": "n8n-nodes-base.webhook",
  "position": [
    823,
    278
  ],
  "webhookId": "35e874df-2904-494e-a9f5-5a3f20f517f8",
  "parameters": {
    "path": "35e874df-2904-494e-a9f5-5a3f20f517f8",
    "options": {},
    "httpMethod": "POST"
  },
  "typeVersion": 2
}

================ Node #4428 ================
{
  "id": "2f97e3e6-c100-4045-bcb3-6fbd17cfb420",
  "name": "Extract Questions From RFP",
  "type": "@n8n/n8n-nodes-langchain.chainLlm",
  "position": [
    1960,
    380
  ],
  "parameters": {
    "text": "=You have been given a RFP document as part of a tender process of a buyer. Please extract all questions intended for the supplier. You must ensure the questions extracted are exactly has they are written in the RFP document.\n\n<RFP>{{ $('Get RFP Data').item.json.text }}<RFP>",
    "promptType": "define",
    "hasOutputParser": true
  },
  "typeVersion": 1.4
}

================ Node #4429 ================
{
  "id": "4945b975-ac84-406e-8482-44cfa5679ef9",
  "name": "Sticky Note9",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    760,
    600
  ],
  "parameters": {
    "color": 5,
    "width": 529.9947173986736,
    "height": 157.64231937074243,
    "content": "### Example Webhook Request\ncurl --location 'https://<n8n_webhook_url>' \\\n--form 'id=\"RFP001\"' \\\n--form 'title=\"BlueChip Travel and StarBus Web Services\"' \\\n--form 'reply_to=\"jim@example.com\"' \\\n--form 'data=@\"k9pnbALxX/RFP Questionnaire.pdf\"'\n"
  },
  "typeVersion": 1
}

================ Node #4430 ================
{
  "id": "495609cd-4ca0-426d-8413-69e771398188",
  "name": "Sticky Note",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    480,
    400
  ],
  "parameters": {
    "width": 637.1327972412109,
    "height": 1113.7434387207031,
    "content": "## Store Notion's Pages as Vector Documents into Supabase\n\n**This workflow assumes you have a Supabase project with a table that has a vector column. If you don't have it, follow the instructions here:** [Supabase Vector Columns Guide](https://supabase.com/docs/guides/ai/vector-columns)\n\n## Workflow Description\n\nThis workflow automates the process of storing Notion pages as vector documents in a Supabase database with a vector column. The steps are as follows:\n\n1. **Notion Page Added Trigger**:\n - Monitors a specified Notion database for newly added pages. You can create a specific Notion database where you copy the pages you want to store in Supabase.\n - Node: `Page Added in Notion Database`\n\n2. **Retrieve Page Content**:\n - Fetches all block content from the newly added Notion page.\n - Node: `Get Blocks Content`\n\n3. **Filter Non-Text Content**:\n - Excludes blocks of type \"image\" and \"video\" to focus on textual content.\n - Node: `Filter - Exclude Media Content`\n\n4. **Summarize Content**:\n - Concatenates the Notion blocks content to create a single text for embedding.\n - Node: `Summarize - Concatenate Notion's blocks content`\n\n5. **Store in Supabase**:\n - Stores the processed documents and their embeddings into a Supabase table with a vector column.\n - Node: `Store Documents in Supabase`\n\n6. **Generate Embeddings**:\n - Utilizes OpenAI's API to generate embeddings for the textual content.\n - Node: `Generate Text Embeddings`\n\n\n7. **Create Metadata and Load Content**:\n - Loads the block content and creates associated metadata, such as page ID and block ID.\n - Node: `Load Block Content & Create Metadata`\n\n8. **Split Content into Chunks**:\n - Divides the text into smaller chunks for easier processing and embedding generation.\n - Node: `Token Splitter`\n\n\n\n"
  },
  "typeVersion": 1
}

================ Node #4431 ================
{
  "id": "3f3e65dc-2b26-407c-87e5-52ba3b315fed",
  "name": "Embeddings OpenAI",
  "type": "@n8n/n8n-nodes-langchain.embeddingsOpenAi",
  "position": [
    2200,
    760
  ],
  "parameters": {
    "options": {}
  },
  "typeVersion": 1
}

================ Node #4432 ================
{
  "id": "6d2579b8-376f-44c3-82e8-9dc608efd98b",
  "name": "Token Splitter",
  "type": "@n8n/n8n-nodes-langchain.textSplitterTokenSplitter",
  "position": [
    2340,
    960
  ],
  "parameters": {
    "chunkSize": 256,
    "chunkOverlap": 30
  },
  "typeVersion": 1
}

================ Node #4433 ================
{
  "id": "79b3c147-08ca-4db4-9116-958a868cbfd9",
  "name": "Notion - Page Added Trigger",
  "type": "n8n-nodes-base.notionTrigger",
  "position": [
    1180,
    520
  ],
  "parameters": {
    "simple": false,
    "pollTimes": {
      "item": [
        {
          "mode": "everyMinute"
        }
      ]
    },
    "databaseId": {
      "__rl": true,
      "mode": "list",
      "value": "",
      "cachedResultUrl": "",
      "cachedResultName": ""
    }
  },
  "typeVersion": 1
}

================ Node #4434 ================
{
  "id": "e4a6f524-e3f5-4d02-949a-8523f2d21965",
  "name": "Notion - Retrieve Page Content",
  "type": "n8n-nodes-base.notion",
  "position": [
    1400,
    520
  ],
  "parameters": {
    "blockId": {
      "__rl": true,
      "mode": "url",
      "value": "={{ $json.url }}"
    },
    "resource": "block",
    "operation": "getAll",
    "returnAll": true
  },
  "typeVersion": 2.2
}

================ Node #4435 ================
{
  "id": "bfebc173-8d4b-4f8f-a625-4622949dd545",
  "name": "Filter Non-Text Content",
  "type": "n8n-nodes-base.filter",
  "position": [
    1620,
    520
  ],
  "parameters": {
    "options": {},
    "conditions": {
      "options": {
        "leftValue": "",
        "caseSensitive": true,
        "typeValidation": "strict"
      },
      "combinator": "and",
      "conditions": [
        {
          "id": "e5b605e5-6d05-4bca-8f19-a859e474620f",
          "operator": {
            "type": "string",
            "operation": "notEquals"
          },
          "leftValue": "={{ $json.type }}",
          "rightValue": "image"
        },
        {
          "id": "c7415859-5ffd-4c78-b497-91a3d6303b6f",
          "operator": {
            "type": "string",
            "operation": "notEquals"
          },
          "leftValue": "={{ $json.type }}",
          "rightValue": "video"
        }
      ]
    }
  },
  "typeVersion": 2
}

================ Node #4436 ================
{
  "id": "b04939f9-355a-430b-a069-b11800066313",
  "name": "Summarize - Concatenate Notion's blocks content",
  "type": "n8n-nodes-base.summarize",
  "position": [
    1920,
    520
  ],
  "parameters": {
    "options": {
      "outputFormat": "separateItems"
    },
    "fieldsToSummarize": {
      "values": [
        {
          "field": "content",
          "separateBy": "\n",
          "aggregation": "concatenate"
        }
      ]
    }
  },
  "typeVersion": 1
}

================ Node #4437 ================
{
  "id": "0e64dbb5-20c1-4b90-b818-a1726aaf5112",
  "name": "Create metadata and load content",
  "type": "@n8n/n8n-nodes-langchain.documentDefaultDataLoader",
  "position": [
    2320,
    760
  ],
  "parameters": {
    "options": {
      "metadata": {
        "metadataValues": [
          {
            "name": "pageId",
            "value": "={{ $('Notion - Page Added Trigger').item.json.id }}"
          },
          {
            "name": "createdTime",
            "value": "={{ $('Notion - Page Added Trigger').item.json.created_time }}"
          },
          {
            "name": "pageTitle",
            "value": "={{ $('Notion - Page Added Trigger').item.json.properties.Page.title[0].text.content }}"
          }
        ]
      }
    },
    "jsonData": "={{ $('Summarize - Concatenate Notion's blocks content').item.json.concatenated_content }}",
    "jsonMode": "expressionData"
  },
  "typeVersion": 1
}

================ Node #4438 ================
{
  "id": "187aba6f-eaed-4427-8d40-b9da025fb37d",
  "name": "Supabase Vector Store",
  "type": "@n8n/n8n-nodes-langchain.vectorStoreSupabase",
  "position": [
    2200,
    520
  ],
  "parameters": {
    "mode": "insert",
    "options": {},
    "tableName": {
      "__rl": true,
      "mode": "list",
      "value": "",
      "cachedResultName": ""
    }
  },
  "typeVersion": 1
}

================ Node #4439 ================
{
  "id": "48c87027-7eea-40b9-a73c-4e002b748783",
  "name": "YouTube Video Trigger",
  "type": "n8n-nodes-base.rssFeedReadTrigger",
  "position": [
    560,
    220
  ],
  "parameters": {
    "feedUrl": "https://www.youtube.com/feeds/videos.xml?channel_id=UC08Fah8EIryeOZRkjBRohcQ",
    "pollTimes": {
      "item": [
        {
          "mode": "everyMinute"
        }
      ]
    }
  },
  "typeVersion": 1
}

================ Node #4440 ================
{
  "id": "56166228-b365-4043-b48c-098b4de71f6f",
  "name": "Retrieve Caption Data",
  "type": "n8n-nodes-base.httpRequest",
  "position": [
    780,
    220
  ],
  "parameters": {
    "url": "https://www.googleapis.com/youtube/v3/captions",
    "options": {},
    "sendQuery": true,
    "authentication": "predefinedCredentialType",
    "queryParameters": {
      "parameters": [
        {
          "name": "videoId",
          "value": "={{ $json.id.match(/(?:[^:]*:){2}\\s*(.*)/)[1] }}"
        },
        {
          "name": "part",
          "value": "snippet"
        }
      ]
    },
    "nodeCredentialType": "youTubeOAuth2Api"
  },
  "credentials": {
    "youTubeOAuth2Api": {
      "id": "uy3xy1Ks2ATwRGr4",
      "name": "Creator Magic - YouTube account"
    }
  },
  "typeVersion": 4.2
}

================ Node #4441 ================
{
  "id": "c029ac6f-3071-4045-83f6-2dede0c1f358",
  "name": "Download Captions",
  "type": "n8n-nodes-base.httpRequest",
  "position": [
    1220,
    220
  ],
  "parameters": {
    "url": "=https://www.googleapis.com/youtube/v3/captions/{{ $json.caption.id }}",
    "options": {},
    "authentication": "predefinedCredentialType",
    "nodeCredentialType": "youTubeOAuth2Api"
  },
  "credentials": {
    "youTubeOAuth2Api": {
      "id": "uy3xy1Ks2ATwRGr4",
      "name": "Creator Magic - YouTube account"
    }
  },
  "typeVersion": 4.2
}

================ Node #4442 ================
{
  "id": "8b45dc14-f10f-4b50-8ca6-a9d0ccfee4dc",
  "name": "Caption File Conversion",
  "type": "n8n-nodes-base.extractFromFile",
  "position": [
    1440,
    220
  ],
  "parameters": {
    "options": {},
    "operation": "text",
    "destinationKey": "content"
  },
  "typeVersion": 1
}

================ Node #4443 ================
{
  "id": "6527adb4-9087-40eb-b63a-8c4cdf5d0a40",
  "name": "Caption Summary with ChatGPT",
  "type": "@n8n/n8n-nodes-langchain.openAi",
  "position": [
    1660,
    220
  ],
  "parameters": {
    "modelId": {
      "__rl": true,
      "mode": "list",
      "value": "gpt-3.5-turbo",
      "cachedResultName": "GPT-3.5-TURBO"
    },
    "options": {},
    "messages": {
      "values": [
        {
          "content": "=Summarise this transcript into three bullet points to sum up what the video is about and why someone should watch it: {{ $json[\"content\"] }}"
        }
      ]
    }
  },
  "credentials": {
    "openAiApi": {
      "id": "QpdCHVaJVRd9NNYl",
      "name": "OpenAi account"
    }
  },
  "typeVersion": 1.3
}

================ Node #4444 ================
{
  "id": "2c83f230-bc37-4efb-9ee9-842bcefa0ef4",
  "name": "Post to Discord",
  "type": "n8n-nodes-base.discord",
  "position": [
    2000,
    220
  ],
  "parameters": {
    "content": "=\ud83c\udf1f New Video Alert! \ud83c\udf1f\n\n**{{ $('YouTube Video Trigger').item.json[\"title\"] }}**\n\n*What\u2019s it about?*\n\n{{ $json[\"message\"][\"content\"] }}\n\n[Watch NOW]({{ $('YouTube Video Trigger').item.json[\"link\"] }}) and remember to share your thoughts!",
    "options": {},
    "authentication": "webhook"
  },
  "credentials": {
    "discordWebhookApi": {
      "id": "QQxpAIskycvb8fIE",
      "name": "Discord Webhook account"
    }
  },
  "typeVersion": 2
}

================ Node #4445 ================
{
  "id": "8408887e-1d89-402c-b350-93d5f96f4dea",
  "name": "Find English Captions",
  "type": "n8n-nodes-base.set",
  "position": [
    1000,
    220
  ],
  "parameters": {
    "options": {},
    "assignments": {
      "assignments": [
        {
          "id": "eaf7dcb5-91cf-4405-917b-38845f0ef78d",
          "name": "caption",
          "type": "object",
          "value": "={{ $jmespath( $json.items, \"[?snippet.language == 'en'] | [0]\" ) }}"
        }
      ]
    }
  },
  "typeVersion": 3.3
}

================ Node #4446 ================
{
  "id": "71cc0977-1695-4797-9df2-b0a98e41d3de",
  "name": "Sticky Note",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    500,
    -20
  ],
  "parameters": {
    "width": 448.11859838274916,
    "height": 417.2722371967648,
    "content": "### Summarise Your YouTube Videos with AI for Discord\n\n\ud83d\udcfd\ufe0f [Watch the Video Tutorial](https://mrc.fm/ai2d)\n\n* Add your [YouTube channel ID](https://www.youtube.com/account_advanced) to the URL in the first node: `https://www.youtube.com/feeds/videos.xml?channel_id=YOUR_CHANNEL_ID`.\n\n* Ensure authorization with the YouTube channel that you want to download captions from."
  },
  "typeVersion": 1
}

================ Node #4447 ================
{
  "id": "576be5c4-1ed0-4d01-a980-cb2fc31e2223",
  "name": "Post to X",
  "type": "n8n-nodes-base.twitter",
  "position": [
    1280,
    380
  ],
  "parameters": {
    "text": "={{ $json.message.content }}",
    "additionalFields": {}
  },
  "credentials": {
    "twitterOAuth2Api": {
      "id": "FjHOuF0APzoMqIjG",
      "name": "X account"
    }
  },
  "typeVersion": 2
}

================ Node #4448 ================
{
  "id": "3b87cf2a-51d5-4589-9729-bb1fe3cfceca",
  "name": "Sticky Note",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    620,
    254.76543209876536
  ],
  "parameters": {
    "color": 3,
    "width": 221.82716049382665,
    "height": 308.7901234567902,
    "content": "\ud83c\udd94 Ensure you enter your YouTube Channel ID in the \"Channel ID\" field of this node. You can find your [Channel ID here](https://youtube.com/account_advanced)."
  },
  "typeVersion": 1
}

================ Node #4449 ================
{
  "id": "912e631c-aa43-4e02-9816-b35fe6e62dd8",
  "name": "Generate Post for X with ChatGPT",
  "type": "@n8n/n8n-nodes-langchain.openAi",
  "position": [
    900,
    380
  ],
  "parameters": {
    "modelId": {
      "__rl": true,
      "mode": "list",
      "value": "gpt-3.5-turbo",
      "cachedResultName": "GPT-3.5-TURBO"
    },
    "options": {},
    "messages": {
      "values": [
        {
          "content": "=Write an engaging post about my latest YouTube video for X (Twitter) of no more than 140 characters in length. Link to the video at https://youtu.be/{{ $json.id.videoId }} use this title and description: {{ $json.snippet.title }} {{ $json.snippet.description }}"
        }
      ]
    }
  },
  "credentials": {
    "openAiApi": {
      "id": "UpdYKqoR9wsGBnaA",
      "name": "OpenAi account"
    }
  },
  "typeVersion": 1.3
}

================ Node #4450 ================
{
  "id": "841ee140-7e37-4e9c-8ab2-2a3ee941d255",
  "name": "Sticky Note1",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    360,
    254.5679012345679
  ],
  "parameters": {
    "width": 244.34567901234558,
    "height": 102.81481481481477,
    "content": "**Use AI to Promote Your New YouTube Videos on X**\n\n\ud83c\udfac Watch the [Setup Video Here](https://mrc.fm/ai2x)"
  },
  "typeVersion": 1
}

================ Node #4451 ================
{
  "id": "583b7d5d-e5dc-4183-92ee-8135ce6095a8",
  "name": "Fetch Latest Videos",
  "type": "n8n-nodes-base.youTube",
  "position": [
    680,
    380
  ],
  "parameters": {
    "limit": 1,
    "filters": {
      "channelId": "UC08Fah8EIryeOZRkjBRohcQ",
      "publishedAfter": "={{ new Date(new Date().getTime() - 30 * 60000).toISOString() }}"
    },
    "options": {},
    "resource": "video"
  },
  "credentials": {
    "youTubeOAuth2Api": {
      "id": "cVI5wEqeFEeJ81nk",
      "name": "YouTube account"
    }
  },
  "typeVersion": 1
}

================ Node #4452 ================
{
  "id": "6e391007-10e2-4e67-9db6-e13d5d2bef11",
  "name": "Check Every 30 Min",
  "type": "n8n-nodes-base.scheduleTrigger",
  "position": [
    460,
    380
  ],
  "parameters": {
    "rule": {
      "interval": [
        {
          "field": "minutes",
          "minutesInterval": 30
        }
      ]
    }
  },
  "typeVersion": 1.2
}

================ Node #4453 ================
{
  "id": "ecb4bbc8-939a-4c6c-80b6-6f053d1d7745",
  "name": "Get the Image",
  "type": "n8n-nodes-base.telegramTrigger",
  "position": [
    1640,
    880
  ],
  "webhookId": "8404b32c-14bd-428e-88a6-560755f0f7ba",
  "parameters": {
    "updates": [
      "message"
    ],
    "additionalFields": {
      "download": true
    }
  },
  "credentials": {
    "telegramApi": {
      "id": "k3RE6o9brmFRFE9p",
      "name": "Telegram account"
    }
  },
  "typeVersion": 1.1
}

================ Node #4454 ================
{
  "id": "2fd523b7-5f89-4e53-9445-4336b51cad51",
  "name": "Send Content for the Analyzed image",
  "type": "n8n-nodes-base.telegram",
  "position": [
    2380,
    760
  ],
  "parameters": {
    "text": "={{ $json.content }}",
    "chatId": "={{ $('Get the Image').item.json.message.chat.id }}",
    "additionalFields": {
      "appendAttribution": false
    }
  },
  "credentials": {
    "telegramApi": {
      "id": "k3RE6o9brmFRFE9p",
      "name": "Telegram account"
    }
  },
  "typeVersion": 1.1
}

================ Node #4455 ================
{
  "id": "b77fe84f-7651-42aa-aa40-f903b10c8fb1",
  "name": "Sticky Note",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    380,
    360
  ],
  "parameters": {
    "width": 1235.4238259410247,
    "height": 1361.9843517631348,
    "content": "# Automated Image Analysis and Response via Telegram\n\n## Example: @SubAlertMe_Bot\n\n## Summary:\nThe automated image analysis and response workflow using n8n is a sophisticated solution designed to streamline the process of analyzing images sent via Telegram and delivering insightful responses based on the analysis outcomes. This cutting-edge workflow employs a series of meticulously orchestrated nodes to ensure seamless automation and efficiency in image processing tasks.\n\n## Use Cases:\nThis advanced workflow caters to a myriad of scenarios where real-time image analysis and response mechanisms are paramount. The use cases include:\n- Providing immediate feedback on images shared within Telegram groups.\n- Enabling automated content moderation based on the analysis of image content.\n- Facilitating rapid categorization and tagging of images based on the results of the analysis.\n\n## Detailed Workflow Setup:\nTo effectively implement this workflow, users must adhere to a meticulous setup process, which includes:\n- Access to the versatile n8n platform, ensuring seamless workflow orchestration.\n- Integration of a Telegram account to facilitate image reception and communication.\n- Utilization of an OpenAI account for sophisticated image analysis capabilities.\n- Configuration of Telegram and OpenAI credentials within the n8n environment for seamless integration.\n- Proficiency in creating and interconnecting nodes within the n8n workflow for optimal functionality.\n\n## Detailed Node Description:\n1. **Get the Image (Telegram Trigger):**\n - Actively triggers upon receipt of an image via Telegram, ensuring prompt processing.\n - Extracts essential information from the received image message to initiate further actions.\n\n2. **Merge all fields To get data from trigger:**\n - Seamlessly amalgamates all relevant data fields extracted from the trigger node for comprehensive data consolidation.\n\n3. **Analyze Image (OpenAI):**\n - Harnesses the powerful capabilities of OpenAI services to conduct in-depth analysis of the received image.\n - Processes the image data in base64 format to derive meaningful insights from the visual content.\n\n4. **Aggregate all fields:**\n - Compiles and consolidates all data items for subsequent processing and analysis, ensuring comprehensive data aggregation.\n\n5. **Send Content for the Analyzed Image (Telegram):**\n - Transmits the analyzed content back to the Telegram chat interface for seamless communication.\n - Delivers the analyzed information in textual format, enhancing user understanding and interaction.\n\n6. **Switch Node:**\n - The Switch node is pivotal for decision-making based on predefined conditions within the workflow.\n - It evaluates incoming data to determine the existence or absence of specific elements, such as images in this context.\n - Utilizes a set of rules to assess the presence of image data in the message payload and distinguishes between cases where images are detected and when they are not.\n - This crucial node plays a pivotal role in directing the flow of the workflow based on the outcomes of its evaluations.\n\n\n\n## Conclusion:\nThe automation of image analysis processes through this sophisticated workflow not only enhances operational efficiency but also revolutionizes communication dynamics within Telegram interactions. By incorporating this advanced workflow solution, users can optimize their image analysis workflows, bolster communication efficacy, and unlock new levels of automation in image processing tasks.\n"
  },
  "typeVersion": 1
}

================ Node #4456 ================
{
  "id": "7a588ccb-7a97-4776-82fd-c4f42640e8f7",
  "name": "Update Telegram Error Message",
  "type": "n8n-nodes-base.telegram",
  "position": [
    2380,
    1000
  ],
  "parameters": {
    "text": "Please Upload an Image ....",
    "chatId": "={{ $json.message.chat.id }}",
    "additionalFields": {
      "appendAttribution": false
    }
  },
  "credentials": {
    "telegramApi": {
      "id": "k3RE6o9brmFRFE9p",
      "name": "Telegram account"
    }
  },
  "typeVersion": 1.1
}

================ Node #4457 ================
{
  "id": "0cd83b82-0a20-4bf6-82bc-24827a368b89",
  "name": "Wait",
  "type": "n8n-nodes-base.wait",
  "position": [
    2180,
    1000
  ],
  "webhookId": "d4d6fc13-d8ad-42b6-b4dd-e922b5534282",
  "parameters": {
    "amount": 3
  },
  "typeVersion": 1.1
}

================ Node #4458 ================
{
  "id": "a6d52335-72e7-4ce4-92e9-861b2806e9ae",
  "name": "Sticky Note1",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    1620,
    360
  ],
  "parameters": {
    "color": 4,
    "width": 1139.7707284714515,
    "height": 1359.6943046286056,
    "content": ""
  },
  "typeVersion": 1
}

================ Node #4459 ================
{
  "id": "0222b4f6-a7c1-4183-8df8-b47b9e0cd685",
  "name": "Analyze image",
  "type": "@n8n/n8n-nodes-langchain.openAi",
  "position": [
    2180,
    760
  ],
  "parameters": {
    "options": {},
    "resource": "image",
    "inputType": "base64",
    "operation": "analyze"
  },
  "credentials": {
    "openAiApi": {
      "id": "kDo5LhPmHS2WQE0b",
      "name": "OpenAi account"
    }
  },
  "typeVersion": 1.3
}

================ Node #4460 ================
{
  "id": "f83c7dc2-a986-40e7-831c-b7968866ef4e",
  "name": "Switch ( image or not )",
  "type": "n8n-nodes-base.switch",
  "position": [
    1820,
    880
  ],
  "parameters": {
    "rules": {
      "values": [
        {
          "outputKey": "Image",
          "conditions": {
            "options": {
              "leftValue": "",
              "caseSensitive": true,
              "typeValidation": "strict"
            },
            "combinator": "and",
            "conditions": [
              {
                "operator": {
                  "type": "array",
                  "operation": "exists",
                  "singleValue": true
                },
                "leftValue": "={{ $json.message.photo }}",
                "rightValue": ""
              }
            ]
          },
          "renameOutput": true
        },
        {
          "outputKey": "Empty",
          "conditions": {
            "options": {
              "leftValue": "",
              "caseSensitive": true,
              "typeValidation": "strict"
            },
            "combinator": "and",
            "conditions": [
              {
                "id": "3fe3a96d-6ee9-4f12-a32c-f5f5b729e257",
                "operator": {
                  "type": "array",
                  "operation": "notExists",
                  "singleValue": true
                },
                "leftValue": "={{ $json.message.photo }}",
                "rightValue": ""
              }
            ]
          },
          "renameOutput": true
        }
      ]
    },
    "options": {}
  },
  "typeVersion": 3
}

================ Node #4461 ================
{
  "id": "757a7e67-073a-4fa1-b571-2ddd147b35f6",
  "name": "OpenAI Chat Model",
  "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
  "position": [
    1000,
    1240
  ],
  "parameters": {
    "model": "gpt-3.5-turbo-16k-0613",
    "options": {}
  },
  "credentials": {
    "openAiApi": {
      "id": "kDo5LhPmHS2WQE0b",
      "name": "OpenAi account"
    }
  },
  "typeVersion": 1
}

================ Node #4462 ================
{
  "id": "761ed83a-2cfb-474a-b596-922e5a7e2717",
  "name": "Schedule Trigger",
  "type": "n8n-nodes-base.scheduleTrigger",
  "position": [
    660,
    1060
  ],
  "parameters": {
    "rule": {
      "interval": [
        {
          "field": "hours",
          "hoursInterval": 12
        }
      ]
    }
  },
  "typeVersion": 1.1
}

================ Node #4463 ================
{
  "id": "41faf334-30d6-4cc0-9a94-9c486ec3fa6c",
  "name": "OpenAI Chat Model2",
  "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
  "position": [
    1520,
    1420
  ],
  "parameters": {
    "options": {}
  },
  "credentials": {
    "openAiApi": {
      "id": "kDo5LhPmHS2WQE0b",
      "name": "OpenAi account"
    }
  },
  "typeVersion": 1
}

================ Node #4464 ================
{
  "id": "d9ad0a3a-2ce6-4071-8262-8176b3eecf36",
  "name": "Sticky Note",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    1780,
    220
  ],
  "parameters": {
    "width": 1004.4263690337257,
    "height": 811.7188223885136,
    "content": "### Setting Up a Workflow for \"AI-Powered Children's English Storytelling on Telegram\"\n\nIn this guide, we will walk you through the process of setting up a workflow to create and share captivating children's stories using the provided configuration. Let's dive into the steps required to bring these imaginative tales to life on your Telegram channel:\n\n#### Steps to Setup the Workflow:\n1. **Import the Workflow:**\n - Copy the provided workflow JSON configuration.\n - In your n8n instance, go to Workflows and select \"Import from JSON.\"\n - Paste the configuration and import the workflow.\n\n2. **Configure Node Credentials:**\n - For nodes requiring API credentials (OpenAI and Telegram), create credentials with the appropriate API keys or tokens.\n\n3. **Set Node Parameters:**\n - Modify node parameters as needed, such as chat IDs, prompts, and intervals.\n - Change the chatId in Config node to the ID of the chat you want the story to be posted.\n\n4. **Ensure Data Flow:**\n - Check the connections between nodes to ensure a smooth flow of data and actions.\n\n5. **Execute Once:**\n - Activate the \"executeOnce\" option in nodes where necessary to trigger actions only once during setup.\n\n6. **Test the Workflow:**\n - Run the workflow to verify that each node functions correctly and data is processed as expected.\n\n7. **Enable Recurring Triggers:**\n - Confirm that the Schedule Trigger node is set to trigger the workflow at the desired interval (every 12 hours).\n\n8. **Initiate Workflow:**\n - Once everything is configured correctly, activate the workflow to start generating and sharing children's stories on Telegram.\n\nBy following these steps meticulously, you can seamlessly establish and operate the workflow designed to create captivating children's stories for your audience. Embrace the power of automation to inspire young minds and foster a love for storytelling through engaging narratives shared on Telegram.\n"
  },
  "typeVersion": 1
}

================ Node #4465 ================
{
  "id": "b550e4ff-167d-4b12-8dff-0511a435cd7c",
  "name": "Create a Prompt for DALL-E",
  "type": "@n8n/n8n-nodes-langchain.chainSummarization",
  "position": [
    1500,
    1280
  ],
  "parameters": {
    "options": {
      "summarizationMethodAndPrompts": {
        "values": {
          "prompt": "Summarize the characters in this story based on their appearance and describe them if they are humans or animals and how they look like and what kind of are they, the prompt should be no-text in the picture, make sure the text is free from any prohibited or inappropriate content:\n\n\n\n\"{text}\"\n\n\nCONCISE SUMMARY:",
          "summarizationMethod": "stuff"
        }
      }
    }
  },
  "typeVersion": 2
}

================ Node #4466 ================
{
  "id": "024a3615-9e90-4e47-81e3-21febfc2f0c9",
  "name": "Sticky Note1",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    380,
    240
  ],
  "parameters": {
    "width": 611.6882702103559,
    "height": 651.7145525871413,
    "content": "### Use Case for Setting Up a Workflow for Children's Stories\n\nCheck this example: [https://t.me/st0ries95](https://t.me/st0ries95)\n\n\nThe workflow for children's stories serves as a valuable tool for content creators, educators, and parents looking to engage children with imaginative and educational storytelling. Here are some key use cases for this workflow:\n\n1. **Content Creation:** The workflow streamlines the process of creating captivating children's stories by providing a structured framework and automation for story generation, audio creation, and image production.\n\n2. **Educational Resources:** Teachers can use this workflow to develop educational materials that incorporate storytelling to make learning more engaging and interactive for students.\n\n3. **Parental Engagement:** Parents can utilize the workflow to share personalized stories with their children, fostering a love for reading and creativity while bonding over shared storytelling experiences.\n\n4. **Community Building:** Organizations and community groups can leverage the workflow to create and share children's stories as a way to connect with their audience and promote literacy and creativity.\n\n5. **Inspiring Young Minds:** By automating the process of creating and sharing enchanting children's stories, this workflow aims to inspire young minds, spark imagination, and instill a passion for storytelling in children.\n\nOverall, the use case for this workflow extends to various settings where storytelling plays a significant role in engaging, educating, and entertaining children, making it a versatile tool for enhancing the storytelling experience.\n"
  },
  "typeVersion": 1
}

================ Node #4467 ================
{
  "id": "11bfff09-33c6-48ab-b9e6-2e5349a87ca5",
  "name": "Recursive Character Text Splitter",
  "type": "@n8n/n8n-nodes-langchain.textSplitterRecursiveCharacterTextSplitter",
  "position": [
    1160,
    1260
  ],
  "parameters": {
    "options": {},
    "chunkSize": 500,
    "chunkOverlap": 300
  },
  "typeVersion": 1
}

================ Node #4468 ================
{
  "id": "9da21054-961e-4b7a-973e-1c180571ce92",
  "name": "Create a story",
  "type": "@n8n/n8n-nodes-langchain.chainSummarization",
  "position": [
    1080,
    1060
  ],
  "parameters": {
    "options": {
      "summarizationMethodAndPrompts": {
        "values": {
          "prompt": "Create a captivating short tale for kids, whisking them away to magical lands brimming with wisdom. Explore diverse themes in a fun and simple way, weaving in valuable messages. Dive into cultural adventures with lively language that sparks curiosity. Let your story inspire young minds through enchanting narratives that linger long after the last word. Begin crafting your imaginative tale now! (Approximately 900 characters)\n\n\n\"{text}\"\n\nCONCISE SUMMARY:",
          "summarizationMethod": "stuff"
        }
      }
    },
    "chunkingMode": "advanced"
  },
  "executeOnce": true,
  "typeVersion": 2
}

================ Node #4469 ================
{
  "id": "35579446-e11c-416b-b34a-b31e8461a1b3",
  "name": "Generate Audio for the story",
  "type": "@n8n/n8n-nodes-langchain.openAi",
  "position": [
    1520,
    1060
  ],
  "parameters": {
    "input": "={{ $json.response.text }}",
    "options": {},
    "resource": "audio"
  },
  "credentials": {
    "openAiApi": {
      "id": "kDo5LhPmHS2WQE0b",
      "name": "OpenAi account"
    }
  },
  "executeOnce": true,
  "typeVersion": 1.3
}

================ Node #4470 ================
{
  "id": "453d149f-a2a7-4fc9-ba3b-85b42df1c29b",
  "name": "Generate a Picture for the story",
  "type": "@n8n/n8n-nodes-langchain.openAi",
  "position": [
    1840,
    1280
  ],
  "parameters": {
    "prompt": "=Produce an image ensuring that no text is generated within the visual content. {{ $json.response.text }}",
    "options": {},
    "resource": "image"
  },
  "credentials": {
    "openAiApi": {
      "id": "kDo5LhPmHS2WQE0b",
      "name": "OpenAi account"
    }
  },
  "typeVersion": 1.3
}

================ Node #4471 ================
{
  "id": "8f324f12-b21e-4d0c-b7fa-5e2f93ba08aa",
  "name": "Send Story Text",
  "type": "n8n-nodes-base.telegram",
  "position": [
    1520,
    840
  ],
  "parameters": {
    "text": "={{ $json.response.text }}",
    "chatId": "={{ $('Config').item.json.chatId }}",
    "additionalFields": {
      "appendAttribution": false
    }
  },
  "credentials": {
    "telegramApi": {
      "id": "k3RE6o9brmFRFE9p",
      "name": "Telegram account"
    }
  },
  "typeVersion": 1.1
}

================ Node #4472 ================
{
  "id": "51a08f75-1c34-48a0-86de-b47e435ef618",
  "name": "Send Audio for the story",
  "type": "n8n-nodes-base.telegram",
  "position": [
    1720,
    1060
  ],
  "parameters": {
    "chatId": "={{ $('Config').item.json.chatId }}",
    "operation": "sendAudio",
    "binaryData": true,
    "additionalFields": {
      "caption": "End of the Story for today ....."
    }
  },
  "credentials": {
    "telegramApi": {
      "id": "k3RE6o9brmFRFE9p",
      "name": "Telegram account"
    }
  },
  "typeVersion": 1.1
}

================ Node #4473 ================
{
  "id": "3f890a4d-26ea-452a-8ed5-917282e8b0d8",
  "name": "Send Story Picture",
  "type": "n8n-nodes-base.telegram",
  "position": [
    2020,
    1280
  ],
  "parameters": {
    "chatId": "={{ $('Config').item.json.chatId }}",
    "operation": "sendPhoto",
    "binaryData": true,
    "additionalFields": {}
  },
  "credentials": {
    "telegramApi": {
      "id": "k3RE6o9brmFRFE9p",
      "name": "Telegram account"
    }
  },
  "typeVersion": 1.1
}

================ Node #4474 ================
{
  "id": "1cbec52c-b545-45df-885f-57c287f81017",
  "name": "Config",
  "type": "n8n-nodes-base.set",
  "position": [
    880,
    1060
  ],
  "parameters": {
    "options": {},
    "assignments": {
      "assignments": [
        {
          "id": "327667cb-b5b0-4f6f-915c-544696ed8e5a",
          "name": "chatId",
          "type": "string",
          "value": "-4170994782"
        }
      ]
    }
  },
  "typeVersion": 3.3
}

================ Node #4475 ================
{
  "id": "a998289c-65da-49ea-ba8a-4b277d9e16f3",
  "name": "Telegram Trigger",
  "type": "n8n-nodes-base.telegramTrigger",
  "position": [
    1060,
    640
  ],
  "webhookId": "2901cde3-b35a-4b0b-a1ba-17a7d9f80125",
  "parameters": {
    "updates": [
      "message",
      "*"
    ],
    "additionalFields": {}
  },
  "credentials": {
    "telegramApi": {
      "id": "pbbCqv0hRu9TDmWm",
      "name": "Telegram account"
    }
  },
  "typeVersion": 1.1
}

================ Node #4476 ================
{
  "id": "7f50072a-5312-4a47-823e-0513cd9d383a",
  "name": "OpenAI",
  "type": "@n8n/n8n-nodes-langchain.openAi",
  "position": [
    1380,
    640
  ],
  "parameters": {
    "prompt": "={{ $json.message.text }}",
    "options": {},
    "resource": "image"
  },
  "credentials": {
    "openAiApi": {
      "id": "p4Qrsjiuev2epBzW",
      "name": "OpenAi account"
    }
  },
  "typeVersion": 1.3
}

================ Node #4477 ================
{
  "id": "a59264d6-c199-4d7b-ade4-1e31f10eb632",
  "name": "Telegram",
  "type": "n8n-nodes-base.telegram",
  "position": [
    1580,
    1000
  ],
  "parameters": {
    "chatId": "={{ $json.data[1].message.from.id }}",
    "operation": "sendPhoto",
    "binaryData": true,
    "additionalFields": {}
  },
  "credentials": {
    "telegramApi": {
      "id": "pbbCqv0hRu9TDmWm",
      "name": "Telegram account"
    }
  },
  "typeVersion": 1.1
}

================ Node #4478 ================
{
  "id": "e0719c38-75ae-4082-91ba-d68c7cd28339",
  "name": "Merge",
  "type": "n8n-nodes-base.merge",
  "position": [
    1060,
    1000
  ],
  "parameters": {},
  "typeVersion": 2.1
}

================ Node #4479 ================
{
  "id": "bee14b74-248b-4e17-9221-378daff965aa",
  "name": "Aggregate",
  "type": "n8n-nodes-base.aggregate",
  "position": [
    1320,
    1000
  ],
  "parameters": {
    "options": {
      "includeBinaries": true
    },
    "aggregate": "aggregateAllItemData"
  },
  "typeVersion": 1
}

================ Node #4480 ================
{
  "id": "50293949-3dc0-4b35-a040-a3ad1a9e80d0",
  "name": "Sticky Note2",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    -60,
    479.3775380651615
  ],
  "parameters": {
    "width": 1036.6634532467683,
    "height": 671.0981521245417,
    "content": "\n# N8N Workflow: AI-Enhanced Image Processing and Communication\n\n## Description:\nThis n8n workflow integrates artificial intelligence to optimize image processing tasks and streamline communication via Telegram. Each node in the workflow provides specific benefits that contribute to enhancing user engagement and facilitating efficient communication.\n\n## Title:\nAI-Enhanced Image Processing and Communication Workflow with n8n\n\n## Node Names and Benefits:\n\n\n3. Set up the necessary credentials for the Telegram account and OpenAI API.\n4. Configure each node in the workflow to maximize its benefits and optimize user engagement.\n5. Run the workflow to leverage AI-enhanced image processing and communication capabilities for enhanced user interactions.\n6. Monitor the workflow execution for any errors or issues that may arise during processing.\n7. Customize the workflow nodes, parameters, or AI models to align with specific business objectives and user engagement strategies.\n8. Embrace the power of AI-driven image processing and interactive communication on Telegram to elevate user engagement and satisfaction levels.\n\n## Elevate your user engagement strategies with AI-powered image processing and seamless communication on Telegram using n8n!\n"
  },
  "typeVersion": 1
}

================ Node #4481 ================
{
  "id": "529fb39e-5140-41b2-8454-2a1c45d670d0",
  "name": "Sticky Note",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    1000,
    480
  ],
  "parameters": {
    "width": 276.16526553869744,
    "height": 296.62433647952383,
    "content": " **Telegram Trigger Node**:\n - Benefit: Initiates the workflow based on incoming messages from users on Telegram, enabling real-time interaction and communication."
  },
  "typeVersion": 1
}

================ Node #4482 ================
{
  "id": "339bc4ff-bca0-48ee-98ce-bbf7deb3f6fc",
  "name": "Sticky Note1",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    1320,
    480
  ],
  "parameters": {
    "width": 238.40710655577766,
    "height": 316.8446819098802,
    "content": " **OpenAI Node**:\n - Benefit: Utilizes AI algorithms to analyze text content of messages, generating intelligent responses and enhancing the quality of communication."
  },
  "typeVersion": 1
}

================ Node #4483 ================
{
  "id": "64216b05-5a6e-44f5-8cf1-86487368d892",
  "name": "Sticky Note3",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    1520,
    820
  ],
  "parameters": {
    "width": 229.95409290591755,
    "height": 332.7896020182219,
    "content": "**Telegram Node**:\n - Benefit: Sends processed data, including images and responses, back to users on Telegram, ensuring seamless communication and user engagement."
  },
  "typeVersion": 1
}

================ Node #4484 ================
{
  "id": "c15a57ee-f461-43d0-9232-b6d2728ee058",
  "name": "Sticky Note4",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    1260,
    820
  ],
  "parameters": {
    "height": 332.78960201822133,
    "content": "**Merge Node**:\n - Benefit: Combines and organizes processed data for efficient handling and integration, optimizing the workflow's data management capabilities."
  },
  "typeVersion": 1
}

================ Node #4485 ================
{
  "id": "f6f0aaac-426a-4923-9100-a52f53e78dec",
  "name": "Sticky Note5",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    1000,
    820
  ],
  "parameters": {
    "height": 326.33042266316727,
    "content": "**Aggregate Node**:\n - Benefit: Aggregates all item data, including binaries if specified, for comprehensive reporting and analysis, aiding in decision-making and performance evaluation.\n"
  },
  "typeVersion": 1
}

================ Node #4486 ================
{
  "id": "c36d8d68-0641-4e6d-92b1-82879d81e2c9",
  "name": "Sticky Note6",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    -80,
    460
  ],
  "parameters": {
    "color": 2,
    "width": 1837.5703604833238,
    "height": 706.8771853945606,
    "content": ""
  },
  "typeVersion": 1
}

================ Node #4487 ================
{
  "id": "f91fa0cf-ea01-4fc0-9ef2-754da399b7fb",
  "name": "Telegram Trigger",
  "type": "n8n-nodes-base.telegramTrigger",
  "position": [
    440,
    220
  ],
  "webhookId": "c537cfcc-6c4a-436a-8871-d32f8ce016cb",
  "parameters": {
    "updates": [
      "*"
    ],
    "additionalFields": {}
  },
  "credentials": {
    "telegramApi": {
      "id": "Ov00cT0t4h4AFtZ0",
      "name": "Telegram account"
    }
  },
  "typeVersion": 1
}

================ Node #4488 ================
{
  "id": "057ae05f-2c7d-48c5-a057-a6917a88971c",
  "name": "Sticky Note1",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    1240,
    0
  ],
  "parameters": {
    "width": 556.5162909529794,
    "height": 586.6978417266175,
    "content": "## Translation\n\n- Converts from speech to text.\n\n- Translates the language from the native language to translated language (as specified in settings node)\n\n"
  },
  "typeVersion": 1
}

================ Node #4489 ================
{
  "id": "c6947668-118e-4e23-bc55-1cdbce554a20",
  "name": "Text reply",
  "type": "n8n-nodes-base.telegram",
  "position": [
    2240,
    220
  ],
  "parameters": {
    "text": "={{ $json.text }}",
    "chatId": "={{ $('Telegram Trigger').item.json.message.chat.id }}",
    "additionalFields": {
      "parse_mode": "Markdown"
    }
  },
  "credentials": {
    "telegramApi": {
      "id": "Ov00cT0t4h4AFtZ0",
      "name": "Telegram account"
    }
  },
  "typeVersion": 1
}

================ Node #4490 ================
{
  "id": "93551aea-0213-420d-bf82-7669ab291dae",
  "name": "Telegram1",
  "type": "n8n-nodes-base.telegram",
  "position": [
    1060,
    220
  ],
  "parameters": {
    "fileId": "={{ $('Telegram Trigger').item.json.message.voice.file_id }}",
    "resource": "file"
  },
  "credentials": {
    "telegramApi": {
      "id": "Ov00cT0t4h4AFtZ0",
      "name": "Telegram account"
    }
  },
  "typeVersion": 1.1
}

================ Node #4491 ================
{
  "id": "972177e4-b0a4-424f-9ca6-6555ff3271d7",
  "name": "OpenAI Chat Model",
  "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
  "position": [
    1520,
    400
  ],
  "parameters": {
    "options": {}
  },
  "credentials": {
    "openAiApi": {
      "id": "fOF5kro9BJ6KMQ7n",
      "name": "OpenAi account"
    }
  },
  "typeVersion": 1
}

================ Node #4492 ================
{
  "id": "0e8f610f-03a7-4943-bd19-b3fb10c89519",
  "name": "Input Error Handling",
  "type": "n8n-nodes-base.set",
  "position": [
    860,
    220
  ],
  "parameters": {
    "fields": {
      "values": [
        {
          "name": "message.text",
          "stringValue": "={{ $json?.message?.text || \"\" }}"
        }
      ]
    },
    "options": {}
  },
  "typeVersion": 3.2
}

================ Node #4493 ================
{
  "id": "c8ab9e01-c9b5-4647-8008-9157ed97c4c3",
  "name": "Sticky Note",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    1920,
    0
  ],
  "parameters": {
    "width": 585.8688089385912,
    "height": 583.7625899280566,
    "content": "## Telegram output\n\n- Provide the output in both text as well as speech. \n\n- Many languages are supported including English,French, German, Spanish, Chinese, Japanese.\n\nFull list here:\nhttps://platform.openai.com/docs/guides/speech-to-text/supported-languages\n"
  },
  "typeVersion": 1
}

================ Node #4494 ================
{
  "id": "0898dc4d-c3ad-43df-871f-1896f673f631",
  "name": "Sticky Note2",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    -140,
    0
  ],
  "parameters": {
    "color": 4,
    "width": 489.00549958607303,
    "height": 573.4892086330929,
    "content": "## Multi-lingual AI Powered Universal Translator with Speech \u2b50\n\n### Key capabilities\nThis flow enables a Telegram bot that can \n- accept speech in one of 55 languages \n- translates to another language and returns result in speech\n\n### Use case:\n- Learning a new language\n- Communicate with others while traveling to another country\n\n### Setup\n- Open the Settings node and specify the languages you would like to work with"
  },
  "typeVersion": 1
}

================ Node #4495 ================
{
  "id": "ae0595d2-7e40-4c1e-a643-4b232220d19a",
  "name": "Settings",
  "type": "n8n-nodes-base.set",
  "position": [
    660,
    220
  ],
  "parameters": {
    "options": {},
    "assignments": {
      "assignments": [
        {
          "id": "501ac5cc-73e8-4e9c-bf91-df312aa9ff88",
          "name": "language_native",
          "type": "string",
          "value": "english"
        },
        {
          "id": "efb9a7b2-5baa-44cc-b94d-c8030f17e890",
          "name": "language_translate",
          "type": "string",
          "value": "french"
        }
      ]
    }
  },
  "typeVersion": 3.3
}

================ Node #4496 ================
{
  "id": "2d3654cf-a182-4916-a50c-a501828c2f6e",
  "name": "Auto-detect and translate",
  "type": "@n8n/n8n-nodes-langchain.chainLlm",
  "position": [
    1500,
    220
  ],
  "parameters": {
    "text": "=Detect the language of the text that follows. \n- If it is {{ $('Settings').item.json.language_native }} translate to {{ $('Settings').item.json.language_translate }}. \n- If it is in {{ $('Settings').item.json.language_translate }} translate to {{ $('Settings').item.json.language_native }} . \n- In the output just provide the translation and do not explain it. Just provide the translation without anything else.\n\nText:\n {{ $json.text }}\n",
    "promptType": "define"
  },
  "typeVersion": 1.4
}

================ Node #4497 ================
{
  "id": "a6e63516-4967-4e81-ba5b-58ad0ab21ee3",
  "name": "Audio reply",
  "type": "n8n-nodes-base.telegram",
  "position": [
    2240,
    400
  ],
  "parameters": {
    "chatId": "={{ $('Telegram Trigger').item.json.message.chat.id }}",
    "operation": "sendAudio",
    "binaryData": true,
    "additionalFields": {}
  },
  "credentials": {
    "telegramApi": {
      "id": "Ov00cT0t4h4AFtZ0",
      "name": "Telegram account"
    }
  },
  "typeVersion": 1.1
}

================ Node #4498 ================
{
  "id": "e4782117-03de-41d2-9208-390edc87fc08",
  "name": "OpenAI2",
  "type": "@n8n/n8n-nodes-langchain.openAi",
  "position": [
    1300,
    220
  ],
  "parameters": {
    "options": {},
    "resource": "audio",
    "operation": "transcribe"
  },
  "credentials": {
    "openAiApi": {
      "id": "fOF5kro9BJ6KMQ7n",
      "name": "OpenAi account"
    }
  },
  "typeVersion": 1.3
}

================ Node #4499 ================
{
  "id": "b29355f5-122c-4557-8215-28fdb523d221",
  "name": "OpenAI",
  "type": "@n8n/n8n-nodes-langchain.openAi",
  "position": [
    2020,
    400
  ],
  "parameters": {
    "input": "={{ $json.text }}",
    "options": {},
    "resource": "audio"
  },
  "credentials": {
    "openAiApi": {
      "id": "fOF5kro9BJ6KMQ7n",
      "name": "OpenAi account"
    }
  },
  "typeVersion": 1.3
}

================ Node #4500 ================
{
  "id": "fc64b8c8-3457-4a96-8321-094accb71c56",
  "name": "When clicking \"Test workflow\"",
  "type": "n8n-nodes-base.manualTrigger",
  "disabled": true,
  "position": [
    980,
    280
  ],
  "parameters": {},
  "typeVersion": 1
}