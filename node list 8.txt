================ Node #3501 ================
{
  "id": "b420310e-c0d5-4168-94ad-4c5973dfb3ab",
  "name": "Sticky Note2",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    1720,
    60
  ],
  "parameters": {
    "width": 215.49263552738452,
    "height": 324.4244486294891,
    "content": "## Select Base\nSelect the database and the table where the \"Routes\" are defined"
  },
  "typeVersion": 1
}

================ Node #3502 ================
{
  "id": "c917a3cb-d745-4f37-bd8f-0350c5aef473",
  "name": "Sticky Note3",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    840,
    140
  ],
  "parameters": {
    "color": 7,
    "width": 216.47293010628914,
    "height": 245.005504426549,
    "content": "The Gmail inbox is checked every minute for new entries"
  },
  "typeVersion": 1
}

================ Node #3503 ================
{
  "id": "9298ad5b-ae09-44c6-8da4-2d2bd473c3ea",
  "name": "Sticky Note4",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    1500,
    140
  ],
  "parameters": {
    "color": 7,
    "width": 216.47293010628914,
    "height": 245.005504426549,
    "content": "Extract the Airtable Row ID from the Email address"
  },
  "typeVersion": 1
}

================ Node #3504 ================
{
  "id": "654bbfbe-3e0f-40e0-a686-5081069d825e",
  "name": "Sticky Note5",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    1280,
    140
  ],
  "parameters": {
    "color": 7,
    "width": 216.47293010628914,
    "height": 245.005504426549,
    "content": "Filter by labels to prohibit double-processing"
  },
  "typeVersion": 1
}

================ Node #3505 ================
{
  "id": "31ade897-22de-4b39-8f96-37bc7b274bfb",
  "name": "Sticky Note6",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    2920,
    -120
  ],
  "parameters": {
    "color": 7,
    "width": 216.47293010628914,
    "height": 305.2192252594149,
    "content": "Dynamically build request body for Notion, since dynamic auth, and content with optional fields require a custom request"
  },
  "typeVersion": 1
}

================ Node #3506 ================
{
  "id": "26cf52ea-01d1-48ed-9d3d-71e4ff01983f",
  "name": "Sticky Note7",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    3140,
    -120
  ],
  "parameters": {
    "color": 7,
    "width": 216.47293010628914,
    "height": 304.5973623748489,
    "content": "The custom built request including the user specific authentication is sent to Notion to create a new Page inside of a database"
  },
  "typeVersion": 1
}

================ Node #3507 ================
{
  "id": "d765c84d-9e15-44c8-b975-2c366c315bfe",
  "name": "Sticky Note8",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    2160,
    -160
  ],
  "parameters": {
    "color": 7,
    "width": 755.8332895195936,
    "height": 529.1698390841688,
    "content": "The Email is processed in multiple ways:\n- An actionable task is being generated based on the content, consisting of a short title, a short description and optionally a few details as bullet points\n- A detailed Email summary is being generated\n- Meta data is being extracted - so the user has a reference to find the original Email again\n- To get more stable results, the tasks are devided between two Agents"
  },
  "typeVersion": 1
}

================ Node #3508 ================
{
  "id": "0103f8bc-2a43-455a-88da-b7317821f0b3",
  "name": "Sticky Note9",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    1940,
    -80
  ],
  "parameters": {
    "color": 7,
    "width": 216.47293010628914,
    "height": 249.09934448053562,
    "content": "Skip disabled routes (determined by a checkbox attribute in Airtable)"
  },
  "typeVersion": 1
}

================ Node #3509 ================
{
  "id": "1d2fe867-f3d1-4702-b35e-f730f20b7251",
  "name": "No Operation, do nothing",
  "type": "n8n-nodes-base.noOp",
  "position": [
    2000,
    420
  ],
  "parameters": {},
  "typeVersion": 1
}

================ Node #3510 ================
{
  "id": "758d1797-0e6c-40de-a6a4-e16f8350674c",
  "name": "Sticky Note10",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    3580,
    100
  ],
  "parameters": {
    "color": 7,
    "width": 216.47293010628914,
    "height": 503.00412949500975,
    "content": "Send custom Email notifications back to sender, containing an error message and suggestions to fix it"
  },
  "typeVersion": 1
}

================ Node #3511 ================
{
  "id": "56522a6d-c961-48a5-a5ef-33df96d77a22",
  "name": "Sticky Note11",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    3800,
    -60
  ],
  "parameters": {
    "color": 7,
    "width": 216.47293010628914,
    "height": 446.3164817463921,
    "content": "Add labels which prevent from double-processing"
  },
  "typeVersion": 1
}

================ Node #3512 ================
{
  "id": "5b81389b-49a6-4849-becf-35c4e680b734",
  "name": "Sticky Note12",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    3360,
    120
  ],
  "parameters": {
    "color": 7,
    "width": 216.47293010628914,
    "height": 261.3816681594028,
    "content": "Disable a checkbox attribute in Airtable which determines if a route is active"
  },
  "typeVersion": 1
}

================ Node #3513 ================
{
  "id": "6558328c-30cf-4f37-a0cb-d5f9f6efa7b2",
  "name": "Format Notion Page Blocks",
  "type": "n8n-nodes-base.code",
  "position": [
    2980,
    20
  ],
  "parameters": {
    "mode": "runOnceForEachItem",
    "jsCode": "function paragraph(content, annotations={}) {\n return {\n \"object\": \"block\",\n \"type\": \"paragraph\",\n \"paragraph\": {\n \"rich_text\": [\n {\n \"type\": \"text\",\n \"text\": {\n \"content\": content\n },\n \"annotations\": annotations\n }\n ]\n }\n };\n}\nfunction bulletPoint(content) {\n return {\n \"object\": \"block\",\n \"type\": \"bulleted_list_item\",\n \"bulleted_list_item\": {\n \"rich_text\": [\n {\n \"type\": \"text\",\n \"text\": {\n \"content\": content\n }\n }\n ]\n }\n };\n}\n\n// combine AI generated content\nconst content = Object.assign({}, $('Generate Actionable Task').item.json.output, $('Get Summary & Meta Data').item.json.output);\n\nblocks = [];\n\n// append task description\nblocks.push(paragraph(content.description));\n\nif (content.bulletpoints) {\n for (let bulletpoint of content.bulletpoints) {\n blocks.push(bulletPoint(bulletpoint));\n }\n}\n\n// append empty line\nblocks.push(paragraph(\"\"));\n\n// append devider\nblocks.push({\n \"object\": \"block\",\n \"type\": \"divider\",\n \"divider\": {}\n});\n\n// append summary & meta data\nblocks.push(paragraph(\"Email summary:\"));\nblocks.push(paragraph(content.summary));\nblocks.push(paragraph(\"\"));\nblocks.push(paragraph(content.meta.sender + \"\\n\" + content.meta.subject + \"\\n\" + content.meta.date, {\"italic\": true}));\n\n// build final object\noutput = {\n \"parent\": {\n \"database_id\": $('Get Route by ID').item.json.NotionDatabase.match(/https:\\/\\/www\\.notion\\.so\\/[a-zA-Z0-9-]+\\/([a-zA-Z0-9]{32})/)[1]\n },\n \"properties\": {\n \"Name\": {\n \"title\": [\n {\n \"text\": {\n \"content\": content.title\n }\n }\n ]\n }\n },\n \"children\": blocks\n};\n\nreturn { json: output };"
  },
  "typeVersion": 2
}

================ Node #3514 ================
{
  "id": "133e3498-10ce-4a08-aa50-3c7d56f1b9c8",
  "name": "Get all labels",
  "type": "n8n-nodes-base.gmail",
  "position": [
    1140,
    600
  ],
  "parameters": {
    "resource": "label",
    "returnAll": true
  },
  "credentials": {
    "gmailOAuth2": {
      "id": "9LLNsPzyDJlQFgdw",
      "name": "Gmail (mails2notion)"
    }
  },
  "typeVersion": 2.1
}

================ Node #3515 ================
{
  "id": "f68e66e1-9f84-498a-bfc4-f7c5b2ca42b1",
  "name": "Structured Output Parser1",
  "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
  "position": [
    2440,
    240
  ],
  "parameters": {
    "jsonSchemaExample": "{\n \"title\": \"Title\",\n \"description\": \"Text\",\n \"bulletpoints\": [\n \"Text\",\n \"Text\"\n ]\n}"
  },
  "typeVersion": 1.2
}

================ Node #3516 ================
{
  "id": "c55a3e9b-5637-4775-a0a6-ea11f1bd26a7",
  "name": "Calculator1",
  "type": "@n8n/n8n-nodes-langchain.toolCalculator",
  "disabled": true,
  "position": [
    2320,
    240
  ],
  "parameters": {},
  "typeVersion": 1
}

================ Node #3517 ================
{
  "id": "4d4f7b04-5431-47d2-b9b1-ee2c516e729c",
  "name": "OpenAI Chat Model1",
  "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
  "position": [
    2180,
    240
  ],
  "parameters": {
    "model": "gpt-4o",
    "options": {
      "temperature": 0,
      "responseFormat": "json_object"
    }
  },
  "credentials": {
    "openAiApi": {
      "id": "mrgqM64cM1L88xC6",
      "name": "octionicsolutions@gmail.com"
    }
  },
  "typeVersion": 1
}

================ Node #3518 ================
{
  "id": "ea081c31-2721-4e6c-820a-2f0da33495ac",
  "name": "Generate Actionable Task",
  "type": "@n8n/n8n-nodes-langchain.agent",
  "position": [
    2220,
    20
  ],
  "parameters": {
    "text": "={{ $('Gmail Trigger').item.json.text }}",
    "options": {
      "systemMessage": "Your task is to understand the Email content and extract one actionable task. If there is no obvious actionable task, then just create a title which implies to take a look at this Email by addressing the content summarized to 5 words. The title should be quite decided. This attribute is called title.\n\nCreate a proper description for the task. Be precise but detailed. Start with a short sentence and if it is worth adding more information, add bulletpoints after that containing additional information which help to understand the context of the task better, like links and other references, or just more detailed instructions. Add the description to the output as attribute output. Add the bulletpoints to the output as attribute output, but remember, bullet points are optional.\n\nReturn all attributes in a JSON format."
    },
    "promptType": "define",
    "hasOutputParser": true
  },
  "typeVersion": 1.6
}

================ Node #3519 ================
{
  "id": "6fb2d964-dc0b-45d9-8307-6da16fba769e",
  "name": "Get Summary & Meta Data",
  "type": "@n8n/n8n-nodes-langchain.agent",
  "position": [
    2600,
    20
  ],
  "parameters": {
    "text": "={{ $('Gmail Trigger').item.json.text }}",
    "options": {
      "systemMessage": "Summarize the email (as much detail as possible) and add it to the output as the attribute summary.\n\nExtract the email sender, subject and date of receipt. If this is a forwarded email, then get this data from the original message, otherwise use the meta data of this Email. Format the Email Adress as follows, and add it to the JSON output as the attribute meta.sender: \"From: Full Name <mail@example.com\". Format the the subject as follows and add it to the output as attribute meta.subject: \"Subject: SubjectGoesHere\". Format the the date as follows and add it to the output as attribute meta.date: \"Date: DateStringGoesHere\" (Date format: RFC 2822).\n\nReturn all attributes in a JSON format."
    },
    "promptType": "define",
    "hasOutputParser": true
  },
  "typeVersion": 1.6
}

================ Node #3520 ================
{
  "id": "2ce91ec6-0a8c-438a-8a18-216001c9ee07",
  "name": "Sticky Note",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    380,
    240
  ],
  "parameters": {
    "width": 407.6388140161723,
    "height": 490.24769122000794,
    "content": "## This is a POST Webhook endpoint\n\nMake sure to configure this webhook using a https:// wraper and dont use the default http://localhost:5678 as that will not be recognized by your slack webhook\n\n\nOnce the data has been sent to your webhook, the next step will be passing it via an AI Agent to process data based on the queries we pass to our agent.\n\nTo have some sort of a memory, be sure to set the slack token to the memory node. This way you can refer to other chats from the history.\n\nThe final message is relayed back to slack as a new message. Since we can not wait longer than 3000 ms for slack response, we will create anew message with reference to the input we passed.\n\nWe can advance this using the tools or data sources for it to be more custom tailored for your company.\n"
  },
  "typeVersion": 1
}

================ Node #3521 ================
{
  "id": "7a0c84a8-90ef-4de8-b120-700c94c35a51",
  "name": "Sticky Note2",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    1180,
    560
  ],
  "parameters": {
    "color": 4,
    "width": 221.73584905660368,
    "height": 233,
    "content": "### Conversation history is stored in memory using the body token as the chatsession id"
  },
  "typeVersion": 1
}

================ Node #3522 ================
{
  "id": "9b843e0e-42a6-4125-8c59-a7d5620a15f7",
  "name": "Sticky Note3",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    942.5229110512129,
    560
  ],
  "parameters": {
    "color": 4,
    "width": 217.47708894878716,
    "height": 233,
    "content": "### The chat LLM to process the prompt. Use any AI model here"
  },
  "typeVersion": 1
}

================ Node #3523 ================
{
  "id": "4efa968f-ebf5-42ec-80d3-907ef2622c61",
  "name": "Google Gemini Chat Model",
  "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
  "position": [
    1020,
    640
  ],
  "parameters": {
    "options": {},
    "modelName": "models/gemini-1.5-flash-latest"
  },
  "typeVersion": 1
}

================ Node #3524 ================
{
  "id": "fd1efd7c-7cd0-4edf-960e-19bd4567293e",
  "name": "Window Buffer Memory",
  "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
  "position": [
    1260,
    660
  ],
  "parameters": {
    "sessionKey": "={{ $('Webhook to receive message').item.json.body.token }}",
    "sessionIdType": "customKey",
    "contextWindowLength": 10
  },
  "typeVersion": 1.2
}

================ Node #3525 ================
{
  "id": "60d1eb77-492d-4a18-8cec-fa3f6ef8d707",
  "name": "Sticky Note4",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    1467.5148247978436,
    260
  ],
  "parameters": {
    "color": 4,
    "width": 223.7196765498655,
    "height": 236.66152029520293,
    "content": "### Send the response from AI back to slack channel\n"
  },
  "typeVersion": 1
}

================ Node #3526 ================
{
  "id": "186069c0-5c79-4738-9924-de33998658bc",
  "name": "Sticky Note1",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    840,
    180
  ],
  "parameters": {
    "color": 4,
    "width": 561.423180592992,
    "height": 340.09703504043114,
    "content": "## Receive a POST webhook, process data and return response"
  },
  "typeVersion": 1
}

================ Node #3527 ================
{
  "id": "2bfce117-a769-46e1-a028-ed0c7ba62653",
  "name": "Send response back to slack channel",
  "type": "n8n-nodes-base.slack",
  "position": [
    1540,
    320
  ],
  "parameters": {
    "text": "={{ $('Webhook to receive message').item.json.body.user_name }}: {{ $('Webhook to receive message').item.json.body.text }}\n\nEffibotics Bot: {{ $json.output.removeMarkdown() }} ",
    "select": "channel",
    "channelId": {
      "__rl": true,
      "mode": "id",
      "value": "={{ $('Webhook to receive message').item.json.body.channel_id }}"
    },
    "otherOptions": {
      "mrkdwn": true,
      "sendAsUser": "Effibotics Bot",
      "includeLinkToWorkflow": false
    }
  },
  "typeVersion": 2.1
}

================ Node #3528 ================
{
  "id": "cfcf2bbc-8ed5-4a9f-8f35-cf2715686ebe",
  "name": "Webhook to receive message",
  "type": "n8n-nodes-base.webhook",
  "position": [
    880,
    320
  ],
  "webhookId": "28b84545-96aa-42f5-990b-aa8783a320ca",
  "parameters": {
    "path": "slack-bot",
    "options": {
      "responseData": ""
    },
    "httpMethod": "POST"
  },
  "typeVersion": 1
}

================ Node #3529 ================
{
  "id": "dc93e588-fc0b-4561-88a5-e1cccd48323f",
  "name": "Agent",
  "type": "@n8n/n8n-nodes-langchain.agent",
  "position": [
    1100,
    320
  ],
  "parameters": {
    "text": "={{ $json.body.text }}",
    "options": {
      "systemMessage": "You are Effibotics AI personal assistant. Your task will be to provide helpful assistance and advice related to automation and such tasks. "
    }
  },
  "typeVersion": 1
}

================ Node #3530 ================
{
  "id": "f55b3110-f960-4d89-afba-d47bc58102eb",
  "name": "Twilio Trigger",
  "type": "n8n-nodes-base.twilioTrigger",
  "position": [
    100,
    180
  ],
  "webhookId": "bfc8f587-8183-46f8-9e76-3576caddf8c0",
  "parameters": {
    "updates": [
      "com.twilio.messaging.inbound-message.received"
    ]
  },
  "credentials": {
    "twilioApi": {
      "id": "TJv4H4lXxPCLZT50",
      "name": "Twilio account"
    }
  },
  "typeVersion": 1
}

================ Node #3531 ================
{
  "id": "8472f5b0-329f-45ac-b35f-c42558daa7c7",
  "name": "OpenAI Chat Model1",
  "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
  "position": [
    1140,
    1360
  ],
  "parameters": {
    "options": {}
  },
  "credentials": {
    "openAiApi": {
      "id": "8gccIjcuf3gvaoEr",
      "name": "OpenAi account"
    }
  },
  "typeVersion": 1
}

================ Node #3532 ================
{
  "id": "4b3e8a26-c808-46e5-bbcf-2e1279989a0b",
  "name": "Find Follow-Up Candidates",
  "type": "n8n-nodes-base.airtable",
  "position": [
    720,
    1240
  ],
  "parameters": {
    "base": {
      "__rl": true,
      "mode": "list",
      "value": "appO2nHiT9XPuGrjN",
      "cachedResultUrl": "https://airtable.com/appO2nHiT9XPuGrjN",
      "cachedResultName": "Twilio-Scheduling-Agent"
    },
    "table": {
      "__rl": true,
      "mode": "list",
      "value": "tblokH7uw63RpIlQ0",
      "cachedResultUrl": "https://airtable.com/appO2nHiT9XPuGrjN/tblokH7uw63RpIlQ0",
      "cachedResultName": "Lead Tracker"
    },
    "options": {},
    "operation": "search",
    "filterByFormula": "=AND(\n {appointment_id} = '',\n {status} != 'STOP',\n {followup_count} < 3,\n DATETIME_DIFF(TODAY(), {last_followup_at}, 'days') >= 3\n)"
  },
  "credentials": {
    "airtableTokenApi": {
      "id": "Und0frCQ6SNVX3VV",
      "name": "Airtable Personal Access Token account"
    }
  },
  "typeVersion": 2.1
}

================ Node #3533 ================
{
  "id": "04dc979c-ad36-4e57-93d4-905929fe1af0",
  "name": "Send Follow Up Message",
  "type": "n8n-nodes-base.twilio",
  "position": [
    1880,
    1240
  ],
  "parameters": {
    "to": "={{ $('Find Follow-Up Candidates').item.json.session_id }}",
    "from": "={{ $('Find Follow-Up Candidates').item.json.twilio_service_number }}",
    "message": "={{ $('Generate Follow Up Message').item.json.text }}\nReply STOP to stop recieving these messages.",
    "options": {}
  },
  "credentials": {
    "twilioApi": {
      "id": "TJv4H4lXxPCLZT50",
      "name": "Twilio account"
    }
  },
  "typeVersion": 1
}

================ Node #3534 ================
{
  "id": "55e222af-fb59-4ffd-9661-350b1972e802",
  "name": "Sticky Note",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    570,
    943
  ],
  "parameters": {
    "color": 7,
    "width": 408.6631332343324,
    "height": 515.2449997772154,
    "content": "## Step 6. Filter Open Enquiries from Airtable\n\n### \ud83d\udca1Criteria For Follow Up Candidates\n* No Scheduled Appointment\n* No Request to STOP\n* No Previous Follow-up in Past 3 days\n* Follow-up is less than 3 times"
  },
  "typeVersion": 1
}

================ Node #3535 ================
{
  "id": "50d0c632-233b-4b31-b396-3fa603aecd03",
  "name": "Update Follow-Up Count and Date",
  "type": "n8n-nodes-base.airtable",
  "position": [
    1700,
    1240
  ],
  "parameters": {
    "base": {
      "__rl": true,
      "mode": "list",
      "value": "appO2nHiT9XPuGrjN",
      "cachedResultUrl": "https://airtable.com/appO2nHiT9XPuGrjN",
      "cachedResultName": "Twilio-Scheduling-Agent"
    },
    "table": {
      "__rl": true,
      "mode": "list",
      "value": "tblokH7uw63RpIlQ0",
      "cachedResultUrl": "https://airtable.com/appO2nHiT9XPuGrjN/tblokH7uw63RpIlQ0",
      "cachedResultName": "Lead Tracker"
    },
    "columns": {
      "value": {
        "session_id": "={{ $('Find Follow-Up Candidates').item.json.session_id }}",
        "followup_count": "={{ ($('Find Follow-Up Candidates').item.json.followup_count ?? 0) + 1 }}",
        "last_followup_at": "={{ $now.toISO() }}"
      },
      "schema": [
        {
          "id": "id",
          "type": "string",
          "display": true,
          "removed": true,
          "readOnly": true,
          "required": false,
          "displayName": "id",
          "defaultMatch": true
        },
        {
          "id": "session_id",
          "type": "string",
          "display": true,
          "removed": false,
          "readOnly": false,
          "required": false,
          "displayName": "session_id",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "status",
          "type": "options",
          "display": true,
          "options": [
            {
              "name": "ACTIVE",
              "value": "ACTIVE"
            },
            {
              "name": "STOP",
              "value": "STOP"
            }
          ],
          "removed": true,
          "readOnly": false,
          "required": false,
          "displayName": "status",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "customer_name",
          "type": "string",
          "display": true,
          "removed": true,
          "readOnly": false,
          "required": false,
          "displayName": "customer_name",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "customer_summary",
          "type": "string",
          "display": true,
          "removed": true,
          "readOnly": false,
          "required": false,
          "displayName": "customer_summary",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "chat_messages",
          "type": "string",
          "display": true,
          "removed": true,
          "readOnly": false,
          "required": false,
          "displayName": "chat_messages",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "scheduled_at",
          "type": "dateTime",
          "display": true,
          "removed": true,
          "readOnly": false,
          "required": false,
          "displayName": "scheduled_at",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "appointment_id",
          "type": "string",
          "display": true,
          "removed": true,
          "readOnly": false,
          "required": false,
          "displayName": "appointment_id",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "last_message_at",
          "type": "dateTime",
          "display": true,
          "removed": true,
          "readOnly": false,
          "required": false,
          "displayName": "last_message_at",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "last_followup_at",
          "type": "dateTime",
          "display": true,
          "removed": false,
          "readOnly": false,
          "required": false,
          "displayName": "last_followup_at",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "followup_count",
          "type": "number",
          "display": true,
          "removed": false,
          "readOnly": false,
          "required": false,
          "displayName": "followup_count",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "assignee",
          "type": "string",
          "display": true,
          "removed": true,
          "readOnly": false,
          "required": false,
          "displayName": "assignee",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        }
      ],
      "mappingMode": "defineBelow",
      "matchingColumns": [
        "session_id"
      ]
    },
    "options": {},
    "operation": "update"
  },
  "credentials": {
    "airtableTokenApi": {
      "id": "Und0frCQ6SNVX3VV",
      "name": "Airtable Personal Access Token account"
    }
  },
  "typeVersion": 2.1
}

================ Node #3536 ================
{
  "id": "e1331352-c3da-4586-9d64-4be4dab49748",
  "name": "Create/Update Session",
  "type": "n8n-nodes-base.airtable",
  "position": [
    2240,
    269
  ],
  "parameters": {
    "base": {
      "__rl": true,
      "mode": "list",
      "value": "appO2nHiT9XPuGrjN",
      "cachedResultUrl": "https://airtable.com/appO2nHiT9XPuGrjN",
      "cachedResultName": "Twilio-Scheduling-Agent"
    },
    "table": {
      "__rl": true,
      "mode": "list",
      "value": "tblokH7uw63RpIlQ0",
      "cachedResultUrl": "https://airtable.com/appO2nHiT9XPuGrjN/tblokH7uw63RpIlQ0",
      "cachedResultName": "Lead Tracker"
    },
    "columns": {
      "value": {
        "session_id": "={{ $('Twilio Trigger').item.json.From }}",
        "scheduled_at": "={{\n$('Appointment Scheduling Agent').item.json.output.has_appointment_scheduled\n ? $('Appointment Scheduling Agent').item.json.output.appointment.scheduled_at\n : (\n $('Get Existing Chat Session').item.json.isNotEmpty()\n ? $('Get Existing Chat Session').item.json.scheduled_at\n : $now.toISO()\n )\n}}",
        "chat_messages": "={{\nJSON.stringify(\n ($('Get Existing Chat Session').item.json.chat_messages ? JSON.parse($('Get Existing Chat Session').item.json.chat_messages) : [])\n .concat(\n { \"role\": \"human\", \"message\": $('Twilio Trigger').item.json.Body },\n { \"role\": \"assistant\", \"message\": $('Appointment Scheduling Agent').item.json.output.reply }\n )\n)\n}}",
        "customer_name": "={{\n !$('Get Existing Chat Session').item.json.customer_name &&\n $('Appointment Scheduling Agent').item.json.output.customer_name\n ? $('Appointment Scheduling Agent').item.json.output.customer_name\n : ($('Get Existing Chat Session').item.json.customer_name ?? '')\n}}",
        "appointment_id": "={{\n$('Appointment Scheduling Agent').item.json.output.has_appointment_scheduled\n ? $('Appointment Scheduling Agent').item.json.output.appointment.appointment_id\n : (\n $('Get Existing Chat Session').item.json.isNotEmpty()\n ? $('Get Existing Chat Session').item.json.appointment_id\n : ''\n )\n}}",
        "followup_count": "={{\n !$('Get Existing Chat Session').item.json.followup_count\n ? 0\n : $('Get Existing Chat Session').item.json.followup_count\n}}",
        "last_message_at": "={{ $now.toISO() }}",
        "customer_summary": "={{\n !$('Get Existing Chat Session').item.json.appointment_id\n && $('Appointment Scheduling Agent').item.json.output.has_appointment_scheduled\n ? $json.output.enquiry_summary\n : $('Get Existing Chat Session').item.json.customer_summary\n}}",
        "last_followup_at": "={{\n !$('Get Existing Chat Session').item.json.last_followup_at\n ? $now.toISO()\n : $('Get Existing Chat Session').item.json.last_followup_at\n}}",
        "twilio_service_number": "={{ $('Twilio Trigger').item.json.To }}"
      },
      "schema": [
        {
          "id": "id",
          "type": "string",
          "display": true,
          "removed": true,
          "readOnly": true,
          "required": false,
          "displayName": "id",
          "defaultMatch": true
        },
        {
          "id": "session_id",
          "type": "string",
          "display": true,
          "removed": false,
          "readOnly": false,
          "required": false,
          "displayName": "session_id",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "status",
          "type": "options",
          "display": true,
          "options": [
            {
              "name": "ACTIVE",
              "value": "ACTIVE"
            },
            {
              "name": "STOP",
              "value": "STOP"
            }
          ],
          "removed": true,
          "readOnly": false,
          "required": false,
          "displayName": "status",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "customer_name",
          "type": "string",
          "display": true,
          "removed": false,
          "readOnly": false,
          "required": false,
          "displayName": "customer_name",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "customer_summary",
          "type": "string",
          "display": true,
          "removed": false,
          "readOnly": false,
          "required": false,
          "displayName": "customer_summary",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "chat_messages",
          "type": "string",
          "display": true,
          "removed": false,
          "readOnly": false,
          "required": false,
          "displayName": "chat_messages",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "scheduled_at",
          "type": "dateTime",
          "display": true,
          "removed": false,
          "readOnly": false,
          "required": false,
          "displayName": "scheduled_at",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "appointment_id",
          "type": "string",
          "display": true,
          "removed": false,
          "readOnly": false,
          "required": false,
          "displayName": "appointment_id",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "last_message_at",
          "type": "dateTime",
          "display": true,
          "removed": false,
          "readOnly": false,
          "required": false,
          "displayName": "last_message_at",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "last_followup_at",
          "type": "dateTime",
          "display": true,
          "removed": false,
          "readOnly": false,
          "required": false,
          "displayName": "last_followup_at",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "followup_count",
          "type": "number",
          "display": true,
          "removed": false,
          "readOnly": false,
          "required": false,
          "displayName": "followup_count",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "assignee",
          "type": "string",
          "display": true,
          "removed": true,
          "readOnly": false,
          "required": false,
          "displayName": "assignee",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "twilio_service_number",
          "type": "string",
          "display": true,
          "removed": false,
          "readOnly": false,
          "required": false,
          "displayName": "twilio_service_number",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        }
      ],
      "mappingMode": "defineBelow",
      "matchingColumns": [
        "session_id"
      ]
    },
    "options": {},
    "operation": "update"
  },
  "credentials": {
    "airtableTokenApi": {
      "id": "Und0frCQ6SNVX3VV",
      "name": "Airtable Personal Access Token account"
    }
  },
  "typeVersion": 2.1
}

================ Node #3537 ================
{
  "id": "de8eaa46-2fe8-4afd-a400-9c528f578d24",
  "name": "Get Existing Chat Session",
  "type": "n8n-nodes-base.airtable",
  "position": [
    740,
    240
  ],
  "parameters": {
    "base": {
      "__rl": true,
      "mode": "list",
      "value": "appO2nHiT9XPuGrjN",
      "cachedResultUrl": "https://airtable.com/appO2nHiT9XPuGrjN",
      "cachedResultName": "Twilio-Scheduling-Agent"
    },
    "limit": 1,
    "table": {
      "__rl": true,
      "mode": "list",
      "value": "tblokH7uw63RpIlQ0",
      "cachedResultUrl": "https://airtable.com/appO2nHiT9XPuGrjN/tblokH7uw63RpIlQ0",
      "cachedResultName": "Lead Tracker"
    },
    "options": {},
    "operation": "search",
    "returnAll": false,
    "filterByFormula": "={session_id}=\"{{ $('Twilio Trigger').item.json.From }}\""
  },
  "credentials": {
    "airtableTokenApi": {
      "id": "Und0frCQ6SNVX3VV",
      "name": "Airtable Personal Access Token account"
    }
  },
  "typeVersion": 2.1,
  "alwaysOutputData": true
}

================ Node #3538 ================
{
  "id": "16aabbf0-fdf7-4940-a3a3-962e0b877299",
  "name": "Every 24hrs",
  "type": "n8n-nodes-base.scheduleTrigger",
  "position": [
    220,
    1160
  ],
  "parameters": {
    "rule": {
      "interval": [
        {}
      ]
    }
  },
  "typeVersion": 1.2
}

================ Node #3539 ================
{
  "id": "9471b840-3a59-491d-a309-180d5a69fb7e",
  "name": "Send Reply",
  "type": "n8n-nodes-base.twilio",
  "position": [
    2420,
    269
  ],
  "parameters": {
    "to": "={{ $('Twilio Trigger').item.json.From }}",
    "from": "={{ $('Twilio Trigger').item.json.To }}",
    "message": "={{ $('Appointment Scheduling Agent').item.json.output.reply }}",
    "options": {}
  },
  "credentials": {
    "twilioApi": {
      "id": "TJv4H4lXxPCLZT50",
      "name": "Twilio account"
    }
  },
  "typeVersion": 1
}

================ Node #3540 ================
{
  "id": "601aa9ea-f3f4-49bd-a391-84e32c47f7ba",
  "name": "Send Confirmation",
  "type": "n8n-nodes-base.twilio",
  "position": [
    900,
    -280
  ],
  "parameters": {
    "to": "={{ $('Twilio Trigger').item.json.From }}",
    "from": "={{ $('Twilio Trigger').item.json.To }}",
    "message": "Thank you. You won't receive any more messages from us!",
    "options": {}
  },
  "credentials": {
    "twilioApi": {
      "id": "TJv4H4lXxPCLZT50",
      "name": "Twilio account"
    }
  },
  "typeVersion": 1
}

================ Node #3541 ================
{
  "id": "a8b9fffe-f814-4cb4-9e1a-bf7eb57e7afd",
  "name": "User Request STOP",
  "type": "n8n-nodes-base.airtable",
  "position": [
    660,
    -280
  ],
  "parameters": {
    "base": {
      "__rl": true,
      "mode": "list",
      "value": "appO2nHiT9XPuGrjN",
      "cachedResultUrl": "https://airtable.com/appO2nHiT9XPuGrjN",
      "cachedResultName": "Twilio-Scheduling-Agent"
    },
    "table": {
      "__rl": true,
      "mode": "list",
      "value": "tblokH7uw63RpIlQ0",
      "cachedResultUrl": "https://airtable.com/appO2nHiT9XPuGrjN/tblokH7uw63RpIlQ0",
      "cachedResultName": "Lead Tracker"
    },
    "columns": {
      "value": {
        "status": "STOP",
        "session_id": "={{ $('Twilio Trigger').item.json.From }}"
      },
      "schema": [
        {
          "id": "id",
          "type": "string",
          "display": true,
          "removed": true,
          "readOnly": true,
          "required": false,
          "displayName": "id",
          "defaultMatch": true
        },
        {
          "id": "session_id",
          "type": "string",
          "display": true,
          "removed": false,
          "readOnly": false,
          "required": false,
          "displayName": "session_id",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "status",
          "type": "options",
          "display": true,
          "options": [
            {
              "name": "ACTIVE",
              "value": "ACTIVE"
            },
            {
              "name": "STOP",
              "value": "STOP"
            }
          ],
          "removed": false,
          "readOnly": false,
          "required": false,
          "displayName": "status",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "chat_messages",
          "type": "string",
          "display": true,
          "removed": true,
          "readOnly": false,
          "required": false,
          "displayName": "chat_messages",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "scheduled_at",
          "type": "dateTime",
          "display": true,
          "removed": true,
          "readOnly": false,
          "required": false,
          "displayName": "scheduled_at",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "last_message_at",
          "type": "dateTime",
          "display": true,
          "removed": true,
          "readOnly": false,
          "required": false,
          "displayName": "last_message_at",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "last_followup_at",
          "type": "dateTime",
          "display": true,
          "removed": true,
          "readOnly": false,
          "required": false,
          "displayName": "last_followup_at",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "followup_count",
          "type": "number",
          "display": true,
          "removed": true,
          "readOnly": false,
          "required": false,
          "displayName": "followup_count",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "assignee",
          "type": "string",
          "display": true,
          "removed": true,
          "readOnly": false,
          "required": false,
          "displayName": "assignee",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        }
      ],
      "mappingMode": "defineBelow",
      "matchingColumns": [
        "session_id"
      ]
    },
    "options": {},
    "operation": "update"
  },
  "credentials": {
    "airtableTokenApi": {
      "id": "Und0frCQ6SNVX3VV",
      "name": "Airtable Personal Access Token account"
    }
  },
  "typeVersion": 2.1
}

================ Node #3542 ================
{
  "id": "3e7797f0-5449-404c-bac9-e0019223cea8",
  "name": "Check For Command Words",
  "type": "n8n-nodes-base.switch",
  "position": [
    295,
    180
  ],
  "parameters": {
    "rules": {
      "values": [
        {
          "outputKey": "STOP",
          "conditions": {
            "options": {
              "leftValue": "",
              "caseSensitive": true,
              "typeValidation": "strict"
            },
            "combinator": "and",
            "conditions": [
              {
                "operator": {
                  "type": "string",
                  "operation": "contains"
                },
                "leftValue": "={{ $json.Body }}",
                "rightValue": "STOP"
              }
            ]
          },
          "renameOutput": true
        }
      ]
    },
    "options": {
      "fallbackOutput": "extra"
    }
  },
  "typeVersion": 3
}

================ Node #3543 ================
{
  "id": "e636ebb5-16c6-43ef-9fee-fe2b9a8c95a9",
  "name": "Structured Output Parser",
  "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
  "position": [
    1960,
    560
  ],
  "parameters": {
    "jsonSchemaExample": "{\n \"reply\": \"\",\n \"customer_name\": \"\",\n \"enquiry_summary\": \"\",\n\t\"has_appointment_scheduled\": false,\n \"appointment\": {\n \"appointment_id\": \"\",\n \"scheduled_at\": \"\"\n }\n}"
  },
  "typeVersion": 1.2
}

================ Node #3544 ================
{
  "id": "3469740d-bd2f-4d34-a86b-59b088917d74",
  "name": "Auto-fixing Output Parser",
  "type": "@n8n/n8n-nodes-langchain.outputParserAutofixing",
  "position": [
    1820,
    440
  ],
  "parameters": {},
  "typeVersion": 1
}

================ Node #3545 ================
{
  "id": "fc0adfdf-724c-45d2-84f6-cb2b43254cc0",
  "name": "OpenAI Chat Model2",
  "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
  "position": [
    1840,
    560
  ],
  "parameters": {
    "options": {}
  },
  "credentials": {
    "openAiApi": {
      "id": "8gccIjcuf3gvaoEr",
      "name": "OpenAi account"
    }
  },
  "typeVersion": 1
}

================ Node #3546 ================
{
  "id": "0e0d8236-0f10-4f8f-88c1-bba2ef084e90",
  "name": "Sticky Note3",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    1080,
    -50.317404874203476
  ],
  "parameters": {
    "color": 7,
    "width": 1011.8938194478603,
    "height": 917.533068142247,
    "content": "## Step 3. Appointment Scheduling With AI\n[Learn about using AI Agents](https://docs.n8n.io/integrations/builtin/cluster-nodes/root-nodes/n8n-nodes-langchain.agent)\n\nUsing an AI Agent is a powerful way to simplify and enhance workflows using the latest in AI technology. Our appointment scheduling agent is equipped to converse with the customer and all the necessary tools to schedule, re-schedule and cancel appointments.\n\nUsing the **HTTP Tool** node, it's easy to connect to third party API services to perform actions. In this workflow, we're calling the Cal.com API to handle scheduling events."
  },
  "typeVersion": 1
}

================ Node #3547 ================
{
  "id": "380b437e-fa29-4ebb-bebd-1984d371bc93",
  "name": "Sticky Note4",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    549.8696404310444,
    -49.46972087742148
  ],
  "parameters": {
    "color": 7,
    "width": 504.0066355303578,
    "height": 557.8466102697549,
    "content": "## Step 2. Check for Existing Chat History\n[Read more about using Airtable](https://docs.n8n.io/integrations/builtin/app-nodes/n8n-nodes-base.airtable)\n\nWe're using Airtable for customer session management and to capture chat history. Airtable is an ideal choice because it acts as a persistent database with a flexible API which could prove essential for further extension.\n\nWe'll pull any previous chat history and pass this to our agent to continue the conversation."
  },
  "typeVersion": 1
}

================ Node #3548 ================
{
  "id": "f89762f5-8520-4af6-987d-a71381c603e3",
  "name": "Sticky Note5",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    0,
    -52.79744987055557
  ],
  "parameters": {
    "color": 7,
    "width": 523.6927529886705,
    "height": 479.4432905734608,
    "content": "## Step 1. Wait For Customer SMS\n[Read more about Twilio trigger](https://docs.n8n.io/integrations/builtin/trigger-nodes/n8n-nodes-base.twiliotrigger)\n\nFor this workflow, we'll use the twilio SMS trigger to receive enquiries from customers looking to book a PC or laptop repair.\n\nSince we'll be working with SMS, we'll have a check to see if the customer wishes to STOP any further follow-up messages. This is an optional step that we'll get to later."
  },
  "typeVersion": 1
}

================ Node #3549 ================
{
  "id": "de525648-ef11-4b48-85ea-c6e5463c87cf",
  "name": "Sticky Note6",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    540,
    -450.0217713292123
  ],
  "parameters": {
    "color": 7,
    "width": 563.7797724327219,
    "height": 358.6710117357418,
    "content": "## Step 9. Cancelling Follow-Up Messages \n\nIf the customer messages the bot with the word STOP, we'll update our customer record in Airtable which will prevent further follow-ups from being trigger. A confirmation message is sent after to the customer."
  },
  "typeVersion": 1
}

================ Node #3550 ================
{
  "id": "028e4253-d1e6-4cf8-b181-ba27b03fa66e",
  "name": "Sticky Note7",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    2120,
    -40
  ],
  "parameters": {
    "color": 7,
    "width": 521.5259177258192,
    "height": 558.7093446159199,
    "content": "## Step 4. Updating Airtable and Responding to the Customer \n[Read more about using Twilio](https://docs.n8n.io/integrations/builtin/app-nodes/n8n-nodes-base.twilio)\n\nOnce the agent formulates a response, we can update our appointment table accordingly ensuring the conversation at any stage is captured.\n\nIf no appointment is scheduled, we can move onto the second half of this workflow which covers following up with prospective customers and their enquiries."
  },
  "typeVersion": 1
}

================ Node #3551 ================
{
  "id": "f321ded9-c5d3-418d-bf1c-e29bf9845098",
  "name": "Sticky Note8",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    20,
    940
  ],
  "parameters": {
    "color": 7,
    "width": 509.931737588259,
    "height": 433.74984757777247,
    "content": "## Step 5. Following Up With Open Enquiries\n[Read more about using scheduled trigger](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.scheduletrigger)\n\nThe second half of this workflow deals with identifying customers who have engaged our chatbot but have not yet confirmed an appointment. We intend to send a follow-up message asking if the enquiry is still valid and encourage an appointment to be made with the customer."
  },
  "typeVersion": 1
}

================ Node #3552 ================
{
  "id": "4485e39a-3e84-49ee-9d3f-a271a98a330a",
  "name": "Sticky Note1",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    1000,
    940
  ],
  "parameters": {
    "color": 7,
    "width": 567.1169284476533,
    "height": 601.5572296901626,
    "content": "## Step 7. Generating a Follow-Up Message\n[Read more about Basic LLM Chain](https://docs.n8n.io/integrations/builtin/cluster-nodes/root-nodes/n8n-nodes-langchain.chainllm)\n\nWith our session and chat history retrieved from Airtable, we can simple ask our AI to generate a nicely worded follow-up message to re-engage the customer.\n\nWhere the logic is linear, the Basic LLM chain is suitable for many workflows. An agent is not always required!"
  },
  "typeVersion": 1
}

================ Node #3553 ================
{
  "id": "f2d66e44-cf18-4e8f-80d5-e8d03e10e5ff",
  "name": "Generate Follow Up Message",
  "type": "@n8n/n8n-nodes-langchain.chainLlm",
  "position": [
    1140,
    1200
  ],
  "parameters": {
    "text": "=",
    "messages": {
      "messageValues": [
        {
          "message": "=You are an appointment scheduling assistant for PC and Laptop Repairs for a company called \"PC Parts Ltd\". You shall refer to yourself as the \"service team\". You had a conversation with a customer on {{ $json.last_message_at }} but the enquiry did not end with an appointment being scheduled.\n{{ $json.last_followup_at ? `You last sent a follow-up message on ${$json.last_followup_at}` : '' }}.\n\nYou task is to ask if the prospective customer would like to continue with the enquiry using the following information gather to construct a relevant follow-up message. Try to entice the user to continue the conversation and ultimately schedule an appointment.\n\n## About the customer\nname: {{ $json.customer_name ?? '<unknown>' }}\nenquiry summary: {{ $json.customer_summary ?? '<uknown>' }}\n\n# Existing conversation\nHere are the chat logs of the existing conversation:\n{{ $json.chat_messages }}"
        }
      ]
    },
    "promptType": "define"
  },
  "typeVersion": 1.4
}

================ Node #3554 ================
{
  "id": "0b93a300-b9ab-4c28-8ac0-fddc49247b74",
  "name": "Sticky Note2",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    1600,
    940
  ],
  "parameters": {
    "color": 7,
    "width": 496.0833287715134,
    "height": 526.084030034264,
    "content": "## Step 8. Update Follow-Up Properties and Send Message\n[Read more about using Twilio](https://docs.n8n.io/integrations/builtin/app-nodes/n8n-nodes-base.twilio/)\n\nFinally, we'll update our follow-up activity as part of the customer record in Airtable. Keeping track of the number of times we follow-up helps prevent spamming the customer unnecessarily.\n\nThe follow-up message is sent via Twilio and includes instruction to disable further follow-up messages using the keyword STOP."
  },
  "typeVersion": 1
}

================ Node #3555 ================
{
  "id": "0e022485-9504-416a-8632-edd65df29bf4",
  "name": "Sticky Note9",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    -480,
    -80
  ],
  "parameters": {
    "width": 437.0019498737189,
    "height": 511.67220311821393,
    "content": "## Try It Out!\n\n### This workflow implements an appointment scheduling chatbot which is powered by an AI tools agent.\n* Workflow is triggered by Customer enquires sent via SMS\n* Customer session management and chat history are captured in Airtable to enable the SMS conversation.\n* An AI Agent is equipped to answer any questions as well as schedule, re-schedule and cancel appointments on behalf of the customer.\n* The agent's reply is sent back to the customer via SMS.\n* Additional a follow-up system is implemented to re-engage customers who haven't scheduled an appointment.\n\n \n### Need Help?\nJoin the [Discord](https://discord.com/invite/XPKeKXeB7d) or ask in the [Forum](https://community.n8n.io/)!\n\nHappy Hacking!"
  },
  "typeVersion": 1
}

================ Node #3556 ================
{
  "id": "04681629-0221-47fe-b992-0d5791995523",
  "name": "OpenAI Chat Model3",
  "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
  "position": [
    1120,
    420
  ],
  "parameters": {
    "model": "gpt-4o-mini",
    "options": {}
  },
  "credentials": {
    "openAiApi": {
      "id": "8gccIjcuf3gvaoEr",
      "name": "OpenAi account"
    }
  },
  "typeVersion": 1
}

================ Node #3557 ================
{
  "id": "7633e3b0-daf3-495d-bcd7-ce0db24a73b9",
  "name": "Get Availability",
  "type": "@n8n/n8n-nodes-langchain.toolHttpRequest",
  "position": [
    1260,
    440
  ],
  "parameters": {
    "url": "https://api.cal.com/v2/slots/available",
    "sendQuery": true,
    "authentication": "genericCredentialType",
    "genericAuthType": "httpHeaderAuth",
    "parametersQuery": {
      "values": [
        {
          "name": "eventTypeId",
          "value": "={{ 648297 }}",
          "valueProvider": "fieldValue"
        },
        {
          "name": "startTime",
          "value": "{startTime}",
          "valueProvider": "fieldValue"
        },
        {
          "name": "endTime",
          "value": "{endTime}",
          "valueProvider": "fieldValue"
        }
      ]
    },
    "toolDescription": "Call this tool to get the appointment availability. Dates can be variable but times are fixed - startTime must always be 9am and endTime must be 7pm. Strictly use ISO format for dates eg. \"2024-01-01T09:00:00-00:00\". Input schema example: ```{ \"startTime\": \"...\", \"endTime\": \"...\"}```",
    "placeholderDefinitions": {
      "values": [
        {
          "name": "startTime",
          "type": "string",
          "description": "start of daterange in ISO format. eg. 2024-01-01T09:00:00-00:00"
        },
        {
          "name": "endTime",
          "type": "string",
          "description": "end of daterange in ISO format. eg. 2024-01-01T09:00:00-00:00"
        }
      ]
    }
  },
  "credentials": {
    "calApi": {
      "id": "GPSKPrBhO3Pq6KVF",
      "name": "Cal account"
    },
    "httpHeaderAuth": {
      "id": "X2Vr2TQSBcOsOMst",
      "name": "Cal.com API v2"
    }
  },
  "typeVersion": 1
}

================ Node #3558 ================
{
  "id": "0f814d08-218e-492e-b1f8-63985d583e80",
  "name": "Get Existing Booking",
  "type": "@n8n/n8n-nodes-langchain.toolHttpRequest",
  "position": [
    1560,
    440
  ],
  "parameters": {
    "url": "https://api.cal.com/v2/bookings/{bookingUid}",
    "sendHeaders": true,
    "authentication": "predefinedCredentialType",
    "toolDescription": "Call this tool to get an existing booking using a booking \"uid\".",
    "parametersHeaders": {
      "values": [
        {
          "name": "cal-api-version",
          "value": "2024-08-13",
          "valueProvider": "fieldValue"
        }
      ]
    },
    "nodeCredentialType": "calApi",
    "placeholderDefinitions": {
      "values": [
        {
          "name": "bookingUid",
          "type": "string",
          "description": "the uid of the booking (note: this is not the same as the id of the booking)"
        }
      ]
    }
  },
  "credentials": {
    "calApi": {
      "id": "GPSKPrBhO3Pq6KVF",
      "name": "Cal account"
    }
  },
  "typeVersion": 1
}

================ Node #3559 ================
{
  "id": "36a5a2a7-bb78-4091-8b25-5e9f49628542",
  "name": "Find Existing Booking",
  "type": "@n8n/n8n-nodes-langchain.toolHttpRequest",
  "position": [
    1700,
    440
  ],
  "parameters": {
    "url": "https://api.cal.com/v2/bookings",
    "jsonQuery": "{\n \"status\": \"upcoming\",\n \"attendeeEmail\": \"{attendee_email}\",\n \"afterStart\": \"{date}\"\n}",
    "sendQuery": true,
    "sendHeaders": true,
    "specifyQuery": "json",
    "authentication": "genericCredentialType",
    "genericAuthType": "httpHeaderAuth",
    "toolDescription": "Call this tool to search for an existing bookings with the user's email address and date. Use the \"uid\" field in the results as the primary booking identifier, ignore the \"id\" field.",
    "parametersHeaders": {
      "values": [
        {
          "name": "cal-api-version",
          "value": "2024-08-13",
          "valueProvider": "fieldValue"
        }
      ]
    },
    "placeholderDefinitions": {
      "values": [
        {
          "name": "attendee_email",
          "type": "string",
          "description": "email address of attendee"
        },
        {
          "name": "date",
          "description": "Filter bookings with start after this date string. The time is always fixed at 9am."
        }
      ]
    }
  },
  "credentials": {
    "calApi": {
      "id": "GPSKPrBhO3Pq6KVF",
      "name": "Cal account"
    },
    "httpHeaderAuth": {
      "id": "X2Vr2TQSBcOsOMst",
      "name": "Cal.com API v2"
    }
  },
  "typeVersion": 1
}

================ Node #3560 ================
{
  "id": "88ee279d-ed85-4dc6-b42a-5e1e50f3d708",
  "name": "Reschedule Booking",
  "type": "@n8n/n8n-nodes-langchain.toolHttpRequest",
  "position": [
    1560,
    620
  ],
  "parameters": {
    "url": "https://api.cal.com/v2/bookings/{bookingUid}/reschedule",
    "method": "POST",
    "jsonBody": "{\n \"start\": \"{start}\",\n \"reschedulingReason\": \"{reschedulingReason}\"\n}",
    "sendBody": true,
    "sendHeaders": true,
    "specifyBody": "json",
    "authentication": "genericCredentialType",
    "genericAuthType": "httpHeaderAuth",
    "toolDescription": "Call this tool to reschedule a user's booking using a booking \"uid\".",
    "parametersHeaders": {
      "values": [
        {
          "name": "cal-api-version",
          "value": "2024-08-13",
          "valueProvider": "fieldValue"
        }
      ]
    },
    "placeholderDefinitions": {
      "values": [
        {
          "name": "bookingUid",
          "type": "string",
          "description": "the uid of the booking. Note this is not the same as the id of the booking."
        },
        {
          "name": "start",
          "type": "string",
          "description": "start datetime of the appointment, for example: \"2024-05-30T12:00:00.000Z\""
        },
        {
          "name": "reschedulingReason",
          "type": "string",
          "description": "Reason for rescheduling the booking. If not given, value is \"Declined to give reason.\""
        }
      ]
    }
  },
  "credentials": {
    "calApi": {
      "id": "GPSKPrBhO3Pq6KVF",
      "name": "Cal account"
    },
    "httpHeaderAuth": {
      "id": "X2Vr2TQSBcOsOMst",
      "name": "Cal.com API v2"
    }
  },
  "typeVersion": 1
}

================ Node #3561 ================
{
  "id": "ee30c793-d8f4-4e49-9bd1-70e5ac109b68",
  "name": "Cancel Booking",
  "type": "@n8n/n8n-nodes-langchain.toolHttpRequest",
  "position": [
    1700,
    620
  ],
  "parameters": {
    "url": "https://api.cal.com/v2/bookings/{bookingUid}/cancel",
    "method": "POST",
    "jsonBody": "{\n \"cancellationReason\": \"{cancellationReason}\"\n}",
    "sendBody": true,
    "sendHeaders": true,
    "specifyBody": "json",
    "authentication": "genericCredentialType",
    "genericAuthType": "httpHeaderAuth",
    "toolDescription": "Call this tool to cancel a user's existing booking using a booking \"uid\".",
    "parametersHeaders": {
      "values": [
        {
          "name": "cal-api-version",
          "value": "2024-08-13",
          "valueProvider": "fieldValue"
        }
      ]
    },
    "placeholderDefinitions": {
      "values": [
        {
          "name": "bookingUid",
          "type": "string",
          "description": "the uid of the booking. Note this is not the same as the id of the booking."
        },
        {
          "name": "cancellationReason",
          "type": "string",
          "description": "Reason for cancelling the appointment"
        }
      ]
    }
  },
  "credentials": {
    "calApi": {
      "id": "GPSKPrBhO3Pq6KVF",
      "name": "Cal account"
    },
    "httpHeaderAuth": {
      "id": "X2Vr2TQSBcOsOMst",
      "name": "Cal.com API v2"
    }
  },
  "typeVersion": 1
}

================ Node #3562 ================
{
  "id": "d90aa957-30d7-4b29-93b9-acdc86f1cb17",
  "name": "Create a Booking",
  "type": "@n8n/n8n-nodes-langchain.toolHttpRequest",
  "position": [
    1400,
    440
  ],
  "parameters": {
    "url": "https://api.cal.com/v2/bookings",
    "method": "POST",
    "jsonBody": "{\n \"eventTypeId\": 648297,\n \"start\": \"{start}\",\n \"attendee\": {\n \"name\": \"{attendee_name}\",\n \"email\": \"{attendee_email}\",\n \"timeZone\": \"{attendee_timezone}\"\n },\n \"bookingFieldsResponses\": {\n \"title\": \"{summary_of_enquiry}\"\n }\n}",
    "sendBody": true,
    "sendHeaders": true,
    "specifyBody": "json",
    "authentication": "genericCredentialType",
    "genericAuthType": "httpHeaderAuth",
    "toolDescription": "Call this tool to create a booking. Strictly use ISO format for dates eg. \"2024-01-01T09:00:00-00:00\" for API compatibility.",
    "parametersHeaders": {
      "values": [
        {
          "name": "Content-Type",
          "value": "application/json",
          "valueProvider": "fieldValue"
        },
        {
          "name": "cal-api-version",
          "value": "2024-08-13",
          "valueProvider": "fieldValue"
        }
      ]
    },
    "placeholderDefinitions": {
      "values": [
        {
          "name": "start",
          "type": "string",
          "description": "The start time of the booking in ISO format. eg. \"2024-01-01T09:00:00Z\""
        },
        {
          "name": "attendee_name",
          "type": "string",
          "description": "Name of the attendee"
        },
        {
          "name": "attendee_email",
          "type": "string",
          "description": "email of the attendee"
        },
        {
          "name": "attendee_timezone",
          "type": "string",
          "description": "If timezone is unknown, assume Europe/London."
        },
        {
          "name": "summary_of_enquiry",
          "type": "string",
          "description": "short summary of the enquiry or purpose of the meeting"
        }
      ]
    }
  },
  "credentials": {
    "calApi": {
      "id": "GPSKPrBhO3Pq6KVF",
      "name": "Cal account"
    },
    "httpHeaderAuth": {
      "id": "X2Vr2TQSBcOsOMst",
      "name": "Cal.com API v2"
    }
  },
  "typeVersion": 1
}

================ Node #3563 ================
{
  "id": "dfcf00ca-8fe1-4517-b64f-fbb4606ab221",
  "name": "Sticky Note10",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    928.7527821891895,
    600
  ],
  "parameters": {
    "color": 7,
    "width": 261.1134437946252,
    "height": 168.99242033383513,
    "content": "![alt](https://upload.wikimedia.org/wikipedia/commons/a/a5/Cal.com%2C_Inc._Logo.svg#100x80)\nYou'll need to set a custom Header Auth Credential for Cal.com API v2. See the following doc for more info: https://cal.com/docs/api-reference/v2/introduction"
  },
  "typeVersion": 1
}

================ Node #3564 ================
{
  "id": "e743b324-ead2-47f8-87c9-2eb969305d4e",
  "name": "Sticky Note12",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    1220,
    420
  ],
  "parameters": {
    "width": 301.851426117099,
    "height": 360.9218237282627,
    "content": "\n\n\n\n\n\n\n\n\n\n\n\n\n### \ud83d\udea8 Change EventTypeID Here!\n* EventTypeID must be a number.\n* Your event type dictates the allowed duration of the booking.\n* If Event Type set to 30mins and the agent attempts to book 60mins, this will fail so make sure the agent knows how long to set the booking for!"
  },
  "typeVersion": 1
}

================ Node #3565 ================
{
  "id": "f087e1a4-fffb-44da-afd6-a6277aef84b5",
  "name": "Appointment Scheduling Agent1",
  "type": "@n8n/n8n-nodes-langchain.agent",
  "position": [
    1220,
    200
  ],
  "parameters": {
    "options": {
      "systemMessage": "=You are an appointment scheduling helper for a company called \"PC Parts Ltd\". Customers will message you enquirying for PC or laptop repairs and your job is to schedule a repair session for the user.This role is strictly to help schedule appointments so:\n* you may answer questions relating to the company, \"PC Parts Ltd\".\n* you may not answer questions relating to competitors of \"PC Parts Ltd\".\n* you may answer questions relating to general PC or laptop repair from a non-technical perspective.\n* you may not help to customer diagnose or assist in troubleshoot or debugging thei r PC or laptop issues. If the customer does ask, defer them to book an appointment where a suitable professional from PC Parts Ltd can help.\n* If an appointment is scheduled for the user then the conversation is completed and you should not continue to ask the user to schedule an appointment.\n* If an appointment is scheduled for the user, the user may ask for the following actions: ask about details of the existing appointment, reschedule the existing appointment or cancel an existing appointment.\n* If an appointment is scheduled for the user, the user cannot schedule another appointment until the existing appointment is cancelled.\n\n## About the company\nPC Parts Ltd is based in London, UK. They offer to repair low-end to high-end PC and Laptop consumer and small business machines. They also offer custom built machines such as for gaming. There is currently a summer sale going on for 20% selected machines for repairs. The company does not repair other electronic devices such as phones, tablets or monitors.\n\n## About the appointments\nAlways start your conversation by politely asking if the user wants to book a new appointment or enquire about an existing one. The date and time now is {{ $now.toISO() }}. All dates should be given in the ISO format. Each appointment should have a start and end date and time relative to today's date in the future and should be scheduled for 30 minutes.\n\n## To book an appointment\n* Before booking an appointment, ask if the user has an existing appointment.\n* Ensure you have the user's email address, full name and proposed date, preferred start time before booking an appointment.\n* Always check the calendar availability of the user's proposed date and time. If there is no availability, suggest the next available appointment slot.\n* If the appointment booking is successful, notify the user that an email confirmation will be sent to their provided email address.\n* If the appointment booking is unsuccessful, notify the user that you are unable to complete their request at the moment and to try again later.\n\n## To find an existing appointment\n* Ask the user for their email address and the date of the existing booking\n* Use the user's email and date to search for the existing booking.\n* If the user's email and date do not match the results or no results are returned, then the existing booking is not found.\n* If the existing booking is not found, notify the user and suggest a new booking should be made.\n* When the existing booking is found, ensure you tell them the booking's UID field.\n\n# To reschedule or cancel an existing appointment\n* First find the existing appointment so that you may obtain the existing appointment's booking UID.\n* Display this booking UID to the user.\n* Use this booking UID to reschedule or cancel an existing appointment.\n* If an existing appointment ID is not found or given, then notify the user that it is not possible to complete their request at this time and they should contact via email.\n* when user wants to cancel an appointment, ask for a reason for the cancellation and suggest rescheduling as an alternative. Confirm with user before cancelling an appointment.\n\n## About the user\n* The customer's session_id is \"{{ $('Twilio Trigger').item.json.From }}\"\n{{\n$json.chat_messages \n ? '* This is a returning prospective customer.' \n : '* This is a new customer. Ask for the details of their enquiry.'\n}}\n{{\n$json.appointment_id \n ? `* The customer has already scheduled an appointment at ${$json.scheduled_at} and their appointment_id is ${$json.appointment_id}`\n : '* This customer has not scheduled an appointment yet.'\n}}\n\n## Existing Conversation\n{{\n$json.chat_messages\n ? 'Here are the existing chat logs and should be used as context to continue the conversation:\\n```\\n' + JSON.parse($json.chat_messages).map(item => `${item.role}: ${item.message.replaceAll('\\n', ' ')}`).join('\\n') + '\\n```'\n : '* There is no existing conversation so far.'\n}}\n"
    },
    "hasOutputParser": true
  },
  "typeVersion": 1.6
}

================ Node #3566 ================
{
  "id": "a3af309b-d24c-42fe-8bcd-f330927c7a3c",
  "name": "Local File Trigger",
  "type": "n8n-nodes-base.localFileTrigger",
  "position": [
    140,
    260
  ],
  "parameters": {
    "path": "/home/node/storynotes/context",
    "events": [
      "add"
    ],
    "options": {
      "usePolling": true,
      "followSymlinks": true
    },
    "triggerOn": "folder"
  },
  "typeVersion": 1
}

================ Node #3567 ================
{
  "id": "048f9d67-6519-4dea-97df-aaddfefbfea2",
  "name": "Default Data Loader",
  "type": "@n8n/n8n-nodes-langchain.documentDefaultDataLoader",
  "position": [
    1300,
    720
  ],
  "parameters": {
    "options": {
      "metadata": {
        "metadataValues": [
          {
            "name": "project",
            "value": "={{ $('Settings').item.json.project }}"
          },
          {
            "name": "filename",
            "value": "={{ $('Settings').item.json.filename }}"
          }
        ]
      }
    },
    "jsonData": "={{ $json.data }}",
    "jsonMode": "expressionData"
  },
  "typeVersion": 1
}

================ Node #3568 ================
{
  "id": "9e9047c9-4428-4afb-8c74-d6eb1075a65a",
  "name": "Recursive Character Text Splitter",
  "type": "@n8n/n8n-nodes-langchain.textSplitterRecursiveCharacterTextSplitter",
  "position": [
    1300,
    860
  ],
  "parameters": {
    "options": {},
    "chunkSize": 2000
  },
  "typeVersion": 1
}

================ Node #3569 ================
{
  "id": "e42e3f82-6cd9-40c4-9da2-8f87ee5b3956",
  "name": "Embeddings Mistral Cloud",
  "type": "@n8n/n8n-nodes-langchain.embeddingsMistralCloud",
  "position": [
    1180,
    720
  ],
  "parameters": {
    "options": {}
  },
  "credentials": {
    "mistralCloudApi": {
      "id": "EIl2QxhXAS9Hkg37",
      "name": "Mistral Cloud account"
    }
  },
  "typeVersion": 1
}

================ Node #3570 ================
{
  "id": "578c63db-4f6e-4341-ab0d-111debd519be",
  "name": "Mistral Cloud Chat Model",
  "type": "@n8n/n8n-nodes-langchain.lmChatMistralCloud",
  "position": [
    2660,
    840
  ],
  "parameters": {
    "model": "open-mixtral-8x7b",
    "options": {}
  },
  "credentials": {
    "mistralCloudApi": {
      "id": "EIl2QxhXAS9Hkg37",
      "name": "Mistral Cloud account"
    }
  },
  "typeVersion": 1
}

================ Node #3571 ================
{
  "id": "c34adb3e-1fb9-4248-ae83-2bac34c8b0a4",
  "name": "Mistral Cloud Chat Model1",
  "type": "@n8n/n8n-nodes-langchain.lmChatMistralCloud",
  "position": [
    1200,
    400
  ],
  "parameters": {
    "model": "open-mixtral-8x7b",
    "options": {}
  },
  "credentials": {
    "mistralCloudApi": {
      "id": "EIl2QxhXAS9Hkg37",
      "name": "Mistral Cloud account"
    }
  },
  "typeVersion": 1
}

================ Node #3572 ================
{
  "id": "98e6dcc0-1e3a-4119-b657-0949f34ba525",
  "name": "Prep Incoming Doc",
  "type": "n8n-nodes-base.set",
  "position": [
    900,
    420
  ],
  "parameters": {
    "options": {},
    "assignments": {
      "assignments": [
        {
          "id": "da64ffde-1e8f-478d-baea-59fc05e6d3ce",
          "name": "data",
          "type": "string",
          "value": "={{ $json.text }}"
        }
      ]
    }
  },
  "typeVersion": 3.3
}

================ Node #3573 ================
{
  "id": "ab88cf9a-d310-4bef-9280-8b23729e7cc9",
  "name": "Settings",
  "type": "n8n-nodes-base.set",
  "position": [
    320,
    260
  ],
  "parameters": {
    "options": {},
    "assignments": {
      "assignments": [
        {
          "id": "df327b01-961c-4a49-8455-58c3fbff111a",
          "name": "project",
          "type": "string",
          "value": "={{ $json.path.split('/').slice(0, 4)[3] }}"
        },
        {
          "id": "6b7d26f9-3a38-417e-85d0-4e9d42476465",
          "name": "path",
          "type": "string",
          "value": "={{ $json.path }}"
        },
        {
          "id": "bb4471c7-d894-4739-99a6-4be247794ffa",
          "name": "filename",
          "type": "string",
          "value": "={{ $json.path.split('/').last() }}"
        }
      ]
    }
  },
  "typeVersion": 3.3
}

================ Node #3574 ================
{
  "id": "35c6b678-e6e9-4adf-a904-909fa2401d5e",
  "name": "Merge",
  "type": "n8n-nodes-base.merge",
  "position": [
    1600,
    420
  ],
  "parameters": {
    "mode": "chooseBranch"
  },
  "typeVersion": 2.1
}

================ Node #3575 ================
{
  "id": "0fa13be8-8500-486c-a1c6-cc1df00a4947",
  "name": "Get Doc Types",
  "type": "n8n-nodes-base.set",
  "position": [
    2000,
    420
  ],
  "parameters": {
    "mode": "raw",
    "options": {},
    "jsonOutput": "{\n \"docs\": [\n {\n \"filename\": \"study_guide.md\",\n \"title\": \"Study Guide\",\n \"description\": \"A Study Guide is a consolidated resource designed to aid learning. This guide includes three key elements: * A short answer quiz accompanied by an answer key to test comprehension. * A curated list of long-form essay questions to encourage deeper analysis and synthesis of the material. * A glossary of key terms to reinforce understanding of important concepts.\"\n },\n {\n \"filename\": \"timeline.md\",\n \"title\": \"Timeline\",\n \"description\": \"A Timeline organizes all significant events described in the sources you have uploaded in chronological order. This ordered list makes it easier to understand the sequence of events and their connection to the broader context of your sources. In addition to the list of events, the Timeline also provides a \u201ccast of characters,\u201d which comprises short biographical sketches of all the important people mentioned in your uploaded sources. These short biographies can help you quickly grasp the roles of various individuals involved in the events described by the Timeline.\"\n },\n {\n \"filename\": \"briefing_doc.md\",\n \"title\": \"Briefing Doc\",\n \"description\": \"A Briefing Doc identifies and presents the most important facts and insights from the sources in an easy-to-understand outline format. This format is designed to provide a concise overview of the key takeaways from the uploaded materials.\"\n }\n ]\n}\n"
  },
  "executeOnce": true,
  "typeVersion": 3.3
}

================ Node #3576 ================
{
  "id": "e3469368-f214-4549-844e-7febfbbf0202",
  "name": "Split Out Doc Types",
  "type": "n8n-nodes-base.splitOut",
  "position": [
    2160,
    420
  ],
  "parameters": {
    "options": {},
    "fieldToSplitOut": "docs"
  },
  "typeVersion": 1
}

================ Node #3577 ================
{
  "id": "df401e9e-2f70-4079-969b-6b61142fca37",
  "name": "For Each Doc Type...",
  "type": "n8n-nodes-base.splitInBatches",
  "position": [
    2340,
    420
  ],
  "parameters": {
    "options": {}
  },
  "typeVersion": 3
}

================ Node #3578 ================
{
  "id": "c334b546-8e11-424d-bdd5-006e7086f24b",
  "name": "Item List Output Parser",
  "type": "@n8n/n8n-nodes-langchain.outputParserItemList",
  "position": [
    2840,
    840
  ],
  "parameters": {
    "options": {}
  },
  "typeVersion": 1
}

================ Node #3579 ================
{
  "id": "4267c2b5-f1cd-4df7-84ee-be01a643a1c1",
  "name": "Vector Store Retriever",
  "type": "@n8n/n8n-nodes-langchain.retrieverVectorStore",
  "position": [
    3200,
    840
  ],
  "parameters": {},
  "typeVersion": 1
}

================ Node #3580 ================
{
  "id": "abf833ec-8a6d-4e13-a526-0ea6b80d578f",
  "name": "Embeddings Mistral Cloud1",
  "type": "@n8n/n8n-nodes-langchain.embeddingsMistralCloud",
  "position": [
    3200,
    1060
  ],
  "parameters": {
    "options": {}
  },
  "credentials": {
    "mistralCloudApi": {
      "id": "EIl2QxhXAS9Hkg37",
      "name": "Mistral Cloud account"
    }
  },
  "typeVersion": 1
}

================ Node #3581 ================
{
  "id": "a0e50185-6662-4b11-9922-59e8b06e4967",
  "name": "Qdrant Vector Store1",
  "type": "@n8n/n8n-nodes-langchain.vectorStoreQdrant",
  "position": [
    3200,
    940
  ],
  "parameters": {
    "qdrantCollection": {
      "__rl": true,
      "mode": "list",
      "value": "storynotes",
      "cachedResultName": "storynotes"
    }
  },
  "credentials": {
    "qdrantApi": {
      "id": "NyinAS3Pgfik66w5",
      "name": "QdrantApi account"
    }
  },
  "typeVersion": 1
}

================ Node #3582 ================
{
  "id": "20c5766a-d3ce-4c01-a76b-facf1a00abc2",
  "name": "Mistral Cloud Chat Model2",
  "type": "@n8n/n8n-nodes-langchain.lmChatMistralCloud",
  "position": [
    3100,
    840
  ],
  "parameters": {
    "options": {}
  },
  "credentials": {
    "mistralCloudApi": {
      "id": "EIl2QxhXAS9Hkg37",
      "name": "Mistral Cloud account"
    }
  },
  "typeVersion": 1
}

================ Node #3583 ================
{
  "id": "f049b7af-07f3-47e5-9476-68d73a387978",
  "name": "Split Out",
  "type": "n8n-nodes-base.splitOut",
  "position": [
    2960,
    680
  ],
  "parameters": {
    "options": {},
    "fieldToSplitOut": "response"
  },
  "typeVersion": 1
}

================ Node #3584 ================
{
  "id": "39042ae0-e17f-46cd-84be-728868950d84",
  "name": "Aggregate",
  "type": "n8n-nodes-base.aggregate",
  "position": [
    3400,
    680
  ],
  "parameters": {
    "options": {},
    "fieldsToAggregate": {
      "fieldToAggregate": [
        {
          "fieldToAggregate": "response.text"
        }
      ]
    }
  },
  "typeVersion": 1
}

================ Node #3585 ================
{
  "id": "e3b900c8-515d-4ac7-88fa-c364134ba9f9",
  "name": "Mistral Cloud Chat Model3",
  "type": "@n8n/n8n-nodes-langchain.lmChatMistralCloud",
  "position": [
    3540,
    840
  ],
  "parameters": {
    "model": "open-mixtral-8x7b",
    "options": {}
  },
  "credentials": {
    "mistralCloudApi": {
      "id": "EIl2QxhXAS9Hkg37",
      "name": "Mistral Cloud account"
    }
  },
  "typeVersion": 1
}

================ Node #3586 ================
{
  "id": "efb26a5d-6a61-44b2-ad99-6d1f8b48998d",
  "name": "Discover",
  "type": "@n8n/n8n-nodes-langchain.chainRetrievalQa",
  "position": [
    3100,
    680
  ],
  "parameters": {
    "text": "={{ $json.response }}",
    "promptType": "define"
  },
  "typeVersion": 1.3
}

================ Node #3587 ================
{
  "id": "302b7523-898e-47af-8941-aa5f8a58fd9c",
  "name": "2secs",
  "type": "n8n-nodes-base.wait",
  "position": [
    3880,
    1060
  ],
  "webhookId": "ec58ab18-03c5-4b58-bc2e-24415a236c72",
  "parameters": {},
  "typeVersion": 1.1
}

================ Node #3588 ================
{
  "id": "007857b0-c12c-4c57-b07f-db30526cd747",
  "name": "Get Generated Documents",
  "type": "n8n-nodes-base.set",
  "position": [
    2680,
    240
  ],
  "parameters": {
    "options": {},
    "assignments": {
      "assignments": [
        {
          "id": "b38546b2-47c4-4967-a2d7-98aebd589e95",
          "name": "data",
          "type": "string",
          "value": "={{ $json.text }}"
        },
        {
          "id": "a263519a-aa05-410a-b4f0-f5e22cc5058c",
          "name": "path",
          "type": "string",
          "value": "={{ $('Prep For AI').item.json.path }}"
        },
        {
          "id": "ec1687d6-0ea9-460f-b9d4-ae4a7e229e12",
          "name": "filename",
          "type": "string",
          "value": "={{ $('Prep For AI').item.json.name }}"
        }
      ]
    }
  },
  "typeVersion": 3.3
}

================ Node #3589 ================
{
  "id": "36fac35f-df10-41ab-96a7-3a5e67f9d8df",
  "name": "Generate",
  "type": "@n8n/n8n-nodes-langchain.chainLlm",
  "position": [
    3540,
    680
  ],
  "parameters": {
    "text": "=## Document\n{{ $json.text.join('\\n') }}",
    "messages": {
      "messageValues": [
        {
          "message": "=Your job is to create a {{ $('For Each Doc Type...').item.json.title }} for the given document. {{ $('For Each Doc Type...').item.json.description }}\n\nGenerate a {{ $('For Each Doc Type...').item.json.title }} for the given document. If questions are generated, generate the answers alongside them. Format your response in markdown; use \"#\" to format headings, use \"*\" to format lists."
        }
      ]
    },
    "promptType": "define"
  },
  "typeVersion": 1.4
}

================ Node #3590 ================
{
  "id": "b9a79cb0-bcc1-4d73-af93-5f8d7e2258a9",
  "name": "Prep For AI",
  "type": "n8n-nodes-base.set",
  "position": [
    1760,
    420
  ],
  "parameters": {
    "options": {},
    "assignments": {
      "assignments": [
        {
          "id": "5c864125-c884-4d33-b0ed-e3eecd354196",
          "name": "id",
          "type": "string",
          "value": "={{ $('Settings').first().json.filename.hash() }}"
        },
        {
          "id": "93ac14c1-ae97-4ef2-a66f-6c1110f3b0fc",
          "name": "project",
          "type": "string",
          "value": "={{ $('Settings').first().json.project }}"
        },
        {
          "id": "fafd16b9-0002-4f7c-89d0-29788f8ec472",
          "name": "path",
          "type": "string",
          "value": "={{ $('Settings').first().json.path }}"
        },
        {
          "id": "5a5860ba-918b-4fb8-b18c-96c1cd22091a",
          "name": "name",
          "type": "string",
          "value": "={{ $('Settings').first().json.filename }}"
        },
        {
          "id": "1a1caf65-85d8-4f74-a3be-503ccfc0b2c9",
          "name": "summary",
          "type": "string",
          "value": "={{ $('Summarization Chain').first().json.response.text }}"
        }
      ]
    }
  },
  "typeVersion": 3.3
}

================ Node #3591 ================
{
  "id": "e40c7e99-9813-4f06-92bb-dfb2839f1037",
  "name": "To Binary",
  "type": "n8n-nodes-base.convertToFile",
  "position": [
    2860,
    240
  ],
  "parameters": {
    "options": {},
    "operation": "toText",
    "sourceProperty": "={{ $json.data }}"
  },
  "typeVersion": 1.1
}

================ Node #3592 ================
{
  "id": "b55df916-7a51-4114-91b8-18a3c6ba2c56",
  "name": "Export to Folder",
  "type": "n8n-nodes-base.readWriteFile",
  "position": [
    3020,
    240
  ],
  "parameters": {
    "options": {},
    "fileName": "={{\n $('Get Generated Documents').item.json.path.replace(\n $('Get Generated Documents').item.json.path.split('/').last(),\n $('Get Generated Documents').item.json.filename.substring(0,21) + '...' + $('Split Out Doc Types').item.json.title + '.md'\n )\n}}",
    "operation": "write"
  },
  "typeVersion": 1
}

================ Node #3593 ================
{
  "id": "8490664e-0ca5-4839-ad03-d3f9706c99a3",
  "name": "Get FileType",
  "type": "n8n-nodes-base.switch",
  "position": [
    480,
    420
  ],
  "parameters": {
    "rules": {
      "values": [
        {
          "outputKey": "pdf",
          "conditions": {
            "options": {
              "leftValue": "",
              "caseSensitive": true,
              "typeValidation": "strict"
            },
            "combinator": "and",
            "conditions": [
              {
                "operator": {
                  "type": "string",
                  "operation": "equals"
                },
                "leftValue": "={{ $json.fileType }}",
                "rightValue": "pdf"
              }
            ]
          },
          "renameOutput": true
        },
        {
          "outputKey": "docx",
          "conditions": {
            "options": {
              "leftValue": "",
              "caseSensitive": true,
              "typeValidation": "strict"
            },
            "combinator": "and",
            "conditions": [
              {
                "id": "3a5f509d-46fe-490c-95f0-35124873c63e",
                "operator": {
                  "name": "filter.operator.equals",
                  "type": "string",
                  "operation": "equals"
                },
                "leftValue": "={{ $json.fileType }}",
                "rightValue": "docx"
              }
            ]
          },
          "renameOutput": true
        },
        {
          "outputKey": "everything else",
          "conditions": {
            "options": {
              "leftValue": "",
              "caseSensitive": true,
              "typeValidation": "strict"
            },
            "combinator": "and",
            "conditions": [
              {
                "id": "75188d2f-4bea-44ea-a579-9b9a1bd1ea93",
                "operator": {
                  "type": "object",
                  "operation": "exists",
                  "singleValue": true
                },
                "leftValue": "={{ $json }}",
                "rightValue": ""
              }
            ]
          },
          "renameOutput": true
        }
      ]
    },
    "options": {}
  },
  "typeVersion": 3
}

================ Node #3594 ================
{
  "id": "386f7aac-f3b9-4565-907f-687d48b00c52",
  "name": "Import File",
  "type": "n8n-nodes-base.readWriteFile",
  "position": [
    320,
    420
  ],
  "parameters": {
    "options": {},
    "fileSelector": "={{ $json.path }}"
  },
  "typeVersion": 1
}

================ Node #3595 ================
{
  "id": "6ade93d5-61c3-450a-b78c-e210c18c0e70",
  "name": "Extract from PDF",
  "type": "n8n-nodes-base.extractFromFile",
  "position": [
    680,
    260
  ],
  "parameters": {
    "options": {},
    "operation": "pdf"
  },
  "typeVersion": 1
}

================ Node #3596 ================
{
  "id": "f413e139-3f9c-438f-8e82-824c38f09c6b",
  "name": "Extract from DOCX",
  "type": "n8n-nodes-base.extractFromFile",
  "position": [
    680,
    420
  ],
  "parameters": {
    "options": {},
    "operation": "ods"
  },
  "typeVersion": 1
}

================ Node #3597 ================
{
  "id": "455fadea-f5c7-4bea-983f-b06da4e57510",
  "name": "Extract from TEXT",
  "type": "n8n-nodes-base.extractFromFile",
  "position": [
    680,
    580
  ],
  "parameters": {
    "options": {},
    "operation": "text"
  },
  "typeVersion": 1
}

================ Node #3598 ================
{
  "id": "b2586011-4985-4075-b51c-90301b1a8cf9",
  "name": "Summarization Chain",
  "type": "@n8n/n8n-nodes-langchain.chainSummarization",
  "position": [
    1200,
    260
  ],
  "parameters": {
    "options": {},
    "chunkSize": 4000
  },
  "typeVersion": 2
}

================ Node #3599 ================
{
  "id": "1502e72c-e97e-4148-8138-01818ab5b104",
  "name": "Sticky Note",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    60,
    85.80882007954312
  ],
  "parameters": {
    "color": 7,
    "width": 995.1475972814769,
    "height": 694.0931000693263,
    "content": "## Step 1. Watch Folder and Import New Documents\n[Read more about Local File Trigger](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.localfiletrigger)\n\nWith n8n's local file trigger, we're able to trigger the workflow when files are created in our target folder. We still have to import them however as the trigger will only give the file's path. The \"Extract From\" node is used to get at the file's contents."
  },
  "typeVersion": 1
}

================ Node #3600 ================
{
  "id": "7b3afc2c-3fb8-4589-9475-78f5617009cc",
  "name": "Sticky Note1",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    1080,
    82.96464765818223
  ],
  "parameters": {
    "color": 7,
    "width": 824.3300768713589,
    "height": 949.8141899605673,
    "content": "## Step 2. Summarise and Vectorise Document Contents\n[Learn more about using the Qdrant VectorStore](https://docs.n8n.io/integrations/builtin/cluster-nodes/root-nodes/n8n-nodes-langchain.vectorstoreqdrant)\n\nCapturing the document into our vector store is intended for a technique we'll use later known as Retrieval Augumented Generation or \"RAG\" for short. For our scenario, this allows our LLM to retrieve context more efficiently which produces better respsonses."
  },
  "typeVersion": 1
}

================ Node #3601 ================
{
  "id": "74aabb02-ca5d-41ad-b84f-92d66428b774",
  "name": "Sticky Note2",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    1940,
    156.7963650826494
  ],
  "parameters": {
    "color": 7,
    "width": 591.09953935829,
    "height": 485.0226378812345,
    "content": "## Step 3. Loop through Templates\n\nWe'll ask the LLM to help us generate 3 types of notes from the imported source document. These notes are intended to breakdown the content for faster study. Our templates for this demo are:\n(1) **Study guide**\n(2) **Briefing document**\n(3) **Timeline**"
  },
  "typeVersion": 1
}

================ Node #3602 ================
{
  "id": "b96f899d-4a44-491c-b164-a42feba129eb",
  "name": "Sticky Note3",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    2560,
    480
  ],
  "parameters": {
    "color": 7,
    "width": 1500.7886103732135,
    "height": 806.6560661824452,
    "content": "## Step 4. Use AI Agents to Query and Generate Template Documents\n[Read more about using the Question & Answer Retrieval Chain](https://docs.n8n.io/integrations/builtin/cluster-nodes/root-nodes/n8n-nodes-langchain.chainretrievalqa)\n\nn8n allows us to easily use a chain of LLMs as agents which can work together to handle any task!\nHere the agents generate questions to explore the content of the source document and use the answers to generate the template. "
  },
  "typeVersion": 1
}

================ Node #3603 ================
{
  "id": "77fda269-6877-422f-b6e6-4346bde862db",
  "name": "Sticky Note4",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    2560,
    67.64523011966037
  ],
  "parameters": {
    "color": 7,
    "width": 771.8710855215123,
    "height": 384.22073222791266,
    "content": "## Step 5. Export Generated Templates To Folder\n[Learn more about writing to the local filesystem](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.filesreadwrite)\n\nFinally, the AI generated documents can now be exported to disk. This workflow makes it easy to generate any kind of document from various source material and can be used for training and sales."
  },
  "typeVersion": 1
}

================ Node #3604 ================
{
  "id": "08839972-f0f4-4144-bf27-810664cbf828",
  "name": "Qdrant Vector Store",
  "type": "@n8n/n8n-nodes-langchain.vectorStoreQdrant",
  "position": [
    1200,
    560
  ],
  "parameters": {
    "mode": "insert",
    "options": {},
    "qdrantCollection": {
      "__rl": true,
      "mode": "list",
      "value": "storynotes",
      "cachedResultName": "storynotes"
    }
  },
  "credentials": {
    "qdrantApi": {
      "id": "NyinAS3Pgfik66w5",
      "name": "QdrantApi account"
    }
  },
  "typeVersion": 1
}

================ Node #3605 ================
{
  "id": "7e216411-83ee-4b82-9e00-285d4f2d3224",
  "name": "Sticky Note5",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    -360,
    80
  ],
  "parameters": {
    "width": 390.63004227317265,
    "height": 401.0080676370763,
    "content": "## Try It Out! \n\n### This workflow automates generating notes from a source document.\n* It watches a target folder to pick up new files.\n* When a new file is detected, it saves the contents of the file in a vectorstore.\n* multiple AI agents guided by a templates list, generate the predetermined notes.\n* These notes are then export alongside the original source file for the user.\n\n\n### Need Help?\nJoin the [Discord](https://discord.com/invite/XPKeKXeB7d) or ask in the [Forum](https://community.n8n.io/)!\n\nHappy Hacking!"
  },
  "typeVersion": 1
}

================ Node #3606 ================
{
  "id": "f2c363d3-a2bf-4468-ad54-f26649ce6ab8",
  "name": "Interview",
  "type": "@n8n/n8n-nodes-langchain.chainLlm",
  "position": [
    2660,
    680
  ],
  "parameters": {
    "text": "=## document summary\n {{ $('Prep For AI').item.json.summary }}",
    "messages": {
      "messageValues": [
        {
          "message": "=Given the following document summary, what questions would you ask to create a {{ $('For Each Doc Type...').item.json.title }} for the document? Generate 5 questions."
        }
      ]
    },
    "promptType": "define",
    "hasOutputParser": true
  },
  "typeVersion": 1.4
}

================ Node #3607 ================
{
  "id": "ce3da55d-8c22-40bb-8781-63c2e6bcb824",
  "name": "Sticky Note6",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    1960,
    380
  ],
  "parameters": {
    "width": 172.26820279743384,
    "height": 295.46359440513226,
    "content": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n### \ud83d\udca1Add your own templates here!\n"
  },
  "typeVersion": 1
}

================ Node #3608 ================
{
  "id": "c5525f47-4d91-4b98-87bb-566b90da64a1",
  "name": "Local File Trigger",
  "type": "n8n-nodes-base.localFileTrigger",
  "position": [
    660,
    700
  ],
  "parameters": {
    "path": "/home/node/host_mount/local_file_search",
    "events": [
      "add",
      "change",
      "unlink"
    ],
    "options": {
      "awaitWriteFinish": true
    },
    "triggerOn": "folder"
  },
  "typeVersion": 1
}

================ Node #3609 ================
{
  "id": "804334d6-e34d-40d1-9555-b331ffe66f6f",
  "name": "When clicking \"Test workflow\"",
  "type": "n8n-nodes-base.manualTrigger",
  "position": [
    664.5766613599001,
    881.8474780113352
  ],
  "parameters": {},
  "typeVersion": 1
}

================ Node #3610 ================
{
  "id": "7ab0e284-b667-4d1f-8ceb-fb05e4081a06",
  "name": "Set Variables",
  "type": "n8n-nodes-base.set",
  "position": [
    840,
    700
  ],
  "parameters": {
    "options": {},
    "assignments": {
      "assignments": [
        {
          "id": "35ea70c4-8669-4975-a68d-bbaa094713c0",
          "name": "directory",
          "type": "string",
          "value": "/home/node/BankStatements"
        },
        {
          "id": "1d081d19-ff4e-462a-9cbe-7af2244bf87f",
          "name": "file_added",
          "type": "string",
          "value": "={{ $json.event === 'add' && $json.path || ''}}"
        },
        {
          "id": "18f8dc03-51ca-48c7-947f-87ce8e1979bf",
          "name": "file_changed",
          "type": "string",
          "value": "={{ $json.event === 'change' && $json.path || '' }}"
        },
        {
          "id": "65074ff7-037b-4b3b-b2c3-8a61755ab43b",
          "name": "file_deleted",
          "type": "string",
          "value": "={{ $json.event === 'unlink' && $json.path || '' }}"
        },
        {
          "id": "9a1902e7-f94d-4d1f-9006-91c67354d3e8",
          "name": "qdrant_collection",
          "type": "string",
          "value": "local_file_search"
        }
      ]
    }
  },
  "typeVersion": 3.3
}

================ Node #3611 ================
{
  "id": "76173972-ceca-43a4-b85f-00b41f774304",
  "name": "Sticky Note",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    580,
    460
  ],
  "parameters": {
    "color": 7,
    "width": 665.0909497859384,
    "height": 596.8351502261468,
    "content": "## Step 1. Select the target folder\n[Read more about local file trigger](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.localfiletrigger)\n\nIn this workflow, we'll monitor a specific folder on disk that n8n has access to. Since we're using docker, we can either use the n8n volume or mount a folder from the host machine.\n\nThe local file trigger is useful to execute the workflow whenever changes are made to our target folder."
  },
  "typeVersion": 1
}

================ Node #3612 ================
{
  "id": "eda839f7-dde4-4d1f-9fe6-692df4ac7282",
  "name": "Sticky Note4",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    184.57666135990007,
    461.84747801133517
  ],
  "parameters": {
    "width": 372.51107341403605,
    "height": 356.540665091993,
    "content": "## Try It Out!\n### This workflow does the following:\n* Monitors a target folder for changes using the local file trigger\n* Synchronises files in the target folder with their vectors in Qdrant\n* Mistral AI is used to create a Q&A AI agent on all files in the target folder\n\n### Need Help?\nJoin the [Discord](https://discord.com/invite/XPKeKXeB7d) or ask in the [Forum](https://community.n8n.io/)!\n\nHappy Hacking!"
  },
  "typeVersion": 1
}

================ Node #3613 ================
{
  "id": "f82f6de0-af8f-4fdf-a733-f59ba4fed02f",
  "name": "Read File",
  "type": "n8n-nodes-base.readWriteFile",
  "position": [
    1340,
    1120
  ],
  "parameters": {
    "options": {},
    "fileSelector": "={{ $json.file_added }}"
  },
  "typeVersion": 1
}

================ Node #3614 ================
{
  "id": "7354a080-051b-479f-97b1-49cc0c14c9d8",
  "name": "Embeddings Mistral Cloud",
  "type": "@n8n/n8n-nodes-langchain.embeddingsMistralCloud",
  "position": [
    1720,
    1280
  ],
  "parameters": {
    "options": {}
  },
  "credentials": {
    "mistralCloudApi": {
      "id": "EIl2QxhXAS9Hkg37",
      "name": "Mistral Cloud account"
    }
  },
  "typeVersion": 1
}

================ Node #3615 ================
{
  "id": "a1ad45ff-a882-4aed-82e2-cad2483cf4e8",
  "name": "Default Data Loader",
  "type": "@n8n/n8n-nodes-langchain.documentDefaultDataLoader",
  "position": [
    1820,
    1280
  ],
  "parameters": {
    "options": {
      "metadata": {
        "metadataValues": [
          {
            "name": "filter_by_filename",
            "value": "={{ $json.file_location }}"
          },
          {
            "name": "filter_by_created_month",
            "value": "={{ $now.year + '-' + $now.monthShort }}"
          },
          {
            "name": "filter_by_created_week",
            "value": "={{ $now.year + '-' + $now.monthShort + '-W' + $now.weekNumber }}"
          }
        ]
      }
    },
    "jsonData": "={{ $json.data }}",
    "jsonMode": "expressionData"
  },
  "typeVersion": 1
}

================ Node #3616 ================
{
  "id": "0b0e29b9-8873-4074-94dc-9f0364c28835",
  "name": "Recursive Character Text Splitter",
  "type": "@n8n/n8n-nodes-langchain.textSplitterRecursiveCharacterTextSplitter",
  "position": [
    1840,
    1400
  ],
  "parameters": {
    "options": {}
  },
  "typeVersion": 1
}

================ Node #3617 ================
{
  "id": "c0555ba6-a1bd-4aa9-a340-a9c617f8e6db",
  "name": "Prepare Embedding Document",
  "type": "n8n-nodes-base.set",
  "position": [
    1520,
    1120
  ],
  "parameters": {
    "options": {},
    "assignments": {
      "assignments": [
        {
          "id": "41a1d4ca-e5a5-4fb9-b249-8796ae759b33",
          "name": "data",
          "type": "string",
          "value": "=## file location\n{{ [$json.directory, $json.fileName].join('/') }}\n## file created\n{{ $now.toISO() }}\n## file contents\n{{ $input.item.binary.data.data.base64Decode() }}"
        },
        {
          "id": "c091704d-b81c-448b-8c90-156ef568b871",
          "name": "file_location",
          "type": "string",
          "value": "={{ [$json.directory, $json.fileName].join('/') }}"
        }
      ]
    }
  },
  "typeVersion": 3.3
}

================ Node #3618 ================
{
  "id": "ffe8c363-0809-4d21-aa8f-34b0fc2dc57f",
  "name": "Chat Trigger",
  "type": "@n8n/n8n-nodes-langchain.chatTrigger",
  "position": [
    2280,
    680
  ],
  "webhookId": "37587fe0-b8db-4012-90a7-1f65b9bfd0df",
  "parameters": {},
  "typeVersion": 1
}

================ Node #3619 ================
{
  "id": "8d958669-60be-4bb2-80fc-2a6c7c7bfae6",
  "name": "Question and Answer Chain",
  "type": "@n8n/n8n-nodes-langchain.chainRetrievalQa",
  "position": [
    2500,
    680
  ],
  "parameters": {},
  "typeVersion": 1.3
}

================ Node #3620 ================
{
  "id": "f143e438-8176-4923-a866-3f9a2a16793d",
  "name": "Mistral Cloud Chat Model",
  "type": "@n8n/n8n-nodes-langchain.lmChatMistralCloud",
  "position": [
    2500,
    840
  ],
  "parameters": {
    "model": "mistral-small-2402",
    "options": {}
  },
  "credentials": {
    "mistralCloudApi": {
      "id": "EIl2QxhXAS9Hkg37",
      "name": "Mistral Cloud account"
    }
  },
  "typeVersion": 1
}

================ Node #3621 ================
{
  "id": "06dd8f4c-3b66-43e0-85c8-ec222e275f87",
  "name": "Vector Store Retriever",
  "type": "@n8n/n8n-nodes-langchain.retrieverVectorStore",
  "position": [
    2620,
    840
  ],
  "parameters": {},
  "typeVersion": 1
}

================ Node #3622 ================
{
  "id": "2fdabcb5-a7a7-4e02-8c1b-9190e2e52385",
  "name": "Embeddings Mistral Cloud1",
  "type": "@n8n/n8n-nodes-langchain.embeddingsMistralCloud",
  "position": [
    2620,
    1080
  ],
  "parameters": {
    "options": {}
  },
  "credentials": {
    "mistralCloudApi": {
      "id": "EIl2QxhXAS9Hkg37",
      "name": "Mistral Cloud account"
    }
  },
  "typeVersion": 1
}

================ Node #3623 ================
{
  "id": "e5664534-de07-481f-87dd-68d7d0715baa",
  "name": "Remap for File_Added Flow",
  "type": "n8n-nodes-base.set",
  "position": [
    1920,
    700
  ],
  "parameters": {
    "options": {},
    "assignments": {
      "assignments": [
        {
          "id": "840219e1-ed47-4b00-83fd-6b3c0bd71650",
          "name": "file_added",
          "type": "string",
          "value": "={{ $('Set Variables').item.json.file_changed }}"
        }
      ]
    }
  },
  "typeVersion": 3.3
}

================ Node #3624 ================
{
  "id": "1fd14832-aafe-4d72-b4f2-7afc72df97dc",
  "name": "Search For Existing Point",
  "type": "n8n-nodes-base.httpRequest",
  "position": [
    1340,
    280
  ],
  "parameters": {
    "url": "=http://qdrant:6333/collections/{{ $('Set Variables').item.json.qdrant_collection }}/points/scroll",
    "method": "POST",
    "options": {},
    "jsonBody": "={\n \"filter\": {\n \"must\": [\n {\n \"key\": \"metadata.filter_by_filename\",\n \"match\": {\n \"value\": \"{{ $json.file_changed }}\"\n }\n }\n ]\n },\n \"limit\": 1,\n \"with_payload\": false,\n \"with_vector\": false\n}",
    "sendBody": true,
    "specifyBody": "json",
    "authentication": "predefinedCredentialType",
    "nodeCredentialType": "qdrantApi"
  },
  "credentials": {
    "qdrantApi": {
      "id": "NyinAS3Pgfik66w5",
      "name": "QdrantApi account"
    }
  },
  "typeVersion": 4.2
}

================ Node #3625 ================
{
  "id": "b5fa817f-82d6-41dd-9817-4c1dd9137b76",
  "name": "Has Existing Point?",
  "type": "n8n-nodes-base.if",
  "position": [
    1520,
    280
  ],
  "parameters": {
    "options": {},
    "conditions": {
      "options": {
        "leftValue": "",
        "caseSensitive": true,
        "typeValidation": "strict"
      },
      "combinator": "and",
      "conditions": [
        {
          "id": "0392bac0-8fb5-406b-b59f-575edf5ab30d",
          "operator": {
            "type": "array",
            "operation": "notEmpty",
            "singleValue": true
          },
          "leftValue": "={{ $json.result.points }}",
          "rightValue": ""
        }
      ]
    }
  },
  "typeVersion": 2
}

================ Node #3626 ================
{
  "id": "b0fa4fa4-5d1b-4a12-b8ba-a10d71f31f94",
  "name": "Delete Existing Point",
  "type": "n8n-nodes-base.httpRequest",
  "position": [
    1720,
    700
  ],
  "parameters": {
    "url": "=http://qdrant:6333/collections/{{ $('Set Variables').item.json.qdrant_collection }}/points/delete",
    "method": "POST",
    "options": {},
    "sendBody": true,
    "authentication": "predefinedCredentialType",
    "bodyParameters": {
      "parameters": [
        {
          "name": "points",
          "value": "={{ $json.result.points.map(point => point.id) }}"
        }
      ]
    },
    "nodeCredentialType": "qdrantApi"
  },
  "credentials": {
    "qdrantApi": {
      "id": "NyinAS3Pgfik66w5",
      "name": "QdrantApi account"
    }
  },
  "typeVersion": 4.2
}

================ Node #3627 ================
{
  "id": "5408adfe-4d6b-407c-aac7-e87c9b1a1592",
  "name": "Search For Existing Point1",
  "type": "n8n-nodes-base.httpRequest",
  "position": [
    1340,
    700
  ],
  "parameters": {
    "url": "=http://qdrant:6333/collections/{{ $('Set Variables').item.json.qdrant_collection }}/points/scroll",
    "method": "POST",
    "options": {},
    "jsonBody": "={\n \"filter\": {\n \"must\": [\n {\n \"key\": \"metadata.filter_by_filename\",\n \"match\": {\n \"value\": \"{{ $json.file_changed }}\"\n }\n }\n ]\n },\n \"limit\": 1,\n \"with_payload\": false,\n \"with_vector\": false\n}",
    "sendBody": true,
    "specifyBody": "json",
    "authentication": "predefinedCredentialType",
    "nodeCredentialType": "qdrantApi"
  },
  "credentials": {
    "qdrantApi": {
      "id": "NyinAS3Pgfik66w5",
      "name": "QdrantApi account"
    }
  },
  "typeVersion": 4.2
}

================ Node #3628 ================
{
  "id": "fac43587-0d24-4d6e-a0d5-8cc8f9615967",
  "name": "Has Existing Point?1",
  "type": "n8n-nodes-base.if",
  "position": [
    1520,
    700
  ],
  "parameters": {
    "options": {},
    "conditions": {
      "options": {
        "leftValue": "",
        "caseSensitive": true,
        "typeValidation": "strict"
      },
      "combinator": "and",
      "conditions": [
        {
          "id": "0392bac0-8fb5-406b-b59f-575edf5ab30d",
          "operator": {
            "type": "array",
            "operation": "notEmpty",
            "singleValue": true
          },
          "leftValue": "={{ $json.result.points }}",
          "rightValue": ""
        }
      ]
    }
  },
  "typeVersion": 2
}

================ Node #3629 ================
{
  "id": "010baacd-fac1-4cc1-86bf-9d6ef11916fe",
  "name": "Delete Existing Point1",
  "type": "n8n-nodes-base.httpRequest",
  "position": [
    1700,
    280
  ],
  "parameters": {
    "url": "=http://qdrant:6333/collections/{{ $('Set Variables').item.json.qdrant_collection }}/points/delete",
    "method": "POST",
    "options": {},
    "sendBody": true,
    "authentication": "predefinedCredentialType",
    "bodyParameters": {
      "parameters": [
        {
          "name": "points",
          "value": "={{ $json.result.points.map(point => point.id) }}"
        }
      ]
    },
    "nodeCredentialType": "qdrantApi"
  },
  "credentials": {
    "qdrantApi": {
      "id": "NyinAS3Pgfik66w5",
      "name": "QdrantApi account"
    }
  },
  "typeVersion": 4.2
}

================ Node #3630 ================
{
  "id": "2d6fb29c-2fac-41de-9ad0-cc781b246378",
  "name": "Handle File Event",
  "type": "n8n-nodes-base.switch",
  "position": [
    1000,
    700
  ],
  "parameters": {
    "rules": {
      "values": [
        {
          "outputKey": "file_deleted",
          "conditions": {
            "options": {
              "leftValue": "",
              "caseSensitive": true,
              "typeValidation": "strict"
            },
            "combinator": "and",
            "conditions": [
              {
                "id": "a1f6d86a-9805-4d0e-ac70-90c9cf0ad339",
                "operator": {
                  "type": "string",
                  "operation": "notEmpty",
                  "singleValue": true
                },
                "leftValue": "={{ $json.file_deleted }}",
                "rightValue": ""
              }
            ]
          },
          "renameOutput": true
        },
        {
          "outputKey": "file_changed",
          "conditions": {
            "options": {
              "leftValue": "",
              "caseSensitive": true,
              "typeValidation": "strict"
            },
            "combinator": "and",
            "conditions": [
              {
                "id": "d15cde67-b5b0-4676-b4fb-ead749147392",
                "operator": {
                  "type": "string",
                  "operation": "notEmpty",
                  "singleValue": true
                },
                "leftValue": "={{ $json.file_changed }}",
                "rightValue": ""
              }
            ]
          },
          "renameOutput": true
        },
        {
          "outputKey": "file_added",
          "conditions": {
            "options": {
              "leftValue": "",
              "caseSensitive": true,
              "typeValidation": "strict"
            },
            "combinator": "and",
            "conditions": [
              {
                "operator": {
                  "type": "string",
                  "operation": "notEmpty",
                  "singleValue": true
                },
                "leftValue": "={{ $json.file_added }}",
                "rightValue": ""
              }
            ]
          },
          "renameOutput": true
        }
      ]
    },
    "options": {}
  },
  "typeVersion": 3
}

================ Node #3631 ================
{
  "id": "da91b2aa-613c-4e3e-af83-fbd3bb7e922e",
  "name": "Sticky Note1",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    1280,
    123.92779403575491
  ],
  "parameters": {
    "color": 7,
    "width": 847.032584995578,
    "height": 335.8400964393443,
    "content": "## Step 2. When files are removed, the vector point is cleared.\n[Learn how to delete points using the Qdrant API](https://qdrant.tech/documentation/concepts/points/#delete-points)\n\nTo keep our vectorstore relevant, we'll implement a simple synchronisation system whereby documents deleted from the local file folder are also purged from Qdrant. This can be simply achieved using Qdrant APIs."
  },
  "typeVersion": 1
}

================ Node #3632 ================
{
  "id": "2f9f5b2b-6504-4b27-a0c4-f3373df352df",
  "name": "Sticky Note2",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    1280,
    480
  ],
  "parameters": {
    "color": 7,
    "width": 855.9952607674757,
    "height": 433.01782147687817,
    "content": "## Step 3. When files are updated, the vector point is updated.\n[Learn how to delete points using the Qdrant API](https://qdrant.tech/documentation/concepts/points/#delete-points)\n\nSimilarly to the files deleted branch, when we encounter a change in a file we'll update the matching vector point in Qdrant to ensure our vector store stays relevant. Here, we can achieve this my deleting the existing vector point and creating it anew with the updated bank statement."
  },
  "typeVersion": 1
}

================ Node #3633 ================
{
  "id": "38128b7f-d0f2-405c-a7de-662df812c344",
  "name": "Sticky Note3",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    1280,
    940
  ],
  "parameters": {
    "color": 7,
    "width": 846.8204626627492,
    "height": 629.9714759033081,
    "content": "## Step 4. When new files are added, add them to Qdrant Vectorstore.\n[Read more about the Qdrant node](https://docs.n8n.io/integrations/builtin/cluster-nodes/root-nodes/n8n-nodes-langchain.vectorstoreqdrant)\n\nUsing Qdrant, we'll able to create a simple yet powerful RAG based application for our bank statements. One of Qdrant's most powerful features is its filtering system, we'll use it to manage the synchronisation of our local file system and Qdrant."
  },
  "typeVersion": 1
}

================ Node #3634 ================
{
  "id": "e85e2a30-e775-42fe-a12a-ac5de4eb4673",
  "name": "Sticky Note5",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    2180,
    491.43199269284935
  ],
  "parameters": {
    "color": 7,
    "width": 744.4578330639196,
    "height": 759.7908149448928,
    "content": "## Step 5. Create AI Agent expert on historic bank statements \n[Read more about the Question & Answer Chain](https://docs.n8n.io/integrations/builtin/cluster-nodes/root-nodes/n8n-nodes-langchain.chainretrievalqa)\n\nFinally, let's use a Question & Answer AI node to combine the Mistral AI model and Qdrant as the vector store retriever to create a local expert for all our bank statements questions. "
  },
  "typeVersion": 1
}

================ Node #3635 ================
{
  "id": "7b29b0b9-ffee-4456-b036-9b39400d2b31",
  "name": "Qdrant Vector Store",
  "type": "@n8n/n8n-nodes-langchain.vectorStoreQdrant",
  "position": [
    1700,
    1120
  ],
  "parameters": {
    "mode": "insert",
    "options": {},
    "qdrantCollection": {
      "__rl": true,
      "mode": "id",
      "value": "={{ $('Set Variables').item.json.qdrant_collection }}"
    }
  },
  "credentials": {
    "qdrantApi": {
      "id": "NyinAS3Pgfik66w5",
      "name": "QdrantApi account"
    }
  },
  "typeVersion": 1
}

================ Node #3636 ================
{
  "id": "1857bebb-b492-415e-96c8-235329bfd28a",
  "name": "Qdrant Vector Store1",
  "type": "@n8n/n8n-nodes-langchain.vectorStoreQdrant",
  "position": [
    2620,
    960
  ],
  "parameters": {
    "qdrantCollection": {
      "__rl": true,
      "mode": "id",
      "value": "BankStatements"
    }
  },
  "credentials": {
    "qdrantApi": {
      "id": "NyinAS3Pgfik66w5",
      "name": "QdrantApi account"
    }
  },
  "typeVersion": 1
}

================ Node #3637 ================
{
  "id": "3544950e-4d8e-46ca-8f56-61c152a5cae3",
  "name": "Window Buffer Memory",
  "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
  "position": [
    1220,
    500
  ],
  "parameters": {
    "contextWindowLength": 10
  },
  "typeVersion": 1.2
}

================ Node #3638 ================
{
  "id": "743cc4e7-5f24-4adc-b872-7241ee775bd0",
  "name": "OpenAI Chat Model",
  "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
  "position": [
    1000,
    500
  ],
  "parameters": {
    "model": "gpt-4-turbo",
    "options": {
      "temperature": 0.3
    }
  },
  "credentials": {
    "openAiApi": {
      "id": "rveqdSfp7pCRON1T",
      "name": "Ted's Tech Talks OpenAi"
    }
  },
  "typeVersion": 1
}

================ Node #3639 ================
{
  "id": "cc30066c-ad2c-4729-82c1-a6b0f4214dee",
  "name": "When clicking \"Test workflow\"",
  "type": "n8n-nodes-base.manualTrigger",
  "position": [
    500,
    -80
  ],
  "parameters": {},
  "typeVersion": 1
}

================ Node #3640 ================
{
  "id": "0deacd0d-45cb-4738-8da0-9d1251858867",
  "name": "Get chinook.zip example",
  "type": "n8n-nodes-base.httpRequest",
  "position": [
    700,
    -80
  ],
  "parameters": {
    "url": "https://www.sqlitetutorial.net/wp-content/uploads/2018/03/chinook.zip",
    "options": {}
  },
  "typeVersion": 4.2
}

================ Node #3641 ================
{
  "id": "61f34708-f8ed-44a9-8522-6042d28511ae",
  "name": "Extract zip file",
  "type": "n8n-nodes-base.compression",
  "position": [
    900,
    -80
  ],
  "parameters": {},
  "typeVersion": 1.1
}

================ Node #3642 ================
{
  "id": "6a12d9ac-f1b7-4267-8b34-58cdb9d347bb",
  "name": "Save chinook.db locally",
  "type": "n8n-nodes-base.readWriteFile",
  "position": [
    1100,
    -80
  ],
  "parameters": {
    "options": {},
    "fileName": "./chinook.db",
    "operation": "write",
    "dataPropertyName": "file_0"
  },
  "typeVersion": 1
}

================ Node #3643 ================
{
  "id": "701d1325-4186-4185-886a-3738163db603",
  "name": "Load local chinook.db",
  "type": "n8n-nodes-base.readWriteFile",
  "position": [
    620,
    360
  ],
  "parameters": {
    "options": {},
    "fileSelector": "./chinook.db"
  },
  "typeVersion": 1
}

================ Node #3644 ================
{
  "id": "d7b3813d-8180-4ff1-87a4-bd54a03043af",
  "name": "Sticky Note",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    440,
    -280.9454545454546
  ],
  "parameters": {
    "width": 834.3272727272731,
    "height": 372.9454545454546,
    "content": "## Run this part only once\nThis section:\n* downloads the example zip file from https://www.sqlitetutorial.net/sqlite-sample-database/\n* extracts the archive (it contains only a single file)\n* saves the extracted `chinook.db` SQLite database locally\n\nNow you can use chat to \"talk\" to your data!"
  },
  "typeVersion": 1
}

================ Node #3645 ================
{
  "id": "6bd25563-2c59-44c2-acf9-407bd28a15cf",
  "name": "Sticky Note1",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    400,
    240
  ],
  "parameters": {
    "width": 558.5454545454544,
    "height": 297.89090909090913,
    "content": "## On every chat message:\n* the local SQLite database is loaded\n* JSON from Chat Trigger is combined with SQLite binary data"
  },
  "typeVersion": 1
}

================ Node #3646 ================
{
  "id": "2be63956-236e-46f7-b8e4-0f55e2e25a5c",
  "name": "Combine chat input with the binary",
  "type": "n8n-nodes-base.set",
  "position": [
    820,
    360
  ],
  "parameters": {
    "mode": "raw",
    "options": {
      "includeBinary": true
    },
    "jsonOutput": "={{ $('Chat Trigger').item.json }}\n"
  },
  "typeVersion": 3.3
}

================ Node #3647 ================
{
  "id": "7f4c9adb-eab4-40d7-ad2e-44f2c0e3e30a",
  "name": "Sticky Note2",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    980,
    120
  ],
  "parameters": {
    "width": 471.99692219161466,
    "height": 511.16641410437836,
    "content": "### LangChain SQL Agent can make several queries before producing the final answer.\nTry these examples:\n1. \"Please describe the database\". This input usually requires just 1 query + an extra observation to produce a final answer.\n2. \"What are the revenues by genre?\". This input will launch a series of Agent actions, because it needs to make several queries.\n\nThe final answer is stored in the memory and will be recalled on the next input from the user."
  },
  "typeVersion": 1
}

================ Node #3648 ================
{
  "id": "ac819eb5-13b2-4280-b9d6-06ec1209700e",
  "name": "AI Agent",
  "type": "@n8n/n8n-nodes-langchain.agent",
  "position": [
    1020,
    360
  ],
  "parameters": {
    "agent": "sqlAgent",
    "options": {},
    "dataSource": "sqlite"
  },
  "typeVersion": 1.6
}

================ Node #3649 ================
{
  "id": "5ecaa3eb-e93e-4e41-bbc0-98a8c2b2d463",
  "name": "Chat Trigger",
  "type": "@n8n/n8n-nodes-langchain.chatTrigger",
  "position": [
    420,
    360
  ],
  "webhookId": "fb565f08-a459-4ff9-8249-1ede58599660",
  "parameters": {},
  "typeVersion": 1
}

================ Node #3650 ================
{
  "id": "7e8ec5cc-0216-4897-8a40-c44f9bbe5a9b",
  "name": "Schedule Trigger",
  "type": "n8n-nodes-base.scheduleTrigger",
  "position": [
    580,
    540
  ],
  "parameters": {
    "rule": {
      "interval": [
        {
          "triggerAtHour": 15
        }
      ]
    }
  },
  "typeVersion": 1.2
}

================ Node #3651 ================
{
  "id": "dbde804d-9c84-4023-9e05-7506cd38a460",
  "name": "Sticky Note1",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    760,
    225.26841303066982
  ],
  "parameters": {
    "color": 6,
    "width": 652.1201853643956,
    "height": 542.0867486896091,
    "content": "## Fetch the day's post from my Notion database\nA Notion _\"database\"_ is just a table on a Notion Page.\nThis table will have various rows, for which a minimum of three columns are required:\n- Name\n- Status\n- Date\n\nThe Date column is the most important, which will dictate when that row from your Notion table containing the text should be posted.\n\nNOTE: each post is required to have a copy and pasted image!"
  },
  "typeVersion": 1
}

================ Node #3652 ================
{
  "id": "95205e81-e28d-48f9-b3fb-bcf361f7799e",
  "name": "Sticky Note",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    1520,
    220
  ],
  "parameters": {
    "width": 860.9829802912225,
    "height": 540.7357881640437,
    "content": "## Format Post\nSend the post to OpenAI, where it will attempt to ask your assistant how to take the incoming blob of text, and soup it up into something more palpable for LinkedIn engagement."
  },
  "typeVersion": 1
}

================ Node #3653 ================
{
  "id": "4bc2a550-a8ad-4b25-ac53-01413277e068",
  "name": "Set post status to \"Done\"",
  "type": "n8n-nodes-base.notion",
  "position": [
    2760,
    540
  ],
  "parameters": {
    "pageId": {
      "__rl": true,
      "mode": "url",
      "value": "={{ $('query entries from Notion table for today').item.json.url }}"
    },
    "options": {},
    "resource": "databasePage",
    "operation": "update",
    "propertiesUi": {
      "propertyValues": [
        {
          "key": "Status|status",
          "statusValue": "Done"
        }
      ]
    }
  },
  "credentials": {
    "notionApi": {
      "id": "nBu4zRArkldtNypO",
      "name": "Notion account"
    }
  },
  "typeVersion": 2.2
}

================ Node #3654 ================
{
  "id": "31116f06-72ca-4219-9575-8efaefbff24b",
  "name": "Post on LinkedIn",
  "type": "n8n-nodes-base.linkedIn",
  "position": [
    2500,
    540
  ],
  "parameters": {
    "text": "={{ $json.output }}",
    "person": "_RmSSZc0jB",
    "additionalFields": {},
    "shareMediaCategory": "IMAGE"
  },
  "credentials": {
    "linkedInOAuth2Api": {
      "id": "fozSa4dLS6Jgbn4e",
      "name": "LinkedIn account 2"
    }
  },
  "typeVersion": 1
}

================ Node #3655 ================
{
  "id": "1bf0540d-a180-457a-a7d7-fb74c8119a52",
  "name": "Combine text+image",
  "type": "n8n-nodes-base.merge",
  "position": [
    2100,
    540
  ],
  "parameters": {
    "mode": "combine",
    "options": {},
    "combinationMode": "mergeByPosition"
  },
  "typeVersion": 2.1
}

================ Node #3656 ================
{
  "id": "f1fdf6f7-a75c-451b-8bce-ea581b4b6197",
  "name": "Fetch image from post",
  "type": "n8n-nodes-base.httpRequest",
  "position": [
    1640,
    620
  ],
  "parameters": {
    "url": "={{ $json.url[0] }}",
    "options": {}
  },
  "typeVersion": 4.2
}

================ Node #3657 ================
{
  "id": "00e2bbcb-bac0-4a7e-9892-59f41a26ce9d",
  "name": "Reformat Post Text",
  "type": "@n8n/n8n-nodes-langchain.openAi",
  "position": [
    1620,
    440
  ],
  "parameters": {
    "text": "=Thank you kindly for your help, please refer to the following LinkedIn post, and output a reformatted version employing thoroughly thought-out paragraph breaks, and lists if present:\n```\n{{ $json.content.join(\" \") }}\n```",
    "prompt": "define",
    "options": {},
    "resource": "assistant",
    "assistantId": {
      "__rl": true,
      "mode": "list",
      "value": "asst_J1KuOx5wTLrjEHuy5q94jEgh",
      "cachedResultName": "LinkedIn Post Reviewer"
    }
  },
  "credentials": {
    "openAiApi": {
      "id": "Gxn0kNMCREcTNGcB",
      "name": "OpenAi account 2"
    }
  },
  "typeVersion": 1.3
}

================ Node #3658 ================
{
  "id": "119d7fc7-ed62-4a73-916e-8baf19ab1d86",
  "name": "get all content from post page",
  "type": "n8n-nodes-base.notion",
  "position": [
    1020,
    540
  ],
  "parameters": {
    "blockId": {
      "__rl": true,
      "mode": "url",
      "value": "={{ $json.url }}"
    },
    "resource": "block",
    "operation": "getAll",
    "returnAll": true
  },
  "credentials": {
    "notionApi": {
      "id": "nBu4zRArkldtNypO",
      "name": "Notion account"
    }
  },
  "typeVersion": 2.2
}

================ Node #3659 ================
{
  "id": "461d4dd2-a91a-4219-bd20-6dd3398d4274",
  "name": "Pull together all text blocks + image",
  "type": "n8n-nodes-base.aggregate",
  "position": [
    1240,
    540
  ],
  "parameters": {
    "options": {},
    "fieldsToAggregate": {
      "fieldToAggregate": [
        {
          "fieldToAggregate": "content"
        },
        {
          "fieldToAggregate": "image.file.url"
        }
      ]
    }
  },
  "typeVersion": 1
}

================ Node #3660 ================
{
  "id": "72052eec-c180-4da5-ba15-1a69a7ce6892",
  "name": "query entries from Notion table for today",
  "type": "n8n-nodes-base.notion",
  "position": [
    800,
    540
  ],
  "parameters": {
    "filters": {
      "conditions": [
        {
          "key": "Date|date",
          "date": "={{ $today.format(\"yyyy/mM/dd\") }}",
          "condition": "equals"
        }
      ]
    },
    "options": {},
    "resource": "databasePage",
    "operation": "getAll",
    "databaseId": {
      "__rl": true,
      "mode": "list",
      "value": "9aba7f55-a7de-4329-9d5b-6d127937fa49",
      "cachedResultUrl": "https://www.notion.so/9aba7f55a7de43299d5b6d127937fa49",
      "cachedResultName": "LinkedIn Posts example"
    },
    "filterType": "manual"
  },
  "credentials": {
    "notionApi": {
      "id": "nBu4zRArkldtNypO",
      "name": "Notion account"
    }
  },
  "typeVersion": 2.2
}

================ Node #3661 ================
{
  "id": "73b64763-5e18-4ff1-bb52-ba25a08d3c3a",
  "name": "If params correct",
  "type": "n8n-nodes-base.if",
  "position": [
    500,
    200
  ],
  "parameters": {
    "options": {},
    "conditions": {
      "options": {
        "leftValue": "",
        "caseSensitive": true,
        "typeValidation": "strict"
      },
      "combinator": "and",
      "conditions": [
        {
          "id": "2e968b41-88f7-4b28-9837-af50ae130979",
          "operator": {
            "type": "string",
            "operation": "exists",
            "singleValue": true
          },
          "leftValue": "voice_id",
          "rightValue": ""
        },
        {
          "id": "ad961bc9-6db8-4cac-8c63-30930e8beca7",
          "operator": {
            "type": "string",
            "operation": "exists",
            "singleValue": true
          },
          "leftValue": "text",
          "rightValue": ""
        }
      ]
    }
  },
  "typeVersion": 2
}

================ Node #3662 ================
{
  "id": "39079dec-54c5-458e-afa1-56ee5723f3a3",
  "name": "Respond to Webhook",
  "type": "n8n-nodes-base.respondToWebhook",
  "position": [
    960,
    180
  ],
  "parameters": {
    "options": {},
    "respondWith": "binary"
  },
  "typeVersion": 1.1
}

================ Node #3663 ================
{
  "id": "b6a344f4-28ac-41a7-8e6a-a2782a5d1c68",
  "name": "Webhook",
  "type": "n8n-nodes-base.webhook",
  "position": [
    300,
    200
  ],
  "webhookId": "5acc6769-6c0f-42a8-a69c-b05e437e18a9",
  "parameters": {
    "path": "generate-voice",
    "options": {},
    "httpMethod": "POST",
    "responseMode": "responseNode"
  },
  "typeVersion": 2
}

================ Node #3664 ================
{
  "id": "a25dec72-152b-4457-a18f-9cbbd31840ec",
  "name": "Generate voice",
  "type": "n8n-nodes-base.httpRequest",
  "position": [
    740,
    180
  ],
  "parameters": {
    "url": "=https://api.elevenlabs.io/v1/text-to-speech/{{ $json.body.voice_id }}",
    "method": "POST",
    "options": {},
    "jsonBody": "={\n \"text\": \"{{ $json.body.text }}\"\n} ",
    "sendBody": true,
    "sendHeaders": true,
    "specifyBody": "json",
    "authentication": "genericCredentialType",
    "genericAuthType": "httpCustomAuth",
    "headerParameters": {
      "parameters": [
        {
          "name": "Content-Type",
          "value": "application/json"
        }
      ]
    }
  },
  "credentials": {
    "httpCustomAuth": {
      "id": "nhkU37chaiBU6X3j",
      "name": "Custom Auth account"
    }
  },
  "typeVersion": 4.2
}

================ Node #3665 ================
{
  "id": "e862955e-76d9-4a24-9501-0d5eb8fbe778",
  "name": "Sticky Note",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    280,
    -360
  ],
  "parameters": {
    "width": 806.0818150700699,
    "height": 495.17470523089514,
    "content": "## Generate Text-to-Speech Using Elevenlabs via API\nThis workflow provides an API endpoint to generate speech from text using [Elevenlabs.io](https://elevenlabs.io/), a popular text-to-speech service.\n\n### Step 1: Configure Custom Credentials in n8n\nTo set up your credentials in n8n, create a new custom authentication entry with the following JSON structure:\n```json\n{\n \"headers\": {\n \"xi-api-key\": \"your-elevenlabs-api-key\"\n }\n}\n```\nReplace `\"your-elevenlabs-api-key\"` with your actual Elevenlabs API key.\n\n### Step 2: Send a POST Request to the Webhook\nSend a POST request to the workflow's webhook endpoint with these two parameters:\n- `voice_id`: The ID of the voice from Elevenlabs that you want to use.\n- `text`: The text you want to convert to speech.\n\nThis workflow has been a significant time-saver in my video production tasks. I hope it proves just as useful to you!\n\nHappy automating! \nThe n8Ninja"
  },
  "typeVersion": 1
}

================ Node #3666 ================
{
  "id": "275ca523-8b43-4723-9dc4-f5dc1832fcd1",
  "name": "Error",
  "type": "n8n-nodes-base.respondToWebhook",
  "position": [
    740,
    360
  ],
  "parameters": {
    "options": {},
    "respondWith": "json",
    "responseBody": "{\n \"error\": \"Invalid inputs.\"\n}"
  },
  "typeVersion": 1.1
}

================ Node #3667 ================
{
  "id": "8141ffad-df2a-403b-a869-799c036f9733",
  "name": "Gmail trigger",
  "type": "n8n-nodes-base.gmailTrigger",
  "position": [
    -600,
    580
  ],
  "parameters": {
    "simple": false,
    "filters": {},
    "options": {},
    "pollTimes": {
      "item": [
        {
          "mode": "everyMinute"
        }
      ]
    }
  },
  "credentials": {
    "gmailOAuth2": {
      "id": "uBcIMfsTtKjexw7I",
      "name": "Gmail (workfloowstutorial@gmail.com)"
    }
  },
  "typeVersion": 1
}

================ Node #3668 ================
{
  "id": "6d9aa398-e2de-4fd0-b939-2a12d0c9fe14",
  "name": "Get message content",
  "type": "n8n-nodes-base.gmail",
  "position": [
    -340,
    580
  ],
  "parameters": {
    "simple": false,
    "options": {},
    "messageId": "={{ $json.id }}",
    "operation": "get"
  },
  "credentials": {
    "gmailOAuth2": {
      "id": "uBcIMfsTtKjexw7I",
      "name": "Gmail (workfloowstutorial@gmail.com)"
    }
  },
  "typeVersion": 2.1
}

================ Node #3669 ================
{
  "id": "cd86bc09-8c7f-4c85-9cb3-6dbd42420672",
  "name": "Set label values",
  "type": "n8n-nodes-base.set",
  "position": [
    300,
    580
  ],
  "parameters": {
    "fields": {
      "values": [
        {
          "name": "labels",
          "type": "arrayValue",
          "arrayValue": "={{ $json.labels }}"
        }
      ]
    },
    "options": {}
  },
  "typeVersion": 3.2
}

================ Node #3670 ================
{
  "id": "329435a6-51d1-416e-9aa9-5fe9a8dce74f",
  "name": "Get all labels",
  "type": "n8n-nodes-base.gmail",
  "position": [
    580,
    460
  ],
  "parameters": {
    "resource": "label",
    "returnAll": true
  },
  "credentials": {
    "gmailOAuth2": {
      "id": "uBcIMfsTtKjexw7I",
      "name": "Gmail (workfloowstutorial@gmail.com)"
    }
  },
  "typeVersion": 2.1
}

================ Node #3671 ================
{
  "id": "7ae2dd15-472d-4a4b-b036-f80ebd7e3c28",
  "name": "Split out assigned labels",
  "type": "n8n-nodes-base.splitOut",
  "position": [
    580,
    700
  ],
  "parameters": {
    "options": {},
    "fieldToSplitOut": "labels"
  },
  "typeVersion": 1
}

================ Node #3672 ================
{
  "id": "744c7afa-75b1-4b3b-8ccb-e2106c01f387",
  "name": "Merge corresponding labels",
  "type": "n8n-nodes-base.merge",
  "position": [
    860,
    580
  ],
  "parameters": {
    "mode": "combine",
    "options": {},
    "mergeByFields": {
      "values": [
        {
          "field1": "name",
          "field2": "labels"
        }
      ]
    },
    "outputDataFrom": "input1"
  },
  "typeVersion": 2.1
}

================ Node #3673 ================
{
  "id": "e47424dc-f43e-41a9-b1e5-ab3e08cbf395",
  "name": "Aggregate label IDs",
  "type": "n8n-nodes-base.aggregate",
  "position": [
    1120,
    580
  ],
  "parameters": {
    "options": {},
    "fieldsToAggregate": {
      "fieldToAggregate": [
        {
          "renameField": true,
          "outputFieldName": "label_ids",
          "fieldToAggregate": "id"
        }
      ]
    }
  },
  "typeVersion": 1
}

================ Node #3674 ================
{
  "id": "22ba8297-8efc-463e-8ae0-385fd94a205f",
  "name": "Add labels to message",
  "type": "n8n-nodes-base.gmail",
  "position": [
    1340,
    580
  ],
  "parameters": {
    "labelIds": "={{ $json.label_ids }}",
    "messageId": "={{ $('Gmail trigger').item.json[\"id\"] }}",
    "operation": "addLabels"
  },
  "credentials": {
    "gmailOAuth2": {
      "id": "uBcIMfsTtKjexw7I",
      "name": "Gmail (workfloowstutorial@gmail.com)"
    }
  },
  "typeVersion": 2.1
}

================ Node #3675 ================
{
  "id": "7ebb1aad-00ad-43fa-9e07-e5f324864a74",
  "name": "Assign labels for message",
  "type": "@n8n/n8n-nodes-langchain.chainLlm",
  "position": [
    -80,
    580
  ],
  "parameters": {
    "prompt": "={{ $json.text }}",
    "messages": {
      "messageValues": [
        {
          "message": "Your task is to categorize the message according to the following labels.\n\nPartnership - email about sponsored content, cooperation etc.\nInquiry - email about products, services.\nNotification - email that doesn't require response. \n\nOne email can have more than one label. Return only label names in JSON format, nothing else. Do not make things up. "
        }
      ]
    }
  },
  "typeVersion": 1.3
}

================ Node #3676 ================
{
  "id": "2f82db6a-422c-4697-a629-cc782d88209d",
  "name": "Sticky Note",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    -1100,
    400
  ],
  "parameters": {
    "color": 4,
    "width": 420.4803040774015,
    "height": 240.57943708322733,
    "content": "## Add AI labels to Gmail messages\nWith this workflow you can automatically set labels for your Gmail message according to its content. \n\nIn this workflow available are 3 labels: \"Partnership\", \"Inquiry\" and \"Notification\". Feel free to adjust labels according to your needs. \n\n**Please remember to set label names both in your Gmail account and workflow.**"
  },
  "typeVersion": 1
}

================ Node #3677 ================
{
  "id": "4a10fb2b-aebb-4735-bbdb-7f07f1136d95",
  "name": "Sticky Note1",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    -1100,
    660
  ],
  "parameters": {
    "width": 421.0932411886662,
    "height": 257.42916378714597,
    "content": "## \u26a0\ufe0f Note\n\n1. Complete video guide for this workflow is available [on my YouTube](https://youtu.be/a8Dhj3Zh9vQ). \n2. Remember to add your credentials and configure nodes (covered in the video guide).\n3. If you like this workflow, please subscribe to [my YouTube channel](https://www.youtube.com/@workfloows) and/or [my newsletter](https://workfloows.com/).\n\n**Thank you for your support!**"
  },
  "typeVersion": 1
}

================ Node #3678 ================
{
  "id": "76e62351-d502-4377-9df2-fe92df00fe03",
  "name": "Sticky Note2",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    -660,
    400
  ],
  "parameters": {
    "width": 238.4602598584674,
    "height": 348.5873725349161,
    "content": "### Gmail Trigger\nReceive data from Gmail about new incoming message. \n\n\u26a0\ufe0f Set polling interval according to your needs."
  },
  "typeVersion": 1
}

================ Node #3679 ================
{
  "id": "c10702db-211f-4638-bcf0-fbbe18251cb7",
  "name": "Sticky Note4",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    60,
    780
  ],
  "parameters": {
    "width": 241.53974014153226,
    "height": 319.3323098457962,
    "content": "###\n\n\n\n\n\n\n\n\n\n\n### JSON schema\nEdit JSON schema and label names according to your needs.\n\n\u26a0\ufe0f **Label names in system prompt and JSON schema should be the same.**"
  },
  "typeVersion": 1
}

================ Node #3680 ================
{
  "id": "cb6e3573-3d4d-4313-a97e-86a017438399",
  "name": "Sticky Note5",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    800,
    420
  ],
  "parameters": {
    "width": 226.14233872620645,
    "height": 347.0476323933831,
    "content": "### Merge labels\nCombine labels retrieved from Gmail account and assigned by AI together."
  },
  "typeVersion": 1
}

================ Node #3681 ================
{
  "id": "8cfb4341-98e6-4944-b26c-15e39184f468",
  "name": "Sticky Note6",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    1060,
    420
  ],
  "parameters": {
    "width": 452.48413953150185,
    "height": 347.0476323933831,
    "content": "### Aggregarte labels and add to message\nCreate array of label IDs and add to the desired email message in Gmail."
  },
  "typeVersion": 1
}

================ Node #3682 ================
{
  "id": "bb9766e8-0b72-47f8-9a8e-0b291609e814",
  "name": "Sticky Note7",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    -400,
    400
  ],
  "parameters": {
    "width": 238.4602598584674,
    "height": 348.5873725349161,
    "content": "### Get message content\nBased on Gmail message ID retrieve body content of the email and pass it to AI chain."
  },
  "typeVersion": 1
}

================ Node #3683 ================
{
  "id": "48630cbd-8336-4577-928e-37341f09ef9b",
  "name": "Sticky Note8",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    -140,
    400
  ],
  "parameters": {
    "width": 378.57661273793565,
    "height": 348.5873725349161,
    "content": "### Assign labels\nLet the AI decide which labels suit the best content of the message.\n\n\u26a0\ufe0f **Remember to edit system prompt** - modify label names and instructions according to your needs."
  },
  "typeVersion": 1
}

================ Node #3684 ================
{
  "id": "60a9d75e-1564-4b1d-b3f2-acc2e3bf2411",
  "name": "JSON Parser",
  "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
  "position": [
    140,
    800
  ],
  "parameters": {
    "jsonSchema": "{\n \"type\": \"object\",\n \"properties\": {\n \"labels\": {\n \"type\": \"array\",\n \"items\": {\n \"type\": \"string\",\n \"enum\": [\"Inquiry\", \"Partnership\", \"Notification\"]\n }\n }\n },\n \"required\": [\"labels\"]\n}\n"
  },
  "typeVersion": 1
}

================ Node #3685 ================
{
  "id": "2bdf3fed-8a7f-411a-bad4-266bfea5cede",
  "name": "OpenAI Chat",
  "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
  "position": [
    -120,
    800
  ],
  "parameters": {
    "model": "gpt-4-turbo-preview",
    "options": {
      "temperature": 0,
      "responseFormat": "json_object"
    }
  },
  "credentials": {
    "openAiApi": {
      "id": "jazew1WAaSRrjcHp",
      "name": "OpenAI (workfloows@gmail.com)"
    }
  },
  "typeVersion": 1
}

================ Node #3686 ================
{
  "id": "ec3b86be-4113-4fd5-8365-02adb67693e9",
  "name": "Embeddings OpenAI1",
  "type": "@n8n/n8n-nodes-langchain.embeddingsOpenAi",
  "position": [
    1960,
    720
  ],
  "parameters": {
    "options": {}
  },
  "credentials": {
    "openAiApi": {
      "id": "fOF5kro9BJ6KMQ7n",
      "name": "OpenAi account"
    }
  },
  "typeVersion": 1
}

================ Node #3687 ================
{
  "id": "42fd8020-3861-4d0f-a7a2-70e2c35f0bed",
  "name": "On new manual Chat Message",
  "type": "@n8n/n8n-nodes-langchain.manualChatTrigger",
  "disabled": true,
  "position": [
    1620,
    240
  ],
  "parameters": {},
  "typeVersion": 1
}

================ Node #3688 ================
{
  "id": "a9b48d04-691e-4537-90f8-d7a4aa6153af",
  "name": "Sticky Note1",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    1560,
    120
  ],
  "parameters": {
    "color": 6,
    "width": 903.0896125323785,
    "height": 733.5099670584011,
    "content": "## Step 2: Setup the Q&A \n### The incoming message from the webhook is queried from the Supabase Vector Store. The response is provided in the response webhook. "
  },
  "typeVersion": 1
}

================ Node #3689 ================
{
  "id": "472b4800-745a-4337-9545-163247f7e9ae",
  "name": "Retrieval QA Chain",
  "type": "@n8n/n8n-nodes-langchain.chainRetrievalQa",
  "position": [
    1880,
    240
  ],
  "parameters": {
    "query": "={{ $json.body.input }}"
  },
  "typeVersion": 1
}

================ Node #3690 ================
{
  "id": "e58bd82d-abc6-44ed-8e93-ec5436126d66",
  "name": "Respond to Webhook",
  "type": "n8n-nodes-base.respondToWebhook",
  "position": [
    2280,
    240
  ],
  "parameters": {
    "options": {},
    "respondWith": "text",
    "responseBody": "={{ $json.response.text }}"
  },
  "typeVersion": 1
}

================ Node #3691 ================
{
  "id": "04bbf01e-8269-47c7-897d-4ea94a1bd1c0",
  "name": "Vector Store Retriever",
  "type": "@n8n/n8n-nodes-langchain.retrieverVectorStore",
  "position": [
    2020,
    440
  ],
  "parameters": {
    "topK": 5
  },
  "typeVersion": 1
}

================ Node #3692 ================
{
  "id": "feee6d68-2e0d-4d40-897e-c1d833a13bf2",
  "name": "Webhook1",
  "type": "n8n-nodes-base.webhook",
  "position": [
    1620,
    420
  ],
  "webhookId": "679f4afb-189e-4f04-9dc0-439eec2ec5f1",
  "parameters": {
    "path": "19f5499a-3083-4783-93a0-e8ed76a9f742",
    "options": {},
    "httpMethod": "POST",
    "responseMode": "responseNode"
  },
  "typeVersion": 1.1
}

================ Node #3693 ================
{
  "id": "1b8d251f-7069-4d7d-b6d6-4bfa683d4ad1",
  "name": "When clicking \"Execute Workflow\"",
  "type": "n8n-nodes-base.manualTrigger",
  "position": [
    280,
    260
  ],
  "parameters": {},
  "typeVersion": 1
}

================ Node #3694 ================
{
  "id": "b746a7a4-ed94-4332-bf7b-65aadcf54130",
  "name": "Google Drive",
  "type": "n8n-nodes-base.googleDrive",
  "position": [
    580,
    260
  ],
  "parameters": {
    "fileId": {
      "__rl": true,
      "mode": "list",
      "value": "1LZezppYrWpMStr4qJXtoIX-Dwzvgehll",
      "cachedResultUrl": "https://drive.google.com/file/d/1LZezppYrWpMStr4qJXtoIX-Dwzvgehll/view?usp=drivesdk",
      "cachedResultName": "crowdstrike.pdf"
    },
    "options": {},
    "operation": "download"
  },
  "credentials": {
    "googleDriveOAuth2Api": {
      "id": "1tsDIpjUaKbXy0be",
      "name": "Google Drive account"
    }
  },
  "typeVersion": 3
}

================ Node #3695 ================
{
  "id": "83a7d470-f934-436d-ba3f-1ae7c776f5a5",
  "name": "Binary to Document",
  "type": "@n8n/n8n-nodes-langchain.documentBinaryInputLoader",
  "position": [
    860,
    480
  ],
  "parameters": {
    "loader": "pdfLoader",
    "options": {}
  },
  "typeVersion": 1
}

================ Node #3696 ================
{
  "id": "b52b4a90-99a1-49cc-a6f0-7551d6754496",
  "name": "Recursive Character Text Splitter",
  "type": "@n8n/n8n-nodes-langchain.textSplitterRecursiveCharacterTextSplitter",
  "position": [
    860,
    640
  ],
  "parameters": {
    "options": {},
    "chunkSize": 3000,
    "chunkOverlap": 200
  },
  "typeVersion": 1
}

================ Node #3697 ================
{
  "id": "b525e130-2029-4f55-a603-1fdc05a19c17",
  "name": "Embeddings OpenAI",
  "type": "@n8n/n8n-nodes-langchain.embeddingsOpenAi",
  "position": [
    1160,
    480
  ],
  "parameters": {
    "options": {}
  },
  "credentials": {
    "openAiApi": {
      "id": "fOF5kro9BJ6KMQ7n",
      "name": "OpenAi account"
    }
  },
  "typeVersion": 1
}

================ Node #3698 ================
{
  "id": "5358c53f-55f9-431d-8956-c6bae7ad25bc",
  "name": "Sticky Note",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    540,
    120
  ],
  "parameters": {
    "color": 6,
    "width": 772.0680602743597,
    "height": 732.3675002130781,
    "content": "## Step 1: Upserting the PDF\n### Fetch file from Google Drive, split it into chunks and insert into Supabase index\n\n"
  },
  "typeVersion": 1
}

================ Node #3699 ================
{
  "id": "fb91e2da-0eeb-47a5-aa49-65bf56986857",
  "name": "Qdrant Vector Store",
  "type": "@n8n/n8n-nodes-langchain.vectorStoreQdrant",
  "position": [
    940,
    260
  ],
  "parameters": {
    "mode": "insert",
    "options": {},
    "qdrantCollection": {
      "__rl": true,
      "mode": "id",
      "value": "=crowd"
    }
  },
  "credentials": {
    "qdrantApi": {
      "id": "U5CpjAgFeXziP3I1",
      "name": "QdrantApi account"
    }
  },
  "typeVersion": 1
}

================ Node #3700 ================
{
  "id": "89e14837-d1fc-4b1e-9ebc-7cf3e7fd9a70",
  "name": "Qdrant Vector Store1",
  "type": "@n8n/n8n-nodes-langchain.vectorStoreQdrant",
  "position": [
    1980,
    600
  ],
  "parameters": {
    "qdrantCollection": {
      "__rl": true,
      "mode": "id",
      "value": "={{ $json.body.company }}"
    }
  },
  "credentials": {
    "qdrantApi": {
      "id": "U5CpjAgFeXziP3I1",
      "name": "QdrantApi account"
    }
  },
  "typeVersion": 1
}

================ Node #3701 ================
{
  "id": "c619245b-5ea0-4354-974d-21ec6b8efa93",
  "name": "OpenAI Chat Model",
  "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
  "position": [
    1880,
    460
  ],
  "parameters": {
    "options": {}
  },
  "credentials": {
    "openAiApi": {
      "id": "fOF5kro9BJ6KMQ7n",
      "name": "OpenAi account"
    }
  },
  "typeVersion": 1
}

================ Node #3702 ================
{
  "id": "e4aa780d-8069-4308-a61f-82ed876af71a",
  "name": "Sticky Note2",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    -560,
    120
  ],
  "parameters": {
    "color": 6,
    "width": 710.9124489067698,
    "height": 726.4452519516944,
    "content": "## Start here: Step-by Step Youtube Tutorial :star:\n\n[![Building an AI Crew to Analyze Financial Data with CrewAI and n8n](https://img.youtube.com/vi/pMvizUx5n1g/sddefault.jpg)](https://www.youtube.com/watch?v=pMvizUx5n1g)\n"
  },
  "typeVersion": 1
}

================ Node #3703 ================
{
  "id": "0b4eb8e4-e98b-4f67-b134-914a5aa46b4d",
  "name": "Telegram Trigger",
  "type": "n8n-nodes-base.telegramTrigger",
  "position": [
    960,
    400
  ],
  "webhookId": "9c8b833c-7aa7-430d-8fc0-47936f695ddf",
  "parameters": {
    "updates": [
      "message"
    ],
    "additionalFields": {}
  },
  "credentials": {
    "telegramApi": {
      "id": "4lzd2F9cNrnR7j0j",
      "name": "Telegram account"
    }
  },
  "typeVersion": 1.1
}

================ Node #3704 ================
{
  "id": "339246f2-76cb-44c4-8828-da0cb5d3ad5e",
  "name": "OpenAI Chat Model",
  "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
  "position": [
    1100,
    600
  ],
  "parameters": {
    "options": {}
  },
  "credentials": {
    "openAiApi": {
      "id": "m3YyjGXFLLWwcnk7",
      "name": "OpenAi account"
    }
  },
  "typeVersion": 1
}

================ Node #3705 ================
{
  "id": "70a981e2-7833-473b-a27a-fedf860901cb",
  "name": "AI Agent",
  "type": "@n8n/n8n-nodes-langchain.agent",
  "position": [
    1200,
    400
  ],
  "parameters": {
    "text": "=Respond to this as a helpful assistant with emojis: {{ $json.message.text }}",
    "options": {}
  },
  "typeVersion": 1.2
}

================ Node #3706 ================
{
  "id": "fb6ff65b-56b4-44c4-978a-b9a5c3d535d6",
  "name": "Telegram",
  "type": "n8n-nodes-base.telegram",
  "position": [
    1560,
    400
  ],
  "parameters": {
    "text": "={{ $json.output }}",
    "chatId": "={{ $('Telegram Trigger').item.json.message.chat.id }}",
    "additionalFields": {
      "appendAttribution": false
    }
  },
  "credentials": {
    "telegramApi": {
      "id": "4lzd2F9cNrnR7j0j",
      "name": "Telegram account"
    }
  },
  "typeVersion": 1.1
}

================ Node #3707 ================
{
  "id": "89af21df-1125-4df6-9d43-a643e02bb53f",
  "name": "Execute Workflow Trigger",
  "type": "n8n-nodes-base.executeWorkflowTrigger",
  "position": [
    540,
    1240
  ],
  "parameters": {},
  "typeVersion": 1
}

================ Node #3708 ================
{
  "id": "f571d0cc-eb43-46c9-bdd5-45abc51dfbe7",
  "name": "Sticky Note1",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    461.9740563285368,
    970.616715060075
  ],
  "parameters": {
    "color": 7,
    "width": 1449.2963504228514,
    "height": 612.0936015224503,
    "content": "### Sub-workflow: Custom tool\nThis can be called by the agent above. It returns three different types of data from the Google Sheet, which can be used together for more complex queries without returning the whole sheet (which might be too big for GPT to handle)"
  },
  "typeVersion": 1
}

================ Node #3709 ================
{
  "id": "8761e314-c1f2-4edd-88ea-bfeb02dc8f1a",
  "name": "Sticky Note2",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    460,
    460
  ],
  "parameters": {
    "color": 7,
    "width": 927.5,
    "height": 486.5625,
    "content": "### Main workflow: AI agent using custom tool"
  },
  "typeVersion": 1
}

================ Node #3710 ================
{
  "id": "e793b816-68d9-42ef-b9b0-6fe22aa375e8",
  "name": "Sticky Note3",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    300,
    540
  ],
  "parameters": {
    "width": 185.9375,
    "height": 183.85014518022527,
    "content": "## Try me out\n\nClick the 'Chat' button at the bottom and enter:\n\n_Which is our biggest customer?_"
  },
  "typeVersion": 1
}

================ Node #3711 ================
{
  "id": "f895d926-0f70-415b-9492-c3ecf186e761",
  "name": "Get Google sheet contents",
  "type": "n8n-nodes-base.googleSheets",
  "position": [
    980,
    1240
  ],
  "parameters": {
    "options": {},
    "sheetName": {
      "__rl": true,
      "mode": "url",
      "value": "={{ $json.sheetUrl }}"
    },
    "documentId": {
      "__rl": true,
      "mode": "url",
      "value": "={{ $json.sheetUrl }}"
    }
  },
  "credentials": {
    "googleSheetsOAuth2Api": {
      "id": "cTLaIZBSFJlHuZNs",
      "name": "Google Sheets account"
    }
  },
  "typeVersion": 4.2
}

================ Node #3712 ================
{
  "id": "daca1624-6c35-473a-bf3a-5fa0686a0a62",
  "name": "Set Google Sheet URL",
  "type": "n8n-nodes-base.set",
  "position": [
    760,
    1240
  ],
  "parameters": {
    "fields": {
      "values": [
        {
          "name": "sheetUrl",
          "stringValue": "https://docs.google.com/spreadsheets/d/1GjFBV8HpraNWG_JyuaQAgTb3zUGguh0S_25nO0CMd8A/edit#gid=736425281"
        }
      ]
    },
    "options": {}
  },
  "typeVersion": 3.2
}

================ Node #3713 ================
{
  "id": "68edca41-0196-47d8-9378-31fed0a70918",
  "name": "Get column names",
  "type": "n8n-nodes-base.set",
  "position": [
    1460,
    1060
  ],
  "parameters": {
    "fields": {
      "values": [
        {
          "name": "response",
          "stringValue": "={{ Object.keys($json) }}"
        }
      ]
    },
    "include": "none",
    "options": {}
  },
  "executeOnce": true,
  "typeVersion": 3.2
}

================ Node #3714 ================
{
  "id": "7a9dea08-f9e9-4139-842a-9066a9cf04ea",
  "name": "Prepare output",
  "type": "n8n-nodes-base.code",
  "position": [
    1720,
    1240
  ],
  "parameters": {
    "jsCode": "return {\n 'response': JSON.stringify($input.all().map(x => x.json))\n}"
  },
  "typeVersion": 2
}

================ Node #3715 ================
{
  "id": "616eebc5-5c5c-4fa1-b13f-61a477742c72",
  "name": "List columns tool",
  "type": "@n8n/n8n-nodes-langchain.toolWorkflow",
  "position": [
    940,
    780
  ],
  "parameters": {
    "name": "list_columns",
    "fields": {
      "values": [
        {
          "name": "operation",
          "stringValue": "column_names"
        }
      ]
    },
    "workflowId": "={{ $workflow.id }}",
    "description": "=List all column names in customer data\n\nCall this tool to find out what data is available for each customer. It should be called first at the beginning to understand which columns are available for querying."
  },
  "typeVersion": 1
}

================ Node #3716 ================
{
  "id": "891ad3a8-72f0-45ad-8777-1647a7342c00",
  "name": "Get customer tool",
  "type": "@n8n/n8n-nodes-langchain.toolWorkflow",
  "position": [
    1220,
    780
  ],
  "parameters": {
    "name": "get_customer",
    "fields": {
      "values": [
        {
          "name": "operation",
          "stringValue": "row"
        }
      ]
    },
    "workflowId": "={{ $workflow.id }}",
    "description": "=Get all columns for a given customer\n\nThe input should be a stringified row number of the customer to fetch; only single string inputs are allowed. Returns a JSON object with all the column names and their values."
  },
  "typeVersion": 1
}

================ Node #3717 ================
{
  "id": "0f3ca6ff-fc01-4f33-b1a7-cb82a0ec5c88",
  "name": "Get column values tool",
  "type": "@n8n/n8n-nodes-langchain.toolWorkflow",
  "position": [
    1080,
    780
  ],
  "parameters": {
    "name": "column_values",
    "fields": {
      "values": [
        {
          "name": "operation",
          "stringValue": "column_values"
        }
      ]
    },
    "workflowId": "={{ $workflow.id }}",
    "description": "=Get the specified column value for all customers\n\nUse this tool to find out which customers have a certain value for a given column. Returns an array of JSON objects, one per customer. Each JSON object includes the column being requested plus the row_number column. Input should be a single string representing the name of the column to fetch.\n"
  },
  "typeVersion": 1
}

================ Node #3718 ================
{
  "id": "deef6eb4-2a11-4490-ad56-bc1ea9077843",
  "name": "Sticky Note",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    900,
    740.8693557231958
  ],
  "parameters": {
    "color": 7,
    "width": 432.3271051132649,
    "height": 179.21380662202682,
    "content": "These tools all call the sub-workflow below"
  },
  "typeVersion": 1
}

================ Node #3719 ================
{
  "id": "94e4dbe5-dc41-4879-bffc-ec8f5341f3b5",
  "name": "Sticky Note4",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    723,
    1172
  ],
  "parameters": {
    "width": 179.99762227826224,
    "height": 226.64416053838073,
    "content": "Change the URL of the Google Sheet here"
  },
  "typeVersion": 1
}

================ Node #3720 ================
{
  "id": "dbb887f0-93a7-466e-9c9f-8aa4e7da935d",
  "name": "Prepare column data",
  "type": "n8n-nodes-base.set",
  "position": [
    1460,
    1240
  ],
  "parameters": {
    "fields": {
      "values": [
        {
          "name": "={{ $('Execute Workflow Trigger').item.json.query }}",
          "stringValue": "={{ $json[$('Execute Workflow Trigger').item.json.query] }}"
        },
        {
          "name": "row_number",
          "stringValue": "={{ $json.row_number }}"
        }
      ]
    },
    "include": "none",
    "options": {}
  },
  "typeVersion": 3.2
}

================ Node #3721 ================
{
  "id": "041d32ca-e59a-4b67-a3e6-4e2f19e3de72",
  "name": "Filter",
  "type": "n8n-nodes-base.filter",
  "position": [
    1460,
    1400
  ],
  "parameters": {
    "options": {
      "looseTypeValidation": true
    },
    "conditions": {
      "options": {
        "leftValue": "",
        "caseSensitive": true,
        "typeValidation": "loose"
      },
      "combinator": "and",
      "conditions": [
        {
          "id": "bf712098-97e4-42cb-8e08-2ee32d19d3e7",
          "operator": {
            "type": "number",
            "operation": "equals"
          },
          "leftValue": "={{ $json.row_number }}",
          "rightValue": "={{ $('Execute Workflow Trigger').item.json.query }}"
        }
      ]
    }
  },
  "typeVersion": 2,
  "alwaysOutputData": true
}

================ Node #3722 ================
{
  "id": "69b9e70a-9104-4731-9f16-8324a3f7e423",
  "name": "Check operation",
  "type": "n8n-nodes-base.switch",
  "position": [
    1200,
    1240
  ],
  "parameters": {
    "rules": {
      "values": [
        {
          "outputKey": "col names",
          "conditions": {
            "options": {
              "leftValue": "",
              "caseSensitive": true,
              "typeValidation": "strict"
            },
            "combinator": "and",
            "conditions": [
              {
                "operator": {
                  "type": "string",
                  "operation": "equals"
                },
                "leftValue": "={{ $('Execute Workflow Trigger').item.json.operation }}",
                "rightValue": "column_names"
              }
            ]
          },
          "renameOutput": true
        },
        {
          "outputKey": "col values",
          "conditions": {
            "options": {
              "leftValue": "",
              "caseSensitive": true,
              "typeValidation": "strict"
            },
            "combinator": "and",
            "conditions": [
              {
                "id": "b7968ce7-0d20-43d0-bcca-7b66e0aec715",
                "operator": {
                  "name": "filter.operator.equals",
                  "type": "string",
                  "operation": "equals"
                },
                "leftValue": "={{ $('Execute Workflow Trigger').item.json.operation }}",
                "rightValue": "column_values"
              }
            ]
          },
          "renameOutput": true
        },
        {
          "outputKey": "rows",
          "conditions": {
            "options": {
              "leftValue": "",
              "caseSensitive": true,
              "typeValidation": "strict"
            },
            "combinator": "and",
            "conditions": [
              {
                "id": "de3bb9b5-edc6-4448-839e-eda07b72144a",
                "operator": {
                  "name": "filter.operator.equals",
                  "type": "string",
                  "operation": "equals"
                },
                "leftValue": "={{ $('Execute Workflow Trigger').item.json.operation }}",
                "rightValue": "row"
              }
            ]
          },
          "renameOutput": true
        }
      ]
    },
    "options": {}
  },
  "typeVersion": 3
}

================ Node #3723 ================
{
  "id": "d955e499-5a3e-45a3-9fc8-266e2f687ecc",
  "name": "OpenAI Chat Model",
  "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
  "position": [
    800,
    780
  ],
  "parameters": {
    "model": "gpt-3.5-turbo-0125",
    "options": {
      "temperature": 0
    }
  },
  "credentials": {
    "openAiApi": {
      "id": "58qWzMjeNE8GjMmI",
      "name": "OpenAi account"
    }
  },
  "typeVersion": 1
}

================ Node #3724 ================
{
  "id": "28fbda0b-1e01-4f59-af5b-fe02eba899b1",
  "name": "Chat Trigger",
  "type": "@n8n/n8n-nodes-langchain.chatTrigger",
  "position": [
    620,
    560
  ],
  "webhookId": "2b9d9c42-adf4-425d-b0a5-e4f60c750e63",
  "parameters": {},
  "typeVersion": 1
}

================ Node #3725 ================
{
  "id": "c89614f4-d8b1-4f7b-9e7c-856e3f89eadb",
  "name": "AI Agent",
  "type": "@n8n/n8n-nodes-langchain.agent",
  "position": [
    900,
    560
  ],
  "parameters": {
    "agent": "reActAgent",
    "options": {
      "suffix": "Begin! Use `list_columns` tool first to determine which columns are available.\n\n\tQuestion: {input}\n\tThought:{agent_scratchpad}",
      "returnIntermediateSteps": false
    }
  },
  "typeVersion": 1.3
}

================ Node #3726 ================
{
  "id": "e275f31f-6a5f-4444-8bf7-6c003a8e53df",
  "name": "OpenAI Chat Model",
  "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
  "position": [
    1100,
    600
  ],
  "parameters": {
    "model": "gpt-4-1106-preview",
    "options": {
      "temperature": 0.7,
      "frequencyPenalty": 0.2
    }
  },
  "credentials": {
    "openAiApi": {
      "id": "63",
      "name": "OpenAi account"
    }
  },
  "typeVersion": 1
}

================ Node #3727 ================
{
  "id": "f25a6666-ff23-4372-afd0-4920a99aab6a",
  "name": "Window Buffer Memory",
  "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
  "position": [
    1220,
    600
  ],
  "parameters": {
    "sessionKey": "=chat_with_{{ $('Listen for incoming events').first().json.message.chat.id }}",
    "contextWindowLength": 10
  },
  "typeVersion": 1
}

================ Node #3728 ================
{
  "id": "96faef5d-0349-47fe-a7cf-150953490e90",
  "name": "Telegram",
  "type": "n8n-nodes-base.telegram",
  "onError": "continueErrorOutput",
  "position": [
    1500,
    380
  ],
  "parameters": {
    "text": "={{ $json.output }}",
    "chatId": "={{ $('Listen for incoming events').first().json.message.from.id }}",
    "additionalFields": {
      "parse_mode": "HTML",
      "appendAttribution": false
    }
  },
  "credentials": {
    "telegramApi": {
      "id": "70",
      "name": "Telegram sdfsdfsdfsdfsfd_bot"
    }
  },
  "typeVersion": 1.1
}

================ Node #3729 ================
{
  "id": "5ad43039-aaa6-43cd-9b0f-1d02f4d9c4ff",
  "name": "Correct errors",
  "type": "n8n-nodes-base.telegram",
  "position": [
    1700,
    380
  ],
  "parameters": {
    "text": "={{ $('AI Agent').item.json.output.replace(/&/g, \"&amp;\").replace(/>/g, \"&gt;\").replace(/</g, \"&lt;\").replace(/\"/g, \"&quot;\") }}",
    "chatId": "={{ $('Listen for incoming events').first().json.message.from.id }}",
    "additionalFields": {
      "parse_mode": "HTML",
      "appendAttribution": false
    }
  },
  "credentials": {
    "telegramApi": {
      "id": "70",
      "name": "Telegram sdfsdfsdfsdfsfd_bot"
    }
  },
  "typeVersion": 1.1
}

================ Node #3730 ================
{
  "id": "0349a250-966a-4064-970a-8bcfba1647ad",
  "name": "Execute Workflow Trigger",
  "type": "n8n-nodes-base.executeWorkflowTrigger",
  "position": [
    940,
    900
  ],
  "parameters": {},
  "typeVersion": 1
}

================ Node #3731 ================
{
  "id": "69a45c1f-838f-49ce-9b89-75db6a8b876f",
  "name": "Listen for incoming events",
  "type": "n8n-nodes-base.telegramTrigger",
  "position": [
    940,
    380
  ],
  "webhookId": "322dce18-f93e-4f86-b9b1-3305519b7834",
  "parameters": {
    "updates": [
      "message"
    ],
    "additionalFields": {}
  },
  "credentials": {
    "telegramApi": {
      "id": "70",
      "name": "Telegram sdfsdfsdfsdfsfd_bot"
    }
  },
  "typeVersion": 1
}

================ Node #3732 ================
{
  "id": "2f5d5f25-9870-40d6-ad42-52750e62de63",
  "name": "Send back an image",
  "type": "n8n-nodes-base.telegram",
  "position": [
    1300,
    900
  ],
  "parameters": {
    "file": "={{ $json.data[0].url }}",
    "chatId": "={{ $('Execute Workflow Trigger').first().json.chat_id }}",
    "operation": "sendPhoto",
    "additionalFields": {
      "parse_mode": "HTML"
    }
  },
  "credentials": {
    "telegramApi": {
      "id": "70",
      "name": "Telegram sdfsdfsdfsdfsfd_bot"
    }
  },
  "typeVersion": 1.1
}

================ Node #3733 ================
{
  "id": "50b43dbf-39e3-4d00-8e47-01e8c193cd1a",
  "name": "add response field",
  "type": "n8n-nodes-base.set",
  "position": [
    1480,
    900
  ],
  "parameters": {
    "fields": {
      "values": [
        {
          "name": "response",
          "stringValue": "Success"
        }
      ]
    },
    "options": {}
  },
  "typeVersion": 3.2
}

================ Node #3734 ================
{
  "id": "171bee83-c8e1-4af3-9d1c-12cb6ede4943",
  "name": "Sticky Note",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    900,
    840
  ],
  "parameters": {
    "width": 752.0361990950231,
    "height": 247.42081447963798,
    "content": "## Generate an image with Dall-E 3 and send it via Telegram"
  },
  "typeVersion": 1
}

================ Node #3735 ================
{
  "id": "4d81d201-70bf-4c80-9689-4b65851ad770",
  "name": "Dall-E 3 Tool",
  "type": "@n8n/n8n-nodes-langchain.toolWorkflow",
  "position": [
    1360,
    600
  ],
  "parameters": {
    "name": "Draw_Dalle_image",
    "fields": {
      "values": [
        {
          "name": "chat_id",
          "stringValue": "={{ $('Listen for incoming events').first().json.message.chat.id }}"
        }
      ]
    },
    "workflowId": "={{ $workflow.id }}",
    "description": "Call this tool to request a Dall-E 3 model, when the user asks to draw something. Please send the user request for an image as an inline query string."
  },
  "typeVersion": 1
}

================ Node #3736 ================
{
  "id": "39d532d3-8c96-4722-9cb0-cad92ff39e94",
  "name": "Generate image in Dall-E 3",
  "type": "n8n-nodes-base.httpRequest",
  "position": [
    1120,
    900
  ],
  "parameters": {
    "url": "https://api.openai.com/v1/images/generations",
    "method": "POST",
    "options": {},
    "sendBody": true,
    "authentication": "predefinedCredentialType",
    "bodyParameters": {
      "parameters": [
        {
          "name": "model",
          "value": "dall-e-3"
        },
        {
          "name": "prompt",
          "value": "={{ $json.query }}"
        },
        {
          "name": "n",
          "value": 1
        },
        {
          "name": "size",
          "value": "1024x1024"
        }
      ]
    },
    "nodeCredentialType": "openAiApi"
  },
  "credentials": {
    "openAiApi": {
      "id": "63",
      "name": "OpenAi account"
    }
  },
  "typeVersion": 4.1
}

================ Node #3737 ================
{
  "id": "e5aa496d-55d3-456b-82bb-fe10a06c7338",
  "name": "AI Agent",
  "type": "@n8n/n8n-nodes-langchain.agent",
  "position": [
    1140,
    380
  ],
  "parameters": {
    "text": "={{ $json.message.text }}",
    "options": {
      "humanMessage": "TOOLS\n------\nAssistant can ask the user to use tools to look up information that may be helpful in answering the users original question. The tools the human can use are:\n\n{tools}\n\n{format_instructions}\n\nUSER'S INPUT\n--------------------\nHere is the user's input (remember to respond with a markdown code snippet of a json blob with a single action, and NOTHING else):\n\n{{input}}",
      "systemMessage": "=You are a helpful AI assistant. You are chatting with the user named `{{ $json.message.from.first_name }}`. Today is {{ DateTime.fromISO($now).toLocaleString(DateTime.DATETIME_FULL) }}\n\nFrom time to time call a user by name (if the user name is provided). In your reply, always send a message in Telegram-supported HTML format. Here are the formatting instructions:\n1. The following tags are currently supported:\n<b>bold</b>, <strong>bold</strong>\n<i>italic</i>, <em>italic</em>\n<u>underline</u>, <ins>underline</ins>\n<s>strikethrough</s>, <strike>strikethrough</strike>, <del>strikethrough</del>\n<span class=\"tg-spoiler\">spoiler</span>, <tg-spoiler>spoiler</tg-spoiler>\n<b>bold <i>italic bold <s>italic bold strikethrough <span class=\"tg-spoiler\">italic bold strikethrough spoiler</span></s> <u>underline italic bold</u></i> bold</b>\n<a href=\"http://www.example.com/\">inline URL</a>\n<code>inline fixed-width code</code>\n<pre>pre-formatted fixed-width code block</pre>\n2. Any code that you send should be wrapped in these tags: <pre><code class=\"language-python\">pre-formatted fixed-width code block written in the Python programming language</code></pre>\nOther programming languages are supported as well.\n3. All <, > and & symbols that are not a part of a tag or an HTML entity must be replaced with the corresponding HTML entities (< with &lt;, > with &gt; and & with &amp;)\n4. If the user sends you a message starting with / sign, it means this is a Telegram bot command. For example, all users send /start command as their first message. Try to figure out what these commands mean and reply accodringly\n"
    }
  },
  "typeVersion": 1.1
}

================ Node #3738 ================
{
  "id": "4c52efcf-039b-4550-8a63-3d3d4dde488b",
  "name": "On new manual Chat Message",
  "type": "@n8n/n8n-nodes-langchain.manualChatTrigger",
  "position": [
    740,
    300
  ],
  "parameters": {},
  "typeVersion": 1.1
}

================ Node #3739 ================
{
  "id": "adb528f1-b87b-4bb2-99e1-776fd839522e",
  "name": "Execute Workflow Trigger",
  "type": "n8n-nodes-base.executeWorkflowTrigger",
  "position": [
    680,
    940
  ],
  "parameters": {},
  "typeVersion": 1
}

================ Node #3740 ================
{
  "id": "092cf737-5b53-4fc8-82f5-c775b77ea0bd",
  "name": "Hacker News",
  "type": "n8n-nodes-base.hackerNews",
  "position": [
    900,
    940
  ],
  "parameters": {
    "limit": 50,
    "resource": "all",
    "additionalFields": {}
  },
  "typeVersion": 1
}

================ Node #3741 ================
{
  "id": "a0805137-630c-4065-826e-88afa000660f",
  "name": "Clean up data",
  "type": "n8n-nodes-base.set",
  "position": [
    1120,
    940
  ],
  "parameters": {
    "fields": {
      "values": [
        {
          "name": "title",
          "stringValue": "={{ $json._highlightResult.title.value }}"
        },
        {
          "name": "points",
          "type": "numberValue",
          "numberValue": "={{ $json.points }}"
        },
        {
          "name": "url",
          "stringValue": "={{ $json.url }}"
        },
        {
          "name": "created_at",
          "stringValue": "={{ $json.created_at }}"
        },
        {
          "name": "author",
          "stringValue": "={{ $json.author }}"
        }
      ]
    },
    "include": "none",
    "options": {}
  },
  "typeVersion": 3.2
}

================ Node #3742 ================
{
  "id": "e1b255f4-e970-42d6-9870-4e302bf2da83",
  "name": "AI Agent",
  "type": "@n8n/n8n-nodes-langchain.agent",
  "position": [
    960,
    300
  ],
  "parameters": {
    "options": {
      "maxIterations": 10
    }
  },
  "typeVersion": 1.1
}

================ Node #3743 ================
{
  "id": "91e3391e-909e-4d63-9649-ff62781dbba9",
  "name": "OpenAI Chat Model",
  "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
  "position": [
    960,
    520
  ],
  "parameters": {
    "options": {}
  },
  "credentials": {
    "openAiApi": {
      "id": "VQtv7frm7eLiEDnd",
      "name": "OpenAi account 7"
    }
  },
  "typeVersion": 1
}

================ Node #3744 ================
{
  "id": "cd1f0028-635e-48eb-ac38-4c6fb25ed63e",
  "name": "Stringify",
  "type": "n8n-nodes-base.code",
  "position": [
    1340,
    940
  ],
  "parameters": {
    "jsCode": "return {\n 'response': JSON.stringify($input.all().map(x => x.json))\n}"
  },
  "typeVersion": 2
}

================ Node #3745 ================
{
  "id": "7df241eb-67d3-4724-8b32-4b53561ed55f",
  "name": "Sticky Note",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    880,
    820
  ],
  "parameters": {
    "color": 7,
    "width": 150,
    "height": 293,
    "content": "### Replace me\nwith any other service, e.g. fetching your own data"
  },
  "typeVersion": 1
}

================ Node #3746 ================
{
  "id": "270845df-7c2d-4035-9ac0-e41d418b3026",
  "name": "Sticky Note1",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    600,
    738.125
  ],
  "parameters": {
    "color": 7,
    "width": 927.5,
    "height": 406.875,
    "content": "### Sub-workflow: Custom tool\nThis can be called by the agent above. This example fetches the top 50 posts ever on Hacker News"
  },
  "typeVersion": 1
}

================ Node #3747 ================
{
  "id": "1d796a86-45d1-4fc4-8245-893525505d1f",
  "name": "Sticky Note2",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    600,
    200
  ],
  "parameters": {
    "color": 7,
    "width": 927.5,
    "height": 486.5625,
    "content": "### Main workflow: AI agent using custom tool\nTry it out by clicking 'Chat' and entering 'What is the 5th most popular post ever on Hacker News?'"
  },
  "typeVersion": 1
}

================ Node #3748 ================
{
  "id": "38ff64b5-6f47-4d2d-9051-caab418bb0e8",
  "name": "Sticky Note3",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    440,
    300
  ],
  "parameters": {
    "width": 185.9375,
    "height": 218,
    "content": "## Try me out\n\nClick the 'Chat' button and enter:\n\n_What is the 5th most popular post ever on Hacker News?_"
  },
  "typeVersion": 1
}

================ Node #3749 ================
{
  "id": "3532e461-bd74-48f7-93e1-96d608c88688",
  "name": "Custom tool to call the wf below",
  "type": "@n8n/n8n-nodes-langchain.toolWorkflow",
  "position": [
    1120,
    520
  ],
  "parameters": {
    "name": "hn_tool",
    "workflowId": "={{ $workflow.id }}",
    "description": "Returns a list of the most popular posts ever on Hacker News, in json format"
  },
  "typeVersion": 1
}

================ Node #3750 ================
{
  "id": "40bb5497-d1d2-4eb7-b683-78b88c8d9230",
  "name": "Google Drive",
  "type": "n8n-nodes-base.googleDrive",
  "position": [
    496.83478320435574,
    520
  ],
  "parameters": {
    "fileId": {
      "__rl": true,
      "mode": "url",
      "value": "https://drive.google.com/file/d/11Koq9q53nkk0F5Y8eZgaWJUVR03I4-MM/view"
    },
    "options": {},
    "operation": "download"
  },
  "credentials": {
    "googleDriveOAuth2Api": {
      "id": "20",
      "name": "Google Drive account"
    }
  },
  "typeVersion": 3
}

================ Node #3751 ================
{
  "id": "1323d520-1528-4a5a-9806-8f4f45306098",
  "name": "Recursive Character Text Splitter",
  "type": "@n8n/n8n-nodes-langchain.textSplitterRecursiveCharacterTextSplitter",
  "position": [
    996.8347832043557,
    920
  ],
  "parameters": {
    "chunkSize": 3000,
    "chunkOverlap": 200
  },
  "typeVersion": 1
}

================ Node #3752 ================
{
  "id": "796b155a-64e6-4a52-9168-a37c68077d99",
  "name": "Embeddings OpenAI",
  "type": "@n8n/n8n-nodes-langchain.embeddingsOpenAi",
  "position": [
    836.8347832043557,
    740
  ],
  "parameters": {
    "options": {}
  },
  "credentials": {
    "openAiApi": {
      "id": "JCgD7807AQpe8Xge",
      "name": "OpenAi account"
    }
  },
  "typeVersion": 1
}

================ Node #3753 ================
{
  "id": "dbe42c28-6f0b-4999-8372-0b42f6fb5916",
  "name": "Sticky Note",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    260,
    420
  ],
  "parameters": {
    "color": 7,
    "width": 978.0454109366399,
    "height": 806.6556079800943,
    "content": "### Load data into database\nFetch file from Google Drive, split it into chunks and insert into Pinecone index"
  },
  "typeVersion": 1
}

================ Node #3754 ================
{
  "id": "43dc3736-834d-4322-8fd2-7826b0208c4b",
  "name": "Sticky Note1",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    1520,
    420
  ],
  "parameters": {
    "color": 7,
    "width": 654.1028019808174,
    "height": 806.8716167324012,
    "content": "### Chat with database\nEmbed the incoming chat message and use it retrieve relevant chunks from the vector store. These are passed to the model to formulate an answer "
  },
  "typeVersion": 1
}

================ Node #3755 ================
{
  "id": "53b18460-8ad6-425a-a01f-c2295cfddde8",
  "name": "Default Data Loader",
  "type": "@n8n/n8n-nodes-langchain.documentDefaultDataLoader",
  "position": [
    996.8347832043557,
    740
  ],
  "parameters": {
    "options": {},
    "dataType": "binary"
  },
  "typeVersion": 1
}

================ Node #3756 ================
{
  "id": "e729a021-eab3-48fa-a818-457efcaeebb2",
  "name": "Sticky Note2",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    -20,
    740
  ],
  "parameters": {
    "height": 264.61498034081166,
    "content": "## Try me out\n1. In Pinecone, create an index with 1536 dimensions and select it in *both* Pinecone nodes\n2. Click 'test workflow' at the bottom of the canvas to load data into the vector store\n3. Click 'chat' at the bottom of the canvas to ask questions about the data"
  },
  "typeVersion": 1
}

================ Node #3757 ================
{
  "id": "3e17c89c-620d-4892-b944-d792e48e3772",
  "name": "Question and Answer Chain",
  "type": "@n8n/n8n-nodes-langchain.chainRetrievalQa",
  "position": [
    1560,
    521
  ],
  "parameters": {},
  "typeVersion": 1.2
}

================ Node #3758 ================
{
  "id": "516507f9-d0d9-4975-85d0-a7852ee41518",
  "name": "OpenAI Chat Model",
  "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
  "position": [
    1560,
    741
  ],
  "parameters": {
    "options": {}
  },
  "credentials": {
    "openAiApi": {
      "id": "JCgD7807AQpe8Xge",
      "name": "OpenAi account"
    }
  },
  "typeVersion": 1
}

================ Node #3759 ================
{
  "id": "8b0a5d26-a60a-40ab-8200-72f542532096",
  "name": "Embeddings OpenAI2",
  "type": "@n8n/n8n-nodes-langchain.embeddingsOpenAi",
  "position": [
    1700,
    1081
  ],
  "parameters": {
    "options": {}
  },
  "credentials": {
    "openAiApi": {
      "id": "JCgD7807AQpe8Xge",
      "name": "OpenAi account"
    }
  },
  "typeVersion": 1
}

================ Node #3760 ================
{
  "id": "07f61d20-cf50-48e8-9d34-92244af436cb",
  "name": "Vector Store Retriever",
  "type": "@n8n/n8n-nodes-langchain.retrieverVectorStore",
  "position": [
    1760,
    741
  ],
  "parameters": {},
  "typeVersion": 1
}

================ Node #3761 ================
{
  "id": "0777de17-99a0-499a-b71f-245d5f76642e",
  "name": "Read Pinecone Vector Store",
  "type": "@n8n/n8n-nodes-langchain.vectorStorePinecone",
  "position": [
    1700,
    921
  ],
  "parameters": {
    "options": {},
    "pineconeIndex": {
      "__rl": true,
      "mode": "list",
      "value": "test-index",
      "cachedResultName": "test-index"
    }
  },
  "credentials": {
    "pineconeApi": {
      "id": "Pp5aPt4JWBkDOGqZ",
      "name": "PineconeApi account"
    }
  },
  "typeVersion": 1
}

================ Node #3762 ================
{
  "id": "cc5e6897-9d0b-4352-a882-5dc23104bf97",
  "name": "Insert into Pinecone vector store",
  "type": "@n8n/n8n-nodes-langchain.vectorStorePinecone",
  "position": [
    856.8347832043557,
    520
  ],
  "parameters": {
    "mode": "insert",
    "options": {
      "clearNamespace": true
    },
    "pineconeIndex": {
      "__rl": true,
      "mode": "list",
      "value": "test-index",
      "cachedResultName": "test-index"
    }
  },
  "credentials": {
    "pineconeApi": {
      "id": "Pp5aPt4JWBkDOGqZ",
      "name": "PineconeApi account"
    }
  },
  "typeVersion": 1
}

================ Node #3763 ================
{
  "id": "c358aa73-b60f-453f-a3ef-539faa98c9b5",
  "name": "When clicking 'Chat' button below",
  "type": "@n8n/n8n-nodes-langchain.chatTrigger",
  "position": [
    1360,
    521
  ],
  "webhookId": "e259b6fe-b2a9-4dbc-98a4-9a160e7ac10c",
  "parameters": {},
  "typeVersion": 1
}

================ Node #3764 ================
{
  "id": "d35db9e1-4efc-4980-9814-55fbe65e08fd",
  "name": "When clicking 'Test Workflow' button",
  "type": "n8n-nodes-base.manualTrigger",
  "position": [
    76.83478320435574,
    520
  ],
  "parameters": {},
  "typeVersion": 1
}

================ Node #3765 ================
{
  "id": "4c04f576-e834-467d-98b4-38a2d501d82f",
  "name": "Set Google Drive file URL",
  "type": "n8n-nodes-base.set",
  "position": [
    296,
    520
  ],
  "parameters": {
    "options": {},
    "assignments": {
      "assignments": [
        {
          "id": "50025ff5-1b53-475f-b150-2aafef1c4c21",
          "name": "file_url",
          "type": "string",
          "value": "https://drive.google.com/file/d/11Koq9q53nkk0F5Y8eZgaWJUVR03I4-MM/view"
        }
      ]
    }
  },
  "typeVersion": 3.3
}

================ Node #3766 ================
{
  "id": "3a3bcb2d-cb94-40d8-8b9e-322ea9d27f6e",
  "name": "Sticky Note4",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    1000,
    640
  ],
  "parameters": {
    "width": 300,
    "height": 185,
    "content": "### The conversation history(last 20 messages) is stored in a buffer memory"
  },
  "typeVersion": 1
}

================ Node #3767 ================
{
  "id": "e279af43-b003-4499-b221-58716e735379",
  "name": "On new manual Chat Message",
  "type": "@n8n/n8n-nodes-langchain.manualChatTrigger",
  "position": [
    740,
    340
  ],
  "parameters": {},
  "typeVersion": 1
}

================ Node #3768 ================
{
  "id": "f4f8bf03-a43e-4a1f-a592-cd0f8408f552",
  "name": "Chat OpenAI",
  "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
  "position": [
    840,
    653
  ],
  "parameters": {
    "model": "gpt-4o-mini",
    "options": {
      "temperature": 0.3
    }
  },
  "credentials": {
    "openAiApi": {
      "id": "8gccIjcuf3gvaoEr",
      "name": "OpenAi account"
    }
  },
  "typeVersion": 1
}

================ Node #3769 ================
{
  "id": "66b60f68-bae8-4958-ac81-03883f563ab3",
  "name": "Wikipedia",
  "type": "@n8n/n8n-nodes-langchain.toolWikipedia",
  "position": [
    1480,
    693
  ],
  "parameters": {},
  "typeVersion": 1
}

================ Node #3770 ================
{
  "id": "70f6b43b-9290-4fbc-992f-0895d4578c9f",
  "name": "Sticky Note3",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    1340,
    633
  ],
  "parameters": {
    "width": 300,
    "height": 185,
    "content": "### Tools which agent can use to accomplish the task"
  },
  "typeVersion": 1
}

================ Node #3771 ================
{
  "id": "8696269f-6556-41f1-bbe4-5597e4e46e02",
  "name": "Sticky Note6",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    960,
    260
  ],
  "parameters": {
    "width": 422,
    "height": 211,
    "content": "### Conversational agent will utilise available tools to answer the prompt. "
  },
  "typeVersion": 1
}

================ Node #3772 ================
{
  "id": "6814967b-4567-4cdd-bf09-6b1b5ed0c68e",
  "name": "Window Buffer Memory",
  "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
  "position": [
    1100,
    700
  ],
  "parameters": {
    "contextWindowLength": 20
  },
  "typeVersion": 1
}

================ Node #3773 ================
{
  "id": "ce4358ac-c2cc-45ba-b950-247f8360b36c",
  "name": "SerpAPI",
  "type": "@n8n/n8n-nodes-langchain.toolSerpApi",
  "position": [
    1380,
    693
  ],
  "parameters": {
    "options": {}
  },
  "typeVersion": 1
}

================ Node #3774 ================
{
  "id": "de80add8-c37d-4d46-80ec-b43234e21150",
  "name": "AI Agent",
  "type": "@n8n/n8n-nodes-langchain.agent",
  "position": [
    1040,
    340
  ],
  "parameters": {
    "text": "={{ $json.input }}",
    "options": {},
    "promptType": "define"
  },
  "typeVersion": 1.6
}

================ Node #3775 ================
{
  "id": "bd1dae81-daea-4539-bf1d-38eb9a2bd2f0",
  "name": "Gmail Trigger",
  "type": "n8n-nodes-base.gmailTrigger",
  "position": [
    500,
    560
  ],
  "parameters": {
    "filters": {
      "readStatus": "unread",
      "includeSpamTrash": false
    },
    "pollTimes": {
      "item": [
        {
          "mode": "everyMinute"
        }
      ]
    }
  },
  "credentials": {
    "gmailOAuth2": {
      "id": "kLFedNEM8Zwkergv",
      "name": "Gmail account"
    }
  },
  "typeVersion": 1
}

================ Node #3776 ================
{
  "id": "a97c3ab1-6fbc-441e-af11-3c746936013b",
  "name": "Chat OpenAI",
  "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
  "position": [
    720,
    740
  ],
  "parameters": {
    "model": "gpt-4",
    "options": {
      "temperature": 0.1
    }
  },
  "credentials": {
    "openAiApi": {
      "id": "wJtZwsVKW5v6R2Iy",
      "name": "OpenAi account"
    }
  },
  "typeVersion": 1
}

================ Node #3777 ================
{
  "id": "a1205598-7cd4-4278-ad53-0cfc7c7947ff",
  "name": "Workflow Tool",
  "type": "@n8n/n8n-nodes-langchain.toolWorkflow",
  "position": [
    1580,
    759
  ],
  "parameters": {
    "name": "Calendar_Availability",
    "workflowId": "={{ $workflow.id }}",
    "description": "Call this tool to get my calendar availability as stringified JSON array."
  },
  "typeVersion": 1
}

================ Node #3778 ================
{
  "id": "5ba2c2b0-2218-45d2-a417-f86c80643397",
  "name": "Chat OpenAI1",
  "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
  "position": [
    1420,
    759
  ],
  "parameters": {
    "model": "gpt-4",
    "options": {
      "temperature": 0
    }
  },
  "credentials": {
    "openAiApi": {
      "id": "wJtZwsVKW5v6R2Iy",
      "name": "OpenAi account"
    }
  },
  "typeVersion": 1
}

================ Node #3779 ================
{
  "id": "012835ec-c20a-4b84-bed8-67f6aac30698",
  "name": "Sticky Note",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    460,
    460
  ],
  "parameters": {
    "width": 616.8060552874073,
    "height": 410.24791575252334,
    "content": "## Check if incoming email is about appointment\nWe use LLM to check subject and body of the email and determine if it's an appointment request. "
  },
  "typeVersion": 1
}

================ Node #3780 ================
{
  "id": "ceaa4f77-acc8-437e-9d61-16cf344a7748",
  "name": "Sticky Note1",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    1340,
    460
  ],
  "parameters": {
    "width": 676.1951194231482,
    "height": 241.70645019745504,
    "content": "## Get calendar availability and compose a response\nMake sure to update the Workflow ID if you are running this as 2 workflows"
  },
  "typeVersion": 1
}

================ Node #3781 ================
{
  "id": "499def23-7dec-4131-91fd-326b1b824762",
  "name": "Google Calendar",
  "type": "n8n-nodes-base.googleCalendar",
  "position": [
    680,
    1120
  ],
  "parameters": {
    "options": {
      "timeMax": "={{ $now.plus(1, 'month').toISO() }}",
      "timeMin": "={{ $now.minus(1, 'day').toISO() }}",
      "singleEvents": true
    },
    "calendar": {
      "__rl": true,
      "mode": "list",
      "value": "your_email@gmail.com",
      "cachedResultName": "your_email@gmail.com"
    },
    "operation": "getAll",
    "returnAll": true
  },
  "credentials": {
    "googleCalendarOAuth2Api": {
      "id": "s95HsHIMB7oK0dAH",
      "name": "Google Calendar account"
    }
  },
  "typeVersion": 1
}

================ Node #3782 ================
{
  "id": "0f5f43fa-3386-4682-b620-21db35651d3b",
  "name": "Execute Workflow Trigger",
  "type": "n8n-nodes-base.executeWorkflowTrigger",
  "position": [
    460,
    1120
  ],
  "parameters": {},
  "typeVersion": 1
}

================ Node #3783 ================
{
  "id": "8b2b82b9-c11f-4e7f-ab23-16ea5e395e11",
  "name": "Format response",
  "type": "n8n-nodes-base.itemLists",
  "position": [
    1560,
    1120
  ],
  "parameters": {
    "include": "allFieldsExcept",
    "options": {},
    "aggregate": "aggregateAllItemData",
    "operation": "concatenateItems",
    "fieldsToExclude": "sort",
    "destinationFieldName": "response"
  },
  "typeVersion": 3
}

================ Node #3784 ================
{
  "id": "ac363d85-5c6e-4a9f-9cfc-ecc15a325b01",
  "name": "Stringify Response",
  "type": "n8n-nodes-base.set",
  "position": [
    1780,
    1120
  ],
  "parameters": {
    "values": {
      "string": [
        {
          "name": "response",
          "value": "={{ JSON.stringify($json.response) }}"
        }
      ]
    },
    "options": {},
    "keepOnlySet": true
  },
  "typeVersion": 2
}

================ Node #3785 ================
{
  "id": "399c5bc4-c8bd-4d0b-942a-9889447880a9",
  "name": "Extract start, end and name",
  "type": "n8n-nodes-base.set",
  "position": [
    1100,
    1120
  ],
  "parameters": {
    "values": {
      "string": [
        {
          "name": "start",
          "value": "={{ DateTime.fromISO($json.start.dateTime).toLocaleString(DateTime.DATE_HUGE) }}, {{ DateTime.fromISO($json.start.dateTime).toLocaleString(DateTime.TIME_24_WITH_SHORT_OFFSET) }}"
        },
        {
          "name": "end",
          "value": "={{ DateTime.fromISO($json.end.dateTime).toLocaleString(DateTime.DATE_HUGE) }}, {{ DateTime.fromISO($json.end.dateTime).toLocaleString(DateTime.TIME_24_WITH_SHORT_OFFSET) }}"
        },
        {
          "name": "name",
          "value": "={{ $json.summary }}"
        },
        {
          "name": "sort",
          "value": "={{ $json.start.dateTime }}"
        }
      ]
    },
    "options": {},
    "keepOnlySet": true
  },
  "typeVersion": 2
}

================ Node #3786 ================
{
  "id": "a39b6c7d-fdcc-452d-9ef5-50b038153330",
  "name": "Filter only confirmed and with set time",
  "type": "n8n-nodes-base.filter",
  "position": [
    880,
    1120
  ],
  "parameters": {
    "conditions": {
      "string": [
        {
          "value1": "={{ $json.status }}",
          "value2": "confirmed"
        }
      ],
      "boolean": [
        {
          "value1": "={{ $json.start.dateTime }}",
          "value2": "={{ undefined }}",
          "operation": "notEqual"
        }
      ]
    }
  },
  "typeVersion": 1
}

================ Node #3787 ================
{
  "id": "0e0a2be9-cde7-497d-94c5-180128382bb7",
  "name": "Is appointment request",
  "type": "n8n-nodes-base.if",
  "position": [
    1100,
    560
  ],
  "parameters": {
    "conditions": {
      "string": [
        {
          "value1": "={{ $json.is_appointment }}",
          "value2": "true"
        }
      ],
      "boolean": [
        {
          "value1": "={{ $json.is_appointment }}",
          "value2": true
        }
      ]
    },
    "combineOperation": "any"
  },
  "typeVersion": 1
}

================ Node #3788 ================
{
  "id": "a6e11f63-a56a-4fe0-91c8-0dde2720e905",
  "name": "Classify appointment",
  "type": "@n8n/n8n-nodes-langchain.chainLlm",
  "position": [
    720,
    560
  ],
  "parameters": {
    "prompt": "=Please evaluate the following email to determine if it suggests scheduling a meeting or a call:\nSubject: {{ encodeURI($json.Subject) }}\nSnippet: {{ encodeURI($json.snippet) }}\nIndicate your assessment by responding with \"true\" if it suggests a meeting or call, or \"false\" otherwise. Use lowercase for your response.\n"
  },
  "typeVersion": 1
}

================ Node #3789 ================
{
  "id": "b6411b14-67f6-4195-a834-60a4dc5e4851",
  "name": "Structured Output Parser",
  "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
  "position": [
    880,
    740
  ],
  "parameters": {
    "jsonSchema": "{\n \"type\": \"object\",\n \"properties\": {\n \"is_appointment\": {\n \"type\": \"boolean\"\n }\n }\n}"
  },
  "typeVersion": 1
}

================ Node #3790 ================
{
  "id": "96248431-290b-4fb1-94a3-714e7c0008d4",
  "name": "Sticky Note2",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    640,
    1058.6115582634225
  ],
  "parameters": {
    "width": 810.4923211935056,
    "height": 224.60561166142082,
    "content": "### Get all query google events for the next month and extract relevant data"
  },
  "typeVersion": 1
}

================ Node #3791 ================
{
  "id": "48bc7c0c-0b74-418e-8c5c-6a6faf24722c",
  "name": "Sticky Note3",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    1513,
    1060
  ],
  "parameters": {
    "width": 444.4130232558142,
    "height": 220.42397542781927,
    "content": "### Wrap the result in `response` object and return "
  },
  "typeVersion": 1
}

================ Node #3792 ================
{
  "id": "a68f7b27-1891-46c7-92b2-650cc17f94d6",
  "name": "Sort",
  "type": "n8n-nodes-base.itemLists",
  "position": [
    1320,
    1120
  ],
  "parameters": {
    "options": {},
    "operation": "sort",
    "sortFieldsUi": {
      "sortField": [
        {
          "fieldName": "sort"
        }
      ]
    }
  },
  "typeVersion": 3
}

================ Node #3793 ================
{
  "id": "2b5b5855-6d3f-4405-9f48-5d6c4ee2475b",
  "name": "Mark as read",
  "type": "n8n-nodes-base.gmail",
  "position": [
    1840,
    739
  ],
  "parameters": {
    "messageId": "={{ $('Gmail Trigger').item.json.id }}",
    "operation": "markAsRead"
  },
  "credentials": {
    "gmailOAuth2": {
      "id": "kLFedNEM8Zwkergv",
      "name": "Gmail account"
    }
  },
  "typeVersion": 2.1
}

================ Node #3794 ================
{
  "id": "accbe2df-367a-4bd3-a383-12ee79062e12",
  "name": "Send Reply",
  "type": "n8n-nodes-base.gmail",
  "position": [
    1840,
    539
  ],
  "parameters": {
    "message": "={{ $json.output }}",
    "options": {
      "replyToSenderOnly": true
    },
    "messageId": "={{ $('Gmail Trigger').item.json.id }}",
    "operation": "reply"
  },
  "credentials": {
    "gmailOAuth2": {
      "id": "kLFedNEM8Zwkergv",
      "name": "Gmail account"
    }
  },
  "typeVersion": 2
}

================ Node #3795 ================
{
  "id": "66d62337-d0c1-4744-b169-8e95c1d1492a",
  "name": "Agent",
  "type": "@n8n/n8n-nodes-langchain.agent",
  "position": [
    1400,
    539
  ],
  "parameters": {
    "text": "=Sender: {{ $('Gmail Trigger').item.json.From }}\\nSubject: {{ $('Gmail Trigger').item.json.Subject }}\\nEmail Text: {{ $('Gmail Trigger').item.json.snippet }}",
    "options": {
      "systemMessage": "=You are an email scheduling assistant. Based on the received email, check my availability and propose an appropriate response. \nAim to get a specific time, rather than just a day. When checking my availability, make sure that there's enough time in between meetings.\nIf I'm not available, ALWAYS propose a new time based on my availability. When proposing a new time, always leave 15 minutes buffer from previous meeting.\nToday date and time is: {{ $now.toISO() }}."
    }
  },
  "typeVersion": 1
}

================ Node #3796 ================
{
  "id": "ea71a467-a646-4aca-b72e-cef1249c74e2",
  "name": "Telegram Trigger",
  "type": "n8n-nodes-base.telegramTrigger",
  "position": [
    20,
    340
  ],
  "webhookId": "51942fbb-ca0e-4ec4-9423-5fcc7d3c4281",
  "parameters": {
    "updates": [
      "*"
    ],
    "additionalFields": {}
  },
  "credentials": {
    "telegramApi": {
      "id": "70",
      "name": "Telegram bot"
    }
  },
  "typeVersion": 1
}

================ Node #3797 ================
{
  "id": "1cbe43d4-ea8b-4178-bc10-4bfad7abe143",
  "name": "CheckCommand",
  "type": "n8n-nodes-base.switch",
  "position": [
    980,
    360
  ],
  "parameters": {
    "rules": {
      "rules": [
        {
          "value2": "/",
          "operation": "notStartsWith"
        },
        {
          "output": 1,
          "value2": "/start",
          "operation": "startsWith"
        },
        {
          "output": 2,
          "value2": "=/image ",
          "operation": "startsWith"
        }
      ]
    },
    "value1": "={{ $json.message?.text }}",
    "dataType": "string",
    "fallbackOutput": 3
  },
  "typeVersion": 1
}

================ Node #3798 ================
{
  "id": "074e907f-634b-4242-b669-33fa064f8472",
  "name": "Sticky Note",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    1600,
    581.661764705882
  ],
  "parameters": {
    "width": 316.1071428571428,
    "height": 231.22373949579838,
    "content": "## Error fallback for unsupported commands"
  },
  "typeVersion": 1
}

================ Node #3799 ================
{
  "id": "2aa961b8-f0af-4d5c-a6af-1be56ea4b2e6",
  "name": "Settings",
  "type": "n8n-nodes-base.set",
  "position": [
    380,
    340
  ],
  "parameters": {
    "values": {
      "number": [
        {
          "name": "model_temperature",
          "value": 0.8
        },
        {
          "name": "token_length",
          "value": 500
        }
      ],
      "string": [
        {
          "name": "system_command",
          "value": "=You are a friendly chatbot. User name is {{ $json?.message?.from?.first_name }}. User system language is {{ $json?.message?.from?.language_code }}. First, detect user text language. Next, provide your reply in the same language. Include several suitable emojis in your answer."
        },
        {
          "name": "bot_typing",
          "value": "={{ $json?.message?.text.startsWith('/image') ? \"upload_photo\" : \"typing\" }}"
        }
      ]
    },
    "options": {}
  },
  "typeVersion": 2
}

================ Node #3800 ================
{
  "id": "2d2fe268-1e3e-483b-847c-4412e586c1ca",
  "name": "Sticky Note1",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    1240,
    -240
  ],
  "parameters": {
    "width": 330.5019024637719,
    "height": 233,
    "content": "## Chatbot mode by default\n### (when no command is provided)"
  },
  "typeVersion": 1
}

================ Node #3801 ================
{
  "id": "09a9c0b4-ac6e-46eb-b2e0-ef2b55e94ada",
  "name": "Sticky Note2",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    1240,
    20
  ],
  "parameters": {
    "width": 330.7863484403046,
    "height": 219.892857142857,
    "content": "## Welcome message\n### /start"
  },
  "typeVersion": 1
}

================ Node #3802 ================
{
  "id": "088cffee-5720-488b-a4ec-cfdccbf77e75",
  "name": "Chat_mode",
  "type": "n8n-nodes-base.openAi",
  "position": [
    1340,
    -160
  ],
  "parameters": {
    "model": "gpt-4",
    "prompt": {
      "messages": [
        {
          "role": "system",
          "content": "={{ $json.system_command }}"
        },
        {
          "content": "={{ $json.message.text }}"
        }
      ]
    },
    "options": {
      "maxTokens": "={{ $json.token_length }}",
      "temperature": "={{ $json.model_temperature }}"
    },
    "resource": "chat"
  },
  "credentials": {
    "openAiApi": {
      "id": "63",
      "name": "OpenAi account"
    }
  },
  "typeVersion": 1
}

================ Node #3803 ================
{
  "id": "41248697-6474-4a8f-a8b8-038c96465948",
  "name": "Greeting",
  "type": "n8n-nodes-base.openAi",
  "position": [
    1340,
    80
  ],
  "parameters": {
    "prompt": {
      "messages": [
        {
          "role": "system",
          "content": "={{ $json.system_command }}"
        },
        {
          "content": "=This is the first message from a user. Please welcome a new user in `{{ $json.message.from.language_code }}` language"
        }
      ]
    },
    "options": {
      "maxTokens": "={{ $json.token_length }}",
      "temperature": "={{ $json.model_temperature }}"
    },
    "resource": "chat"
  },
  "credentials": {
    "openAiApi": {
      "id": "63",
      "name": "OpenAi account"
    }
  },
  "typeVersion": 1
}

================ Node #3804 ================
{
  "id": "20c2e7fa-5d65-441b-8d1d-a8d46c624964",
  "name": "Text reply",
  "type": "n8n-nodes-base.telegram",
  "position": [
    1700,
    -40
  ],
  "parameters": {
    "text": "={{ $json.message.content }}",
    "chatId": "={{ $('Settings').first().json.message.from.id }}",
    "additionalFields": {
      "parse_mode": "Markdown"
    }
  },
  "credentials": {
    "telegramApi": {
      "id": "70",
      "name": "Telegram bot"
    }
  },
  "typeVersion": 1
}

================ Node #3805 ================
{
  "id": "30321276-ebe1-41ac-b420-9dab8daa405b",
  "name": "Send Typing action",
  "type": "n8n-nodes-base.telegram",
  "position": [
    580,
    480
  ],
  "parameters": {
    "action": "={{ $json.bot_typing }}",
    "chatId": "={{ $json.message.from.id }}",
    "operation": "sendChatAction"
  },
  "credentials": {
    "telegramApi": {
      "id": "70",
      "name": "Telegram bot"
    }
  },
  "typeVersion": 1
}

================ Node #3806 ================
{
  "id": "7d7ff2e8-b0ca-4638-a056-f7b4e2e6273d",
  "name": "Merge",
  "type": "n8n-nodes-base.merge",
  "position": [
    800,
    360
  ],
  "parameters": {
    "mode": "chooseBranch"
  },
  "typeVersion": 2.1
}

================ Node #3807 ================
{
  "id": "656bab5e-b7f7-47a1-8e75-4a17d2070290",
  "name": "Sticky Note3",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    1240,
    280
  ],
  "parameters": {
    "width": 329.7428571428562,
    "height": 233.8785714285713,
    "content": "## Create an image\n### /image + request"
  },
  "typeVersion": 1
}

================ Node #3808 ================
{
  "id": "ca2111d2-463a-4ef0-9436-ee09598dbf07",
  "name": "Create an image",
  "type": "n8n-nodes-base.openAi",
  "position": [
    1340,
    360
  ],
  "parameters": {
    "prompt": "={{ $json.message.text.split(' ').slice(1).join(' ') }}",
    "options": {
      "n": 1,
      "size": "512x512"
    },
    "resource": "image",
    "responseFormat": "imageUrl"
  },
  "credentials": {
    "openAiApi": {
      "id": "63",
      "name": "OpenAi account"
    }
  },
  "typeVersion": 1
}

================ Node #3809 ================
{
  "id": "e91d616b-1d5e-40e8-8468-2d0b2dda4cf7",
  "name": "Send error message",
  "type": "n8n-nodes-base.telegram",
  "position": [
    1700,
    660
  ],
  "parameters": {
    "text": "=Sorry, {{ $json.message.from.first_name }}! This command is not supported yet. Please type some text to a chat bot or try this command:\n/image \\[your prompt]\n\nEnter the command, then space and provide your request. Example:\n\n`/image a picture or a cute little kitten with big eyes. Miyazaki studio ghibli style`",
    "chatId": "={{ $json.message.from.id }}",
    "additionalFields": {
      "parse_mode": "Markdown"
    }
  },
  "credentials": {
    "telegramApi": {
      "id": "70",
      "name": "Telegram bot"
    }
  },
  "typeVersion": 1
}

================ Node #3810 ================
{
  "id": "125e27d2-b03b-4f02-9dd1-8fc81ecf0b6b",
  "name": "Send image",
  "type": "n8n-nodes-base.telegram",
  "position": [
    1700,
    360
  ],
  "parameters": {
    "file": "={{ $json.url }}",
    "chatId": "={{ $('Settings').first().json.message.from.id }}",
    "operation": "sendPhoto",
    "additionalFields": {}
  },
  "credentials": {
    "telegramApi": {
      "id": "70",
      "name": "Telegram bot"
    }
  },
  "typeVersion": 1
}

================ Node #3811 ================
{
  "id": "730a51ac-223e-4956-be7f-166eadb6ed81",
  "name": "PreProcessing",
  "type": "n8n-nodes-base.set",
  "position": [
    200,
    340
  ],
  "parameters": {
    "values": {
      "string": [
        {
          "name": "message.text",
          "value": "={{ $json?.message?.text || \"\" }}"
        }
      ]
    },
    "options": {
      "dotNotation": true
    }
  },
  "typeVersion": 2
}

================ Node #3812 ================
{
  "id": "f7ecadb8-dc5d-4e8c-96b8-52c1dbad49b6",
  "name": "On form submission",
  "type": "n8n-nodes-base.formTrigger",
  "position": [
    -660,
    -220
  ],
  "webhookId": "43837a27-f752-40a8-852a-d5d63d647bfd",
  "parameters": {
    "options": {
      "path": "logo-sheet-feeder"
    },
    "formTitle": "AI Logo Sheet Feeder",
    "formFields": {
      "values": [
        {
          "fieldType": "file",
          "fieldLabel": "The Logo-Sheet as Image",
          "requiredField": true
        },
        {
          "fieldLabel": "Addional Prompt (e.g.: What the meaning of the graphic?) *optional but helps from time to time.",
          "placeholder": "It's a graph chart comparing AI Tools"
        }
      ]
    },
    "formDescription": "Provide a Image with multiple Logos comparing or bringing multiple Tools into Context with one another."
  },
  "typeVersion": 2.2
}

================ Node #3813 ================
{
  "id": "b1530578-bde9-4ee3-9cdb-545a621cdb84",
  "name": "Retrieve and Parser Agent",
  "type": "@n8n/n8n-nodes-langchain.agent",
  "position": [
    -180,
    -220
  ],
  "parameters": {
    "options": {
      "systemMessage": "Your task is to retrieve Information from the given Input. Extract Categories and Attributes of all given and shown Tools, Softwares or Products you've got by the user.\n\nProvide the Output Array of Tools with the following Structure as JSON:\n\n[{\n\"name\": \"Name of the Tool, Software, etc.\",\n\"attributes\": [\"Some category or attribute\", \"something else you can see from the context or image\"],\n\"similar\": [\"similar tool, product, etc. from shown context\", \"another similar software, product, tool from context\"]\n},{\n\"name\": \"Name of anotherTool, Software, etc.\",\n\"attributes\": [\"Some category, subcategory or general attribute\", \"something else you can see from the context or image\"],\n\"similar\": [\"similar tool, product, etc. from shown context\", \"another similar software, product, tool from context\"]\n}]\n\nList these structure for all the Products you see!\n\nHere a description of the JSON fields:\n\"name\": Just the Name of the Software.\n\"attribute\": Turn any information from the context or image into multiple useful Attributes for this tool. Could be a category, could be a feature, etc. Try to split this information in multiple specific Attributes or Categories.\n\"similar\": if multiple tools are shown that could compare to this one (like on the same level or in the same category), list those here\n\nTake a deep breath and think step by step.\nTry to extract every mentioned tool. There are for sure multiple listed.",
      "passthroughBinaryImages": true
    },
    "hasOutputParser": true
  },
  "typeVersion": 1.7
}

================ Node #3814 ================
{
  "id": "51642a02-51a4-4894-adf0-f364736dabc1",
  "name": "JSON it",
  "type": "n8n-nodes-base.set",
  "position": [
    220,
    -220
  ],
  "parameters": {
    "mode": "raw",
    "options": {},
    "jsonOutput": "={{ $json.output }}"
  },
  "typeVersion": 3.4
}

================ Node #3815 ================
{
  "id": "ec0f0575-eb33-48a9-b3fe-c4f5b71ff548",
  "name": "Structured Output Parser",
  "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
  "position": [
    40,
    20
  ],
  "parameters": {
    "jsonSchemaExample": "{\n\t\"tools\": [{\n\"name\": \"Name of the Tool, Software, etc.\",\n\"attributes\": [\"Some category or attribute\", \"something else you can see from the context or image\"],\n\"similar\": [\"similar tool, product, etc. from shown context\", \"another similar software, product, tool from context\"]\n},{\n\"name\": \"Name of anotherTool, Software, etc.\",\n\"attributes\": [\"Some category, subcategory or general attribute\", \"something else you can see from the context or image\"],\n\"similar\": [\"similar tool, product, etc. from shown context\", \"another similar software, product, tool from context\"]\n}]}"
  },
  "typeVersion": 1.2
}

================ Node #3816 ================
{
  "id": "6d78005e-7277-40a9-9f10-e3d8e475cbaf",
  "name": "Check if Attribute exists",
  "type": "n8n-nodes-base.airtable",
  "position": [
    1380,
    0
  ],
  "parameters": {
    "base": {
      "__rl": true,
      "mode": "list",
      "value": "appq0gcmxHAZQhswW",
      "cachedResultUrl": "https://airtable.com/appq0gcmxHAZQhswW",
      "cachedResultName": "AI Tools"
    },
    "table": {
      "__rl": true,
      "mode": "list",
      "value": "tblX2rj8yNAZZRhwt",
      "cachedResultUrl": "https://airtable.com/appq0gcmxHAZQhswW/tblX2rj8yNAZZRhwt",
      "cachedResultName": "Attributes"
    },
    "columns": {
      "value": {
        "Name": "={{$json.attributes}}"
      },
      "schema": [
        {
          "id": "id",
          "type": "string",
          "display": true,
          "removed": true,
          "readOnly": true,
          "required": false,
          "displayName": "id",
          "defaultMatch": true
        },
        {
          "id": "Name",
          "type": "string",
          "display": true,
          "removed": false,
          "readOnly": false,
          "required": false,
          "displayName": "Name",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "Tools",
          "type": "array",
          "display": true,
          "removed": true,
          "readOnly": false,
          "required": false,
          "displayName": "Tools",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        }
      ],
      "mappingMode": "defineBelow",
      "matchingColumns": [
        "Name"
      ]
    },
    "options": {},
    "operation": "upsert"
  },
  "credentials": {
    "airtableTokenApi": {
      "id": "jMqH6HkKUYTgyHVm",
      "name": "Airtable Personal Access Token account"
    }
  },
  "typeVersion": 2.1
}

================ Node #3817 ================
{
  "id": "1c468a4b-4563-4f78-ba1b-138b18ac4821",
  "name": "Merge",
  "type": "n8n-nodes-base.merge",
  "position": [
    1620,
    80
  ],
  "parameters": {
    "mode": "combine",
    "options": {},
    "combineBy": "combineByPosition"
  },
  "typeVersion": 3
}

================ Node #3818 ================
{
  "id": "4f597962-48e5-4367-a329-bc07d42ff86d",
  "name": "Map Attribute ID",
  "type": "n8n-nodes-base.set",
  "position": [
    1840,
    80
  ],
  "parameters": {
    "options": {},
    "assignments": {
      "assignments": [
        {
          "id": "675510b1-97e7-4a71-9c9e-d3ee792d9919",
          "name": "id",
          "type": "string",
          "value": "={{ $json.id }}"
        },
        {
          "id": "87cc9086-effd-4f4e-84c1-9adec5774e94",
          "name": "attribute",
          "type": "string",
          "value": "={{ $json.attributes }}"
        }
      ]
    }
  },
  "typeVersion": 3.4
}

================ Node #3819 ================
{
  "id": "11679757-360c-468f-b624-a9f6853e29f4",
  "name": "Loop Over Attributes",
  "type": "n8n-nodes-base.splitInBatches",
  "position": [
    720,
    -40
  ],
  "parameters": {
    "options": {}
  },
  "typeVersion": 3
}

================ Node #3820 ================
{
  "id": "835a09ae-2e51-488c-b0b3-d895696a135e",
  "name": "All Attributes",
  "type": "n8n-nodes-base.set",
  "position": [
    940,
    -60
  ],
  "parameters": {
    "mode": "raw",
    "options": {},
    "jsonOutput": "={{ $json }}"
  },
  "typeVersion": 3.4
}

================ Node #3821 ================
{
  "id": "b8ca6d98-ab37-4393-8a2c-561912aeff2b",
  "name": "Wait for Attribute Creation",
  "type": "n8n-nodes-base.merge",
  "position": [
    1120,
    -200
  ],
  "parameters": {
    "mode": "chooseBranch"
  },
  "typeVersion": 3
}

================ Node #3822 ================
{
  "id": "9eaf87d4-910b-4a6e-9cdf-ee51ff4180cc",
  "name": "Change each Attribute to the corresponding RecID",
  "type": "n8n-nodes-base.code",
  "position": [
    1340,
    -200
  ],
  "parameters": {
    "jsCode": "let knownAttributesOutput = $('All Attributes').all();\nlet knownAttributes = new Map();\nknownAttributesOutput.forEach((nodeOutput)=>{\nknownAttributes.set(nodeOutput.json.attribute.toString().trim(), nodeOutput.json.id);\n});\n\n\nfor (const item of $input.all()) {\n item.json.attributes.forEach((attribute, index)=>{\n item.json.attributes[index] = knownAttributes.get(attribute.toString().trim());\n });\n}\n\nreturn $input.all();"
  },
  "typeVersion": 2
}

================ Node #3823 ================
{
  "id": "ecfedff4-f6f9-429e-8514-cf8208e70048",
  "name": "Sticky Note",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    600,
    -280
  ],
  "parameters": {
    "color": 5,
    "width": 1460,
    "height": 600,
    "content": "## Attribute Creation and Mapping those created or existing Ids "
  },
  "typeVersion": 1
}

================ Node #3824 ================
{
  "id": "ad2fafed-0a42-4615-a882-01306af7caf5",
  "name": "Sticky Note1",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    -260,
    -360
  ],
  "parameters": {
    "color": 6,
    "width": 420,
    "height": 540,
    "content": "## Eat the provided Images, Extract the Information out of them as \"Tool -> Attributes\" list."
  },
  "typeVersion": 1
}

================ Node #3825 ================
{
  "id": "5eb89e50-7a2f-415c-82f2-99eb8a7ff82f",
  "name": "Split Out Tools",
  "type": "n8n-nodes-base.splitOut",
  "position": [
    440,
    -220
  ],
  "parameters": {
    "options": {},
    "fieldToSplitOut": "tools"
  },
  "typeVersion": 1
}

================ Node #3826 ================
{
  "id": "680dfb4b-dde4-4d8f-852d-c3eba82e6607",
  "name": "Split Out each Attribute String",
  "type": "n8n-nodes-base.splitOut",
  "position": [
    1140,
    100
  ],
  "parameters": {
    "options": {},
    "fieldToSplitOut": "attributes"
  },
  "typeVersion": 1
}

================ Node #3827 ================
{
  "id": "a33465e9-d469-498f-9178-7c30e15d2782",
  "name": "Sticky Note2",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    2120,
    -280
  ],
  "parameters": {
    "color": 4,
    "width": 880,
    "height": 600,
    "content": "## Create the Tools (if not exists)"
  },
  "typeVersion": 1
}

================ Node #3828 ================
{
  "id": "5b5ab9f2-d4ac-437f-ab0a-b113a8af34ab",
  "name": "Generate Unique Hash for Name",
  "type": "n8n-nodes-base.crypto",
  "position": [
    2180,
    -200
  ],
  "parameters": {
    "value": "={{ $json.name.toLowerCase().trim() }}",
    "dataPropertyName": "hash"
  },
  "typeVersion": 1
}

================ Node #3829 ================
{
  "id": "ea8f7e6f-9004-4271-80d3-333701cce488",
  "name": "Create if not Exist",
  "type": "n8n-nodes-base.airtable",
  "position": [
    2400,
    -100
  ],
  "parameters": {
    "base": {
      "__rl": true,
      "mode": "list",
      "value": "appq0gcmxHAZQhswW",
      "cachedResultUrl": "https://airtable.com/appq0gcmxHAZQhswW",
      "cachedResultName": "AI Tools"
    },
    "table": {
      "__rl": true,
      "mode": "list",
      "value": "tblrikRHbX1N6P2JI",
      "cachedResultUrl": "https://airtable.com/appq0gcmxHAZQhswW/tblrikRHbX1N6P2JI",
      "cachedResultName": "Tools"
    },
    "columns": {
      "value": {
        "Hash": "={{$json.hash}}",
        "Name": "={{$json.name}}"
      },
      "schema": [
        {
          "id": "id",
          "type": "string",
          "display": true,
          "removed": true,
          "readOnly": true,
          "required": false,
          "displayName": "id",
          "defaultMatch": true
        },
        {
          "id": "Name",
          "type": "string",
          "display": true,
          "removed": false,
          "readOnly": false,
          "required": false,
          "displayName": "Name",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "Description",
          "type": "string",
          "display": true,
          "removed": true,
          "readOnly": false,
          "required": false,
          "displayName": "Description",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "Website",
          "type": "string",
          "display": true,
          "removed": true,
          "readOnly": false,
          "required": false,
          "displayName": "Website",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "Category",
          "type": "array",
          "display": true,
          "options": [],
          "removed": true,
          "readOnly": false,
          "required": false,
          "displayName": "Category",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "Attributes",
          "type": "array",
          "display": true,
          "removed": true,
          "readOnly": false,
          "required": false,
          "displayName": "Attributes",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "Hash",
          "type": "string",
          "display": true,
          "removed": false,
          "readOnly": false,
          "required": false,
          "displayName": "Hash",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        }
      ],
      "mappingMode": "defineBelow",
      "matchingColumns": [
        "Hash"
      ]
    },
    "options": {},
    "operation": "upsert"
  },
  "credentials": {
    "airtableTokenApi": {
      "id": "jMqH6HkKUYTgyHVm",
      "name": "Airtable Personal Access Token account"
    }
  },
  "typeVersion": 2.1
}

================ Node #3830 ================
{
  "id": "85ac3cbb-4103-4184-b686-9e5b8d48f421",
  "name": "Merge Old Data + RecID",
  "type": "n8n-nodes-base.merge",
  "position": [
    2820,
    -180
  ],
  "parameters": {
    "mode": "combine",
    "options": {},
    "fieldsToMatchString": "hash"
  },
  "typeVersion": 3
}

================ Node #3831 ================
{
  "id": "29d6369f-f233-46f8-8bee-aa3be854bb0c",
  "name": "Only what we need",
  "type": "n8n-nodes-base.set",
  "position": [
    2600,
    -100
  ],
  "parameters": {
    "options": {},
    "assignments": {
      "assignments": [
        {
          "id": "0ff954ec-1d71-429b-b2e8-dca17ff0478d",
          "name": "hash",
          "type": "string",
          "value": "={{ $json.fields.Hash }}"
        },
        {
          "id": "a7f4c2e7-fa63-45d7-ad22-ce8c3aaae4d6",
          "name": "id",
          "type": "string",
          "value": "={{ $json.id }}"
        },
        {
          "id": "081a7613-7c06-4578-8aa4-25d21952b727",
          "name": "existingAttributes",
          "type": "array",
          "value": "={{ $json.fields.Attributes ? $json.fields.Attributes : [] }}"
        },
        {
          "id": "e3ace89b-d818-4448-8328-b36cdf08da2a",
          "name": "existingSimilars",
          "type": "array",
          "value": "={{ $json.fields.Similar ? $json.fields.Similar : [] }}"
        }
      ]
    }
  },
  "typeVersion": 3.4
}

================ Node #3832 ================
{
  "id": "bdf9c435-3994-4c25-9520-8dfa76e625eb",
  "name": "Determine Attributes we should save",
  "type": "n8n-nodes-base.code",
  "position": [
    3040,
    -180
  ],
  "parameters": {
    "mode": "runOnceForEachItem",
    "jsCode": "let savingAttributes = $input.item.json.existingAttributes ? $input.item.json.existingAttributes : [];\n$input.item.json.attributes.forEach((attrId)=>{\nif($input.item.json.existingAttributes.indexOf(attrId) == -1) savingAttributes.push(attrId);\n});\n\n$input.item.json.savingAttributes = savingAttributes;\n\nreturn $input.item;"
  },
  "typeVersion": 2
}

================ Node #3833 ================
{
  "id": "88e9f499-87d3-46e2-b3ea-1833c14aaa1b",
  "name": "Split Out similar",
  "type": "n8n-nodes-base.splitOut",
  "position": [
    3300,
    20
  ],
  "parameters": {
    "options": {},
    "fieldToSplitOut": "similar"
  },
  "typeVersion": 1
}

================ Node #3834 ================
{
  "id": "733a8d0c-c6ea-4386-9fd1-075980289e9c",
  "name": "Merge1",
  "type": "n8n-nodes-base.merge",
  "position": [
    3960,
    0
  ],
  "parameters": {
    "mode": "combine",
    "options": {},
    "combineBy": "combineByPosition"
  },
  "typeVersion": 3
}

================ Node #3835 ================
{
  "id": "dabb7e11-b4de-44d9-a80f-3302f49194fb",
  "name": "Generate Unique Hash for Similar",
  "type": "n8n-nodes-base.crypto",
  "position": [
    3520,
    -100
  ],
  "parameters": {
    "value": "={{ $json.similar.toLowerCase().trim() }}",
    "dataPropertyName": "hash"
  },
  "typeVersion": 1
}

================ Node #3836 ================
{
  "id": "a1bbda24-f75c-4316-b2bd-645827d7af1f",
  "name": "It Should exists",
  "type": "n8n-nodes-base.airtable",
  "position": [
    3740,
    -100
  ],
  "parameters": {
    "base": {
      "__rl": true,
      "mode": "list",
      "value": "appq0gcmxHAZQhswW",
      "cachedResultUrl": "https://airtable.com/appq0gcmxHAZQhswW",
      "cachedResultName": "AI Tools"
    },
    "table": {
      "__rl": true,
      "mode": "list",
      "value": "tblrikRHbX1N6P2JI",
      "cachedResultUrl": "https://airtable.com/appq0gcmxHAZQhswW/tblrikRHbX1N6P2JI",
      "cachedResultName": "Tools"
    },
    "columns": {
      "value": {
        "Hash": "={{$json.hash}}",
        "Name": "={{$json.similar}}"
      },
      "schema": [
        {
          "id": "id",
          "type": "string",
          "display": true,
          "removed": true,
          "readOnly": true,
          "required": false,
          "displayName": "id",
          "defaultMatch": true
        },
        {
          "id": "Name",
          "type": "string",
          "display": true,
          "removed": false,
          "readOnly": false,
          "required": false,
          "displayName": "Name",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "Description",
          "type": "string",
          "display": true,
          "removed": true,
          "readOnly": false,
          "required": false,
          "displayName": "Description",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "Website",
          "type": "string",
          "display": true,
          "removed": true,
          "readOnly": false,
          "required": false,
          "displayName": "Website",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "Category",
          "type": "array",
          "display": true,
          "options": [],
          "removed": true,
          "readOnly": false,
          "required": false,
          "displayName": "Category",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "Attributes",
          "type": "array",
          "display": true,
          "removed": true,
          "readOnly": false,
          "required": false,
          "displayName": "Attributes",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "Hash",
          "type": "string",
          "display": true,
          "removed": false,
          "readOnly": false,
          "required": false,
          "displayName": "Hash",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        }
      ],
      "mappingMode": "defineBelow",
      "matchingColumns": [
        "Hash"
      ]
    },
    "options": {},
    "operation": "upsert"
  },
  "credentials": {
    "airtableTokenApi": {
      "id": "jMqH6HkKUYTgyHVm",
      "name": "Airtable Personal Access Token account"
    }
  },
  "typeVersion": 2.1
}

================ Node #3837 ================
{
  "id": "9853b85d-fcb9-4183-8fe4-6e32d318ab01",
  "name": "All Similar",
  "type": "n8n-nodes-base.set",
  "position": [
    4180,
    0
  ],
  "parameters": {
    "options": {},
    "assignments": {
      "assignments": [
        {
          "id": "675510b1-97e7-4a71-9c9e-d3ee792d9919",
          "name": "id",
          "type": "string",
          "value": "={{ $json.id }}"
        },
        {
          "id": "87cc9086-effd-4f4e-84c1-9adec5774e94",
          "name": "similar",
          "type": "string",
          "value": "={{ $json.similar }}"
        }
      ]
    }
  },
  "typeVersion": 3.4
}

================ Node #3838 ================
{
  "id": "0e98acd2-4aa5-4df0-b36b-6ac1a8a2263b",
  "name": "Merge2",
  "type": "n8n-nodes-base.merge",
  "position": [
    4400,
    -160
  ],
  "parameters": {
    "mode": "chooseBranch"
  },
  "typeVersion": 3
}

================ Node #3839 ================
{
  "id": "ed94900a-78cd-4f61-a705-30f7cb8eb9b8",
  "name": "Sticky Note3",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    3200,
    -280
  ],
  "parameters": {
    "color": 2,
    "width": 1600,
    "height": 600,
    "content": "## Map Competitors"
  },
  "typeVersion": 1
}

================ Node #3840 ================
{
  "id": "74f0f703-ce73-457c-9137-88d613d2e480",
  "name": "Change each Smiliar to the corresponding RecID",
  "type": "n8n-nodes-base.code",
  "position": [
    4600,
    -160
  ],
  "parameters": {
    "jsCode": "let knownSimilarsOutput = $('All Similar').all();\nlet knownSimilars = new Map();\nknownSimilarsOutput.forEach((nodeOutput)=>{\n knownSimilars.set(nodeOutput.json.similar.toString().trim(), nodeOutput.json.id);\n});\n\nfor (const item of $input.all()) {\n item.json.similar.forEach((similar, index)=>{\n item.json.similar[index] = knownSimilars.get(similar.toString().trim());\n });\n}\n\nreturn $input.all();"
  },
  "typeVersion": 2
}

================ Node #3841 ================
{
  "id": "c9187902-f67f-4639-906b-d6b14ace6a0e",
  "name": "Determine Similar we should save",
  "type": "n8n-nodes-base.code",
  "position": [
    4880,
    -160
  ],
  "parameters": {
    "mode": "runOnceForEachItem",
    "jsCode": "let savingSimilar = $input.item.json.existingSimilars ? $input.item.json.existingSimilars : [];\n$input.item.json.similar.forEach((simId)=>{\nif($input.item.json.existingSimilars.indexOf(simId) == -1) savingSimilar.push(simId);\n});\n\n$input.item.json.savingSimilars = savingSimilar;\n\nreturn $input.item;"
  },
  "typeVersion": 2
}

================ Node #3842 ================
{
  "id": "e925a388-05e2-49e4-92ad-984517f44057",
  "name": "Save all this juicy data",
  "type": "n8n-nodes-base.airtable",
  "position": [
    5120,
    -160
  ],
  "parameters": {
    "base": {
      "__rl": true,
      "mode": "list",
      "value": "appq0gcmxHAZQhswW",
      "cachedResultUrl": "https://airtable.com/appq0gcmxHAZQhswW",
      "cachedResultName": "AI Tools"
    },
    "table": {
      "__rl": true,
      "mode": "list",
      "value": "tblrikRHbX1N6P2JI",
      "cachedResultUrl": "https://airtable.com/appq0gcmxHAZQhswW/tblrikRHbX1N6P2JI",
      "cachedResultName": "Tools"
    },
    "columns": {
      "value": {
        "Hash": "={{$json.hash}}",
        "Name": "={{$json.name}}",
        "Similar": "={{ $json.savingSimilars }}",
        "Attributes": "={{ $json.savingAttributes }}"
      },
      "schema": [
        {
          "id": "id",
          "type": "string",
          "display": true,
          "removed": true,
          "readOnly": true,
          "required": false,
          "displayName": "id",
          "defaultMatch": true
        },
        {
          "id": "Name",
          "type": "string",
          "display": true,
          "removed": false,
          "readOnly": false,
          "required": false,
          "displayName": "Name",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "Description",
          "type": "string",
          "display": true,
          "removed": true,
          "readOnly": false,
          "required": false,
          "displayName": "Description",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "Website",
          "type": "string",
          "display": true,
          "removed": true,
          "readOnly": false,
          "required": false,
          "displayName": "Website",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "Category",
          "type": "array",
          "display": true,
          "options": [],
          "removed": true,
          "readOnly": false,
          "required": false,
          "displayName": "Category",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "Attributes",
          "type": "array",
          "display": true,
          "removed": false,
          "readOnly": false,
          "required": false,
          "displayName": "Attributes",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "Hash",
          "type": "string",
          "display": true,
          "removed": false,
          "readOnly": false,
          "required": false,
          "displayName": "Hash",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "Similar",
          "type": "array",
          "display": true,
          "removed": false,
          "readOnly": false,
          "required": false,
          "displayName": "Similar",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        }
      ],
      "mappingMode": "defineBelow",
      "matchingColumns": [
        "Hash"
      ]
    },
    "options": {},
    "operation": "upsert"
  },
  "credentials": {
    "airtableTokenApi": {
      "id": "jMqH6HkKUYTgyHVm",
      "name": "Airtable Personal Access Token account"
    }
  },
  "typeVersion": 2.1
}

================ Node #3843 ================
{
  "id": "d2532094-9c71-4fc0-8195-fb2e29169086",
  "name": "Map Agent Input",
  "type": "n8n-nodes-base.set",
  "position": [
    -440,
    -220
  ],
  "parameters": {
    "options": {},
    "assignments": {
      "assignments": [
        {
          "id": "ace29464-a2a1-44a1-87f9-255fbde042cf",
          "name": "chatInput",
          "type": "string",
          "value": "={{$json.Prompt}}"
        }
      ]
    },
    "includeOtherFields": true
  },
  "typeVersion": 3.4
}

================ Node #3844 ================
{
  "id": "8fa7273b-ebc8-40e4-9f11-e4b26784f60d",
  "name": "gpt-4o",
  "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
  "position": [
    -200,
    20
  ],
  "parameters": {
    "model": "gpt-4o",
    "options": {}
  },
  "credentials": {
    "openAiApi": {
      "id": "25",
      "name": "Key 3 vom 15. Jan. 2023\t"
    }
  },
  "typeVersion": 1
}

================ Node #3845 ================
{
  "id": "fb282ffe-4871-4560-97ce-43cc381db874",
  "name": "Note3",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    -1440,
    -580
  ],
  "parameters": {
    "width": 668,
    "height": 786,
    "content": "## Instructions\n\nThis automation enables you to just upload any Image (via Form) of a Logo Sheet, containing multiple Images of Products, most likely and bringing them in some context to one another. \n\nAfter submitting an AI-Agent eats **that Logo Sheet**, turning it into an List of \"Productname\" and \"Attributes\", also checks if Tools are kind of similar to another, given the Context of the Image.\n\nWe utilize AI Vision capabilities for that. **NOTE:** It might not be able to extract all informations. For a \"upload and forget it\" Workflow it works for me. You can even run it multiple times, to be sure. \n\nBut if you need to make sure it extracts **everything** you might need to think about an Multi-Agent Setup with Validation-Agent Steps.\n\nOnce the Agent finishes the extraction, it will traditionally and deterministicly add those Attributes to Airtable (**Creates** those, if not already existing.) and also **Upserts** the Tool Informations.\n\nIt uses MD5 **Hashes** for turning Product Names into.. something fancy really, you could also use it without that, but I wanted to have something that looks atleast like an ID. \n\n### Setup\n\n1. Set Up the Airtable like shown below.\n2. Update and set Credentials for all Airtable Nodes.\n3. Check or Adjust the Prompt of the Agent matching your use-case.\n4. Activate the Workflow. \n5. Open the Form (default: https://your-n8n.io/form/logo-sheet-feeder)\n6. Enjoy growing your Airtable.\n\n![Image](https://cloud.let-the-work-flow.com/logo-64.png) \nEnjoy the workflow! \u2764\ufe0f \n[let the workf low](https://let-the-work-flow.com) \u2014 Workflow Automation & Development"
  },
  "typeVersion": 1
}

================ Node #3846 ================
{
  "id": "9ea45b9b-ac2a-4498-b96f-5f5de50acade",
  "name": "Table: Tools",
  "type": "n8n-nodes-base.noOp",
  "position": [
    -1340,
    340
  ],
  "parameters": {},
  "typeVersion": 1
}

================ Node #3847 ================
{
  "id": "6dfbc02e-36b3-4640-b9f2-940c7cd6f86e",
  "name": "Table: Attributes",
  "type": "n8n-nodes-base.noOp",
  "position": [
    -1000,
    340
  ],
  "parameters": {},
  "typeVersion": 1
}

================ Node #3848 ================
{
  "id": "d8ffeff8-8df7-4fc0-9f18-49a44d10eb7d",
  "name": "Note",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    -1440,
    240
  ],
  "parameters": {
    "color": 7,
    "width": 668,
    "height": 786,
    "content": "## Airtable Structure\n"
  },
  "typeVersion": 1
}

================ Node #3849 ================
{
  "id": "7023be89-ee1d-41e6-bcf5-ee28f1284e07",
  "name": "Sticky Note4",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    -1420,
    580
  ],
  "parameters": {
    "color": 5,
    "width": 300,
    "height": 320,
    "content": "### Tools Table Fields\n\n**Required:**\nName (singleLineText) \nAttributes (multipleRecordLinks=Link to Attributes Table) \nHash (singleLineText) \nSimilar (multipleRecordLinks=Link to the Same Table:\"Tools\") \n\n_Description (multilineText)_ \n_Website (url)_\n_Category (multipleSelects)_"
  },
  "typeVersion": 1
}

================ Node #3850 ================
{
  "id": "0c999f6f-11fb-472a-aa10-0915fbcd1254",
  "name": "make it a readable list",
  "type": "n8n-nodes-base.html",
  "disabled": true,
  "position": [
    -420,
    800
  ],
  "parameters": {
    "html": ""
  },
  "typeVersion": 1.2
}

================ Node #3851 ================
{
  "id": "ae351db3-5c47-4e53-bf9e-e34434ad9522",
  "name": "Get Schema",
  "type": "n8n-nodes-base.airtable",
  "disabled": true,
  "position": [
    -640,
    800
  ],
  "parameters": {
    "base": {
      "__rl": true,
      "mode": "list",
      "value": "appq0gcmxHAZQhswW",
      "cachedResultUrl": "https://airtable.com/appq0gcmxHAZQhswW",
      "cachedResultName": "AI Tools"
    },
    "resource": "base",
    "operation": "getSchema"
  },
  "credentials": {
    "airtableTokenApi": {
      "id": "jMqH6HkKUYTgyHVm",
      "name": "Airtable Personal Access Token account"
    }
  },
  "typeVersion": 2.1
}

================ Node #3852 ================
{
  "id": "9da286e2-2a06-4d2a-bd5b-b6c828683ff2",
  "name": "Note1",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    -720,
    660
  ],
  "parameters": {
    "color": 7,
    "width": 488,
    "height": 366,
    "content": "## Helper for Documentation (ignore or enjoy it)\n"
  },
  "typeVersion": 1
}

================ Node #3853 ================
{
  "id": "901a0c48-82a9-4fd3-a007-8f4b257348d3",
  "name": "Sticky Note5",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    -1080,
    580
  ],
  "parameters": {
    "color": 5,
    "width": 280,
    "height": 320,
    "content": "### Attributes Table Fields\n\n**Required:**\nName (singleLineText)\nTools (multipleRecordLinks=Link to Tools Table) "
  },
  "typeVersion": 1
}

================ Node #3854 ================
{
  "id": "966243fa-a1a3-4201-9df7-6a01aa762ae8",
  "name": "Sticky Note6",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    -160,
    -460
  ],
  "parameters": {
    "color": 3,
    "width": 220,
    "height": 80,
    "content": "### Might want to Adjust Prompt to your \"Use-Case\" \ud83e\udd16"
  },
  "typeVersion": 1
}

================ Node #3855 ================
{
  "id": "1a4e5b87-68a6-499e-9374-e067fae12c84",
  "name": "Note4",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    -2440,
    -580
  ],
  "parameters": {
    "color": 7,
    "width": 968,
    "height": 646,
    "content": "## Example Logo Sheet\n### For these kind of sheets the Prompt is designed per default\n\n![Image](https://cloud.let-the-work-flow.com/workflow-data/example-ai-logo-sheet.jpg) "
  },
  "typeVersion": 1
}

================ Node #3856 ================
{
  "id": "584cfe61-7f1b-4deb-ab4b-45a5ffd20daf",
  "name": "Airtable",
  "type": "n8n-nodes-base.airtableTool",
  "position": [
    540,
    340
  ],
  "parameters": {
    "base": {
      "__rl": true,
      "mode": "list",
      "value": "appP3ocJy1rXIo6ko",
      "cachedResultUrl": "https://airtable.com/appP3ocJy1rXIo6ko",
      "cachedResultName": "table"
    },
    "table": {
      "__rl": true,
      "mode": "list",
      "value": "tblywtlpPtGQMTJRm",
      "cachedResultUrl": "https://airtable.com/appP3ocJy1rXIo6ko/tblywtlpPtGQMTJRm",
      "cachedResultName": "Dummy"
    },
    "options": {},
    "operation": "search"
  },
  "credentials": {
    "airtableTokenApi": {
      "id": "yiZ7ZC1md4geZovu",
      "name": "Airtable Personal Access Token account"
    }
  },
  "typeVersion": 2.1
}

================ Node #3857 ================
{
  "id": "8a100c92-7971-464b-b3c0-18272f0a0bef",
  "name": "OpenAI Chat Model",
  "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
  "position": [
    220,
    340
  ],
  "parameters": {
    "model": "gpt-4o-mini",
    "options": {}
  },
  "credentials": {
    "openAiApi": {
      "id": "q8L9oWVM7QyzYEE5",
      "name": "OpenAi account"
    }
  },
  "typeVersion": 1
}

================ Node #3858 ================
{
  "id": "98887b9b-2eae-4a2e-af2b-d40c1786c5a2",
  "name": "AI Agent",
  "type": "@n8n/n8n-nodes-langchain.agent",
  "position": [
    280,
    200
  ],
  "parameters": {
    "text": "={{ $json.body.content }}",
    "options": {},
    "promptType": "define"
  },
  "typeVersion": 1.6
}

================ Node #3859 ================
{
  "id": "91296976-3d78-4a9e-9f4c-a4136abcca4e",
  "name": "Sticky Note",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    -160,
    -260
  ],
  "parameters": {
    "color": 7,
    "width": 497.9113826976365,
    "height": 389.9939760040372,
    "content": "[![YouTube Video](https://img.youtube.com/vi/2PIdeTgsENo/0.jpg)](https://www.youtube.com/watch?v=2PIdeTgsENo)"
  },
  "typeVersion": 1
}

================ Node #3860 ================
{
  "id": "7adae874-d388-4265-aff8-28a1970bd0fb",
  "name": "Sticky Note1",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    360,
    -240
  ],
  "parameters": {
    "width": 563.3824678865192,
    "height": 368.0048034646952,
    "content": "## Get Airtable Data in Obsidian with AI Agent\n<-- Watch the video to see it in action!\n\n**How to Set Up:**\n- Install the [Post Webhook Plugin](https://github.com/Masterb1234/obsidian-post-webhook/) in Obsidian.\n- Insert the n8n Webhook URL into the Post Webhook plugin settings.\n- Configure Your Airtable Node to match your workflow needs.\n\n\n**How to Use:**\n- Highlight text containing a question about your Airtable data.\n- Open the Obsidian Command Palette (Ctrl+P) and choose 'Send Selection to [Your Webhook]'.\n- Click, wait for the AI Agent to process your request, and see the result appear below your selected text."
  },
  "typeVersion": 1
}

================ Node #3861 ================
{
  "id": "52c40581-656d-45b5-b366-d67cf2474312",
  "name": "Respond to Obsidian",
  "type": "n8n-nodes-base.respondToWebhook",
  "position": [
    700,
    200
  ],
  "parameters": {
    "options": {},
    "respondWith": "text",
    "responseBody": "={{ $json.output }}"
  },
  "typeVersion": 1.1
}

================ Node #3862 ================
{
  "id": "f2bf502e-5e6f-4e71-8c4f-27ec2dc5ab67",
  "name": "Webhook Set Up in Obsidian",
  "type": "n8n-nodes-base.webhook",
  "position": [
    -40,
    200
  ],
  "webhookId": "59fc8248-d3f7-4dbc-bdf3-39d59e427160",
  "parameters": {
    "path": "59fc8248-d3f7-4dbc-bdf3-39d59e427160",
    "options": {},
    "httpMethod": "POST",
    "responseMode": "responseNode"
  },
  "typeVersion": 2
}

================ Node #3863 ================
{
  "id": "da34bd1a-4e4e-4133-acad-939d0cc96596",
  "name": "Telegram Trigger",
  "type": "n8n-nodes-base.telegramTrigger",
  "position": [
    -1740,
    880
  ],
  "webhookId": "05885608-5344-4dcf-81ad-4550b9a01241",
  "parameters": {
    "updates": [
      "*"
    ],
    "additionalFields": {}
  },
  "credentials": {
    "telegramApi": {
      "id": "VPtf3hBnwGucAQtu",
      "name": "TEMPLATE"
    }
  },
  "typeVersion": 1.1
}

================ Node #3864 ================
{
  "id": "3b3f4b00-6b3b-4346-8fcc-7ab75bcfe838",
  "name": "Code",
  "type": "n8n-nodes-base.code",
  "notes": "Extract the URL from the previous node",
  "position": [
    80,
    260
  ],
  "parameters": {
    "jsCode": "// O valor vem como um array com uma string, ent\u00e3o precisamos pegar o primeiro item do array\nconst rawUrl = $json.choices[0].text;\n\n// Remover colchetes e aspas (se existirem) e pegar o primeiro elemento do array\nconst imageUrl = JSON.parse(rawUrl)[0];\n\nreturn {\n json: {\n imageUrl: imageUrl\n }\n};"
  },
  "notesInFlow": true,
  "typeVersion": 2
}

================ Node #3865 ================
{
  "id": "ccb91a15-96b5-42aa-a6ae-ff7ae79d1e8f",
  "name": "HTTP Request3",
  "type": "n8n-nodes-base.httpRequest",
  "position": [
    240,
    260
  ],
  "parameters": {
    "url": "={{ $json.imageUrl }}",
    "options": {}
  },
  "typeVersion": 4.2
}

================ Node #3866 ================
{
  "id": "588899b6-a68e-407e-b12f-f05c205674c5",
  "name": "Telegram2",
  "type": "n8n-nodes-base.telegram",
  "position": [
    -520,
    500
  ],
  "parameters": {
    "text": "\u231b",
    "chatId": "={{ $('Telegram Trigger').item.json.message.chat.id }}",
    "replyMarkup": "inlineKeyboard",
    "additionalFields": {
      "appendAttribution": false,
      "reply_to_message_id": "={{ $('Telegram Trigger').item.json.message.message_id }}"
    }
  },
  "credentials": {
    "telegramApi": {
      "id": "VPtf3hBnwGucAQtu",
      "name": "TEMPLATE"
    }
  },
  "typeVersion": 1.2
}

================ Node #3867 ================
{
  "id": "e1534b69-d93d-4e8b-a3c4-adbc17c1dacd",
  "name": "Telegram1",
  "type": "n8n-nodes-base.telegram",
  "position": [
    440,
    260
  ],
  "parameters": {
    "chatId": "={{ $('Telegram Trigger').item.json.message.chat.id }}",
    "operation": "sendPhoto",
    "binaryData": true,
    "additionalFields": {
      "caption": "=*Prompt:* `{{ $('Code1').item.json.cleanMessage }}`",
      "parse_mode": "Markdown",
      "reply_to_message_id": "={{ $('Telegram Trigger').item.json.message.message_id }}"
    }
  },
  "credentials": {
    "telegramApi": {
      "id": "VPtf3hBnwGucAQtu",
      "name": "TEMPLATE"
    }
  },
  "typeVersion": 1.2
}

================ Node #3868 ================
{
  "id": "88ba4ced-bdd0-408e-94e1-9e54ed4d1b5d",
  "name": "Telegram4",
  "type": "n8n-nodes-base.telegram",
  "position": [
    620,
    260
  ],
  "parameters": {
    "chatId": "={{ $('Telegram2').item.json.result.chat.id }}",
    "messageId": "={{ $('Telegram2').item.json.result.message_id }}",
    "operation": "deleteMessage"
  },
  "credentials": {
    "telegramApi": {
      "id": "VPtf3hBnwGucAQtu",
      "name": "TEMPLATE"
    }
  },
  "typeVersion": 1.2
}

================ Node #3869 ================
{
  "id": "251a026e-ebfa-44f5-9c80-f30e5c142e23",
  "name": "Telegram3",
  "type": "n8n-nodes-base.telegram",
  "position": [
    260,
    700
  ],
  "parameters": {
    "text": "={{ $json.error.message }}",
    "chatId": "={{ $('Telegram Trigger').item.json.message.chat.id }}",
    "replyMarkup": "inlineKeyboard",
    "inlineKeyboard": {
      "rows": [
        {
          "row": {
            "buttons": [
              {
                "text": "\ud83d\udd04 Retry",
                "additionalFields": {
                  "callback_data": "=response= Fluxretry: {{ $('Code1').item.json.cleanMessage }}"
                }
              }
            ]
          }
        }
      ]
    },
    "additionalFields": {
      "appendAttribution": false,
      "reply_to_message_id": "={{ $('Telegram Trigger').item.json.message.message_id }}"
    }
  },
  "credentials": {
    "telegramApi": {
      "id": "VPtf3hBnwGucAQtu",
      "name": "TEMPLATE"
    }
  },
  "typeVersion": 1.2
}

================ Node #3870 ================
{
  "id": "fb71a62a-9cf8-4abf-baa4-885ae4b1a290",
  "name": "Telegram5",
  "type": "n8n-nodes-base.telegram",
  "position": [
    480,
    700
  ],
  "parameters": {
    "chatId": "={{ $('Telegram2').item.json.result.chat.id }}",
    "messageId": "={{ $('Telegram2').item.json.result.message_id }}",
    "operation": "deleteMessage"
  },
  "credentials": {
    "telegramApi": {
      "id": "VPtf3hBnwGucAQtu",
      "name": "TEMPLATE"
    }
  },
  "typeVersion": 1.2
}

================ Node #3871 ================
{
  "id": "0f9bcdf0-0008-447a-900c-6afe5b9d53fe",
  "name": "Telegram6",
  "type": "n8n-nodes-base.telegram",
  "position": [
    260,
    520
  ],
  "parameters": {
    "text": "=*Prompt too short*",
    "chatId": "={{ $('Telegram Trigger').item.json.message.chat.id }}",
    "replyMarkup": "inlineKeyboard",
    "additionalFields": {
      "parse_mode": "Markdown",
      "appendAttribution": false,
      "reply_to_message_id": "={{ $('Telegram Trigger').item.json.message.message_id }}"
    }
  },
  "credentials": {
    "telegramApi": {
      "id": "VPtf3hBnwGucAQtu",
      "name": "TEMPLATE"
    }
  },
  "typeVersion": 1.2
}

================ Node #3872 ================
{
  "id": "d805548a-7379-456c-9bc3-f5fafeb86aed",
  "name": "Telegram7",
  "type": "n8n-nodes-base.telegram",
  "position": [
    480,
    520
  ],
  "parameters": {
    "chatId": "={{ $('Telegram2').item.json.result.chat.id }}",
    "messageId": "={{ $('Telegram2').item.json.result.message_id }}",
    "operation": "deleteMessage"
  },
  "credentials": {
    "telegramApi": {
      "id": "VPtf3hBnwGucAQtu",
      "name": "TEMPLATE"
    }
  },
  "typeVersion": 1.2
}

================ Node #3873 ================
{
  "id": "a3e521a3-aff0-4d31-9a69-626f70f86ae2",
  "name": "NeurochainAI - REST API",
  "type": "n8n-nodes-base.httpRequest",
  "onError": "continueErrorOutput",
  "position": [
    -680,
    1280
  ],
  "parameters": {
    "url": "https://ncmb.neurochain.io/tasks/message",
    "method": "POST",
    "options": {},
    "jsonBody": "={\n \"model\": \"Meta-Llama-3.1-8B-Instruct-Q6_K.gguf\",\n \"prompt\": \"You must respond directly to the user's message, and the message the user sent you is the following message: {{ $('Telegram Trigger').item.json.message.text }}\",\n \"max_tokens\": 1024,\n \"temperature\": 0.6,\n \"top_p\": 0.95,\n \"frequency_penalty\": 0,\n \"presence_penalty\": 1.1\n}",
    "sendBody": true,
    "sendHeaders": true,
    "specifyBody": "json",
    "headerParameters": {
      "parameters": [
        {
          "name": "Authorization",
          "value": "=Bearer YOUR-API-KEY-HERE"
        },
        {
          "name": "Content-Type",
          "value": "application/json"
        }
      ]
    }
  },
  "typeVersion": 4.2,
  "alwaysOutputData": false
}

================ Node #3874 ================
{
  "id": "5fea3a8b-3e1b-4c69-b734-3f9dc7647e4b",
  "name": "TYPING - ACTION",
  "type": "n8n-nodes-base.telegram",
  "position": [
    -1100,
    1280
  ],
  "parameters": {
    "chatId": "={{ $('Telegram Trigger').item.json.message.chat.id }}",
    "operation": "sendChatAction"
  },
  "credentials": {
    "telegramApi": {
      "id": "VPtf3hBnwGucAQtu",
      "name": "TEMPLATE"
    }
  },
  "typeVersion": 1.2
}

================ Node #3875 ================
{
  "id": "ca183e3d-2bef-4d80-bbb7-c712a0290b2b",
  "name": "AI Response",
  "type": "n8n-nodes-base.telegram",
  "position": [
    -360,
    1000
  ],
  "parameters": {
    "text": "={{ $json.choices[0].text }}",
    "chatId": "={{ $('Telegram Trigger').item.json.message.chat.id }}",
    "additionalFields": {
      "parse_mode": "Markdown",
      "appendAttribution": false,
      "reply_to_message_id": "={{ $('Telegram Trigger').item.json.message.message_id }}"
    }
  },
  "credentials": {
    "telegramApi": {
      "id": "VPtf3hBnwGucAQtu",
      "name": "TEMPLATE"
    }
  },
  "typeVersion": 1.2
}

================ Node #3876 ================
{
  "id": "27e65f30-e58e-457d-b3b7-2b74267554e1",
  "name": "No response",
  "type": "n8n-nodes-base.telegram",
  "position": [
    -140,
    1240
  ],
  "parameters": {
    "text": "=*No response from worker*",
    "chatId": "={{ $('Telegram Trigger').item.json.message.chat.id }}",
    "additionalFields": {
      "parse_mode": "Markdown",
      "appendAttribution": false,
      "reply_to_message_id": "={{ $('Telegram Trigger').item.json.message.message_id }}"
    }
  },
  "credentials": {
    "telegramApi": {
      "id": "VPtf3hBnwGucAQtu",
      "name": "TEMPLATE"
    }
  },
  "typeVersion": 1.2
}

================ Node #3877 ================
{
  "id": "02cf4dfa-558f-4968-ad09-19f1e40735b0",
  "name": "Prompt too short",
  "type": "n8n-nodes-base.telegram",
  "position": [
    -140,
    1400
  ],
  "parameters": {
    "text": "=*Prompt too short*",
    "chatId": "={{ $('Telegram Trigger').item.json.message.chat.id }}",
    "replyMarkup": "inlineKeyboard",
    "additionalFields": {
      "parse_mode": "Markdown",
      "appendAttribution": false,
      "reply_to_message_id": "={{ $('Telegram Trigger').item.json.message.message_id }}"
    }
  },
  "credentials": {
    "telegramApi": {
      "id": "VPtf3hBnwGucAQtu",
      "name": "TEMPLATE"
    }
  },
  "typeVersion": 1.2
}

================ Node #3878 ================
{
  "id": "943d31e4-3745-49ea-9669-8a560a486cc4",
  "name": "Sticky Note",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    -400,
    1220
  ],
  "parameters": {
    "color": 3,
    "width": 460.4333621829785,
    "height": 347.9769162173868,
    "content": "## ERROR"
  },
  "typeVersion": 1
}

================ Node #3879 ================
{
  "id": "6b5d142f-8d8c-493f-81e7-cedb4e95cd31",
  "name": "Switch2",
  "type": "n8n-nodes-base.switch",
  "position": [
    -380,
    1380
  ],
  "parameters": {
    "rules": {
      "values": [
        {
          "conditions": {
            "options": {
              "version": 2,
              "leftValue": "",
              "caseSensitive": true,
              "typeValidation": "strict"
            },
            "combinator": "and",
            "conditions": [
              {
                "operator": {
                  "type": "string",
                  "operation": "equals"
                },
                "leftValue": "={{ $json.error.message }}",
                "rightValue": "=500 - \"{\\\"error\\\":true,\\\"msg\\\":\\\"No response from worker\\\"}\""
              }
            ]
          }
        },
        {
          "conditions": {
            "options": {
              "version": 2,
              "leftValue": "",
              "caseSensitive": true,
              "typeValidation": "strict"
            },
            "combinator": "and",
            "conditions": [
              {
                "id": "ef851d57-0618-4fe7-8469-a30971a05ee5",
                "operator": {
                  "type": "string",
                  "operation": "notEquals"
                },
                "leftValue": "{{ $json.error.message }}",
                "rightValue": "400 - \"{\\\"error\\\":true,\\\"msg\\\":\\\"Prompt string is invalid\\\"}\""
              }
            ]
          }
        }
      ]
    },
    "options": {}
  },
  "typeVersion": 3.2
}

================ Node #3880 ================
{
  "id": "77651cb7-2530-46b2-89eb-7ac07f39a3ba",
  "name": "Sticky Note1",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    -400,
    860
  ],
  "parameters": {
    "color": 4,
    "width": 459.0810102677459,
    "height": 350.68162004785273,
    "content": "## SUCCESS\nThis node will send the AI \u200b\u200bresponse directly to the Telegram chat."
  },
  "typeVersion": 1
}

================ Node #3881 ================
{
  "id": "5dce8414-fe7a-450a-a414-553d3e5e01cd",
  "name": "Sticky Note2",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    -830.8527430805248,
    861.5987888475245
  ],
  "parameters": {
    "color": 5,
    "width": 411.78262099325127,
    "height": 705.0354263931183,
    "content": "## HTTP REQUEST\n\nReplace **MODEL** with the desired AI model from the NeurochainAI dashboard.\n\nReplace YOUR-API-KEY-HERE with your actual NeurochainAI API key.\n\n**Models:**\nMeta-Llama-3.1-8B-Instruct-Q8_0.gguf\nMeta-Llama-3.1-8B-Instruct-Q6_K.gguf\nMistral-7B-Instruct-v0.2-GPTQ-Neurochain-custom-io\nMistral-7B-Instruct-v0.2-GPTQ-Neurochain-custom\nMistral-7B-OpenOrca-GPTQ\nMistral-7B-Instruct-v0.1-gguf-q8_0.gguf\nMistral-7B-Instruct-v0.2-GPTQ\ningredient-extractor-mistral-7b-instruct-v0.1-gguf-q8_0.gguf"
  },
  "typeVersion": 1
}

================ Node #3882 ================
{
  "id": "3540e1fa-01f8-4b5e-ad7a-1b1c5cd90d08",
  "name": "Sticky Note3",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    -840,
    220
  ],
  "parameters": {
    "color": 6,
    "width": 236.80242230495116,
    "height": 535.7153791682382,
    "content": "## This node removes the /flux prefix."
  },
  "typeVersion": 1
}

================ Node #3883 ================
{
  "id": "6720b734-c0ae-4c88-adb6-3931467c780d",
  "name": "Sticky Note4",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    220,
    444
  ],
  "parameters": {
    "color": 3,
    "width": 593.1328365275054,
    "height": 403.9345258807414,
    "content": "## ERROR"
  },
  "typeVersion": 1
}

================ Node #3884 ================
{
  "id": "30332278-399d-4c8f-8470-dfb967764455",
  "name": "Sticky Note5",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    -320,
    220
  ],
  "parameters": {
    "color": 5,
    "width": 384.60321058533617,
    "height": 538.7613862505775,
    "content": "## HTTP REQUEST\n\nReplace **MODEL** with the desired AI model from the NeurochainAI dashboard.\n\nReplace YOUR-API-KEY-HERE with your actual NeurochainAI API key.\n\n**Models:**\nsuper-flux1-schnell-gguf\nflux1-schnell-gguf"
  },
  "typeVersion": 1
}

================ Node #3885 ================
{
  "id": "09f17d6a-6229-49ad-b77b-243712552f2b",
  "name": "Code1",
  "type": "n8n-nodes-base.code",
  "position": [
    -780,
    480
  ],
  "parameters": {
    "jsCode": "// Acessa a mensagem original que est\u00e1 em $json.message.text\nconst userMessage = $json.message.text;\n\n// Remover o prefixo '/flux' e qualquer espa\u00e7o extra ap\u00f3s o comando\nconst cleanMessage = userMessage.replace(/^\\/flux\\s*/, '');\n\n// Retornar a mensagem limpa\nreturn {\n json: {\n cleanMessage: cleanMessage\n }\n};"
  },
  "typeVersion": 2
}

================ Node #3886 ================
{
  "id": "0c809796-9776-4238-94b8-0779ad390bc6",
  "name": "Sticky Note6",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    -580,
    220
  ],
  "parameters": {
    "height": 535.7153791682384,
    "content": "## This node sends an emoji to indicate that the prompt is being processed."
  },
  "typeVersion": 1
}

================ Node #3887 ================
{
  "id": "19043710-a61a-46d0-9ab9-bcdf9c94f800",
  "name": "Sticky Note7",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    220,
    80
  ],
  "parameters": {
    "color": 4,
    "width": 596.5768511548468,
    "height": 350.68162004785273,
    "content": "## SUCCESS\nThis node will send the AI \u200b\u200bresponse directly to the Telegram chat."
  },
  "typeVersion": 1
}

================ Node #3888 ================
{
  "id": "e5715001-75a3-4da3-84bb-9aad193fe680",
  "name": "Switch",
  "type": "n8n-nodes-base.switch",
  "position": [
    -1420,
    880
  ],
  "parameters": {
    "rules": {
      "values": [
        {
          "outputKey": "Flux",
          "conditions": {
            "options": {
              "version": 2,
              "leftValue": "",
              "caseSensitive": false,
              "typeValidation": "loose"
            },
            "combinator": "and",
            "conditions": [
              {
                "id": "f5df9de6-0650-42e4-9a6e-8d1becf16c51",
                "operator": {
                  "type": "string",
                  "operation": "startsWith"
                },
                "leftValue": "={{ $json.message.text }}",
                "rightValue": "/flux"
              }
            ]
          },
          "renameOutput": true
        },
        {
          "outputKey": "text",
          "conditions": {
            "options": {
              "version": 2,
              "leftValue": "",
              "caseSensitive": false,
              "typeValidation": "loose"
            },
            "combinator": "and",
            "conditions": [
              {
                "id": "a49ecf63-3f68-4e21-a015-d0cbc227c230",
                "operator": {
                  "type": "string",
                  "operation": "contains"
                },
                "leftValue": "={{ $json.message.text }}",
                "rightValue": "@NCNAI_BOT"
              }
            ]
          },
          "renameOutput": true
        },
        {
          "outputKey": "DM Text",
          "conditions": {
            "options": {
              "version": 2,
              "leftValue": "",
              "caseSensitive": false,
              "typeValidation": "loose"
            },
            "combinator": "and",
            "conditions": [
              {
                "id": "d5ac0c9f-858a-4040-b72e-ae7b522ff60e",
                "operator": {
                  "name": "filter.operator.equals",
                  "type": "string",
                  "operation": "equals"
                },
                "leftValue": "={{ $json.message.chat.type }}",
                "rightValue": "private"
              }
            ]
          },
          "renameOutput": true
        }
      ]
    },
    "options": {
      "ignoreCase": true
    },
    "looseTypeValidation": true
  },
  "typeVersion": 3.2
}

================ Node #3889 ================
{
  "id": "0ebdea59-8518-4078-b07a-9aa24c5e79b5",
  "name": "Sticky Note8",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    -1840,
    200
  ],
  "parameters": {
    "width": 623.6530631885605,
    "height": 648.96526541807,
    "content": "## Instructions for Using the Template\nFollow these steps to set up and use this template:\n\n**Create a Telegram Bot**:\n- Open Telegram and search for BotFather.\n- Use the ``/newbot`` command to create your bot.\n- Follow the prompts and copy the Token provided at the end.\n-------------\n**Obtain a NeurochainAI API Key:**\n\n- Log in to the NeurochainAI Dashboard.\n- Generate an **API Key** under the Inference As Service section.\n- Ensure your account has sufficient credits for usage.\n-------------\n **Configure Telegram Nodes:**\n- Locate all Telegram nodes in the workflow and add your Telegram Bot Token to each node's credentials.\n-------------\n**Configure HTTP Request Nodes:**\n\n- Identify the NeurochainAI - Rest API and NeurochainAI - Flux nodes in the workflow.\nIn each node:\n- Enter your desired model in the Model field.\n- Replace ``YOUR-API-KEY-HERE`` with your API Key in the headers or configuration section.\n-------------\n**Save and Test:**\n- Save the workflow in N8N.\n- Test the workflow by interacting with your Telegram bot to trigger text and image generation tasks."
  },
  "typeVersion": 1
}

================ Node #3890 ================
{
  "id": "06642d6b-f8e2-48b6-87e3-5f51af75d357",
  "name": "NeurochainAI - Flux",
  "type": "n8n-nodes-base.httpRequest",
  "onError": "continueErrorOutput",
  "position": [
    -180,
    540
  ],
  "parameters": {
    "url": "https://ncmb.neurochain.io/tasks/tti",
    "method": "POST",
    "options": {},
    "jsonBody": "={\n \"model\": \"flux1-schnell-gguf\",\n \"prompt\": \"Generate an image that matches exactly this: {{ $('Code1').item.json.cleanMessage }}\",\n \"size\": \"1024x1024\",\n \"quality\": \"standard\",\n \"n\": 1,\n \"seed\": {{ Math.floor(Math.random() * 999) + 1 }}\n}",
    "sendBody": true,
    "sendHeaders": true,
    "specifyBody": "json",
    "headerParameters": {
      "parameters": [
        {
          "name": "Authorization",
          "value": "=Bearer YOUR-API-KEY-HERE"
        },
        {
          "name": "Content-Type",
          "value": "application/json"
        }
      ]
    }
  },
  "typeVersion": 4.2,
  "alwaysOutputData": false
}

================ Node #3891 ================
{
  "id": "92820069-3e65-4385-8b79-9b04dd1d3b03",
  "name": "Switch1",
  "type": "n8n-nodes-base.switch",
  "position": [
    100,
    600
  ],
  "parameters": {
    "rules": {
      "values": [
        {
          "conditions": {
            "options": {
              "version": 2,
              "leftValue": "",
              "caseSensitive": true,
              "typeValidation": "strict"
            },
            "combinator": "and",
            "conditions": [
              {
                "operator": {
                  "type": "string",
                  "operation": "equals"
                },
                "leftValue": "={{ $json.error.message }}",
                "rightValue": "400 - \"{\\\"error\\\":true,\\\"msg\\\":\\\"Prompt string is invalid\\\"}\""
              }
            ]
          }
        },
        {
          "conditions": {
            "options": {
              "version": 2,
              "leftValue": "",
              "caseSensitive": true,
              "typeValidation": "strict"
            },
            "combinator": "and",
            "conditions": [
              {
                "id": "ef851d57-0618-4fe7-8469-a30971a05ee5",
                "operator": {
                  "type": "string",
                  "operation": "notEquals"
                },
                "leftValue": "{{ $json.error.message }}",
                "rightValue": "400 - \"{\\\"error\\\":true,\\\"msg\\\":\\\"Prompt string is invalid\\\"}\""
              }
            ]
          }
        }
      ]
    },
    "options": {}
  },
  "typeVersion": 3.2
}

================ Node #3892 ================
{
  "id": "313b16dc-2583-42f3-a0f7-487e75d7a7ec",
  "name": "When clicking \u2018Test workflow\u2019",
  "type": "n8n-nodes-base.manualTrigger",
  "position": [
    -700,
    -100
  ],
  "parameters": {},
  "typeVersion": 1
}

================ Node #3893 ================
{
  "id": "fd59c09f-64cd-4e8a-80b1-d1abd9a52a5c",
  "name": "Printify - Get Shops",
  "type": "n8n-nodes-base.httpRequest",
  "position": [
    -60,
    -100
  ],
  "parameters": {
    "url": "https://api.printify.com/v1/shops.json",
    "options": {},
    "authentication": "genericCredentialType",
    "genericAuthType": "httpHeaderAuth"
  },
  "credentials": {
    "httpHeaderAuth": {
      "id": "vBaDp4RbmXnEx2rj",
      "name": "AlexK1919 Printify Header Auth"
    }
  },
  "typeVersion": 4.2
}

================ Node #3894 ================
{
  "id": "8fa6a094-02f5-46c4-90d4-c17de302b004",
  "name": "Printify - Get Products",
  "type": "n8n-nodes-base.httpRequest",
  "position": [
    140,
    -100
  ],
  "parameters": {
    "url": "=https://api.printify.com/v1/shops/{{ $json.id }}/products.json",
    "options": {},
    "authentication": "genericCredentialType",
    "genericAuthType": "httpHeaderAuth"
  },
  "credentials": {
    "httpHeaderAuth": {
      "id": "vBaDp4RbmXnEx2rj",
      "name": "AlexK1919 Printify Header Auth"
    }
  },
  "typeVersion": 4.2
}

================ Node #3895 ================
{
  "id": "00cdd85f-75ef-480b-aa58-d732b764337f",
  "name": "Split Out",
  "type": "n8n-nodes-base.splitOut",
  "position": [
    340,
    -100
  ],
  "parameters": {
    "options": {},
    "fieldToSplitOut": "data"
  },
  "typeVersion": 1
}

================ Node #3896 ================
{
  "id": "564b02c3-38ce-411d-b1ca-e1a4b75310e4",
  "name": "Loop Over Items",
  "type": "n8n-nodes-base.splitInBatches",
  "position": [
    540,
    -100
  ],
  "parameters": {
    "options": {}
  },
  "typeVersion": 3
}

================ Node #3897 ================
{
  "id": "95ea265f-7043-46ef-8513-67cf9407bda5",
  "name": "Split - id, title, desc",
  "type": "n8n-nodes-base.splitOut",
  "position": [
    740,
    -100
  ],
  "parameters": {
    "include": "selectedOtherFields",
    "options": {},
    "fieldToSplitOut": "id",
    "fieldsToInclude": "title, description"
  },
  "typeVersion": 1
}

================ Node #3898 ================
{
  "id": "93ec8766-6ab3-4331-91fd-9aad24b587e9",
  "name": "Calculator",
  "type": "@n8n/n8n-nodes-langchain.toolCalculator",
  "position": [
    2240,
    80
  ],
  "parameters": {},
  "typeVersion": 1
}

================ Node #3899 ================
{
  "id": "a9adf75e-bce3-4e0a-af44-e5e23b16b2f6",
  "name": "Wikipedia",
  "type": "@n8n/n8n-nodes-langchain.toolWikipedia",
  "position": [
    2120,
    80
  ],
  "parameters": {},
  "typeVersion": 1
}

================ Node #3900 ================
{
  "id": "36272d91-a100-498d-8f24-2e93f2a1bb5b",
  "name": "Printify - Update Product",
  "type": "n8n-nodes-base.httpRequest",
  "position": [
    2080,
    500
  ],
  "parameters": {
    "url": "=https://api.printify.com/v1/shops/{{ $json.id }}/products/{{ $('Google Sheets Trigger').item.json.product_id }}.json",
    "method": "PUT",
    "options": {},
    "sendBody": true,
    "authentication": "genericCredentialType",
    "bodyParameters": {
      "parameters": [
        {
          "name": "=title",
          "value": "={{ $('Google Sheets Trigger').item.json.product_title }}"
        },
        {
          "name": "description",
          "value": "={{ $('Google Sheets Trigger').item.json.product_desc }}"
        }
      ]
    },
    "genericAuthType": "httpHeaderAuth"
  },
  "credentials": {
    "httpHeaderAuth": {
      "id": "vBaDp4RbmXnEx2rj",
      "name": "AlexK1919 Printify Header Auth"
    }
  },
  "typeVersion": 4.2
}

================ Node #3901 ================
{
  "id": "63f9c4f5-cf6a-444a-af47-ea0e45b506ac",
  "name": "Brand Guidelines + Custom Instructions",
  "type": "n8n-nodes-base.set",
  "position": [
    -420,
    -100
  ],
  "parameters": {
    "options": {},
    "assignments": {
      "assignments": [
        {
          "id": "887815dd-21d5-41d7-b429-5f4361cf93b3",
          "name": "brand_name",
          "type": "string",
          "value": "AlexK1919"
        },
        {
          "id": "cbaa3dc0-825c-44e4-8a27-061f49daf249",
          "name": "brand_tone",
          "type": "string",
          "value": "informal, instructional, trustoworthy"
        },
        {
          "id": "0bd1358e-4586-407e-848e-8257923ed1b8",
          "name": "custom_instructions",
          "type": "string",
          "value": "re-write for the coming Christmas season"
        }
      ]
    }
  },
  "typeVersion": 3.4
}

================ Node #3902 ================
{
  "id": "8e99d571-753c-4aca-bdd5-0a8dfb6f5aca",
  "name": "Sticky Note9",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    -1000,
    -340
  ],
  "parameters": {
    "color": 6,
    "width": 250,
    "height": 1066.0405523297766,
    "content": "# AlexK1919 \n![Alex Kim](https://media.licdn.com/dms/image/v2/D5603AQFOYMkqCPl6Sw/profile-displayphoto-shrink_400_400/profile-displayphoto-shrink_400_400/0/1718309808352?e=1736985600&v=beta&t=pQKm7lQfUU1ytuC2Gq1PRxNY-XmROFWbo-BjzUPxWOs)\n\n#### I\u2019m Alex Kim, an AI-Native Workflow Automation Architect Building Solutions to Optimize your Personal and Professional Life.\n\n\n### About Me\nhttps://beacons.ai/alexk1919\n\n### Products Used \n[OpenAI](https://openai.com)\n[Printify](https://printify.com/)\n\n[Google Sheets Template for this Workflow](https://docs.google.com/spreadsheets/d/12Y7M5YSUW1e8UUOjupzctOrEtgMK-0Wb32zcVpNcfjk/edit?gid=0#gid=0)"
  },
  "typeVersion": 1
}

================ Node #3903 ================
{
  "id": "59ad5fd5-8960-421e-9d8b-1da34dd54b92",
  "name": "Sticky Note10",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    -120,
    -340
  ],
  "parameters": {
    "color": 4,
    "width": 1020.0792140594992,
    "height": 1064.4036342575048,
    "content": "# ![Printify](https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcTb2gV-cjThU_5xJRxtjDx7Uh9xXCN5Uo1GGA&s)\nYou can swap out the API calls to similar services like Printful, Vistaprint, etc."
  },
  "typeVersion": 1
}

================ Node #3904 ================
{
  "id": "25faf7eb-c83d-4740-b3a9-762b652f67d6",
  "name": "Google Sheets Trigger",
  "type": "n8n-nodes-base.googleSheetsTrigger",
  "position": [
    1480,
    500
  ],
  "parameters": {
    "event": "rowUpdate",
    "options": {
      "columnsToWatch": [
        "upload"
      ]
    },
    "pollTimes": {
      "item": [
        {
          "mode": "everyMinute"
        }
      ]
    },
    "sheetName": {
      "__rl": true,
      "mode": "list",
      "value": "gid=0",
      "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1A6Phr6QwnMltm1_O6dVGAzmSPlOwuwp7RbCiLSvd9l0/edit#gid=0",
      "cachedResultName": "Sheet1"
    },
    "documentId": {
      "__rl": true,
      "mode": "list",
      "value": "1A6Phr6QwnMltm1_O6dVGAzmSPlOwuwp7RbCiLSvd9l0",
      "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1A6Phr6QwnMltm1_O6dVGAzmSPlOwuwp7RbCiLSvd9l0/edit?usp=drivesdk",
      "cachedResultName": "Printify - AlexK1919"
    }
  },
  "credentials": {
    "googleSheetsTriggerOAuth2Api": {
      "id": "qrn9YcLkT3BSPIPA",
      "name": "AlexK191 Google Sheets Trigger account"
    }
  },
  "typeVersion": 1
}

================ Node #3905 ================
{
  "id": "c1f3a7f5-ddc5-4d3d-a5ae-8663c31e7376",
  "name": "Printify - Get Shops1",
  "type": "n8n-nodes-base.httpRequest",
  "position": [
    1880,
    500
  ],
  "parameters": {
    "url": "https://api.printify.com/v1/shops.json",
    "options": {},
    "authentication": "genericCredentialType",
    "genericAuthType": "httpHeaderAuth"
  },
  "credentials": {
    "httpHeaderAuth": {
      "id": "vBaDp4RbmXnEx2rj",
      "name": "AlexK1919 Printify Header Auth"
    }
  },
  "typeVersion": 4.2
}

================ Node #3906 ================
{
  "id": "b38cdb40-9784-43d6-b1d2-4d30340d2c1f",
  "name": "GS - Add Product Option",
  "type": "n8n-nodes-base.googleSheets",
  "position": [
    1880,
    -100
  ],
  "parameters": {
    "columns": {
      "value": {
        "xid": "={{ Math.random().toString(36).substr(2, 12) }}",
        "date": "={{ new Date().toISOString().split('T')[0] }}",
        "time": "={{ new Date().toLocaleTimeString('en-US', { hour12: false }) }}",
        "status": "Product Processing"
      },
      "schema": [
        {
          "id": "xid",
          "type": "string",
          "display": true,
          "required": false,
          "displayName": "xid",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "status",
          "type": "string",
          "display": true,
          "required": false,
          "displayName": "status",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "date",
          "type": "string",
          "display": true,
          "required": false,
          "displayName": "date",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "time",
          "type": "string",
          "display": true,
          "required": false,
          "displayName": "time",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "product_id",
          "type": "string",
          "display": true,
          "removed": false,
          "required": false,
          "displayName": "product_id",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "original_title",
          "type": "string",
          "display": true,
          "removed": false,
          "required": false,
          "displayName": "original_title",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "product_title",
          "type": "string",
          "display": true,
          "removed": false,
          "required": false,
          "displayName": "product_title",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "original_desc",
          "type": "string",
          "display": true,
          "removed": false,
          "required": false,
          "displayName": "original_desc",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "product_desc",
          "type": "string",
          "display": true,
          "removed": false,
          "required": false,
          "displayName": "product_desc",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "product_url",
          "type": "string",
          "display": true,
          "removed": false,
          "required": false,
          "displayName": "product_url",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "image_url",
          "type": "string",
          "display": true,
          "removed": false,
          "required": false,
          "displayName": "image_url",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "video_url",
          "type": "string",
          "display": true,
          "removed": false,
          "required": false,
          "displayName": "video_url",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        }
      ],
      "mappingMode": "defineBelow",
      "matchingColumns": []
    },
    "options": {
      "useAppend": true
    },
    "operation": "append",
    "sheetName": {
      "__rl": true,
      "mode": "list",
      "value": "gid=0",
      "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1Ql9TGAzZCSdSqrHvkZLcsBPoNMAjNpPVsELkumP2heM/edit#gid=0",
      "cachedResultName": "Sheet1"
    },
    "documentId": {
      "__rl": true,
      "mode": "list",
      "value": "1A6Phr6QwnMltm1_O6dVGAzmSPlOwuwp7RbCiLSvd9l0",
      "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1A6Phr6QwnMltm1_O6dVGAzmSPlOwuwp7RbCiLSvd9l0/edit?usp=drivesdk",
      "cachedResultName": "Printify - AlexK1919"
    }
  },
  "credentials": {
    "googleSheetsOAuth2Api": {
      "id": "IpY8N9VFCXJLC1hv",
      "name": "AlexK1919 Google Sheets account"
    }
  },
  "typeVersion": 4.3
}

================ Node #3907 ================
{
  "id": "da735862-b67d-443e-8f45-e425ef518145",
  "name": "Update Product Option",
  "type": "n8n-nodes-base.googleSheets",
  "position": [
    2440,
    -100
  ],
  "parameters": {
    "columns": {
      "value": {
        "xid": "={{ $('GS - Add Product Option').item.json.xid }}",
        "status": "Option added",
        "keyword": "={{ $json.message.content.keyword }}",
        "product_id": "={{ $('Split - id, title, desc').item.json.id }}",
        "product_desc": "={{ $json.message.content.description }}",
        "original_desc": "={{ $('Split - id, title, desc').item.json.description }}",
        "product_title": "={{ $json.message.content.title }}",
        "original_title": "={{ $('Split - id, title, desc').item.json.title }}"
      },
      "schema": [
        {
          "id": "xid",
          "type": "string",
          "display": true,
          "removed": false,
          "required": false,
          "displayName": "xid",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "status",
          "type": "string",
          "display": true,
          "required": false,
          "displayName": "status",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "upload",
          "type": "string",
          "display": true,
          "removed": false,
          "required": false,
          "displayName": "upload",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "date",
          "type": "string",
          "display": true,
          "required": false,
          "displayName": "date",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "time",
          "type": "string",
          "display": true,
          "required": false,
          "displayName": "time",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "product_id",
          "type": "string",
          "display": true,
          "removed": false,
          "required": false,
          "displayName": "product_id",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "keyword",
          "type": "string",
          "display": true,
          "removed": false,
          "required": false,
          "displayName": "keyword",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "original_title",
          "type": "string",
          "display": true,
          "removed": false,
          "required": false,
          "displayName": "original_title",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "product_title",
          "type": "string",
          "display": true,
          "required": false,
          "displayName": "product_title",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "original_desc",
          "type": "string",
          "display": true,
          "removed": false,
          "required": false,
          "displayName": "original_desc",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "product_desc",
          "type": "string",
          "display": true,
          "required": false,
          "displayName": "product_desc",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "product_url",
          "type": "string",
          "display": true,
          "required": false,
          "displayName": "product_url",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "image_url",
          "type": "string",
          "display": true,
          "required": false,
          "displayName": "image_url",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "video_url",
          "type": "string",
          "display": true,
          "required": false,
          "displayName": "video_url",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        }
      ],
      "mappingMode": "defineBelow",
      "matchingColumns": [
        "xid"
      ]
    },
    "options": {},
    "operation": "appendOrUpdate",
    "sheetName": {
      "__rl": true,
      "mode": "list",
      "value": "gid=0",
      "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1A6Phr6QwnMltm1_O6dVGAzmSPlOwuwp7RbCiLSvd9l0/edit#gid=0",
      "cachedResultName": "Sheet1"
    },
    "documentId": {
      "__rl": true,
      "mode": "list",
      "value": "1A6Phr6QwnMltm1_O6dVGAzmSPlOwuwp7RbCiLSvd9l0",
      "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1A6Phr6QwnMltm1_O6dVGAzmSPlOwuwp7RbCiLSvd9l0/edit?usp=drivesdk",
      "cachedResultName": "Printify - AlexK1919"
    }
  },
  "credentials": {
    "googleSheetsOAuth2Api": {
      "id": "IpY8N9VFCXJLC1hv",
      "name": "AlexK1919 Google Sheets account"
    }
  },
  "typeVersion": 4.5
}

================ Node #3908 ================
{
  "id": "b8eeb5b9-e048-4844-8712-b9fed848c041",
  "name": "Sticky Note1",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    927.0167061883853,
    -340
  ],
  "parameters": {
    "color": 5,
    "width": 454.85441546185024,
    "height": 1064.2140159143948,
    "content": "# Set the Number of Options you'd like for the Title and Description"
  },
  "typeVersion": 1
}

================ Node #3909 ================
{
  "id": "0e705827-9fc9-42d7-9c6a-7597de767acb",
  "name": "Sticky Note2",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    1409,
    -340
  ],
  "parameters": {
    "color": 4,
    "width": 1429.3228597821253,
    "height": 692.9832938116144,
    "content": "# Process Title and Description Options"
  },
  "typeVersion": 1
}

================ Node #3910 ================
{
  "id": "c0a829b4-6902-4a8d-81a8-70fb1fdf4634",
  "name": "Sticky Note11",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    -560,
    -340
  ],
  "parameters": {
    "color": 5,
    "width": 410,
    "height": 1067.57654641223,
    "content": "# Update your Brand Guidelines before running this workflow\nYou can also add custom instructions for the AI node."
  },
  "typeVersion": 1
}

================ Node #3911 ================
{
  "id": "6c50977f-6245-4d57-9cde-8ed8a572af21",
  "name": "If1",
  "type": "n8n-nodes-base.if",
  "position": [
    1680,
    -100
  ],
  "parameters": {
    "options": {},
    "conditions": {
      "options": {
        "version": 2,
        "leftValue": "",
        "caseSensitive": true,
        "typeValidation": "strict"
      },
      "combinator": "and",
      "conditions": [
        {
          "id": "22bf0855-c742-4a72-99c9-5ed72a96969a",
          "operator": {
            "type": "number",
            "operation": "equals"
          },
          "leftValue": "={{ $json.result }}",
          "rightValue": 0
        }
      ]
    }
  },
  "typeVersion": 2.2
}

================ Node #3912 ================
{
  "id": "82e2812b-59e6-4ac7-9238-7ee44052843b",
  "name": "Number of Options",
  "type": "n8n-nodes-base.set",
  "position": [
    1100,
    -100
  ],
  "parameters": {
    "options": {},
    "assignments": {
      "assignments": [
        {
          "id": "e65d9a41-d8a0-40b8-82e6-7f4dd90f0aa7",
          "name": "number_of_options",
          "type": "string",
          "value": "3"
        }
      ]
    }
  },
  "typeVersion": 3.4
}

================ Node #3913 ================
{
  "id": "0476bdb9-6979-41a2-bbe2-63b41ea5ce80",
  "name": "Calculate Options",
  "type": "n8n-nodes-base.code",
  "position": [
    1480,
    -100
  ],
  "parameters": {
    "mode": "runOnceForEachItem",
    "jsCode": "// Get the input data from the previous node\nconst inputData = $json[\"number_of_options\"]; // Fetch the \"number_of_options\" field\n\n// Convert the input to an integer\nconst initialValue = parseInt(inputData, 10);\n\n// Add 1 to retain the initial value and calculate the new value\nconst numberOfOptions = initialValue + 1;\nconst result = numberOfOptions - 1;\n\n// Return both values\nreturn {\n number_of_options: numberOfOptions,\n result,\n};\n"
  },
  "typeVersion": 2
}

================ Node #3914 ================
{
  "id": "d0e57d93-26f3-43c2-8663-5ef22706fd60",
  "name": "Remember Options",
  "type": "n8n-nodes-base.set",
  "position": [
    2680,
    40
  ],
  "parameters": {
    "options": {},
    "assignments": {
      "assignments": [
        {
          "id": "e47b9073-6b83-4444-9fde-3a70326fde1f",
          "name": "number_of_options",
          "type": "number",
          "value": "={{ $('Calculate Options').item.json.result - 1 }}"
        }
      ]
    }
  },
  "typeVersion": 3.4
}

================ Node #3915 ================
{
  "id": "e6ce46c9-0339-449f-8f38-c6fbe26a7a96",
  "name": "Sticky Note",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    1409.6877789299706,
    380
  ],
  "parameters": {
    "color": 4,
    "width": 1429.3228597821253,
    "height": 342.36777743061157,
    "content": "# Update Title and Description"
  },
  "typeVersion": 1
}

================ Node #3916 ================
{
  "id": "14233023-2e76-4cd4-a6fa-e8f67cac3e59",
  "name": "Generate Title and Desc",
  "type": "@n8n/n8n-nodes-langchain.openAi",
  "position": [
    2080,
    -100
  ],
  "parameters": {
    "modelId": {
      "__rl": true,
      "mode": "list",
      "value": "gpt-4o-mini",
      "cachedResultName": "GPT-4O-MINI"
    },
    "options": {},
    "messages": {
      "values": [
        {
          "content": "=Write an engaging product title and description for this product: \nTitle: {{ $('Split - id, title, desc').item.json.title }}\nDescription: {{ $('Split - id, title, desc').item.json.description }}\n\nDefine a keyword for this product and use it to write the new Title and Description.\n\nThis product will be listed via Printify and posted across various sales channels such as Shopfiy, Etsy, Amazon, and TikTok Shops. This product will be promoted across social media channels."
        },
        {
          "role": "assistant",
          "content": "Be witty. Humanize the content. No emojis."
        },
        {
          "role": "system",
          "content": "You are an ecommerce master and excel at creating content for products."
        },
        {
          "role": "assistant",
          "content": "=Brand Guidelines:\nBrand Name: {{ $('Brand Guidelines + Custom Instructions').item.json.brand_name }}\nBrand Tone: {{ $('Brand Guidelines + Custom Instructions').item.json.brand_tone }}"
        },
        {
          "role": "system",
          "content": "={{ $('Brand Guidelines + Custom Instructions').item.json.custom_instructions }}"
        },
        {
          "role": "system",
          "content": "Output:\nKeyword\nTitle\nDescription"
        }
      ]
    },
    "jsonOutput": true
  },
  "credentials": {
    "openAiApi": {
      "id": "ysxujEYFiY5ozRTS",
      "name": "AlexK OpenAi Key"
    }
  },
  "typeVersion": 1.3
}

================ Node #3917 ================
{
  "id": "41391fd2-d0b9-436f-a44b-29bd1db9bc72",
  "name": "If",
  "type": "n8n-nodes-base.if",
  "position": [
    1680,
    500
  ],
  "parameters": {
    "options": {},
    "conditions": {
      "options": {
        "version": 2,
        "leftValue": "",
        "caseSensitive": true,
        "typeValidation": "strict"
      },
      "combinator": "and",
      "conditions": [
        {
          "id": "d9c78fa8-c2ba-4c08-b5d2-848112caa1cc",
          "operator": {
            "name": "filter.operator.equals",
            "type": "string",
            "operation": "equals"
          },
          "leftValue": "={{ $json.upload }}",
          "rightValue": "yes"
        }
      ]
    }
  },
  "typeVersion": 2.2
}

================ Node #3918 ================
{
  "id": "4bf26356-9c59-4cee-8eb8-8553b23a172f",
  "name": "Sticky Note",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    560,
    -120
  ],
  "parameters": {
    "width": 660,
    "height": 460,
    "content": "![](https://raw.githubusercontent.com/2innnnn0/30-Days-of-ChatGPT/refs/heads/main/datapopcorn_logo_50px.png)\n# Daily Cartoon (w/ AI Translate)\n\n### How it works\n- Automates the retrieval of Calvin and Hobbes daily comics.\n- Extracts the comic image URL from the website.\n- Translates comic dialogues to English and Korean(Other Language)\n- Posts the comic and translations to Discord daily.\n\n### Set up steps\n- Estimated setup time: ~10-15 minutes.\n- Use a **Schedule Trigger** to automate the workflow at 9 AM daily.\n- Add nodes for parameter setup, HTTP request, data extraction, and integration with Discord.\n- Add detailed notes to each node in the workflow for easy understanding."
  },
  "typeVersion": 1
}

================ Node #3919 ================
{
  "id": "52d19472-41b4-4d71-874e-064ef9d6f248",
  "name": "Schedule Trigger",
  "type": "n8n-nodes-base.scheduleTrigger",
  "position": [
    620,
    380
  ],
  "parameters": {
    "rule": {
      "interval": [
        {
          "triggerAtHour": 9
        }
      ]
    }
  },
  "typeVersion": 1.2
}

================ Node #3920 ================
{
  "id": "bcc15f37-c048-4d9a-83cd-367856470095",
  "name": "OpenAI",
  "type": "@n8n/n8n-nodes-langchain.openAi",
  "position": [
    1620,
    380
  ],
  "parameters": {
    "text": "Please write the original language and Korean together. \n\nEXAMPLE)\nCalvin: \"YOU'VE NEVER HAD AN OBLIGATION, AN ASSIGNMENT, OR A DEADLINE IN ALL YOUR LIFE! YOU HAVE NO RESPONSIBILITIES AT ALL! IT MUST BE NICE!\" (\ub108\ub294 \ud3c9\uc0dd \ud55c \ubc88\ub3c4 \uc758\ubb34, \uacfc\uc81c, \ud639\uc740 \ub9c8\uac10\uc77c \uc5c6\uc5c8\uc796\uc544! \uc804\ud600 \ucc45\uc784\uc774 \uc5c6\ub2e4\ub2c8! \uc815\ub9d0 \uc88b\uaca0\ub2e4!)\nHobbes: \"WIPE THAT INSOLENT SMIRK OFF YOUR FACE!\" (\uadf8 \ubed4\ubed4\ud55c \ubbf8\uc18c\ub97c \uadf8\ub9cc \uc9c0\uc5b4!)\n",
    "modelId": {
      "__rl": true,
      "mode": "list",
      "value": "gpt-4o-mini",
      "cachedResultName": "GPT-4O-MINI"
    },
    "options": {},
    "resource": "image",
    "imageUrls": "={{ $json.output.cartoon_image }}",
    "operation": "analyze"
  },
  "credentials": {
    "openAiApi": {
      "id": "kYIZ8ZwQHS2d4GiD",
      "name": "(datapopcorn )OpenAi account"
    }
  },
  "typeVersion": 1.6
}

================ Node #3921 ================
{
  "id": "35004d43-4061-476a-9af6-7d0b82ae86bd",
  "name": "param",
  "type": "n8n-nodes-base.set",
  "position": [
    840,
    380
  ],
  "parameters": {
    "options": {},
    "assignments": {
      "assignments": [
        {
          "id": "59d36aef-2991-4fd2-9fbe-dad9a701b40f",
          "name": "year",
          "type": "string",
          "value": "={{ $now.format('yyyy') }}"
        },
        {
          "id": "b6b329f2-ba08-4516-bdb9-c5d124c02110",
          "name": "month",
          "type": "string",
          "value": "={{ $now.format('MM') }}"
        },
        {
          "id": "3cba75d1-a281-4e14-9bf7-e0bc0cc7c768",
          "name": "day",
          "type": "string",
          "value": "={{ $now.format('dd') }}"
        }
      ]
    }
  },
  "typeVersion": 3.4
}

================ Node #3922 ================
{
  "id": "cf2c953f-1ff2-4abc-8abd-95e05603e64a",
  "name": "Discord",
  "type": "n8n-nodes-base.discord",
  "position": [
    1840,
    380
  ],
  "parameters": {
    "content": "=Daily Cartoon ({{ $('param').item.json.year }}/{{ $('param').item.json.month }}/{{ $('param').item.json.day }})\n{{ $('Information Extractor').item.json.output.cartoon_image }}\n\n{{ $json.content }}\n",
    "options": {},
    "authentication": "webhook"
  },
  "credentials": {
    "discordWebhookApi": {
      "id": "w82RWS7nmXLKDczt",
      "name": "n8n test webhook"
    }
  },
  "typeVersion": 2
}

================ Node #3923 ================
{
  "id": "5eec9870-a509-4090-a540-76b22bb3eac9",
  "name": "OpenAI Chat Model",
  "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
  "position": [
    1260,
    560
  ],
  "parameters": {
    "model": "gpt-4o-mini-2024-07-18",
    "options": {}
  },
  "credentials": {
    "openAiApi": {
      "id": "kYIZ8ZwQHS2d4GiD",
      "name": "(datapopcorn )OpenAi account"
    }
  },
  "typeVersion": 1
}

================ Node #3924 ================
{
  "id": "352db81e-7571-47cb-b028-dec18e15ccce",
  "name": "Information Extractor",
  "type": "@n8n/n8n-nodes-langchain.informationExtractor",
  "position": [
    1260,
    380
  ],
  "parameters": {
    "text": "=Please just extract the src value in the <img class=\"img-fluid Lazyloaded\"> tag from HTML below. I don't need anything other than the value.\n\ne.g.)\nEXAMPLE INPUT)\n<img class=\"img-fluid lazyloaded\" srcset=\"https://assets.amuniversal.com/5ed526b06e94013bda88005056a9545d 900w\" data-srcset=\"https://assets.amuniversal.com/5ed526b06e94013bda88005056a9545d 900w\" sizes=\"\n (min-width: 992px) 900px,\n (min-width: 768px) 600px,\n (min-width: 576px) 300px,\n 900px\" width=\"100%\" alt=\"Calvin and Hobbes Comic Strip for March 03, 2023 \" src=\"https://assets.amuniversal.com/5ed526b06e94013bda88005056a9545d\">\n\n\nEXAMPLE OUTPUT)\nhttps://assets.amuniversal.com/5ed526b06e94013bda88005056a9545d\n\n--\n(INPUT)\n{{ $json.data }}",
    "options": {},
    "attributes": {
      "attributes": [
        {
          "name": "cartoon_image",
          "description": "EXAMPLE OUTPUT) https://assets.amuniversal.com/***"
        }
      ]
    }
  },
  "typeVersion": 1
}

================ Node #3925 ================
{
  "id": "517799ed-559c-4d17-b8aa-58bd4ee92ed3",
  "name": "HTTP Request",
  "type": "n8n-nodes-base.httpRequest",
  "position": [
    1040,
    380
  ],
  "parameters": {
    "url": "=https://www.gocomics.com/calvinandhobbes/{{ $json.year }}/{{ $json.month }}/{{ $json.day }}",
    "options": {}
  },
  "typeVersion": 4.2
}

================ Node #3926 ================
{
  "id": "d8c07efe-eca0-48cb-80e6-ea8117073c5f",
  "name": "OpenAI Chat Model",
  "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
  "position": [
    1300,
    560
  ],
  "parameters": {
    "options": {}
  },
  "credentials": {
    "openAiApi": {
      "id": "TreGPMKr9hrtCvVp",
      "name": "OpenAi account"
    }
  },
  "typeVersion": 1
}

================ Node #3927 ================
{
  "id": "636de178-7b68-429a-9371-41cf2a950076",
  "name": "MongoDBAggregate",
  "type": "n8n-nodes-base.mongoDbTool",
  "position": [
    1640,
    540
  ],
  "parameters": {
    "query": "={{ $fromAI(\"pipeline\", \"The MongoDB pipeline to execute\" , \"string\" , [{\"$match\" : { \"rating\" : 5 } }])}}",
    "operation": "aggregate",
    "collection": "movies",
    "descriptionType": "manual",
    "toolDescription": "Get from AI the MongoDB Aggregation pipeline to get context based on the provided pipeline, the document structure of the documents is : {\n \"plot\": \"A group of bandits stage a brazen train hold-up, only to find a determined posse hot on their heels.\",\n \"genres\": [\n \"Short\",\n \"Western\"\n ],\n \"runtime\": 11,\n \"cast\": [\n \"A.C. Abadie\",\n \"Gilbert M. 'Broncho Billy' Anderson\",\n ...\n ],\n \"poster\": \"...jpg\",\n \"title\": \"The Great Train Robbery\",\n \"fullplot\": \"Among the earliest existing films in American cinema - notable as the ...\",\n \"languages\": [\n \"English\"\n ],\n \"released\": \"date\"\n },\n \"directors\": [\n \"Edwin S. Porter\"\n ],\n \"rated\": \"TV-G\",\n \"awards\": {\n \"wins\": 1,\n \"nominations\": 0,\n \"text\": \"1 win.\"\n },\n \"lastupdated\": \"2015-08-13 00:27:59.177000000\",\n \"year\": 1903,\n \"imdb\": {\n \"rating\": 7.4,"
  },
  "credentials": {
    "mongoDb": {
      "id": "8xGgiXzf2o0L4a0y",
      "name": "MongoDB account"
    }
  },
  "typeVersion": 1.1
}

================ Node #3928 ================
{
  "id": "e0f248dc-22b7-40a2-a00e-6298b51e4470",
  "name": "Window Buffer Memory",
  "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
  "position": [
    1500,
    540
  ],
  "parameters": {
    "contextWindowLength": 10
  },
  "typeVersion": 1.2
}

================ Node #3929 ================
{
  "id": "da27ee52-43db-4818-9844-3c0a064bf958",
  "name": "When chat message received",
  "type": "@n8n/n8n-nodes-langchain.chatTrigger",
  "position": [
    1160,
    400
  ],
  "webhookId": "0730df2d-2f90-45e0-83dc-609668260fda",
  "parameters": {
    "mode": "webhook",
    "public": true,
    "options": {
      "allowedOrigins": "*"
    }
  },
  "typeVersion": 1.1
}

================ Node #3930 ================
{
  "id": "9ad79da9-3145-44be-9026-e37b0e856f5d",
  "name": "insertFavorite",
  "type": "@n8n/n8n-nodes-langchain.toolWorkflow",
  "position": [
    1860,
    520
  ],
  "parameters": {
    "name": "insertFavorites",
    "workflowId": {
      "__rl": true,
      "mode": "list",
      "value": "6QuKnOrpusQVu66Q",
      "cachedResultName": "insertMongoDB"
    },
    "description": "=Use this tool only to add favorites with the structure of {\"title\" : \"recieved title\" }"
  },
  "typeVersion": 1.2
}

================ Node #3931 ================
{
  "id": "4d7713d1-d2ad-48bf-971b-b86195e161ca",
  "name": "AI Agent - Movie Recommendation",
  "type": "@n8n/n8n-nodes-langchain.agent",
  "position": [
    1380,
    300
  ],
  "parameters": {
    "text": "=Assistant for best movies context, you have tools to search using \"MongoDBAggregate\" and you need to provide a MongoDB aggregation pipeline code array as a \"query\" input param. User input and request: {{ $json.chatInput }}. Only when a user confirms a favorite movie use the insert favorite using the \"insertFavorite\" workflow tool of to insertFavorite as { \"title\" : \"<TITLE>\" }.",
    "options": {},
    "promptType": "define"
  },
  "typeVersion": 1.7
}

================ Node #3932 ================
{
  "id": "2eac8aed-9677-4d89-bd76-456637f5b979",
  "name": "Sticky Note",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    880,
    300
  ],
  "parameters": {
    "width": 216.0875923062025,
    "height": 499.89779507612025,
    "content": "## AI Agent powered by OpenAI and MongoDB \n\nThis flow is designed to work as an AI autonomous agent that can get chat messages, query data from MongoDB using the aggregation framework.\n\nFollowing by augmenting the results from the sample movies collection and allowing storing my favorite movies back to the database using an \"insert\" flow. "
  },
  "typeVersion": 1
}

================ Node #3933 ================
{
  "id": "4d8130fe-4aed-4e09-9c1d-60fb9ac1a500",
  "name": "Sticky Note1",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    1300,
    720
  ],
  "parameters": {
    "content": "## Process\n\nThe message is being processed by the \"Chat Model\" and the correct tool is used according to the message. "
  },
  "typeVersion": 1
}

================ Node #3934 ================
{
  "id": "0395b3e4-94ef-49ea-9b4c-8f908e62f8c6",
  "name": "Telegram Trigger",
  "type": "n8n-nodes-base.telegramTrigger",
  "position": [
    -60,
    20
  ],
  "webhookId": "e7aa284b-5eef-4ac1-94bf-8e4d307a3b14",
  "parameters": {
    "updates": [
      "message"
    ],
    "additionalFields": {}
  },
  "credentials": {
    "telegramApi": {
      "id": "gblW5oACGEPuccja",
      "name": "Telegram account"
    }
  },
  "typeVersion": 1.1
}

================ Node #3935 ================
{
  "id": "263edf45-58a0-45e8-91f8-601bc62c7d6f",
  "name": "OpenAI - Ask about a track",
  "type": "@n8n/n8n-nodes-langchain.openAi",
  "position": [
    120,
    -120
  ],
  "parameters": {
    "modelId": {
      "__rl": true,
      "mode": "list",
      "value": "gpt-4o-mini",
      "cachedResultName": "GPT-4O-MINI"
    },
    "options": {},
    "messages": {
      "values": [
        {
          "content": "=get artist and song name from '{{ $json.message.text }}'. Reply only eg. 'track:song name artist:artist name'"
        }
      ]
    }
  },
  "credentials": {
    "openAiApi": {
      "id": "vDcge3EgslxfX3EC",
      "name": "OpenAi account"
    }
  },
  "typeVersion": 1.6
}

================ Node #3936 ================
{
  "id": "086aef8b-533a-4c33-9952-29d5adb152c8",
  "name": "Search track",
  "type": "n8n-nodes-base.spotify",
  "onError": "continueErrorOutput",
  "position": [
    540,
    -200
  ],
  "parameters": {
    "limit": 1,
    "query": "={{ $json.message.content }}",
    "filters": {},
    "resource": "track",
    "operation": "search"
  },
  "credentials": {
    "spotifyOAuth2Api": {
      "id": "wylKghFNQa8IKy1U",
      "name": "Spotify account"
    }
  },
  "typeVersion": 1,
  "alwaysOutputData": true
}

================ Node #3937 ================
{
  "id": "08af6055-ba52-4cb2-a561-ea04ac55279f",
  "name": "Add song",
  "type": "n8n-nodes-base.spotify",
  "onError": "continueErrorOutput",
  "position": [
    780,
    -240
  ],
  "parameters": {
    "id": "=spotify:track:{{ $json.id }}"
  },
  "credentials": {
    "spotifyOAuth2Api": {
      "id": "wylKghFNQa8IKy1U",
      "name": "Spotify account"
    }
  },
  "typeVersion": 1
}

================ Node #3938 ================
{
  "id": "2dbdafa4-3b6f-4a14-813c-4e10da10abad",
  "name": "Next Song",
  "type": "n8n-nodes-base.spotify",
  "onError": "continueErrorOutput",
  "position": [
    980,
    -280
  ],
  "parameters": {
    "operation": "nextSong"
  },
  "credentials": {
    "spotifyOAuth2Api": {
      "id": "wylKghFNQa8IKy1U",
      "name": "Spotify account"
    }
  },
  "typeVersion": 1
}

================ Node #3939 ================
{
  "id": "cb8d42aa-0c7e-45a5-90b5-b91e483dd13a",
  "name": "Resume play",
  "type": "n8n-nodes-base.spotify",
  "notes": "We don't have to stop here on error. An error is thrown from Spotify if the player is already playing.",
  "onError": "continueRegularOutput",
  "position": [
    1240,
    -380
  ],
  "parameters": {
    "operation": "resume"
  },
  "credentials": {
    "spotifyOAuth2Api": {
      "id": "wylKghFNQa8IKy1U",
      "name": "Spotify account"
    }
  },
  "typeVersion": 1
}

================ Node #3940 ================
{
  "id": "089e1070-b013-454c-9f6c-55b909e06c1d",
  "name": "Currently Playing",
  "type": "n8n-nodes-base.spotify",
  "onError": "continueErrorOutput",
  "position": [
    1420,
    -300
  ],
  "parameters": {
    "operation": "currentlyPlaying"
  },
  "credentials": {
    "spotifyOAuth2Api": {
      "id": "wylKghFNQa8IKy1U",
      "name": "Spotify account"
    }
  },
  "typeVersion": 1
}

================ Node #3941 ================
{
  "id": "e9df0dcf-b166-45a3-910b-787b3718bbcf",
  "name": "Sticky Note",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    120,
    -300
  ],
  "parameters": {
    "color": 5,
    "width": 254.05813953488382,
    "content": "## Telegram to Spotify \nAsk AI about a track with artist and song name or if you can't remember describe it and AI does it's thing.\n"
  },
  "typeVersion": 1
}

================ Node #3942 ================
{
  "id": "77bae9be-2d92-4028-ae78-7887b6a2d394",
  "name": "Merge",
  "type": "n8n-nodes-base.merge",
  "position": [
    440,
    220
  ],
  "parameters": {
    "mode": "combine",
    "options": {},
    "combineBy": "combineAll"
  },
  "typeVersion": 3
}

================ Node #3943 ================
{
  "id": "0d95000d-7efd-402a-9a34-47ababb2f53e",
  "name": "If",
  "type": "n8n-nodes-base.if",
  "position": [
    620,
    -440
  ],
  "parameters": {
    "options": {},
    "conditions": {
      "options": {
        "version": 2,
        "leftValue": "",
        "caseSensitive": true,
        "typeValidation": "strict"
      },
      "combinator": "and",
      "conditions": [
        {
          "id": "02af5387-07d2-4a16-bd83-e1359d091165",
          "operator": {
            "type": "string",
            "operation": "notEmpty",
            "singleValue": true
          },
          "leftValue": "={{ $json?.id }}",
          "rightValue": ""
        }
      ]
    }
  },
  "typeVersion": 2.2
}

================ Node #3944 ================
{
  "id": "363f89ad-34d0-4445-8ff3-693d991dad09",
  "name": "Message parser",
  "type": "n8n-nodes-base.set",
  "position": [
    1280,
    -40
  ],
  "parameters": {
    "options": {},
    "assignments": {
      "assignments": [
        {
          "id": "93cd2545-c6e9-4717-96b7-d49eb056ac70",
          "name": "message",
          "type": "string",
          "value": "={{ $json.error }}"
        }
      ]
    }
  },
  "typeVersion": 3.4
}

================ Node #3945 ================
{
  "id": "8b80f80d-8c8e-44de-9838-6d05199bb734",
  "name": "Not found error message",
  "type": "n8n-nodes-base.set",
  "position": [
    880,
    -460
  ],
  "parameters": {
    "mode": "raw",
    "options": {},
    "jsonOutput": "{\n \"error\": \"Song not found\"\n}\n"
  },
  "typeVersion": 3.4
}

================ Node #3946 ================
{
  "id": "f1785140-8e97-43e1-9d84-aedc8b8d5e06",
  "name": "Return message to Telegram",
  "type": "n8n-nodes-base.telegram",
  "position": [
    760,
    220
  ],
  "parameters": {
    "text": "={{ $('Message parser').item.json.message }}",
    "chatId": "={{ $json.message.chat.id }}",
    "additionalFields": {}
  },
  "credentials": {
    "telegramApi": {
      "id": "gblW5oACGEPuccja",
      "name": "Telegram account"
    }
  },
  "typeVersion": 1.2
}

================ Node #3947 ================
{
  "id": "e3e16535-094b-41bf-88c6-166bb6805d53",
  "name": "Define Now Playing",
  "type": "n8n-nodes-base.set",
  "notes": "We use the object \"error\" as a returned bject so we can re-use the Message Parser node.",
  "position": [
    1660,
    -240
  ],
  "parameters": {
    "mode": "raw",
    "options": {},
    "jsonOutput": "={\n \"error\": \"Now playing {{ $json.item.name }} - {{ $json.item.artists[0].name }} - {{ $json.item.album.name }}\"\n}\n"
  },
  "typeVersion": 3.4
}

================ Node #3948 ================
{
  "id": "8a54ac1c-a072-42e6-a3ba-8cde33475eb5",
  "name": "When clicking \u2018Test workflow\u2019",
  "type": "n8n-nodes-base.manualTrigger",
  "position": [
    460,
    220
  ],
  "parameters": {},
  "typeVersion": 1
}

================ Node #3949 ================
{
  "id": "e81c9be0-f59d-467e-9bda-eeb2d66ed31e",
  "name": "Schedule Trigger",
  "type": "n8n-nodes-base.scheduleTrigger",
  "position": [
    460,
    380
  ],
  "parameters": {
    "rule": {
      "interval": [
        {
          "field": "weeks",
          "triggerAtDay": [
            4
          ]
        }
      ]
    }
  },
  "typeVersion": 1.2
}

================ Node #3950 ================
{
  "id": "01b04872-9aea-4834-8df5-f6c91914133d",
  "name": "Get view stats from Umami",
  "type": "n8n-nodes-base.httpRequest",
  "position": [
    760,
    260
  ],
  "parameters": {
    "url": "=https://umami.mydomain.com/api/websites/86d4095c-a2a8-4fc8-9521-103e858e2b41/event-data/stats?startAt={{ DateTime.now().minus({ days: 7 }).toMillis() }}&endAt={{ DateTime.now().toMillis() }}&unit=hour&timezone=Asia%2FHong_Kong",
    "options": {},
    "authentication": "genericCredentialType",
    "genericAuthType": "httpHeaderAuth"
  },
  "credentials": {
    "httpHeaderAuth": {
      "id": "FKsKXvQUlaX5qt9n",
      "name": "Header Auth account 3"
    }
  },
  "typeVersion": 4.2
}

================ Node #3951 ================
{
  "id": "38d342e3-10ad-4260-8f44-5a3233ec3166",
  "name": "Sticky Note",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    660,
    -260
  ],
  "parameters": {
    "width": 504.88636363636317,
    "content": "## Send data from Umami to A.I. and then save to Baserow\n\nYou can find out more about the stats available in the [Umami API](https://umami.is/docs/api/website-stats-api)\n\nRead the [case study here](https://rumjahn.com/how-to-analyze-umami-data-using-n8n-and-a-i-to-improve-seo-and-uncover-hidden-insights-for-better-content-optimization/).\n\n"
  },
  "typeVersion": 1
}

================ Node #3952 ================
{
  "id": "18c997fe-61b1-464a-8bb5-fcdc017dd1f6",
  "name": "Sticky Note1",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    660,
    -60
  ],
  "parameters": {
    "color": 4,
    "width": 393.16558441558414,
    "height": 504.17207792207796,
    "content": "## Get summary stats from Umami\n\nIt will get: Pageviews, Visitors, Visits, Bounces, Total Time\n\nYou need to change the URL to your website. https://{your website}/api/websites/{website ID}/\n\nYou can find your ID by going to your Umami account -> Settings -> Edit (next to domain)"
  },
  "typeVersion": 1
}

================ Node #3953 ================
{
  "id": "bfdc04a2-57fa-4a8a-b412-39047cebb370",
  "name": "Sticky Note2",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    1080,
    -60
  ],
  "parameters": {
    "color": 5,
    "width": 216.5746753246753,
    "height": 502.37012987012963,
    "content": "## Send data to A.I.\n\nTo use Openrouter, you need to register for an account.\nThen add header authorization credentials.\nUsername: Authroization\nPassword: Bearer {Your API Key}\n*It's Bearer space {API key}."
  },
  "typeVersion": 1
}

================ Node #3954 ================
{
  "id": "fc373fd7-52fc-4729-8022-021c09d0c89c",
  "name": "Sticky Note3",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    1320,
    -60
  ],
  "parameters": {
    "color": 6,
    "width": 746.3474025974022,
    "height": 505.9740259740257,
    "content": "## Get page specific stats for this week and last\n\nCalls Umami to get this week and last week's data. It will get the views for each page visited on your website for comparison."
  },
  "typeVersion": 1
}

================ Node #3955 ================
{
  "id": "82bd35b6-8b49-4d77-8be2-033a8bff3f41",
  "name": "Sticky Note4",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    2120,
    -60
  ],
  "parameters": {
    "color": 5,
    "width": 216.5746753246753,
    "height": 502.37012987012963,
    "content": "## Send data to A.I.\n\nTo use Openrouter, you need to register for an account.\nThen add header authorization credentials.\nUsername: Authroization\nPassword: Bearer {Your API Key}\n*It's Bearer space {API key}."
  },
  "typeVersion": 1
}

================ Node #3956 ================
{
  "id": "503c4ca3-36da-41a8-9029-f844a34daa59",
  "name": "Sticky Note5",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    2380,
    -60
  ],
  "parameters": {
    "color": 4,
    "width": 393.16558441558414,
    "height": 504.17207792207796,
    "content": "## Save analysis to baserow\n\nYou need to create a table in advance to save. \n- Date (date)\n- Summary (Long text)\n- Top pages (Long text)\n- Blog name (Long text)"
  },
  "typeVersion": 1
}

================ Node #3957 ================
{
  "id": "f64cdfbd-712f-461c-b025-25f37e2bded8",
  "name": "Parse Umami data",
  "type": "n8n-nodes-base.code",
  "position": [
    940,
    260
  ],
  "parameters": {
    "jsCode": "function transformToUrlString(items) {\n // In n8n, we need to check if items is an array and get the json property\n const data = items[0].json;\n \n if (!data) {\n console.log('No valid data found');\n return encodeURIComponent(JSON.stringify([]));\n }\n \n try {\n // Create a simplified object with the metrics\n const simplified = {\n pageviews: {\n value: parseInt(data.pageviews.value) || 0,\n prev: parseInt(data.pageviews.prev) || 0\n },\n visitors: {\n value: parseInt(data.visitors.value) || 0,\n prev: parseInt(data.visitors.prev) || 0\n },\n visits: {\n value: parseInt(data.visits.value) || 0,\n prev: parseInt(data.visits.prev) || 0\n },\n bounces: {\n value: parseInt(data.bounces.value) || 0,\n prev: parseInt(data.bounces.prev) || 0\n },\n totaltime: {\n value: parseInt(data.totaltime.value) || 0,\n prev: parseInt(data.totaltime.prev) || 0\n }\n };\n \n return encodeURIComponent(JSON.stringify(simplified));\n } catch (error) {\n console.log('Error processing data:', error);\n throw new Error('Invalid data structure');\n }\n}\n\n// Get the input data\nconst items = $input.all();\n\n// Process the data\nconst result = transformToUrlString(items);\n\n// Return the result\nreturn { json: { urlString: result } };"
  },
  "typeVersion": 2
}

================ Node #3958 ================
{
  "id": "470715b6-0878-48b8-b6c6-40de27fbc966",
  "name": "Send data to A.I.",
  "type": "n8n-nodes-base.httpRequest",
  "position": [
    1140,
    260
  ],
  "parameters": {
    "url": "https://openrouter.ai/api/v1/chat/completions",
    "method": "POST",
    "options": {},
    "jsonBody": "={\n \"model\": \"meta-llama/llama-3.1-70b-instruct:free\",\n \"messages\": [\n {\n \"role\": \"user\",\n \"content\": \"You are an SEO expert. Here is data from Umami analytics of Pennibnotes.com. Where X is URL and Y is number of visitors. Give me a table summary of this data in markdown format:{{ $('Parse Umami data').item.json.urlString }}.\"\n }\n ]\n}",
    "sendBody": true,
    "specifyBody": "json",
    "authentication": "genericCredentialType",
    "genericAuthType": "httpHeaderAuth"
  },
  "credentials": {
    "httpHeaderAuth": {
      "id": "WY7UkF14ksPKq3S8",
      "name": "Header Auth account 2"
    }
  },
  "typeVersion": 4.2
}

================ Node #3959 ================
{
  "id": "ea4bb37f-96d9-41b8-bf46-fb09865a6e0f",
  "name": "Get page data from Umami",
  "type": "n8n-nodes-base.httpRequest",
  "position": [
    1380,
    260
  ],
  "parameters": {
    "url": "=https://umami.rumjahn.synology.me/api/websites/f375d28c-1949-4597-8871-f1b942e3aa24/metrics?startAt={{Date.now() - (7 * 24 * 60 * 60 * 1000)}}&endAt={{Date.now()}}&type=url&tz=America/Los_Angeles",
    "options": {},
    "authentication": "genericCredentialType",
    "genericAuthType": "httpHeaderAuth"
  },
  "credentials": {
    "httpHeaderAuth": {
      "id": "FKsKXvQUlaX5qt9n",
      "name": "Header Auth account 3"
    }
  },
  "typeVersion": 4
}

================ Node #3960 ================
{
  "id": "d982606b-49c8-4d5b-ba79-bd0fdd2600b6",
  "name": "Parse Umami data1",
  "type": "n8n-nodes-base.code",
  "position": [
    1560,
    260
  ],
  "parameters": {
    "jsCode": "// Get input data\nconst data = $input.all();\n\n// Create URL-encoded string from the data\nconst encodedData = encodeURIComponent(JSON.stringify(data));\n\n// Return the encoded data\nreturn {\n json: {\n thisWeek: encodedData\n }\n};"
  },
  "typeVersion": 2
}

================ Node #3961 ================
{
  "id": "f3734045-1318-4234-a3ac-61b766124609",
  "name": "Get page view data from Umami",
  "type": "n8n-nodes-base.httpRequest",
  "position": [
    1760,
    260
  ],
  "parameters": {
    "url": "=https://umami.rumjahn.synology.me/api/websites/f375d28c-1949-4597-8871-f1b942e3aa24/metrics?startAt={{Date.now() - (14 * 24 * 60 * 60 * 1000)}}&endAt={{Date.now() - (7 * 24 * 60 * 60 * 1000)}}&type=url&tz=America/Los_Angeles",
    "options": {},
    "authentication": "genericCredentialType",
    "genericAuthType": "httpHeaderAuth"
  },
  "credentials": {
    "httpHeaderAuth": {
      "id": "FKsKXvQUlaX5qt9n",
      "name": "Header Auth account 3"
    }
  },
  "typeVersion": 4
}

================ Node #3962 ================
{
  "id": "a0153ab0-3eaf-4f97-a2dc-ab63d45a9187",
  "name": "Parse Umami",
  "type": "n8n-nodes-base.code",
  "position": [
    1920,
    260
  ],
  "parameters": {
    "jsCode": "// Get input data\nconst data = $input.all();\n\n// Create URL-encoded string from the data\nconst encodedData = encodeURIComponent(JSON.stringify(data));\n\n// Return the encoded data\nreturn {\n json: {\n lastweek: encodedData\n }\n};"
  },
  "typeVersion": 2
}

================ Node #3963 ================
{
  "id": "c2d3d396-09fa-4800-b56d-40ed7592cd3c",
  "name": "Send data to A.I.1",
  "type": "n8n-nodes-base.httpRequest",
  "position": [
    2180,
    260
  ],
  "parameters": {
    "url": "https://openrouter.ai/api/v1/chat/completions",
    "method": "POST",
    "options": {},
    "jsonBody": "={\n \"model\": \"meta-llama/llama-3.1-70b-instruct:free\",\n \"messages\": [\n {\n \"role\": \"user\",\n \"content\": \"You are an SEO expert. Here is data from Umami analytics of Pennibnotes.com. Where X is URL and Y is number of visitors. Compare the data from this week to last week. Present the data in a table using markdown and offer 5 improvement suggestions. This week:{{ $('Parse Umami data1').first().json.thisWeek }} Lastweek:{{ $json.lastweek }}\"\n }\n ]\n}\n\n",
    "sendBody": true,
    "specifyBody": "json",
    "authentication": "genericCredentialType",
    "genericAuthType": "httpHeaderAuth"
  },
  "credentials": {
    "httpHeaderAuth": {
      "id": "WY7UkF14ksPKq3S8",
      "name": "Header Auth account 2"
    }
  },
  "typeVersion": 4.2
}

================ Node #3964 ================
{
  "id": "ce58a556-c05a-4395-88b0-3edecbad80e5",
  "name": "Save data to Baserow",
  "type": "n8n-nodes-base.baserow",
  "position": [
    2520,
    260
  ],
  "parameters": {
    "tableId": 607,
    "fieldsUi": {
      "fieldValues": [
        {
          "fieldId": 5870,
          "fieldValue": "={{ $json.choices[0].message.content }}"
        },
        {
          "fieldId": 5869,
          "fieldValue": "={{ $('Send data to A.I.').first().json.choices[0].message.content }}"
        },
        {
          "fieldId": 5868,
          "fieldValue": "={{ DateTime.now().toFormat('yyyy-MM-dd') }}"
        },
        {
          "fieldId": 5871,
          "fieldValue": "Name of your blog"
        }
      ]
    },
    "operation": "create",
    "databaseId": 121
  },
  "credentials": {
    "baserowApi": {
      "id": "8w0zXhycIfCAgja3",
      "name": "Baserow account"
    }
  },
  "typeVersion": 1
}

================ Node #3965 ================
{
  "id": "f4570aad-db25-4dcd-8589-b1c8335935de",
  "name": "When clicking \u2018Test workflow\u2019",
  "type": "n8n-nodes-base.manualTrigger",
  "position": [
    -180,
    3800
  ],
  "parameters": {},
  "typeVersion": 1
}

================ Node #3966 ================
{
  "id": "bd481559-85f2-4865-8d85-e50e72369f26",
  "name": "Wait",
  "type": "n8n-nodes-base.wait",
  "position": [
    940,
    3620
  ],
  "webhookId": "f10708f0-38c6-4c75-b635-37222d5b183a",
  "parameters": {
    "amount": 45
  },
  "typeVersion": 1.1
}

================ Node #3967 ================
{
  "id": "cc9e9947-19e4-47c5-95b0-a631d688a8b6",
  "name": "Sticky Note36",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    549.7858793743054,
    3709.534654112671
  ],
  "parameters": {
    "color": 7,
    "width": 327.8244990224782,
    "height": 268.48353140372035,
    "content": "**40 at a time seems to be the memory limit on my server - run until complete with batches of 40 or increase based on your server memory**\n"
  },
  "typeVersion": 1
}

================ Node #3968 ================
{
  "id": "9ebbd993-9194-40b1-a98e-352eb3a3f9eb",
  "name": "Sticky Note28",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    -50.797941767307435,
    3729.028866440868
  ],
  "parameters": {
    "color": 7,
    "width": 574.7594700148138,
    "height": 248.90718753310907,
    "content": "**Firecrawl.dev retrieves markdown inc. title, description, links & content. First define the URLs you'd like to scrape**\n"
  },
  "typeVersion": 1
}

================ Node #3969 ================
{
  "id": "71c0f975-c0f9-47ae-a245-f852387ad461",
  "name": "Connect to your own data source",
  "type": "n8n-nodes-base.noOp",
  "position": [
    1380,
    3820
  ],
  "parameters": {},
  "typeVersion": 1
}

================ Node #3970 ================
{
  "id": "fba918e7-2c88-4de3-a789-cadbf4f2584e",
  "name": "Get urls from own data source",
  "type": "n8n-nodes-base.noOp",
  "position": [
    0,
    3800
  ],
  "parameters": {},
  "typeVersion": 1
}

================ Node #3971 ================
{
  "id": "221a75eb-0bc8-4747-9ec1-1879c46d9163",
  "name": "Example fields from data source",
  "type": "n8n-nodes-base.set",
  "notes": "Define URLs in array",
  "position": [
    200,
    3800
  ],
  "parameters": {
    "options": {},
    "assignments": {
      "assignments": [
        {
          "id": "cc2c6af0-68d3-49eb-85fe-3288d2ed0f6b",
          "name": "Page",
          "type": "array",
          "value": "[\"https://www.automake.io/\", \"https://www.n8n.io/\"]"
        }
      ]
    },
    "includeOtherFields": true
  },
  "notesInFlow": true,
  "typeVersion": 3.4
}

================ Node #3972 ================
{
  "id": "5a914964-e8ef-4064-8ecb-f1866de0d8c6",
  "name": "Sticky Note33",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    -40,
    4000
  ],
  "parameters": {
    "color": 3,
    "width": 510.3561134140244,
    "height": 94.13486342358942,
    "content": "**REQUIRED**\nConnect to your database of urls to input. Name the column `Page` like in the `Example fields from data source` node and make sure it has one link per row like `split out page urls`"
  },
  "typeVersion": 1
}

================ Node #3973 ================
{
  "id": "5c004d5c-afeb-47c9-b30b-eb88880f87b9",
  "name": "Sticky Note34",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    900,
    4000
  ],
  "parameters": {
    "color": 3,
    "width": 284.87764467541297,
    "height": 168.68864948728321,
    "content": "**REQUIRED**\nUpdate the Auth parameter to your own [Firecrawl](https://firecrawl.dev) dev token\n\n**Header Auth parameter**\nname - Authorization\nvalue - your-own-api-key"
  },
  "typeVersion": 1
}

================ Node #3974 ================
{
  "id": "53d97054-a5e4-4819-bdd9-f8632c33eba2",
  "name": "Sticky Note35",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    1360,
    4000
  ],
  "parameters": {
    "color": 3,
    "width": 284.87764467541297,
    "height": 91.91340067739628,
    "content": "**REQUIRED** \nOutput the data to your own data source e.g. Airtable"
  },
  "typeVersion": 1
}

================ Node #3975 ================
{
  "id": "357a463f-7581-43ba-8930-af27e4762905",
  "name": "Sticky Note37",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    900,
    3570.2075673933587
  ],
  "parameters": {
    "color": 7,
    "width": 181.96744211154697,
    "height": 189.23753199986137,
    "content": "**Respect API limits (10 requests per min)**\n"
  },
  "typeVersion": 1
}

================ Node #3976 ================
{
  "id": "77311c67-f50f-427a-87fd-b29b1f542bbc",
  "name": "40 items at a time",
  "type": "n8n-nodes-base.limit",
  "position": [
    580,
    3800
  ],
  "parameters": {
    "maxItems": 40
  },
  "typeVersion": 1
}

================ Node #3977 ================
{
  "id": "43557ab1-4e52-4598-83a9-e39d5afc6de7",
  "name": "10 at a time",
  "type": "n8n-nodes-base.splitInBatches",
  "position": [
    740,
    3800
  ],
  "parameters": {
    "options": {},
    "batchSize": 10
  },
  "typeVersion": 3
}

================ Node #3978 ================
{
  "id": "555d52e7-010b-462b-9382-26804493de1c",
  "name": "Markdown data and Links",
  "type": "n8n-nodes-base.set",
  "position": [
    1160,
    3820
  ],
  "parameters": {
    "options": {},
    "assignments": {
      "assignments": [
        {
          "id": "3a959c64-4c3c-4072-8427-67f6f6ecba1b",
          "name": "title",
          "type": "string",
          "value": "={{ $json.data.metadata.title }}"
        },
        {
          "id": "d2da0859-a7a0-4c39-913a-150ecb95d075",
          "name": "description",
          "type": "string",
          "value": "={{ $json.data.metadata.description }}"
        },
        {
          "id": "62bd2d76-b78d-4501-a59b-a25ed7b345b0",
          "name": "content",
          "type": "string",
          "value": "={{ $json.data.markdown }}"
        },
        {
          "id": "d4c712fa-b52a-498f-8abc-26dc72be61f7",
          "name": "links",
          "type": "string",
          "value": "={{ $json.data.links }} "
        }
      ]
    }
  },
  "notesInFlow": true,
  "typeVersion": 3.4
}

================ Node #3979 ================
{
  "id": "aac948e6-ac86-4cea-be84-f27919d6d936",
  "name": "Split out page URLs",
  "type": "n8n-nodes-base.splitOut",
  "position": [
    380,
    3800
  ],
  "parameters": {
    "options": {},
    "fieldToSplitOut": "Page"
  },
  "typeVersion": 1
}

================ Node #3980 ================
{
  "id": "71c5a0d4-540e-4766-ae99-bdc427019dac",
  "name": "Retrieve Page Markdown and Links",
  "type": "n8n-nodes-base.httpRequest",
  "notes": "curl -X POST https://api.firecrawl.dev/v1/scrape \\\n -H 'Content-Type: application/json' \\\n -H 'Authorization: Bearer YOUR_API_KEY' \\\n -d '{\n \"url\": \"https://docs.firecrawl.dev\",\n \"formats\" : [\"markdown\", \"html\"]\n }'\n",
  "position": [
    960,
    3820
  ],
  "parameters": {
    "url": "https://api.firecrawl.dev/v1/scrape",
    "method": "POST",
    "options": {},
    "jsonBody": "={\n \"url\": \"{{ $json.Page }}\",\n \"formats\" : [\"markdown\", \"links\"]\n} ",
    "sendBody": true,
    "sendHeaders": true,
    "specifyBody": "json",
    "authentication": "genericCredentialType",
    "genericAuthType": "httpHeaderAuth",
    "headerParameters": {
      "parameters": [
        {
          "name": "Content-Type",
          "value": "application/json"
        }
      ]
    }
  },
  "credentials": {
    "httpHeaderAuth": {
      "id": "nbamiF1MDku2NNz7",
      "name": "Firecrawl Bearer"
    }
  },
  "retryOnFail": true,
  "typeVersion": 4.2,
  "waitBetweenTries": 5000
}

================ Node #3981 ================
{
  "id": "a2f12929-262e-4354-baa3-f9e3c05ec2eb",
  "name": "Sticky Note38",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    -840,
    3340
  ],
  "parameters": {
    "color": 4,
    "width": 581.9949654101088,
    "height": 818.5240734585421,
    "content": "## Convert URL HTML to Markdown and Get Page Links\n\n## Use Case\nTransform web pages into AI-friendly markdown format:\n- You need to process webpage content for LLM analysis\n- You want to extract both content and links from web pages\n- You need clean, formatted text without HTML markup\n- You want to respect API rate limits while crawling pages\n\n## What this Workflow Does\nThe workflow uses Firecrawl.dev API to process webpages:\n- Converts HTML content to markdown format\n- Extracts all links from each webpage\n- Handles API rate limiting automatically\n- Processes URLs in batches from your database\n\n## Setup\n1. Create a [Firecrawl.dev](https://www.firecrawl.dev/) account and get your API key\n2. Add your Firecrawl API key to the HTTP Request node's Authorization header\n3. Connect your URL database to the input node (column name must be \"Page\") or edit the array in `Example fields from data source`\n4. Configure your preferred output database connection\n\n## How to Adjust it to Your Needs\n- Modify input source to pull URLs from different databases\n- Adjust rate limiting parameters if needed\n- Customize output format for your specific use case\n\n\nMade by Simon @ [automake.io](https://automake.io)\n"
  },
  "typeVersion": 1
}

================ Node #3982 ================
{
  "id": "08c457ef-5c1f-46d8-a53e-f492b11c83f9",
  "name": "Sticky Note",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    1600,
    420
  ],
  "parameters": {
    "color": 6,
    "width": 478.38709677419376,
    "height": 347.82258064516134,
    "content": "## \ud83e\udde0Text Analysis\n### Readability Score Ranges:\nWhen testing model responses, readability scores can range across different levels. Here\u2019s a breakdown:\n\n- **90\u2013100**: Very easy to read (5th grade or below)\n- **80\u201389**: Easy to read (6th grade)\n- **70\u201379**: Fairly easy to read (7th grade)\n- **60\u201369**: Standard (8th to 9th grade)\n- **50\u201359**: Fairly difficult (10th to 12th grade)\n- **30\u201349**: Difficult (College)\n- **0\u201329**: Very difficult (College graduate)\n- **Below 0**: Extremely difficult (Post-graduate level)\n"
  },
  "typeVersion": 1
}

================ Node #3983 ================
{
  "id": "7801734c-5eb9-4abd-b234-e406462931f7",
  "name": "Get Models",
  "type": "n8n-nodes-base.httpRequest",
  "onError": "continueErrorOutput",
  "position": [
    20,
    180
  ],
  "parameters": {
    "url": "http://192.168.1.179:1234/v1/models",
    "options": {
      "timeout": 10000,
      "allowUnauthorizedCerts": false
    }
  },
  "typeVersion": 4.2
}

================ Node #3984 ================
{
  "id": "5ee93d9a-ad2e-4ea9-838e-2c12a168eae6",
  "name": "Sticky Note1",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    -140,
    -100
  ],
  "parameters": {
    "width": 377.6129032258063,
    "height": 264.22580645161304,
    "content": "## \u2699\ufe0f 2. Update Local IP\nUpdate the **'Base URL'** `http://192.168.1.1:1234/v1/models` in the workflow to match the IP of your LM Studio server. (Running LM Server)[https://lmstudio.ai/docs/basics/server]\n\nThis node will query the LM Studio server to retrieve a list of all loaded model IDs at the time of the query. If you change or add models to LM Studio, you\u2019ll need to rerun this node to get an updated list of active LLMs.\n"
  },
  "typeVersion": 1
}

================ Node #3985 ================
{
  "id": "f2b6a6ed-0ef1-4f2c-8350-9abd59d08e61",
  "name": "When chat message received",
  "type": "@n8n/n8n-nodes-langchain.chatTrigger",
  "position": [
    -300,
    180
  ],
  "webhookId": "39c3c6d5-ea06-4faa-b0e3-4e77a05b0297",
  "parameters": {
    "options": {}
  },
  "typeVersion": 1.1
}

================ Node #3986 ================
{
  "id": "dbaf0ad1-9027-4317-a996-33a3fcc9e258",
  "name": "Sticky Note2",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    -740,
    200
  ],
  "parameters": {
    "width": 378.75806451612857,
    "height": 216.12903225806457,
    "content": "## \ud83d\udee0\ufe0f1. Setup - LM Studio\nFirst, download and install [LM Studio](https://lmstudio.ai/). Identify which LLM models you want to use for testing.\n\nNext, the selected models are loaded into the server capabilities to prepare them for testing. For a detailed guide on how to set up multiple models, refer to the [LM Studio Basics](https://lmstudio.ai/docs/basics) documentation.\n"
  },
  "typeVersion": 1
}

================ Node #3987 ================
{
  "id": "36770fd1-7863-4c42-a68d-8d240ae3683b",
  "name": "Sticky Note3",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    360,
    400
  ],
  "parameters": {
    "width": 570.0000000000002,
    "height": 326.0645161290325,
    "content": "## 3. \ud83d\udca1Update the LM Settings\n\nFrom here, you can modify the following\n parameters to fine-tune model behavior:\n\n- **Temperature**: Controls randomness. Higher values (e.g., 1.0) produce more diverse results, while lower values (e.g., 0.2) make responses more focused and deterministic.\n- **Top P**: Adjusts nucleus sampling, where the model considers only a subset of probable tokens. A lower value (e.g., 0.5) narrows the response range.\n- **Presence Penalty**: Penalizes new tokens based on their presence in the input, encouraging the model to generate more varied responses.\n"
  },
  "typeVersion": 1
}

================ Node #3988 ================
{
  "id": "6b36f094-a3bf-4ff7-9385-4f7a2c80d54f",
  "name": "Get timeDifference",
  "type": "n8n-nodes-base.dateTime",
  "position": [
    1600,
    160
  ],
  "parameters": {
    "endDate": "={{ $json.endDateTime }}",
    "options": {},
    "operation": "getTimeBetweenDates",
    "startDate": "={{ $('Capture Start Time').item.json.startDateTime }}"
  },
  "typeVersion": 2
}

================ Node #3989 ================
{
  "id": "a0b8f29d-2f2f-4fcf-a54a-dff071e321e5",
  "name": "Sticky Note4",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    1900,
    -260
  ],
  "parameters": {
    "width": 304.3225806451618,
    "height": 599.7580645161281,
    "content": "## \ud83d\udcca4. Create Google Sheet (Optional)\n1. First, create a Google Sheet with the following headers:\n - Prompt\n - Time Sent\n - Time Received\n - Total Time Spent\n - Model\n - Response\n - Readability Score\n - Average Word Length\n - Word Count\n - Sentence Count\n - Average Sentence Length\n2. After creating the sheet, update the corresponding Google Sheets node in the workflow to map the data fields correctly.\n"
  },
  "typeVersion": 1
}

================ Node #3990 ================
{
  "id": "d376a5fb-4e07-42a3-aa0c-8ccc1b9feeb7",
  "name": "Sticky Note5",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    -760,
    -200
  ],
  "parameters": {
    "color": 5,
    "width": 359.2903225806448,
    "height": 316.9032258064518,
    "content": "## \ud83c\udfd7\ufe0fSetup Steps\n1. **Download and Install LM Studio**: Ensure LM Studio is correctly installed on your machine.\n2. **Update the Base URL**: Replace the base URL with the IP address of your LLM instance. Ensure the connection is established.\n3. **Configure LLM Settings**: Verify that your LLM models are properly set up and configured in LM Studio.\n4. **Create a Google Sheet**: Set up a Google Sheet with the necessary headers (Prompt, Time Sent, Time Received, etc.) to track your testing results.\n"
  },
  "typeVersion": 1
}

================ Node #3991 ================
{
  "id": "b21cad30-573e-4adf-a1d0-f34cf9628819",
  "name": "Sticky Note6",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    560,
    -160
  ],
  "parameters": {
    "width": 615.8064516129025,
    "height": 272.241935483871,
    "content": "## \ud83d\udcd6Prompting Multiple LLMs\n\nWhen testing for specific outcomes (such as conciseness or readability), you can add a **System Prompt** in the LLM Chain to guide the models' responses.\n\n**System Prompt Suggestion**:\n- Focus on ensuring that responses are concise, clear, and easily understandable by a 5th-grade reading level. \n- This prompt will help you compare models based on how well they meet readability standards and stay on point.\n \nAdjust the prompt to fit your desired testing criteria.\n"
  },
  "typeVersion": 1
}

================ Node #3992 ================
{
  "id": "dd5f7e7b-bc69-4b67-90e6-2077b6b93148",
  "name": "Run Model with Dunamic Inputs",
  "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
  "position": [
    1020,
    400
  ],
  "parameters": {
    "model": "={{ $node['Extract Model IDsto Run Separately'].json.id }}",
    "options": {
      "topP": 1,
      "baseURL": "http://192.168.1.179:1234/v1",
      "timeout": 250000,
      "temperature": 1,
      "presencePenalty": 0
    }
  },
  "credentials": {
    "openAiApi": {
      "id": "LBE5CXY4yeWrZCsy",
      "name": "OpenAi account"
    }
  },
  "typeVersion": 1
}

================ Node #3993 ================
{
  "id": "a0ee6c9a-cf76-4633-9c43-a7dc10a1f73e",
  "name": "Analyze LLM Response Metrics",
  "type": "n8n-nodes-base.code",
  "position": [
    2000,
    160
  ],
  "parameters": {
    "jsCode": "// Get the input data from n8n\nconst inputData = items.map(item => item.json);\n\n// Function to count words in a string\nfunction countWords(text) {\n return text.trim().split(/\\s+/).length;\n}\n\n// Function to count sentences in a string\nfunction countSentences(text) {\n const sentences = text.match(/[^.!?]+[.!?]+/g) || [];\n return sentences.length;\n}\n\n// Function to calculate average sentence length\nfunction averageSentenceLength(text) {\n const sentences = text.match(/[^.!?]+[.!?]+/g) || [];\n const sentenceLengths = sentences.map(sentence => sentence.trim().split(/\\s+/).length);\n const totalWords = sentenceLengths.reduce((acc, val) => acc + val, 0);\n return sentenceLengths.length ? (totalWords / sentenceLengths.length) : 0;\n}\n\n// Function to calculate average word length\nfunction averageWordLength(text) {\n const words = text.trim().split(/\\s+/);\n const totalCharacters = words.reduce((acc, word) => acc + word.length, 0);\n return words.length ? (totalCharacters / words.length) : 0;\n}\n\n// Function to calculate Flesch-Kincaid Readability Score\nfunction fleschKincaidReadability(text) {\n // Split text into sentences (approximate)\n const sentences = text.match(/[^.!?]+[.!?]*[\\n]*/g) || [];\n // Split text into words\n const words = text.trim().split(/\\s+/);\n // Estimate syllable count by matching vowel groups\n const syllableCount = (text.toLowerCase().match(/[aeiouy]{1,2}/g) || []).length;\n\n const sentenceCount = sentences.length;\n const wordCount = words.length;\n\n // Avoid division by zero\n if (wordCount === 0 || sentenceCount === 0) return 0;\n\n const averageWordsPerSentence = wordCount / sentenceCount;\n const averageSyllablesPerWord = syllableCount / wordCount;\n\n // Flesch-Kincaid formula\n return 206.835 - (1.015 * averageWordsPerSentence) - (84.6 * averageSyllablesPerWord);\n}\n\n\n// Prepare the result array for n8n output\nconst resultArray = [];\n\n// Loop through the input data and analyze each LLM response\ninputData.forEach(item => {\n const llmResponse = item.llm_response;\n\n // Perform the analyses\n const wordCount = countWords(llmResponse);\n const sentenceCount = countSentences(llmResponse);\n const avgSentenceLength = averageSentenceLength(llmResponse);\n const readabilityScore = fleschKincaidReadability(llmResponse);\n const avgWordLength = averageWordLength(llmResponse);\n\n // Structure the output to include original input and new calculated values\n resultArray.push({\n json: {\n llm_response: item.llm_response,\n prompt: item.prompt,\n model: item.model,\n start_time: item.start_time,\n end_time: item.end_time,\n time_diff: item.time_diff,\n word_count: wordCount,\n sentence_count: sentenceCount,\n average_sent_length: avgSentenceLength,\n readability_score: readabilityScore,\n average_word_length: avgWordLength\n }\n });\n});\n\n// Return the result array to n8n\nreturn resultArray;\n"
  },
  "typeVersion": 2
}

================ Node #3994 ================
{
  "id": "adef5d92-cb7e-417e-acbb-1a5d6c26426a",
  "name": "Save Results to Google Sheets",
  "type": "n8n-nodes-base.googleSheets",
  "position": [
    2180,
    160
  ],
  "parameters": {
    "columns": {
      "value": {
        "Model": "={{ $('Extract Model IDsto Run Separately').item.json.id }}",
        "Prompt": "={{ $json.prompt }}",
        "Response ": "={{ $('LLM Response Analysis').item.json.text }}",
        "TIme Sent": "={{ $json.start_time }}",
        "Word_count": "={{ $json.word_count }}",
        "Sentence_count": "={{ $json.sentence_count }}",
        "Time Recieved ": "={{ $json.end_time }}",
        "Total TIme spent ": "={{ $json.time_diff }}",
        "readability_score": "={{ $json.readability_score }}",
        "Average_sent_length": "={{ $json.average_sent_length }}",
        "average_word_length": "={{ $json.average_word_length }}"
      },
      "schema": [
        {
          "id": "Prompt",
          "type": "string",
          "display": true,
          "required": false,
          "displayName": "Prompt",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "TIme Sent",
          "type": "string",
          "display": true,
          "required": false,
          "displayName": "TIme Sent",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "Time Recieved ",
          "type": "string",
          "display": true,
          "required": false,
          "displayName": "Time Recieved ",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "Total TIme spent ",
          "type": "string",
          "display": true,
          "required": false,
          "displayName": "Total TIme spent ",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "Model",
          "type": "string",
          "display": true,
          "required": false,
          "displayName": "Model",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "Response ",
          "type": "string",
          "display": true,
          "required": false,
          "displayName": "Response ",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "readability_score",
          "type": "string",
          "display": true,
          "removed": false,
          "required": false,
          "displayName": "readability_score",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "average_word_length",
          "type": "string",
          "display": true,
          "removed": false,
          "required": false,
          "displayName": "average_word_length",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "Word_count",
          "type": "string",
          "display": true,
          "removed": false,
          "required": false,
          "displayName": "Word_count",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "Sentence_count",
          "type": "string",
          "display": true,
          "removed": false,
          "required": false,
          "displayName": "Sentence_count",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "Average_sent_length",
          "type": "string",
          "display": true,
          "removed": false,
          "required": false,
          "displayName": "Average_sent_length",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        }
      ],
      "mappingMode": "defineBelow",
      "matchingColumns": []
    },
    "options": {},
    "operation": "append",
    "sheetName": {
      "__rl": true,
      "mode": "list",
      "value": "gid=0",
      "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1GdoTjKOrhWOqSZb-AoLNlXgRGBdXKSbXpy-EsZaPGvg/edit#gid=0",
      "cachedResultName": "Sheet1"
    },
    "documentId": {
      "__rl": true,
      "mode": "list",
      "value": "1GdoTjKOrhWOqSZb-AoLNlXgRGBdXKSbXpy-EsZaPGvg",
      "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1GdoTjKOrhWOqSZb-AoLNlXgRGBdXKSbXpy-EsZaPGvg/edit?usp=drivesdk",
      "cachedResultName": "Teacking LLM Success"
    }
  },
  "credentials": {
    "googleSheetsOAuth2Api": {
      "id": "DMnEU30APvssJZwc",
      "name": "Google Sheets account"
    }
  },
  "typeVersion": 4.5
}

================ Node #3995 ================
{
  "id": "2e147670-67af-4dde-8ba8-90b685238599",
  "name": "Capture End Time",
  "type": "n8n-nodes-base.dateTime",
  "position": [
    1380,
    160
  ],
  "parameters": {
    "options": {},
    "outputFieldName": "endDateTime"
  },
  "typeVersion": 2
}

================ Node #3996 ================
{
  "id": "5a8d3334-b7f8-4f14-8026-055db795bb1f",
  "name": "Capture Start Time",
  "type": "n8n-nodes-base.dateTime",
  "position": [
    520,
    160
  ],
  "parameters": {
    "options": {},
    "outputFieldName": "startDateTime"
  },
  "typeVersion": 2
}

================ Node #3997 ================
{
  "id": "c42d1748-a10d-4792-8526-5ea1c542eeec",
  "name": "Prepare Data for Analysis",
  "type": "n8n-nodes-base.set",
  "position": [
    1800,
    160
  ],
  "parameters": {
    "options": {},
    "assignments": {
      "assignments": [
        {
          "id": "920ffdcc-2ae1-4ccb-bc54-049d9d84bd42",
          "name": "llm_response",
          "type": "string",
          "value": "={{ $('LLM Response Analysis').item.json.text }}"
        },
        {
          "id": "c3e70e1b-055c-4a91-aeb0-3d00d41af86d",
          "name": "prompt",
          "type": "string",
          "value": "={{ $('When chat message received').item.json.chatInput }}"
        },
        {
          "id": "cfa45a85-7e60-4a09-b1ed-f9ad51161254",
          "name": "model",
          "type": "string",
          "value": "={{ $('Extract Model IDsto Run Separately').item.json.id }}"
        },
        {
          "id": "a49758c8-4828-41d9-b1d8-4e64dc06920b",
          "name": "start_time",
          "type": "string",
          "value": "={{ $('Capture Start Time').item.json.startDateTime }}"
        },
        {
          "id": "6206be8f-f088-4c4d-8a84-96295937afe2",
          "name": "end_time",
          "type": "string",
          "value": "={{ $('Capture End Time').item.json.endDateTime }}"
        },
        {
          "id": "421b52f9-6184-4bfa-b36a-571e1ea40ce4",
          "name": "time_diff",
          "type": "string",
          "value": "={{ $json.timeDifference.days }}"
        }
      ]
    }
  },
  "typeVersion": 3.4
}

================ Node #3998 ================
{
  "id": "04679ba8-f13c-4453-99ac-970095bffc20",
  "name": "Extract Model IDsto Run Separately",
  "type": "n8n-nodes-base.splitOut",
  "position": [
    300,
    160
  ],
  "parameters": {
    "options": {},
    "fieldToSplitOut": "data"
  },
  "typeVersion": 1
}

================ Node #3999 ================
{
  "id": "97cdd050-5538-47e1-a67a-ea6e90e89b19",
  "name": "Sticky Note7",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    2240,
    -160
  ],
  "parameters": {
    "width": 330.4677419354838,
    "height": 182.9032258064516,
    "content": "### Optional\nYou can just delete the google sheet node, and review the results by hand. \n\nUtilizing the google sheet, allows you to provide mulitple prompts and review the analysis against all of those runs."
  },
  "typeVersion": 1
}

================ Node #4000 ================
{
  "id": "5a1558ec-54e8-4860-b3db-edcb47c52413",
  "name": "Add System Prompt",
  "type": "n8n-nodes-base.set",
  "position": [
    740,
    160
  ],
  "parameters": {
    "options": {},
    "assignments": {
      "assignments": [
        {
          "id": "fd48436f-8242-4c01-a7c3-246d28a8639f",
          "name": "system_prompt",
          "type": "string",
          "value": "Ensure that messages are concise and to the point readable by a 5th grader."
        }
      ]
    },
    "includeOtherFields": true
  },
  "typeVersion": 3.4
}