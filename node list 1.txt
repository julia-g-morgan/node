{
  "id": "20a2d959-5412-447b-a2c4-7736b6b758b3",
  "name": "When chat message received",
  "type": "@n8n/n8n-nodes-langchain.chatTrigger",
  "position": [
    -320,
    1600
  ],
  "webhookId": "8ba8fa53-2c24-47a8-b4dd-67b88c106e3d",
  "parameters": {
    "options": {}
  },
  "typeVersion": 1.1
}

================ Node #2 ================
{
  "id": "de79c268-bac5-48ff-be4d-18f522861c22",
  "name": "Sticky Note7",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    -100,
    1280
  ],
  "parameters": {
    "color": 4,
    "width": 340,
    "height": 380,
    "content": "## Retrieve Long Term Memories\nGoogle Docs"
  },
  "typeVersion": 1
}

================ Node #3 ================
{
  "id": "000a94d1-57ce-4eec-a021-9123685d22bf",
  "name": "Sticky Note8",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    1040,
    1840
  ],
  "parameters": {
    "width": 280,
    "height": 380,
    "content": "## Save To Current Chat Memory (Optional)"
  },
  "typeVersion": 1
}

================ Node #4 ================
{
  "id": "1bf1cade-bb3e-450a-a531-9add259069df",
  "name": "Sticky Note9",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    1360,
    1840
  ],
  "parameters": {
    "color": 4,
    "width": 280,
    "height": 380,
    "content": "## Save Long Term Memories\nGoogle Docs"
  },
  "typeVersion": 1
}

================ Node #5 ================
{
  "id": "8b30f207-8204-4548-8f51-38c387d98ae9",
  "name": "gpt-4o-mini",
  "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
  "position": [
    820,
    1900
  ],
  "parameters": {
    "options": {}
  },
  "credentials": {
    "openAiApi": {
      "id": "jEMSvKmtYfzAkhe6",
      "name": "OpenAi account"
    }
  },
  "typeVersion": 1.1
}

================ Node #6 ================
{
  "id": "50271e59-6dd2-4f54-9b28-dd4a9f33ddc5",
  "name": "Chat Response",
  "type": "n8n-nodes-base.set",
  "position": [
    1440,
    1600
  ],
  "parameters": {
    "options": {},
    "assignments": {
      "assignments": [
        {
          "id": "d6f68b1c-a6a6-44d4-8686-dc4dcdde4767",
          "name": "output",
          "type": "string",
          "value": "={{ $json.output }}"
        }
      ]
    }
  },
  "typeVersion": 3.4
}

================ Node #7 ================
{
  "id": "1064a2bf-bf74-44cd-ba8a-48f93700e887",
  "name": "Window Buffer Memory",
  "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
  "position": [
    1140,
    2000
  ],
  "parameters": {
    "sessionKey": "={{ $('When chat message received').item.json.sessionId }}",
    "sessionIdType": "customKey",
    "contextWindowLength": 50
  },
  "typeVersion": 1.3
}

================ Node #8 ================
{
  "id": "280fe3b1-faca-41b6-be0e-2ab906cd1662",
  "name": "Save Long Term Memories",
  "type": "n8n-nodes-base.googleDocsTool",
  "position": [
    1460,
    2000
  ],
  "parameters": {
    "actionsUi": {
      "actionFields": [
        {
          "text": "={ \n \"memory\": \"{{ $fromAI('memory') }}\",\n \"date\": \"{{ $now }}\"\n}",
          "action": "insert"
        }
      ]
    },
    "operation": "update",
    "documentURL": "[Google Doc ID]",
    "descriptionType": "manual",
    "toolDescription": "Save Memory"
  },
  "credentials": {
    "googleDocsOAuth2Api": {
      "id": "YWEHuG28zOt532MQ",
      "name": "Google Docs account"
    }
  },
  "typeVersion": 2
}

================ Node #9 ================
{
  "id": "37baa147-120a-40a8-b92f-df319fc4bc46",
  "name": "Retrieve Long Term Memories",
  "type": "n8n-nodes-base.googleDocs",
  "position": [
    20,
    1420
  ],
  "parameters": {
    "operation": "get",
    "documentURL": "[Google Doc ID]"
  },
  "credentials": {
    "googleDocsOAuth2Api": {
      "id": "YWEHuG28zOt532MQ",
      "name": "Google Docs account"
    }
  },
  "typeVersion": 2,
  "alwaysOutputData": true
}

================ Node #10 ================
{
  "id": "b047a271-d2aa-4a26-b663-6a76d249824a",
  "name": "Sticky Note",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    720,
    1840
  ],
  "parameters": {
    "color": 3,
    "width": 280,
    "height": 380,
    "content": "## LLM"
  },
  "typeVersion": 1
}

================ Node #11 ================
{
  "id": "15bb5fd5-7dfe-4da9-830c-e1d905831640",
  "name": "Telegram Response",
  "type": "n8n-nodes-base.telegram",
  "position": [
    1440,
    1260
  ],
  "parameters": {
    "text": "={{ $json.output }}",
    "chatId": "=1234567891",
    "additionalFields": {
      "parse_mode": "HTML",
      "appendAttribution": false
    }
  },
  "credentials": {
    "telegramApi": {
      "id": "pAIFhguJlkO3c7aQ",
      "name": "Telegram account"
    }
  },
  "typeVersion": 1.2
}

================ Node #12 ================
{
  "id": "8cc38a87-e214-4193-9fe6-ba4adc3d5530",
  "name": "Sticky Note1",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    1360,
    1160
  ],
  "parameters": {
    "width": 260,
    "height": 300,
    "content": "## Telegram \n(Optional)"
  },
  "typeVersion": 1
}

================ Node #13 ================
{
  "id": "38121a81-d768-4bb0-a9e6-39de0906e026",
  "name": "Sticky Note2",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    680,
    1500
  ],
  "parameters": {
    "color": 5,
    "width": 1320,
    "height": 780,
    "content": "## AI AGENT with Long Term Memory & Note Storage"
  },
  "typeVersion": 1
}

================ Node #14 ================
{
  "id": "7d5d1466-b4c9-4055-a634-ea7025dc370a",
  "name": "DeepSeek-V3 Chat",
  "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
  "position": [
    820,
    2060
  ],
  "parameters": {
    "model": "=deepseek-chat",
    "options": {}
  },
  "credentials": {
    "openAiApi": {
      "id": "MSl7SdcvZe0SqCYI",
      "name": "deepseek"
    }
  },
  "typeVersion": 1.1
}

================ Node #15 ================
{
  "id": "68303b67-2203-41e8-b370-220d884d2945",
  "name": "AI Tools Agent",
  "type": "@n8n/n8n-nodes-langchain.agent",
  "position": [
    1060,
    1600
  ],
  "parameters": {
    "text": "={{ $('When chat message received').item.json.chatInput }}",
    "options": {
      "systemMessage": "=## ROLE \nYou are a friendly, attentive, and helpful AI assistant. Your primary goal is to assist the user while maintaining a personalized and engaging interaction. \n\n---\n\n## RULES \n\n1. **Memory Management**: \n - When the user sends a new message, evaluate whether it contains noteworthy or personal information (e.g., preferences, habits, goals, or important events). \n - If such information is identified, use the **Save Memory** tool to store this data in memory. \n - Always send a meaningful response back to the user, even if your primary action was saving information. This response should not reveal that information was stored but should acknowledge or engage with the user\u2019s input naturally. \n\n2. **Note Management**: \n - If the user provides information that is intended to be stored as a note (e.g., specific instructions, reminders, or standalone pieces of information), use the **Save Note** tool. \n - Notes should not be stored in memory using the **Save Memory** tool. \n - Ensure that notes are clear, concise, and accurately reflect the user\u2019s input. \n\n3. **Context Awareness**: \n - Use stored memories and notes to provide contextually relevant and personalized responses. \n - Always consider the **date and time** when a memory or note was collected to ensure your responses are up-to-date and accurate.\n\n4. **User-Centric Responses**: \n - Tailor your responses based on the user's preferences and past interactions. \n - Be proactive in recalling relevant details from memory or notes when appropriate but avoid overwhelming the user with unnecessary information.\n\n5. **Privacy and Sensitivity**: \n - Handle all user data with care and sensitivity. Avoid making assumptions or sharing stored information unless it directly enhances the conversation or task at hand.\n - Never store passwords or usernames.\n\n6. **Fallback Responses**: \n - **IMPORTANT** If no specific task or question arises from the user\u2019s message (e.g., when only saving information), respond in a way that keeps the conversation flowing naturally. For example: \n - Acknowledge their input: \u201cThanks for sharing that!\u201d \n - Provide a friendly follow-up: \u201cIs there anything else I can help you with today?\u201d \n - DO NOT tell jokes as a fallback response.\n\n---\n\n## TOOLS \n\n### Save Memory \n- Use this tool to store summarized, concise, and meaningful information about the user. \n- Extract key details from user messages that could enhance future interactions (e.g., likes/dislikes, important dates, hobbies). \n- Ensure that the summary is clear and devoid of unnecessary details.\n\n### Save Note \n- Use this tool to store specific instructions, reminders, or standalone pieces of information provided by the user. \n- Notes should not include general personal preferences or habits meant for long-term memory storage. \n- Ensure that notes are concise and accurately reflect what the user wants to store.\n\n---\n\n## MEMORIES \n\n### Recent Noteworthy Memories \nHere are the most recent memories collected from the user, including their date and time of collection: \n\n**{{ $json.data[0].content }}**\n\n### Guidelines for Using Memories: \n- Prioritize recent memories but do not disregard older ones if they remain relevant. \n- Cross-reference memories to maintain consistency in your responses. For example, if a user shares conflicting preferences over time, clarify or adapt accordingly.\n\n---\n\n## NOTES \n\n### Recent Notes Collected from User: \nHere are the most recent notes collected from the user: \n\n**{{ $json.data[1].content }}**\n\n### Guidelines for Using Notes: \n- Use notes for tasks requiring specific instructions or reminders.\n- Do not mix note content with general memory content; keep them distinct.\n\n---\n\n## ADDITIONAL INSTRUCTIONS \n\n- Think critically before responding to ensure your answers are thoughtful and accurate. \n- Strive to build trust with the user by being consistent, reliable, and personable in your interactions. \n- Avoid robotic or overly formal language; aim for a conversational tone that aligns with being \"friendly and helpful.\" \n"
    },
    "promptType": "define"
  },
  "typeVersion": 1.7,
  "alwaysOutputData": false
}

================ Node #16 ================
{
  "id": "a6741133-93a1-42f8-83b4-bc29b9f49ae2",
  "name": "Sticky Note10",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    1680,
    1840
  ],
  "parameters": {
    "color": 4,
    "width": 280,
    "height": 380,
    "content": "## Save Notes\nGoogle Docs"
  },
  "typeVersion": 1
}

================ Node #17 ================
{
  "id": "87c88d31-811d-4265-b44e-ab30a45ff88b",
  "name": "Save Notes",
  "type": "n8n-nodes-base.googleDocsTool",
  "position": [
    1780,
    2000
  ],
  "parameters": {
    "actionsUi": {
      "actionFields": [
        {
          "text": "={ \n \"note\": \"{{ $fromAI('memory') }}\",\n \"date\": \"{{ $now }}\"\n}",
          "action": "insert"
        }
      ]
    },
    "operation": "update",
    "documentURL": "[Google Doc ID]",
    "descriptionType": "manual",
    "toolDescription": "Save Notes"
  },
  "credentials": {
    "googleDocsOAuth2Api": {
      "id": "YWEHuG28zOt532MQ",
      "name": "Google Docs account"
    }
  },
  "typeVersion": 2
}

================ Node #18 ================
{
  "id": "b9b97837-d6f2-4cef-89c4-9301973015df",
  "name": "Sticky Note11",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    -100,
    1680
  ],
  "parameters": {
    "color": 4,
    "width": 340,
    "height": 380,
    "content": "## Retrieve Notes\nGoogle Docs"
  },
  "typeVersion": 1
}

================ Node #19 ================
{
  "id": "0002a227-4240-4d3c-9a45-fc6e23fdc7f5",
  "name": "Retrieve Notes",
  "type": "n8n-nodes-base.googleDocs",
  "onError": "continueRegularOutput",
  "position": [
    20,
    1820
  ],
  "parameters": {
    "operation": "get",
    "documentURL": "[Google Doc ID]"
  },
  "credentials": {
    "googleDocsOAuth2Api": {
      "id": "YWEHuG28zOt532MQ",
      "name": "Google Docs account"
    }
  },
  "typeVersion": 2,
  "alwaysOutputData": true
}

================ Node #20 ================
{
  "id": "88f7024c-87d4-48b4-b6bb-f68c88202f56",
  "name": "Aggregate",
  "type": "n8n-nodes-base.aggregate",
  "position": [
    520,
    1600
  ],
  "parameters": {
    "options": {},
    "aggregate": "aggregateAllItemData"
  },
  "typeVersion": 1
}

================ Node #21 ================
{
  "id": "48d576fc-870a-441e-a7be-3056ef7e1d7a",
  "name": "Merge",
  "type": "n8n-nodes-base.merge",
  "position": [
    340,
    1600
  ],
  "parameters": {},
  "typeVersion": 3
}

================ Node #22 ================
{
  "id": "b7b70ba1-0267-4d2b-91f4-5cc4fd22fd03",
  "name": "Chat Message Trigger",
  "type": "@n8n/n8n-nodes-langchain.chatTrigger",
  "position": [
    -1940,
    160
  ],
  "webhookId": "cb0b9dbe-1f35-441a-b062-29624b0ebc6a",
  "parameters": {
    "options": {}
  },
  "typeVersion": 1.1
}

================ Node #23 ================
{
  "id": "55a8a512-f2d4-4aed-93e5-dd9bfa2dcaad",
  "name": "Generate Search Queries using LLM",
  "type": "@n8n/n8n-nodes-langchain.chainLlm",
  "position": [
    -1760,
    160
  ],
  "parameters": {
    "text": "=User Query: {{ $('Chat Message Trigger').item.json.chatInput }}",
    "messages": {
      "messageValues": [
        {
          "message": "=You are an expert research assistant. Given a user's query, generate up to four distinct, precise search queries that would help gather comprehensive information on the topic. Return only a JSON list of strings, for example: ['query1', 'query2', 'query3']."
        }
      ]
    },
    "promptType": "define"
  },
  "typeVersion": 1.5
}

================ Node #24 ================
{
  "id": "5f92361a-b490-479d-8360-c87a100b470e",
  "name": "LLM Response Provider (OpenRouter)",
  "type": "@n8n/n8n-nodes-langchain.lmChatOpenRouter",
  "position": [
    -1760,
    700
  ],
  "parameters": {
    "model": "google/gemini-2.0-flash-001",
    "options": {}
  },
  "credentials": {
    "openRouterApi": {
      "id": "WZWYWCfluxuKxZzV",
      "name": "OpenRouter account"
    }
  },
  "typeVersion": 1
}

================ Node #25 ================
{
  "id": "4ab360eb-858f-48b8-a00d-71867d4f0c93",
  "name": "Parse and Chunk JSON Data",
  "type": "n8n-nodes-base.code",
  "position": [
    -1420,
    160
  ],
  "parameters": {
    "jsCode": "// Parse the input JSON string and split it into four chunks\nconst rawText = $json.text;\n\n// Remove Markdown JSON code blocks if present\nconst cleanedText = rawText.replace(/```json|```/g, '').trim();\n\ntry {\n const jsonArray = JSON.parse(cleanedText);\n if (!Array.isArray(jsonArray)) {\n throw new Error('The JSON is not an array.');\n }\n const chunkSize = Math.ceil(jsonArray.length / 4);\n const chunks = [];\n for (let i = 0; i < jsonArray.length; i += chunkSize) {\n chunks.push(jsonArray.slice(i, i + chunkSize));\n }\n return chunks.map(chunk => ({ json: { chunk } }));\n} catch (error) {\n return [{ json: { error: error.message } }];\n}\n"
  },
  "typeVersion": 2
}

================ Node #26 ================
{
  "id": "5a3ac393-8355-449f-93cb-b98e8bee9b80",
  "name": "Perform SerpAPI Search Request",
  "type": "n8n-nodes-base.httpRequest",
  "position": [
    -780,
    180
  ],
  "parameters": {
    "url": "https://serpapi.com/search",
    "options": {},
    "sendQuery": true,
    "queryParameters": {
      "parameters": [
        {
          "name": "q",
          "value": "={{ $('Parse and Chunk JSON Data').item.json.chunk }}"
        },
        {
          "name": "api_key",
          "value": "={{ $credentials.SerpAPI.key }}"
        },
        {
          "name": "engine",
          "value": "google"
        }
      ]
    }
  },
  "typeVersion": 4.2
}

================ Node #27 ================
{
  "id": "dad82469-830d-40fb-9f6b-b9fefef41267",
  "name": "Perform Jina AI Analysis Request",
  "type": "n8n-nodes-base.httpRequest",
  "position": [
    80,
    160
  ],
  "parameters": {
    "url": "=https://r.jina.ai/{{ $json.url }}",
    "options": {},
    "authentication": "genericCredentialType",
    "genericAuthType": "httpHeaderAuth"
  },
  "credentials": {
    "httpHeaderAuth": {
      "id": "iseKF5sPsvwtJhgT",
      "name": "Jina AI"
    }
  },
  "typeVersion": 4.2
}

================ Node #28 ================
{
  "id": "e21bbdf6-a903-491e-920c-ef7576f9ce80",
  "name": "Format SerpAPI Organic Results",
  "type": "n8n-nodes-base.code",
  "position": [
    -460,
    140
  ],
  "parameters": {
    "jsCode": "// Format the organic search results from SerpAPI\nconst results = $input.first().json.organic_results;\nif (results.length === 0) {\n return [{ json: { error: 'No search results found.' } }];\n}\nconst formattedResults = results.map(result => ({\n title: result.title || 'No title available',\n url: result.link || 'No link available',\n source: result.source || result.displayed_link || 'Unknown source'\n}));\nreturn formattedResults.map(result => ({ json: result }));\n"
  },
  "typeVersion": 2
}

================ Node #29 ================
{
  "id": "a856c8e8-5c3c-4a2f-9086-66deee1afd06",
  "name": "Extract Relevant Context via LLM",
  "type": "@n8n/n8n-nodes-langchain.agent",
  "position": [
    -1280,
    520
  ],
  "parameters": {
    "text": "=User Queries: {{ $('Parse and Chunk JSON Data').all().map(item => item.json.chunk[0]).join(', ') }}\nWebpage Contents: \n\"\"\"\n{{ $json.data }}\n\"\"\"",
    "options": {
      "systemMessage": "=You are an expert information extractor. Given the user's query, the search query that led to this page, and the webpage content, extract all relevant pieces of information that are useful to answer the query. Return only the relevant context as plain text without any additional commentary."
    },
    "promptType": "define"
  },
  "typeVersion": 1.7
}

================ Node #30 ================
{
  "id": "6d5c6698-0b4f-438c-91b9-3597f5d3e904",
  "name": "Generate Comprehensive Research Report",
  "type": "@n8n/n8n-nodes-langchain.agent",
  "position": [
    -740,
    520
  ],
  "parameters": {
    "text": "=Extracted Contexts (Merged):\n\"\"\"\n{{ $json.output }}\n\"\"\"",
    "options": {
      "systemMessage": "You are an expert researcher and report writer. Based on the gathered contexts and the original user query, generate a comprehensive, well-structured report. Include all relevant insights and conclusions without unnecessary commentary.\n\nFormat the report in Markdown with clear headings. For example:\n\n# Research Report: [User Query]\n\n## Key Findings\n- Point 1\n- Point 2\n\n## Detailed Analysis\n### Aspect 1\nSummary of findings.\n_Source:_ [Source Name](URL)\n\n### Aspect 2\nSummary of findings.\n_Source:_ [Another Source](URL)\n\nNow, generate the complete report."
    },
    "promptType": "define"
  },
  "typeVersion": 1.7
}

================ Node #31 ================
{
  "id": "05fea6a1-791e-4980-8f2a-2960455066d7",
  "name": "Split Data for SerpAPI Batching",
  "type": "n8n-nodes-base.splitInBatches",
  "position": [
    -1100,
    160
  ],
  "parameters": {
    "options": {}
  },
  "typeVersion": 3
}

================ Node #32 ================
{
  "id": "df00e7e8-99b8-484a-8047-869474fefee9",
  "name": "Split Data for Jina AI Batching",
  "type": "n8n-nodes-base.splitInBatches",
  "position": [
    -220,
    140
  ],
  "parameters": {
    "options": {}
  },
  "typeVersion": 3
}

================ Node #33 ================
{
  "id": "2edc683b-65f7-40c3-a22d-7fbf5b67de0a",
  "name": "LLM Memory Buffer (Input Context)",
  "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
  "position": [
    -1160,
    740
  ],
  "parameters": {
    "sessionKey": "my_test_session",
    "sessionIdType": "customKey",
    "contextWindowLength": 20
  },
  "typeVersion": 1.3
}

================ Node #34 ================
{
  "id": "23017ae7-72a7-45c7-8edf-d0ba72220675",
  "name": "LLM Memory Buffer (Report Context)",
  "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
  "position": [
    -620,
    760
  ],
  "parameters": {
    "sessionKey": "my_test_session",
    "sessionIdType": "customKey",
    "contextWindowLength": 20
  },
  "typeVersion": 1.3
}

================ Node #35 ================
{
  "id": "6bc9533b-e265-47b3-b93a-3a4f86ba0541",
  "name": "Fetch Wikipedia Information",
  "type": "@n8n/n8n-nodes-langchain.toolWikipedia",
  "position": [
    -580,
    920
  ],
  "parameters": {},
  "typeVersion": 1
}

================ Node #36 ================
{
  "id": "b25c148e-047d-40a7-8818-94c3504828dd",
  "name": "Sticky Note: SerpAPI Setup",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    -940,
    -20
  ],
  "parameters": {
    "color": 7,
    "width": 420,
    "height": 140,
    "content": "## SerpAPI Setup Instructions\n1. Obtain your API key from https://serpapi.com/manage-api-key.\n2. Save your API key securely in n8n credentials (do not use plain text)."
  },
  "typeVersion": 1
}

================ Node #37 ================
{
  "id": "e69c9a85-31e4-42b9-a09a-683ec5bb97d1",
  "name": "Sticky Note: Jina AI Setup",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    -60,
    -40
  ],
  "parameters": {
    "color": 7,
    "width": 420,
    "height": 140,
    "content": "## Jina AI Setup Instructions\n1. Obtain your API key from https://jina.ai/api-dashboard/key-manager.\n2. Configure your Jina AI credential in n8n to ensure secure API access."
  },
  "typeVersion": 1
}

================ Node #38 ================
{
  "id": "dbd204e0-da8e-41d8-814b-f409a23e9573",
  "name": "Sticky Note: OpenRouter API Setup",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    -1680,
    460
  ],
  "parameters": {
    "color": 7,
    "width": 300,
    "height": 180,
    "content": "## OpenRouter API Setup Instructions\n1. Obtain your API key from https://openrouter.ai/settings/keys.\n2. Set up your OpenRouter credential in n8n for secure integration."
  },
  "typeVersion": 1
}

================ Node #39 ================
{
  "id": "23b50c07-39a8-4166-ab13-9683b3ee25e6",
  "name": "Check User & Chat ID",
  "type": "n8n-nodes-base.if",
  "position": [
    -80,
    160
  ],
  "parameters": {
    "options": {},
    "conditions": {
      "options": {
        "version": 2,
        "leftValue": "",
        "caseSensitive": true,
        "typeValidation": "strict"
      },
      "combinator": "and",
      "conditions": [
        {
          "id": "5fe3c0d8-bd61-4943-b152-9e6315134520",
          "operator": {
            "name": "filter.operator.equals",
            "type": "string",
            "operation": "equals"
          },
          "leftValue": "={{ $('Listen for Telegram Events').item.json.body.message.from.first_name }}",
          "rightValue": "={{ $json.first_name }}"
        },
        {
          "id": "98a0ea91-0567-459c-bbce-06abc14a49ce",
          "operator": {
            "name": "filter.operator.equals",
            "type": "string",
            "operation": "equals"
          },
          "leftValue": "={{ $('Listen for Telegram Events').item.json.body.message.from.last_name }}",
          "rightValue": "={{ $json.last_name }}"
        },
        {
          "id": "18a96c1f-f2a0-4a2a-b789-606763df4423",
          "operator": {
            "type": "number",
            "operation": "equals"
          },
          "leftValue": "={{ $('Listen for Telegram Events').item.json.body.message.from.id }}",
          "rightValue": "={{ $json.id }}"
        }
      ]
    },
    "looseTypeValidation": "="
  },
  "typeVersion": 2.2
}

================ Node #40 ================
{
  "id": "ecbc13fe-305d-4cdd-b35c-3e119e8e8b5d",
  "name": "Error message",
  "type": "n8n-nodes-base.telegram",
  "position": [
    160,
    440
  ],
  "parameters": {
    "text": "=Unable to process your message.",
    "chatId": "={{ $json.body.message.chat.id }}",
    "additionalFields": {
      "appendAttribution": false
    }
  },
  "credentials": {
    "telegramApi": {
      "id": "pAIFhguJlkO3c7aQ",
      "name": "Telegram account"
    }
  },
  "typeVersion": 1.2
}

================ Node #41 ================
{
  "id": "be722bc7-0b22-4892-967c-fdd398a7b129",
  "name": "Sticky Note",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    -540,
    -20
  ],
  "parameters": {
    "color": 6,
    "width": 949,
    "height": 652,
    "content": "# Receive Telegram Message with Webhook"
  },
  "typeVersion": 1
}

================ Node #42 ================
{
  "id": "a3866585-bfee-4025-a8f4-f06fde16171a",
  "name": "Listen for Telegram Events",
  "type": "n8n-nodes-base.webhook",
  "position": [
    -480,
    160
  ],
  "webhookId": "097f36f3-1574-44f9-815f-58387e3b20bf",
  "parameters": {
    "path": "wbot",
    "options": {
      "binaryPropertyName": "data"
    },
    "httpMethod": "POST"
  },
  "typeVersion": 2
}

================ Node #43 ================
{
  "id": "f70571d5-3680-4616-90fa-3358b0883368",
  "name": "Sticky Note1",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    -1380,
    -20
  ],
  "parameters": {
    "color": 7,
    "width": 800,
    "height": 860,
    "content": "# How to set up a Telegram Bot WebHook\n\n## WebHook Setup Process\n\n**Basic Concept**\nA WebHook allows your Telegram bot to automatically receive updates instead of manually polling the Bot API.\n\n**Setup Method**\nTo set a WebHook, make a GET request using this URL format:\n```\nhttps://api.telegram.org/bot{my_bot_token}/setWebhook?url={url_to_send_updates_to}\n```\nWhere:\n- `my_bot_token`: Your bot token from BotFather\n- `url_to_send_updates_to`: Your HTTPS endpoint that handles bot updates\n\n\n**Verification**\nTo verify the WebHook setup, use:\n```\nhttps://api.telegram.org/bot{my_bot_token}/getWebhookInfo\n```\n\nA successful response looks like:\n```json\n{\n \"ok\": true,\n \"result\": {\n \"url\": \"https://www.example.com/my-telegram-bot/\",\n \"has_custom_certificate\": false,\n \"pending_update_count\": 0,\n \"max_connections\": 40\n }\n}\n```\n\n\nThis method provides a simple and efficient way to handle Telegram bot updates automatically through webhooks rather than manual polling."
  },
  "typeVersion": 1
}

================ Node #44 ================
{
  "id": "2b6149d5-ffd6-46ef-9840-149508251a77",
  "name": "Validation",
  "type": "n8n-nodes-base.set",
  "position": [
    -260,
    160
  ],
  "parameters": {
    "options": {},
    "assignments": {
      "assignments": [
        {
          "id": "0cea6da1-652a-4c1e-94c3-30608ced90f8",
          "name": "first_name",
          "type": "string",
          "value": "FirstName"
        },
        {
          "id": "b90280c6-3e36-49ca-9e7e-e15c42d256cc",
          "name": "last_name",
          "type": "string",
          "value": "LastName"
        },
        {
          "id": "f6d86283-16ca-447e-8427-7d3d190babc0",
          "name": "id",
          "type": "number",
          "value": 12345667891
        }
      ]
    },
    "includeOtherFields": true
  },
  "typeVersion": 3.4
}

================ Node #45 ================
{
  "id": "41c965ea-b67d-4d6b-82e4-0e57f5fc13bb",
  "name": "Sticky Note4",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    -320,
    100
  ],
  "parameters": {
    "color": 7,
    "width": 420,
    "height": 260,
    "content": "## Validate Telegram User\n"
  },
  "typeVersion": 1
}

================ Node #46 ================
{
  "id": "164f5e91-1958-4dc5-b38c-db1cec0579d4",
  "name": "Message Router",
  "type": "n8n-nodes-base.switch",
  "position": [
    160,
    160
  ],
  "parameters": {
    "rules": {
      "values": [
        {
          "outputKey": "audio",
          "conditions": {
            "options": {
              "version": 2,
              "leftValue": "",
              "caseSensitive": true,
              "typeValidation": "strict"
            },
            "combinator": "and",
            "conditions": [
              {
                "operator": {
                  "type": "object",
                  "operation": "exists",
                  "singleValue": true
                },
                "leftValue": "={{ $json.body.message.voice }}",
                "rightValue": ""
              }
            ]
          },
          "renameOutput": true
        },
        {
          "outputKey": "text",
          "conditions": {
            "options": {
              "version": 2,
              "leftValue": "",
              "caseSensitive": true,
              "typeValidation": "strict"
            },
            "combinator": "and",
            "conditions": [
              {
                "id": "342f0883-d959-44a2-b80d-379e39c76218",
                "operator": {
                  "type": "string",
                  "operation": "exists",
                  "singleValue": true
                },
                "leftValue": "={{ $json.body.message.text }}",
                "rightValue": ""
              }
            ]
          },
          "renameOutput": true
        },
        {
          "outputKey": "image",
          "conditions": {
            "options": {
              "version": 2,
              "leftValue": "",
              "caseSensitive": true,
              "typeValidation": "strict"
            },
            "combinator": "and",
            "conditions": [
              {
                "id": "ded3a600-f861-413a-8892-3fc5ea935ecb",
                "operator": {
                  "type": "array",
                  "operation": "exists",
                  "singleValue": true
                },
                "leftValue": "={{ $json.body.message.photo }}",
                "rightValue": ""
              }
            ]
          },
          "renameOutput": true
        }
      ]
    },
    "options": {
      "fallbackOutput": "extra"
    }
  },
  "typeVersion": 3.2
}

================ Node #47 ================
{
  "id": "7947173d-39fa-4d4b-9b1e-60de809a9950",
  "name": "AI Agent",
  "type": "@n8n/n8n-nodes-langchain.agent",
  "onError": "continueErrorOutput",
  "position": [
    860,
    340
  ],
  "parameters": {
    "text": "={{ $('Message Router').item.json.body.message.text }}",
    "options": {
      "systemMessage": "=## ROLE \nYou are a friendly, attentive, and helpful AI assistant. Your primary goal is to assist the user while maintaining a personalized and engaging interaction. The current user's first name is **{{ $json.body.message.from.first_name }}**.\n\n---\n\n## RULES \n\n1. **Memory Management**: \n - When the user sends a new message, evaluate whether it contains noteworthy or personal information (e.g., preferences, habits, goals, or important events). \n - If such information is identified, use the **Save Memory** tool to store this data in memory. \n - Always send a meaningful response back to the user, even if your primary action was saving information. This response should not reveal that information was stored but should acknowledge or engage with the user\u2019s input naturally.\n\n2. **Context Awareness**: \n - Use stored memories to provide contextually relevant and personalized responses. \n - Always consider the **date and time** when a memory was collected to ensure your responses are up-to-date and accurate.\n\n3. **User-Centric Responses**: \n - Tailor your responses based on the user's preferences and past interactions. \n - Be proactive in recalling relevant details from memory when appropriate but avoid overwhelming the user with unnecessary information.\n\n4. **Privacy and Sensitivity**: \n - Handle all user data with care and sensitivity. Avoid making assumptions or sharing stored information unless it directly enhances the conversation or task at hand.\n\n5. **Fallback Responses**: \n - **IMPORTANT** If no specific task or question arises from the user\u2019s message (e.g., when only saving information), respond in a way that keeps the conversation flowing naturally. For example:\n - Acknowledge their input: \u201cThanks for sharing that!\u201d \n - Provide a friendly follow-up: \u201cIs there anything else I can help you with today?\u201d\n - DO NOT tell Jokes as a fall back response.\n\n---\n\n## TOOLS \n\n### Save Memory \n- Use this tool to store summarized, concise, and meaningful information about the user. \n- Extract key details from user messages that could enhance future interactions (e.g., likes/dislikes, important dates, hobbies). \n- Ensure that the summary is clear and devoid of unnecessary details.\n\n---\n\n## MEMORIES \n\n### Recent Noteworthy Memories \nHere are the most recent memories collected from the user, including their date and time of collection: \n\n**{{ $('Retrieve Long Term Memories').item.json.content }}**\n\n### Guidelines for Using Memories: \n- Prioritize recent memories but do not disregard older ones if they remain relevant. \n- Cross-reference memories to maintain consistency in your responses. For example, if a user shares conflicting preferences over time, clarify or adapt accordingly.\n\n---\n\n## ADDITIONAL INSTRUCTIONS \n\n- Think critically before responding to ensure your answers are thoughtful and accurate. \n- Strive to build trust with the user by being consistent, reliable, and personable in your interactions. \n- Avoid robotic or overly formal language; aim for a conversational tone that aligns with being \"friendly and helpful.\" \n"
    },
    "promptType": "define"
  },
  "typeVersion": 1.7,
  "alwaysOutputData": true
}

================ Node #48 ================
{
  "id": "6111c771-d8af-4586-8829-213d86dc4f47",
  "name": "Merge",
  "type": "n8n-nodes-base.merge",
  "position": [
    860,
    100
  ],
  "parameters": {
    "mode": "combine",
    "options": {},
    "combineBy": "combineAll"
  },
  "typeVersion": 3
}

================ Node #49 ================
{
  "id": "94a01b4f-549d-4e49-88e0-143c90dd200e",
  "name": "Window Buffer Memory",
  "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
  "position": [
    920,
    780
  ],
  "parameters": {
    "sessionKey": "={{ $json.id }}",
    "sessionIdType": "customKey",
    "contextWindowLength": 50
  },
  "typeVersion": 1.3
}

================ Node #50 ================
{
  "id": "d1182e11-025e-4885-abb1-b76a9b617b84",
  "name": "When chat message received",
  "type": "@n8n/n8n-nodes-langchain.chatTrigger",
  "disabled": true,
  "position": [
    -480,
    420
  ],
  "webhookId": "701ddc24-2637-466e-9789-5d47145333a8",
  "parameters": {
    "options": {}
  },
  "typeVersion": 1.1
}

================ Node #51 ================
{
  "id": "97d4cdcd-b016-44aa-882c-eb2ec38968eb",
  "name": "Sticky Note10",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    440,
    -20
  ],
  "parameters": {
    "color": 5,
    "width": 1033,
    "height": 1029,
    "content": "# Process Text Message"
  },
  "typeVersion": 1
}

================ Node #52 ================
{
  "id": "73156ecc-af5f-4e3d-82c6-4668db52b511",
  "name": "Telegram Response",
  "type": "n8n-nodes-base.telegram",
  "position": [
    1240,
    160
  ],
  "parameters": {
    "text": "={{ $json.output }}",
    "chatId": "={{ $('Listen for Telegram Events').item.json.body.message.chat.id }}",
    "additionalFields": {
      "parse_mode": "HTML",
      "appendAttribution": false
    }
  },
  "credentials": {
    "telegramApi": {
      "id": "pAIFhguJlkO3c7aQ",
      "name": "Telegram account"
    }
  },
  "typeVersion": 1.2
}

================ Node #53 ================
{
  "id": "5f342299-40fe-44cf-9b58-8a9d3bfac1df",
  "name": "Save Long Term Memories",
  "type": "n8n-nodes-base.googleDocsTool",
  "position": [
    1260,
    780
  ],
  "parameters": {
    "actionsUi": {
      "actionFields": [
        {
          "text": "= Memory: {{ $fromAI('memory') }} - Date: {{ $now }} ",
          "action": "insert"
        }
      ]
    },
    "operation": "update",
    "documentURL": "[Google Doc ID]",
    "descriptionType": "manual",
    "toolDescription": "Save memories"
  },
  "credentials": {
    "googleDocsOAuth2Api": {
      "id": "YWEHuG28zOt532MQ",
      "name": "Google Docs account"
    }
  },
  "typeVersion": 2
}

================ Node #54 ================
{
  "id": "aba001a8-68f9-4870-9cd0-60a4c59ecd5b",
  "name": "Sticky Note3",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    460,
    220
  ],
  "parameters": {
    "color": 4,
    "width": 300,
    "height": 340,
    "content": "## Retrieve Long Term Memories\nGoogle Docs"
  },
  "typeVersion": 1
}

================ Node #55 ================
{
  "id": "e5ec71ec-9527-4ccd-87c3-3aa2f09192e8",
  "name": "Retrieve Long Term Memories",
  "type": "n8n-nodes-base.googleDocs",
  "position": [
    560,
    360
  ],
  "parameters": {
    "operation": "get",
    "documentURL": "[Google Doc ID]"
  },
  "credentials": {
    "googleDocsOAuth2Api": {
      "id": "YWEHuG28zOt532MQ",
      "name": "Google Docs account"
    }
  },
  "typeVersion": 2,
  "alwaysOutputData": true
}

================ Node #56 ================
{
  "id": "4764383a-3c4b-4e64-b391-5dc9fb4b9de6",
  "name": "Sticky Note5",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    820,
    660
  ],
  "parameters": {
    "width": 280,
    "height": 320,
    "content": "## Save To Current Chat Memory (Optional)"
  },
  "typeVersion": 1
}

================ Node #57 ================
{
  "id": "e11995b8-e061-4b40-b4b6-9ec03c7e5a06",
  "name": "Sticky Note6",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    1160,
    660
  ],
  "parameters": {
    "color": 4,
    "width": 280,
    "height": 320,
    "content": "## Save Long Term Memories\nGoogle Docs"
  },
  "typeVersion": 1
}

================ Node #58 ================
{
  "id": "1b53aef2-ca99-409b-bd10-3fc1fd87f540",
  "name": "Response Error message",
  "type": "n8n-nodes-base.telegram",
  "position": [
    1240,
    360
  ],
  "parameters": {
    "text": "=Unable to process your message.",
    "chatId": "={{ $('Listen for Telegram Events').item.json.body.message.chat.id }}",
    "additionalFields": {
      "appendAttribution": false
    }
  },
  "credentials": {
    "telegramApi": {
      "id": "pAIFhguJlkO3c7aQ",
      "name": "Telegram account"
    }
  },
  "typeVersion": 1.2
}

================ Node #59 ================
{
  "id": "e5d79084-d7f1-44fd-a1db-73cc76a148ec",
  "name": "Sticky Note12",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    -60,
    660
  ],
  "parameters": {
    "color": 7,
    "width": 820,
    "height": 600,
    "content": "# DeepSeek API Call\n\nThe DeepSeek API uses an API format compatible with OpenAI. By modifying the configuration, you can use the OpenAI SDK or softwares compatible with the OpenAI API to access the DeepSeek API.\n\nhttps://api-docs.deepseek.com/\n\n## Configuration Parameters\n\n| Parameter | Value |\n|-----------|--------|\n| base_url | https://api.deepseek.com |\n| api_key | https://platform.deepseek.com/api_keys |\n\n\n\n## Important Notes\n\n- To be compatible with OpenAI, you can also use `https://api.deepseek.com/v1` as the base_url. Note that the v1 here has NO relationship with the model's version.\n\n- The deepseek-chat model has been upgraded to DeepSeek-V3. The API remains unchanged. You can invoke DeepSeek-V3 by specifying `model='deepseek-chat'`.\n\n- deepseek-reasoner is the latest reasoning model, DeepSeek-R1, released by DeepSeek. You can invoke DeepSeek-R1 by specifying `model='deepseek-reasoner'`."
  },
  "typeVersion": 1
}

================ Node #60 ================
{
  "id": "af14e803-44a5-4b0e-a675-b1e860bf6d29",
  "name": "DeepSeek-R1 Reasoning",
  "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
  "position": [
    440,
    880
  ],
  "parameters": {
    "model": "=deepseek-reasoner",
    "options": {}
  },
  "credentials": {
    "openAiApi": {
      "id": "MSl7SdcvZe0SqCYI",
      "name": "deepseek"
    }
  },
  "typeVersion": 1.1
}

================ Node #61 ================
{
  "id": "e8be6a32-ba4c-4895-b34b-c5e7d0ded5e8",
  "name": "DeepSeek-V3 Chat",
  "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
  "position": [
    600,
    880
  ],
  "parameters": {
    "model": "=deepseek-chat",
    "options": {}
  },
  "credentials": {
    "openAiApi": {
      "id": "MSl7SdcvZe0SqCYI",
      "name": "deepseek"
    }
  },
  "typeVersion": 1.1
}

================ Node #62 ================
{
  "id": "6501a54f-a68c-452d-b353-d7e871ca3780",
  "name": "When chat message received",
  "type": "@n8n/n8n-nodes-langchain.chatTrigger",
  "position": [
    -300,
    -80
  ],
  "webhookId": "cf1de04f-3e38-426c-89f0-3bdb110a5dcf",
  "parameters": {
    "options": {}
  },
  "typeVersion": 1.1
}

================ Node #63 ================
{
  "id": "cd32221b-2a36-408d-b57e-8115fcd810c9",
  "name": "AI Agent",
  "type": "@n8n/n8n-nodes-langchain.agent",
  "position": [
    0,
    -80
  ],
  "parameters": {
    "agent": "openAiFunctionsAgent",
    "options": {
      "systemMessage": "You are DB assistant. You need to run queries in DB aligned with user requests.\n\nRun custom SQL query to aggregate data and response to user. Make sure every table has schema prefix to it in sql query which you can get from `Get DB Schema and Tables List` tool.\n\nFetch all data to analyse it for response if needed.\n\n## Tools\n\n- Execute SQL query - Executes any sql query generated by AI\n- Get DB Schema and Tables List - Lists all the tables in database with its schema name\n- Get Table Definition - Gets the table definition from db using table name and schema name"
    }
  },
  "typeVersion": 1.7
}

================ Node #64 ================
{
  "id": "8accbeeb-7eaf-4e9e-aabc-de8ab3a0459b",
  "name": "OpenAI Chat Model",
  "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
  "position": [
    -60,
    160
  ],
  "parameters": {
    "model": {
      "__rl": true,
      "mode": "list",
      "value": "gpt-4o-mini"
    },
    "options": {}
  },
  "credentials": {
    "openAiApi": {
      "id": "48uG61Ilo8jndw3r",
      "name": "Your OpenAI Account Credentials"
    }
  },
  "typeVersion": 1.2
}

================ Node #65 ================
{
  "id": "11f2013f-a080-4c9e-8773-c90492e2c628",
  "name": "Get Table Definition",
  "type": "n8n-nodes-base.postgresTool",
  "position": [
    780,
    140
  ],
  "parameters": {
    "query": "select\n c.column_name,\n c.data_type,\n c.is_nullable,\n c.column_default,\n tc.constraint_type,\n ccu.table_name AS referenced_table,\n ccu.column_name AS referenced_column\nfrom\n information_schema.columns c\nLEFT join\n information_schema.key_column_usage kcu\n ON c.table_name = kcu.table_name\n AND c.column_name = kcu.column_name\nLEFT join\n information_schema.table_constraints tc\n ON kcu.constraint_name = tc.constraint_name\n AND tc.constraint_type = 'FOREIGN KEY'\nLEFT join\n information_schema.constraint_column_usage ccu\n ON tc.constraint_name = ccu.constraint_name\nwhere\n c.table_name = '{{ $fromAI(\"table_name\") }}'\n AND c.table_schema = '{{ $fromAI(\"schema_name\") }}'\norder by\n c.ordinal_position",
    "options": {},
    "operation": "executeQuery",
    "descriptionType": "manual",
    "toolDescription": "Get table definition to find all columns and types"
  },
  "credentials": {
    "postgres": {
      "id": "nGI61D0TEEZz18rr",
      "name": "Your Postgresql Database Credentials"
    }
  },
  "typeVersion": 2.5
}

================ Node #66 ================
{
  "id": "760bc9bc-0057-4088-b3f0-3ee37b3519df",
  "name": "Sticky Note",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    -300,
    -240
  ],
  "parameters": {
    "color": 5,
    "width": 560,
    "height": 120,
    "content": "### \ud83d\udc68\u200d\ud83c\udfa4 Setup\n1. Add your **postgresql** and **OpenAI** credentials.\n2. Click **Chat** button and start asking questions to your database.\n3. Activate the workflow and you can make the chat publicly available."
  },
  "typeVersion": 1
}

================ Node #67 ================
{
  "id": "0df33341-c859-4a54-b6d9-a99670e8d76d",
  "name": "Chat History",
  "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
  "position": [
    120,
    160
  ],
  "parameters": {},
  "typeVersion": 1.3
}

================ Node #68 ================
{
  "id": "4938b22e-f187-4ca0-b9f1-60835e823799",
  "name": "Sticky Note3",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    360,
    300
  ],
  "parameters": {
    "color": 7,
    "width": 562,
    "height": 156,
    "content": "\ud83d\udee0\ufe0f Tools Used:\n1. Execute SQL Query: Used to execute any query generated by the agent.\n2. Get DB Schema and Tables List: It returns the list of all the tables with its schema name.\n3. Get Table Definition: It returns table details like column names, foreign keys and more of a particular table in a schema."
  },
  "typeVersion": 1
}

================ Node #69 ================
{
  "id": "39780c78-4fbc-403e-a220-aa6a4b06df8c",
  "name": "Sticky Note1",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    -100,
    300
  ],
  "parameters": {
    "color": 7,
    "width": 162,
    "height": 99,
    "content": "\ud83d\udc46 You can exchange this with any other chat model of your choice."
  },
  "typeVersion": 1
}

================ Node #70 ================
{
  "id": "28a5692c-5003-46cb-9a09-b7867734f446",
  "name": "Sticky Note2",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    100,
    300
  ],
  "parameters": {
    "color": 7,
    "width": 162,
    "height": 159,
    "content": "\ud83d\udc46 You can change how many number of messages to keep using `Context Window Length` option. It's 5 by default."
  },
  "typeVersion": 1
}

================ Node #71 ================
{
  "id": "c18ced71-6330-4ba0-9c52-1bb5852b3039",
  "name": "Execute SQL Query",
  "type": "n8n-nodes-base.postgresTool",
  "position": [
    380,
    140
  ],
  "parameters": {
    "query": "{{ $fromAI(\"sql_query\", \"SQL Query\") }}",
    "options": {},
    "operation": "executeQuery",
    "descriptionType": "manual",
    "toolDescription": "Get all the data from Postgres, make sure you append the tables with correct schema. Every table is associated with some schema in the database."
  },
  "credentials": {
    "postgres": {
      "id": "nGI61D0TEEZz18rr",
      "name": "Your Postgresql Database Credentials"
    }
  },
  "typeVersion": 2.5
}

================ Node #72 ================
{
  "id": "557623c6-e499-48a6-a066-744f64f8b6f3",
  "name": "Get DB Schema and Tables List",
  "type": "n8n-nodes-base.postgresTool",
  "position": [
    580,
    140
  ],
  "parameters": {
    "query": "SELECT \n table_schema,\n table_name\nFROM information_schema.tables\nWHERE table_type = 'BASE TABLE'\n AND table_schema NOT IN ('pg_catalog', 'information_schema')\nORDER BY table_schema, table_name;",
    "options": {},
    "operation": "executeQuery",
    "descriptionType": "manual",
    "toolDescription": "Get list of all tables with their schema in the database"
  },
  "credentials": {
    "postgres": {
      "id": "nGI61D0TEEZz18rr",
      "name": "Your Postgresql Database Credentials"
    }
  },
  "typeVersion": 2.5
}

================ Node #73 ================
{
  "id": "14f93cdb-72cb-419a-b8d7-a68ae9383290",
  "name": "Google Drive Trigger",
  "type": "n8n-nodes-base.googleDriveTrigger",
  "position": [
    440,
    320
  ],
  "parameters": {
    "event": "fileCreated",
    "options": {},
    "pollTimes": {
      "item": [
        {
          "mode": "everyMinute"
        }
      ]
    },
    "triggerOn": "specificFolder",
    "folderToWatch": {
      "__rl": true,
      "mode": "list",
      "value": "18m0i341QLQuyWuHv_FBdz8-r-QDtofYm",
      "cachedResultUrl": "https://drive.google.com/drive/folders/18m0i341QLQuyWuHv_FBdz8-r-QDtofYm",
      "cachedResultName": "Influencersde"
    }
  },
  "credentials": {
    "googleDriveOAuth2Api": {
      "id": "2TbhWtnbRfSloGxX",
      "name": "Google Drive account"
    }
  },
  "typeVersion": 1
}

================ Node #74 ================
{
  "id": "d4ab0d11-b110-46fa-9cd2-6091737c302e",
  "name": "Google Drive",
  "type": "n8n-nodes-base.googleDrive",
  "position": [
    620,
    320
  ],
  "parameters": {
    "fileId": {
      "__rl": true,
      "mode": "",
      "value": "={{ $json.id || $json.data[0].id }}"
    },
    "options": {},
    "operation": "download",
    "authentication": "oAuth2"
  },
  "credentials": {
    "googleDriveOAuth2Api": {
      "id": "2TbhWtnbRfSloGxX",
      "name": "Google Drive account"
    }
  },
  "retryOnFail": true,
  "typeVersion": 1,
  "waitBetweenTries": 5000
}

================ Node #75 ================
{
  "id": "fde9df88-3f9e-4732-bb1c-72eb33ce6826",
  "name": "Error Trigger",
  "type": "n8n-nodes-base.errorTrigger",
  "position": [
    840,
    660
  ],
  "parameters": {},
  "typeVersion": 1
}

================ Node #76 ================
{
  "id": "ecfe1ad1-6887-492b-a2f7-f9b6c43f9b91",
  "name": "Telegram",
  "type": "n8n-nodes-base.telegram",
  "position": [
    1180,
    640
  ],
  "webhookId": "f6729386-9905-45f1-800f-4fe01a06ac9c",
  "parameters": {
    "text": "=\ud83d\udd14 ERROR SUBIENDO VIDEOS",
    "chatId": "-4127128831",
    "additionalFields": {
      "appendAttribution": false
    }
  },
  "credentials": {
    "telegramApi": {
      "id": "vzA62UXRgiFICuPP",
      "name": "Telegram account"
    }
  },
  "retryOnFail": true,
  "typeVersion": 1.2,
  "waitBetweenTries": 5000
}

================ Node #77 ================
{
  "id": "6ed274c7-726f-40aa-92b0-70768dc053a5",
  "name": "If",
  "type": "n8n-nodes-base.if",
  "position": [
    980,
    660
  ],
  "parameters": {
    "options": {},
    "conditions": {
      "options": {
        "version": 1,
        "leftValue": "",
        "caseSensitive": true,
        "typeValidation": "strict"
      },
      "combinator": "and",
      "conditions": [
        {
          "id": "9fadb3fd-2547-42bd-8f40-f410a97dcf57",
          "operator": {
            "type": "string",
            "operation": "notContains"
          },
          "leftValue": "={{ $json.trigger.error.message }}",
          "rightValue": "The DNS server returned an error, perhaps the server is offline"
        }
      ]
    }
  },
  "typeVersion": 2.1
}

================ Node #78 ================
{
  "id": "dd4b2dfa-ccba-45d8-b388-755888343b4c",
  "name": "Sticky Note",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    0,
    0
  ],
  "parameters": {
    "width": 860,
    "height": 260,
    "content": "## Description\nThis automation allows you to upload a video to a configured Google Drive folder, and it will automatically create descriptions and upload it to Instagram and TikTok.\n\n## How to Use\n1. Generate an API token at upload-post.com and add to Upload to Tiktok and Upload to Instagram nodes\n2. Configure your Google Drive folder\n3. Customize the OpenAI prompt for your specific use case\n4. Optional: Configure Telegram for error notifications\n\n## Requirements\n- upload-post.com account\n- Google Drive account\n- OpenAI API key\n"
  },
  "typeVersion": 1
}

================ Node #79 ================
{
  "id": "299e3e95-dbcb-4798-b843-a4424ce3f3bf",
  "name": "Get Audio from Video",
  "type": "@n8n/n8n-nodes-langchain.openAi",
  "notes": "Extract the audio from video for generate the description",
  "position": [
    1080,
    320
  ],
  "parameters": {
    "options": {},
    "resource": "audio",
    "operation": "transcribe"
  },
  "credentials": {
    "openAiApi": {
      "id": "XJdxgMSXFgwReSsh",
      "name": "n8n key"
    }
  },
  "notesInFlow": true,
  "retryOnFail": true,
  "typeVersion": 1,
  "waitBetweenTries": 5000
}

================ Node #80 ================
{
  "id": "da9048ce-542e-44e0-ba67-ab853822c428",
  "name": "Read video from Google Drive",
  "type": "n8n-nodes-base.writeBinaryFile",
  "position": [
    800,
    320
  ],
  "parameters": {
    "options": {},
    "fileName": "={{ $json.originalFilename.replaceAll(\" \", \"_\") }}"
  },
  "typeVersion": 1
}

================ Node #81 ================
{
  "id": "5977baf1-d4a2-439f-aafe-14745201d3d8",
  "name": "Generate Description for Videos in Tiktok and Instagram",
  "type": "@n8n/n8n-nodes-langchain.openAi",
  "notes": "Request to OpenAi for generate description with the audio extracted from the video",
  "position": [
    1280,
    320
  ],
  "parameters": {
    "modelId": {
      "__rl": true,
      "mode": "list",
      "value": "gpt-4o",
      "cachedResultName": "GPT-4O"
    },
    "options": {},
    "messages": {
      "values": [
        {
          "role": "system",
          "content": "You are an expert assistant in creating engaging social media video titles."
        },
        {
          "content": "=I'm going to upload a video to social media. Here are some examples of descriptions that have worked well on Instagram:\n\nFollow and save for later. Discover InfluencersDe, the AI tool that automates TikTok creation and publishing to drive traffic to your website. Perfect for entrepreneurs and brands.\n#digitalmarketing #ugc #tiktok #ai #influencersde #contentcreation\n\nDiscover the video marketing revolution with InfluencersDe!\n.\n.\n.\n#socialmedia #videomarketing #ai #tiktok #influencersde #growthhacking\n\nDon't miss InfluencersDe, the tool that transforms your marketing strategy with just one click!\n.\n.\n.\n#ugc #ai #tiktok #digitalmarketing #influencersde #branding\n\nCan you create another title for the Instagram post based on this recognized audio from the video?\n\nAudio: {{ $('Get Audio from Video').item.json.text }}\n\nIMPORTANT: Reply only with the description, don't add anything else."
        }
      ]
    }
  },
  "credentials": {
    "openAiApi": {
      "id": "XJdxgMSXFgwReSsh",
      "name": "n8n key"
    }
  },
  "notesInFlow": true,
  "retryOnFail": true,
  "typeVersion": 1.4,
  "waitBetweenTries": 5000
}

================ Node #82 ================
{
  "id": "a139c8b0-b934-492b-8f85-e42c9c345af4",
  "name": "Read Video from Google Drive",
  "type": "n8n-nodes-base.readBinaryFile",
  "position": [
    1840,
    100
  ],
  "parameters": {
    "filePath": "={{ $('Read video from Google Drive').item.json.originalFilename.replaceAll(\" \", \"_\") }}",
    "dataPropertyName": "datavideo"
  },
  "typeVersion": 1
}

================ Node #83 ================
{
  "id": "63230edb-8346-4441-929f-1f6403507501",
  "name": "Read Video from Google Drive2",
  "type": "n8n-nodes-base.readBinaryFile",
  "position": [
    1840,
    460
  ],
  "parameters": {
    "filePath": "={{ $('Read video from Google Drive').item.json.originalFilename.replaceAll(\" \", \"_\") }}",
    "dataPropertyName": "datavideo"
  },
  "typeVersion": 1
}

================ Node #84 ================
{
  "id": "5d6e26ef-1bb4-43d6-a282-151c95856905",
  "name": "Upload Video and Description to Tiktok",
  "type": "n8n-nodes-base.httpRequest",
  "notes": "Generate in upload-post.com the token and add to the credentials in the header-> Authorization: Apikey (token here)",
  "position": [
    2100,
    100
  ],
  "parameters": {
    "url": "https://api.upload-post.com/api/upload",
    "method": "POST",
    "options": {},
    "sendBody": true,
    "contentType": "multipart-form-data",
    "authentication": "genericCredentialType",
    "bodyParameters": {
      "parameters": [
        {
          "name": "title",
          "value": "={{ $('Generate Description for Videos in Tiktok and Instagram').item.json.message.content.replaceAll(\"\\\"\", \"\") }}"
        },
        {
          "name": "platform[]",
          "value": "tiktok"
        },
        {
          "name": "video",
          "parameterType": "formBinaryData",
          "inputDataFieldName": "datavideo"
        },
        {
          "name": "user",
          "value": "Add user generated in upload-post"
        }
      ]
    },
    "genericAuthType": "httpHeaderAuth"
  },
  "credentials": {
    "httpHeaderAuth": {
      "id": "47dO31ED0WIaJkR6",
      "name": "Header Auth account"
    }
  },
  "notesInFlow": true,
  "typeVersion": 4.2
}

================ Node #85 ================
{
  "id": "ed785663-50e4-43cc-9dc0-a340d0360b38",
  "name": "Upload Video and Description to Instagram",
  "type": "n8n-nodes-base.httpRequest",
  "notes": "Generate in upload-post.com the token and add to the credentials in the header-> Authorization: Apikey (token here)",
  "position": [
    2100,
    460
  ],
  "parameters": {
    "url": "https://api.upload-post.com/api/upload",
    "method": "POST",
    "options": {},
    "sendBody": true,
    "contentType": "multipart-form-data",
    "authentication": "genericCredentialType",
    "bodyParameters": {
      "parameters": [
        {
          "name": "title",
          "value": "={{ $('Generate Description for Videos in Tiktok and Instagram').item.json.message.content.replaceAll(\"\\\"\", \"\") }}"
        },
        {
          "name": "platform[]",
          "value": "instagram"
        },
        {
          "name": "video",
          "parameterType": "formBinaryData",
          "inputDataFieldName": "datavideo"
        },
        {
          "name": "user",
          "value": "Add user generated in upload-post"
        }
      ]
    },
    "genericAuthType": "httpHeaderAuth"
  },
  "credentials": {
    "httpHeaderAuth": {
      "id": "47dO31ED0WIaJkR6",
      "name": "Header Auth account"
    }
  },
  "notesInFlow": true,
  "typeVersion": 4.2
}

================ Node #86 ================
{
  "id": "b1092f93-502c-4af0-962e-2b69311b92a3",
  "name": "On form submission",
  "type": "n8n-nodes-base.formTrigger",
  "position": [
    -520,
    -200
  ],
  "webhookId": "2a87705d-8ba1-41f1-80ef-85f364ce253e",
  "parameters": {
    "options": {},
    "formTitle": "Send CV",
    "formFields": {
      "values": [
        {
          "fieldLabel": "Name",
          "placeholder": "Name",
          "requiredField": true
        },
        {
          "fieldType": "email",
          "fieldLabel": "Email",
          "placeholder": "Email",
          "requiredField": true
        },
        {
          "fieldType": "file",
          "fieldLabel": "CV",
          "requiredField": true,
          "acceptFileTypes": ".pdf"
        }
      ]
    }
  },
  "typeVersion": 2.2
}

================ Node #87 ================
{
  "id": "77edfe2a-4c6a-48c8-8dc9-b275491be090",
  "name": "Extract from File",
  "type": "n8n-nodes-base.extractFromFile",
  "position": [
    -160,
    -200
  ],
  "parameters": {
    "options": {},
    "operation": "pdf",
    "binaryPropertyName": "CV"
  },
  "typeVersion": 1
}

================ Node #88 ================
{
  "id": "ebf2e194-3515-4c0a-8745-790b63bf336f",
  "name": "Qualifications",
  "type": "@n8n/n8n-nodes-langchain.informationExtractor",
  "position": [
    160,
    -100
  ],
  "parameters": {
    "text": "={{ $json.text }}",
    "options": {
      "systemPromptTemplate": "You are an expert extraction algorithm.\nOnly extract relevant information from the text.\nIf you do not know the value of an attribute asked to extract, you may omit the attribute's value."
    },
    "attributes": {
      "attributes": [
        {
          "name": "Educational qualification",
          "required": true,
          "description": "Summary of your academic career. Focus on your high school and university studies. Summarize in 100 words maximum and also include your grade if applicable."
        },
        {
          "name": "Job History",
          "required": true,
          "description": "Work history summary. Focus on your most recent work experiences. Summarize in 100 words maximum"
        },
        {
          "name": "Skills",
          "required": true,
          "description": "Extract the candidate\u2019s technical skills. What software and frameworks they are proficient in. Make a bulleted list."
        }
      ]
    }
  },
  "typeVersion": 1
}

================ Node #89 ================
{
  "id": "4f40404c-1d47-4bde-9b4b-16367cf11e4f",
  "name": "Summarization Chain",
  "type": "@n8n/n8n-nodes-langchain.chainSummarization",
  "position": [
    900,
    -220
  ],
  "parameters": {
    "options": {
      "summarizationMethodAndPrompts": {
        "values": {
          "prompt": "=Write a concise summary of the following:\n\nCity: {{ $json.output.city }}\nBirthdate: {{ $json.output.birthdate }}\nEducational qualification: {{ $json.output[\"Educational qualification\"] }}\nJob History: {{ $json.output[\"Job History\"] }}\nSkills: {{ $json.output.Skills }}\n\nUse 100 words or less. Be concise and conversational.",
          "combineMapPrompt": "=Write a concise summary of the following:\n\nCity: {{ $json.output.city }}\nBirthdate: {{ $json.output.birthdate }}\nEducational qualification: {{ $json.output[\"Educational qualification\"] }}\nJob History: {{ $json.output[\"Job History\"] }}\nSkills: {{ $json.output.Skills }}\n\nUse 100 words or less. Be concise and conversational."
        }
      }
    }
  },
  "typeVersion": 2
}

================ Node #90 ================
{
  "id": "9f9c5f16-1dc2-4928-aef8-284daeb6be51",
  "name": "Merge",
  "type": "n8n-nodes-base.merge",
  "position": [
    660,
    -220
  ],
  "parameters": {
    "mode": "combine",
    "options": {},
    "combineBy": "combineAll"
  },
  "typeVersion": 3
}

================ Node #91 ================
{
  "id": "51bd14cc-2c54-4f72-b162-255f7e277aff",
  "name": "Profile Wanted",
  "type": "n8n-nodes-base.set",
  "position": [
    1300,
    -220
  ],
  "parameters": {
    "options": {},
    "assignments": {
      "assignments": [
        {
          "id": "a3d049b0-5a70-4e7b-a6f2-81447da5282a",
          "name": "profile_wanted",
          "type": "string",
          "value": "We are a web agency and we are looking for a full-stack web developer who knows how to use PHP, Python and Javascript. He has experience in the sector and lives in Northern Italy."
        }
      ]
    }
  },
  "typeVersion": 3.4
}

================ Node #92 ================
{
  "id": "4a120e5d-b849-4a29-b7f3-12c653552367",
  "name": "Google Sheets",
  "type": "n8n-nodes-base.googleSheets",
  "position": [
    1960,
    -220
  ],
  "parameters": {
    "columns": {
      "value": {
        "CITY": "={{ $('Merge').item.json.output.city }}",
        "DATA": "={{ $now.format('dd/LL/yyyy') }}",
        "NAME": "={{ $('On form submission').item.json.Nome }}",
        "VOTE": "={{ $json.output.vote }}",
        "EMAIL": "={{ $('On form submission').item.json.Email }}",
        "SKILLS": "={{ $('Merge').item.json.output.Skills }}",
        "TELEFONO": "={{ $('Merge').item.json.output.telephone }}",
        "SUMMARIZE": "={{ $('Summarization Chain').item.json.response.text }}",
        "EDUCATIONAL": "={{ $('Merge').item.json.output[\"Educational qualification\"] }}",
        "JOB HISTORY": "={{ $('Merge').item.json.output[\"Job History\"] }}",
        "DATA NASCITA": "={{ $('Merge').item.json.output.birthdate }}",
        "CONSIDERATION": "={{ $json.output.consideration }}"
      },
      "schema": [
        {
          "id": "DATA",
          "type": "string",
          "display": true,
          "required": false,
          "displayName": "DATA",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "NAME",
          "type": "string",
          "display": true,
          "required": false,
          "displayName": "NAME",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "PHONE",
          "type": "string",
          "display": true,
          "removed": false,
          "required": false,
          "displayName": "PHONE",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "CITY",
          "type": "string",
          "display": true,
          "required": false,
          "displayName": "CITY",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "EMAIL",
          "type": "string",
          "display": true,
          "required": false,
          "displayName": "EMAIL",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "DATA NASCITA",
          "type": "string",
          "display": true,
          "required": false,
          "displayName": "DATA NASCITA",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "EDUCATIONAL",
          "type": "string",
          "display": true,
          "required": false,
          "displayName": "EDUCATIONAL",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "JOB HISTORY",
          "type": "string",
          "display": true,
          "required": false,
          "displayName": "JOB HISTORY",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "SKILLS",
          "type": "string",
          "display": true,
          "required": false,
          "displayName": "SKILLS",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "SUMMARIZE",
          "type": "string",
          "display": true,
          "required": false,
          "displayName": "SUMMARIZE",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "VOTE",
          "type": "string",
          "display": true,
          "removed": false,
          "required": false,
          "displayName": "VOTE",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "CONSIDERATION",
          "type": "string",
          "display": true,
          "required": false,
          "displayName": "CONSIDERATION",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        }
      ],
      "mappingMode": "defineBelow",
      "matchingColumns": [],
      "attemptToConvertTypes": false,
      "convertFieldsToString": false
    },
    "options": {},
    "operation": "append",
    "sheetName": {
      "__rl": true,
      "mode": "list",
      "value": "gid=0",
      "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1ssz5RvN1Hr20Q31pnYnbjCLu1MGBvoLttBAjXunMRQE/edit#gid=0",
      "cachedResultName": "Foglio1"
    },
    "documentId": {
      "__rl": true,
      "mode": "list",
      "value": "1ssz5RvN1Hr20Q31pnYnbjCLu1MGBvoLttBAjXunMRQE",
      "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1ssz5RvN1Hr20Q31pnYnbjCLu1MGBvoLttBAjXunMRQE/edit?usp=drivesdk",
      "cachedResultName": "Ricerca WebDev"
    }
  },
  "credentials": {
    "googleSheetsOAuth2Api": {
      "id": "JYR6a64Qecd6t8Hb",
      "name": "Google Sheets account"
    }
  },
  "typeVersion": 4.5
}

================ Node #93 ================
{
  "id": "a154d8a5-9f85-45bb-b082-f702c13c3507",
  "name": "Structured Output Parser",
  "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
  "position": [
    1720,
    -20
  ],
  "parameters": {
    "schemaType": "manual",
    "inputSchema": "{\n\t\"type\": \"object\",\n\t\"properties\": {\n\t\t\"vote\": {\n\t\t\t\"type\": \"string\"\n\t\t},\n\t\t\"consideration\": {\n\t\t\t\"type\": \"string\"\n\t\t}\n\t}\n}"
  },
  "typeVersion": 1.2
}

================ Node #94 ================
{
  "id": "037ac851-7885-4b78-ac75-dfa0ebb6003d",
  "name": "HR Expert",
  "type": "@n8n/n8n-nodes-langchain.chainLlm",
  "position": [
    1560,
    -220
  ],
  "parameters": {
    "text": "=Profilo ricercato:\n{{ $json.profile_wanted }}\n\nCandidato:\n{{ $('Summarization Chain').item.json.response.text }}",
    "messages": {
      "messageValues": [
        {
          "message": "Sei un esperto HR e devi capire se il candidato \u00e8 in linea con il profilo ricercato dall'azienda.\n\nDevi dare un voto da 1 a 10 dove 1 significa che il candidato non \u00e8 in linea con quanto richiesto mentre 10 significa che \u00e8 il candidato ideale perch\u00e8 rispecchia in toto il profilo cercato.\n\nInoltre nel campo \"consideration\" motiva il perch\u00e8 hai dato quel voto. "
        }
      ]
    },
    "promptType": "define",
    "hasOutputParser": true
  },
  "typeVersion": 1.5
}

================ Node #95 ================
{
  "id": "ed5744c4-df06-4a01-a103-af4dd470d482",
  "name": "Personal Data",
  "type": "@n8n/n8n-nodes-langchain.informationExtractor",
  "position": [
    160,
    -280
  ],
  "parameters": {
    "text": "={{ $json.text }}",
    "options": {
      "systemPromptTemplate": "You are an expert extraction algorithm.\nOnly extract relevant information from the text.\nIf you do not know the value of an attribute asked to extract, you may omit the attribute's value."
    },
    "schemaType": "manual",
    "inputSchema": "{\n\t\"type\": \"object\",\n\t\"properties\": {\n\t\t\"telephone\": {\n\t\t\t\"type\": \"string\"\n\t\t},\n \"city\": {\n\t\t\t\"type\": \"string\"\n\t\t},\n \"birthdate\": {\n\t\t\t\"type\": \"string\"\n\t\t}\n\t}\n}"
  },
  "typeVersion": 1
}

================ Node #96 ================
{
  "id": "181c1249-b05c-4c35-8cac-5f9738cc1fe6",
  "name": "Upload CV",
  "type": "n8n-nodes-base.googleDrive",
  "position": [
    -160,
    -380
  ],
  "parameters": {
    "name": "=CV-{{ $now.format('yyyyLLdd') }}-{{ $json.CV[0].filename }}",
    "driveId": {
      "__rl": true,
      "mode": "list",
      "value": "My Drive"
    },
    "options": {},
    "folderId": {
      "__rl": true,
      "mode": "list",
      "value": "1tzeSpx4D3EAGXa3Wg-gqGbdaUk6LIZTV",
      "cachedResultUrl": "https://drive.google.com/drive/folders/1tzeSpx4D3EAGXa3Wg-gqGbdaUk6LIZTV",
      "cachedResultName": "CV"
    },
    "inputDataFieldName": "CV"
  },
  "credentials": {
    "googleDriveOAuth2Api": {
      "id": "HEy5EuZkgPZVEa9w",
      "name": "Google Drive account"
    }
  },
  "typeVersion": 3
}

================ Node #97 ================
{
  "id": "d31ee1c4-e4be-41d9-8f36-e6fb797ced8e",
  "name": "OpenAI",
  "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
  "position": [
    920,
    240
  ],
  "parameters": {
    "model": {
      "__rl": true,
      "mode": "list",
      "value": "gpt-4o-mini"
    },
    "options": {}
  },
  "credentials": {
    "openAiApi": {
      "id": "CDX6QM4gLYanh0P4",
      "name": "OpenAi account"
    }
  },
  "typeVersion": 1.2
}

================ Node #98 ================
{
  "id": "0290cb72-a581-4aff-8b5d-1aa63e0a630f",
  "name": "Sticky Note",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    -560,
    -680
  ],
  "parameters": {
    "color": 3,
    "width": 540,
    "content": "## HR Expert \nThis workflow automates the process of handling job applications by extracting relevant information from submitted CVs, analyzing the candidate's qualifications against a predefined profile, and storing the results in a Google Sheet"
  },
  "typeVersion": 1
}

================ Node #99 ================
{
  "id": "361084ff-9735-4a56-8988-be573391838b",
  "name": "Sticky Note1",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    -240,
    -460
  ],
  "parameters": {
    "width": 300,
    "height": 420,
    "content": "The CV is uploaded to Google Drive and converted so that it can be processed\n"
  },
  "typeVersion": 1
}

================ Node #100 ================
{
  "id": "4b6f004f-c77b-4522-99d4-737a68f6cfac",
  "name": "Sticky Note2",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    120,
    -380
  ],
  "parameters": {
    "width": 360,
    "height": 440,
    "content": "The essential information for evaluating the candidate is collected in two different chains"
  },
  "typeVersion": 1
}

================ Node #101 ================
{
  "id": "73e11af9-65e3-4fcd-bb99-8a3f212ce9fb",
  "name": "Sticky Note3",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    860,
    -300
  ],
  "parameters": {
    "width": 320,
    "height": 240,
    "content": "Summary of relevant information useful for classifying the candidate"
  },
  "typeVersion": 1
}

================ Node #102 ================
{
  "id": "606711d1-8e6d-44b3-91ac-c047d8a4054f",
  "name": "Sticky Note4",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    1240,
    -300
  ],
  "parameters": {
    "width": 220,
    "height": 240,
    "content": "Characteristics of the profile sought by the company that intends to hire the candidate"
  },
  "typeVersion": 1
}

================ Node #103 ================
{
  "id": "89c3210c-c599-41dc-97a3-bf8df2beb751",
  "name": "Sticky Note5",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    1500,
    -300
  ],
  "parameters": {
    "width": 360,
    "height": 240,
    "content": "Candidate evaluation with vote and considerations of the HR agent relating the profile sought with the candidate's skills"
  },
  "typeVersion": 1
}

================ Node #104 ================
{
  "id": "5898da57-38b0-4d29-af25-fe029cda7c4a",
  "name": "AI Agent",
  "type": "@n8n/n8n-nodes-langchain.agent",
  "position": [
    -180,
    800
  ],
  "parameters": {
    "text": "={{ $json.body.question }}",
    "options": {},
    "promptType": "define"
  },
  "typeVersion": 1.7
}

================ Node #105 ================
{
  "id": "81bbedb6-5a07-4977-a68f-2bdc75b17aba",
  "name": "Vector Store Tool",
  "type": "@n8n/n8n-nodes-langchain.toolVectorStore",
  "position": [
    20,
    1040
  ],
  "parameters": {
    "name": "company",
    "description": "Risponde alle domande relative a ci\u00f2 che ti viene chiesto"
  },
  "typeVersion": 1
}

================ Node #106 ================
{
  "id": "fd021f6c-248d-41f4-a4f9-651e70692327",
  "name": "Qdrant Vector Store",
  "type": "@n8n/n8n-nodes-langchain.vectorStoreQdrant",
  "position": [
    -140,
    1300
  ],
  "parameters": {
    "options": {},
    "qdrantCollection": {
      "__rl": true,
      "mode": "id",
      "value": "=COLLECTION"
    }
  },
  "credentials": {
    "qdrantApi": {
      "id": "iyQ6MQiVaF3VMBmt",
      "name": "QdrantApi account"
    }
  },
  "typeVersion": 1
}

================ Node #107 ================
{
  "id": "84aca7bb-4812-498f-b319-88831e4ca412",
  "name": "Embeddings OpenAI",
  "type": "@n8n/n8n-nodes-langchain.embeddingsOpenAi",
  "position": [
    -140,
    1460
  ],
  "parameters": {
    "options": {}
  },
  "credentials": {
    "openAiApi": {
      "id": "CDX6QM4gLYanh0P4",
      "name": "OpenAi account"
    }
  },
  "typeVersion": 1.1
}

================ Node #108 ================
{
  "id": "82e430db-2ad7-427d-bcf9-6aa226253d18",
  "name": "Sticky Note4",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    -760,
    520
  ],
  "parameters": {
    "color": 5,
    "width": 1400,
    "height": 240,
    "content": "# STEP 4\n\n## RAG System\n\nClick on \"test workflow\" on n8n and \"Test AI agent\" on ElevenLabs. If everything is configured correctly, when you ask a question to the agent, the webhook on n8n is activated with the \"question\" field in the body filled with the question asked to the voice agent.\n\nThe AI \u200b\u200bAgent will extract the information from the vector database, send it to the model to create the response which will be sent via the response webhook to ElevenLabs which will transform it into voice"
  },
  "typeVersion": 1
}

================ Node #109 ================
{
  "id": "6a19e9fa-50fa-4d51-ba41-d03c999e4649",
  "name": "Sticky Note",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    -780,
    -880
  ],
  "parameters": {
    "color": 3,
    "width": 1420,
    "height": 360,
    "content": "# STEP 1\n\n## Create an Agent on ElevenLabs \n- Create an agent on ElevenLabs (eg. test_n8n)\n- Add \"First message\" (eg. Hi, Can I help you?)\n- Add the \"System Prompt\" message... eg:\n'You are the waiter of \"Pizzeria da Michele\" in Verona. If you are asked a question, use the tool \"test_chatbot_elevenlabs\". When you receive the answer from \"test_chatbot_elevenlabs\" answer the user clearly and precisely.'\n- In Tools add a Webhook called eg. \"test_chatbot_elevenlabs\" and add the following description:\n'You are the waiter. Answer the questions asked and store them in the question field.'\n- Add the n8n webhook URL (method POST)\n- Enable \"Body Parameters\" and insert in the description \"Ask the user the question to ask the place.\", then in the \"Properties\" add a data type string called \"question\", value type \"LLM Prompt\" and description \"user question\""
  },
  "typeVersion": 1
}

================ Node #110 ================
{
  "id": "ec053ee7-3a4a-4697-a08c-5645810d23f0",
  "name": "When clicking \u2018Test workflow\u2019",
  "type": "n8n-nodes-base.manualTrigger",
  "position": [
    -740,
    -200
  ],
  "parameters": {},
  "typeVersion": 1
}

================ Node #111 ================
{
  "id": "3e71e40c-a5cc-40cf-a159-aeedc97c47d1",
  "name": "Create collection",
  "type": "n8n-nodes-base.httpRequest",
  "position": [
    -440,
    -340
  ],
  "parameters": {
    "url": "https://QDRANTURL/collections/COLLECTION",
    "method": "POST",
    "options": {},
    "jsonBody": "{\n \"filter\": {}\n}",
    "sendBody": true,
    "sendHeaders": true,
    "specifyBody": "json",
    "authentication": "genericCredentialType",
    "genericAuthType": "httpHeaderAuth",
    "headerParameters": {
      "parameters": [
        {
          "name": "Content-Type",
          "value": "application/json"
        }
      ]
    }
  },
  "credentials": {
    "httpHeaderAuth": {
      "id": "qhny6r5ql9wwotpn",
      "name": "Qdrant API (Hetzner)"
    }
  },
  "typeVersion": 4.2
}

================ Node #112 ================
{
  "id": "240283fc-50ec-475c-bd24-e6d0a367c10c",
  "name": "Refresh collection",
  "type": "n8n-nodes-base.httpRequest",
  "position": [
    -440,
    -80
  ],
  "parameters": {
    "url": "https://QDRANTURL/collections/COLLECTION/points/delete",
    "method": "POST",
    "options": {},
    "jsonBody": "{\n \"filter\": {}\n}",
    "sendBody": true,
    "sendHeaders": true,
    "specifyBody": "json",
    "authentication": "genericCredentialType",
    "genericAuthType": "httpHeaderAuth",
    "headerParameters": {
      "parameters": [
        {
          "name": "Content-Type",
          "value": "application/json"
        }
      ]
    }
  },
  "credentials": {
    "httpHeaderAuth": {
      "id": "qhny6r5ql9wwotpn",
      "name": "Qdrant API (Hetzner)"
    }
  },
  "typeVersion": 4.2
}

================ Node #113 ================
{
  "id": "7d10fda0-c6ab-4bf5-b73e-b93a84937eff",
  "name": "Get folder",
  "type": "n8n-nodes-base.googleDrive",
  "position": [
    -220,
    -80
  ],
  "parameters": {
    "filter": {
      "driveId": {
        "__rl": true,
        "mode": "list",
        "value": "My Drive",
        "cachedResultUrl": "https://drive.google.com/drive/my-drive",
        "cachedResultName": "My Drive"
      },
      "folderId": {
        "__rl": true,
        "mode": "id",
        "value": "=test-whatsapp"
      }
    },
    "options": {},
    "resource": "fileFolder"
  },
  "credentials": {
    "googleDriveOAuth2Api": {
      "id": "HEy5EuZkgPZVEa9w",
      "name": "Google Drive account"
    }
  },
  "typeVersion": 3
}

================ Node #114 ================
{
  "id": "c5761ad2-e66f-4d65-b653-0e89ea017f17",
  "name": "Download Files",
  "type": "n8n-nodes-base.googleDrive",
  "position": [
    0,
    -80
  ],
  "parameters": {
    "fileId": {
      "__rl": true,
      "mode": "id",
      "value": "={{ $json.id }}"
    },
    "options": {
      "googleFileConversion": {
        "conversion": {
          "docsToFormat": "text/plain"
        }
      }
    },
    "operation": "download"
  },
  "credentials": {
    "googleDriveOAuth2Api": {
      "id": "HEy5EuZkgPZVEa9w",
      "name": "Google Drive account"
    }
  },
  "typeVersion": 3
}

================ Node #115 ================
{
  "id": "1f031a11-8ef3-4392-a7db-9bca00840b8f",
  "name": "Default Data Loader",
  "type": "@n8n/n8n-nodes-langchain.documentDefaultDataLoader",
  "position": [
    380,
    120
  ],
  "parameters": {
    "options": {},
    "dataType": "binary"
  },
  "typeVersion": 1
}

================ Node #116 ================
{
  "id": "7f614392-7bc7-408c-8108-f289a81d5cf6",
  "name": "Token Splitter",
  "type": "@n8n/n8n-nodes-langchain.textSplitterTokenSplitter",
  "position": [
    360,
    280
  ],
  "parameters": {
    "chunkSize": 300,
    "chunkOverlap": 30
  },
  "typeVersion": 1
}

================ Node #117 ================
{
  "id": "648c5b3d-37a8-4a89-b88c-38e1863f09dc",
  "name": "Sticky Note3",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    -240,
    -400
  ],
  "parameters": {
    "color": 6,
    "width": 880,
    "height": 220,
    "content": "# STEP 2\n\n## Create Qdrant Collection\nChange:\n- QDRANTURL\n- COLLECTION"
  },
  "typeVersion": 1
}

================ Node #118 ================
{
  "id": "a6c50f3c-3c73-464e-9bdc-49de96401c1b",
  "name": "Qdrant Vector Store1",
  "type": "@n8n/n8n-nodes-langchain.vectorStoreQdrant",
  "position": [
    240,
    -80
  ],
  "parameters": {
    "mode": "insert",
    "options": {},
    "qdrantCollection": {
      "__rl": true,
      "mode": "id",
      "value": "=COLLECTION"
    }
  },
  "credentials": {
    "qdrantApi": {
      "id": "iyQ6MQiVaF3VMBmt",
      "name": "QdrantApi account"
    }
  },
  "typeVersion": 1
}

================ Node #119 ================
{
  "id": "7e19ac49-4d90-4258-bd44-7ca4ffa0128a",
  "name": "Embeddings OpenAI1",
  "type": "@n8n/n8n-nodes-langchain.embeddingsOpenAi",
  "position": [
    220,
    120
  ],
  "parameters": {
    "options": {}
  },
  "credentials": {
    "openAiApi": {
      "id": "CDX6QM4gLYanh0P4",
      "name": "OpenAi account"
    }
  },
  "typeVersion": 1.1
}

================ Node #120 ================
{
  "id": "bfa104a2-1f9c-4200-ae7b-4659894c1e6f",
  "name": "Sticky Note5",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    -460,
    -140
  ],
  "parameters": {
    "color": 4,
    "width": 620,
    "height": 400,
    "content": "# STEP 3\n\n\n\n\n\n\n\n\n\n\n\n\n## Documents vectorization with Qdrant and Google Drive\nChange:\n- QDRANTURL\n- COLLECTION"
  },
  "typeVersion": 1
}

================ Node #121 ================
{
  "id": "a148ffcf-335f-455d-8509-d98c711ed740",
  "name": "Respond to ElevenLabs",
  "type": "n8n-nodes-base.respondToWebhook",
  "position": [
    380,
    800
  ],
  "parameters": {
    "options": {}
  },
  "typeVersion": 1.1
}

================ Node #122 ================
{
  "id": "5d19f73a-b8e8-4e75-8f67-836180597572",
  "name": "OpenAI",
  "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
  "position": [
    -300,
    1040
  ],
  "parameters": {
    "options": {}
  },
  "credentials": {
    "openAiApi": {
      "id": "CDX6QM4gLYanh0P4",
      "name": "OpenAi account"
    }
  },
  "typeVersion": 1
}

================ Node #123 ================
{
  "id": "802b76e1-3f3e-490c-9e3b-65dc5b28d906",
  "name": "Listen",
  "type": "n8n-nodes-base.webhook",
  "position": [
    -700,
    800
  ],
  "webhookId": "e9f611eb-a8dd-4520-8d24-9f36deaca528",
  "parameters": {
    "path": "test_voice_message_elevenlabs",
    "options": {},
    "httpMethod": "POST",
    "responseMode": "responseNode"
  },
  "typeVersion": 2
}

================ Node #124 ================
{
  "id": "bdc55a38-1d4b-48fe-bbd8-29bf1afd954a",
  "name": "Window Buffer Memory",
  "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
  "position": [
    -140,
    1040
  ],
  "parameters": {},
  "typeVersion": 1.3
}

================ Node #125 ================
{
  "id": "2d5dd8cb-81eb-41bc-af53-b894e69e530c",
  "name": "OpenAI Chat Model",
  "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
  "position": [
    200,
    1320
  ],
  "parameters": {
    "options": {}
  },
  "credentials": {
    "openAiApi": {
      "id": "CDX6QM4gLYanh0P4",
      "name": "OpenAi account"
    }
  },
  "typeVersion": 1
}

================ Node #126 ================
{
  "id": "92d04432-1dbb-4d79-9edc-42378aee1c53",
  "name": "Sticky Note6",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    -760,
    1620
  ],
  "parameters": {
    "color": 7,
    "width": 1400,
    "height": 240,
    "content": "# STEP 5\n\n## Add Widget\n\nAdd the widget to your business website by replacing AGENT_ID with the agent id you created on ElevenLabs\n\n<elevenlabs-convai agent-id=\"AGENT_ID\"></elevenlabs-convai><script src=\"https://elevenlabs.io/convai-widget/index.js\" async type=\"text/javascript\"></script>"
  },
  "typeVersion": 1
}

================ Node #127 ================
{
  "id": "c4a6995f-7769-4b77-80ca-1e6bccef77c1",
  "name": "When clicking \u2018Test workflow\u2019",
  "type": "n8n-nodes-base.manualTrigger",
  "position": [
    -20,
    200
  ],
  "parameters": {},
  "typeVersion": 1
}

================ Node #128 ================
{
  "id": "c76b1458-5130-41e7-b2f2-1cfe22eab536",
  "name": "Get Ideas",
  "type": "n8n-nodes-base.googleSheets",
  "position": [
    200,
    200
  ],
  "parameters": {
    "options": {},
    "sheetName": {
      "__rl": true,
      "mode": "id",
      "value": "=Sheet1"
    },
    "documentId": {
      "__rl": true,
      "mode": "id",
      "value": "YOURDOCUMENT"
    }
  },
  "credentials": {
    "googleSheetsOAuth2Api": {
      "id": "JYR6a64Qecd6t8Hb",
      "name": "Google Sheets account"
    }
  },
  "typeVersion": 4.5
}

================ Node #129 ================
{
  "id": "8d17a640-3e15-42e9-9481-e3291d395ccd",
  "name": "Set your prompt",
  "type": "n8n-nodes-base.set",
  "position": [
    420,
    200
  ],
  "parameters": {
    "options": {},
    "assignments": {
      "assignments": [
        {
          "id": "3e8d2523-66aa-46fe-adcc-39dc78b9161e",
          "name": "prompt",
          "type": "string",
          "value": "={{ $json.PROMPT }}"
        }
      ]
    }
  },
  "typeVersion": 3.4
}

================ Node #130 ================
{
  "id": "4f0e9065-b331-49ed-acd9-77c7c43e89a5",
  "name": "Create post on Wordpress",
  "type": "n8n-nodes-base.wordpress",
  "position": [
    0,
    500
  ],
  "parameters": {
    "title": "={{ $json.message.content }}",
    "additionalFields": {
      "status": "draft",
      "content": "={{ $('Generate article with DeepSeek').item.json.message.content }}"
    }
  },
  "credentials": {
    "wordpressApi": {
      "id": "OE4AgquSkMWydRqn",
      "name": "Wordpress (wp.test.7hype.com)"
    }
  },
  "typeVersion": 1
}

================ Node #131 ================
{
  "id": "cb85d980-9d60-4c85-8574-b46e4cc14341",
  "name": "Upload image",
  "type": "n8n-nodes-base.httpRequest",
  "position": [
    420,
    500
  ],
  "parameters": {
    "url": "https://YOURSITE.com/wp-json/wp/v2/media",
    "method": "POST",
    "options": {},
    "sendBody": true,
    "contentType": "binaryData",
    "sendHeaders": true,
    "authentication": "predefinedCredentialType",
    "headerParameters": {
      "parameters": [
        {
          "name": "Content-Disposition",
          "value": "=attachment; filename=\"copertina-{{ $('Create post on Wordpress').item.json.id }}.jpg\""
        }
      ]
    },
    "inputDataFieldName": "data",
    "nodeCredentialType": "wordpressApi"
  },
  "credentials": {
    "wordpressApi": {
      "id": "OE4AgquSkMWydRqn",
      "name": "Wordpress (wp.test.7hype.com)"
    },
    "wooCommerceApi": {
      "id": "vYYrjB5kgHQ0XByZ",
      "name": "WooCommerce (wp.test.7hype.com)"
    }
  },
  "typeVersion": 4.2
}

================ Node #132 ================
{
  "id": "bc71ed8a-fe35-487a-b4cd-6b8c1b256763",
  "name": "Set Image",
  "type": "n8n-nodes-base.httpRequest",
  "position": [
    640,
    500
  ],
  "parameters": {
    "url": "=https://wp.test.7hype.com/wp-json/wp/v2/posts/{{ $('Create post on Wordpress').item.json.id }}",
    "method": "POST",
    "options": {},
    "sendQuery": true,
    "authentication": "predefinedCredentialType",
    "queryParameters": {
      "parameters": [
        {
          "name": "featured_media",
          "value": "={{ $json.id }}"
        }
      ]
    },
    "nodeCredentialType": "wordpressApi"
  },
  "credentials": {
    "wordpressApi": {
      "id": "OE4AgquSkMWydRqn",
      "name": "Wordpress (wp.test.7hype.com)"
    }
  },
  "typeVersion": 4.2
}

================ Node #133 ================
{
  "id": "fbed2813-cc64-42a2-994f-3696e9d8d8fe",
  "name": "Update Sheet",
  "type": "n8n-nodes-base.googleSheets",
  "position": [
    880,
    500
  ],
  "parameters": {
    "columns": {
      "value": {
        "DATA": "={{ $now.format('dd/LL/yyyy') }}",
        "TITOLO": "={{ $('Generate title with DeepSeek').item.json.message.content }}",
        "ID POST": "={{ $('Create post on Wordpress').item.json.id }}",
        "row_number": "={{ $('Get Ideas').item.json.row_number }}"
      },
      "schema": [
        {
          "id": "DATA",
          "type": "string",
          "display": true,
          "required": false,
          "displayName": "DATA",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "PROMPT",
          "type": "string",
          "display": true,
          "required": false,
          "displayName": "PROMPT",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "TITOLO",
          "type": "string",
          "display": true,
          "required": false,
          "displayName": "TITOLO",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "ID POST",
          "type": "string",
          "display": true,
          "required": false,
          "displayName": "ID POST",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "row_number",
          "type": "string",
          "display": true,
          "removed": false,
          "readOnly": true,
          "required": false,
          "displayName": "row_number",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        }
      ],
      "mappingMode": "defineBelow",
      "matchingColumns": [
        "row_number"
      ],
      "attemptToConvertTypes": false,
      "convertFieldsToString": false
    },
    "options": {},
    "operation": "update",
    "sheetName": {
      "__rl": true,
      "mode": "list",
      "value": "gid=0",
      "cachedResultUrl": "https://docs.google.com/spreadsheets/d/16VFeCrE5BkMBoA_S5HD-9v7C0sxcXAUiDbq5JvkDqnI/edit#gid=0",
      "cachedResultName": "Foglio1"
    },
    "documentId": {
      "__rl": true,
      "mode": "list",
      "value": "16VFeCrE5BkMBoA_S5HD-9v7C0sxcXAUiDbq5JvkDqnI",
      "cachedResultUrl": "https://docs.google.com/spreadsheets/d/16VFeCrE5BkMBoA_S5HD-9v7C0sxcXAUiDbq5JvkDqnI/edit?usp=drivesdk",
      "cachedResultName": "Plan Blog wp.test.7hype.com"
    }
  },
  "credentials": {
    "googleSheetsOAuth2Api": {
      "id": "JYR6a64Qecd6t8Hb",
      "name": "Google Sheets account"
    }
  },
  "typeVersion": 4.5
}

================ Node #134 ================
{
  "id": "8db2b0cb-6d61-4e2d-bfac-e25a0385296d",
  "name": "Sticky Note",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    -60,
    -360
  ],
  "parameters": {
    "color": 3,
    "width": 800,
    "height": 380,
    "content": "## Target\nThis workflow is designed to automatically generate seo-friendly content for wordpress through DeepSeek R1 by giving input ideas on how to structure the article. A cover image is also generated and uploaded with OpenAI DALL-E 3. This flow is designed to be executed automatically (ad \"On a schedule\" node) and thus have a complete editorial plan.\n\nThis process is useful for blog managers who want to automate content creation and publishing.\n\n## Preliminary step\nCreate a google sheet with the following columns:\n- Date\n- Prompt\n- Title\n- Post ID\n\nFill in only the \"Prompt\" column with basic ideas that DeepSeek will work on to generate the content."
  },
  "typeVersion": 1
}

================ Node #135 ================
{
  "id": "ab620659-558d-46f0-ab85-e061af99b743",
  "name": "Sticky Note1",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    140,
    100
  ],
  "parameters": {
    "height": 260,
    "content": "Connect with your Google Sheet. This node select only rows for which no content has been generated yet in WordPress"
  },
  "typeVersion": 1
}

================ Node #136 ================
{
  "id": "73b0e640-8ccf-4e29-a0cd-6340db907bbd",
  "name": "Generate article with DeepSeek",
  "type": "@n8n/n8n-nodes-langchain.openAi",
  "position": [
    640,
    200
  ],
  "parameters": {
    "modelId": {
      "__rl": true,
      "mode": "id",
      "value": "=deepseek-reasoner"
    },
    "options": {
      "maxTokens": 2048
    },
    "messages": {
      "values": [
        {
          "content": "=You are an SEO expert, write an article based on this topic:\n{{ $json.prompt }}\n\nInstructions:\n- In the introduction, introduce the topic that will be explored in the rest of the text\n- The introduction should be about 120 words\n- The conclusions should be about 120 words\n- Use the conclusions to summarize everything said in the article and offer a conclusion to the reader\n- Write a maximum of 4-5 chapters and argue them.\n- The chapters should follow a logical flow and not repeat the same concepts.\n- The chapters should be related to each other and not isolated blocks of text. The text should flow and follow a linear logic.\n- Do not start chapters with \"Chapter 1\", \"Chapter 2\", \"Chapter 3\" ... write only the chapter title\n- For the text, use HTML for formatting, but limit yourself to bold, italics, paragraphs and lists.\n- Don't put the output in ```html but only text\n- Don't use markdown for formatting.\n- Go deeper into the topic you're talking about, don't just throw superficial information there\n- In output I want only the HTML format"
        }
      ]
    }
  },
  "credentials": {
    "openAiApi": {
      "id": "97Cz4cqyiy1RdcQL",
      "name": "DeepSeek"
    }
  },
  "typeVersion": 1.8
}

================ Node #137 ================
{
  "id": "6ef4e0d1-6123-4f47-94fb-c06c785ddd92",
  "name": "Generate title with DeepSeek",
  "type": "@n8n/n8n-nodes-langchain.openAi",
  "position": [
    880,
    200
  ],
  "parameters": {
    "modelId": {
      "__rl": true,
      "mode": "id",
      "value": "=deepseek-reasoner"
    },
    "options": {
      "maxTokens": 2048
    },
    "messages": {
      "values": [
        {
          "content": "=You are an SEO Copywriter and you need to think of a title of maximum 60 characters for the following article:\n{{ $json.message.content }}\n\nInstructions:\n- Use keywords contained in the article\n- Do not use any HTML characters\n- Output only the string containing the title.\n- Do not use quotation marks. The only special characters allowed are \":\" and \",\""
        }
      ]
    }
  },
  "credentials": {
    "openAiApi": {
      "id": "97Cz4cqyiy1RdcQL",
      "name": "DeepSeek"
    }
  },
  "typeVersion": 1.8
}

================ Node #138 ================
{
  "id": "2ecc8514-c04e-4f8b-9ab3-560f2cf910b0",
  "name": "Sticky Note2",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    580,
    100
  ],
  "parameters": {
    "width": 420,
    "height": 260,
    "content": "Add your DeepSeek API credential. If you want you can change the model with \"deepseek-chat\""
  },
  "typeVersion": 1
}

================ Node #139 ================
{
  "id": "196f7799-a6ab-429b-afd3-bcbcbd65da3b",
  "name": "Sticky Note3",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    -20,
    420
  ],
  "parameters": {
    "width": 160,
    "height": 260,
    "content": "Add your WordPress API credential\n"
  },
  "typeVersion": 1
}

================ Node #140 ================
{
  "id": "93c2d359-531a-4cc9-8a18-870c2d6ec62c",
  "name": "Generate Image with DALL-E",
  "type": "@n8n/n8n-nodes-langchain.openAi",
  "position": [
    200,
    500
  ],
  "parameters": {
    "prompt": "=Generate a real photographic image used as a cover for a blog post:\n\nImage prompt:\n{{ $('Generate title with DeepSeek').item.json.message.content }}, photography, realistic, sigma 85mm f/1.4",
    "options": {
      "size": "1792x1024",
      "style": "natural",
      "quality": "hd"
    },
    "resource": "image"
  },
  "credentials": {
    "openAiApi": {
      "id": "CDX6QM4gLYanh0P4",
      "name": "OpenAi account"
    }
  },
  "typeVersion": 1.8
}

================ Node #141 ================
{
  "id": "eec14cd7-fb2b-4f7d-ad94-bcffc1249353",
  "name": "Sticky Note4",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    180,
    420
  ],
  "parameters": {
    "width": 160,
    "height": 260,
    "content": "Add your OpenAI API credential\n"
  },
  "typeVersion": 1
}

================ Node #142 ================
{
  "id": "4f15679b-bc8f-45b8-b3c4-8b43d7f9bb6f",
  "name": "Sticky Note5",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    380,
    420
  ],
  "parameters": {
    "width": 180,
    "height": 260,
    "content": "Upload the image on your WordPress via APIs\n"
  },
  "typeVersion": 1
}

================ Node #143 ================
{
  "id": "abe32434-671a-4ac3-a788-fcf5fd0e9435",
  "name": "Sticky Note6",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    600,
    420
  ],
  "parameters": {
    "width": 180,
    "height": 260,
    "content": "Set the uploaded image with the newly created article\n"
  },
  "typeVersion": 1
}

================ Node #144 ================
{
  "id": "7abbfa6e-4b17-4656-9b82-377b1bacf539",
  "name": "When clicking \u2018Test workflow\u2019",
  "type": "n8n-nodes-base.manualTrigger",
  "position": [
    0,
    0
  ],
  "parameters": {},
  "typeVersion": 1
}

================ Node #145 ================
{
  "id": "448ec137-bf64-46b4-bf15-c7a040faa306",
  "name": "Loop Over Items",
  "type": "n8n-nodes-base.splitInBatches",
  "position": [
    1100,
    0
  ],
  "parameters": {
    "options": {}
  },
  "typeVersion": 3
}

================ Node #146 ================
{
  "id": "f22557ee-7f37-40cd-9063-a9a759274663",
  "name": "OpenRouter Chat Model",
  "type": "@n8n/n8n-nodes-langchain.lmChatOpenRouter",
  "position": [
    20,
    440
  ],
  "parameters": {
    "options": {}
  },
  "credentials": {
    "openRouterApi": {
      "id": "ddH6iNlm09UxrXvu",
      "name": "Auto: OpenRouter"
    }
  },
  "typeVersion": 1
}

================ Node #147 ================
{
  "id": "57e8792e-25ae-43d5-b4e9-e87642365ee9",
  "name": "Pinecone Vector Store",
  "type": "@n8n/n8n-nodes-langchain.vectorStorePinecone",
  "position": [
    780,
    360
  ],
  "parameters": {
    "mode": "insert",
    "options": {},
    "pineconeIndex": {
      "__rl": true,
      "mode": "list",
      "value": "context-rag-test",
      "cachedResultName": "context-rag-test"
    }
  },
  "credentials": {
    "pineconeApi": {
      "id": "R3QGXSEIRTEAZttK",
      "name": "Auto: PineconeApi"
    }
  },
  "typeVersion": 1
}

================ Node #148 ================
{
  "id": "0a8c2426-0aaf-424a-b246-336a9034aba8",
  "name": "Embeddings Google Gemini",
  "type": "@n8n/n8n-nodes-langchain.embeddingsGoogleGemini",
  "position": [
    720,
    540
  ],
  "parameters": {
    "modelName": "models/text-embedding-004"
  },
  "credentials": {
    "googlePalmApi": {
      "id": "9idxGZRZ3BAKDoxq",
      "name": "Google Gemini(PaLM) Api account"
    }
  },
  "typeVersion": 1
}

================ Node #149 ================
{
  "id": "edc587bd-494d-43e8-b6d6-26adab7af3dc",
  "name": "Default Data Loader",
  "type": "@n8n/n8n-nodes-langchain.documentDefaultDataLoader",
  "position": [
    920,
    540
  ],
  "parameters": {
    "options": {}
  },
  "typeVersion": 1
}

================ Node #150 ================
{
  "id": "a82d4e0b-248e-426d-9ef3-f25e7078ceb3",
  "name": "Recursive Character Text Splitter",
  "type": "@n8n/n8n-nodes-langchain.textSplitterRecursiveCharacterTextSplitter",
  "position": [
    840,
    680
  ],
  "parameters": {
    "options": {},
    "chunkSize": 100000
  },
  "typeVersion": 1
}

================ Node #151 ================
{
  "id": "8571b92f-5587-454f-9700-ea04ca35311b",
  "name": "Get Document From Google Drive",
  "type": "n8n-nodes-base.googleDrive",
  "position": [
    220,
    0
  ],
  "parameters": {
    "fileId": {
      "__rl": true,
      "mode": "list",
      "value": "1gm0jxFTLuiWB5u4esEjzoCPImrVqu0AEMIKBIesTf9M",
      "cachedResultUrl": "https://docs.google.com/document/d/1gm0jxFTLuiWB5u4esEjzoCPImrVqu0AEMIKBIesTf9M/edit?usp=drivesdk",
      "cachedResultName": "Udit Rawat - Details"
    },
    "options": {
      "googleFileConversion": {
        "conversion": {
          "docsToFormat": "text/plain"
        }
      }
    },
    "operation": "download"
  },
  "credentials": {
    "googleDriveOAuth2Api": {
      "id": "SsiQguNA8w3Wwv4w",
      "name": "Auto: Google Drive"
    }
  },
  "typeVersion": 3
}

================ Node #152 ================
{
  "id": "2bed3d0f-3d65-4394-87f1-e73320a43a4a",
  "name": "Extract Text Data From Google Document",
  "type": "n8n-nodes-base.extractFromFile",
  "position": [
    440,
    0
  ],
  "parameters": {
    "options": {},
    "operation": "text"
  },
  "typeVersion": 1
}

================ Node #153 ================
{
  "id": "837fa691-6c66-434b-ba82-d1cad9aecdf7",
  "name": "Split Document Text Into Sections",
  "type": "n8n-nodes-base.code",
  "position": [
    660,
    0
  ],
  "parameters": {
    "jsCode": "let split_text = \"\u2014---------------------------\u2014-------------[SECTIONEND]\u2014---------------------------\u2014-------------\";\nfor (const item of $input.all()) {\n item.json.section = item.json.data.split(split_text);\n item.json.document = JSON.stringify(item.json.section)\n}\nreturn $input.all();"
  },
  "typeVersion": 2
}

================ Node #154 ================
{
  "id": "cc801e7e-e01b-421a-9211-08322ef8a0b2",
  "name": "Prepare Sections For Looping",
  "type": "n8n-nodes-base.splitOut",
  "position": [
    880,
    0
  ],
  "parameters": {
    "options": {},
    "fieldToSplitOut": "section"
  },
  "typeVersion": 1
}

================ Node #155 ================
{
  "id": "658cb8df-92e3-4b25-8f37-e5f959d913dc",
  "name": "Sticky Note",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    -40,
    -100
  ],
  "parameters": {
    "width": 1300,
    "height": 280,
    "content": "## Prepare Document. \nThis section is responsible for downloading the file from Google Drive, splitting the text into sections by detecting separators, and preparing them for looping."
  },
  "typeVersion": 1
}

================ Node #156 ================
{
  "id": "82ee9194-484a-46db-b75c-bec34201c7e2",
  "name": "Sticky Note1",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    -220,
    220
  ],
  "parameters": {
    "width": 780,
    "height": 360,
    "content": "## Prepare context\nIn this section, the \nagent node will prepare \ncontext for a section \n(chunk of text), which \nwill then be passed for \nconversion into a vectors \nalong with the section itself."
  },
  "typeVersion": 1
}

================ Node #157 ================
{
  "id": "2f6950df-ead1-479a-aa51-7768121a4eb2",
  "name": "AI Agent - Prepare Context",
  "type": "@n8n/n8n-nodes-langchain.agent",
  "position": [
    40,
    260
  ],
  "parameters": {
    "text": "=<document> \n{{ $('Split Document Text Into Sections').item.json.document }}\n</document> \nHere is the chunk we want to situate within the whole document \n<chunk> \n{{ $json.section }}\n</chunk> \nPlease give a short succinct context to situate this chunk within the overall document for the purposes of improving search retrieval of the chunk. Answer only with the succinct context and nothing else. ",
    "agent": "conversationalAgent",
    "options": {},
    "promptType": "define"
  },
  "typeVersion": 1.7
}

================ Node #158 ================
{
  "id": "34a465fc-a505-445a-9211-bcd830381354",
  "name": "Concatenate the context and section text",
  "type": "n8n-nodes-base.set",
  "position": [
    400,
    260
  ],
  "parameters": {
    "options": {},
    "assignments": {
      "assignments": [
        {
          "id": "e5fb0381-5d23-46e2-a0d1-438240b80a3e",
          "name": "=section_chunk",
          "type": "string",
          "value": "={{ $json.output }}. {{ $('Loop Over Items').item.json.section }}"
        }
      ]
    }
  },
  "typeVersion": 3.4
}

================ Node #159 ================
{
  "id": "4a7a788c-8e5b-453c-ae52-a4522048992d",
  "name": "Sticky Note2",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    640,
    220
  ],
  "parameters": {
    "width": 580,
    "height": 600,
    "content": "## Convert Text To Vectors\nIn this step, the Pinecone node converts the provided text into vectors using Google Gemini and stores them in the Pinecone vector database."
  },
  "typeVersion": 1
}

================ Node #160 ================
{
  "id": "45798b49-fc78-417c-a752-4dd1a8882cd7",
  "name": "Sticky Note3",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    -460,
    -120
  ],
  "parameters": {
    "width": 400,
    "height": 300,
    "content": "## Video Demo\n[![Video Thumbnail](https://img.youtube.com/vi/qBeWP65I4hg/maxresdefault.jpg)](https://www.youtube.com/watch?v=qBeWP65I4hg)"
  },
  "typeVersion": 1
}

================ Node #161 ================
{
  "id": "9d77e26f-de2b-4bd4-b0f0-9924a8f459a6",
  "name": "Email Trigger (IMAP)",
  "type": "n8n-nodes-base.emailReadImap",
  "position": [
    -2000,
    -180
  ],
  "parameters": {
    "options": {}
  },
  "credentials": {
    "imap": {
      "id": "k31W9oGddl9pMDy4",
      "name": "IMAP info@n3witalia.com"
    }
  },
  "typeVersion": 2
}

================ Node #162 ================
{
  "id": "cf2d020b-b125-4a20-8694-8ed0f7acf755",
  "name": "Markdown",
  "type": "n8n-nodes-base.markdown",
  "position": [
    -1740,
    -180
  ],
  "parameters": {
    "html": "={{ $json.textHtml }}",
    "options": {}
  },
  "typeVersion": 1
}

================ Node #163 ================
{
  "id": "41bfceff-0155-4643-be60-ee301e2d69e1",
  "name": "Send Email",
  "type": "n8n-nodes-base.emailSend",
  "position": [
    400,
    -320
  ],
  "webhookId": "a79ae1b4-648c-4cb4-b6cd-04ea3c1d9314",
  "parameters": {
    "html": "={{ $('Edit Fields').item.json.email }}",
    "options": {},
    "subject": "=Re: {{ $('Email Trigger (IMAP)').item.json.subject }}",
    "toEmail": "={{ $('Email Trigger (IMAP)').item.json.from }}",
    "fromEmail": "={{ $('Email Trigger (IMAP)').item.json.to }}"
  },
  "credentials": {
    "smtp": {
      "id": "hRjP3XbDiIQqvi7x",
      "name": "SMTP info@n3witalia.com"
    }
  },
  "typeVersion": 2.1
}

================ Node #164 ================
{
  "id": "2aff581a-8b64-405c-b62f-74bf189fd7b1",
  "name": "Qdrant Vector Store",
  "type": "@n8n/n8n-nodes-langchain.vectorStoreQdrant",
  "position": [
    -320,
    600
  ],
  "parameters": {
    "mode": "retrieve-as-tool",
    "options": {},
    "toolName": "company_knowladge_base",
    "toolDescription": "Extracts information regarding the request made.",
    "qdrantCollection": {
      "__rl": true,
      "mode": "id",
      "value": "=COLLECTION"
    },
    "includeDocumentMetadata": false
  },
  "credentials": {
    "qdrantApi": {
      "id": "iyQ6MQiVaF3VMBmt",
      "name": "QdrantApi account"
    }
  },
  "typeVersion": 1
}

================ Node #165 ================
{
  "id": "6e3f6df0-8924-47d9-855c-51205d19e86d",
  "name": "Embeddings OpenAI",
  "type": "@n8n/n8n-nodes-langchain.embeddingsOpenAi",
  "position": [
    -440,
    800
  ],
  "parameters": {
    "options": {}
  },
  "credentials": {
    "openAiApi": {
      "id": "CDX6QM4gLYanh0P4",
      "name": "OpenAi account"
    }
  },
  "typeVersion": 1.2
}

================ Node #166 ================
{
  "id": "37ac411b-4a74-44d1-917e-b07d1c9ca221",
  "name": "Email Summarization Chain",
  "type": "@n8n/n8n-nodes-langchain.chainSummarization",
  "position": [
    -1480,
    -180
  ],
  "parameters": {
    "options": {
      "binaryDataKey": "={{ $json.data }}",
      "summarizationMethodAndPrompts": {
        "values": {
          "prompt": "=Write a concise summary of the following in max 100 words:\n\n\"{{ $json.data }}\"\n\nDo not enter the total number of words used.",
          "combineMapPrompt": "=Write a concise summary of the following in max 100 words:\n\n\"{{ $json.data }}\"\n\nDo not enter the total number of words used."
        }
      }
    },
    "operationMode": "nodeInputBinary"
  },
  "typeVersion": 2
}

================ Node #167 ================
{
  "id": "91edbac9-847b-4f31-a8dd-09418bd93642",
  "name": "Write email",
  "type": "@n8n/n8n-nodes-langchain.agent",
  "position": [
    -1040,
    -180
  ],
  "parameters": {
    "text": "=Write the text to reply to the following email:\n\n{{ $json.response.text }}",
    "options": {
      "systemMessage": "You are an expert at answering emails. You need to answer them professionally based on the information you have. This is a business email. Be concise and never exceed 100 words. Only the body of the email, not create the subject"
    },
    "promptType": "define",
    "hasOutputParser": true
  },
  "typeVersion": 1.7
}

================ Node #168 ================
{
  "id": "1da0e72a-db97-4216-a1a5-038cebaf7e10",
  "name": "OpenAI",
  "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
  "position": [
    -180,
    280
  ],
  "parameters": {
    "model": {
      "__rl": true,
      "mode": "list",
      "value": "gpt-4o-mini",
      "cachedResultName": "gpt-4o-mini"
    },
    "options": {}
  },
  "credentials": {
    "openAiApi": {
      "id": "CDX6QM4gLYanh0P4",
      "name": "OpenAi account"
    }
  },
  "typeVersion": 1.2
}

================ Node #169 ================
{
  "id": "af2d6284-4c8f-4a07-b689-d0f55aaabd26",
  "name": "Gmail",
  "type": "n8n-nodes-base.gmail",
  "position": [
    -300,
    -180
  ],
  "webhookId": "d6dd2e7c-90ea-4b65-9c64-523d2541a054",
  "parameters": {
    "sendTo": "info@n3w.it",
    "message": "=<h3>MESSAGE</h3>\n{{ $('Email Trigger (IMAP)').item.json.textHtml }}\n\n<h3>AI RESPONSE</h3>\n{{ $json.email }}",
    "options": {},
    "subject": "=[Approval Required] {{ $('Email Trigger (IMAP)').item.json.subject }}",
    "operation": "sendAndWait",
    "responseType": "freeText"
  },
  "credentials": {
    "gmailOAuth2": {
      "id": "nyuHvSX5HuqfMPlW",
      "name": "Gmail account (n3w.it)"
    }
  },
  "typeVersion": 2.1
}

================ Node #170 ================
{
  "id": "aaccc4a6-ce53-4813-8247-65bd1a9d5639",
  "name": "Text Classifier",
  "type": "@n8n/n8n-nodes-langchain.textClassifier",
  "position": [
    -60,
    -180
  ],
  "parameters": {
    "options": {
      "systemPromptTemplate": "Please classify the text provided by the user into one of the following categories: {categories}, and use the provided formatting instructions below. Don't explain, and only output the json."
    },
    "inputText": "={{ $json.data.text }}",
    "categories": {
      "categories": [
        {
          "category": "Approved",
          "description": "The email has been reviewed and accepted as-is. The human explicitly or implicity express approva, indicating that no changes ar needed.\n\nExample:\n\"Ok\",\n\"Approvato\",\n\"Invia\""
        },
        {
          "category": "Declined",
          "description": "The email has been reviewd, but the human request modifications before it sent link tweaks, removing parts, rewording etc... This could include suggested edits, rewording or major revision."
        }
      ]
    }
  },
  "typeVersion": 1
}

================ Node #171 ================
{
  "id": "b46de5d9-1a2e-4d28-930b-e18fb1d7876e",
  "name": "Edit Fields",
  "type": "n8n-nodes-base.set",
  "position": [
    -580,
    -180
  ],
  "parameters": {
    "options": {},
    "assignments": {
      "assignments": [
        {
          "id": "35d7c303-42f4-4dd1-b41e-6eb087c23c3d",
          "name": "email",
          "type": "string",
          "value": "={{ $json.output }}"
        }
      ]
    }
  },
  "typeVersion": 3.4
}

================ Node #172 ================
{
  "id": "36ce51c6-8ee1-4230-84c0-40e259eafb1a",
  "name": "When clicking \u2018Test workflow\u2019",
  "type": "n8n-nodes-base.manualTrigger",
  "position": [
    -1340,
    -1300
  ],
  "parameters": {},
  "typeVersion": 1
}

================ Node #173 ================
{
  "id": "21a0c991-65dc-483e-9b98-5cedaba7ae13",
  "name": "Create collection",
  "type": "n8n-nodes-base.httpRequest",
  "position": [
    -1040,
    -1440
  ],
  "parameters": {
    "url": "https://QDRANTURL/collections/COLLECTION",
    "method": "POST",
    "options": {},
    "jsonBody": "{\n \"filter\": {}\n}",
    "sendBody": true,
    "sendHeaders": true,
    "specifyBody": "json",
    "authentication": "genericCredentialType",
    "genericAuthType": "httpHeaderAuth",
    "headerParameters": {
      "parameters": [
        {
          "name": "Content-Type",
          "value": "application/json"
        }
      ]
    }
  },
  "credentials": {
    "httpHeaderAuth": {
      "id": "qhny6r5ql9wwotpn",
      "name": "Qdrant API (Hetzner)"
    }
  },
  "typeVersion": 4.2
}

================ Node #174 ================
{
  "id": "9a048d7d-bcdf-40b7-b33a-94b811083eac",
  "name": "Refresh collection",
  "type": "n8n-nodes-base.httpRequest",
  "position": [
    -1040,
    -1180
  ],
  "parameters": {
    "url": "https://QDRANTURL/collections/COLLECTION/points/delete",
    "method": "POST",
    "options": {},
    "jsonBody": "{\n \"filter\": {}\n}",
    "sendBody": true,
    "sendHeaders": true,
    "specifyBody": "json",
    "authentication": "genericCredentialType",
    "genericAuthType": "httpHeaderAuth",
    "headerParameters": {
      "parameters": [
        {
          "name": "Content-Type",
          "value": "application/json"
        }
      ]
    }
  },
  "credentials": {
    "httpHeaderAuth": {
      "id": "qhny6r5ql9wwotpn",
      "name": "Qdrant API (Hetzner)"
    }
  },
  "typeVersion": 4.2
}

================ Node #175 ================
{
  "id": "db494d2d-5390-4f83-9b87-3409fef31a7d",
  "name": "Get folder",
  "type": "n8n-nodes-base.googleDrive",
  "position": [
    -820,
    -1180
  ],
  "parameters": {
    "filter": {
      "driveId": {
        "__rl": true,
        "mode": "list",
        "value": "My Drive",
        "cachedResultUrl": "https://drive.google.com/drive/my-drive",
        "cachedResultName": "My Drive"
      },
      "folderId": {
        "__rl": true,
        "mode": "id",
        "value": "=test-whatsapp"
      }
    },
    "options": {},
    "resource": "fileFolder"
  },
  "credentials": {
    "googleDriveOAuth2Api": {
      "id": "HEy5EuZkgPZVEa9w",
      "name": "Google Drive account"
    }
  },
  "typeVersion": 3
}

================ Node #176 ================
{
  "id": "e30dbe6f-482e-47f9-b5b8-62c1113e6c8b",
  "name": "Download Files",
  "type": "n8n-nodes-base.googleDrive",
  "position": [
    -600,
    -1180
  ],
  "parameters": {
    "fileId": {
      "__rl": true,
      "mode": "id",
      "value": "={{ $json.id }}"
    },
    "options": {
      "googleFileConversion": {
        "conversion": {
          "docsToFormat": "text/plain"
        }
      }
    },
    "operation": "download"
  },
  "credentials": {
    "googleDriveOAuth2Api": {
      "id": "HEy5EuZkgPZVEa9w",
      "name": "Google Drive account"
    }
  },
  "typeVersion": 3
}

================ Node #177 ================
{
  "id": "492d48d8-4997-4f04-902b-041da3210417",
  "name": "Default Data Loader",
  "type": "@n8n/n8n-nodes-langchain.documentDefaultDataLoader",
  "position": [
    -200,
    -980
  ],
  "parameters": {
    "options": {},
    "dataType": "binary"
  },
  "typeVersion": 1
}

================ Node #178 ================
{
  "id": "0cf45d10-3cbf-4eb6-ab30-11f264b3aa8d",
  "name": "Token Splitter",
  "type": "@n8n/n8n-nodes-langchain.textSplitterTokenSplitter",
  "position": [
    -240,
    -820
  ],
  "parameters": {
    "chunkSize": 300,
    "chunkOverlap": 30
  },
  "typeVersion": 1
}

================ Node #179 ================
{
  "id": "7d60f569-c34e-49a8-ba9a-88cf33083136",
  "name": "Sticky Note3",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    -840,
    -1500
  ],
  "parameters": {
    "color": 6,
    "width": 880,
    "height": 220,
    "content": "# STEP 1\n\n## Create Qdrant Collection\nChange:\n- QDRANTURL\n- COLLECTION"
  },
  "typeVersion": 1
}

================ Node #180 ================
{
  "id": "e86b18c4-d7e8-4e81-b520-dbd8125edf38",
  "name": "Sticky Note4",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    -1060,
    -1240
  ],
  "parameters": {
    "color": 4,
    "width": 620,
    "height": 400,
    "content": "# STEP 2\n\n\n\n\n\n\n\n\n\n\n\n\n## Documents vectorization with Qdrant and Google Drive\nChange:\n- QDRANTURL\n- COLLECTION"
  },
  "typeVersion": 1
}

================ Node #181 ================
{
  "id": "05f65120-ef31-4c67-ac18-e68a8353909c",
  "name": "Qdrant Vector Store1",
  "type": "@n8n/n8n-nodes-langchain.vectorStoreQdrant",
  "position": [
    -360,
    -1180
  ],
  "parameters": {
    "mode": "insert",
    "options": {},
    "qdrantCollection": {
      "__rl": true,
      "mode": "id",
      "value": "=COLLECTION"
    }
  },
  "credentials": {
    "qdrantApi": {
      "id": "iyQ6MQiVaF3VMBmt",
      "name": "QdrantApi account"
    }
  },
  "typeVersion": 1
}

================ Node #182 ================
{
  "id": "c15fd52f-b142-408e-af06-aeed10a1cf85",
  "name": "Embeddings OpenAI1",
  "type": "@n8n/n8n-nodes-langchain.embeddingsOpenAi",
  "position": [
    -380,
    -980
  ],
  "parameters": {
    "options": {}
  },
  "credentials": {
    "openAiApi": {
      "id": "CDX6QM4gLYanh0P4",
      "name": "OpenAi account"
    }
  },
  "typeVersion": 1.1
}

================ Node #183 ================
{
  "id": "3e47224f-3deb-450b-b825-f16c5f860f28",
  "name": "Sticky Note",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    -2020,
    -600
  ],
  "parameters": {
    "color": 3,
    "width": 580,
    "height": 260,
    "content": "# STEP 3 - MAIN FLOW\n\n\n## How it works\nThis workflow automates the handling of incoming emails, summarizes their content, generates appropriate responses using a retrieval-augmented generation (RAG) approach, and obtains approval or suggestions before sending replies. \n\nYou can quickly integrate Gmail and Outlook via the appropriate trigger nodes"
  },
  "typeVersion": 1
}

================ Node #184 ================
{
  "id": "63097039-58cb-4e0f-9fb6-6bf868275519",
  "name": "DeepSeek Chat Model",
  "type": "@n8n/n8n-nodes-langchain.lmChatDeepSeek",
  "position": [
    -1560,
    40
  ],
  "parameters": {
    "options": {}
  },
  "credentials": {
    "deepSeekApi": {
      "id": "sxh1rfZxonXV83hS",
      "name": "DeepSeek account"
    }
  },
  "typeVersion": 1
}

================ Node #185 ================
{
  "id": "c86d6eeb-cf08-429f-b5b4-60b317071035",
  "name": "Sticky Note2",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    -1500,
    -260
  ],
  "parameters": {
    "width": 320,
    "height": 240,
    "content": "Chain that summarizes the received email"
  },
  "typeVersion": 1
}

================ Node #186 ================
{
  "id": "4afc8b00-d1e5-473c-a71e-1299c84c546e",
  "name": "Sticky Note5",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    -1060,
    -260
  ],
  "parameters": {
    "width": 340,
    "height": 240,
    "content": "Agent that retrieves business information from a vector database and processes the response"
  },
  "typeVersion": 1
}

================ Node #187 ================
{
  "id": "be1762ff-729b-4b83-9139-16f835b748f2",
  "name": "Sticky Note1",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    -1800,
    -260
  ],
  "parameters": {
    "height": 240,
    "content": "Convert email to Markdown format for better understanding of LLM models"
  },
  "typeVersion": 1
}

================ Node #188 ================
{
  "id": "f818ede7-895a-4860-91d3-f08cc32ec0e3",
  "name": "Sticky Note6",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    -380,
    -380
  ],
  "parameters": {
    "color": 4,
    "height": 360,
    "content": "## IMPORTANT\n\nFor the \"Send Draft\" node, you need to send the draft email to a Gmail address because it is the only one that allows the \"Send and wait for response\" function."
  },
  "typeVersion": 1
}

================ Node #189 ================
{
  "id": "929b525a-912b-4f7b-a6e7-dfeb88a446c8",
  "name": "Sticky Note7",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    -100,
    -260
  ],
  "parameters": {
    "width": 360,
    "height": 240,
    "content": "Based on the suggestion received, the text classifier can understand whether the feedback received approves the generated email or not."
  },
  "typeVersion": 1
}

================ Node #190 ================
{
  "id": "2468e643-013f-4925-ab35-c8ef4ee6eed2",
  "name": "Email Reviewer",
  "type": "@n8n/n8n-nodes-langchain.agent",
  "position": [
    380,
    -40
  ],
  "parameters": {
    "text": "=Review at the following email:\n{{ $('Edit Fields').item.json.email }}\n\nFeedback from human:\n{{ $json.data.text }}",
    "options": {
      "systemMessage": "If you are an expert in reviewing emails before sending them. You need to review and structure them in such a way that you can send them. It must be in HTML format and you can insert (if you think it is appropriate) only HTML characters such as <br>, <b>, <i>, <p> where necessary. Be concise and never exceed 100 words. Only the body of the email"
    },
    "promptType": "define",
    "hasOutputParser": true
  },
  "typeVersion": 1.7
}

================ Node #191 ================
{
  "id": "ecd9d3f8-2e79-4e5f-a73d-48de60441376",
  "name": "Sticky Note8",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    340,
    -120
  ],
  "parameters": {
    "width": 340,
    "height": 220,
    "content": "The Email Reviewer agent, taking inspiration from human feedback, rewrites the email"
  },
  "typeVersion": 1
}

================ Node #192 ================
{
  "id": "8c49be2b-6320-4eb0-8303-6448ced34636",
  "name": "If media status is finished",
  "type": "n8n-nodes-base.if",
  "position": [
    1420,
    260
  ],
  "parameters": {
    "options": {},
    "conditions": {
      "options": {
        "version": 2,
        "leftValue": "",
        "caseSensitive": true,
        "typeValidation": "strict"
      },
      "combinator": "and",
      "conditions": [
        {
          "id": "0304efee-33b2-499e-bad1-9238c1fc2999",
          "operator": {
            "name": "filter.operator.equals",
            "type": "string",
            "operation": "equals"
          },
          "leftValue": "={{ $json.status_code }}",
          "rightValue": "FINISHED"
        }
      ]
    }
  },
  "typeVersion": 2.2
}

================ Node #193 ================
{
  "id": "f0cc0be5-6d35-4334-a124-139fa8676d07",
  "name": "If media status is finished1",
  "type": "n8n-nodes-base.if",
  "position": [
    2000,
    260
  ],
  "parameters": {
    "options": {},
    "conditions": {
      "options": {
        "version": 2,
        "leftValue": "",
        "caseSensitive": true,
        "typeValidation": "strict"
      },
      "combinator": "and",
      "conditions": [
        {
          "id": "0304efee-33b2-499e-bad1-9238c1fc2999",
          "operator": {
            "name": "filter.operator.equals",
            "type": "string",
            "operation": "equals"
          },
          "leftValue": "={{ $json.status_code }}",
          "rightValue": "PUBLISHED"
        }
      ]
    }
  },
  "typeVersion": 2.2
}

================ Node #194 ================
{
  "id": "c8d8d8cd-8501-4d1b-ac28-8cb3fa74d9d7",
  "name": "Telegram",
  "type": "n8n-nodes-base.telegram",
  "position": [
    1580,
    440
  ],
  "parameters": {
    "text": "Video upload edilmeden \u00f6nce bir problem oldu",
    "chatId": "={{ $('Telegram Params').item.json.telegram_chat_id }}",
    "additionalFields": {}
  },
  "credentials": {
    "telegramApi": {
      "id": "GcIVVl98RcazYBaB",
      "name": "Telegram account"
    }
  },
  "typeVersion": 1.2
}

================ Node #195 ================
{
  "id": "ae91a5e0-4f70-4a1c-afa5-41f5449facab",
  "name": "Telegram1",
  "type": "n8n-nodes-base.telegram",
  "position": [
    2160,
    100
  ],
  "parameters": {
    "text": "Instagram Content is shared",
    "chatId": "={{ $('Telegram Params').item.json.telegram_chat_id }}",
    "additionalFields": {}
  },
  "credentials": {
    "telegramApi": {
      "id": "GcIVVl98RcazYBaB",
      "name": "Telegram account"
    }
  },
  "typeVersion": 1.2
}

================ Node #196 ================
{
  "id": "b8b38440-14a7-43f6-ac49-6ca9502ff54d",
  "name": "Telegram2",
  "type": "n8n-nodes-base.telegram",
  "position": [
    2160,
    440
  ],
  "parameters": {
    "text": "There was a problem when execution a upload content to instagram",
    "chatId": "={{ $('Telegram Params').item.json.telegram_chat_id }}",
    "additionalFields": {}
  },
  "credentials": {
    "telegramApi": {
      "id": "GcIVVl98RcazYBaB",
      "name": "Telegram account"
    }
  },
  "typeVersion": 1.2
}

================ Node #197 ================
{
  "id": "82e0e5d0-bf50-4b2e-8693-2612dffe53e2",
  "name": "Loop Over Items",
  "type": "n8n-nodes-base.splitInBatches",
  "position": [
    -1000,
    220
  ],
  "parameters": {
    "options": {}
  },
  "typeVersion": 3
}

================ Node #198 ================
{
  "id": "fb72beb1-1a6a-4148-9ee4-cdc564c4dc5c",
  "name": "Schedule Trigger1",
  "type": "n8n-nodes-base.scheduleTrigger",
  "position": [
    -3080,
    300
  ],
  "parameters": {
    "rule": {
      "interval": [
        {
          "field": "cronExpression",
          "expression": "5 13,19 * * *"
        }
      ]
    }
  },
  "typeVersion": 1.2
}

================ Node #199 ================
{
  "id": "470f3406-19d2-420c-8f33-7031237d882c",
  "name": "Telegram Params",
  "type": "n8n-nodes-base.set",
  "position": [
    -2320,
    300
  ],
  "parameters": {
    "options": {},
    "assignments": {
      "assignments": [
        {
          "id": "d18cdca7-d301-4c70-a4d0-8d6e7ecfc2d1",
          "name": "telegram_chat_id",
          "type": "string",
          "value": ""
        }
      ]
    }
  },
  "typeVersion": 3.4
}

================ Node #200 ================
{
  "id": "12971505-7061-4d32-8921-d2e731eae9db",
  "name": "Instagram params",
  "type": "n8n-nodes-base.set",
  "position": [
    -2560,
    300
  ],
  "parameters": {
    "options": {},
    "assignments": {
      "assignments": [
        {
          "id": "1e380c14-e908-4eeb-90e0-957a422829d0",
          "name": "instagram_business_account_id",
          "type": "string",
          "value": ""
        }
      ]
    }
  },
  "typeVersion": 3.4
}

================ Node #201 ================
{
  "id": "3cb5f27d-eb3b-4fdc-bb55-1b54f85298e5",
  "name": "Sticky Note2",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    -2860,
    20
  ],
  "parameters": {
    "color": 4,
    "width": 1000,
    "height": 600,
    "content": "## All Credentials You Need\n** Instagram Business Account Id\n** Telegram Chat Id\n** Rapid Api Key\n** Replicate Token"
  },
  "typeVersion": 1
}

================ Node #202 ================
{
  "id": "2bc617b8-835c-48ba-8de6-341a6c87b853",
  "name": "Rapid Api params",
  "type": "n8n-nodes-base.set",
  "notes": "test",
  "position": [
    -2080,
    300
  ],
  "parameters": {
    "options": {},
    "assignments": {
      "assignments": [
        {
          "id": "48a33ec7-2b4f-496a-ad77-e4d5f1907ee4",
          "name": "x-rapid-api-key",
          "type": "string",
          "value": ""
        }
      ]
    }
  },
  "notesInFlow": false,
  "typeVersion": 3.4
}

================ Node #203 ================
{
  "id": "23bad41e-40ac-4488-8b2f-0d54d22a927a",
  "name": "filter the image content",
  "type": "n8n-nodes-base.code",
  "position": [
    -1480,
    380
  ],
  "parameters": {
    "jsCode": "const filteredData = $input.first().json.data.items.filter(item=> !item.is_video)\nreturn filteredData.map((item)=>{\n return {\n id: item.id,\n prompt: item.caption.text,\n content_code: item.code,\n thumbnail_url: item.thumbnail_url,\n tag: $input.first().json.data.additional_data.name\n }\n}) \n\n"
  },
  "typeVersion": 2
}

================ Node #204 ================
{
  "id": "a65690cd-4d30-4541-b80d-aae872326a77",
  "name": "get top trends on instagram #blender3d",
  "type": "n8n-nodes-base.httpRequest",
  "position": [
    -1720,
    180
  ],
  "parameters": {
    "url": "https://instagram-scraper-api2.p.rapidapi.com/v1/hashtag",
    "options": {},
    "sendQuery": true,
    "sendHeaders": true,
    "queryParameters": {
      "parameters": [
        {
          "name": "hashtag",
          "value": "blender3d"
        },
        {
          "name": "feed_type",
          "value": "top"
        }
      ]
    },
    "headerParameters": {
      "parameters": [
        {
          "name": "x-rapidapi-host",
          "value": "instagram-scraper-api2.p.rapidapi.com"
        },
        {
          "name": "x-rapidapi-key",
          "value": "={{ $json['x-rapid-api-key'] }}"
        }
      ]
    }
  },
  "typeVersion": 4.2
}

================ Node #205 ================
{
  "id": "8707c475-7e28-4d80-92b8-ba24033c4632",
  "name": "get top trends on instagram #isometric",
  "type": "n8n-nodes-base.httpRequest",
  "position": [
    -1720,
    380
  ],
  "parameters": {
    "url": "https://instagram-scraper-api2.p.rapidapi.com/v1/hashtag",
    "options": {},
    "sendQuery": true,
    "sendHeaders": true,
    "queryParameters": {
      "parameters": [
        {
          "name": "hashtag",
          "value": "isometric"
        },
        {
          "name": "feed_type",
          "value": "top"
        }
      ]
    },
    "headerParameters": {
      "parameters": [
        {
          "name": "x-rapidapi-host",
          "value": "instagram-scraper-api2.p.rapidapi.com"
        },
        {
          "name": "x-rapidapi-key",
          "value": "={{ $json['x-rapid-api-key'] }}"
        }
      ]
    }
  },
  "typeVersion": 4.2
}

================ Node #206 ================
{
  "id": "1c1bfd8f-b086-4147-ba08-578877f2a315",
  "name": "merge the array content",
  "type": "n8n-nodes-base.merge",
  "position": [
    -1280,
    280
  ],
  "parameters": {},
  "typeVersion": 3
}

================ Node #207 ================
{
  "id": "dcc2b6b6-9880-4676-8a1a-a3c21e583bba",
  "name": "Sticky Note3",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    -3180,
    20
  ],
  "parameters": {
    "color": 3,
    "width": 280,
    "height": 600,
    "content": "## Schedule Your Time To Post\n"
  },
  "typeVersion": 1
}

================ Node #208 ================
{
  "id": "c1e0ac33-c4b7-47d8-bd2b-0b74b02afe38",
  "name": "Sticky Note4",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    -2600,
    160
  ],
  "parameters": {
    "color": 5,
    "width": 180,
    "height": 300,
    "content": "## Guide \n** [Guide](https://docs.matillion.com/metl/docs/6957316//) of getting of Instagram Business Account Id "
  },
  "typeVersion": 1
}

================ Node #209 ================
{
  "id": "321680da-ca7a-4c6f-98d4-a0d8f8d0347f",
  "name": "Sticky Note5",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    -2360,
    160
  ],
  "parameters": {
    "color": 5,
    "width": 180,
    "height": 300,
    "content": "## Guide \n** [Guide](https://rapidapi.com/i-yqerddkq0t/api/telegram92/tutorials/how-to-get-the-id-of-a-telegram-channel,-chat,-user-or-bot%3F) of Getting of Telegram Chat Id "
  },
  "typeVersion": 1
}

================ Node #210 ================
{
  "id": "b3d07cf7-8d03-4644-88f7-2e94de0c43c2",
  "name": "Sticky Note6",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    -2120,
    160
  ],
  "parameters": {
    "color": 5,
    "width": 180,
    "height": 300,
    "content": "## Guide \n** [Guide](https://docs.rapidapi.com/docs/keys-and-key-rotation) of Getting of Rapid Api Key "
  },
  "typeVersion": 1
}

================ Node #211 ================
{
  "id": "b6dbdfaa-fc71-4def-a723-bf6c0facd372",
  "name": "Sticky Note7",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    -2360,
    480
  ],
  "parameters": {
    "color": 7,
    "width": 180,
    "height": 120,
    "content": "## Warning\n**Don't forgot the create bot and send a message to bot first"
  },
  "typeVersion": 1
}

================ Node #212 ================
{
  "id": "81d598e2-8993-4315-9894-2e78dc26ad10",
  "name": "Sticky Note8",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    -1820,
    20
  ],
  "parameters": {
    "width": 660,
    "height": 600,
    "content": "## Getting Top Trend Posts On Instagram\n** Change the topic you want to get on http request"
  },
  "typeVersion": 1
}

================ Node #213 ================
{
  "id": "6beb79ef-8205-4882-9bb0-6a2e1a33f1d4",
  "name": "Check Data on Database Is Exist",
  "type": "n8n-nodes-base.postgres",
  "onError": "continueErrorOutput",
  "position": [
    -760,
    220
  ],
  "parameters": {
    "table": {
      "__rl": true,
      "mode": "list",
      "value": "top_trends",
      "cachedResultName": "top_trends"
    },
    "where": {
      "values": [
        {
          "value": "={{$json.content_code}}",
          "column": "code"
        }
      ]
    },
    "schema": {
      "__rl": true,
      "mode": "list",
      "value": "public",
      "cachedResultName": "public"
    },
    "options": {},
    "operation": "select"
  },
  "credentials": {
    "postgres": {
      "id": "sBHQ2psBsfnHkFrZ",
      "name": "Postgres account"
    }
  },
  "typeVersion": 2.5,
  "alwaysOutputData": true
}

================ Node #214 ================
{
  "id": "5b0c05a8-3eb7-4ad8-88e8-ceef81fe7a61",
  "name": "If Data is Exist",
  "type": "n8n-nodes-base.if",
  "position": [
    -540,
    240
  ],
  "parameters": {
    "options": {},
    "conditions": {
      "options": {
        "version": 2,
        "leftValue": "",
        "caseSensitive": true,
        "typeValidation": "loose"
      },
      "combinator": "and",
      "conditions": [
        {
          "id": "9dc20983-ae4d-40db-b969-7d43fa8b0c3e",
          "operator": {
            "type": "boolean",
            "operation": "true",
            "singleValue": true
          },
          "leftValue": "={{ !$json.isEmpty() }}",
          "rightValue": "we"
        },
        {
          "id": "0e1b9264-be56-4d0c-a83e-d9ca0b05b265",
          "operator": {
            "name": "filter.operator.equals",
            "type": "string",
            "operation": "equals"
          },
          "leftValue": "",
          "rightValue": ""
        }
      ]
    },
    "looseTypeValidation": true
  },
  "executeOnce": false,
  "typeVersion": 2.2,
  "alwaysOutputData": false
}

================ Node #215 ================
{
  "id": "557aa2c3-8d0b-42c4-b444-953a538d7ff4",
  "name": "Sticky Note9",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    -1120,
    20
  ],
  "parameters": {
    "width": 1060,
    "height": 600,
    "content": "## Looping Data And Checking For Is Exist On Database\n**We are checking until find a data we did not insert because we don't want to create content about in same content"
  },
  "typeVersion": 1
}

================ Node #216 ================
{
  "id": "9b510f11-9a44-4d54-b162-3ffb55d66677",
  "name": "send error message to telegram",
  "type": "n8n-nodes-base.telegram",
  "position": [
    -1000,
    440
  ],
  "parameters": {
    "text": "There was a problem execution a postgresql content",
    "chatId": "={{ $('Telegram Params').item.json.telegram_chat_id}}",
    "additionalFields": {}
  },
  "credentials": {
    "telegramApi": {
      "id": "GcIVVl98RcazYBaB",
      "name": "Telegram account"
    }
  },
  "typeVersion": 1.2
}

================ Node #217 ================
{
  "id": "48bc61de-d416-4673-9e9b-8331ea841891",
  "name": "insert data on db",
  "type": "n8n-nodes-base.postgres",
  "position": [
    -260,
    240
  ],
  "parameters": {
    "table": {
      "__rl": true,
      "mode": "list",
      "value": "top_trends",
      "cachedResultName": "top_trends"
    },
    "schema": {
      "__rl": true,
      "mode": "list",
      "value": "public"
    },
    "columns": {
      "value": {
        "tag": "={{$('Loop Over Items').item.json.tag}}",
        "code": "={{$('Loop Over Items').item.json.content_code}}",
        "prompt": "={{$('Loop Over Items').item.json.prompt}}",
        "isposted": false,
        "thumbnail_url": "={{$('Loop Over Items').item.json.thumbnail_url}}"
      },
      "schema": [
        {
          "id": "id",
          "type": "number",
          "display": true,
          "removed": true,
          "required": false,
          "displayName": "id",
          "defaultMatch": true,
          "canBeUsedToMatch": true
        },
        {
          "id": "prompt",
          "type": "string",
          "display": true,
          "required": true,
          "displayName": "prompt",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "isposted",
          "type": "boolean",
          "display": true,
          "required": false,
          "displayName": "isposted",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "createdat",
          "type": "dateTime",
          "display": true,
          "removed": true,
          "required": false,
          "displayName": "createdat",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "updatedat",
          "type": "dateTime",
          "display": true,
          "removed": true,
          "required": false,
          "displayName": "updatedat",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "deletedat",
          "type": "dateTime",
          "display": true,
          "removed": true,
          "required": false,
          "displayName": "deletedat",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "code",
          "type": "string",
          "display": true,
          "required": false,
          "displayName": "code",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "tag",
          "type": "string",
          "display": true,
          "required": false,
          "displayName": "tag",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "thumbnail_url",
          "type": "string",
          "display": true,
          "required": false,
          "displayName": "thumbnail_url",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        }
      ],
      "mappingMode": "defineBelow",
      "matchingColumns": [
        "id"
      ],
      "attemptToConvertTypes": false,
      "convertFieldsToString": false
    },
    "options": {}
  },
  "credentials": {
    "postgres": {
      "id": "sBHQ2psBsfnHkFrZ",
      "name": "Postgres account"
    }
  },
  "typeVersion": 2.5
}

================ Node #218 ================
{
  "id": "15e7d69d-a10f-48a1-b240-046e9950d077",
  "name": "Analyze Image and give the content",
  "type": "@n8n/n8n-nodes-langchain.openAi",
  "position": [
    80,
    240
  ],
  "parameters": {
    "text": "Create a clear and concise description of the object in the image, focusing on its physical and general features. Avoid detailed environmental aspects like background, lighting, or colors. Describe the shape, texture, size, and any unique characteristics of the object. Mention any notable features that make the object stand out, such as its surface details, materials, and design. The description should be focused on the object itself, not its surroundings.\n\nFor example, describe the following image:\n",
    "modelId": {
      "__rl": true,
      "mode": "list",
      "value": "gpt-4o-mini",
      "cachedResultName": "GPT-4O-MINI"
    },
    "options": {},
    "resource": "image",
    "imageUrls": "={{ $('Loop Over Items').item.json.thumbnail_url }}",
    "operation": "analyze"
  },
  "credentials": {
    "openAiApi": {
      "id": "1TwEayhZUT90fq8N",
      "name": "OpenAi account"
    }
  },
  "typeVersion": 1.8
}

================ Node #219 ================
{
  "id": "93e253b1-da7d-4193-b899-a38e6fd9f4e4",
  "name": "Analyze Content And Generate Instagram Caption",
  "type": "@n8n/n8n-nodes-langchain.openAi",
  "position": [
    280,
    240
  ],
  "parameters": {
    "modelId": {
      "__rl": true,
      "mode": "list",
      "value": "gpt-4o-mini",
      "cachedResultName": "GPT-4O-MINI"
    },
    "options": {},
    "messages": {
      "values": [
        {
          "content": "=\nSummarize the following content description into a short, engaging Instagram caption under 150 words. The caption should focus on the content of the image, not the app. Keep it appealing to social media users, and highlight the visual details of the image. Include hashtags relevant to 3D modeling and design, such as #Blender3D, #3DArt, #DigitalArt, #3DModeling, and #ArtCommunity. Ensure the tone is friendly and inviting.\n\n\nContent description to summarize:\n{{ $json.content }}\n\nMake sure to craft the caption around the content's features, such as the color contrast, reflective surface, and artistic nature of the image.\n\n"
        }
      ]
    }
  },
  "credentials": {
    "openAiApi": {
      "id": "1TwEayhZUT90fq8N",
      "name": "OpenAi account"
    }
  },
  "typeVersion": 1.8
}

================ Node #220 ================
{
  "id": "9af1dc59-1d9e-4900-8f80-1eba946c4057",
  "name": "Sticky Note",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    -20,
    20
  ],
  "parameters": {
    "color": 4,
    "width": 860,
    "height": 600,
    "content": "## Analyze Post Content\n** We are analyzing the image\n** We are generating a instagram caption by content\n** Then we are generating the image"
  },
  "typeVersion": 1
}

================ Node #221 ================
{
  "id": "2259f6df-dca9-4a7e-babb-e63375f7207f",
  "name": "Prepare data on Instagram",
  "type": "n8n-nodes-base.facebookGraphApi",
  "position": [
    980,
    260
  ],
  "parameters": {
    "edge": "media",
    "node": "={{ $('Instagram params').item.json.instagram_business_account_id }}",
    "options": {
      "queryParameters": {
        "parameter": [
          {
            "name": "image_url",
            "value": "={{ $json.output[0] }}"
          },
          {
            "name": "caption",
            "value": "={{ $('Analyze Content And Generate Instagram Caption').item.json.message.content }}"
          }
        ]
      }
    },
    "graphApiVersion": "v20.0",
    "httpRequestMethod": "POST"
  },
  "credentials": {
    "facebookGraphApi": {
      "id": "ZFxxxLfZ25M7Va6r",
      "name": "Facebook Graph account"
    }
  },
  "typeVersion": 1
}

================ Node #222 ================
{
  "id": "bcbb6058-1966-4bb5-915a-1e65b9131117",
  "name": "Check Status Of Media Before Uploaded",
  "type": "n8n-nodes-base.facebookGraphApi",
  "position": [
    1200,
    260
  ],
  "parameters": {
    "node": "={{ $json.id }}",
    "options": {
      "fields": {
        "field": [
          {
            "name": "id"
          },
          {
            "name": "status"
          },
          {
            "name": "status_code"
          }
        ]
      }
    },
    "graphApiVersion": "v20.0"
  },
  "credentials": {
    "facebookGraphApi": {
      "id": "ZFxxxLfZ25M7Va6r",
      "name": "Facebook Graph account"
    }
  },
  "typeVersion": 1
}

================ Node #223 ================
{
  "id": "518d87ff-7808-4c06-b137-4e97d8f2ca28",
  "name": "Publish Media on Instagram",
  "type": "n8n-nodes-base.facebookGraphApi",
  "position": [
    1600,
    100
  ],
  "parameters": {
    "edge": "media_publish",
    "node": "={{ $('Instagram params').item.json.instagram_business_account_id }}",
    "options": {
      "queryParameters": {
        "parameter": [
          {
            "name": "creation_id",
            "value": "={{ $json.id }}"
          }
        ]
      }
    },
    "graphApiVersion": "v20.0",
    "httpRequestMethod": "POST"
  },
  "credentials": {
    "facebookGraphApi": {
      "id": "ZFxxxLfZ25M7Va6r",
      "name": "Facebook Graph account"
    }
  },
  "typeVersion": 1
}

================ Node #224 ================
{
  "id": "a033d12b-524f-40e8-9208-5300bbc823d3",
  "name": "Check status of post ",
  "type": "n8n-nodes-base.facebookGraphApi",
  "position": [
    1800,
    260
  ],
  "parameters": {
    "node": "={{ $('Check Status Of Media Before Uploaded').item.json.id }}",
    "options": {
      "fields": {
        "field": [
          {
            "name": "id"
          },
          {
            "name": "status"
          },
          {
            "name": "status_code"
          }
        ]
      }
    },
    "graphApiVersion": "v20.0"
  },
  "credentials": {
    "facebookGraphApi": {
      "id": "ZFxxxLfZ25M7Va6r",
      "name": "Facebook Graph account"
    }
  },
  "typeVersion": 1
}

================ Node #225 ================
{
  "id": "f136e907-2938-4175-b51f-4201fbe3477d",
  "name": "Sticky Note1",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    880,
    20
  ],
  "parameters": {
    "color": 5,
    "width": 1580,
    "height": 600,
    "content": "## Publish On Instagram And Send Message When Published via Telegram\n"
  },
  "typeVersion": 1
}

================ Node #226 ================
{
  "id": "8145986c-5453-43ac-8d5c-c50a84a62136",
  "name": "Sticky Note10",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    -1800,
    100
  ],
  "parameters": {
    "color": 5,
    "width": 260,
    "height": 500,
    "content": "## For More About Api\n** [Facebook Scraper Api Guide](https://rapidapi.com/social-api1-instagram/api/instagram-scraper-api2/playground/apiendpoint_a45552b2-9850-4da9-b5cb-bbdd3ac2199d)"
  },
  "typeVersion": 1
}

================ Node #227 ================
{
  "id": "02416fbb-4250-4278-af23-1f9189787123",
  "name": "filter the image content-2",
  "type": "n8n-nodes-base.code",
  "position": [
    -1480,
    180
  ],
  "parameters": {
    "jsCode": "const filteredData = $input.first().json.data.items.filter(item=> !item.is_video)\nreturn filteredData.map((item)=>{\n return {\n id: item.id,\n prompt: item.caption.text,\n content_code: item.code,\n thumbnail_url: item.thumbnail_url,\n tag: $input.first().json.data.additional_data.name\n }\n}) \n\n"
  },
  "typeVersion": 2
}

================ Node #228 ================
{
  "id": "2d1ea53d-1d32-4b86-8944-ce2ad4a69847",
  "name": "Sticky Note11",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    -2820,
    160
  ],
  "parameters": {
    "color": 5,
    "width": 180,
    "height": 300,
    "content": "## Guide \n** [Guide](https://replicate.com) of getting of Replicate Token "
  },
  "typeVersion": 1
}

================ Node #229 ================
{
  "id": "c8b933af-356e-49ae-92d3-42eaf4ee3e9f",
  "name": "Replicate params",
  "type": "n8n-nodes-base.set",
  "position": [
    -2780,
    300
  ],
  "parameters": {
    "options": {},
    "assignments": {
      "assignments": [
        {
          "id": "1e380c14-e908-4eeb-90e0-957a422829d0",
          "name": "replicate_token",
          "type": "string",
          "value": ""
        }
      ]
    }
  },
  "typeVersion": 3.4
}

================ Node #230 ================
{
  "id": "2c73cc9c-d436-459b-9b3c-bd870810b9b4",
  "name": "Generate image on flux",
  "type": "n8n-nodes-base.httpRequest",
  "position": [
    680,
    260
  ],
  "parameters": {
    "url": "https://api.replicate.com/v1/models/black-forest-labs/flux-schnell/predictions",
    "method": "POST",
    "options": {},
    "jsonBody": "={\n \"input\": {\n \"prompt\": \"A highly detailed 3D isometric model of {{$('Analyze Image and give the content').item.json.content .replace(/\\\\n/g, ' ') \n.replace(/\\\\t/g, ' ') \n.replace(/\\s+/g, ' ')\n.trim(); }} rendered in a stylized miniature toy aesthetic. Materials: Matte plastic/painted metal/weathered stone texture with no self-shadowing. Lighting: - Completely shadowless rendering - Ultra bright and perfectly even illumination from all angles - Pure ambient lighting without directional shadows - Flat, consistent lighting across all surfaces - No ambient occlusion. Style specifications: - Clean, defined edges and surfaces - Slightly exaggerated proportions - Miniature/toy-like scale - Subtle wear and texturing - Rich color palette with muted tones - Isometric 3/4 view angle - Crisp details and micro-elements. Technical details: - 4K resolution - PBR materials without shadows - No depth of field - High-quality anti-aliasing - Perfect uniform lighting. Environment: Pure white background with zero shadows or gradients. Post-processing: High key lighting, maximum brightness, shadow removal.\",\n \"output_format\": \"jpg\",\n \"output_quality\": 100,\n \"go_fast\":false\n }\n}\n",
    "sendBody": true,
    "sendHeaders": true,
    "specifyBody": "=json",
    "bodyParameters": {
      "parameters": [
        {}
      ]
    },
    "headerParameters": {
      "parameters": [
        {
          "name": "Authorization",
          "value": "=Bearer {{ $('Replicate params').item.json.replicate_token}}"
        },
        {
          "name": "Prefer",
          "value": "wait"
        }
      ]
    }
  },
  "typeVersion": 4.2
}

================ Node #231 ================
{
  "id": "6f9e7dc6-1287-4235-8631-198d729f367f",
  "name": "Sticky Note12",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    -1120,
    -340
  ],
  "parameters": {
    "color": 4,
    "width": 1060,
    "height": 320,
    "content": "## For top_trends Table\n```\nCREATE TABLE top_trends (\n id SERIAL PRIMARY KEY,\n isposted BOOLEAN DEFAULT false,\n createdat TIMESTAMP WITHOUT TIME ZONE DEFAULT CURRENT_TIMESTAMP,\n updatedat TIMESTAMP WITHOUT TIME ZONE DEFAULT CURRENT_TIMESTAMP,\n deletedat TIMESTAMP WITHOUT TIME ZONE,\n prompt TEXT NOT NULL,\n thumbnail_url TEXT,\n code TEXT,\n tag TEXT\n);\n```"
  },
  "typeVersion": 1
}

================ Node #232 ================
{
  "id": "b19951bb-6346-44a7-a4c8-1bd0806c6019",
  "name": "Sticky Note13",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    -660,
    -120
  ],
  "parameters": {
    "color": 3,
    "width": 160,
    "height": 120,
    "content": "## Warning\n** Don't forgot the create top_trends table"
  },
  "typeVersion": 1
}

================ Node #233 ================
{
  "id": "3de6b8e5-c5e0-4999-871a-c349cb9b3ac0",
  "name": "Sticky Note14",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    -3180,
    -940
  ],
  "parameters": {
    "width": 620,
    "height": 840,
    "content": "\n## Automated Instagram Content Creation from Trending Posts\n\nThis workflow automates the process of discovering and recreating trending content on Instagram:\n\n1. Content Discovery:\n - Scrapes top trending posts from specific hashtags (#blender3d, #isometric)\n - Filters for image-only content (excludes videos)\n - Checks database to avoid duplicate content\n\n2. AI-Powered Content Generation:\n - Analyzes trending images using GPT-4 Vision\n - Generates detailed descriptions of visual elements\n - Creates engaging Instagram captions with relevant hashtags\n - Uses Flux AI to generate similar but unique images\n\n3. Publishing & Monitoring:\n - Automatically posts content to Instagram Business Account\n - Monitors post status and publishing process\n - Sends status updates via Telegram\n\nPerfect for content creators and businesses looking to maintain an active Instagram presence with AI-generated content inspired by current trends. The workflow runs on schedule and handles everything from content discovery to publication automatically.\n\nNote: Requires Instagram Business Account, Telegram Bot, OpenAI, and Replicate API credentials."
  },
  "typeVersion": 1
}

================ Node #234 ================
{
  "id": "dfd0d182-177c-4336-8950-4792ea739123",
  "name": "Sticky Note15",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    -2120,
    480
  ],
  "parameters": {
    "color": 7,
    "width": 180,
    "height": 120,
    "content": "##Warning\n** Dont forgot the subscribe [Instagram Scraper Api](https://rapidapi.com/social-api1-instagram/api/instagram-scraper-api2/playground/apiendpoint_a45552b2-9850-4da9-b5cb-bbdd3ac2199d)"
  },
  "typeVersion": 1
}

================ Node #235 ================
{
  "id": "03330941-3c6e-4152-8c51-f1d53f4424bc",
  "name": "Sticky Note16",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    -2120,
    640
  ],
  "parameters": {
    "width": 180,
    "height": 180,
    "content": "## Warning\n** You can check the [rate limit](https://rapidapi.com/social-api1-instagram/api/instagram-scraper-api2) of the Instagram Scraper Api on Rapid Api\n** Free version is monthly 500 request\n"
  },
  "typeVersion": 1
}

================ Node #236 ================
{
  "id": "2c5b2dd1-c63f-4bc9-909e-5f4b2a385d01",
  "name": "Respond to Webhook",
  "type": "n8n-nodes-base.respondToWebhook",
  "position": [
    1020,
    1040
  ],
  "parameters": {
    "options": {},
    "respondWith": "text",
    "responseBody": "={{ $json.query['hub.challenge'] }}"
  },
  "typeVersion": 1.1
}

================ Node #237 ================
{
  "id": "cc230fcd-f88c-40d4-8835-ac9dc6228b18",
  "name": "AI Agent",
  "type": "@n8n/n8n-nodes-langchain.agent",
  "position": [
    1560,
    1380
  ],
  "parameters": {
    "text": "={{ $('Respond').item.json.body.entry[0].changes[0].value.messages[0].text.body }}",
    "agent": "conversationalAgent",
    "options": {
      "systemMessage": "You are an AI-powered assistant for an electronics store. Your primary goal is to assist customers by providing accurate and helpful information about products, troubleshooting tips, and general support. Use the provided knowledge base (retrieved documents) to answer questions with precision and professionalism.\n\n**Guidelines**:\n1. **Product Information**:\n - Provide detailed descriptions of products, including specifications, features, and compatibility.\n - Highlight key selling points and differences between similar products.\n - Mention availability, pricing, and promotions if applicable.\n\n2. **Technical Support**:\n - Offer step-by-step troubleshooting guides for common issues.\n - Suggest solutions for setup, installation, or configuration problems.\n - If the issue is complex, recommend contacting the store\u2019s support team for further assistance.\n\n3. **Customer Service**:\n - Respond politely and professionally to all inquiries.\n - If a question is unclear, ask for clarification to provide the best possible answer.\n - For order-related questions (e.g., status, returns, or cancellations), guide customers on how to proceed using the store\u2019s systems.\n\n4. **Knowledge Base Usage**:\n - Always reference the provided knowledge base (retrieved documents) to ensure accuracy.\n - If the knowledge base does not contain relevant information, inform the customer and suggest alternative resources or actions.\n\n5. **Tone and Style**:\n - Use a friendly, approachable, and professional tone.\n - Avoid technical jargon unless the customer demonstrates familiarity with the topic.\n - Keep responses concise but informative.\n\n**Example Interactions**:\n1. **Product Inquiry**:\n - Customer: \"What\u2019s the difference between the XYZ Smartwatch and the ABC Smartwatch?\"\n - AI: \"The XYZ Smartwatch features a longer battery life (up to 7 days) and built-in GPS, while the ABC Smartwatch has a brighter AMOLED display and supports wireless charging. Both are compatible with iOS and Android devices. Would you like more details on either product?\"\n\n2. **Technical Support**:\n - Customer: \"My wireless router isn\u2019t connecting to the internet.\"\n - AI: \"Please try the following steps: 1) Restart your router and modem. 2) Ensure all cables are securely connected. 3) Check if the router\u2019s LED indicators show a stable connection. If the issue persists, you may need to reset the router to factory settings. Would you like a detailed guide for resetting your router?\"\n\n3. **Customer Service**:\n - Customer: \"How do I return a defective product?\"\n - AI: \"To return a defective product, please visit our Returns Portal on our website and enter your order number. You\u2019ll receive a return label and instructions. If you need further assistance, our support team is available at support@electronicsstore.com.\"\n\n**Limitations**:\n- If the question is outside the scope of the knowledge base or requires human intervention, inform the customer and provide contact details for the appropriate department.\n- Do not provide speculative or unverified information. Always rely on the knowledge base or direct the customer to official resources."
    },
    "promptType": "define"
  },
  "typeVersion": 1.7
}

================ Node #238 ================
{
  "id": "283df38d-1a2b-44d9-8e29-5e928ca1c4c9",
  "name": "Sticky Note",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    740,
    1260
  ],
  "parameters": {
    "width": 459,
    "height": 485,
    "content": "# STEP 4\n\n## RAG System\n\n\n\n\n\n\n\n\n\n\n\n\n\n* *Respond* webhook receives various POST Requests from Meta regarding WhatsApp messages (user messages + status notifications)\n* Check if the incoming JSON contains user message\n* Echo back the text message to the user. This is a custom message, not a WhatsApp Business template message\n"
  },
  "typeVersion": 1
}

================ Node #239 ================
{
  "id": "b8f5ac53-03fe-4151-ac56-b246245702b6",
  "name": "OpenAI Chat Model",
  "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
  "position": [
    1560,
    1580
  ],
  "parameters": {
    "model": {
      "__rl": true,
      "mode": "list",
      "value": "gpt-4o-mini"
    },
    "options": {}
  },
  "credentials": {
    "openAiApi": {
      "id": "CDX6QM4gLYanh0P4",
      "name": "OpenAi account"
    }
  },
  "typeVersion": 1.2
}

================ Node #240 ================
{
  "id": "a02f4e76-1895-48ad-a2d5-6daf3347f181",
  "name": "When clicking \u2018Test workflow\u2019",
  "type": "n8n-nodes-base.manualTrigger",
  "position": [
    460,
    100
  ],
  "parameters": {},
  "typeVersion": 1
}

================ Node #241 ================
{
  "id": "35a71dd7-ae08-46c5-acb2-e66d92b311cb",
  "name": "Qdrant Vector Store",
  "type": "@n8n/n8n-nodes-langchain.vectorStoreQdrant",
  "position": [
    1440,
    220
  ],
  "parameters": {
    "mode": "insert",
    "options": {},
    "qdrantCollection": {
      "__rl": true,
      "mode": "id",
      "value": "=COLLECTION"
    }
  },
  "credentials": {
    "qdrantApi": {
      "id": "iyQ6MQiVaF3VMBmt",
      "name": "QdrantApi account"
    }
  },
  "typeVersion": 1
}

================ Node #242 ================
{
  "id": "1538c8b1-f914-4991-b311-e533df625c5f",
  "name": "Create collection",
  "type": "n8n-nodes-base.httpRequest",
  "position": [
    760,
    -40
  ],
  "parameters": {
    "url": "https://QDRANTURL/collections/COLLECTION",
    "method": "POST",
    "options": {},
    "jsonBody": "{\n \"filter\": {}\n}",
    "sendBody": true,
    "sendHeaders": true,
    "specifyBody": "json",
    "authentication": "genericCredentialType",
    "genericAuthType": "httpHeaderAuth",
    "headerParameters": {
      "parameters": [
        {
          "name": "Content-Type",
          "value": "application/json"
        }
      ]
    }
  },
  "credentials": {
    "httpHeaderAuth": {
      "id": "qhny6r5ql9wwotpn",
      "name": "Qdrant API (Hetzner)"
    }
  },
  "typeVersion": 4.2
}

================ Node #243 ================
{
  "id": "423b73a6-2497-4635-9ad0-9e768f32018d",
  "name": "Refresh collection",
  "type": "n8n-nodes-base.httpRequest",
  "position": [
    760,
    220
  ],
  "parameters": {
    "url": "https://QDRANTURL/collections/COLLECTION/points/delete",
    "method": "POST",
    "options": {},
    "jsonBody": "{\n \"filter\": {}\n}",
    "sendBody": true,
    "sendHeaders": true,
    "specifyBody": "json",
    "authentication": "genericCredentialType",
    "genericAuthType": "httpHeaderAuth",
    "headerParameters": {
      "parameters": [
        {
          "name": "Content-Type",
          "value": "application/json"
        }
      ]
    }
  },
  "credentials": {
    "httpHeaderAuth": {
      "id": "qhny6r5ql9wwotpn",
      "name": "Qdrant API (Hetzner)"
    }
  },
  "typeVersion": 4.2
}

================ Node #244 ================
{
  "id": "9519866a-f28a-495a-9cb4-3b2170407943",
  "name": "Get folder",
  "type": "n8n-nodes-base.googleDrive",
  "position": [
    980,
    220
  ],
  "parameters": {
    "filter": {
      "driveId": {
        "__rl": true,
        "mode": "list",
        "value": "My Drive",
        "cachedResultUrl": "https://drive.google.com/drive/my-drive",
        "cachedResultName": "My Drive"
      },
      "folderId": {
        "__rl": true,
        "mode": "id",
        "value": "=test-whatsapp"
      }
    },
    "options": {},
    "resource": "fileFolder"
  },
  "credentials": {
    "googleDriveOAuth2Api": {
      "id": "HEy5EuZkgPZVEa9w",
      "name": "Google Drive account"
    }
  },
  "typeVersion": 3
}

================ Node #245 ================
{
  "id": "c9a36259-8340-4382-8bb0-84b73a8288c6",
  "name": "Download Files",
  "type": "n8n-nodes-base.googleDrive",
  "position": [
    1200,
    220
  ],
  "parameters": {
    "fileId": {
      "__rl": true,
      "mode": "id",
      "value": "={{ $json.id }}"
    },
    "options": {
      "googleFileConversion": {
        "conversion": {
          "docsToFormat": "text/plain"
        }
      }
    },
    "operation": "download"
  },
  "credentials": {
    "googleDriveOAuth2Api": {
      "id": "HEy5EuZkgPZVEa9w",
      "name": "Google Drive account"
    }
  },
  "typeVersion": 3
}

================ Node #246 ================
{
  "id": "b20975d7-e367-49a3-ac8c-613289775463",
  "name": "Embeddings OpenAI",
  "type": "@n8n/n8n-nodes-langchain.embeddingsOpenAi",
  "position": [
    1420,
    420
  ],
  "parameters": {
    "options": {}
  },
  "credentials": {
    "openAiApi": {
      "id": "CDX6QM4gLYanh0P4",
      "name": "OpenAi account"
    }
  },
  "typeVersion": 1.1
}

================ Node #247 ================
{
  "id": "4c2d02a4-c954-42c4-97b0-b94ee3198f56",
  "name": "Default Data Loader",
  "type": "@n8n/n8n-nodes-langchain.documentDefaultDataLoader",
  "position": [
    1600,
    420
  ],
  "parameters": {
    "options": {},
    "dataType": "binary"
  },
  "typeVersion": 1
}

================ Node #248 ================
{
  "id": "72591129-1691-4caf-bf63-c04db85708dc",
  "name": "Token Splitter",
  "type": "@n8n/n8n-nodes-langchain.textSplitterTokenSplitter",
  "position": [
    1560,
    580
  ],
  "parameters": {
    "chunkSize": 300,
    "chunkOverlap": 30
  },
  "typeVersion": 1
}

================ Node #249 ================
{
  "id": "cc74592d-6562-4816-917c-0d88913a8125",
  "name": "Sticky Note2",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    200,
    1140
  ],
  "parameters": {
    "color": 3,
    "width": 405,
    "height": 177,
    "content": "## Important!\n### Configure the webhook nodes this way:\n* Make sure that both *Verify* and *Respond* have the same URL\n* *Verify* should have GET HTTP Method\n* *Respond* should have POST HTTP Method"
  },
  "typeVersion": 1
}

================ Node #250 ================
{
  "id": "9c8d4973-dcc5-4506-967f-3b3a5df501fa",
  "name": "Sticky Note1",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    740,
    800
  ],
  "parameters": {
    "color": 5,
    "width": 618,
    "height": 392,
    "content": "# STEP 3\n\n## Create Webhook\n* Go to your [Meta for Developers App page](https://developers.facebook.com/apps/), navigate to the App settings\n* Add a **production webhook URL** as a new Callback URL\n* *Verify* webhook receives a GET Request and sends back a verification code\n* After that you can delete this\n"
  },
  "typeVersion": 1
}

================ Node #251 ================
{
  "id": "ec013e0c-a354-4f12-8ded-97013bb8fb21",
  "name": "Verify",
  "type": "n8n-nodes-base.webhook",
  "position": [
    780,
    1040
  ],
  "webhookId": "f0d2e6f6-8fda-424d-b377-0bd191343c20",
  "parameters": {
    "path": "f0d2e6f6-8fda-424d-b377-0bd191343c20",
    "options": {},
    "responseMode": "responseNode"
  },
  "typeVersion": 2
}

================ Node #252 ================
{
  "id": "253ddc93-5693-4362-aa6c-a80ab3f6df82",
  "name": "Respond",
  "type": "n8n-nodes-base.webhook",
  "position": [
    760,
    1420
  ],
  "webhookId": "f0d2e6f6-8fda-424d-b377-0bd191343c20",
  "parameters": {
    "path": "f0d2e6f6-8fda-424d-b377-0bd191343c20",
    "options": {},
    "httpMethod": "POST"
  },
  "typeVersion": 2
}

================ Node #253 ================
{
  "id": "2d4b956e-92d9-41da-a6d3-9f588e453d2a",
  "name": "is Message?",
  "type": "n8n-nodes-base.if",
  "position": [
    980,
    1420
  ],
  "parameters": {
    "options": {},
    "conditions": {
      "options": {
        "version": 2,
        "leftValue": "",
        "caseSensitive": true,
        "typeValidation": "loose"
      },
      "combinator": "and",
      "conditions": [
        {
          "id": "959fbffc-876a-4235-87be-2dedba4926cd",
          "operator": {
            "type": "object",
            "operation": "exists",
            "singleValue": true
          },
          "leftValue": "={{ $json.body.entry[0].changes[0].value.messages[0] }}",
          "rightValue": ""
        }
      ]
    },
    "looseTypeValidation": true
  },
  "typeVersion": 2.2
}

================ Node #254 ================
{
  "id": "2af633a9-f6b0-4989-9e85-abb619d2b3bb",
  "name": "Only message",
  "type": "n8n-nodes-base.whatsApp",
  "position": [
    1280,
    1520
  ],
  "parameters": {
    "textBody": "=You can only send text messages",
    "operation": "send",
    "phoneNumberId": "470271332838881",
    "requestOptions": {},
    "additionalFields": {},
    "recipientPhoneNumber": "={{ $('Respond').item.json.body.entry[0].changes[0].value.contacts[0].wa_id }}"
  },
  "credentials": {
    "whatsAppApi": {
      "id": "HDUOWQXeRXMVjo0Z",
      "name": "WhatsApp account"
    }
  },
  "typeVersion": 1
}

================ Node #255 ================
{
  "id": "5235dd06-2235-4edb-904e-872848e2ed79",
  "name": "Send",
  "type": "n8n-nodes-base.whatsApp",
  "position": [
    1980,
    1380
  ],
  "parameters": {
    "textBody": "={{ $json.output }}",
    "operation": "send",
    "phoneNumberId": "470271332838881",
    "requestOptions": {},
    "additionalFields": {},
    "recipientPhoneNumber": "={{ $('Respond').item.json.body.entry[0].changes[0].value.contacts[0].wa_id }}"
  },
  "credentials": {
    "whatsAppApi": {
      "id": "HDUOWQXeRXMVjo0Z",
      "name": "WhatsApp account"
    }
  },
  "typeVersion": 1
}

================ Node #256 ================
{
  "id": "dafe692e-7767-4ded-966c-df812f58ae63",
  "name": "Window Buffer Memory",
  "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
  "position": [
    1760,
    1580
  ],
  "parameters": {},
  "typeVersion": 1.3
}

================ Node #257 ================
{
  "id": "ba6254bd-4dad-47bb-a535-7b6b708ea763",
  "name": "Sticky Note3",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    960,
    -100
  ],
  "parameters": {
    "color": 6,
    "width": 880,
    "height": 220,
    "content": "# STEP 1\n\n## Create Qdrant Collection\nChange:\n- QDRANTURL\n- COLLECTION"
  },
  "typeVersion": 1
}

================ Node #258 ================
{
  "id": "83cf4483-cd45-4de6-9b88-e00727ed8352",
  "name": "Sticky Note4",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    740,
    160
  ],
  "parameters": {
    "color": 4,
    "width": 620,
    "height": 400,
    "content": "# STEP 2\n\n\n\n\n\n\n\n\n\n\n\n\n## Documents vectorization with Qdrant and Google Drive\nChange:\n- QDRANTURL\n- COLLECTION"
  },
  "typeVersion": 1
}

================ Node #259 ================
{
  "id": "4e0a4245-370f-4596-b01b-4eed8acbe2c3",
  "name": "Sticky Note5",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    1520,
    1260
  ],
  "parameters": {
    "width": 380,
    "height": 260,
    "content": "## Configure AI Agent\nSet System prompt and chat model. If you want you can set any tools"
  },
  "typeVersion": 1
}

================ Node #260 ================
{
  "id": "271bb16f-9b62-41d9-ab76-114cd7ba915a",
  "name": "Email Trigger (IMAP)",
  "type": "n8n-nodes-base.emailReadImap",
  "position": [
    -1300,
    1340
  ],
  "parameters": {
    "options": {}
  },
  "credentials": {
    "imap": {
      "id": "k31W9oGddl9pMDy4",
      "name": "IMAP info@n3witalia.com"
    }
  },
  "typeVersion": 2
}

================ Node #261 ================
{
  "id": "42d150d8-d574-49f9-9c0e-71a2cdea3b79",
  "name": "Markdown",
  "type": "n8n-nodes-base.markdown",
  "position": [
    -1040,
    1340
  ],
  "parameters": {
    "html": "={{ $json.textHtml }}",
    "options": {}
  },
  "typeVersion": 1
}

================ Node #262 ================
{
  "id": "e9498a60-0078-4581-b269-7ff552f4047a",
  "name": "Send Email",
  "type": "n8n-nodes-base.emailSend",
  "position": [
    920,
    1320
  ],
  "webhookId": "a79ae1b4-648c-4cb4-b6cd-04ea3c1d9314",
  "parameters": {
    "html": "={{ $('Set Email text').item.json.email }}",
    "options": {},
    "subject": "=Re: {{ $('Email Trigger (IMAP)').item.json.subject }}",
    "toEmail": "={{ $('Email Trigger (IMAP)').item.json.from }}",
    "fromEmail": "={{ $('Email Trigger (IMAP)').item.json.to }}"
  },
  "credentials": {
    "smtp": {
      "id": "hRjP3XbDiIQqvi7x",
      "name": "SMTP info@n3witalia.com"
    }
  },
  "typeVersion": 2.1
}

================ Node #263 ================
{
  "id": "ab9f6ac3-2095-44df-aeba-2eab96ecf425",
  "name": "Email Summarization Chain",
  "type": "@n8n/n8n-nodes-langchain.chainSummarization",
  "position": [
    -780,
    1340
  ],
  "parameters": {
    "options": {
      "binaryDataKey": "={{ $json.data }}",
      "summarizationMethodAndPrompts": {
        "values": {
          "prompt": "=Write a concise summary of the following in max 100 words:\n\n\"{{ $json.data }}\"\n\nDo not enter the total number of words used.",
          "combineMapPrompt": "=Write a concise summary of the following in max 100 words:\n\n\"{{ $json.data }}\"\n\nDo not enter the total number of words used."
        }
      }
    },
    "operationMode": "nodeInputBinary"
  },
  "typeVersion": 2
}

================ Node #264 ================
{
  "id": "86b7c3d0-e1f2-4e2f-b293-8042700d6816",
  "name": "Write email",
  "type": "@n8n/n8n-nodes-langchain.agent",
  "position": [
    -340,
    1340
  ],
  "parameters": {
    "text": "=Write the text to reply to the following email:\n\n{{ $json.response.text }}",
    "options": {
      "systemMessage": "You are an expert at answering emails. You need to answer them professionally based on the information you have. This is a business email. Be concise and never exceed 100 words. Only the body of the email, not create the subject"
    },
    "promptType": "define",
    "hasOutputParser": true
  },
  "typeVersion": 1.7
}

================ Node #265 ================
{
  "id": "5d5a397f-f9c3-4691-afd0-9a6102679eac",
  "name": "OpenAI",
  "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
  "position": [
    -400,
    1560
  ],
  "parameters": {
    "model": {
      "__rl": true,
      "mode": "list",
      "value": "gpt-4o-mini",
      "cachedResultName": "gpt-4o-mini"
    },
    "options": {}
  },
  "credentials": {
    "openAiApi": {
      "id": "CDX6QM4gLYanh0P4",
      "name": "OpenAi account"
    }
  },
  "typeVersion": 1.2
}

================ Node #266 ================
{
  "id": "5b36a295-fda6-4174-9078-0a8ec57620d2",
  "name": "Sticky Note2",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    -800,
    1260
  ],
  "parameters": {
    "width": 320,
    "height": 240,
    "content": "Chain that summarizes the received email"
  },
  "typeVersion": 1
}

================ Node #267 ================
{
  "id": "7110fe1f-0099-49aa-9095-96e733aa468f",
  "name": "Sticky Note5",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    -360,
    1260
  ],
  "parameters": {
    "width": 340,
    "height": 240,
    "content": "Agent that retrieves business information from a vector database and processes the response"
  },
  "typeVersion": 1
}

================ Node #268 ================
{
  "id": "e2bdbd64-3c37-4867-ae2c-0f6937d82b81",
  "name": "Sticky Note1",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    -1100,
    1260
  ],
  "parameters": {
    "height": 240,
    "content": "Convert email to Markdown format for better understanding of LLM models"
  },
  "typeVersion": 1
}

================ Node #269 ================
{
  "id": "8ae5d216-5897-4c33-800a-27ff939b174a",
  "name": "Sticky Note7",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    620,
    1300
  ],
  "parameters": {
    "height": 180,
    "content": "If the feedback is OK send email"
  },
  "typeVersion": 1
}

================ Node #270 ================
{
  "id": "4cfce63c-5931-45c5-99ca-eb85dca962b5",
  "name": "Approve Email",
  "type": "n8n-nodes-base.emailSend",
  "position": [
    380,
    1340
  ],
  "webhookId": "4f9f06e7-9b2b-4896-9b51-245972341d12",
  "parameters": {
    "message": "=<h3>MESSAGE</h3>\n{{ $('Email Trigger (IMAP)').item.json.textHtml }}\n\n<h3>AI RESPONSE</h3>\n{{ $json.email }}",
    "options": {},
    "subject": "=[Approval Required] {{ $('Email Trigger (IMAP)').item.json.subject }}",
    "toEmail": "info@n3witalia.com",
    "fromEmail": "info@n3witalia.com",
    "operation": "sendAndWait"
  },
  "credentials": {
    "smtp": {
      "id": "hRjP3XbDiIQqvi7x",
      "name": "SMTP info@n3witalia.com"
    }
  },
  "typeVersion": 2.1
}

================ Node #271 ================
{
  "id": "d6c8acd2-ebc1-4aaa-bfcc-cdb18fcc8715",
  "name": "OpenAI Chat Model",
  "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
  "position": [
    -820,
    1560
  ],
  "parameters": {
    "model": {
      "__rl": true,
      "mode": "list",
      "value": "deepseek-chat",
      "cachedResultName": "deepseek-chat"
    },
    "options": {}
  },
  "credentials": {
    "openAiApi": {
      "id": "97Cz4cqyiy1RdcQL",
      "name": "DeepSeek"
    }
  },
  "typeVersion": 1.2
}

================ Node #272 ================
{
  "id": "33bbedeb-129a-4e99-ab5a-9e0ec4456156",
  "name": "Set Email text",
  "type": "n8n-nodes-base.set",
  "position": [
    100,
    1340
  ],
  "parameters": {
    "options": {},
    "assignments": {
      "assignments": [
        {
          "id": "35d7c303-42f4-4dd1-b41e-6eb087c23c3d",
          "name": "email",
          "type": "string",
          "value": "={{ $json.output }}"
        }
      ]
    }
  },
  "typeVersion": 3.4
}

================ Node #273 ================
{
  "id": "2293e0e6-4f2a-4622-a610-64b65f34e1e5",
  "name": "Sticky Note",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    320,
    1300
  ],
  "parameters": {
    "height": 180,
    "content": "Human in the loop"
  },
  "typeVersion": 1
}

================ Node #274 ================
{
  "id": "510196ec-adaf-4e6c-aac0-8ca8b754438a",
  "name": "Sticky Note11",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    -1100,
    940
  ],
  "parameters": {
    "color": 3,
    "width": 540,
    "height": 260,
    "content": "# How it works\nThis workflow automates the handling of incoming emails, summarizes their content, generates appropriate responses and validate it through send IMAP email with \"Human in the loop\" system. \n\nYou can quickly integrate Gmail and Outlook via the appropriate nodes"
  },
  "typeVersion": 1
}

================ Node #275 ================
{
  "id": "c4c9157d-4d05-47a1-a5eb-63865e838d39",
  "name": "Approved?",
  "type": "n8n-nodes-base.if",
  "position": [
    680,
    1340
  ],
  "parameters": {
    "options": {},
    "conditions": {
      "options": {
        "version": 2,
        "leftValue": "",
        "caseSensitive": true,
        "typeValidation": "strict"
      },
      "combinator": "and",
      "conditions": [
        {
          "id": "62e26bc5-1732-4699-a602-99490c7406fd",
          "operator": {
            "type": "boolean",
            "operation": "true",
            "singleValue": true
          },
          "leftValue": "={{ $json.data.approved }}",
          "rightValue": ""
        }
      ]
    }
  },
  "typeVersion": 2.2
}

================ Node #276 ================
{
  "id": "22c8d63b-ce3c-4aab-b3f6-4bae8c1b9ec5",
  "name": "Window Buffer Memory",
  "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
  "position": [
    1460,
    880
  ],
  "parameters": {
    "sessionKey": "={{ $json.sessionId }}",
    "sessionIdType": "customKey",
    "contextWindowLength": 20
  },
  "typeVersion": 1.2
}

================ Node #277 ================
{
  "id": "45403d5c-6e85-424f-b40b-c6214b57457b",
  "name": "Respond to Webhook",
  "type": "n8n-nodes-base.respondToWebhook",
  "position": [
    1880,
    580
  ],
  "parameters": {
    "options": {}
  },
  "typeVersion": 1.1
}

================ Node #278 ================
{
  "id": "1111262a-1743-4bae-abf1-f69d2e1a580c",
  "name": "OpenAI Chat Model",
  "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
  "position": [
    1360,
    760
  ],
  "parameters": {
    "model": "gpt-4o-2024-08-06",
    "options": {
      "temperature": 0.4
    }
  },
  "credentials": {
    "openAiApi": {
      "id": "XWFTuTtx9oWglhNn",
      "name": "OpenAi account"
    }
  },
  "typeVersion": 1
}

================ Node #279 ================
{
  "id": "df891547-c715-4dc6-bfcc-c0ac5cfcaf02",
  "name": "Make Appointment",
  "type": "@n8n/n8n-nodes-langchain.toolHttpRequest",
  "position": [
    1820,
    840
  ],
  "parameters": {
    "url": "https://graph.microsoft.com/v1.0/me/events",
    "method": "POST",
    "jsonBody": "{\n \"subject\": \"Meetings with <name> at <company>\",\n \"start\": {\n \"dateTime\": \"{dateStartTime}\",\n \"timeZone\": \"Europe/London\"\n },\n \"end\": {\n \"dateTime\": \"{dateEndTime}\",\n \"timeZone\": \"Europe/London\"\n },\n \"body\": {\n \"contentType\": \"HTML\",\n \"content\": \"{reason}\"\n },\n \"attendees\": [\n {\n \"emailAddress\": {\n \"address\": \"{email}\",\n \"name\": \"{name}\"\n },\n \"type\": \"required\"\n }\n ],\n \"location\": {\n \"displayName\": \"Online Meeting\"\n },\n \"isOnlineMeeting\": true,\n \"onlineMeetingProvider\": \"teamsForBusiness\",\n \"showAs\": \"busy\",\n \"categories\": [\n \"Meeting\"\n ]\n}",
    "sendBody": true,
    "sendQuery": true,
    "specifyBody": "json",
    "authentication": "predefinedCredentialType",
    "parametersQuery": {
      "values": [
        {
          "name": "Content-Type",
          "value": "application/json",
          "valueProvider": "fieldValue"
        }
      ]
    },
    "toolDescription": "Call this tool to make the appointment, ensure you send the user email, name, company, reason for the meeting and the appointment start time and the date in ISO String format with timezone for <timezone>. When creating an appointment, always send JSON.",
    "nodeCredentialType": "microsoftOutlookOAuth2Api",
    "placeholderDefinitions": {
      "values": [
        {
          "name": "dateStartTime",
          "type": "string",
          "description": "The date and start time of the appointment in toISOString format with timezone for Europe/London"
        },
        {
          "name": "dateEndTime",
          "type": "string",
          "description": "The date and end time of the appointment in toISOString format, always 30 minutes after the dateStartTime, format with timezone for Europe/London"
        },
        {
          "name": "reason",
          "type": "string",
          "description": "Detailed description of the meeting, will be sent to us and the customer"
        },
        {
          "name": "email",
          "type": "string",
          "description": "The customers email address."
        },
        {
          "name": "name",
          "type": "string",
          "description": "The customers full name, must be second and last name"
        }
      ]
    }
  },
  "credentials": {
    "microsoftOutlookOAuth2Api": {
      "id": "E0WY3yUNKgrxIwLU",
      "name": "Microsoft Outlook Business"
    }
  },
  "typeVersion": 1.1
}

================ Node #280 ================
{
  "id": "44141c44-de49-4707-b287-24007c84ca21",
  "name": "Execute Workflow Trigger",
  "type": "n8n-nodes-base.executeWorkflowTrigger",
  "position": [
    2160,
    580
  ],
  "parameters": {},
  "typeVersion": 1
}

================ Node #281 ================
{
  "id": "795e1451-57d8-4563-8b86-5a75df2427b6",
  "name": "varResponse",
  "type": "n8n-nodes-base.set",
  "position": [
    3120,
    460
  ],
  "parameters": {
    "options": {},
    "assignments": {
      "assignments": [
        {
          "id": "c0b6e779-0f7b-41f0-81f8-457f2b31ccfe",
          "name": "response",
          "type": "array",
          "value": "={{ $json.freeTimeSlots.toJsonString() }}"
        }
      ]
    }
  },
  "typeVersion": 3.4
}

================ Node #282 ================
{
  "id": "4283635f-649c-4cc7-84b9-37524ddb6ce0",
  "name": "freeTimeSlots",
  "type": "n8n-nodes-base.code",
  "position": [
    2900,
    460
  ],
  "parameters": {
    "jsCode": "// Input: An array with objects containing a 'value' array of events.\nconst businessHoursStart = \"08:00:00Z\"; // Business hours start time\nconst businessHoursEnd = \"17:30:00Z\"; // Business hours end time\n\nconst inputData = items[0].json.value; // Assuming the input data is in the 'value' array of the first item\n\n// Function to convert ISO datetime string to a Date object with specified time\nfunction getDateWithTime(dateString, time) {\n const datePart = new Date(dateString).toISOString().split(\"T\")[0]; // Extract the date part (YYYY-MM-DD)\n return new Date(`${datePart}T${time}`);\n}\n\n// Function to get day of the week from a date string\nfunction getDayOfWeek(dateString) {\n const daysOfWeek = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\n return daysOfWeek[new Date(dateString).getUTCDay()];\n}\n\n// Organise events by date\nconst eventsByDate = {};\ninputData.forEach(event => {\n const eventDate = new Date(event.start.dateTime).toISOString().split(\"T\")[0]; // Extract the date\n if (!eventsByDate[eventDate]) {\n eventsByDate[eventDate] = [];\n }\n if (event.showAs === \"busy\") {\n eventsByDate[eventDate].push({\n start: new Date(event.start.dateTime),\n end: new Date(event.end.dateTime),\n timeZone: event.start.timeZone // Add timeZone to the event object\n });\n }\n});\n\n// Find free slots within business hours for each date\nconst freeTimeSlots = [];\n\nfor (const [date, busyEvents] of Object.entries(eventsByDate)) {\n // Sort events by their start time\n busyEvents.sort((a, b) => a.start - b.start);\n\n // Define business start and end times for the current date\n const businessStart = getDateWithTime(date, businessHoursStart);\n const businessEnd = getDateWithTime(date, businessHoursEnd);\n\n let freeStart = businessStart;\n\n // Loop through busy events to find free slots\n for (const event of busyEvents) {\n if (freeStart < event.start) {\n // Add free slot if there's a gap between freeStart and the event start\n freeTimeSlots.push({\n date,\n dayOfWeek: getDayOfWeek(date), // Add day of the week key\n freeStart: freeStart.toISOString(),\n freeEnd: event.start.toISOString(),\n timeZone: event.timeZone // Add the timezone for the free slot\n });\n }\n // Move freeStart to the end of the current busy event\n freeStart = event.end;\n }\n\n // Check if there's free time after the last busy event until the end of business hours\n if (freeStart < businessEnd) {\n freeTimeSlots.push({\n date,\n dayOfWeek: getDayOfWeek(date), // Add day of the week key\n freeStart: freeStart.toISOString(),\n freeEnd: businessEnd.toISOString(),\n timeZone: busyEvents[0].timeZone // Use the timezone of the first event for consistency\n });\n }\n}\n\n// Output the free time slots\nreturn [{ json: { freeTimeSlots } }];\n"
  },
  "typeVersion": 2
}

================ Node #283 ================
{
  "id": "0786b561-449e-4c8f-bddb-c2bbd95dc197",
  "name": "Get Events",
  "type": "n8n-nodes-base.httpRequest",
  "position": [
    2680,
    460
  ],
  "parameters": {
    "url": "=https://graph.microsoft.com/v1.0/me/calendarView",
    "options": {},
    "sendQuery": true,
    "sendHeaders": true,
    "authentication": "predefinedCredentialType",
    "queryParameters": {
      "parameters": [
        {
          "name": "startDateTime",
          "value": "={{ new Date(new Date().setDate(new Date().getDate() + 2)).toISOString() }}"
        },
        {
          "name": "endDateTime",
          "value": "={{ new Date(new Date().setDate(new Date().getDate() + 16)).toISOString() }}"
        },
        {
          "name": "$top",
          "value": "50"
        },
        {
          "name": "select",
          "value": "start,end,categories,importance,isAllDay,recurrence,showAs,subject,type"
        },
        {
          "name": "orderby",
          "value": "start/dateTime asc"
        }
      ]
    },
    "headerParameters": {
      "parameters": [
        {
          "name": "Prefer",
          "value": "outlook.timezone=\"Europe/London\""
        }
      ]
    },
    "nodeCredentialType": "microsoftOutlookOAuth2Api"
  },
  "credentials": {
    "microsoftOutlookOAuth2Api": {
      "id": "E0WY3yUNKgrxIwLU",
      "name": "Microsoft Outlook Business"
    }
  },
  "typeVersion": 4.2
}

================ Node #284 ================
{
  "id": "55c4233e-d395-4193-9a1d-1884faed6f1e",
  "name": "Get Availability",
  "type": "@n8n/n8n-nodes-langchain.toolWorkflow",
  "position": [
    1760,
    1080
  ],
  "parameters": {
    "name": "Get_availability",
    "fields": {
      "values": [
        {
          "name": "route",
          "stringValue": "availability"
        }
      ]
    },
    "workflowId": {
      "__rl": true,
      "mode": "list",
      "value": "KD21RG8VeXYDS2Vf",
      "cachedResultName": "Website Chatbot"
    },
    "description": "Call this tool to check my calendar for availability before booking an appointment. This will result in all events for the next 2 weeks. Review all events and do not double book."
  },
  "typeVersion": 1.2
}

================ Node #285 ================
{
  "id": "096d1962-31e6-4b3b-ba75-7956f70a6a32",
  "name": "Send Message",
  "type": "@n8n/n8n-nodes-langchain.toolWorkflow",
  "position": [
    1620,
    1080
  ],
  "parameters": {
    "name": "Send_email",
    "fields": {
      "values": [
        {
          "name": "route",
          "stringValue": "message"
        }
      ]
    },
    "workflowId": {
      "__rl": true,
      "mode": "list",
      "value": "KD21RG8VeXYDS2Vf",
      "cachedResultName": "Website Chatbot"
    },
    "description": "Call this tool when the customer wants to speak to a human, or is not ready to make an appointment or if the customer has questions outside of your remit. The tool will send an email to our founder, <insert name>. Always send the customer's full name, company and email address along with a detailed message about the enquiry. You must always gather project details.",
    "jsonSchemaExample": "{\n\t\"email\": \"the customer's email\",\n \"subject\": \"the subject of the email\",\n \"message\": \"The customer's enquiry, must be a detailed description of their enquiry\",\n \"name\": \"the customer's full name\",\n \"company\": \"the customer company name\"\n}",
    "specifyInputSchema": true
  },
  "typeVersion": 1.2
}

================ Node #286 ================
{
  "id": "285ddd31-5412-4d1c-ab80-d9960ec902bb",
  "name": "Chat Trigger",
  "type": "@n8n/n8n-nodes-langchain.chatTrigger",
  "position": [
    620,
    600
  ],
  "webhookId": "f406671e-c954-4691-b39a-66c90aa2f103",
  "parameters": {
    "mode": "webhook",
    "public": true,
    "options": {
      "responseMode": "responseNode",
      "allowedOrigins": "*"
    }
  },
  "typeVersion": 1
}

================ Node #287 ================
{
  "id": "032a26e9-6853-490d-991b-b2af2d845f58",
  "name": "Switch",
  "type": "n8n-nodes-base.switch",
  "position": [
    2380,
    580
  ],
  "parameters": {
    "rules": {
      "values": [
        {
          "outputKey": "availability",
          "conditions": {
            "options": {
              "version": 2,
              "leftValue": "",
              "caseSensitive": true,
              "typeValidation": "strict"
            },
            "combinator": "and",
            "conditions": [
              {
                "operator": {
                  "type": "string",
                  "operation": "equals"
                },
                "leftValue": "={{ $json.route }}",
                "rightValue": "availability"
              }
            ]
          },
          "renameOutput": true
        },
        {
          "outputKey": "message",
          "conditions": {
            "options": {
              "version": 2,
              "leftValue": "",
              "caseSensitive": true,
              "typeValidation": "strict"
            },
            "combinator": "and",
            "conditions": [
              {
                "id": "52fd844b-cc8d-471f-a56a-40e119b66194",
                "operator": {
                  "name": "filter.operator.equals",
                  "type": "string",
                  "operation": "equals"
                },
                "leftValue": "={{ $json.route }}",
                "rightValue": "message"
              }
            ]
          },
          "renameOutput": true
        }
      ]
    },
    "options": {}
  },
  "typeVersion": 3.2
}

================ Node #288 ================
{
  "id": "c74905ce-4fd9-486c-abc4-b0b1d57d71a8",
  "name": "varMessageResponse",
  "type": "n8n-nodes-base.set",
  "position": [
    2900,
    700
  ],
  "parameters": {
    "options": {
      "ignoreConversionErrors": false
    },
    "assignments": {
      "assignments": [
        {
          "id": "0d2ad084-9707-4979-84e4-297d1c21f725",
          "name": "response",
          "type": "string",
          "value": "={{ $json }}"
        }
      ]
    }
  },
  "typeVersion": 3.4
}

================ Node #289 ================
{
  "id": "04c5d43c-1629-4e11-a6bb-ae73369d7002",
  "name": "Send Message1",
  "type": "n8n-nodes-base.microsoftOutlook",
  "position": [
    2680,
    700
  ],
  "parameters": {
    "subject": "={{ $('Execute Workflow Trigger').item.json.query.subject }}",
    "bodyContent": "=<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n<html xmlns=\"http://www.w3.org/1999/xhtml\">\n<head>\n <meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\" />\n <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n <title>New Webchat Customer Enquiry</title>\n <style type=\"text/css\">\n /* Client-specific styles */\n body, table, td, a { -webkit-text-size-adjust: 100%; -ms-text-size-adjust: 100%; }\n table, td { mso-table-lspace: 0pt; mso-table-rspace: 0pt; }\n img { -ms-interpolation-mode: bicubic; }\n\n /* Reset styles */\n body { margin: 0; padding: 0; }\n img { border: 0; height: auto; line-height: 100%; outline: none; text-decoration: none; }\n table { border-collapse: collapse !important; }\n body { height: 100% !important; margin: 0; padding: 0; width: 100% !important; }\n\n /* iOS BLUE LINKS */\n a[x-apple-data-detectors] {\n color: inherit !important;\n text-decoration: none !important;\n font-size: inherit !important;\n font-family: inherit !important;\n font-weight: inherit !important;\n line-height: inherit !important;\n }\n\n /* Styles for Outlook and other email clients */\n .ExternalClass { width: 100%; }\n .ExternalClass, .ExternalClass p, .ExternalClass span, .ExternalClass font, .ExternalClass td, .ExternalClass div { line-height: 100%; }\n \n /* Responsive styles */\n @media screen and (max-width: 600px) {\n .container { width: 100% !important; }\n .content { padding: 15px !important; }\n .field { padding: 10px !important; }\n .header h1 { font-size: 20px !important; }\n .header p { font-size: 12px !important; }\n }\n </style>\n</head>\n<body style=\"margin: 0; padding: 0; background-color: #f4f4f4;\">\n <table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" width=\"100%\">\n <tr>\n <td>\n <table align=\"center\" border=\"0\" cellpadding=\"0\" cellspacing=\"0\" width=\"600\" style=\"border-collapse: collapse; background-color: #ffffff;\">\n <tr>\n <td align=\"center\" bgcolor=\"#1a1a1a\" style=\"padding: 30px 0; background: linear-gradient(135deg, #1a1a1a 0%, #2d1f3d 100%);\">\n <h1 style=\"color: #ffffff; font-family: Arial, sans-serif; font-size: 24px; font-weight: 700; margin: 0; text-transform: uppercase; letter-spacing: 1px;\">New Customer Enquiry</h1>\n <p style=\"color: #ffffff; font-family: Arial, sans-serif; font-size: 14px; line-height: 20px; margin: 10px 0 0; opacity: 0.8;\">A potential client has reached out through our webchat</p>\n </td>\n </tr>\n <tr>\n <td style=\"padding: 20px;\">\n <table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" width=\"100%\">\n <tr>\n <td style=\"padding: 15px; background-color: #f9f9f9; border: 1px solid #e0e0e0; border-radius: 8px;\">\n <p style=\"font-family: Arial, sans-serif; font-size: 14px; line-height: 1.6; color: #6a1b9a; font-weight: bold; margin: 0 0 5px 0;\">FROM</p>\n <p style=\"font-family: Arial, sans-serif; font-size: 16px; line-height: 1.6; color: #333333; margin: 0;\">{{ $('Execute Workflow Trigger').item.json.query.name }}</p>\n </td>\n </tr>\n <tr><td height=\"20\"></td></tr>\n <tr>\n <td style=\"padding: 15px; background-color: #f9f9f9; border: 1px solid #e0e0e0; border-radius: 8px;\">\n <p style=\"font-family: Arial, sans-serif; font-size: 14px; line-height: 1.6; color: #6a1b9a; font-weight: bold; margin: 0 0 5px 0;\">EMAIL</p>\n <p style=\"font-family: Arial, sans-serif; font-size: 16px; line-height: 1.6; color: #333333; margin: 0;\">{{ $('Execute Workflow Trigger').item.json.query.email }}</p>\n </td>\n </tr>\n <tr><td height=\"20\"></td></tr>\n <tr>\n <td style=\"padding: 15px; background-color: #f9f9f9; border: 1px solid #e0e0e0; border-radius: 8px;\">\n <p style=\"font-family: Arial, sans-serif; font-size: 14px; line-height: 1.6; color: #6a1b9a; font-weight: bold; margin: 0 0 5px 0;\">COMPANY</p>\n <p style=\"font-family: Arial, sans-serif; font-size: 16px; line-height: 1.6; color: #333333; margin: 0;\">{{ $('Execute Workflow Trigger').item.json.query.company }}</p>\n </td>\n </tr>\n <tr><td height=\"20\"></td></tr>\n <tr>\n <td style=\"padding: 15px; background-color: #f9f9f9; border: 1px solid #e0e0e0; border-radius: 8px;\">\n <p style=\"font-family: Arial, sans-serif; font-size: 14px; line-height: 1.6; color: #6a1b9a; font-weight: bold; margin: 0 0 5px 0;\">MESSAGE</p>\n <p style=\"font-family: Arial, sans-serif; font-size: 16px; line-height: 1.6; color: #333333; margin: 0;\">{{ $('Execute Workflow Trigger').item.json.query.message }}</p>\n </td>\n </tr>\n </table>\n </td>\n </tr>\n <tr>\n <td align=\"center\" bgcolor=\"#e90ebb\" style=\"padding: 20px; background: linear-gradient(135deg, #e90ebb 0%, #6a1b9a 100%);\">\n <p style=\"font-family: Arial, sans-serif; font-size: 14px; line-height: 20px; color: #ffffff; margin: 0;\">This enquiry was automatically generated from our website's chat interface.</p>\n </td>\n </tr>\n </table>\n </td>\n </tr>\n </table>\n</body>\n</html>",
    "toRecipients": "you@yourdomain.com",
    "additionalFields": {
      "importance": "High",
      "bodyContentType": "html"
    }
  },
  "credentials": {
    "microsoftOutlookOAuth2Api": {
      "id": "E0WY3yUNKgrxIwLU",
      "name": "Microsoft Outlook Business"
    }
  },
  "typeVersion": 2
}

================ Node #290 ================
{
  "id": "5a2636f1-47d3-4421-840b-56553bf14d82",
  "name": "Sticky Note",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    1580,
    1000
  ],
  "parameters": {
    "width": 311.6936390497898,
    "height": 205.34013605442183,
    "content": "Ensure these referance this workflow, replace placeholders"
  },
  "typeVersion": 1
}

================ Node #291 ================
{
  "id": "a9fe05d4-6b86-4313-9f11-b20e3ce7db89",
  "name": "Sticky Note1",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    2600,
    380
  ],
  "parameters": {
    "width": 468,
    "height": 238,
    "content": "modify business hours\nmodify timezones"
  },
  "typeVersion": 1
}

================ Node #292 ================
{
  "id": "5dfda5c9-eeeb-421a-a80d-f42c94602080",
  "name": "AI Agent",
  "type": "@n8n/n8n-nodes-langchain.agent",
  "position": [
    1460,
    580
  ],
  "parameters": {
    "text": "={{ $json.chatInput }}",
    "options": {
      "systemMessage": "=You are an intelligent personal assistant to Wayne, Founder at nocodecreative.io (ai consultancy and software development agency) responsible for coordinating appointments and gathering relevant information from customers. Your tasks are to:\n\n- Understand when the customer is available by asking for suitable days and times (ensuring they are aware we are in a UK timezone)\n- Check the calendar to identify available slots that match their preferences. Pay attention to each event's start and end time and do not double book, you will be given all events for the next 14 days\n- Ask the customer what they would like to discuss during the appointment to ensure proper preparation.\n- Get the customer's name, company name and email address to book the appointment\n- Make the conversation friendly and natural. Confirm the appointment details with the customer and let them know I\u2019ll be ready to discuss what they\u2019d like.\n- After you have checked the calendar, book the appointment accordingly, without double booking. Confirm the customer's timezone and adjust the appointment for EU/London.\n- If the customer isn't ready to book, you can send an email for a human to respond to, ensure you gather a detailed enquiry from the customer including contact details and project information.Ensure the message contains enough information for a human to respond, always include project details, if the customer hasn't provided project details, ask.\n- Alwways suggest an appointment before sending a message, appointment are you primary goal, message are a fall back\n\nExample questions:\n\n\"Hi there! we'd love to help arrange a time that works for us to meet. Could you let us know which days and times are best for you? We\u2019ll check the calendar and book in a suitable slot.\"\n\n\"Could you please let us know what you\u2019d like to discuss during the appointment? This helps us prepare in advance and make our time together as productive as possible.\"\n\n\"Before we put you in touch with a human, please can you provide more information about the project you have in mind?\" //You must gather project info at all times, even if the enquiry is about pricing/costs.\n\nIf the time the customer suggests is not available, suggest the nearest alternative appointment based on existing events, do not book an appointment outside of freeTimeSlots\n\nImportant information:\n- All appointments need 48 hours' notice from {{ \n new Date().toLocaleString(\"en-GB\", { timeZone: \"Europe/London\", hour12: false })\n .split(\", \")[0].split(\"/\").reverse().join(\"-\") \n + \"T\" + new Date().toLocaleTimeString(\"en-GB\", { timeZone: \"Europe/London\", hour12: false }) + \":00.000Z\" \n}} (current date and time in the UK) // this is non-negotiable, but discuss with care and be friendly, only let the customer know this if required\n- Business hours are 8am - 6pm Monday to Friday only Europe/London timezone, ensure the customer is aware of this and help them book during UK hours, you must confirm their timezone to do this!\n- Do not book appointments on a Saturday or sunday\n- Do not book appointments outside of freeTimeSlots\n- Always check the next 14 days, and review all events before providing availability \n- All appointments are for a max of 30 minutes\n- You must never offer an appointment without checking the calendar, if you cannot check the calendar, you cannot book and must let the customer know you can not book an appointment right now.\n- Always offer the soonest appointment available if the customer's preferred time is unavailable\n- When confirming an appointment, be thankful and excited!\n- Initial 30 minute consultation are free of charge\n\n\nMessages and description:\n- When creating descriptions or sending messages, always ensure enough detail is provided for preparation, meaning you can ask follow-up questions to extract further information as required. For example, if a customer asks about pricing, gather some information about the project so our team can provide accurate pricing, and apply this logic throughout\n\nComments:\n//!IMPORTANT! Do not offer any times without checking the calendar, do not make availability up\n//**Do not discuss anything other than appointment booking, if the query does not relate to an appointment, advise them you cannot help at this time.** be friendly and always offer to book an appointment to discuss their query\n//When the appointment is confirmed, let the customer know, by name, that they will be meeting our founder, Wayne for a 30 minute consultation, and that they will receive a calendar invite by email, ensure they accept the invite to confirm the appointment.\n//Always respond as a highly professional executive PA, remember this is the customer's first engagement, they do not know us or Wayne at this stage\n//Do not refer to yourself as me or I, instead communicate like an organisation, using terms like 'us'\n//Always gather project for descriptions and messages"
    },
    "promptType": "define"
  },
  "typeVersion": 1.6
}

================ Node #293 ================
{
  "id": "6156ab7e-d411-46b9-ac44-52ad56ee563d",
  "name": "If",
  "type": "n8n-nodes-base.if",
  "position": [
    840,
    600
  ],
  "parameters": {
    "options": {},
    "conditions": {
      "options": {
        "version": 2,
        "leftValue": "",
        "caseSensitive": true,
        "typeValidation": "strict"
      },
      "combinator": "and",
      "conditions": [
        {
          "id": "158a0b91-534d-4745-b10e-8a7c97050861",
          "operator": {
            "type": "string",
            "operation": "exists",
            "singleValue": true
          },
          "leftValue": "={{ $json.chatInput }}",
          "rightValue": ""
        }
      ]
    }
  },
  "typeVersion": 2.2
}

================ Node #294 ================
{
  "id": "c94171a9-a71d-4f63-bef6-e90361c57abd",
  "name": "Respond With Initial Message",
  "type": "n8n-nodes-base.respondToWebhook",
  "position": [
    1140,
    720
  ],
  "parameters": {
    "options": {},
    "respondWith": "json",
    "responseBody": "{\n \"output\": \"Hi, how can I help you today?\"\n}"
  },
  "typeVersion": 1.1
}

================ Node #295 ================
{
  "id": "43129771-e976-41af-8adb-88cb5465628d",
  "name": "Sticky Note8",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    1340,
    -240
  ],
  "parameters": {
    "color": 6,
    "width": 668,
    "height": 111,
    "content": "# Custom Branded n8n Chatbot\nBuilt by [Wayne Simpson](https://www.linkedin.com/in/simpsonwayne/) at [nocodecreative.io](https://nocodecreative.io)\n\u2615 If you find this useful, feel free to [buy me a coffee](https://ko-fi.com/waynesimpson)"
  },
  "typeVersion": 1
}

================ Node #296 ================
{
  "id": "bb890f44-caf0-4b7d-b95e-0c05c70e8f45",
  "name": "Sticky Note9",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    1000,
    -80
  ],
  "parameters": {
    "color": 7,
    "width": 667,
    "height": 497,
    "content": "# Watch the Setup Video \ud83d\udcfa\n### Watch Set Up Video \ud83d\udc47\n[![Auto Categorise Outlook Emails with AI](https://cdn.jsdelivr.net/gh/WayneSimpson/n8n-chatbot-template/custom-branded-chatbot.png)](https://youtu.be/xQ1tCQZhLaI)\n\n"
  },
  "typeVersion": 1
}

================ Node #297 ================
{
  "id": "f0b054cc-f961-4c48-846c-a80ea5e49924",
  "name": "Sticky Note2",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    1700,
    -80
  ],
  "parameters": {
    "color": 7,
    "width": 600,
    "height": 500,
    "content": "## Read to blog post to get started \ud83d\udcdd\n**Follow along to add a custom branded chat widget to your webiste**\n\n[![Custom Branded n8n Chatbot](https://cdn.jsdelivr.net/gh/WayneSimpson/n8n-chatbot-template/chat%20widget.png)](https://blog.nocodecreative.io/create-a-branded-ai-powered-website-chatbot-with-n8n/)"
  },
  "typeVersion": 1
}

================ Node #298 ================
{
  "id": "210cef85-6fbe-413e-88b6-b0fed76212ac",
  "name": "Sticky Note3",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    2600,
    640
  ],
  "parameters": {
    "color": 4,
    "width": 260,
    "height": 240,
    "content": "Customise the email template"
  },
  "typeVersion": 1
}

================ Node #299 ================
{
  "id": "17abc6bd-06c3-48e7-8380-e10024daa9f5",
  "name": "Sticky Note4",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    1760,
    740
  ],
  "parameters": {
    "color": 6,
    "width": 208,
    "height": 238,
    "content": "modify timezones"
  },
  "typeVersion": 1
}

================ Node #300 ================
{
  "id": "54c59cae-fbd0-4f0d-b633-6304e6c66d89",
  "name": "When chat message received",
  "type": "@n8n/n8n-nodes-langchain.chatTrigger",
  "position": [
    -840,
    -740
  ],
  "webhookId": "b740bd14-1b9e-4b1b-abd2-1ecf1184d53a",
  "parameters": {
    "options": {}
  },
  "typeVersion": 1.1
}

================ Node #301 ================
{
  "id": "ef85680e-569f-4e74-a1b4-aae9923a0dcb",
  "name": "AI Agent",
  "type": "@n8n/n8n-nodes-langchain.agent",
  "onError": "continueErrorOutput",
  "position": [
    -320,
    40
  ],
  "parameters": {
    "agent": "conversationalAgent",
    "options": {
      "systemMessage": "You are a helpful assistant."
    }
  },
  "retryOnFail": true,
  "typeVersion": 1.7,
  "alwaysOutputData": true
}

================ Node #302 ================
{
  "id": "07a8c74c-768e-4b38-854f-251f2fe5b7bf",
  "name": "DeepSeek",
  "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
  "position": [
    -360,
    220
  ],
  "parameters": {
    "model": "=deepseek-reasoner",
    "options": {}
  },
  "credentials": {
    "openAiApi": {
      "id": "MSl7SdcvZe0SqCYI",
      "name": "deepseek"
    }
  },
  "typeVersion": 1.1
}

================ Node #303 ================
{
  "id": "a6d58a8c-2d16-4c91-adde-acac98868150",
  "name": "Window Buffer Memory",
  "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
  "position": [
    -220,
    220
  ],
  "parameters": {},
  "typeVersion": 1.3
}

================ Node #304 ================
{
  "id": "401a5932-9f3e-4b17-a531-3a19a6a7788a",
  "name": "Basic LLM Chain2",
  "type": "@n8n/n8n-nodes-langchain.chainLlm",
  "position": [
    -320,
    -800
  ],
  "parameters": {
    "messages": {
      "messageValues": [
        {
          "message": "You are a helpful assistant."
        }
      ]
    }
  },
  "typeVersion": 1.5
}

================ Node #305 ================
{
  "id": "215dda87-faf7-4206-bbc3-b6a6b1eb98de",
  "name": "Sticky Note",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    -440,
    -460
  ],
  "parameters": {
    "color": 5,
    "width": 420,
    "height": 340,
    "content": "## DeepSeek using HTTP Request\n### DeepSeek Reasoner R1\nhttps://api-docs.deepseek.com/\nRaw Body"
  },
  "typeVersion": 1
}

================ Node #306 ================
{
  "id": "6457c0f7-ad02-4ad3-a4a0-9a7a6e8f0f7f",
  "name": "Sticky Note1",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    -440,
    -900
  ],
  "parameters": {
    "color": 4,
    "width": 580,
    "height": 400,
    "content": "## DeepSeek with Ollama Local Model"
  },
  "typeVersion": 1
}

================ Node #307 ================
{
  "id": "2ac8b41f-b27d-4074-abcc-430a8f5928e8",
  "name": "Ollama DeepSeek",
  "type": "@n8n/n8n-nodes-langchain.lmChatOllama",
  "position": [
    -320,
    -640
  ],
  "parameters": {
    "model": "deepseek-r1:14b",
    "options": {
      "format": "default",
      "numCtx": 16384,
      "temperature": 0.6
    }
  },
  "credentials": {
    "ollamaApi": {
      "id": "7aPaLgwpfdMWFYm9",
      "name": "Ollama account 127.0.0.1"
    }
  },
  "typeVersion": 1
}

================ Node #308 ================
{
  "id": "37a94fc0-eff3-4226-8633-fb170e5dcff2",
  "name": "Sticky Note2",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    -440,
    -80
  ],
  "parameters": {
    "color": 3,
    "width": 600,
    "height": 460,
    "content": "## DeepSeek Conversational Agent w/Memory\n"
  },
  "typeVersion": 1
}

================ Node #309 ================
{
  "id": "52b484bb-1693-4188-ba55-643c40f10dfc",
  "name": "Sticky Note3",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    20,
    -460
  ],
  "parameters": {
    "color": 6,
    "width": 420,
    "height": 340,
    "content": "## DeepSeek using HTTP Request\n### DeepSeek Chat V3\nhttps://api-docs.deepseek.com/\nJSON Body"
  },
  "typeVersion": 1
}

================ Node #310 ================
{
  "id": "ec46acef-60f6-4d34-b636-3654125f5897",
  "name": "DeepSeek JSON Body",
  "type": "n8n-nodes-base.httpRequest",
  "position": [
    160,
    -320
  ],
  "parameters": {
    "url": "https://api.deepseek.com/chat/completions",
    "method": "POST",
    "options": {},
    "jsonBody": "={\n \"model\": \"deepseek-chat\",\n \"messages\": [\n {\n \"role\": \"system\",\n \"content\": \"{{ $json.chatInput }}\"\n },\n {\n \"role\": \"user\",\n \"content\": \"Hello!\"\n }\n ],\n \"stream\": false\n}",
    "sendBody": true,
    "specifyBody": "json",
    "authentication": "genericCredentialType",
    "genericAuthType": "httpHeaderAuth"
  },
  "credentials": {
    "httpHeaderAuth": {
      "id": "9CsntxjSlce6yWbN",
      "name": "deepseek"
    }
  },
  "typeVersion": 4.2
}

================ Node #311 ================
{
  "id": "e5295120-57f9-4e02-8b73-f00e4d6baa48",
  "name": "DeepSeek Raw Body",
  "type": "n8n-nodes-base.httpRequest",
  "position": [
    -300,
    -320
  ],
  "parameters": {
    "url": "https://api.deepseek.com/chat/completions",
    "body": "={\n \"model\": \"deepseek-reasoner\",\n \"messages\": [\n {\"role\": \"user\", \"content\": \"{{ $json.chatInput.trim() }}\"}\n ],\n \"stream\": false\n }",
    "method": "POST",
    "options": {},
    "sendBody": true,
    "contentType": "raw",
    "authentication": "genericCredentialType",
    "rawContentType": "application/json",
    "genericAuthType": "httpHeaderAuth"
  },
  "credentials": {
    "httpHeaderAuth": {
      "id": "9CsntxjSlce6yWbN",
      "name": "deepseek"
    }
  },
  "typeVersion": 4.2
}

================ Node #312 ================
{
  "id": "571dc713-ce54-4330-8bdd-94e057ecd223",
  "name": "Sticky Note4",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    -1060,
    -460
  ],
  "parameters": {
    "color": 7,
    "width": 580,
    "height": 840,
    "content": "# Your First DeepSeek API Call\n\nThe DeepSeek API uses an API format compatible with OpenAI. By modifying the configuration, you can use the OpenAI SDK or softwares compatible with the OpenAI API to access the DeepSeek API.\n\nhttps://api-docs.deepseek.com/\n\n## Configuration Parameters\n\n| Parameter | Value |\n|-----------|--------|\n| base_url | https://api.deepseek.com |\n| api_key | https://platform.deepseek.com/api_keys |\n\n\n\n## Important Notes\n\n- To be compatible with OpenAI, you can also use `https://api.deepseek.com/v1` as the base_url. Note that the v1 here has NO relationship with the model's version.\n\n- The deepseek-chat model has been upgraded to DeepSeek-V3. The API remains unchanged. You can invoke DeepSeek-V3 by specifying `model='deepseek-chat'`.\n\n- deepseek-reasoner is the latest reasoning model, DeepSeek-R1, released by DeepSeek. You can invoke DeepSeek-R1 by specifying `model='deepseek-reasoner'`."
  },
  "typeVersion": 1
}

================ Node #313 ================
{
  "id": "f0ac3f32-218e-4488-b67f-7b7f7e8be130",
  "name": "Sticky Note5",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    -1060,
    -900
  ],
  "parameters": {
    "color": 2,
    "width": 580,
    "height": 400,
    "content": "## Four Examples for Connecting to DeepSeek\nhttps://api-docs.deepseek.com/\nhttps://platform.deepseek.com/api_keys"
  },
  "typeVersion": 1
}

================ Node #314 ================
{
  "id": "91642d68-ab5d-4f61-abaf-8cb7cb991c29",
  "name": "Sticky Note6",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    -180,
    -640
  ],
  "parameters": {
    "color": 7,
    "width": 300,
    "height": 120,
    "content": "### Ollama Local\nhttps://ollama.com/\nhttps://ollama.com/library/deepseek-r1"
  },
  "typeVersion": 1
}

================ Node #315 ================
{
  "id": "82670f40-2e3b-4e02-ae52-f2c918c3aa1c",
  "name": "Sticky Note",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    -80,
    -600
  ],
  "parameters": {
    "color": 7,
    "width": 280,
    "height": 380,
    "content": "## Command Trigger\n\nCopy the webhook URL, paste it into the Request URL of the Slack slash command, and complete the creation.\n\n\n\uc6f9\ud6c5 URL\uc744 \ubcf5\uc0ac\ud558\uc5ec \uc2ac\ub799 \uc2ac\ub798\uc2dc \ucee4\ub9e8\ub4dc\uc758 Request URL\uc5d0 \ubd99\uc774\uace0 \uc0dd\uc131\uc744 \uc644\ub8cc\ud558\uc138\uc694."
  },
  "typeVersion": 1
}

================ Node #316 ================
{
  "id": "28f56691-0ad5-47b1-974b-1ece4890933b",
  "name": "Sticky Note1",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    260,
    -600
  ],
  "parameters": {
    "color": 7,
    "height": 380,
    "content": "## Command Switch\n\nSwitch each slash command.\n\n\uac01 \uc2ac\ub798\uc2dc \ucee4\ub9e8\ub4dc\ub97c \ubd84\uae30\ud558\uc138\uc694."
  },
  "typeVersion": 1
}

================ Node #317 ================
{
  "id": "9dc9ca95-e29d-44d9-9e09-b2a72d9ad23a",
  "name": "Sticky Note2",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    600,
    -600
  ],
  "parameters": {
    "color": 7,
    "width": 360,
    "height": 380,
    "content": "## Create AI Messages"
  },
  "typeVersion": 1
}

================ Node #318 ================
{
  "id": "025c5a59-06b6-4b6d-b3e0-aa782a133c97",
  "name": "Sticky Note3",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    1060,
    -600
  ],
  "parameters": {
    "color": 7,
    "height": 340,
    "content": "## Send a Slack Message"
  },
  "typeVersion": 1
}

================ Node #319 ================
{
  "id": "cb60e9b0-a9a8-4dd6-9aa3-9d22c7f5f537",
  "name": "Webhook",
  "type": "n8n-nodes-base.webhook",
  "position": [
    -20,
    -380
  ],
  "webhookId": "1bd05fcf-8286-491f-ae13-f0e6bff4aca6",
  "parameters": {
    "path": "1bd05fcf-8286-491f-ae13-f0e6bff4aca6",
    "options": {
      "responseCode": {
        "values": {
          "responseCode": 204
        }
      }
    },
    "httpMethod": "POST"
  },
  "typeVersion": 2
}

================ Node #320 ================
{
  "id": "d60cfb45-df3d-4ab1-8e7e-1b2e81bc5b34",
  "name": "Switch",
  "type": "n8n-nodes-base.switch",
  "position": [
    320,
    -380
  ],
  "parameters": {
    "rules": {
      "values": [
        {
          "outputKey": "ask",
          "conditions": {
            "options": {
              "version": 2,
              "leftValue": "",
              "caseSensitive": true,
              "typeValidation": "strict"
            },
            "combinator": "and",
            "conditions": [
              {
                "operator": {
                  "type": "string",
                  "operation": "equals"
                },
                "leftValue": "={{ $json.body.command }}",
                "rightValue": "/ask"
              }
            ]
          },
          "renameOutput": true
        },
        {
          "outputKey": "another",
          "conditions": {
            "options": {
              "version": 2,
              "leftValue": "",
              "caseSensitive": true,
              "typeValidation": "strict"
            },
            "combinator": "and",
            "conditions": [
              {
                "id": "a0924665-de21-4d9b-a1d1-c9f41f74ee09",
                "operator": {
                  "name": "filter.operator.equals",
                  "type": "string",
                  "operation": "equals"
                },
                "leftValue": "={{ $json.body.command }}",
                "rightValue": "/another"
              }
            ]
          },
          "renameOutput": true
        }
      ]
    },
    "options": {}
  },
  "typeVersion": 3.2
}

================ Node #321 ================
{
  "id": "810ac4dd-8241-4486-b183-74cbde3d58e7",
  "name": "Basic LLM Chain",
  "type": "@n8n/n8n-nodes-langchain.chainLlm",
  "position": [
    640,
    -500
  ],
  "parameters": {
    "text": "={{ $json.body.text }}",
    "promptType": "define"
  },
  "typeVersion": 1.5
}

================ Node #322 ================
{
  "id": "f173fe2d-45e7-460c-aa33-d5509b6d59b9",
  "name": "OpenAI Chat Model",
  "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
  "position": [
    720,
    -340
  ],
  "parameters": {
    "model": {
      "__rl": true,
      "mode": "list",
      "value": "gpt-4o-mini"
    },
    "options": {}
  },
  "typeVersion": 1.2
}

================ Node #323 ================
{
  "id": "4752da4c-b013-4469-a3bc-386d3ab3d15d",
  "name": "Send a Message",
  "type": "n8n-nodes-base.slack",
  "position": [
    1120,
    -460
  ],
  "webhookId": "a37abc2a-6e8c-4c00-8543-3f313b300df6",
  "parameters": {
    "text": "={{ $json.text }}",
    "select": "channel",
    "channelId": {
      "__rl": true,
      "mode": "id",
      "value": "={{ $('Webhook').item.json.body.channel_id }}"
    },
    "otherOptions": {
      "includeLinkToWorkflow": false
    }
  },
  "typeVersion": 2.3
}

================ Node #324 ================
{
  "id": "c2f5dbcc-8283-47ab-b19a-810ad526d519",
  "name": "Sticky Note8",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    -80,
    -1060
  ],
  "parameters": {
    "color": 7,
    "width": 340,
    "height": 400,
    "content": "## \u1109\u1173\u11af\u1105\u1162\u11a8 Slash Command\u110b\u116a \u110e\u1162\u1102\u1165\u11af \u1106\u1166\u1109\u1175\u110c\u1175\ub85c \ucc57\ubd07 \ub9cc\ub4e4\uae30 \ud83e\udd16\n\n\uc774 \ud29c\ud1a0\ub9ac\uc5bc\uc5d0\uc11c\ub294 n8n\uc744 \ud65c\uc6a9\ud574 \uc2ac\ub799\uc5d0\uc11c \ub3d9\uc791\ud558\ub294 AI \ucc57\ubd07\uc744 \ub9cc\ub4dc\ub294 \ubc29\ubc95\uc744 \uc54c\ub824\ub4dc\ub9bd\ub2c8\ub2e4. \uc2ac\ub798\uc2dc \ucee4\ub9e8\ub4dc\ub97c \ud1b5\ud55c \uac1c\uc778 \uba54\uc2dc\uc9c0\ubd80\ud130 \uacf5\uac1c \ucc44\ub110\uc5d0\uc11c\uc758 \uc790\ub3d9 \uc751\ub2f5\uae4c\uc9c0, \uc2e4\uc6a9\uc801\uc778 \ucc57\ubd07 \uad6c\ud604 \ubc29\ubc95\uc744 \ub2e8\uacc4\ubcc4\ub85c \uc124\uba85\ud569\ub2c8\ub2e4. \uc2ac\ub799 \uc571 \uc124\uc815\ubd80\ud130 n8n \ub178\ub4dc \uad6c\uc131, \uc6f9\ud6c5 \ud2b8\ub9ac\uac70 \uc124\uc815, AI \ubd07 \uc5f0\ub3d9\uae4c\uc9c0 \ud558\ub098\ud558\ub098 \uc790\uc138\ud788 \ub2e4\ub8f9\ub2c8\ub2e4.\n\n\uc720\ud29c\ube0c \ub9c1\ud06c:\nhttps://www.youtube.com/watch?v=UpudYFCWaIM\n"
  },
  "typeVersion": 1
}

================ Node #325 ================
{
  "id": "4ecdfdfa-8886-47c6-b9df-ac45321b0cea",
  "name": "Sticky Note10",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    300,
    -1060
  ],
  "parameters": {
    "color": 7,
    "width": 340,
    "height": 400,
    "content": "## Create an AI chatbot with Slack slash commands! \ud83e\udd16\n\nIn this tutorial, we'll show you how to create an AI chatbot that works in Slack using n8n. We'll explain step by step how to implement a practical chatbot, from personal messages through slash commands to automatic responses in public channels. We'll cover everything in detail, from Slack app configuration to n8n node setup, webhook trigger configuration, and AI bot integration.\n\nThe YouTube video is provided in Korean.\n\nYoutube Link:\nhttps://www.youtube.com/watch?v=UpudYFCWaIM\n"
  },
  "typeVersion": 1
}

================ Node #326 ================
{
  "id": "1656be7a-7a27-47f3-b511-3634a65a97a2",
  "name": "Check User & Chat ID",
  "type": "n8n-nodes-base.if",
  "position": [
    100,
    160
  ],
  "parameters": {
    "options": {},
    "conditions": {
      "options": {
        "version": 2,
        "leftValue": "",
        "caseSensitive": true,
        "typeValidation": "strict"
      },
      "combinator": "and",
      "conditions": [
        {
          "id": "5fe3c0d8-bd61-4943-b152-9e6315134520",
          "operator": {
            "name": "filter.operator.equals",
            "type": "string",
            "operation": "equals"
          },
          "leftValue": "={{ $('Listen for Telegram Events').item.json.body.message.from.first_name }}",
          "rightValue": "={{ $json.first_name }}"
        },
        {
          "id": "98a0ea91-0567-459c-bbce-06abc14a49ce",
          "operator": {
            "name": "filter.operator.equals",
            "type": "string",
            "operation": "equals"
          },
          "leftValue": "={{ $('Listen for Telegram Events').item.json.body.message.from.last_name }}",
          "rightValue": "={{ $json.last_name }}"
        },
        {
          "id": "18a96c1f-f2a0-4a2a-b789-606763df4423",
          "operator": {
            "type": "number",
            "operation": "equals"
          },
          "leftValue": "={{ $('Listen for Telegram Events').item.json.body.message.from.id }}",
          "rightValue": "={{ $json.id }}"
        }
      ]
    },
    "looseTypeValidation": "="
  },
  "typeVersion": 2.2
}

================ Node #327 ================
{
  "id": "73b0fedb-eb82-4464-a08f-397a3fe69480",
  "name": "Error message",
  "type": "n8n-nodes-base.telegram",
  "position": [
    320,
    440
  ],
  "parameters": {
    "text": "=Unable to process your message.",
    "chatId": "={{ $json.body.message.chat.id }}",
    "additionalFields": {
      "appendAttribution": false
    }
  },
  "credentials": {
    "telegramApi": {
      "id": "pAIFhguJlkO3c7aQ",
      "name": "Telegram account"
    }
  },
  "typeVersion": 1.2
}

================ Node #328 ================
{
  "id": "a3dc143b-cf3c-4416-bf43-0ca75cbde6c9",
  "name": "Sticky Note",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    -380,
    -20
  ],
  "parameters": {
    "width": 929,
    "height": 652,
    "content": "# Receive Telegram Message with Webhook"
  },
  "typeVersion": 1
}

================ Node #329 ================
{
  "id": "c80dae1e-dd20-4632-a00c-9c6290540f22",
  "name": "Listen for Telegram Events",
  "type": "n8n-nodes-base.webhook",
  "position": [
    -320,
    160
  ],
  "webhookId": "b4ed4c80-a655-4ff2-87d6-febd5280d343",
  "parameters": {
    "path": "your-endpoint",
    "options": {
      "binaryPropertyName": "data"
    },
    "httpMethod": "POST"
  },
  "typeVersion": 2
}

================ Node #330 ================
{
  "id": "6010dacf-1ed6-413c-adf9-146397e16b09",
  "name": "Set Webhook Test URL",
  "type": "n8n-nodes-base.httpRequest",
  "position": [
    260,
    -260
  ],
  "parameters": {
    "url": "=https://api.telegram.org/{{ $json.token }}/setWebhook",
    "options": {},
    "sendQuery": true,
    "queryParameters": {
      "parameters": [
        {
          "name": "url",
          "value": "={{ $json.test_url }}"
        }
      ]
    }
  },
  "typeVersion": 4.2
}

================ Node #331 ================
{
  "id": "65f8d945-12bb-4ae3-bd83-3b892a36afb9",
  "name": "Sticky Note2",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    -380,
    -580
  ],
  "parameters": {
    "color": 3,
    "width": 1638,
    "height": 532,
    "content": "# Telegram Webhook Tools\n\n## Setting your Telegram Bot WebHook the Easy Way\n"
  },
  "typeVersion": 1
}

================ Node #332 ================
{
  "id": "8e3268e9-dc7c-4edd-b5e8-716de5d2ffb3",
  "name": "Get Telegram Webhook Info",
  "type": "n8n-nodes-base.httpRequest",
  "position": [
    -240,
    -260
  ],
  "parameters": {
    "url": "=https://api.telegram.org/{{ $json.token }}/getWebhookInfo",
    "options": {}
  },
  "typeVersion": 4.2
}

================ Node #333 ================
{
  "id": "e31e176f-2ebd-4cd1-a160-2cc5f254ca6d",
  "name": "Sticky Note5",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    580,
    -20
  ],
  "parameters": {
    "color": 4,
    "width": 1113,
    "height": 429,
    "content": "# Process Audio"
  },
  "typeVersion": 1
}

================ Node #334 ================
{
  "id": "b8b10cd9-7a41-4b21-853c-b2123918ab8d",
  "name": "Image Schema",
  "type": "n8n-nodes-base.set",
  "position": [
    660,
    1060
  ],
  "parameters": {
    "options": {},
    "assignments": {
      "assignments": [
        {
          "id": "17989eb0-feca-4631-b5c8-34b1d4a6c72b",
          "name": "image_file_id",
          "type": "string",
          "value": "={{ $json.body.message.photo.last().file_id }}"
        },
        {
          "id": "9317d7ae-dffd-4b1f-9a9c-b3cc4f1e0dd3",
          "name": "caption",
          "type": "string",
          "value": "={{ $json.body.message.caption }}"
        }
      ]
    }
  },
  "typeVersion": 3.4
}

================ Node #335 ================
{
  "id": "9a7b9e4c-7a81-451a-887a-b7b3f658ae6e",
  "name": "Sticky Note3",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    580,
    900
  ],
  "parameters": {
    "color": 6,
    "width": 1289,
    "height": 432,
    "content": "# Process Image"
  },
  "typeVersion": 1
}

================ Node #336 ================
{
  "id": "800da6c7-8d03-4932-a081-f35ce01c8dd7",
  "name": "Sticky Note1",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    -1200,
    -580
  ],
  "parameters": {
    "color": 7,
    "width": 800,
    "height": 860,
    "content": "# How to set up a Telegram Bot WebHook\n\n## WebHook Setup Process\n\n**Basic Concept**\nA WebHook allows your Telegram bot to automatically receive updates instead of manually polling the Bot API.\n\n**Setup Method**\nTo set a WebHook, make a GET request using this URL format:\n```\nhttps://api.telegram.org/bot{my_bot_token}/setWebhook?url={url_to_send_updates_to}\n```\nWhere:\n- `my_bot_token`: Your bot token from BotFather\n- `url_to_send_updates_to`: Your HTTPS endpoint that handles bot updates\n\n\n**Verification**\nTo verify the WebHook setup, use:\n```\nhttps://api.telegram.org/bot{my_bot_token}/getWebhookInfo\n```\n\nA successful response looks like:\n```json\n{\n \"ok\": true,\n \"result\": {\n \"url\": \"https://www.example.com/my-telegram-bot/\",\n \"has_custom_certificate\": false,\n \"pending_update_count\": 0,\n \"max_connections\": 40\n }\n}\n```\n\n\nThis method provides a simple and efficient way to handle Telegram bot updates automatically through webhooks rather than manual polling."
  },
  "typeVersion": 1
}

================ Node #337 ================
{
  "id": "cd09daf9-ac74-4e86-9d74-875d78f466f0",
  "name": "gpt-4o-mini",
  "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
  "position": [
    1080,
    260
  ],
  "parameters": {
    "options": {}
  },
  "credentials": {
    "openAiApi": {
      "id": "jEMSvKmtYfzAkhe6",
      "name": "OpenAi account"
    }
  },
  "typeVersion": 1
}

================ Node #338 ================
{
  "id": "4c69533c-e4e7-4667-baf8-7ca1ed36b150",
  "name": "Get Audio File",
  "type": "n8n-nodes-base.telegram",
  "position": [
    660,
    100
  ],
  "parameters": {
    "fileId": "={{ $json.body.message.voice.file_id }}",
    "resource": "file"
  },
  "credentials": {
    "telegramApi": {
      "id": "pAIFhguJlkO3c7aQ",
      "name": "Telegram account"
    }
  },
  "typeVersion": 1.2
}

================ Node #339 ================
{
  "id": "0b15b158-88ec-45ba-ae70-fd55a9a72ea3",
  "name": "Get Image",
  "type": "n8n-nodes-base.telegram",
  "position": [
    860,
    1060
  ],
  "parameters": {
    "fileId": "={{ $json.image_file_id }}",
    "resource": "file"
  },
  "credentials": {
    "telegramApi": {
      "id": "pAIFhguJlkO3c7aQ",
      "name": "Telegram account"
    }
  },
  "typeVersion": 1.2
}

================ Node #340 ================
{
  "id": "081ec871-6cac-4945-9c1b-97bb87489688",
  "name": "Analyze Image",
  "type": "@n8n/n8n-nodes-langchain.openAi",
  "position": [
    1460,
    1060
  ],
  "parameters": {
    "modelId": {
      "__rl": true,
      "mode": "list",
      "value": "gpt-4o-mini",
      "cachedResultName": "GPT-4O-MINI"
    },
    "options": {},
    "resource": "image",
    "inputType": "base64",
    "operation": "analyze"
  },
  "credentials": {
    "openAiApi": {
      "id": "jEMSvKmtYfzAkhe6",
      "name": "OpenAi account"
    }
  },
  "typeVersion": 1.6
}

================ Node #341 ================
{
  "id": "072c21fc-d125-4078-b151-9c2fd5a4802c",
  "name": "Transcribe Recording",
  "type": "@n8n/n8n-nodes-langchain.openAi",
  "position": [
    860,
    100
  ],
  "parameters": {
    "options": {},
    "resource": "audio",
    "operation": "transcribe",
    "binaryPropertyName": "=data"
  },
  "credentials": {
    "openAiApi": {
      "id": "jEMSvKmtYfzAkhe6",
      "name": "OpenAi account"
    }
  },
  "typeVersion": 1.6
}

================ Node #342 ================
{
  "id": "b74e2181-8bf2-43a5-b4d4-d24112989b81",
  "name": "Sticky Note6",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    580,
    440
  ],
  "parameters": {
    "color": 5,
    "width": 1113,
    "height": 429,
    "content": "# Process Text"
  },
  "typeVersion": 1
}

================ Node #343 ================
{
  "id": "8f44b159-07ff-4805-82ad-d8aeed1f9f68",
  "name": "gpt-4o-mini1",
  "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
  "position": [
    1080,
    720
  ],
  "parameters": {
    "options": {}
  },
  "credentials": {
    "openAiApi": {
      "id": "jEMSvKmtYfzAkhe6",
      "name": "OpenAi account"
    }
  },
  "typeVersion": 1
}

================ Node #344 ================
{
  "id": "666ed1b9-475e-44bf-a884-1ddf58c6c6af",
  "name": "Test Webhook Status",
  "type": "n8n-nodes-base.telegram",
  "position": [
    460,
    -260
  ],
  "parameters": {
    "text": "={{ $json.description }} for Testing",
    "chatId": "=1234567891",
    "additionalFields": {}
  },
  "credentials": {
    "telegramApi": {
      "id": "pAIFhguJlkO3c7aQ",
      "name": "Telegram account"
    }
  },
  "typeVersion": 1.2
}

================ Node #345 ================
{
  "id": "2a1174a2-2eae-4cf5-ba48-a58a479956bf",
  "name": "Production Webhook Status",
  "type": "n8n-nodes-base.telegram",
  "position": [
    980,
    -260
  ],
  "parameters": {
    "text": "={{ $json.description }} for Production",
    "chatId": "=1234567891",
    "additionalFields": {}
  },
  "credentials": {
    "telegramApi": {
      "id": "pAIFhguJlkO3c7aQ",
      "name": "Telegram account"
    }
  },
  "typeVersion": 1.2
}

================ Node #346 ================
{
  "id": "210b6df9-e799-409f-b78f-953bffbb37db",
  "name": "Set Webhook Production URL",
  "type": "n8n-nodes-base.httpRequest",
  "position": [
    780,
    -260
  ],
  "parameters": {
    "url": "=https://api.telegram.org/{{ $json.token }}/setWebhook",
    "options": {},
    "sendQuery": true,
    "queryParameters": {
      "parameters": [
        {
          "name": "url",
          "value": "={{ $json.production_url }}"
        }
      ]
    }
  },
  "typeVersion": 4.2
}

================ Node #347 ================
{
  "id": "5dc6642c-3557-47bb-b012-b353a0d10ca0",
  "name": "Edit Fields",
  "type": "n8n-nodes-base.set",
  "position": [
    860,
    560
  ],
  "parameters": {
    "options": {},
    "assignments": {
      "assignments": [
        {
          "id": "b37b48ba-8fef-4e6c-bbca-73e6c2e1e0a8",
          "name": "text",
          "type": "string",
          "value": "={{ $json.body.message.text }}"
        }
      ]
    }
  },
  "typeVersion": 3.4
}

================ Node #348 ================
{
  "id": "cd715b79-765e-4605-84d6-963d9889c922",
  "name": "Audio Task Message",
  "type": "n8n-nodes-base.telegram",
  "position": [
    1460,
    40
  ],
  "parameters": {
    "text": "=Task message: <i>{{ $json.text }}</i>",
    "chatId": "={{ $('Listen for Telegram Events').item.json.body.message.chat.id }}",
    "additionalFields": {
      "parse_mode": "HTML",
      "appendAttribution": false
    }
  },
  "credentials": {
    "telegramApi": {
      "id": "pAIFhguJlkO3c7aQ",
      "name": "Telegram account"
    }
  },
  "typeVersion": 1.2
}

================ Node #349 ================
{
  "id": "9845b3e6-8c0f-4194-8442-5648147f905e",
  "name": "Audio Other Message",
  "type": "n8n-nodes-base.telegram",
  "position": [
    1460,
    220
  ],
  "parameters": {
    "text": "=Other message: <i>{{ $json.text }}</i>",
    "chatId": "={{ $('Listen for Telegram Events').item.json.body.message.chat.id }}",
    "additionalFields": {
      "parse_mode": "HTML",
      "appendAttribution": false
    }
  },
  "credentials": {
    "telegramApi": {
      "id": "pAIFhguJlkO3c7aQ",
      "name": "Telegram account"
    }
  },
  "typeVersion": 1.2
}

================ Node #350 ================
{
  "id": "0184b872-27a1-48dd-8e37-4fdaae7241cd",
  "name": "Text Task Message",
  "type": "n8n-nodes-base.telegram",
  "position": [
    1460,
    500
  ],
  "parameters": {
    "text": "=Task message: <i>{{ $json.text }}</i>",
    "chatId": "={{ $('Listen for Telegram Events').item.json.body.message.chat.id }}",
    "additionalFields": {
      "parse_mode": "HTML",
      "appendAttribution": false
    }
  },
  "credentials": {
    "telegramApi": {
      "id": "pAIFhguJlkO3c7aQ",
      "name": "Telegram account"
    }
  },
  "typeVersion": 1.2
}

================ Node #351 ================
{
  "id": "7d90fb9b-b2b5-48eb-a6f2-7f953fe6ee52",
  "name": "Text Other Message",
  "type": "n8n-nodes-base.telegram",
  "position": [
    1460,
    680
  ],
  "parameters": {
    "text": "=Other message: <i>{{ $json.text }}</i>",
    "chatId": "={{ $('Listen for Telegram Events').item.json.body.message.chat.id }}",
    "additionalFields": {
      "parse_mode": "HTML",
      "appendAttribution": false
    }
  },
  "credentials": {
    "telegramApi": {
      "id": "pAIFhguJlkO3c7aQ",
      "name": "Telegram account"
    }
  },
  "typeVersion": 1.2
}

================ Node #352 ================
{
  "id": "c9b9f6d2-c4c4-44b9-a929-9bc0552e8e45",
  "name": "Image Message",
  "type": "n8n-nodes-base.telegram",
  "position": [
    1660,
    1060
  ],
  "parameters": {
    "text": "={{ $json.content }}",
    "chatId": "={{ $('Listen for Telegram Events').item.json.body.message.chat.id }}",
    "additionalFields": {
      "appendAttribution": false
    }
  },
  "credentials": {
    "telegramApi": {
      "id": "pAIFhguJlkO3c7aQ",
      "name": "Telegram account"
    }
  },
  "typeVersion": 1.2
}

================ Node #353 ================
{
  "id": "bfc69b30-4bab-459d-bbe1-42e540275582",
  "name": "Convert to Image File",
  "type": "n8n-nodes-base.convertToFile",
  "position": [
    1260,
    1060
  ],
  "parameters": {
    "options": {
      "fileName": "={{ $json.result.file_path }}"
    },
    "operation": "toBinary",
    "sourceProperty": "data"
  },
  "typeVersion": 1.1
}

================ Node #354 ================
{
  "id": "f78d54c3-aa00-4e82-bfb1-f3131182940c",
  "name": "Extract from File to Base64",
  "type": "n8n-nodes-base.extractFromFile",
  "position": [
    1060,
    1060
  ],
  "parameters": {
    "options": {},
    "operation": "binaryToPropery"
  },
  "typeVersion": 1
}

================ Node #355 ================
{
  "id": "735bb735-6b24-4bbd-8d3f-aec6cd383383",
  "name": "Text Classifier Audio",
  "type": "@n8n/n8n-nodes-langchain.textClassifier",
  "position": [
    1060,
    100
  ],
  "parameters": {
    "options": {},
    "inputText": "={{ $json.text }}",
    "categories": {
      "categories": [
        {
          "category": "task",
          "description": "If the message is about about creating a task/todo"
        },
        {
          "category": "other",
          "description": "If the message is not about creating a task/todo "
        }
      ]
    }
  },
  "typeVersion": 1
}

================ Node #356 ================
{
  "id": "be7f49da-f88e-4803-95ef-fb7e2ff2d2ed",
  "name": "Text Classifier",
  "type": "@n8n/n8n-nodes-langchain.textClassifier",
  "position": [
    1060,
    560
  ],
  "parameters": {
    "options": {},
    "inputText": "={{ $json.text }}",
    "categories": {
      "categories": [
        {
          "category": "task",
          "description": "If the message is about about creating a task/todo"
        },
        {
          "category": "other",
          "description": "If the message is not about creating a task/todo "
        }
      ]
    }
  },
  "typeVersion": 1
}

================ Node #357 ================
{
  "id": "33eab7d8-5b90-4533-8799-fb4ae32fc6c5",
  "name": "Telegram Token & Webhooks",
  "type": "n8n-nodes-base.set",
  "position": [
    380,
    -540
  ],
  "parameters": {
    "options": {},
    "assignments": {
      "assignments": [
        {
          "id": "87811892-85f5-4578-a149-3edd94d3815a",
          "name": "token",
          "type": "string",
          "value": "bot[your-telegram-bot-token]"
        },
        {
          "id": "d2b9ab83-44ad-4741-aac9-1feed974c015",
          "name": "test_url",
          "type": "string",
          "value": "https://[your-url]/webhook-test/[your-endpoint]"
        },
        {
          "id": "0c671fbf-aa2c-42ef-9e8b-398ac38358d0",
          "name": "production_url",
          "type": "string",
          "value": "https://[your-url]/webhook/[your-endpoint]"
        }
      ]
    }
  },
  "typeVersion": 3.4
}

================ Node #358 ================
{
  "id": "65d9568e-0504-4c7d-ac05-0b7b4c52a6b2",
  "name": "Get Webhook Status",
  "type": "n8n-nodes-base.telegram",
  "position": [
    -40,
    -260
  ],
  "parameters": {
    "text": "={{ JSON.stringify($json.result, null, 2) }}",
    "chatId": "=1234567891",
    "additionalFields": {}
  },
  "credentials": {
    "telegramApi": {
      "id": "pAIFhguJlkO3c7aQ",
      "name": "Telegram account"
    }
  },
  "typeVersion": 1.2
}

================ Node #359 ================
{
  "id": "04669db1-3a74-4404-9b5f-9b8554b1059e",
  "name": "Validation",
  "type": "n8n-nodes-base.set",
  "position": [
    -100,
    160
  ],
  "parameters": {
    "options": {},
    "assignments": {
      "assignments": [
        {
          "id": "0cea6da1-652a-4c1e-94c3-30608ced90f8",
          "name": "first_name",
          "type": "string",
          "value": "First Name"
        },
        {
          "id": "b90280c6-3e36-49ca-9e7e-e15c42d256cc",
          "name": "last_name",
          "type": "string",
          "value": "Last Name"
        },
        {
          "id": "f6d86283-16ca-447e-8427-7d3d190babc0",
          "name": "id",
          "type": "number",
          "value": 12345678999
        }
      ]
    }
  },
  "typeVersion": 3.4
}

================ Node #360 ================
{
  "id": "7f9935cb-4ca6-40cf-99c5-96c5a1f4ca91",
  "name": "Sticky Note4",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    -160,
    100
  ],
  "parameters": {
    "color": 7,
    "width": 420,
    "height": 260,
    "content": "## Validate Telegram User\n"
  },
  "typeVersion": 1
}

================ Node #361 ================
{
  "id": "fa6c87eb-5f96-4e26-a1bb-60dae902186c",
  "name": "Sticky Note7",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    -320,
    -320
  ],
  "parameters": {
    "color": 7,
    "width": 460,
    "height": 240,
    "content": "## Webhook Status"
  },
  "typeVersion": 1
}

================ Node #362 ================
{
  "id": "96536ad2-e607-448e-a368-e4e8c7578b57",
  "name": "Sticky Note8",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    200,
    -320
  ],
  "parameters": {
    "color": 7,
    "width": 460,
    "height": 240,
    "content": "## Set Webhook for Testing"
  },
  "typeVersion": 1
}

================ Node #363 ================
{
  "id": "a58c16d5-0c08-4ee6-a3fe-b9fdbd62eb8b",
  "name": "Sticky Note9",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    720,
    -320
  ],
  "parameters": {
    "color": 7,
    "width": 480,
    "height": 240,
    "content": "## Set Webhook for Production"
  },
  "typeVersion": 1
}

================ Node #364 ================
{
  "id": "158bf4d2-aac9-4a1a-b319-1a4766cdeaca",
  "name": "Message Router",
  "type": "n8n-nodes-base.switch",
  "position": [
    320,
    160
  ],
  "parameters": {
    "rules": {
      "values": [
        {
          "outputKey": "audio",
          "conditions": {
            "options": {
              "version": 2,
              "leftValue": "",
              "caseSensitive": true,
              "typeValidation": "strict"
            },
            "combinator": "and",
            "conditions": [
              {
                "operator": {
                  "type": "object",
                  "operation": "exists",
                  "singleValue": true
                },
                "leftValue": "={{ $json.body.message.voice }}",
                "rightValue": ""
              }
            ]
          },
          "renameOutput": true
        },
        {
          "outputKey": "text",
          "conditions": {
            "options": {
              "version": 2,
              "leftValue": "",
              "caseSensitive": true,
              "typeValidation": "strict"
            },
            "combinator": "and",
            "conditions": [
              {
                "id": "342f0883-d959-44a2-b80d-379e39c76218",
                "operator": {
                  "type": "string",
                  "operation": "exists",
                  "singleValue": true
                },
                "leftValue": "={{ $json.body.message.text }}",
                "rightValue": ""
              }
            ]
          },
          "renameOutput": true
        },
        {
          "outputKey": "image",
          "conditions": {
            "options": {
              "version": 2,
              "leftValue": "",
              "caseSensitive": true,
              "typeValidation": "strict"
            },
            "combinator": "and",
            "conditions": [
              {
                "id": "ded3a600-f861-413a-8892-3fc5ea935ecb",
                "operator": {
                  "type": "array",
                  "operation": "exists",
                  "singleValue": true
                },
                "leftValue": "={{ $json.body.message.photo }}",
                "rightValue": ""
              }
            ]
          },
          "renameOutput": true
        }
      ]
    },
    "options": {
      "fallbackOutput": "extra"
    }
  },
  "typeVersion": 3.2
}

================ Node #365 ================
{
  "id": "753455a3-ddc8-4a74-b043-70a0af38ff9e",
  "name": "Pinecone Vector Store",
  "type": "@n8n/n8n-nodes-langchain.vectorStorePinecone",
  "position": [
    680,
    0
  ],
  "parameters": {
    "mode": "insert",
    "options": {},
    "pineconeIndex": {
      "__rl": true,
      "mode": "list",
      "value": "company-files",
      "cachedResultName": "company-files"
    }
  },
  "credentials": {
    "pineconeApi": {
      "id": "bQTNry52ypGLqt47",
      "name": "PineconeApi account"
    }
  },
  "typeVersion": 1
}

================ Node #366 ================
{
  "id": "a7c8fa7f-cad2-4497-a295-30aa2e98cacc",
  "name": "Embeddings Google Gemini",
  "type": "@n8n/n8n-nodes-langchain.embeddingsGoogleGemini",
  "position": [
    640,
    280
  ],
  "parameters": {
    "modelName": "models/text-embedding-004"
  },
  "credentials": {
    "googlePalmApi": {
      "id": "jLOqyTR4yTT1nYKi",
      "name": "Google Gemini(PaLM) Api account"
    }
  },
  "typeVersion": 1
}

================ Node #367 ================
{
  "id": "215f0519-4359-4e4b-a90c-7e54b1cc52b5",
  "name": "Default Data Loader",
  "type": "@n8n/n8n-nodes-langchain.documentDefaultDataLoader",
  "position": [
    840,
    220
  ],
  "parameters": {
    "options": {},
    "dataType": "binary",
    "binaryMode": "specificField"
  },
  "typeVersion": 1
}

================ Node #368 ================
{
  "id": "863d3d1d-1621-406e-8320-688f64b07b09",
  "name": "Recursive Character Text Splitter",
  "type": "@n8n/n8n-nodes-langchain.textSplitterRecursiveCharacterTextSplitter",
  "position": [
    820,
    420
  ],
  "parameters": {
    "options": {},
    "chunkOverlap": 100
  },
  "typeVersion": 1
}

================ Node #369 ================
{
  "id": "5af1efb1-ea69-466e-bb3b-2b7e6b1ceef7",
  "name": "AI Agent",
  "type": "@n8n/n8n-nodes-langchain.agent",
  "position": [
    420,
    840
  ],
  "parameters": {
    "options": {
      "systemMessage": "You are a helpful HR assistant designed to answer employee questions based on company policies.\n\nRetrieve relevant information from the provided internal documents and provide a concise, accurate, and informative answer to the employee's question.\n\nUse the tool called \"company_documents_tool\" to retrieve any information from the company's documents.\n\nIf the answer cannot be found in the provided documents, respond with \"I cannot find the answer in the available resources.\""
    }
  },
  "typeVersion": 1.7
}

================ Node #370 ================
{
  "id": "825632ac-1edf-4e63-948d-b1a498b2b962",
  "name": "Vector Store Tool",
  "type": "@n8n/n8n-nodes-langchain.toolVectorStore",
  "position": [
    820,
    1060
  ],
  "parameters": {
    "name": "company_documents_tool",
    "description": "Retrieve information from any company documents"
  },
  "typeVersion": 1
}

================ Node #371 ================
{
  "id": "72d2f685-bcc3-4e62-a5e3-72c0fe65f8e8",
  "name": "Pinecone Vector Store (Retrieval)",
  "type": "@n8n/n8n-nodes-langchain.vectorStorePinecone",
  "position": [
    720,
    1240
  ],
  "parameters": {
    "options": {},
    "pineconeIndex": {
      "__rl": true,
      "mode": "list",
      "value": "company-files",
      "cachedResultName": "company-files"
    }
  },
  "credentials": {
    "pineconeApi": {
      "id": "bQTNry52ypGLqt47",
      "name": "PineconeApi account"
    }
  },
  "typeVersion": 1
}

================ Node #372 ================
{
  "id": "eeff81cb-6aec-4e7f-afe0-432d87085fb2",
  "name": "Embeddings Google Gemini (retrieval)",
  "type": "@n8n/n8n-nodes-langchain.embeddingsGoogleGemini",
  "position": [
    700,
    1400
  ],
  "parameters": {
    "modelName": "models/text-embedding-004"
  },
  "credentials": {
    "googlePalmApi": {
      "id": "jLOqyTR4yTT1nYKi",
      "name": "Google Gemini(PaLM) Api account"
    }
  },
  "typeVersion": 1
}

================ Node #373 ================
{
  "id": "8bb6ebb1-1deb-498b-8da4-b809a736e097",
  "name": "Download File From Google Drive",
  "type": "n8n-nodes-base.googleDrive",
  "position": [
    460,
    0
  ],
  "parameters": {
    "fileId": {
      "__rl": true,
      "mode": "id",
      "value": "={{ $json.id }}"
    },
    "options": {
      "fileName": "={{ $json.name }}"
    },
    "operation": "download"
  },
  "credentials": {
    "googleDriveOAuth2Api": {
      "id": "uixLsi5TmrfwXPeB",
      "name": "Google Drive account"
    }
  },
  "typeVersion": 3
}

================ Node #374 ================
{
  "id": "bd83bacf-dff1-4b7c-af5c-b249fb16c113",
  "name": "Sticky Note2",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    420,
    660
  ],
  "parameters": {
    "content": "## Chat with company documents"
  },
  "typeVersion": 1
}

================ Node #375 ================
{
  "id": "7b90daab-0fb2-4c8a-93e6-b138bb04f282",
  "name": "Google Drive File Updated",
  "type": "n8n-nodes-base.googleDriveTrigger",
  "position": [
    140,
    140
  ],
  "parameters": {
    "event": "fileUpdated",
    "options": {},
    "pollTimes": {
      "item": [
        {
          "mode": "everyMinute"
        }
      ]
    },
    "triggerOn": "specificFolder",
    "folderToWatch": {
      "__rl": true,
      "mode": "list",
      "value": "1evDIoHePhjw_LgVFZXSZyK1sZm2GHp9W",
      "cachedResultUrl": "https://drive.google.com/drive/folders/1evDIoHePhjw_LgVFZXSZyK1sZm2GHp9W",
      "cachedResultName": "INNOVI PRO"
    }
  },
  "credentials": {
    "googleDriveOAuth2Api": {
      "id": "uixLsi5TmrfwXPeB",
      "name": "Google Drive account"
    }
  },
  "typeVersion": 1
}

================ Node #376 ================
{
  "id": "3a6c6cef-7a19-42ef-8092-eaf57dae4cdd",
  "name": "Google Drive File Created",
  "type": "n8n-nodes-base.googleDriveTrigger",
  "position": [
    140,
    -120
  ],
  "parameters": {
    "event": "fileCreated",
    "options": {
      "fileType": "all"
    },
    "pollTimes": {
      "item": [
        {
          "mode": "everyMinute"
        }
      ]
    },
    "triggerOn": "specificFolder",
    "folderToWatch": {
      "__rl": true,
      "mode": "list",
      "value": "1evDIoHePhjw_LgVFZXSZyK1sZm2GHp9W",
      "cachedResultUrl": "https://drive.google.com/drive/folders/1evDIoHePhjw_LgVFZXSZyK1sZm2GHp9W",
      "cachedResultName": "INNOVI PRO"
    }
  },
  "credentials": {
    "googleDriveOAuth2Api": {
      "id": "uixLsi5TmrfwXPeB",
      "name": "Google Drive account"
    }
  },
  "typeVersion": 1
}

================ Node #377 ================
{
  "id": "1e38f1c8-7bd0-4eeb-addc-62339582d350",
  "name": "Window Buffer Memory",
  "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
  "position": [
    500,
    1140
  ],
  "parameters": {},
  "typeVersion": 1.3
}

================ Node #378 ================
{
  "id": "4b0ab858-99b1-4337-8c5c-a223519e3662",
  "name": "When chat message received",
  "type": "@n8n/n8n-nodes-langchain.chatTrigger",
  "position": [
    80,
    840
  ],
  "webhookId": "5f1c0c82-0ff9-40c7-9e2e-b1a96ffe24cd",
  "parameters": {
    "options": {}
  },
  "typeVersion": 1.1
}

================ Node #379 ================
{
  "id": "bfb684d1-e5c1-41da-8305-b2606a2eade6",
  "name": "Sticky Note",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    440,
    -240
  ],
  "parameters": {
    "width": 320,
    "content": "## Add docuemnts to vector store when updating or creating new documents in Google Drive"
  },
  "typeVersion": 1
}

================ Node #380 ================
{
  "id": "8f627ec6-4b3f-43ad-a4a3-e2b199a7fe58",
  "name": "Google Gemini Chat Model",
  "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
  "position": [
    320,
    1140
  ],
  "parameters": {
    "options": {},
    "modelName": "models/gemini-2.0-flash-exp"
  },
  "credentials": {
    "googlePalmApi": {
      "id": "jLOqyTR4yTT1nYKi",
      "name": "Google Gemini(PaLM) Api account"
    }
  },
  "typeVersion": 1
}

================ Node #381 ================
{
  "id": "f2133a06-0088-46de-9f74-a3f9fe478f98",
  "name": "Google Gemini Chat Model (retrieval)",
  "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
  "position": [
    1080,
    1240
  ],
  "parameters": {
    "options": {},
    "modelName": "models/gemini-2.0-flash-exp"
  },
  "credentials": {
    "googlePalmApi": {
      "id": "jLOqyTR4yTT1nYKi",
      "name": "Google Gemini(PaLM) Api account"
    }
  },
  "typeVersion": 1
}

================ Node #382 ================
{
  "id": "578deb96-8393-4850-9757-fa97b2bc9992",
  "name": "Sticky Note1",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    -540,
    220
  ],
  "parameters": {
    "width": 420,
    "height": 720,
    "content": "## Set up steps\n\n1. Google Cloud Project and Vertex AI API:\n* Create a Google Cloud project.\n* Enable the Vertex AI API for your project.\n2. Google AI API Key:\n* Obtain a Google AI API key from Google AI Studio.\n3. Pinecone Account:\n* Create a free account on the Pinecone website.\nObtain your API key from your Pinecone dashboard.\n* Create an index named company-files in your Pinecone project.\n4. Google Drive:\n* Create a dedicated folder in your Google Drive where company documents will be stored.\n5. Credentials in n8n: Configure credentials in your n8n environment for:\n* Google Drive OAuth2\n* Google Gemini(PaLM) Api (using your Google AI API key)\n* Pinecone API (using your Pinecone API key)\n5. Import the Workflow:\n* Import this workflow into your n8n instance.\n6. Configure the Workflow:\n* Update both Google Drive Trigger nodes to watch the specific folder you created in your Google Drive.\n* Configure the Pinecone Vector Store nodes to use your company-files index."
  },
  "typeVersion": 1
}

================ Node #383 ================
{
  "id": "06a098db-160b-45f7-aeac-a73ef868148e",
  "name": "Email Trigger (IMAP)",
  "type": "n8n-nodes-base.emailReadImap",
  "position": [
    -180,
    -100
  ],
  "parameters": {
    "options": {}
  },
  "credentials": {
    "imap": {
      "id": "k31W9oGddl9pMDy4",
      "name": "IMAP info@n3witalia.com"
    }
  },
  "typeVersion": 2
}

================ Node #384 ================
{
  "id": "9589443b-efb7-4e0d-bafc-0be9858a4755",
  "name": "Markdown",
  "type": "n8n-nodes-base.markdown",
  "position": [
    40,
    -100
  ],
  "parameters": {
    "html": "={{ $json.textHtml }}",
    "options": {}
  },
  "typeVersion": 1
}

================ Node #385 ================
{
  "id": "8de7b2f3-bf75-4f3c-a1ee-eec047a7b82e",
  "name": "DeepSeek R1",
  "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
  "position": [
    240,
    80
  ],
  "parameters": {
    "model": {
      "__rl": true,
      "mode": "list",
      "value": "deepseek/deepseek-r1:free",
      "cachedResultName": "deepseek/deepseek-r1:free"
    },
    "options": {}
  },
  "credentials": {
    "openAiApi": {
      "id": "XJTqRiKFJpFs5MuX",
      "name": "OpenRouter account"
    }
  },
  "typeVersion": 1.2
}

================ Node #386 ================
{
  "id": "babf37dc-99ca-439a-b094-91c52799b8df",
  "name": "Send Email",
  "type": "n8n-nodes-base.emailSend",
  "position": [
    1840,
    -120
  ],
  "webhookId": "f84fcde7-6aac-485a-9a08-96a35955af49",
  "parameters": {
    "html": "={{ $('Write email').item.json.output }}",
    "options": {},
    "subject": "=Re: {{ $('Email Trigger (IMAP)').item.json.subject }}",
    "toEmail": "={{ $('Email Trigger (IMAP)').item.json.from }}",
    "fromEmail": "={{ $('Email Trigger (IMAP)').item.json.to }}"
  },
  "credentials": {
    "smtp": {
      "id": "hRjP3XbDiIQqvi7x",
      "name": "SMTP info@n3witalia.com"
    }
  },
  "typeVersion": 2.1
}

================ Node #387 ================
{
  "id": "ebeb986d-053a-420d-8482-ee00e75f2f10",
  "name": "Qdrant Vector Store",
  "type": "@n8n/n8n-nodes-langchain.vectorStoreQdrant",
  "position": [
    1180,
    200
  ],
  "parameters": {
    "mode": "retrieve-as-tool",
    "options": {},
    "toolName": "company_knowladge_base",
    "toolDescription": "Extracts information regarding the request made.",
    "qdrantCollection": {
      "__rl": true,
      "mode": "id",
      "value": "=COLLECTION"
    },
    "includeDocumentMetadata": false
  },
  "credentials": {
    "qdrantApi": {
      "id": "iyQ6MQiVaF3VMBmt",
      "name": "QdrantApi account"
    }
  },
  "typeVersion": 1
}

================ Node #388 ================
{
  "id": "ccc3d026-bfa3-4fda-be0a-ef70bf831aa7",
  "name": "Embeddings OpenAI",
  "type": "@n8n/n8n-nodes-langchain.embeddingsOpenAi",
  "position": [
    1180,
    380
  ],
  "parameters": {
    "options": {}
  },
  "credentials": {
    "openAiApi": {
      "id": "CDX6QM4gLYanh0P4",
      "name": "OpenAi account"
    }
  },
  "typeVersion": 1.2
}

================ Node #389 ================
{
  "id": "1726aac9-a77d-4f19-8c07-70b032c3abeb",
  "name": "Email Summarization Chain",
  "type": "@n8n/n8n-nodes-langchain.chainSummarization",
  "position": [
    260,
    -100
  ],
  "parameters": {
    "options": {
      "binaryDataKey": "={{ $json.data }}",
      "summarizationMethodAndPrompts": {
        "values": {
          "prompt": "=Write a concise summary of the following in max 100 words :\n\n\"{{ $json.data }}\"\n\nDo not enter the total number of words used.",
          "combineMapPrompt": "=Write a concise summary of the following in max 100 words:\n\n\"{{ $json.data }}\"\n\nDo not enter the total number of words used."
        }
      }
    },
    "operationMode": "nodeInputBinary"
  },
  "typeVersion": 2
}

================ Node #390 ================
{
  "id": "81b889d0-e724-4c1f-9ce3-7593c796aaaf",
  "name": "Write email",
  "type": "@n8n/n8n-nodes-langchain.agent",
  "position": [
    980,
    -100
  ],
  "parameters": {
    "text": "=Write the text to reply to the following email:\n\n{{ $('Email Summarization Chain').item.json.response.text }}",
    "options": {
      "systemMessage": "You are an expert at answering emails. You need to answer them professionally based on the information you have. This is a business email. Be concise and never exceed 100 words. Only the body of the email, not create the subject.\n\nIt must be in HTML format and you can insert (if you think it is appropriate) only HTML characters such as <br>, <b>, <i>, <p> where necessary."
    },
    "promptType": "define",
    "hasOutputParser": true
  },
  "typeVersion": 1.7
}

================ Node #391 ================
{
  "id": "cf38e319-59b3-490e-b841-579afc9fbc02",
  "name": "OpenAI",
  "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
  "position": [
    980,
    200
  ],
  "parameters": {
    "model": {
      "__rl": true,
      "mode": "list",
      "value": "gpt-4o-mini",
      "cachedResultName": "gpt-4o-mini"
    },
    "options": {}
  },
  "credentials": {
    "openAiApi": {
      "id": "CDX6QM4gLYanh0P4",
      "name": "OpenAi account"
    }
  },
  "typeVersion": 1.2
}

================ Node #392 ================
{
  "id": "19842e5f-c372-4dfd-b860-87dc5f00b1af",
  "name": "Set Email",
  "type": "n8n-nodes-base.set",
  "position": [
    760,
    -100
  ],
  "parameters": {
    "options": {},
    "assignments": {
      "assignments": [
        {
          "id": "759dc0f9-f582-492c-896c-6426f8410127",
          "name": "email",
          "type": "string",
          "value": "={{ $json.response.text }}"
        }
      ]
    }
  },
  "typeVersion": 3.4
}

================ Node #393 ================
{
  "id": "2cf7a9af-c5e8-45dd-bda5-01c562a0defb",
  "name": "Approve?",
  "type": "n8n-nodes-base.if",
  "position": [
    1560,
    -100
  ],
  "parameters": {
    "options": {
      "ignoreCase": false
    },
    "conditions": {
      "options": {
        "version": 2,
        "leftValue": "",
        "caseSensitive": true,
        "typeValidation": "strict"
      },
      "combinator": "and",
      "conditions": [
        {
          "id": "5c377c1c-43c6-45e7-904e-dbbe6b682686",
          "operator": {
            "type": "boolean",
            "operation": "true",
            "singleValue": true
          },
          "leftValue": "={{ $json.data.approved }}",
          "rightValue": "true"
        }
      ]
    }
  },
  "typeVersion": 2.2
}

================ Node #394 ================
{
  "id": "08cabec6-9840-4214-8315-b877c86794bf",
  "name": "Sticky Note",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    -220,
    -680
  ],
  "parameters": {
    "color": 3,
    "width": 580,
    "height": 420,
    "content": "# Main Flow\n\n## Preliminary step:\nCreate a vector database on Qdrant and tokenize the documents useful for generating a response\n\n\n## How it works\nThis workflow is designed to automate the process of handling incoming emails, summarizing their content, generating appropriate responses with RAG, and obtaining approval (YES/NO button) before sending replies.\n\nThis workflow is designed to handle general inquiries that come in via corporate email via IMAP and generate responses using RAG. You can quickly integrate Gmail and Outlook via the appropriate trigger nodes"
  },
  "typeVersion": 1
}

================ Node #395 ================
{
  "id": "80692c8f-e236-43ac-aad2-91bd90f40065",
  "name": "Sticky Note1",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    -40,
    -180
  ],
  "parameters": {
    "height": 240,
    "content": "Convert email to Markdown format for better understanding of LLM models"
  },
  "typeVersion": 1
}

================ Node #396 ================
{
  "id": "e6957fde-bf05-4b67-aa0e-44c575fca04d",
  "name": "Sticky Note2",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    240,
    -180
  ],
  "parameters": {
    "width": 320,
    "height": 240,
    "content": "Chain that summarizes the received email"
  },
  "typeVersion": 1
}

================ Node #397 ================
{
  "id": "7cfba59f-83ce-4f0b-b54a-b2c11d58fd82",
  "name": "Sticky Note3",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    940,
    -180
  ],
  "parameters": {
    "width": 340,
    "height": 240,
    "content": "Agent that retrieves business information from a vector database and processes the response"
  },
  "typeVersion": 1
}

================ Node #398 ================
{
  "id": "28c4bd00-6a47-422f-a50a-935f3724ba01",
  "name": "Send Draft",
  "type": "n8n-nodes-base.gmail",
  "position": [
    1340,
    -100
  ],
  "webhookId": "d6dd2e7c-90ea-4b65-9c64-523d2541a054",
  "parameters": {
    "sendTo": "YOUR GMAIL ADDRESS",
    "message": "=<h3>MESSAGE</h3>\n{{ $('Email Trigger (IMAP)').item.json.textHtml }}\n\n<h3>AI RESPONSE</h3>\n{{ $json.output }}",
    "options": {},
    "subject": "=[Approval Required] {{ $('Email Trigger (IMAP)').item.json.subject }}",
    "operation": "sendAndWait",
    "approvalOptions": {
      "values": {
        "approvalType": "double"
      }
    }
  },
  "credentials": {
    "gmailOAuth2": {
      "id": "nyuHvSX5HuqfMPlW",
      "name": "Gmail account (n3w.it)"
    }
  },
  "typeVersion": 2.1
}

================ Node #399 ================
{
  "id": "0aae1689-cee7-403a-8640-396db32eceed",
  "name": "Sticky Note4",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    1300,
    -300
  ],
  "parameters": {
    "color": 4,
    "height": 360,
    "content": "## IMPORTANT\n\nFor the \"Send Draft\" node, you need to send the draft email to a Gmail address because it is the only one that allows the \"Send and wait for response\" function."
  },
  "typeVersion": 1
}

================ Node #400 ================
{
  "id": "a768bce6-ae26-464c-95fc-009edea4f94d",
  "name": "Set your company's variables",
  "type": "n8n-nodes-base.set",
  "position": [
    440,
    0
  ],
  "parameters": {
    "options": {},
    "assignments": {
      "assignments": [
        {
          "id": "6a8063b6-1fd8-429a-9f13-b7512066c702",
          "name": "your_company_name",
          "type": "string",
          "value": "Pollup Data Services"
        },
        {
          "id": "3e6780d6-86d0-4353-aa17-8470a91f63a8",
          "name": "your_company_activity",
          "type": "string",
          "value": "Whether it\u2019s automating recurring tasks, analysing data faster, or personalising customer interactions, we build bespoke AI agents to help your workforce work smarter."
        },
        {
          "id": "1b42f1b3-20ed-4278-952d-f28fe0f03fa3",
          "name": "your_email",
          "type": "string",
          "value": "thomas@pollup.net"
        },
        {
          "id": "7c109ba2-d855-49d5-8700-624b01a05bc1",
          "name": "your_name",
          "type": "string",
          "value": "Justin"
        }
      ]
    }
  },
  "typeVersion": 3.4
}

================ Node #401 ================
{
  "id": "ca729f8d-cab8-4221-addb-aa23813d80b4",
  "name": "Get linkedin Posts",
  "type": "n8n-nodes-base.httpRequest",
  "position": [
    1300,
    0
  ],
  "parameters": {
    "url": "https://fresh-linkedin-profile-data.p.rapidapi.com/get-profile-posts",
    "options": {},
    "sendQuery": true,
    "sendHeaders": true,
    "authentication": "genericCredentialType",
    "genericAuthType": "httpHeaderAuth",
    "queryParameters": {
      "parameters": [
        {
          "name": "linkedin_url",
          "value": "={{ $('Google Sheets Trigger').item.json.linkedin_url }}"
        },
        {
          "name": "type",
          "value": "posts"
        }
      ]
    },
    "headerParameters": {
      "parameters": [
        {
          "name": "x-rapidapi-host",
          "value": "fresh-linkedin-profile-data.p.rapidapi.com"
        }
      ]
    }
  },
  "credentials": {
    "httpHeaderAuth": {
      "id": "nhoVFnkO31mejJrI",
      "name": "RapidAPI Key"
    }
  },
  "typeVersion": 4.2
}

================ Node #402 ================
{
  "id": "b9559958-f8ac-4ab6-93c6-50eb04113808",
  "name": "Get twitter ID",
  "type": "n8n-nodes-base.httpRequest",
  "position": [
    680,
    0
  ],
  "parameters": {
    "url": "https://twitter-api47.p.rapidapi.com/v2/user/by-username",
    "options": {},
    "sendQuery": true,
    "sendHeaders": true,
    "authentication": "genericCredentialType",
    "genericAuthType": "httpHeaderAuth",
    "queryParameters": {
      "parameters": [
        {
          "name": "username",
          "value": "={{ $('Google Sheets Trigger').item.json.twitter_handler }}"
        }
      ]
    },
    "headerParameters": {
      "parameters": [
        {
          "name": "x-rapidapi-host",
          "value": "twitter-api47.p.rapidapi.com"
        }
      ]
    }
  },
  "credentials": {
    "httpHeaderAuth": {
      "id": "nhoVFnkO31mejJrI",
      "name": "RapidAPI Key"
    }
  },
  "typeVersion": 4.2
}

================ Node #403 ================
{
  "id": "3e85565f-ebfa-4568-9391-869961c5b3ed",
  "name": "Get tweets",
  "type": "n8n-nodes-base.httpRequest",
  "position": [
    880,
    0
  ],
  "parameters": {
    "url": "https://twitter-api47.p.rapidapi.com/v2/user/tweets",
    "options": {},
    "sendQuery": true,
    "sendHeaders": true,
    "authentication": "genericCredentialType",
    "genericAuthType": "httpHeaderAuth",
    "queryParameters": {
      "parameters": [
        {
          "name": "userId",
          "value": "={{ $json.rest_id }}"
        }
      ]
    },
    "headerParameters": {
      "parameters": [
        {
          "name": "x-rapidapi-host",
          "value": "twitter-api47.p.rapidapi.com"
        }
      ]
    }
  },
  "credentials": {
    "httpHeaderAuth": {
      "id": "nhoVFnkO31mejJrI",
      "name": "RapidAPI Key"
    }
  },
  "typeVersion": 4.2
}

================ Node #404 ================
{
  "id": "6e060b21-9eaf-49e6-9665-c051b3f2397e",
  "name": "Extract and limit Linkedin",
  "type": "n8n-nodes-base.code",
  "position": [
    1520,
    0
  ],
  "parameters": {
    "jsCode": "// Loop over input items and add a new field called 'myNewField' to the JSON of each one\noutput = []\nmax_posts = 10\nlet counter = 0\nfor (const item of $input.all()[0].json.data) {\n let post = {\n title: item.article_title,\n text: item.text\n }\n output.push(post)\n if(counter++ >= max_posts) break;\n}\n\nreturn {\"linkedIn posts\": output};"
  },
  "typeVersion": 2
}

================ Node #405 ================
{
  "id": "e65bc472-e7c6-43c5-8e84-fe8c4512e92f",
  "name": "Exract and limit X",
  "type": "n8n-nodes-base.code",
  "position": [
    1100,
    0
  ],
  "parameters": {
    "jsCode": "// Loop over input items and add a new field called 'myNewField' to the JSON of each one\noutput = []\nmax_posts = 10\nlet counter = 0\nfor (const item of $input.all()[0].json.tweets) {\n if(!item.content.hasOwnProperty('itemContent')) continue\n let post = {\n text: item.content.itemContent?.tweet_results?.result.legacy?.full_text\n }\n console.log(post)\n output.push(post)\n if(counter++ >= max_posts) break;\n}\n\nreturn {\"Twitter tweets\": output};"
  },
  "typeVersion": 2
}

================ Node #406 ================
{
  "id": "10f088a0-0479-428e-96cf-fe0df9b37877",
  "name": "OpenAI Chat Model",
  "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
  "position": [
    1740,
    200
  ],
  "parameters": {
    "model": "gpt-4o",
    "options": {}
  },
  "credentials": {
    "openAiApi": {
      "id": "yepsCCAriRlCkICW",
      "name": "OpenAi account"
    }
  },
  "typeVersion": 1
}

================ Node #407 ================
{
  "id": "9adfd648-8348-4a0a-8b9b-d54dc3b715bb",
  "name": "Structured Output Parser",
  "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
  "position": [
    1920,
    220
  ],
  "parameters": {
    "jsonSchemaExample": "{\n \"subject\": \"\",\n \"cover_letter\": \"\"\n}"
  },
  "typeVersion": 1.2
}

================ Node #408 ================
{
  "id": "af96003c-539d-4728-832c-4819d85bbbcc",
  "name": "Generate Subject and cover letter based on match",
  "type": "@n8n/n8n-nodes-langchain.chainLlm",
  "position": [
    1720,
    0
  ],
  "parameters": {
    "text": "=## Me\n- My company name is: {{ $('Set your company\\'s variables').item.json.your_company_name }}\n- My company's activity is: {{ $('Set your company\\'s variables').item.json.your_company_activity }}\n- My name is: {{ $('Set your company\\'s variables').item.json.your_name }}\n- My email is: {{ $('Set your company\\'s variables').item.json.your_email }}\n\n## My lead:\nHis name: {{ $('Google Sheets Trigger').item.json.name }}\n\n## What I want you to do\n- According to the info about me, and the linkedin posts an twitter post of a user given below, I want you to find a common activity that I could propose to this person and generate a cover letter about it\n- Return ONLY the cover letter and the subject as a json like this:\n{\n \"subject\": \"\",\n \"cover_letter\": \"\"\n}\n\nTHe cover letter should be in HTML format\n\n## The Linkedin Posts:\n{{ JSON.stringify($json[\"linkedIn posts\"])}}\n\n## THe Twitter posts:\n{{ JSON.stringify($('Exract and limit X').item.json['Twitter tweets']) }}\n",
    "messages": {
      "messageValues": [
        {
          "message": "You are a helpful Marketing assistant"
        }
      ]
    },
    "promptType": "define",
    "hasOutputParser": true
  },
  "typeVersion": 1.5
}

================ Node #409 ================
{
  "id": "6954285f-7ea5-4e3d-8be2-03051d716d03",
  "name": "Send Cover letter and CC me",
  "type": "n8n-nodes-base.emailSend",
  "position": [
    2080,
    0
  ],
  "parameters": {
    "html": "={{ $json.output.cover_letter }}",
    "options": {},
    "subject": "={{ $json.output.subject }}",
    "toEmail": "={{ $('Google Sheets Trigger').item.json.email }}, {{ $('Set your company\\'s variables').item.json.your_email }}",
    "fromEmail": "thomas@pollup.net"
  },
  "credentials": {
    "smtp": {
      "id": "yrsGGdbYvSB8u7sx",
      "name": "SMTP account"
    }
  },
  "typeVersion": 2.1
}

================ Node #410 ================
{
  "id": "357477a8-98c3-48a5-8c88-965f90a4beb2",
  "name": "Sticky Note",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    360,
    -280
  ],
  "parameters": {
    "color": 4,
    "height": 480,
    "content": "## Personalize here\n\n### Set: \n- your name\n- your company name\n- your company activity, used to find a match with your leads\n- your email, used as the sender"
  },
  "typeVersion": 1
}

================ Node #411 ================
{
  "id": "0c26383c-c8f1-44b1-995e-2c88118061bb",
  "name": "Google Sheets Trigger",
  "type": "n8n-nodes-base.googleSheetsTrigger",
  "position": [
    -40,
    20
  ],
  "parameters": {
    "options": {
      "dataLocationOnSheet": {
        "values": {
          "rangeDefinition": "specifyRange"
        }
      }
    },
    "pollTimes": {
      "item": [
        {
          "mode": "everyMinute"
        }
      ]
    },
    "sheetName": {
      "__rl": true,
      "mode": "list",
      "value": "gid=0",
      "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1IcvbbG_WScVNyutXhzqyE9NxdxNbY90Dd63R8Y1UrAw/edit#gid=0",
      "cachedResultName": "Sheet1"
    },
    "documentId": {
      "__rl": true,
      "mode": "list",
      "value": "1IcvbbG_WScVNyutXhzqyE9NxdxNbY90Dd63R8Y1UrAw",
      "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1IcvbbG_WScVNyutXhzqyE9NxdxNbY90Dd63R8Y1UrAw/edit?usp=drivesdk",
      "cachedResultName": "Analyze social media of a lead"
    }
  },
  "credentials": {
    "googleSheetsTriggerOAuth2Api": {
      "id": "LBJHhfLqklwl9les",
      "name": "Google Sheets Trigger account"
    }
  },
  "typeVersion": 1
}

================ Node #412 ================
{
  "id": "923cca3d-69a9-4d26-80a3-e9062d42d8a8",
  "name": "Google Sheets",
  "type": "n8n-nodes-base.googleSheets",
  "position": [
    2280,
    0
  ],
  "parameters": {
    "columns": {
      "value": {
        "done": "X",
        "linkedin_url": "={{ $('Google Sheets Trigger').item.json.linkedin_url }}"
      },
      "schema": [
        {
          "id": "linkedin_url",
          "type": "string",
          "display": true,
          "removed": false,
          "required": false,
          "displayName": "linkedin_url",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "name",
          "type": "string",
          "display": true,
          "required": false,
          "displayName": "name",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "twitter_handler",
          "type": "string",
          "display": true,
          "required": false,
          "displayName": "twitter_handler",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "email",
          "type": "string",
          "display": true,
          "required": false,
          "displayName": "email",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "done",
          "type": "string",
          "display": true,
          "required": false,
          "displayName": "done",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "row_number",
          "type": "string",
          "display": true,
          "removed": true,
          "readOnly": true,
          "required": false,
          "displayName": "row_number",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        }
      ],
      "mappingMode": "defineBelow",
      "matchingColumns": [
        "linkedin_url"
      ]
    },
    "options": {},
    "operation": "update",
    "sheetName": {
      "__rl": true,
      "mode": "list",
      "value": "gid=0",
      "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1IcvbbG_WScVNyutXhzqyE9NxdxNbY90Dd63R8Y1UrAw/edit#gid=0",
      "cachedResultName": "Sheet1"
    },
    "documentId": {
      "__rl": true,
      "mode": "list",
      "value": "1IcvbbG_WScVNyutXhzqyE9NxdxNbY90Dd63R8Y1UrAw",
      "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1IcvbbG_WScVNyutXhzqyE9NxdxNbY90Dd63R8Y1UrAw/edit?usp=drivesdk",
      "cachedResultName": "Analyze social media of a lead"
    }
  },
  "credentials": {
    "googleSheetsOAuth2Api": {
      "id": "gdLmm513ROUyH6oU",
      "name": "Google Sheets account"
    }
  },
  "typeVersion": 4.5
}

================ Node #413 ================
{
  "id": "6df02119-09db-4d87-b435-7753693b27aa",
  "name": "If",
  "type": "n8n-nodes-base.if",
  "position": [
    180,
    20
  ],
  "parameters": {
    "options": {},
    "conditions": {
      "options": {
        "version": 2,
        "leftValue": "",
        "caseSensitive": true,
        "typeValidation": "loose"
      },
      "combinator": "and",
      "conditions": [
        {
          "id": "3839b337-6c33-4907-ba75-8ef04cefc14c",
          "operator": {
            "type": "string",
            "operation": "empty",
            "singleValue": true
          },
          "leftValue": "={{ $json.done }}",
          "rightValue": ""
        }
      ]
    },
    "looseTypeValidation": true
  },
  "executeOnce": false,
  "typeVersion": 2.2,
  "alwaysOutputData": true
}

================ Node #414 ================
{
  "id": "2edaa85e-ef69-490c-9835-cf8779cada6d",
  "name": "Sticky Note1",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    -120,
    -320
  ],
  "parameters": {
    "color": 4,
    "width": 260,
    "height": 500,
    "content": "## Create a Gooogle sheet with the following columns:\n- linkedin_url\n- name\n- twitter_handler \n- email\n- done\n\nAnd put some data in it except in \"done\" that should remain empty."
  },
  "typeVersion": 1
}

================ Node #415 ================
{
  "id": "19210bba-1db1-4568-b34e-4e9de002b0eb",
  "name": "Sticky Note2",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    1680,
    -160
  ],
  "parameters": {
    "color": 5,
    "width": 340,
    "height": 300,
    "content": "## Here you can modify the prompt\n- make it better by adding some examples\n- Follow a known framework\netc."
  },
  "typeVersion": 1
}

================ Node #416 ================
{
  "id": "bebab4e5-35fa-49b7-bb85-a85231c44389",
  "name": "Sticky Note3",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    660,
    -280
  ],
  "parameters": {
    "color": 4,
    "width": 340,
    "height": 480,
    "content": "## Call RapidAPI Twitter API Profile Data\nYou have to create an account in [RapidAPI](https://rapidapi.com/restocked-gAGxip8a_/api/twitter-api47) and subscribe to Twiiter API. With a free account you will be able to scrape 500 tweets / month.\nAfter your subscription you will have to choose as Generic Auth Type: Header Auth and then put as header name: \"x-rapidapi-key\" and the value given in the RapidAPI interface\n"
  },
  "typeVersion": 1
}

================ Node #417 ================
{
  "id": "42df4665-2d46-4020-938c-f082db6f09d0",
  "name": "Sticky Note4",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    1220,
    -300
  ],
  "parameters": {
    "color": 4,
    "width": 280,
    "height": 480,
    "content": "## Call RapidAPI Fresh Linkedin Profile Data\nYou have to create an account in [RapidAPI](https://rapidapi.com) and subscribe to Fresh LinkedIn Profile Data. With a free account you will be able to scrape 100 profile / month.\nAfter your subscription you will have to choose as Generic Auth Type: Header Auth and then put as header name: \"x-rapidapi-key\" and the value given in the RapidAPI interface\n"
  },
  "typeVersion": 1
}

================ Node #418 ================
{
  "id": "4a14febd-bd82-428c-8c97-15f1ba724b02",
  "name": "Sticky Note5",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    -840,
    -620
  ],
  "parameters": {
    "width": 700,
    "height": 1180,
    "content": "## Social Media Analysis and Automated Email Generation\n\n> by Thomas Vie [Thomas@pollup.net](mailto:thomas@pollup.net)\n\n### **Who is this for?**\nThis template is ideal for marketers, lead generation specialists, and business professionals seeking to analyze social media profiles of potential leads and automate personalized email outreach efficiently.\n\n\n### **What problem is this workflow solving?**\nManually analyzing social media profiles and crafting personalized emails can be time-consuming and prone to errors. This workflow streamlines the process by integrating social media APIs with AI to generate tailored communication, saving time and increasing outreach effectiveness.\n\n### **What this workflow does:**\n1. **Google Sheets Integration:** Start with a Google Sheet containing lead information such as LinkedIn URL, Twitter handle, name, and email.\n2. **Social Media Data Extraction:** Automatically fetch profile and activity data from Twitter and LinkedIn using RapidAPI integrations.\n3. **AI-Powered Content Generation:** Use OpenAI's Chat Model to analyze the extracted data and generate personalized email subject lines and cover letters.\n4. **Automated Email Dispatch:** Send the generated email directly to the lead, with a copy sent to yourself for tracking purposes.\n5. **Progress Tracking:** Update the Google Sheet to indicate completed actions.\n\n#### **Setup:**\n1. **Google Sheets:**\n - Create a sheet with the columns: LinkedIn URL, name, Twitter handle, email, and a \"done\" column for tracking.\n - Populate the sheet with your leads.\n\n2. **RapidAPI Accounts:**\n - Sign up for RapidAPI and subscribe to the Twitter and LinkedIn API plans.\n - Configure API authentication keys in the workflow.\n\n3. **AI Configuration:**\n - Connect OpenAI Chat Model with your API key for text generation.\n\n4. **Email Integration:**\n - Add your email credentials or service (SMTP or third-party service like Gmail) for sending automated emails.\n\n#### **How to customize this workflow to your needs:**\n- **Modify the AI Prompt:** Adapt the prompt in the AI node to better align with your tone, style, or specific messaging framework.\n- **Expand Data Fields:** Add additional data fields in Google Sheets if you require further personalization.\n- **API Limits:** Adjust API configurations to fit your usage limits or upgrade to higher tiers for increased data scraping capabilities.\n- **Personalize Email Templates:** Tweak email formats to suit different audiences or use cases.\n- **Extend Functionality:** Integrate additional social media platforms or CRM tools as needed.\n\nBy implementing this workflow, you\u2019ll save time on repetitive tasks and create more effective lead generation strategies."
  },
  "typeVersion": 1
}

================ Node #419 ================
{
  "id": "9560e89b-ea08-49dc-924e-ec8b83477340",
  "name": "When chat message received",
  "type": "@n8n/n8n-nodes-langchain.chatTrigger",
  "position": [
    280,
    60
  ],
  "webhookId": "4d06a912-2920-489c-a33c-0e3ea0b66745",
  "parameters": {
    "options": {}
  },
  "typeVersion": 1.1
}

================ Node #420 ================
{
  "id": "c7919677-233f-4c48-ba01-ae923aef511e",
  "name": "Basic LLM Chain",
  "type": "@n8n/n8n-nodes-langchain.chainLlm",
  "onError": "continueErrorOutput",
  "position": [
    640,
    60
  ],
  "parameters": {
    "text": "=Provide the users prompt and response as a JSON object with two fields:\n- Prompt\n- Response\n\nAvoid any preample or further explanation.\n\nThis is the question: {{ $json.chatInput }}",
    "promptType": "define"
  },
  "typeVersion": 1.5
}

================ Node #421 ================
{
  "id": "b9676a8b-f790-4661-b8b9-3056c969bdf5",
  "name": "Ollama Model",
  "type": "@n8n/n8n-nodes-langchain.lmOllama",
  "position": [
    740,
    340
  ],
  "parameters": {
    "model": "llama3.2:latest",
    "options": {}
  },
  "credentials": {
    "ollamaApi": {
      "id": "IsSBWGtcJbjRiKqD",
      "name": "Ollama account"
    }
  },
  "typeVersion": 1
}

================ Node #422 ================
{
  "id": "61dfcda5-083c-43ff-8451-b2417f1e4be4",
  "name": "Sticky Note",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    -380,
    -380
  ],
  "parameters": {
    "color": 4,
    "width": 520,
    "height": 860,
    "content": "# \ud83e\udd99 Ollama Chat Workflow\n\nA simple N8N workflow that integrates Ollama LLM for chat message processing and returns a structured JSON object.\n\n## Overview\nThis workflow creates a chat interface that processes messages using the Llama 3.2 model through Ollama. When a chat message is received, it gets processed through a basic LLM chain and returns a response.\n\n## Components\n- **Trigger Node**\n- **Processing Node**\n- **Model Node**\n- **JSON to Object Node**\n- **Structured Response Node**\n- **Error Response Node**\n\n## Workflow Structure\n1. The chat trigger node receives incoming messages\n2. Messages are passed to the Basic LLM Chain\n3. The Ollama Model processes the input using Llama 3.2\n4. Responses are returned through the chain\n\n## Prerequisites\n- N8N installation\n- Ollama setup with Llama 3.2 model\n- Valid Ollama API credentials\n\n## Configuration\n1. Set up the Ollama API credentials in N8N\n2. Ensure the Llama 3.2 model is available in your Ollama installation\n\n"
  },
  "typeVersion": 1
}

================ Node #423 ================
{
  "id": "64f60ee1-7870-461e-8fac-994c9c08b3f9",
  "name": "Sticky Note1",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    340,
    280
  ],
  "parameters": {
    "width": 560,
    "height": 200,
    "content": "## Model Node\n- Name: Ollama Model\n- Type: LangChain Ollama Integration\n- Model: llama3.2:latest\n- Purpose: Provides the language model capabilities"
  },
  "typeVersion": 1
}

================ Node #424 ================
{
  "id": "bb46210d-450c-405b-a451-42458b3af4ae",
  "name": "Sticky Note2",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    200,
    -160
  ],
  "parameters": {
    "color": 6,
    "width": 280,
    "height": 400,
    "content": "## Trigger Node\n- Name: When chat message received\n- Type: Chat Trigger\n- Purpose: Initiates the workflow when a new chat message arrives"
  },
  "typeVersion": 1
}

================ Node #425 ================
{
  "id": "7f21b9e6-6831-4117-a2e2-9c9fb6edc492",
  "name": "Sticky Note3",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    520,
    -380
  ],
  "parameters": {
    "color": 3,
    "width": 500,
    "height": 620,
    "content": "## Processing Node\n- Name: Basic LLM Chain\n- Type: LangChain LLM Chain\n- Purpose: Handles the processing of messages through the language model and returns a structured JSON object.\n\n"
  },
  "typeVersion": 1
}

================ Node #426 ================
{
  "id": "871bac4e-002f-4a1d-b3f9-0b7d309db709",
  "name": "Sticky Note4",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    560,
    -200
  ],
  "parameters": {
    "color": 7,
    "width": 420,
    "height": 200,
    "content": "### Prompt (Change this for your use case)\nProvide the users prompt and response as a JSON object with two fields:\n- Prompt\n- Response\n\n\nAvoid any preample or further explanation.\nThis is the question: {{ $json.chatInput }}"
  },
  "typeVersion": 1
}

================ Node #427 ================
{
  "id": "c9e1b2af-059b-4330-a194-45ae0161aa1c",
  "name": "Sticky Note5",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    1060,
    -280
  ],
  "parameters": {
    "color": 5,
    "width": 420,
    "height": 520,
    "content": "## JSON to Object Node\n- Type: Set Node\n- Purpose: A node designed to transform and structure response data in a specific format before sending it through the workflow. It operates in manual mapping mode to allow precise control over the response format.\n\n**Key Features**\n- Manual field mapping capabilities\n- Object transformation and restructuring\n- Support for JSON data formatting\n- Field-to-field value mapping\n- Includes option to add additional input fields\n"
  },
  "typeVersion": 1
}

================ Node #428 ================
{
  "id": "3fb912b8-86ac-42f7-a19c-45e59898a62e",
  "name": "Sticky Note6",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    1520,
    -180
  ],
  "parameters": {
    "color": 6,
    "width": 460,
    "height": 420,
    "content": "## Structured Response Node\n- Type: Set Node\n- Purpose: Controls how the workflow responds to users chat prompt.\n\n**Response Mode**\n- Manual Mapping: Allows custom formatting of response data\n- Fields to Set: Specify which data fields to include in response\n\n"
  },
  "typeVersion": 1
}

================ Node #429 ================
{
  "id": "fdfd1a5c-e1a6-4390-9807-ce665b96b9ae",
  "name": "Structured Response",
  "type": "n8n-nodes-base.set",
  "position": [
    1700,
    60
  ],
  "parameters": {
    "options": {},
    "assignments": {
      "assignments": [
        {
          "id": "13c4058d-2d50-46b7-a5a6-c788828a1764",
          "name": "text",
          "type": "string",
          "value": "=Your prompt was: {{ $json.response.Prompt }}\n\nMy response is: {{ $json.response.Response }}\n\nThis is the JSON object:\n\n{{ $('Basic LLM Chain').item.json.text }}"
        }
      ]
    }
  },
  "typeVersion": 3.4
}

================ Node #430 ================
{
  "id": "76baa6fc-72dd-41f9-aef9-4fd718b526df",
  "name": "Error Response",
  "type": "n8n-nodes-base.set",
  "position": [
    1460,
    660
  ],
  "parameters": {
    "options": {},
    "assignments": {
      "assignments": [
        {
          "id": "13c4058d-2d50-46b7-a5a6-c788828a1764",
          "name": "text",
          "type": "string",
          "value": "=There was an error."
        }
      ]
    }
  },
  "typeVersion": 3.4
}

================ Node #431 ================
{
  "id": "bde3b9df-af55-451b-b287-1b5038f9936c",
  "name": "Sticky Note7",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    1240,
    280
  ],
  "parameters": {
    "color": 2,
    "width": 540,
    "height": 560,
    "content": "## Error Response Node\n- Type: Set Node\n- Purpose: Handles error cases when the Basic LLM Chain fails to process the chat message properly. It provides a fallback response mechanism to ensure the workflow remains robust.\n\n**Key Features**\n- Provides default error messaging\n- Maintains consistent response structure\n- Connects to the error output branch of the LLM Chain\n- Ensures graceful failure handling\n\nThe Error Response node activates when the main processing chain encounters issues, ensuring users always receive feedback even when errors occur in the language model processing.\n"
  },
  "typeVersion": 1
}

================ Node #432 ================
{
  "id": "b9b2ab8d-9bea-457a-b7bf-51c8ef0de69f",
  "name": "JSON to Object",
  "type": "n8n-nodes-base.set",
  "position": [
    1220,
    60
  ],
  "parameters": {
    "options": {},
    "assignments": {
      "assignments": [
        {
          "id": "12af1a54-62a2-44c3-9001-95bb0d7c769d",
          "name": "response",
          "type": "object",
          "value": "={{ $json.text }}"
        }
      ]
    }
  },
  "typeVersion": 3.4
}

================ Node #433 ================
{
  "id": "59885699-0f6c-4522-acff-9e28b2a07b82",
  "name": "Email Trigger (IMAP)",
  "type": "n8n-nodes-base.emailReadImap",
  "position": [
    -440,
    -20
  ],
  "parameters": {
    "options": {}
  },
  "credentials": {
    "imap": {
      "id": "k31W9oGddl9pMDy4",
      "name": "IMAP info@n3witalia.com"
    }
  },
  "typeVersion": 2
}

================ Node #434 ================
{
  "id": "b268ab9d-b2e3-46e6-b7ae-70aff0b5484d",
  "name": "Markdown",
  "type": "n8n-nodes-base.markdown",
  "position": [
    -220,
    -20
  ],
  "parameters": {
    "html": "={{ $json.textHtml }}",
    "options": {}
  },
  "typeVersion": 1
}

================ Node #435 ================
{
  "id": "13c2d151-6f59-4e1f-a174-02d4d0bcaefd",
  "name": "DeepSeek R1",
  "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
  "position": [
    -20,
    160
  ],
  "parameters": {
    "model": {
      "__rl": true,
      "mode": "list",
      "value": "deepseek/deepseek-r1:free",
      "cachedResultName": "deepseek/deepseek-r1:free"
    },
    "options": {}
  },
  "credentials": {
    "openAiApi": {
      "id": "XJTqRiKFJpFs5MuX",
      "name": "OpenRouter account"
    }
  },
  "typeVersion": 1.2
}

================ Node #436 ================
{
  "id": "8149e40d-64e6-4fb9-aebc-2a2483961f07",
  "name": "Send Email",
  "type": "n8n-nodes-base.emailSend",
  "position": [
    500,
    340
  ],
  "parameters": {
    "html": "={{ $json.text }}",
    "options": {},
    "subject": "=Re: {{ $('Email Trigger (IMAP)').item.json.subject }}",
    "toEmail": "={{ $('Email Trigger (IMAP)').item.json.from }}",
    "fromEmail": "={{ $('Email Trigger (IMAP)').item.json.to }}"
  },
  "credentials": {
    "smtp": {
      "id": "hRjP3XbDiIQqvi7x",
      "name": "SMTP info@n3witalia.com"
    }
  },
  "typeVersion": 2.1
}

================ Node #437 ================
{
  "id": "633f0ce9-04ff-4653-8bbc-7457ba0d18bd",
  "name": "Qdrant Vector Store",
  "type": "@n8n/n8n-nodes-langchain.vectorStoreQdrant",
  "position": [
    -320,
    600
  ],
  "parameters": {
    "mode": "retrieve-as-tool",
    "options": {},
    "toolName": "company_knowladge_base",
    "toolDescription": "Extracts information regarding the request made.",
    "qdrantCollection": {
      "__rl": true,
      "mode": "id",
      "value": "=COLLECTION"
    },
    "includeDocumentMetadata": false
  },
  "credentials": {
    "qdrantApi": {
      "id": "iyQ6MQiVaF3VMBmt",
      "name": "QdrantApi account"
    }
  },
  "typeVersion": 1
}

================ Node #438 ================
{
  "id": "20daf5d3-dc9c-4fad-9f2f-98d86bc1660c",
  "name": "Embeddings OpenAI",
  "type": "@n8n/n8n-nodes-langchain.embeddingsOpenAi",
  "position": [
    -340,
    760
  ],
  "parameters": {
    "options": {}
  },
  "credentials": {
    "openAiApi": {
      "id": "CDX6QM4gLYanh0P4",
      "name": "OpenAi account"
    }
  },
  "typeVersion": 1.2
}

================ Node #439 ================
{
  "id": "67699bca-4096-4259-bbd4-51a879539aca",
  "name": "Email Classifier",
  "type": "@n8n/n8n-nodes-langchain.textClassifier",
  "position": [
    360,
    -20
  ],
  "parameters": {
    "options": {
      "fallback": "other",
      "multiClass": false,
      "enableAutoFixing": true,
      "systemPromptTemplate": "Please classify the text provided by the user into one of the following categories: {categories}, and use the provided formatting instructions below. Don't explain, and only output the json.\n"
    },
    "inputText": "=You must classify the following email::\n\n{{ $json.response.text }}",
    "categories": {
      "categories": [
        {
          "category": "Company info request",
          "description": "Company info request"
        }
      ]
    }
  },
  "typeVersion": 1
}

================ Node #440 ================
{
  "id": "9f7742e9-87d5-40b9-9129-0777d8a37933",
  "name": "Email Summarization Chain",
  "type": "@n8n/n8n-nodes-langchain.chainSummarization",
  "position": [
    0,
    -20
  ],
  "parameters": {
    "options": {
      "binaryDataKey": "={{ $json.data }}",
      "summarizationMethodAndPrompts": {
        "values": {
          "prompt": "=Write a concise summary of the following in max 100 words:\n\n\"{{ $json.data }}\"\n\nDo not enter the total number of words used.",
          "combineMapPrompt": "=Write a concise summary of the following in max 100 words:\n\n\"{{ $json.data }}\"\n"
        }
      }
    },
    "operationMode": "nodeInputBinary"
  },
  "typeVersion": 2
}

================ Node #441 ================
{
  "id": "e2d404c0-2aad-407d-b75e-5ef0c5105c0e",
  "name": "Write email",
  "type": "@n8n/n8n-nodes-langchain.agent",
  "position": [
    -440,
    340
  ],
  "parameters": {
    "text": "=Write the text to reply to the following email:\n\n{{ $json.response.text }}",
    "options": {
      "systemMessage": "You are an expert at answering emails. You need to answer them professionally based on the information you have. This is a business email. Be concise and never exceed 100 words."
    },
    "promptType": "define"
  },
  "typeVersion": 1.7
}

================ Node #442 ================
{
  "id": "3786c2de-c5cb-4233-826e-7265f2bccbdb",
  "name": "Review email",
  "type": "@n8n/n8n-nodes-langchain.chainLlm",
  "position": [
    40,
    340
  ],
  "parameters": {
    "text": "=Review at the following email:\n\n{{ $json.output }}",
    "messages": {
      "messageValues": [
        {
          "message": "=If you are an expert in reviewing emails before sending them. You need to review and structure them in such a way that you can send them. It must be in HTML format and you can insert (if you think it is appropriate) only HTML characters such as <br>, <b>, <i>, <p> where necessary.\n\nNon superare le 100 parole."
        }
      ]
    },
    "promptType": "define",
    "hasOutputParser": true
  },
  "typeVersion": 1.5
}

================ Node #443 ================
{
  "id": "baf60eba-5e7b-467f-b27e-1388a91622d0",
  "name": "When clicking \u2018Test workflow\u2019",
  "type": "n8n-nodes-base.manualTrigger",
  "position": [
    -500,
    -980
  ],
  "parameters": {},
  "typeVersion": 1
}

================ Node #444 ================
{
  "id": "77e6160f-20a7-4a75-9fef-bc875b953a16",
  "name": "Create collection",
  "type": "n8n-nodes-base.httpRequest",
  "position": [
    -200,
    -1120
  ],
  "parameters": {
    "url": "https://QDRANTURL/collections/COLLECTION",
    "method": "POST",
    "options": {},
    "jsonBody": "{\n \"filter\": {}\n}",
    "sendBody": true,
    "sendHeaders": true,
    "specifyBody": "json",
    "authentication": "genericCredentialType",
    "genericAuthType": "httpHeaderAuth",
    "headerParameters": {
      "parameters": [
        {
          "name": "Content-Type",
          "value": "application/json"
        }
      ]
    }
  },
  "credentials": {
    "httpHeaderAuth": {
      "id": "qhny6r5ql9wwotpn",
      "name": "Qdrant API (Hetzner)"
    }
  },
  "typeVersion": 4.2
}

================ Node #445 ================
{
  "id": "ab7764d1-531c-4281-8b89-015fb3f5e780",
  "name": "Refresh collection",
  "type": "n8n-nodes-base.httpRequest",
  "position": [
    -200,
    -860
  ],
  "parameters": {
    "url": "https://QDRANTURL/collections/COLLECTION/points/delete",
    "method": "POST",
    "options": {},
    "jsonBody": "{\n \"filter\": {}\n}",
    "sendBody": true,
    "sendHeaders": true,
    "specifyBody": "json",
    "authentication": "genericCredentialType",
    "genericAuthType": "httpHeaderAuth",
    "headerParameters": {
      "parameters": [
        {
          "name": "Content-Type",
          "value": "application/json"
        }
      ]
    }
  },
  "credentials": {
    "httpHeaderAuth": {
      "id": "qhny6r5ql9wwotpn",
      "name": "Qdrant API (Hetzner)"
    }
  },
  "typeVersion": 4.2
}

================ Node #446 ================
{
  "id": "cd3eaa81-0f94-484b-b0c2-ecf0ca4541dc",
  "name": "Get folder",
  "type": "n8n-nodes-base.googleDrive",
  "position": [
    20,
    -860
  ],
  "parameters": {
    "filter": {
      "driveId": {
        "__rl": true,
        "mode": "list",
        "value": "My Drive",
        "cachedResultUrl": "https://drive.google.com/drive/my-drive",
        "cachedResultName": "My Drive"
      },
      "folderId": {
        "__rl": true,
        "mode": "id",
        "value": "=test-whatsapp"
      }
    },
    "options": {},
    "resource": "fileFolder"
  },
  "credentials": {
    "googleDriveOAuth2Api": {
      "id": "HEy5EuZkgPZVEa9w",
      "name": "Google Drive account"
    }
  },
  "typeVersion": 3
}

================ Node #447 ================
{
  "id": "b39ecd2d-4d5b-4885-86a9-2cfe9f6074ef",
  "name": "Download Files",
  "type": "n8n-nodes-base.googleDrive",
  "position": [
    240,
    -860
  ],
  "parameters": {
    "fileId": {
      "__rl": true,
      "mode": "id",
      "value": "={{ $json.id }}"
    },
    "options": {
      "googleFileConversion": {
        "conversion": {
          "docsToFormat": "text/plain"
        }
      }
    },
    "operation": "download"
  },
  "credentials": {
    "googleDriveOAuth2Api": {
      "id": "HEy5EuZkgPZVEa9w",
      "name": "Google Drive account"
    }
  },
  "typeVersion": 3
}

================ Node #448 ================
{
  "id": "8171b8f2-998d-4d72-ac28-524daae4a2d7",
  "name": "Default Data Loader",
  "type": "@n8n/n8n-nodes-langchain.documentDefaultDataLoader",
  "position": [
    620,
    -660
  ],
  "parameters": {
    "options": {},
    "dataType": "binary"
  },
  "typeVersion": 1
}

================ Node #449 ================
{
  "id": "ec6737ad-3fbe-4864-9df8-44f82d6f2c5c",
  "name": "Token Splitter",
  "type": "@n8n/n8n-nodes-langchain.textSplitterTokenSplitter",
  "position": [
    600,
    -500
  ],
  "parameters": {
    "chunkSize": 300,
    "chunkOverlap": 30
  },
  "typeVersion": 1
}

================ Node #450 ================
{
  "id": "57b6a4f3-e935-4058-bfdf-309d606c0ca9",
  "name": "Sticky Note3",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    0,
    -1180
  ],
  "parameters": {
    "color": 6,
    "width": 880,
    "height": 220,
    "content": "# STEP 1\n\n## Create Qdrant Collection\nChange:\n- QDRANTURL\n- COLLECTION"
  },
  "typeVersion": 1
}

================ Node #451 ================
{
  "id": "21e2326a-138d-46f3-a849-a80aa7917da9",
  "name": "Qdrant Vector Store1",
  "type": "@n8n/n8n-nodes-langchain.vectorStoreQdrant",
  "position": [
    480,
    -860
  ],
  "parameters": {
    "mode": "insert",
    "options": {},
    "qdrantCollection": {
      "__rl": true,
      "mode": "id",
      "value": "=COLLECTION"
    }
  },
  "credentials": {
    "qdrantApi": {
      "id": "iyQ6MQiVaF3VMBmt",
      "name": "QdrantApi account"
    }
  },
  "typeVersion": 1
}

================ Node #452 ================
{
  "id": "0818fb6a-2adf-4725-90a4-11cdd7d14036",
  "name": "Embeddings OpenAI1",
  "type": "@n8n/n8n-nodes-langchain.embeddingsOpenAi",
  "position": [
    500,
    -620
  ],
  "parameters": {
    "options": {}
  },
  "credentials": {
    "openAiApi": {
      "id": "CDX6QM4gLYanh0P4",
      "name": "OpenAi account"
    }
  },
  "typeVersion": 1.1
}

================ Node #453 ================
{
  "id": "8949d938-2743-45d6-b2ad-ce4ac139e0a3",
  "name": "Sticky Note5",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    -220,
    -920
  ],
  "parameters": {
    "color": 4,
    "width": 620,
    "height": 400,
    "content": "# STEP 2\n\n\n\n\n\n\n\n\n\n\n\n\n## Documents vectorization with Qdrant and Google Drive\nChange:\n- QDRANTURL\n- COLLECTION"
  },
  "typeVersion": 1
}

================ Node #454 ================
{
  "id": "36d384be-3e11-43b1-b8c3-f63df600a6a6",
  "name": "Do nothing",
  "type": "n8n-nodes-base.noOp",
  "position": [
    820,
    0
  ],
  "parameters": {},
  "typeVersion": 1
}

================ Node #455 ================
{
  "id": "386c27cb-6e69-4d96-a8ab-8cfd43e6b171",
  "name": "OpenAI",
  "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
  "position": [
    -520,
    580
  ],
  "parameters": {
    "model": {
      "__rl": true,
      "mode": "list",
      "value": "gpt-4o-mini",
      "cachedResultName": "gpt-4o-mini"
    },
    "options": {}
  },
  "credentials": {
    "openAiApi": {
      "id": "CDX6QM4gLYanh0P4",
      "name": "OpenAi account"
    }
  },
  "typeVersion": 1.2
}

================ Node #456 ================
{
  "id": "0bd17bef-e205-464e-9b36-dcda75254e06",
  "name": "DeepSeek",
  "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
  "position": [
    40,
    540
  ],
  "parameters": {
    "model": {
      "__rl": true,
      "mode": "list",
      "value": "deepseek/deepseek-r1:free",
      "cachedResultName": "deepseek/deepseek-r1:free"
    },
    "options": {}
  },
  "credentials": {
    "openAiApi": {
      "id": "XJTqRiKFJpFs5MuX",
      "name": "OpenRouter account"
    }
  },
  "typeVersion": 1.2
}

================ Node #457 ================
{
  "id": "3e68a65f-af29-432f-8159-4a599e8a0866",
  "name": "Sticky Note",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    -540,
    -320
  ],
  "parameters": {
    "width": 1620,
    "height": 240,
    "content": "# STEP 3 - MAIN FLOW\n\n- Transform the email into Markdown format for optimal reading by the LLM model\n- Email Summarization through DeepSeek R1 (any model can be used)\n- I classify the email in such a way as to continue only with emails regarding general information about the company. In this way I can respond independently through the information obtained from the vector database\n- I create a chain where I entrust the review of the email to a high-performance model designed for this purpose\n- I send the response email\n\n\n"
  },
  "typeVersion": 1
}

================ Node #458 ================
{
  "id": "3b6ae6aa-75a8-4038-bbc2-248ab533b3ab",
  "name": "OpenAI 4-o-mini",
  "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
  "position": [
    360,
    160
  ],
  "parameters": {
    "model": {
      "__rl": true,
      "mode": "list",
      "value": "gpt-4o-mini",
      "cachedResultName": "gpt-4o-mini"
    },
    "options": {}
  },
  "credentials": {
    "openAiApi": {
      "id": "CDX6QM4gLYanh0P4",
      "name": "OpenAi account"
    }
  },
  "typeVersion": 1.2
}

================ Node #459 ================
{
  "id": "34781446-b06e-41eb-83b8-b96bda1a5595",
  "name": "When clicking \u2018Test workflow\u2019",
  "type": "n8n-nodes-base.manualTrigger",
  "position": [
    -80,
    0
  ],
  "parameters": {},
  "typeVersion": 1
}

================ Node #460 ================
{
  "id": "c53b7243-7c82-47e0-a5ee-bd82bc51c386",
  "name": "GitHub",
  "type": "n8n-nodes-base.github",
  "position": [
    600,
    0
  ],
  "parameters": {
    "owner": {
      "__rl": true,
      "mode": "name",
      "value": "={{ $json.Account }}"
    },
    "filePath": "={{ $json.path }}{{ $json.prompt }}",
    "resource": "file",
    "operation": "get",
    "repository": {
      "__rl": true,
      "mode": "name",
      "value": "={{ $json.repo }}"
    },
    "additionalParameters": {}
  },
  "credentials": {
    "githubApi": {
      "id": "ostHZNoe8GSsbaQM",
      "name": "The GitHub account"
    }
  },
  "typeVersion": 1
}

================ Node #461 ================
{
  "id": "9976b199-b744-47a7-9d75-4b831274c01b",
  "name": "Extract from File",
  "type": "n8n-nodes-base.extractFromFile",
  "position": [
    840,
    0
  ],
  "parameters": {
    "options": {},
    "operation": "text"
  },
  "typeVersion": 1
}

================ Node #462 ================
{
  "id": "26aa4e6a-c487-4cdf-91d5-df660cf826a6",
  "name": "setVars",
  "type": "n8n-nodes-base.set",
  "position": [
    180,
    0
  ],
  "parameters": {
    "options": {},
    "assignments": {
      "assignments": [
        {
          "id": "150618c5-09b1-4f8b-a7b4-984662bf3381",
          "name": "Account",
          "type": "string",
          "value": "TPGLLC-US"
        },
        {
          "id": "22e8a3b0-bd53-485c-b971-7f1dd0686f0e",
          "name": "repo",
          "type": "string",
          "value": "PeresPrompts"
        },
        {
          "id": "ab94d0a1-ef3a-4fe9-9076-6882c6fda0ac",
          "name": "path",
          "type": "string",
          "value": "SEO/"
        },
        {
          "id": "66f122eb-1cbd-4769-aac8-3f05cdb6c116",
          "name": "prompt",
          "type": "string",
          "value": "keyword_research.md"
        },
        {
          "id": "03fe26a3-04e6-439c-abcb-d438fc5203c0",
          "name": "company",
          "type": "string",
          "value": "South Nassau Physical Therapy"
        },
        {
          "id": "c133d216-a457-4872-a060-0ba4d94549af",
          "name": "product",
          "type": "string",
          "value": "Manual Therapy"
        },
        {
          "id": "584864dd-2518-45e2-b501-02828757fc3a",
          "name": "features",
          "type": "string",
          "value": "pain relief"
        },
        {
          "id": "0c4594cc-302a-4215-bdad-12cf54f57967",
          "name": "sector",
          "type": "string",
          "value": "physical therapy"
        }
      ]
    }
  },
  "typeVersion": 3.4
}

================ Node #463 ================
{
  "id": "9d92f581-8cd9-448c-aa1d-023a96c1ddda",
  "name": "replace variables",
  "type": "n8n-nodes-base.code",
  "position": [
    1900,
    -20
  ],
  "parameters": {
    "jsCode": "// Fetch the prompt text\nconst prompt = $('SetPrompt').first().json.data; // Ensure the prompt contains placeholders like {{ some.node.value }}\n\n// Example variables object\nconst variables = {\n company: $('setVars').first().json.company,\n features: \"Awesome Software\",\n keyword: \"2025-02-07\"\n};\n\n// Function to replace placeholders dynamically\nconst replaceVariables = (text, vars) => {\n return text.replace(/{{(.*?)}}/g, (match, key) => {\n const trimmedKey = key.trim();\n \n // Extract last part after the last dot\n const finalKey = trimmedKey.split('.').pop();\n\n // Replace if key exists, otherwise leave placeholder unchanged\n return vars.hasOwnProperty(finalKey) ? vars[finalKey] : match;\n });\n};\n\n// Replace and return result\nreturn [{\n prompt: replaceVariables(prompt, variables)\n}];\n"
  },
  "typeVersion": 2
}

================ Node #464 ================
{
  "id": "6c6c4fde-6ee5-47a8-894d-44d1afcedc2a",
  "name": "If",
  "type": "n8n-nodes-base.if",
  "position": [
    1560,
    0
  ],
  "parameters": {
    "options": {},
    "conditions": {
      "options": {
        "version": 2,
        "leftValue": "",
        "caseSensitive": true,
        "typeValidation": "strict"
      },
      "combinator": "and",
      "conditions": [
        {
          "id": "2717a7e5-095a-42bf-8b5b-8050c3389ec5",
          "operator": {
            "type": "boolean",
            "operation": "true",
            "singleValue": true
          },
          "leftValue": "={{ $json.success }}",
          "rightValue": "={{ $('Check All Prompt Vars Present').item.json.keys()}}"
        }
      ]
    }
  },
  "typeVersion": 2.2
}

================ Node #465 ================
{
  "id": "3b7712b8-5152-4f60-9401-03c89c39e227",
  "name": "Check All Prompt Vars Present",
  "type": "n8n-nodes-base.code",
  "position": [
    1280,
    0
  ],
  "parameters": {
    "jsCode": "// Get prompt text\nconst prompt = $json.data;\n\n// Extract variables inside {{ }} dynamically\nconst matches = [...prompt.matchAll(/{{(.*?)}}/g)];\nconst uniqueVars = [...new Set(matches.map(match => match[1].trim().split('.').pop()))];\n\n// Get variables from the Set Node\nconst setNodeVariables = $node[\"setVars\"].json || {};\n\n// Log extracted variables and Set Node keys\nconsole.log(\"Extracted Variables:\", uniqueVars);\nconsole.log(\"Set Node Keys:\", Object.keys(setNodeVariables));\n\n// Check if all required variables are present in the Set Node\nconst missingKeys = uniqueVars.filter(varName => !setNodeVariables.hasOwnProperty(varName));\n\nconsole.log(\"Missing Keys:\", missingKeys);\n\n// Return false if any required variable is missing, otherwise return true\nreturn [{\n success: missingKeys.length === 0,\n missingKeys: missingKeys\n}];\n"
  },
  "typeVersion": 2
}

================ Node #466 ================
{
  "id": "32618e10-3285-4c16-9e78-058dde329337",
  "name": "SetPrompt",
  "type": "n8n-nodes-base.set",
  "position": [
    1060,
    0
  ],
  "parameters": {
    "options": {},
    "assignments": {
      "assignments": [
        {
          "id": "335b450d-542a-4714-83d8-ccc237188fc5",
          "name": "data",
          "type": "string",
          "value": "={{ $json.data }}"
        }
      ]
    }
  },
  "typeVersion": 3.4
}

================ Node #467 ================
{
  "id": "4d8b34ca-50dd-4f37-b4f7-542291461662",
  "name": "Stop and Error",
  "type": "n8n-nodes-base.stopAndError",
  "position": [
    1900,
    200
  ],
  "parameters": {
    "errorMessage": "=Missing Prompt Variables : {{ $('Check All Prompt Vars Present').item.json.missingKeys }}\n"
  },
  "typeVersion": 1
}

================ Node #468 ================
{
  "id": "a78c1e17-9152-4241-bcdf-c0d723da543b",
  "name": "Set Completed Prompt",
  "type": "n8n-nodes-base.set",
  "position": [
    2220,
    -20
  ],
  "parameters": {
    "options": {},
    "assignments": {
      "assignments": [
        {
          "id": "57a9625b-adea-4ee7-a72a-2be8db15f3d4",
          "name": "Prompt",
          "type": "string",
          "value": "={{ $json.prompt }}"
        }
      ]
    }
  },
  "typeVersion": 3.4
}

================ Node #469 ================
{
  "id": "51447c90-a222-4172-a49b-86ec43332559",
  "name": "AI Agent",
  "type": "@n8n/n8n-nodes-langchain.agent",
  "position": [
    2440,
    -20
  ],
  "parameters": {
    "text": "={{ $json.Prompt }}",
    "options": {},
    "promptType": "define"
  },
  "typeVersion": 1.7
}

================ Node #470 ================
{
  "id": "f15b6af1-7af2-4515-be8f-960211118dce",
  "name": "Sticky Note",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    60,
    -120
  ],
  "parameters": {
    "width": 340,
    "height": 260,
    "content": "# Set The variables in your prompt here"
  },
  "typeVersion": 1
}

================ Node #471 ================
{
  "id": "163db6cc-5b06-4ae6-ac97-5890b37cdb18",
  "name": "Sticky Note1",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    520,
    -120
  ],
  "parameters": {
    "color": 5,
    "content": "## The repo is currently public for you to test with"
  },
  "typeVersion": 1
}

================ Node #472 ================
{
  "id": "83ff6a86-a759-42a9-ace4-e20d57b906db",
  "name": "Sticky Note2",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    1780,
    -200
  ],
  "parameters": {
    "width": 360,
    "height": 260,
    "content": "## Replaces the values in the prompt with the variables in the \n# 'setVars' Node"
  },
  "typeVersion": 1
}

================ Node #473 ================
{
  "id": "7dd61153-84ac-4b59-b449-333825476c33",
  "name": "Sticky Note3",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    2000,
    180
  ],
  "parameters": {
    "color": 3,
    "content": "## If you're missing variables they will be listed here"
  },
  "typeVersion": 1
}

================ Node #474 ================
{
  "id": "1f070dc3-3d25-41d8-b534-912ba7c8b2b0",
  "name": "Prompt Output",
  "type": "n8n-nodes-base.set",
  "position": [
    2800,
    -20
  ],
  "parameters": {
    "options": {},
    "assignments": {
      "assignments": [
        {
          "id": "01a30683-c348-4712-a3b1-739fc4a17718",
          "name": "promptResponse",
          "type": "string",
          "value": "={{ $json.output }}"
        }
      ]
    }
  },
  "typeVersion": 3.4
}

================ Node #475 ================
{
  "id": "2d12a6e2-7976-41b0-8cb2-01466b28269d",
  "name": "Ollama Chat Model",
  "type": "@n8n/n8n-nodes-langchain.lmChatOllama",
  "position": [
    2480,
    200
  ],
  "parameters": {
    "options": {}
  },
  "credentials": {
    "ollamaApi": {
      "id": "ERfZ8mAfQ1b0aoxZ",
      "name": "Ollama account"
    }
  },
  "typeVersion": 1
}

================ Node #476 ================
{
  "id": "b72721d2-bce7-458d-8ff1-cc9f6d099aaf",
  "name": "Settings",
  "type": "n8n-nodes-base.set",
  "position": [
    -420,
    -640
  ],
  "parameters": {
    "options": {},
    "assignments": {
      "assignments": [
        {
          "id": "3d7f9677-c753-4126-b33a-d78ef701771f",
          "name": "model",
          "type": "string",
          "value": "deepseek/deepseek-r1-distill-llama-8b"
        },
        {
          "id": "301f86ec-260f-4d69-abd9-bde982e3e0aa",
          "name": "prompt",
          "type": "string",
          "value": "={{ $json.chatInput }}"
        },
        {
          "id": "a9f65181-902d-48f5-95ce-1352d391a056",
          "name": "sessionId",
          "type": "string",
          "value": "={{ $json.sessionId }}"
        }
      ]
    }
  },
  "typeVersion": 3.4
}

================ Node #477 ================
{
  "id": "a4593d64-e67a-490e-9cb4-936cc46273a0",
  "name": "Sticky Note",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    -460,
    -740
  ],
  "parameters": {
    "width": 180,
    "height": 400,
    "content": "## Settings\nSpecify the model"
  },
  "typeVersion": 1
}

================ Node #478 ================
{
  "id": "3ea3b09a-0ab7-4e0f-bb4f-3d807d072d4e",
  "name": "Sticky Note1",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    -240,
    -740
  ],
  "parameters": {
    "color": 3,
    "width": 380,
    "height": 400,
    "content": "## Run LLM\nUsing OpenRouter to make model fully configurable"
  },
  "typeVersion": 1
}

================ Node #479 ================
{
  "id": "19d47fcb-af37-4daa-84fd-3f43ffcb90ff",
  "name": "When chat message received",
  "type": "@n8n/n8n-nodes-langchain.chatTrigger",
  "position": [
    -660,
    -640
  ],
  "webhookId": "71f56e44-401f-44ba-b54d-c947e283d034",
  "parameters": {
    "options": {}
  },
  "typeVersion": 1.1
}

================ Node #480 ================
{
  "id": "f5a793f2-1e2f-4349-a075-9b9171297277",
  "name": "AI Agent",
  "type": "@n8n/n8n-nodes-langchain.agent",
  "position": [
    -180,
    -640
  ],
  "parameters": {
    "text": "={{ $json.prompt }}",
    "options": {},
    "promptType": "define"
  },
  "typeVersion": 1.7
}

================ Node #481 ================
{
  "id": "dbbd9746-ca25-4163-91c5-a9e33bff62a4",
  "name": "Chat Memory",
  "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
  "position": [
    -80,
    -460
  ],
  "parameters": {
    "sessionKey": "={{ $json.sessionId }}",
    "sessionIdType": "customKey"
  },
  "typeVersion": 1.3
}

================ Node #482 ================
{
  "id": "ef368cea-1b38-455b-b46a-5d0ef7a3ceb3",
  "name": "LLM Model",
  "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
  "position": [
    -200,
    -460
  ],
  "parameters": {
    "model": "={{ $json.model }}",
    "options": {}
  },
  "credentials": {
    "openAiApi": {
      "id": "66JEQJ5kJel1P9t3",
      "name": "OpenRouter"
    }
  },
  "typeVersion": 1.1
}

================ Node #483 ================
{
  "id": "32601e76-0979-4690-8dcf-149ddbf61983",
  "name": "Sticky Note2",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    -460,
    -320
  ],
  "parameters": {
    "width": 600,
    "height": 240,
    "content": "## Model examples\n\n* openai/o3-mini\n* google/gemini-2.0-flash-001\n* deepseek/deepseek-r1-distill-llama-8b\n* mistralai/mistral-small-24b-instruct-2501:free\n* qwen/qwen-turbo\n\nFor more see https://openrouter.ai/models"
  },
  "typeVersion": 1
}

================ Node #484 ================
{
  "id": "9320d08a-4868-4103-abdf-3f8f54a7a0a0",
  "name": "Webhook",
  "type": "n8n-nodes-base.webhook",
  "position": [
    0,
    0
  ],
  "webhookId": "9024e29e-9080-4cf5-9a6b-0d918468f195",
  "parameters": {
    "path": "ytube",
    "options": {},
    "httpMethod": "POST",
    "responseMode": "responseNode"
  },
  "typeVersion": 2
}

================ Node #485 ================
{
  "id": "a5cc8922-8124-4269-9cfd-e891b29cc2b7",
  "name": "YouTube Transcript",
  "type": "n8n-nodes-youtube-transcription.youtubeTranscripter",
  "position": [
    800,
    0
  ],
  "parameters": {},
  "typeVersion": 1
}

================ Node #486 ================
{
  "id": "ff3c0fd1-36d8-4d64-b405-0600efd4d93b",
  "name": "Split Out",
  "type": "n8n-nodes-base.splitOut",
  "position": [
    200,
    260
  ],
  "parameters": {
    "options": {},
    "fieldToSplitOut": "transcript"
  },
  "typeVersion": 1
}

================ Node #487 ================
{
  "id": "423276e0-81bf-487a-bbdd-26e9b84fa755",
  "name": "Respond to Webhook",
  "type": "n8n-nodes-base.respondToWebhook",
  "position": [
    1200,
    140
  ],
  "parameters": {
    "options": {}
  },
  "typeVersion": 1.1
}

================ Node #488 ================
{
  "id": "27344649-8029-48ae-867b-7363d904fc59",
  "name": "Telegram",
  "type": "n8n-nodes-base.telegram",
  "position": [
    1200,
    380
  ],
  "parameters": {
    "text": "={{ $json.title }}\n{{ $json.youtubeUrl }}",
    "additionalFields": {
      "parse_mode": "HTML",
      "appendAttribution": false
    }
  },
  "typeVersion": 1.2
}

================ Node #489 ================
{
  "id": "230c0325-d22a-4070-9460-748a6fef48d5",
  "name": "Get YouTube URL",
  "type": "n8n-nodes-base.set",
  "position": [
    200,
    0
  ],
  "parameters": {
    "options": {},
    "assignments": {
      "assignments": [
        {
          "id": "3ee42e4c-3cee-4934-97e7-64c96b5691ed",
          "name": "youtubeUrl",
          "type": "string",
          "value": "={{ $json.body.youtubeUrl }}"
        }
      ]
    }
  },
  "typeVersion": 3.4
}

================ Node #490 ================
{
  "id": "420e90c3-9dfa-4f41-825a-9874b5ebe43a",
  "name": "YouTube Video ID",
  "type": "n8n-nodes-base.code",
  "position": [
    400,
    0
  ],
  "parameters": {
    "jsCode": "const extractYoutubeId = (url) => {\n // Regex pattern that matches both youtu.be and youtube.com URLs\n const pattern = /(?:youtube\\.com\\/(?:[^\\/]+\\/.+\\/|(?:v|e(?:mbed)?)\\/|.*[?&]v=)|youtu\\.be\\/)([^\"&?\\/\\s]{11})/;\n const match = url.match(pattern);\n return match ? match[1] : null;\n};\n\n// Input URL from previous node\nconst youtubeUrl = items[0].json.youtubeUrl; // Adjust this based on your workflow\n\n// Process the URL and return the video ID\nreturn [{\n json: {\n videoId: extractYoutubeId(youtubeUrl)\n }\n}];\n"
  },
  "typeVersion": 2
}

================ Node #491 ================
{
  "id": "a4171c3e-1ff2-40de-af7f-b3971a1ebe79",
  "name": "Get YouTube Video",
  "type": "n8n-nodes-base.youTube",
  "position": [
    600,
    0
  ],
  "parameters": {
    "options": {},
    "videoId": "={{ $json.videoId }}",
    "resource": "video",
    "operation": "get"
  },
  "typeVersion": 1
}

================ Node #492 ================
{
  "id": "73e6bfc5-8b62-4880-acd4-292f2f692540",
  "name": "gpt-4o-mini",
  "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
  "position": [
    620,
    440
  ],
  "parameters": {
    "options": {}
  },
  "typeVersion": 1
}

================ Node #493 ================
{
  "id": "ea14e296-b30c-46f7-b283-746822ae1af4",
  "name": "Summarize & Analyze Transcript",
  "type": "@n8n/n8n-nodes-langchain.chainLlm",
  "position": [
    600,
    260
  ],
  "parameters": {
    "text": "=Please analyze the given text and create a structured summary following these guidelines:\n\n1. Break down the content into main topics using Level 2 headers (##)\n2. Under each header:\n - List only the most essential concepts and key points\n - Use bullet points for clarity\n - Keep explanations concise\n - Preserve technical accuracy\n - Highlight key terms in bold\n3. Organize the information in this sequence:\n - Definition/Background\n - Main characteristics\n - Implementation details\n - Advantages/Disadvantages\n4. Format requirements:\n - Use markdown formatting\n - Keep bullet points simple (no nesting)\n - Bold important terms using **term**\n - Use tables for comparisons\n - Include relevant technical details\n\nPlease provide a clear, structured summary that captures the core concepts while maintaining technical accuracy.\n\nHere is the text: {{ $json.concatenated_text\n }}",
    "promptType": "define"
  },
  "typeVersion": 1.4
}

================ Node #494 ================
{
  "id": "90e3488f-f854-483e-9106-a5760d0c0457",
  "name": "Concatenate",
  "type": "n8n-nodes-base.summarize",
  "position": [
    400,
    260
  ],
  "parameters": {
    "options": {},
    "fieldsToSummarize": {
      "values": [
        {
          "field": "text",
          "separateBy": " ",
          "aggregation": "concatenate"
        }
      ]
    }
  },
  "typeVersion": 1
}

================ Node #495 ================
{
  "id": "9c5c249c-5eeb-4433-ba93-ace4611f4858",
  "name": "Response Object",
  "type": "n8n-nodes-base.set",
  "position": [
    960,
    260
  ],
  "parameters": {
    "options": {},
    "assignments": {
      "assignments": [
        {
          "id": "bf132004-6636-411f-9d85-0c696fda84c4",
          "name": "summary",
          "type": "string",
          "value": "={{ $json.text }}"
        },
        {
          "id": "63c8d0e3-685c-488a-9b45-363cf52479ea",
          "name": "topics",
          "type": "array",
          "value": "=[]"
        },
        {
          "id": "171f30cf-34e9-42f3-8735-814024bfde0b",
          "name": "title",
          "type": "string",
          "value": "={{ $('Get YouTube Video').item.json.snippet.title }}"
        },
        {
          "id": "7f26f5a3-e695-49d1-b1e8-9260c31f1b3d",
          "name": "description",
          "type": "string",
          "value": "={{ $('Get YouTube Video').item.json.snippet.description }}"
        },
        {
          "id": "d0594232-cb39-453c-b015-3b039c098e1f",
          "name": "id",
          "type": "string",
          "value": "={{ $('Get YouTube Video').item.json.id }}"
        },
        {
          "id": "17b6ca08-ce89-4467-bd25-0d2d182f7a8b",
          "name": "youtubeUrl",
          "type": "string",
          "value": "={{ $('Webhook').item.json.body.youtubeUrl }}"
        }
      ]
    }
  },
  "typeVersion": 3.4
}

================ Node #496 ================
{
  "id": "293b70f0-06e8-4db5-befd-bfaed1f3575a",
  "name": "When clicking \u2018Test workflow\u2019",
  "type": "n8n-nodes-base.manualTrigger",
  "position": [
    -460,
    80
  ],
  "parameters": {},
  "typeVersion": 1
}

================ Node #497 ================
{
  "id": "1c473546-6280-412d-9f8e-b43962365d78",
  "name": "Set Params",
  "type": "n8n-nodes-base.set",
  "position": [
    -160,
    -60
  ],
  "parameters": {
    "options": {},
    "assignments": {
      "assignments": [
        {
          "id": "8b5c6ca0-5ca8-4f67-abc1-44341cf419bc",
          "name": "system_prompt",
          "type": "string",
          "value": "You are an n8n fanboy."
        },
        {
          "id": "7c36c362-6269-4564-b6fe-f82126bc8f5e",
          "name": "user_prompt",
          "type": "string",
          "value": "What are the differences between n8n and Make?"
        },
        {
          "id": "4366d2b5-ad22-445a-8589-fddab1caa1ab",
          "name": "domains",
          "type": "string",
          "value": "n8n.io, make.com"
        }
      ]
    }
  },
  "typeVersion": 3.4
}

================ Node #498 ================
{
  "id": "894bd6a4-5db7-45fb-a8e0-1a81af068bbf",
  "name": "Clean Output",
  "type": "n8n-nodes-base.set",
  "position": [
    580,
    -100
  ],
  "parameters": {
    "options": {},
    "assignments": {
      "assignments": [
        {
          "id": "5859093c-6b22-41db-ac6c-9a9f6f18b7e3",
          "name": "output",
          "type": "string",
          "value": "={{ $json.choices[0].message.content }}"
        },
        {
          "id": "13208fff-5153-45a7-a1cb-fe49e32d9a03",
          "name": "citations",
          "type": "array",
          "value": "={{ $json.citations }}"
        }
      ]
    }
  },
  "typeVersion": 3.4
}

================ Node #499 ================
{
  "id": "52d3a832-8c9b-4356-ad2a-377340678a58",
  "name": "Perplexity Request",
  "type": "n8n-nodes-base.httpRequest",
  "position": [
    240,
    40
  ],
  "parameters": {
    "url": "https://api.perplexity.ai/chat/completions",
    "method": "POST",
    "options": {},
    "jsonBody": "={\n \"model\": \"sonar\",\n \"messages\": [\n {\n \"role\": \"system\",\n \"content\": \"{{ $json.system_prompt }}\"\n },\n {\n \"role\": \"user\",\n \"content\": \"{{ $json.user_prompt }}\"\n }\n ],\n \"temperature\": 0.2,\n \"top_p\": 0.9,\n \"search_domain_filter\": {{ (JSON.stringify($json.domains.split(','))) }},\n \"return_images\": false,\n \"return_related_questions\": false,\n \"search_recency_filter\": \"month\",\n \"top_k\": 0,\n \"stream\": false,\n \"presence_penalty\": 0,\n \"frequency_penalty\": 1,\n \"response_format\": null\n}",
    "sendBody": true,
    "specifyBody": "json",
    "authentication": "genericCredentialType",
    "genericAuthType": "httpHeaderAuth"
  },
  "credentials": {
    "httpBasicAuth": {
      "id": "yEocL0NSpUWzMsHG",
      "name": "Perplexity"
    },
    "httpHeaderAuth": {
      "id": "TngzgS09J1YvLIXl",
      "name": "Perplexity"
    }
  },
  "typeVersion": 4.2
}

================ Node #500 ================
{
  "id": "48657f2c-d1dd-4d7e-8014-c27748e63e58",
  "name": "Sticky Note",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    -140,
    -440
  ],
  "parameters": {
    "width": 480,
    "height": 300,
    "content": "## Credentials Setup\n\n1/ Go to the perplexity dashboard, purchase some credits and create an API Key\n\nhttps://www.perplexity.ai/settings/api\n\n2/ In the perplexity Request node, use Generic Credentials, Header Auth. \n\nFor the name, use the value \"Authorization\"\nAnd for the value \"Bearer pplx-e4...59ea\" (Your Perplexity Api Key)\n\n"
  },
  "typeVersion": 1
}
