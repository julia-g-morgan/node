================ Node #2501 ================
{
  "id": "a7f8837d-c21b-457d-ad8b-b0b69e3c1ba7",
  "name": "Line Answering (Ordinary Case)",
  "type": "n8n-nodes-base.httpRequest",
  "position": [
    600,
    120
  ],
  "parameters": {
    "url": "https://api.line.me/v2/bot/message/reply",
    "method": "POST",
    "options": {},
    "jsonBody": "={\n \"replyToken\": \"{{ $('Line Receiving').item.json.body.events[0].replyToken }}\",\n \"messages\": [\n {\n \"type\": \"text\",\n \"text\": \"{{ $json.message.content }}\"\n }\n ]}",
    "sendBody": true,
    "jsonHeaders": "{\n\"Authorization\": \"Bearer ****************************************\",\n\"Content-Type\": \"application/json\"\n}",
    "sendHeaders": true,
    "specifyBody": "json",
    "specifyHeaders": "json"
  },
  "typeVersion": 4.2
}

================ Node #2502 ================
{
  "id": "3280f331-0130-41c2-a581-14feccf76514",
  "name": "Google Calendar Create",
  "type": "n8n-nodes-base.googleCalendarTool",
  "position": [
    -640,
    400
  ],
  "parameters": {
    "end": "= {{ $fromAI(\"createenddate\",\"end date and time to create event\") }}",
    "start": "= {{ $fromAI(\"createstartdate\",\"start date and time to create event\") }}",
    "calendar": {
      "__rl": true,
      "mode": "list",
      "value": "***********@gmail.com",
      "cachedResultName": "***********@gmail.com"
    },
    "additionalFields": {
      "summary": "={{ $fromAI(\"event_name\",\"Name of an Event\") }}"
    }
  },
  "credentials": {
    "googleCalendarOAuth2Api": {
      "id": "0PzHsuCKdTBU5E2Q",
      "name": "Google Calendar account"
    }
  },
  "typeVersion": 1.2
}

================ Node #2503 ================
{
  "id": "7701895f-9781-41b9-aa80-8440e4e9cbd3",
  "name": "Google Calendar Read",
  "type": "n8n-nodes-base.googleCalendarTool",
  "position": [
    -880,
    580
  ],
  "parameters": {
    "limit": 5,
    "options": {
      "timeMax": "={{ $fromAI(\"enddate\",\"end date user mentioned about\") }}",
      "timeMin": "={{ $fromAI(\"startdate\",\"start date user mentioned about\") }}"
    },
    "calendar": {
      "__rl": true,
      "mode": "list",
      "value": "***********@gmail.com",
      "cachedResultName": "***********@gmail.com"
    },
    "operation": "getAll"
  },
  "credentials": {
    "googleCalendarOAuth2Api": {
      "id": "0PzHsuCKdTBU5E2Q",
      "name": "Google Calendar account"
    }
  },
  "typeVersion": 1.2
}

================ Node #2504 ================
{
  "id": "881daa7f-cf9a-4d1f-8235-55d206925ac0",
  "name": "Gmail Read",
  "type": "n8n-nodes-base.gmailTool",
  "position": [
    -700,
    560
  ],
  "webhookId": "********-****-****-****-************",
  "parameters": {
    "limit": 5,
    "filters": {
      "receivedAfter": "={{ $fromAI(\"receiveddate\",\"the date email received\") }}"
    },
    "operation": "getAll"
  },
  "credentials": {
    "gmailOAuth2": {
      "id": "cZmU8EQya5OtXVgQ",
      "name": "Gmail account"
    }
  },
  "typeVersion": 2.1
}

================ Node #2505 ================
{
  "id": "00f3a7d9-9931-40a4-8eb5-5b9086d6995c",
  "name": "Fal Flux",
  "type": "n8n-nodes-base.httpRequest",
  "position": [
    420,
    0
  ],
  "parameters": {
    "url": "https://queue.fal.run/fal-ai/flux/dev",
    "method": "POST",
    "options": {},
    "jsonBody": "={\n \"prompt\": \"{{ $json.Prompt }}\",\n \"image_size\": {\n \"width\": {{ $json.Width }},\n \"height\": {{ $json.Height }}\n},\n \"num_inference_steps\": {{ $json.Steps }},\n \"guidance_scale\": {{ $json.Guidance }},\n \"num_images\": 1,\n \"enable_safety_checker\": true\n}",
    "sendBody": true,
    "specifyBody": "json",
    "authentication": "genericCredentialType",
    "genericAuthType": "httpHeaderAuth"
  },
  "credentials": {
    "httpHeaderAuth": {
      "id": "lNxvZHlUafPAHBYN",
      "name": "Fal Flux Header Auth account"
    }
  },
  "typeVersion": 4.2
}

================ Node #2506 ================
{
  "id": "3032a543-2e21-415e-a5bd-d56ea33e4411",
  "name": "Get Image Result URL",
  "type": "n8n-nodes-base.httpRequest",
  "position": [
    1220,
    -20
  ],
  "parameters": {
    "url": "=https://queue.fal.run/fal-ai/flux/requests/{{ $json.request_id }}",
    "options": {},
    "authentication": "genericCredentialType",
    "genericAuthType": "httpHeaderAuth"
  },
  "credentials": {
    "httpHeaderAuth": {
      "id": "lNxvZHlUafPAHBYN",
      "name": "Fal Flux Header Auth account"
    }
  },
  "typeVersion": 4.2
}

================ Node #2507 ================
{
  "id": "56e13e53-1697-4970-9bea-b75e0e849425",
  "name": "Download Image",
  "type": "n8n-nodes-base.httpRequest",
  "position": [
    1400,
    -20
  ],
  "parameters": {
    "url": "={{ $json.images[0].url }}",
    "options": {}
  },
  "typeVersion": 4.2
}

================ Node #2508 ================
{
  "id": "dd2efd2c-8712-4a77-8786-cccebdec876b",
  "name": "Google Drive",
  "type": "n8n-nodes-base.googleDrive",
  "position": [
    1580,
    -20
  ],
  "parameters": {
    "name": "={{ $binary.data.fileName }}",
    "driveId": {
      "__rl": true,
      "mode": "list",
      "value": "My Drive"
    },
    "options": {},
    "folderId": {
      "__rl": true,
      "mode": "list",
      "value": "1R3PSyHXWHlY9DRFdOUEAPEop2fZy-_-K",
      "cachedResultUrl": "https://drive.google.com/drive/folders/1R3PSyHXWHlY9DRFdOUEAPEop2fZy-_-K",
      "cachedResultName": "Flux Image"
    }
  },
  "credentials": {
    "googleDriveOAuth2Api": {
      "id": "CFiX9XTXGg4hGaGV",
      "name": "Google Drive account"
    }
  },
  "typeVersion": 3
}

================ Node #2509 ================
{
  "id": "a598d868-0461-41fc-b6aa-f9998e9d6146",
  "name": "When clicking \u2018Test workflow\u2019",
  "type": "n8n-nodes-base.manualTrigger",
  "position": [
    -60,
    0
  ],
  "parameters": {},
  "typeVersion": 1
}

================ Node #2510 ================
{
  "id": "a576d7b6-b2f3-4d53-8e7f-bb6449ff9c64",
  "name": "Sticky Note",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    80,
    -120
  ],
  "parameters": {
    "width": 260,
    "height": 120,
    "content": "## Set Parameter Here \nset Image Prompt and related settings"
  },
  "typeVersion": 1
}

================ Node #2511 ================
{
  "id": "d39e85a8-3ddd-4f10-ba4c-beb86a850e10",
  "name": "Wait 3 Sec",
  "type": "n8n-nodes-base.wait",
  "position": [
    640,
    0
  ],
  "webhookId": "61a8626c-e281-4d4b-abb0-b9d87d1b4e7c",
  "parameters": {
    "amount": 3
  },
  "typeVersion": 1.1
}

================ Node #2512 ================
{
  "id": "b27ac2f1-3f14-467e-81c4-af8b8fb37138",
  "name": "Check Status",
  "type": "n8n-nodes-base.httpRequest",
  "position": [
    840,
    0
  ],
  "parameters": {
    "url": "=https://queue.fal.run/fal-ai/flux/requests/{{ $json.request_id }}/status",
    "options": {},
    "authentication": "genericCredentialType",
    "genericAuthType": "httpHeaderAuth"
  },
  "credentials": {
    "httpHeaderAuth": {
      "id": "lNxvZHlUafPAHBYN",
      "name": "Fal Flux Header Auth account"
    }
  },
  "typeVersion": 4.2
}

================ Node #2513 ================
{
  "id": "7ee45dab-8e31-44de-bbb1-e99a565ee19c",
  "name": "Completed?",
  "type": "n8n-nodes-base.if",
  "position": [
    1020,
    0
  ],
  "parameters": {
    "options": {},
    "conditions": {
      "options": {
        "version": 2,
        "leftValue": "",
        "caseSensitive": true,
        "typeValidation": "strict"
      },
      "combinator": "and",
      "conditions": [
        {
          "id": "299a7c34-dcff-4991-a73f-5b1a84f188ea",
          "operator": {
            "name": "filter.operator.equals",
            "type": "string",
            "operation": "equals"
          },
          "leftValue": "={{ $json.status }}",
          "rightValue": "COMPLETED"
        }
      ]
    }
  },
  "typeVersion": 2.2
}

================ Node #2514 ================
{
  "id": "c5036a7d-1879-449f-8ce9-9c1cf2c7426b",
  "name": "Sticky Note1",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    1300,
    -100
  ],
  "parameters": {
    "width": 220,
    "height": 100,
    "content": "## Set Drive Folder Here "
  },
  "typeVersion": 1
}

================ Node #2515 ================
{
  "id": "c8887168-6234-486c-b7cb-cc0752c6341c",
  "name": "Sticky Note2",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    360,
    -180
  ],
  "parameters": {
    "width": 260,
    "height": 180,
    "content": "### Generic Credential Type\n### Header : Authorization\nKey $FAL_KEY\"\n\nfor example:\nKey 6f2960baxxxxxxxxx"
  },
  "typeVersion": 1
}

================ Node #2516 ================
{
  "id": "587043c4-e808-4c3f-910f-60f5eb8aff15",
  "name": "Edit Fields",
  "type": "n8n-nodes-base.set",
  "position": [
    180,
    0
  ],
  "parameters": {
    "options": {},
    "assignments": {
      "assignments": [
        {
          "id": "f0a033cf-fa2b-4930-93b9-ff9c45fa7c14",
          "name": "Prompt",
          "type": "string",
          "value": "Thai young woman net idol 25 yrs old, walking on the street"
        },
        {
          "id": "2b56185d-5c61-4c17-85f1-53ac4aab2b18",
          "name": "Width",
          "type": "number",
          "value": 1024
        },
        {
          "id": "51eb65c0-ae0a-4ce7-ab00-9d13f05ce1e6",
          "name": "Height",
          "type": "number",
          "value": 768
        },
        {
          "id": "8e89fca7-d380-4876-b973-69caa0394bc5",
          "name": "Steps",
          "type": "number",
          "value": 30
        },
        {
          "id": "875e06b7-352a-4dde-8595-3274e9969c9c",
          "name": "Guidance",
          "type": "number",
          "value": 3.5
        }
      ]
    }
  },
  "typeVersion": 3.4
}

================ Node #2517 ================
{
  "id": "9ee6710b-19b7-4bfd-ac2d-0fe1e2561f1d",
  "name": "Postgres Chat Memory",
  "type": "@n8n/n8n-nodes-langchain.memoryPostgresChat",
  "position": [
    1796,
    220
  ],
  "parameters": {
    "tableName": "insights_chat_histories"
  },
  "credentials": {
    "postgres": {
      "id": "",
      "name": "Postgres"
    }
  },
  "typeVersion": 1.1
}

================ Node #2518 ================
{
  "id": "eb9f07e9-ded1-485c-9bf3-cf223458384a",
  "name": "OpenAI Chat Model",
  "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
  "position": [
    1356,
    240
  ],
  "parameters": {
    "model": "gpt-4o",
    "options": {
      "maxTokens": 16000
    }
  },
  "credentials": {
    "openAiApi": {
      "id": "",
      "name": "OpenAi"
    }
  },
  "typeVersion": 1
}

================ Node #2519 ================
{
  "id": "1d3d6fb7-a171-4590-be42-df7eb0c208ed",
  "name": "Set fields",
  "type": "n8n-nodes-base.set",
  "position": [
    940,
    -20
  ],
  "parameters": {
    "options": {},
    "assignments": {
      "assignments": [
        {
          "id": "9f47b322-e42f-42d7-93eb-a57d22adb849",
          "name": "chatInput",
          "type": "string",
          "value": "={{ $json.body?.chatInput || $json.chatInput }}"
        },
        {
          "id": "73ec4dd0-e986-4f60-9dca-6aad2f86bdeb",
          "name": "sessionId",
          "type": "string",
          "value": "={{ $json.body?.sessionId || $json.sessionId }}"
        },
        {
          "id": "4b688c46-b60f-4f0a-83d8-e283f2d7055c",
          "name": "date_message",
          "type": "string",
          "value": "={{ $now.format('yyyy-MM-dd') }}"
        }
      ]
    }
  },
  "typeVersion": 3.4
}

================ Node #2520 ================
{
  "id": "92dc5e8b-5140-49be-8713-5749b7e2d46b",
  "name": "Sticky Note",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    407.32142857142867,
    -320
  ],
  "parameters": {
    "color": 7,
    "width": 347.9910714285712,
    "height": 516.8973214285712,
    "content": "## Webhook - ChatInput\n\nThis webhook serves as the endpoint for receiving `ChatInput` data. Ensure that you include:\n- `chatInput` \u2013 the content you wish to send (\ud83d\ude09)\n- `sessionId` \u2013 a unique identifier for the session\n\nIf you're using an interface such as **Open WebUI**, the `sessionId` will be generated automatically."
  },
  "typeVersion": 1
}

================ Node #2521 ================
{
  "id": "ca9f3732-9b62-4f44-b970-77d5d470ec76",
  "name": "Webhook - ChatInput",
  "type": "n8n-nodes-base.webhook",
  "position": [
    500,
    -20
  ],
  "webhookId": "a6820b65-76cf-402b-a934-0f836dee6ba0",
  "parameters": {
    "path": "a6820b65-76cf-402b-a934-0f836dee6ba0/chat",
    "options": {},
    "httpMethod": "POST",
    "responseMode": "responseNode",
    "authentication": "basicAuth"
  },
  "credentials": {
    "httpBasicAuth": {
      "id": "",
      "name": "basic-auth"
    }
  },
  "typeVersion": 2
}

================ Node #2522 ================
{
  "id": "9d684873-6dfe-4709-928d-293b187dfb30",
  "name": "Sticky Note1",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    820,
    -320
  ],
  "parameters": {
    "color": 7,
    "width": 347.9910714285712,
    "height": 516.8973214285712,
    "content": "## Set fields\n\nThis node sets three fields:\n- `chatInput`: retrieved from the previous webhook node\n- `sessionId`: retrieved from the previous webhook node\n- `date_message`: formatted within this node. This will be used later to help the AI agent determine the date range for retrieving Search Console data."
  },
  "typeVersion": 1
}

================ Node #2523 ================
{
  "id": "8750215a-1e33-4ac8-a6da-95efa8ffed65",
  "name": "Respond to Webhook",
  "type": "n8n-nodes-base.respondToWebhook",
  "position": [
    2600,
    -20
  ],
  "parameters": {
    "options": {}
  },
  "typeVersion": 1.1
}

================ Node #2524 ================
{
  "id": "1b879496-5c0f-4bd5-b4cb-18df2662aef2",
  "name": "Sticky Note2",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    1240,
    -320
  ],
  "parameters": {
    "color": 7,
    "width": 1154.2857142857138,
    "height": 516.8973214285712,
    "content": "## AI Agent - Tools Agent\n\nThis AI Agent is configured with a system prompt that instructs it to:\n- On the first user message, **retrieve available Search Console properties** and offer the user the option to **fetch data from these properties**\n- Based on the user\u2019s natural language input, **construct an API call** to the selected Search Console property and retrieve the requested data\n- Present the data in a **markdown-formatted table**\n\nThe AI Agent has a friendly tone and is designed to **confirm the user\u2019s data requirements accurately** before executing any API requests.\n"
  },
  "typeVersion": 1
}

================ Node #2525 ================
{
  "id": "c44c6402-9ddd-4a7b-bc5a-b6c3679a3f68",
  "name": "Call Search Console Tool",
  "type": "@n8n/n8n-nodes-langchain.toolWorkflow",
  "position": [
    2196,
    220
  ],
  "parameters": {
    "name": "SearchConsoleRequestTool",
    "workflowId": {
      "__rl": true,
      "mode": "list",
      "value": "PoiRk5w0xd1ysq4U",
      "cachedResultName": "My workflow 10"
    },
    "description": "Call this tool when you need to get the website_list or custom_insights",
    "jsonSchemaExample": ""
  },
  "typeVersion": 1.2
}

================ Node #2526 ================
{
  "id": "b1701a89-c5b3-47fb-99d5-4896a6d5c7a2",
  "name": "Sticky Note3",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    1234,
    220
  ],
  "parameters": {
    "color": 6,
    "width": 328.9664285714292,
    "height": 468.13107142857154,
    "content": "\n\n\n\n\n\n\n\n\n\n\n### AI Agent Sub-node - OpenAI Chat Model\n\nThis sub-node utilizes the selected **OpenAI Chat Model**. You can replace it with any LLM that **supports tool calling**.\n\n### \u26a0\ufe0f Choose Your Model\nIn this template, the **default model is `gpt-4o`**, a **costly option**. If you'd like a more **affordable alternative**, select `gpt4-o-mini`, though note that responses may occasionally be of slightly lower quality compared to `gpt-4o`."
  },
  "typeVersion": 1
}

================ Node #2527 ================
{
  "id": "cd1a7cec-5845-47b1-a2c8-d3b458a02eb0",
  "name": "Sticky Note4",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    1656,
    220
  ],
  "parameters": {
    "color": 6,
    "width": 328.9664285714292,
    "height": 468.13107142857154,
    "content": "\n\n\n\n\n\n\n\n\n\n\n### AI Agent Sub-node - Postgres Chat Memory\n\nConnect your **Postgres credentials** and specify a **table name** to store the chat history. In this template, the default table name is `insights_chat_histories`, and the **context window length is set to 5**.\n\n**\ud83d\udc4b Tip:** If you don\u2019t have a Postgres database, you can quickly **set one up with [Supabase](https://supabase.com/)**.\n"
  },
  "typeVersion": 1
}

================ Node #2528 ================
{
  "id": "290a07d1-c7ed-434d-9851-2a2dcdd35bdf",
  "name": "Sticky Note6",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    2076,
    220
  ],
  "parameters": {
    "color": 6,
    "width": 328.9664285714292,
    "height": 468.13107142857154,
    "content": "\n\n\n\n\n\n\n\n\n\n\n### AI Agent Sub-node - Call Search Console Tool\n\nThis **tool is used by the AI Agent** to:\n- Retrieve the **list of accessible properties in Search Console**\n- **Fetch Search Console data** based on the user\u2019s natural language request\n\n"
  },
  "typeVersion": 1
}

================ Node #2529 ================
{
  "id": "07805c90-7ba5-44d0-b6eb-5a65efb0f8be",
  "name": "Sticky Note5",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    2480,
    -320
  ],
  "parameters": {
    "color": 7,
    "width": 347.9910714285712,
    "height": 516.8973214285712,
    "content": "## Respond to Webhook\n\nThis node is used to send a response back to the user.\n\n**\ud83d\udc4b Tip:** `intermediateSteps` are configured, allowing you to use raw data fetched from Search Console to **create charts or other visualizations** if desired.\n"
  },
  "typeVersion": 1
}

================ Node #2530 ================
{
  "id": "9a927a40-45e4-4fd5-ab3e-b77578469f82",
  "name": "Sticky Note7",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    400,
    800
  ],
  "parameters": {
    "color": 7,
    "width": 370.3910714285712,
    "height": 492.3973214285712,
    "content": "## Tool Call Trigger\n\nThis **node is triggered when the AI Agent needs to retrieve the `website_list`** (accessible Search Console properties) or **`custom_insights`** based on user data.\n"
  },
  "typeVersion": 1
}

================ Node #2531 ================
{
  "id": "c54a4653-0f09-46b0-bd20-68919b96e154",
  "name": "Tool calling",
  "type": "n8n-nodes-base.executeWorkflowTrigger",
  "position": [
    500,
    1080
  ],
  "parameters": {},
  "typeVersion": 1
}

================ Node #2532 ================
{
  "id": "cc7303ee-1afa-4859-83e7-3af0e963a0f1",
  "name": "Switch",
  "type": "n8n-nodes-base.switch",
  "position": [
    1300,
    1080
  ],
  "parameters": {
    "rules": {
      "values": [
        {
          "outputKey": "custom_insights",
          "conditions": {
            "options": {
              "version": 2,
              "leftValue": "",
              "caseSensitive": true,
              "typeValidation": "strict"
            },
            "combinator": "and",
            "conditions": [
              {
                "id": "a30fe6a6-7d0a-4f14-8492-ae021ddc8ec6",
                "operator": {
                  "type": "string",
                  "operation": "contains"
                },
                "leftValue": "={{ $json.request_type }}",
                "rightValue": "custom_insights"
              }
            ]
          },
          "renameOutput": true
        },
        {
          "outputKey": "website_list",
          "conditions": {
            "options": {
              "version": 2,
              "leftValue": "",
              "caseSensitive": true,
              "typeValidation": "strict"
            },
            "combinator": "and",
            "conditions": [
              {
                "id": "1b7d6039-6474-4a73-b157-584743a9d7f0",
                "operator": {
                  "type": "string",
                  "operation": "contains"
                },
                "leftValue": "={{$json.request_type}}",
                "rightValue": "website_list"
              }
            ]
          },
          "renameOutput": true
        }
      ]
    },
    "options": {}
  },
  "typeVersion": 3.2
}

================ Node #2533 ================
{
  "id": "6860ff98-4050-4f64-b8c1-a153e3388df0",
  "name": "Set fields - Consruct API CALL",
  "type": "n8n-nodes-base.set",
  "position": [
    920,
    1080
  ],
  "parameters": {
    "options": {},
    "assignments": {
      "assignments": [
        {
          "id": "06373437-8288-4171-9f98-e8a417220dd4",
          "name": "request_type",
          "type": "string",
          "value": "={{ $json.query.parseJson().request_type }}"
        },
        {
          "id": "da45c0c5-05f6-4107-81aa-8c08c972d9bf",
          "name": "start_date",
          "type": "string",
          "value": "={{ $json.query.parseJson().startDate }}"
        },
        {
          "id": "59d55034-c612-43d7-9700-4cacdb630ec2",
          "name": "end_date",
          "type": "string",
          "value": "={{ $json.query.parseJson().endDate }}"
        },
        {
          "id": "4c2478c0-7f96-4d3d-a632-089307dc989e",
          "name": "dimensions",
          "type": "string",
          "value": "={{ $json.query.parseJson().dimensions }}"
        },
        {
          "id": "eceefbf9-44e5-4617-96ea-58aca2a29618",
          "name": "rowLimit",
          "type": "number",
          "value": "={{ $json.query.parseJson().rowLimit }}"
        },
        {
          "id": "4e18386e-8548-4385-b620-43efbb11cd63",
          "name": "startRow",
          "type": "number",
          "value": "={{ $json.query.parseJson().startRow}}"
        },
        {
          "id": "a9323a7b-08b4-4015-b3d7-632bcdf56f4e",
          "name": "property",
          "type": "string",
          "value": "={{ encodeURIComponent($json.query.parseJson().property) }}"
        }
      ]
    }
  },
  "typeVersion": 3.4
}

================ Node #2534 ================
{
  "id": "0a2dfb28-17ee-477f-b9ea-f1d8e05e3745",
  "name": "Sticky Note8",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    820,
    800
  ],
  "parameters": {
    "color": 7,
    "width": 370.3910714285712,
    "height": 492.3973214285712,
    "content": "## Set Fields - Construct API Call\n\nThis node configures fields based on the JSON sent by the AI agent:\n- The `request_type` field determines the route: `website_list` (to retrieve the list of websites) or `custom_insights` (to get insights from Search Console)\n- Additional fields are set to construct the API call, following the **[Search Console API Documentation](https://developers.google.com/webmaster-tools/v1/searchanalytics/query?hl=en)**\n"
  },
  "typeVersion": 1
}

================ Node #2535 ================
{
  "id": "e6ef5c28-01e4-4a0b-9081-b62ec28be635",
  "name": "Set fields - Create searchConsoleDataArray",
  "type": "n8n-nodes-base.set",
  "position": [
    2180,
    980
  ],
  "parameters": {
    "options": {},
    "assignments": {
      "assignments": [
        {
          "id": "2cffd36f-72bd-4535-8427-a88028ea0c4c",
          "name": "searchConsoleData",
          "type": "array",
          "value": "={{ $json.rows }}"
        }
      ]
    }
  },
  "typeVersion": 3.4
}

================ Node #2536 ================
{
  "id": "abc80061-a794-4e1d-a055-bd88ea5c93eb",
  "name": "Set fields - Create searchConsoleDataArray 2",
  "type": "n8n-nodes-base.set",
  "position": [
    2180,
    1340
  ],
  "parameters": {
    "options": {},
    "assignments": {
      "assignments": [
        {
          "id": "2cffd36f-72bd-4535-8427-a88028ea0c4c",
          "name": "searchConsoleData",
          "type": "array",
          "value": "={{ $json.siteEntry }}"
        }
      ]
    }
  },
  "typeVersion": 3.4
}

================ Node #2537 ================
{
  "id": "24981eea-980e-4e07-9036-d0042c5b2fbe",
  "name": "Search Console - Get Custom Insights",
  "type": "n8n-nodes-base.httpRequest",
  "position": [
    1620,
    980
  ],
  "parameters": {
    "url": "=https://www.googleapis.com/webmasters/v3/sites/{{ $json.property }}/searchAnalytics/query",
    "method": "POST",
    "options": {},
    "jsonBody": "={\n \"startDate\": \"{{ $json.start_date }}\",\n \"endDate\": \"{{ $json.end_date }}\",\n \"dimensions\": {{ $json.dimensions }},\n \"rowLimit\": {{ $json.rowLimit }},\n \"startRow\": 0,\n \"dataState\":\"all\"\n}",
    "sendBody": true,
    "sendQuery": true,
    "sendHeaders": true,
    "specifyBody": "json",
    "authentication": "genericCredentialType",
    "genericAuthType": "oAuth2Api",
    "queryParameters": {
      "parameters": [
        {}
      ]
    },
    "headerParameters": {
      "parameters": [
        {
          "name": "Content-Type",
          "value": "application/json"
        }
      ]
    }
  },
  "credentials": {
    "oAuth2Api": {
      "id": "",
      "name": "search-console"
    }
  },
  "typeVersion": 4.2
}

================ Node #2538 ================
{
  "id": "645ff407-857d-4629-926b-5cfc52cfa8ba",
  "name": "Sticky Note9",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    1520,
    800
  ],
  "parameters": {
    "color": 7,
    "width": 370.3910714285712,
    "height": 364.3185243941325,
    "content": "## Search Console - Get Custom Insights\n\nThis node **performs the API call to retrieve data from Search Console**.\n"
  },
  "typeVersion": 1
}

================ Node #2539 ================
{
  "id": "15aa66e2-f288-4c86-8dad-47e22aa9104f",
  "name": "Sticky Note10",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    1520,
    1180
  ],
  "parameters": {
    "color": 7,
    "width": 370.3910714285712,
    "height": 334.24982142857124,
    "content": "## Search Console - Get List of Properties\n\nThis node **performs the API call to retrieve the list of accessible properties from Search Console**.\n"
  },
  "typeVersion": 1
}

================ Node #2540 ================
{
  "id": "cd804a52-833a-451a-8e0c-f640210ee2c4",
  "name": "## Search Console - Get List of Properties",
  "type": "n8n-nodes-base.httpRequest",
  "position": [
    1620,
    1340
  ],
  "parameters": {
    "url": "=https://www.googleapis.com/webmasters/v3/sites",
    "options": {},
    "sendHeaders": true,
    "authentication": "genericCredentialType",
    "genericAuthType": "oAuth2Api",
    "headerParameters": {
      "parameters": [
        {
          "name": "Content-Type",
          "value": "application/json"
        }
      ]
    }
  },
  "credentials": {
    "oAuth2Api": {
      "id": "",
      "name": "search-console"
    }
  },
  "typeVersion": 4.2
}

================ Node #2541 ================
{
  "id": "3eac4df1-00ac-4262-b520-3a7e218c7e57",
  "name": "Sticky Note11",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    2040,
    800
  ],
  "parameters": {
    "color": 7,
    "width": 370.3910714285712,
    "height": 725.1298214285712,
    "content": "## Set Fields - Create `searchConsoleDataArray`\n\nThese nodes **create an array based on the response from the Search Console API**.\n"
  },
  "typeVersion": 1
}

================ Node #2542 ================
{
  "id": "86db5800-a735-4749-a800-63d78908610b",
  "name": "Sticky Note12",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    2520,
    800
  ],
  "parameters": {
    "color": 7,
    "width": 370.3910714285712,
    "height": 722.6464176100125,
    "content": "## Array Aggregation - Response to AI Agent\n\nThese nodes **aggregate the array from the previous** step and send it back to the AI Agent through the field named output as `response`.\n"
  },
  "typeVersion": 1
}

================ Node #2543 ================
{
  "id": "aefbacc7-8dfc-4655-bc4d-f0498c823711",
  "name": "Array aggregation - response to AI Agent",
  "type": "n8n-nodes-base.aggregate",
  "position": [
    2640,
    980
  ],
  "parameters": {
    "options": {},
    "aggregate": "aggregateAllItemData",
    "destinationFieldName": "response"
  },
  "typeVersion": 1
}

================ Node #2544 ================
{
  "id": "e5334c72-981c-4375-ae8e-9a3a0457880b",
  "name": "Array aggregation - response to AI Agent1",
  "type": "n8n-nodes-base.aggregate",
  "position": [
    2660,
    1340
  ],
  "parameters": {
    "options": {},
    "aggregate": "aggregateAllItemData",
    "destinationFieldName": "response"
  },
  "typeVersion": 1
}

================ Node #2545 ================
{
  "id": "2e93a798-6c26-4d34-a553-ba01b64ca3fe",
  "name": "Sticky Note13",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    -398.45627799387194,
    -320
  ],
  "parameters": {
    "width": 735.5589746610085,
    "height": 1615.4504601771982,
    "content": "# AI Agent to Chat with Your Search Console Data\n\nThis **AI Agent enables you to interact with your Search Console data** through a **chat interface**. Each node is **documented within the template**, providing sufficient information for setup and usage. You will also need to **configure Search Console OAuth credentials**.\n\nFollow this **[n8n documentation](https://docs.n8n.io/integrations/builtin/credentials/google/oauth-generic/#configure-your-oauth-consent-screen)** to set up the OAuth credentials.\n\n## Important Notes\n\n### Correctly Configure Scopes for Search Console API Calls\n- It\u2019s essential to **configure the scopes correctly** in your Google Search Console API OAuth2 credentials. Incorrect **configuration can cause issues with the refresh token**, requiring frequent reconnections. Below is the configuration I use to **avoid constant re-authentication**:\n![Search Console API oAuth2 config 1](https://i.imgur.com/vVLM7gG.png)\n![Search Console API oAuth2 config 2](https://i.imgur.com/naT1NaX.png)\n\nOf course, you'll need to add your **client_id** and **client_secret** from the **Google Cloud Platform app** you created to access your Search Console data.\n\n### Configure Authentication for the Webhook\n\nSince the **webhook will be publicly accessible**, don\u2019t forget to **set up authentication**. I\u2019ve used **Basic Auth**, but feel free to **choose the method that best meets your security requirements**.\n\n## \ud83e\udd29\ud83d\udc96 Example of awesome things you can do with this AI Agent\n![Example of chat with this AI Agent](https://i.imgur.com/jbfsYvT.png)\n\n\n"
  },
  "typeVersion": 1
}

================ Node #2546 ================
{
  "id": "fa630aa9-3c60-4b27-9477-aaeb79c7f37d",
  "name": "AI Agent",
  "type": "@n8n/n8n-nodes-langchain.agent",
  "position": [
    1676,
    -20
  ],
  "parameters": {
    "text": "=user_message : {{ $json.chatInput }}\ndate_message : {{ $json.date_message }}",
    "options": {
      "systemMessage": "=Assist users by asking natural, conversational questions to understand their data needs and building a custom JSON API request to retrieve Search Console data. Handle assumptions internally, confirming them with the user in a friendly way. Avoid technical jargon and never imply that the user is directly building an API request.\n\nPre-Step: Retrieve the Website List\nImportant: Initial Action: Before sending your first message to the user, retrieve the list of connected Search Console properties.\n\nTool Call for Website List:\n\nTool name: SearchConsoleRequestTool\nRequest:\n{\n \"request_type\": \"website_list\" // Always include `request_type` in the API call.\n}\nUsage: Use this list to personalize your response in the initial interaction.\nStep-by-Step Guide\nStep 1: Initial Interaction and Introduction\nGreeting:\n\n\"Hi there! I\u2019m here to help you gain valuable insights from your Search Console data. Whether you're interested in a specific time frame, performance breakdown by pages, queries, or other dimensions, I've got you covered.\n\nI can help you retrieve data for these websites:\n\nhttps://example1.com\nhttps://example2.com\nhttps://example3.com\nWhich of these properties would you like to analyze?\"\nStep 2: Handling User Response for Property Selection\nAction: When the user selects a property, use the property URL exactly as listed (e.g., \"https://example.com\") when constructing the API call.\n\nStep 3: Understanding the User's Needs\nAcknowledgment and Setting Defaults:\n\nIf the user expresses a general need (e.g., \"I want the last 3 months of page performance\"), acknowledge their request and set reasonable defaults.\n\nExample Response:\n\n\"Great! I'll gather the top 300 queries from the last 3 months for https://example.com. If you'd like more details or adjustments, just let me know.\"\n\nFollow-up Questions:\n\nConfirming Dimensions: If the user doesn\u2019t specify dimensions, ask:\n\n\"For this analysis, I\u2019ll look at page performance. Does that sound good, or would you like to include other details like queries, devices, or other dimensions?\"\n\nNumber of Results: If the user hasn\u2019t specified the number of results, confirm:\n\n\"I can show you the top 100 results. Let me know if you'd like more or fewer!\"\n\nStep 4: Gathering Specific Inputs (If Necessary)\nAction: If the user provides specific needs, capture and confirm them naturally.\n\nExample Response:\n\n\"Perfect, I\u2019ll pull the data for [specified date range], focusing on [specified dimensions]. Anything else you\u2019d like me to include?\"\n\nImplicit Defaults:\n\nDate Range: Assume \"last 3 months\" if not specified.\nRow Limit: Default to 100, adjustable based on user input.\nStep 5: Confirming Input with the User\nAction: Summarize the request to ensure accuracy.\n\nExample Response:\n\n\"Here\u2019s what I\u2019m preparing: data for https://example.com, covering the last 3 months, focusing on the top 100 queries. Let me know if you\u2019d like to adjust anything!\"\n\nStep 6: Constructing the JSON for Custom Insights\nAction: Build the API call based on the conversation.\n\n{\n \"property\": \"<USER_PROVIDED_PROPERTY_URL>\", // Use the exact property URL.\n \"request_type\": \"custom_insights\",\n \"startDate\": \"<ASSUMED_OR_USER_SPECIFIED_START_DATE>\",\n \"endDate\": \"<ASSUMED_OR_USER_SPECIFIED_END_DATE>\",\n \"dimensions\": [\"<IMPLIED_OR_USER_SPECIFIED_DIMENSIONS>\"], // Array of one or more: \"page\", \"query\", \"searchAppearance\", \"device\", \"country\"\n \"rowLimit\": 300 // Default or user-specified limit.\n}\nStep 7: Presenting the Data\nWhen Retrieving Custom Insights:\n\nImportant: Display all retrieved data in an easy-to-read markdown table format.\nStep 8: Error Handling\nAction: Provide clear, user-friendly error messages when necessary.\n\nExample Response:\n\n\"Hmm, there seems to be an issue retrieving the data. Let\u2019s review what we have or try a different approach.\"\n\nAdditional Notes\nProactive Assistance: Offer suggestions based on user interactions, such as adding dimensions or refining details.\nTone: Maintain a friendly and helpful demeanor throughout the conversation.",
      "returnIntermediateSteps": true
    },
    "promptType": "define"
  },
  "typeVersion": 1.6
}

================ Node #2547 ================
{
  "id": "99582f98-3707-4480-954a-f091e4e8133a",
  "name": "Config",
  "type": "n8n-nodes-base.set",
  "position": [
    820,
    620
  ],
  "parameters": {
    "options": {},
    "assignments": {
      "assignments": [
        {
          "id": "42b02a2f-a642-42db-a565-fd2a01a26fb9",
          "name": "bg_color",
          "type": "string",
          "value": "white"
        },
        {
          "id": "f68b2280-ec85-4400-8a98-10e644b56076",
          "name": "padding",
          "type": "string",
          "value": "5%"
        },
        {
          "id": "8bdee3a1-9107-4bf8-adea-332d299e43ae",
          "name": "keepInputSize",
          "type": "boolean",
          "value": true
        },
        {
          "id": "89d9e4fb-ed14-4ee2-b6f0-73035bafbc39",
          "name": "outputSize",
          "type": "string",
          "value": "1600x1600"
        },
        {
          "id": "ad53bf64-5493-4c4d-a52c-cd4d657cc9f9",
          "name": "inputFileName",
          "type": "string",
          "value": "={{ $json.originalFilename }}"
        },
        {
          "id": "9fc440c6-289b-4a6a-8391-479a6660836f",
          "name": "OutputDriveFolder",
          "type": "string",
          "value": "ENTER GOOGLE DRIVE FOLDER URL"
        },
        {
          "id": "f0f1767a-b659-48c4-bef6-8ee4111cb939",
          "name": "api-key",
          "type": "string",
          "value": "ENTER API KEY"
        }
      ]
    }
  },
  "typeVersion": 3.4
}

================ Node #2548 ================
{
  "id": "7b5973d4-0d9f-4d17-8b71-e6c4f81d682e",
  "name": "remove background",
  "type": "n8n-nodes-base.httpRequest",
  "position": [
    2300,
    520
  ],
  "parameters": {
    "url": "https://image-api.photoroom.com/v2/edit",
    "method": "POST",
    "options": {
      "response": {
        "response": {}
      }
    },
    "sendBody": true,
    "contentType": "multipart-form-data",
    "sendHeaders": true,
    "bodyParameters": {
      "parameters": [
        {
          "name": "background.color",
          "value": "={{ $json.bg_color }}"
        },
        {
          "name": "imageFile",
          "parameterType": "formBinaryData",
          "inputDataFieldName": "data"
        },
        {
          "name": "padding",
          "value": "={{ $json.padding }}"
        },
        {
          "name": "outputSize",
          "value": "={{ $json.Geometry }}"
        }
      ]
    },
    "headerParameters": {
      "parameters": [
        {
          "name": "x-api-key",
          "value": "={{ $json['api-key'] }}"
        }
      ]
    }
  },
  "typeVersion": 4.1
}

================ Node #2549 ================
{
  "id": "66d4f5c2-3d63-4e4a-8ea7-358c17061198",
  "name": "Split Out",
  "type": "n8n-nodes-base.splitOut",
  "position": [
    1260,
    420
  ],
  "parameters": {
    "options": {
      "includeBinary": true
    },
    "fieldToSplitOut": "Geometry"
  },
  "typeVersion": 1
}

================ Node #2550 ================
{
  "id": "10f8a6cf-d1d0-4c5f-9983-5d574f98a7ba",
  "name": "Upload Picture to Google Drive",
  "type": "n8n-nodes-base.googleDrive",
  "position": [
    2520,
    320
  ],
  "parameters": {
    "name": "=BG-Removed-{{$json.inputFileName.split('.').slice(0, -1).join('.') }}.png",
    "driveId": {
      "__rl": true,
      "mode": "list",
      "value": "My Drive"
    },
    "options": {},
    "folderId": {
      "__rl": true,
      "mode": "url",
      "value": "={{ $json.OutputDriveFolder }}"
    }
  },
  "credentials": {
    "googleDriveOAuth2Api": {
      "id": "X2y13wEmbPaV3QGI",
      "name": "Google Drive account"
    }
  },
  "typeVersion": 3
}

================ Node #2551 ================
{
  "id": "5e4e91ff-346e-414d-bbe2-0724469183b4",
  "name": "remove background fixed size",
  "type": "n8n-nodes-base.httpRequest",
  "position": [
    2300,
    320
  ],
  "parameters": {
    "url": "https://image-api.photoroom.com/v2/edit",
    "method": "POST",
    "options": {
      "response": {
        "response": {}
      }
    },
    "sendBody": true,
    "contentType": "multipart-form-data",
    "sendHeaders": true,
    "bodyParameters": {
      "parameters": [
        {
          "name": "background.color",
          "value": "={{ $json.bg_color }}"
        },
        {
          "name": "imageFile",
          "parameterType": "formBinaryData",
          "inputDataFieldName": "data"
        },
        {
          "name": "padding",
          "value": "={{ $json.padding }}"
        },
        {
          "name": "outputSize",
          "value": "={{ $json.outputSize }}"
        }
      ]
    },
    "headerParameters": {
      "parameters": [
        {
          "name": "x-api-key",
          "value": "={{ $json['api-key'] }}"
        }
      ]
    }
  },
  "typeVersion": 4.1
}

================ Node #2552 ================
{
  "id": "16924a69-2711-4dc6-b7ab-c0e2001edfa4",
  "name": "Merge",
  "type": "n8n-nodes-base.merge",
  "position": [
    1600,
    460
  ],
  "parameters": {
    "mode": "combine",
    "options": {},
    "combineBy": "combineByPosition"
  },
  "typeVersion": 3
}

================ Node #2553 ================
{
  "id": "39196096-ef45-4159-8286-00a1b21aaec4",
  "name": "Upload Picture to Google Drive1",
  "type": "n8n-nodes-base.googleDrive",
  "position": [
    2540,
    520
  ],
  "parameters": {
    "name": "=BG-Removed-{{$json.inputFileName.split('.').slice(0, -1).join('.') }}.png",
    "driveId": {
      "__rl": true,
      "mode": "list",
      "value": "My Drive"
    },
    "options": {},
    "folderId": {
      "__rl": true,
      "mode": "url",
      "value": "={{ $json.OutputDriveFolder }}"
    }
  },
  "credentials": {
    "googleDriveOAuth2Api": {
      "id": "X2y13wEmbPaV3QGI",
      "name": "Google Drive account"
    }
  },
  "typeVersion": 3
}

================ Node #2554 ================
{
  "id": "a2f15d9a-5458-4d83-995a-e41491c997bd",
  "name": "Download Image",
  "type": "n8n-nodes-base.googleDrive",
  "position": [
    800,
    420
  ],
  "parameters": {
    "fileId": {
      "__rl": true,
      "mode": "id",
      "value": "={{ $json.id }}"
    },
    "options": {},
    "operation": "download"
  },
  "credentials": {
    "googleDriveOAuth2Api": {
      "id": "X2y13wEmbPaV3QGI",
      "name": "Google Drive account"
    }
  },
  "typeVersion": 3
}

================ Node #2555 ================
{
  "id": "3e2bef4d-22f8-465d-8d11-f9fe25e67cd9",
  "name": "Get Image Size",
  "type": "n8n-nodes-base.editImage",
  "position": [
    1060,
    420
  ],
  "parameters": {
    "operation": "information"
  },
  "typeVersion": 1
}

================ Node #2556 ================
{
  "id": "e497d10f-0727-4bb7-b016-42ffe2faf773",
  "name": "Sticky Note1",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    420,
    -280
  ],
  "parameters": {
    "color": 5,
    "width": 613.2529601722273,
    "height": 653.6921420882659,
    "content": "## About this worfklow \n\n## How it works\nThis workflow does watch out for new images uploaded within Google Drive. \nOnce there are new images it will download the image. And then run some logic, remove the background and add some padding to the output image. \n**By default Images are saved as .png**\nOnce done upload it to Google Drive again.\n## Features* Select Google Drive Credentials within the Google Drive Nodes\n### This workflow supports\n* Remove Background\n* Transparent Background\n* Coloured Background (1 Color)\n* Add Padding\n* Choose Output Size\n\n## Customize it!\n* Feel free to customize the workflow to your needs\n* Speed up the workflow: Using fixed output size\n### Examples \n* Send Final Images to another service\n* For Products: Let ChatGPT Analyze the Product Type\n* Add Text with the \"Edit Image\" Node\n\n### Photroom API Playground\n[Click me](https://www.photoroom.com/api/playground)"
  },
  "typeVersion": 1
}

================ Node #2557 ================
{
  "id": "e892caf8-b9c7-4880-a096-f9d1c8c52c0c",
  "name": "Sticky Note2",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    1060,
    -20
  ],
  "parameters": {
    "color": 4,
    "width": 437.4768568353068,
    "height": 395.45317545748134,
    "content": "## Setup\n\n### Requirements\n* Photoroom API Key [Click me](https://docs.photoroom.com/getting-started/how-can-i-get-my-api-key)\n* Google Drive Credential Setup\n\n\n## Config\n* Select Google Drive Credentials within the Google Drive Nodes\n\n* **Please refer to the \"Config\" Node**\n\nFor the API Key you can also setup an Header Authentication"
  },
  "typeVersion": 1
}

================ Node #2558 ================
{
  "id": "7f79d9e0-a7ac-422c-869f-76ada147917c",
  "name": "Watch for new images",
  "type": "n8n-nodes-base.googleDriveTrigger",
  "position": [
    440,
    520
  ],
  "parameters": {
    "event": "fileCreated",
    "options": {},
    "pollTimes": {
      "item": [
        {
          "mode": "everyMinute"
        }
      ]
    },
    "triggerOn": "specificFolder",
    "folderToWatch": {
      "__rl": true,
      "mode": "list",
      "value": ""
    }
  },
  "credentials": {
    "googleDriveOAuth2Api": {
      "id": "X2y13wEmbPaV3QGI",
      "name": "Google Drive account"
    }
  },
  "typeVersion": 1
}

================ Node #2559 ================
{
  "id": "f67556bb-b463-4ba5-a472-577a8d5ab0ca",
  "name": "Sticky Note3",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    420,
    680
  ],
  "parameters": {
    "color": 3,
    "width": 160.79224973089333,
    "height": 80,
    "content": "Select Input Folder"
  },
  "typeVersion": 1
}

================ Node #2560 ================
{
  "id": "04913b7f-1949-4e8e-b2c4-f9e3bacbc78c",
  "name": "Sticky Note4",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    780,
    780
  ],
  "parameters": {
    "color": 3,
    "width": 263.8708288482238,
    "height": 227.27233584499461,
    "content": "### Configuration\n* Provide Your API Key\n* Set Background Color\n-HEX or values like white, transparent...\n* Select if Output Size / or Original Size should be used \n* Output Drive Folder\n ->Copy URL\n* Padding (Default 5%)"
  },
  "typeVersion": 1
}

================ Node #2561 ================
{
  "id": "e3b262d2-c367-4733-8cde-abd485c3d81b",
  "name": "check which output size method is used",
  "type": "n8n-nodes-base.if",
  "position": [
    2040,
    460
  ],
  "parameters": {
    "options": {},
    "conditions": {
      "options": {
        "version": 2,
        "leftValue": "",
        "caseSensitive": true,
        "typeValidation": "strict"
      },
      "combinator": "and",
      "conditions": [
        {
          "id": "d11ca8bb-0801-480f-b99a-249c5920b876",
          "operator": {
            "type": "boolean",
            "operation": "false",
            "singleValue": true
          },
          "leftValue": "={{ $json.keepInputSize }}",
          "rightValue": ""
        }
      ]
    }
  },
  "typeVersion": 2.2
}

================ Node #2562 ================
{
  "id": "0cc4f416-7341-4bf7-8fb8-f3c746f8b9e4",
  "name": "loop all over your images",
  "type": "n8n-nodes-base.splitInBatches",
  "position": [
    1820,
    460
  ],
  "parameters": {
    "options": {}
  },
  "typeVersion": 3
}

================ Node #2563 ================
{
  "id": "a44b5cb3-6c9f-4227-a45f-a21765ea120c",
  "name": "OpenAI1",
  "type": "@n8n/n8n-nodes-langchain.openAi",
  "position": [
    -660,
    -180
  ],
  "parameters": {
    "input": "={{ $json.body.content }}",
    "options": {
      "response_format": "mp3"
    },
    "resource": "audio"
  },
  "credentials": {
    "openAiApi": {
      "id": "q8L9oWVM7QyzYEE5",
      "name": "OpenAi account"
    }
  },
  "typeVersion": 1.7
}

================ Node #2564 ================
{
  "id": "9ca589b6-f1c7-44a9-8ff7-4abb979a71c3",
  "name": "Sticky Note",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    -1200,
    -400
  ],
  "parameters": {
    "width": 440,
    "height": 540,
    "content": "## Send Notes to Webhook\n**Setup:**\n- Install [Post Webhook Plugin](https://github.com/Masterb1234/obsidian-post-webhook/) in Obsidian\n- Enter n8n Webhook URL and name in plugin settings\n\n**Usage:**\n- Select text or use full note\n- Open Command Palette (Ctrl+P)\n- Choose 'Send Note/Selection to [name]'\n- Audio file appears in Podcast Feed and note"
  },
  "typeVersion": 1
}

================ Node #2565 ================
{
  "id": "3ea132e5-8c67-4140-a9b2-607ea256e90f",
  "name": "Sticky Note1",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    -1200,
    240
  ],
  "parameters": {
    "width": 440,
    "height": 440,
    "content": "## Generic Podcast Feed Module\nA reusable module for any 'X-to-Podcast' workflow. Generates standard RSS feed from:\n- Source data (Google Sheets)\n- Podcast metadata\n\nCompatible with all major podcast platforms (Apple, Google, Spotify, etc.).\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
  },
  "typeVersion": 1
}

================ Node #2566 ================
{
  "id": "92d6a6df-0e4e-423b-8447-dce10d5373ae",
  "name": "Sticky Note2",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    -720,
    -400
  ],
  "parameters": {
    "color": 3,
    "width": 440,
    "height": 540,
    "content": "## Create Audio and Write Description\nOpenAI TTS converts notes to audio while the messaging model generates concise descriptions for podcast apps."
  },
  "typeVersion": 1
}

================ Node #2567 ================
{
  "id": "b950b0ab-e27e-473d-9891-d5551a44ed17",
  "name": "Sticky Note3",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    800,
    -400
  ],
  "parameters": {
    "color": 4,
    "width": 380,
    "height": 540,
    "content": "## Append Row to Google Sheets\nSaves essential podcast parameters (<title>, <link>, <description>, <duration>) to Google Sheets for Feed generation."
  },
  "typeVersion": 1
}

================ Node #2568 ================
{
  "id": "02fda37f-77a5-47f5-81bc-b59486704386",
  "name": "Webhook GET Note",
  "type": "n8n-nodes-base.webhook",
  "position": [
    -1040,
    -120
  ],
  "webhookId": "64fac784-9b98-4bbc-aaf2-dd45763d3362",
  "parameters": {
    "path": "64fac784-9b98-4bbc-aaf2-dd45763d3362",
    "options": {},
    "httpMethod": "POST",
    "responseMode": "responseNode"
  },
  "typeVersion": 2
}

================ Node #2569 ================
{
  "id": "845d04ea-d221-4034-b5e1-75061e5f351c",
  "name": "Webhook GET Podcast Feed",
  "type": "n8n-nodes-base.webhook",
  "position": [
    -1040,
    460
  ],
  "webhookId": "2f0a6706-54da-4b89-91f4-5e147b393bd8",
  "parameters": {
    "path": "2f0a6706-54da-4b89-91f4-5e147b393bd8h",
    "options": {},
    "responseMode": "responseNode"
  },
  "typeVersion": 2
}

================ Node #2570 ================
{
  "id": "ce6d766c-89e6-4d62-9d48-d6715a28592f",
  "name": "Upload Audio to Cloudinary",
  "type": "n8n-nodes-base.httpRequest",
  "position": [
    -220,
    -120
  ],
  "parameters": {
    "url": "https://api.cloudinary.com/v1_1/CLOUDINARY_ENV/upload",
    "method": "POST",
    "options": {},
    "sendBody": true,
    "contentType": "multipart-form-data",
    "sendHeaders": true,
    "authentication": "genericCredentialType",
    "bodyParameters": {
      "parameters": [
        {
          "name": "file",
          "parameterType": "formBinaryData",
          "inputDataFieldName": "data"
        },
        {
          "name": "upload_preset",
          "value": "rb_preset"
        },
        {
          "name": "resource_type",
          "value": "auto"
        }
      ]
    },
    "genericAuthType": "httpCustomAuth",
    "headerParameters": {
      "parameters": [
        {
          "name": "Content-Type",
          "value": "multipart/form-data"
        }
      ]
    }
  },
  "credentials": {
    "httpCustomAuth": {
      "id": "DHmR14pD9rTrd3nS",
      "name": "Cloudinary API"
    }
  },
  "typeVersion": 4.1
}

================ Node #2571 ================
{
  "id": "1f86c18d-8197-4671-9c41-726a02108c4e",
  "name": "OpenAI",
  "type": "@n8n/n8n-nodes-langchain.openAi",
  "position": [
    -660,
    -20
  ],
  "parameters": {
    "modelId": {
      "__rl": true,
      "mode": "list",
      "value": "gpt-4o-mini",
      "cachedResultName": "GPT-4O-MINI"
    },
    "options": {},
    "messages": {
      "values": [
        {
          "content": "={{ $json.body.content }}"
        },
        {
          "role": "system",
          "content": "Based on the user input text, write a concise and engaging description of 50\u2013150 characters. Highlight the key idea or takeaway while making it compelling and easy to understand. Avoid unnecessary details or repetition."
        }
      ]
    }
  },
  "credentials": {
    "openAiApi": {
      "id": "q8L9oWVM7QyzYEE5",
      "name": "OpenAi account"
    }
  },
  "typeVersion": 1.7
}

================ Node #2572 ================
{
  "id": "0942959c-2231-4055-b196-4483c210a39d",
  "name": "Merge",
  "type": "n8n-nodes-base.merge",
  "position": [
    320,
    -40
  ],
  "parameters": {},
  "typeVersion": 3
}

================ Node #2573 ================
{
  "id": "ee7ba6a7-f8dd-4863-bf5c-6ec8eb2329ea",
  "name": "Aggregate",
  "type": "n8n-nodes-base.aggregate",
  "position": [
    460,
    -180
  ],
  "parameters": {
    "options": {},
    "aggregate": "aggregateAllItemData"
  },
  "typeVersion": 1
}

================ Node #2574 ================
{
  "id": "f403d045-08e9-400e-9988-c8f55a5aa609",
  "name": "Give Audio Unique Name",
  "type": "n8n-nodes-base.set",
  "position": [
    -460,
    -180
  ],
  "parameters": {
    "options": {},
    "assignments": {
      "assignments": [
        {
          "id": "97f0fe66-7ddf-4eff-a3cf-3104e74dbfac",
          "name": "fileName",
          "type": "string",
          "value": "={{ $('Webhook GET Note').item.json.body.timestamp }}.mp3"
        }
      ]
    },
    "includeOtherFields": true
  },
  "typeVersion": 3.4
}

================ Node #2575 ================
{
  "id": "2dbff0f5-f359-43b7-b0de-4b9d657c69c0",
  "name": "Send Audio to Obsidian",
  "type": "n8n-nodes-base.respondToWebhook",
  "position": [
    80,
    -180
  ],
  "parameters": {
    "options": {
      "responseHeaders": {
        "entries": [
          {
            "name": "content-type",
            "value": "=audio/mpeg"
          }
        ]
      }
    },
    "respondWith": "binary",
    "responseDataSource": "set"
  },
  "typeVersion": 1
}

================ Node #2576 ================
{
  "id": "ede7c038-b210-4b29-8557-7530ea4cf63e",
  "name": "Rename Fields",
  "type": "n8n-nodes-base.set",
  "position": [
    620,
    -180
  ],
  "parameters": {
    "options": {},
    "assignments": {
      "assignments": [
        {
          "id": "3a7d01f4-7448-40e0-9f46-e6edea971b72",
          "name": "title",
          "type": "string",
          "value": "={{ $('Webhook GET Note').item.json.body.filename.split('.md')[0] }}"
        },
        {
          "id": "f49446df-3975-4133-a964-ebdcc0d904dd",
          "name": "link",
          "type": "string",
          "value": "={{ $json.data[0].url }}"
        },
        {
          "id": "8be5df35-ec79-45b1-94c3-306d58100fd2",
          "name": "description",
          "type": "string",
          "value": "={{ $json.data[1].message.content }}"
        },
        {
          "id": "231d0ee2-13d2-4a28-a19c-adc4920130fd",
          "name": "date",
          "type": "string",
          "value": "={{ $json.data[0].created_at }}"
        },
        {
          "id": "cd2748b3-999a-4514-9b31-49b7d045101f",
          "name": "duration",
          "type": "number",
          "value": "={{ $json.data[0].duration }}"
        }
      ]
    }
  },
  "typeVersion": 3.4
}

================ Node #2577 ================
{
  "id": "10a35ef9-ab86-4010-9fcc-3cd765384e93",
  "name": "Append Item to Google Sheet",
  "type": "n8n-nodes-base.googleSheets",
  "position": [
    940,
    -180
  ],
  "parameters": {
    "columns": {
      "value": {},
      "schema": [
        {
          "id": "title",
          "type": "string",
          "display": true,
          "removed": false,
          "required": false,
          "displayName": "title",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "link",
          "type": "string",
          "display": true,
          "removed": false,
          "required": false,
          "displayName": "link",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "description",
          "type": "string",
          "display": true,
          "removed": false,
          "required": false,
          "displayName": "description",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "date",
          "type": "string",
          "display": true,
          "removed": false,
          "required": false,
          "displayName": "date",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "duration",
          "type": "string",
          "display": true,
          "removed": false,
          "required": false,
          "displayName": "duration",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        }
      ],
      "mappingMode": "autoMapInputData",
      "matchingColumns": []
    },
    "options": {},
    "operation": "append",
    "sheetName": {
      "__rl": true,
      "mode": "list",
      "value": "gid=0",
      "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1F73a7uuzLAq916w2JFndumv0JhnCAvOTN-Cn_OOP3uA/edit#gid=0",
      "cachedResultName": "Blad1"
    },
    "documentId": {
      "__rl": true,
      "mode": "list",
      "value": "1F73a7uuzLAq916w2JFndumv0JhnCAvOTN-Cn_OOP3uA",
      "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1F73a7uuzLAq916w2JFndumv0JhnCAvOTN-Cn_OOP3uA/edit?usp=drivesdk",
      "cachedResultName": "obsidian-n8n"
    }
  },
  "credentials": {
    "googleSheetsOAuth2Api": {
      "id": "3Pu0wlfxgNYzVqY6",
      "name": "Google Sheets account"
    }
  },
  "typeVersion": 4.5
}

================ Node #2578 ================
{
  "id": "62dd3faf-22db-40f9-892c-2cf9368a9496",
  "name": "Get Items from Google Sheets",
  "type": "n8n-nodes-base.googleSheets",
  "position": [
    -660,
    460
  ],
  "parameters": {
    "options": {},
    "sheetName": {
      "__rl": true,
      "mode": "list",
      "value": "gid=0",
      "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1F73a7uuzLAq916w2JFndumv0JhnCAvOTN-Cn_OOP3uA/edit#gid=0",
      "cachedResultName": "Blad1"
    },
    "documentId": {
      "__rl": true,
      "mode": "list",
      "value": "1F73a7uuzLAq916w2JFndumv0JhnCAvOTN-Cn_OOP3uA",
      "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1F73a7uuzLAq916w2JFndumv0JhnCAvOTN-Cn_OOP3uA/edit?usp=drivesdk",
      "cachedResultName": "obsidian-n8n"
    }
  },
  "credentials": {
    "googleSheetsOAuth2Api": {
      "id": "3Pu0wlfxgNYzVqY6",
      "name": "Google Sheets account"
    }
  },
  "typeVersion": 4.5
}

================ Node #2579 ================
{
  "id": "7b465ed0-d2cc-4862-b0e6-4bd6215f3945",
  "name": "Sticky Note4",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    -720,
    320
  ],
  "parameters": {
    "color": 3,
    "width": 440,
    "height": 360,
    "content": "## Podcast Feed Configuration\n- Static: Configure podcast metadata in 'Edit Fields'\n- Dynamic: Episodes automatically pulled from Google Sheets"
  },
  "typeVersion": 1
}

================ Node #2580 ================
{
  "id": "1608ce65-bf1f-4dce-b4c7-b85b72ecb8c7",
  "name": "Write RSS Feed",
  "type": "n8n-nodes-base.code",
  "position": [
    -120,
    460
  ],
  "parameters": {
    "jsCode": "// Variables from a separate edit node\nconst baseUrl = $node[\"Manually Enter Other Data for Podcast Feed\"].data.baseUrl; \nconst podcastTitle = $node[\"Manually Enter Other Data for Podcast Feed\"].data.podcastTitle;\nconst podcastDescription = $node[\"Manually Enter Other Data for Podcast Feed\"].data.podcastDescription;\nconst authorName = $node[\"Manually Enter Other Data for Podcast Feed\"].data.authorName;\nconst ownerName = $node[\"Manually Enter Other Data for Podcast Feed\"].data.ownerName;\nconst ownerEmail = $node[\"Manually Enter Other Data for Podcast Feed\"].data.ownerEmail;\nconst coverImageUrl = $node[\"Manually Enter Other Data for Podcast Feed\"].data.coverImageUrl;\nconst language = $node[\"Manually Enter Other Data for Podcast Feed\"].data.language || 'en-us';\nconst explicitContent = $node[\"Manually Enter Other Data for Podcast Feed\"].data.explicitContent || false;\nconst itunesCategory = $node[\"Manually Enter Other Data for Podcast Feed\"].data.itunesCategory;\nconst webhookUrl = $node[\"Webhook GET Podcast Feed\"].data.webhookUrl\n\n// Get the input items\nconst inputItems = items;\n\n// Function to format date to RFC 822 format\nfunction formatDate(dateString) {\n return new Date(dateString || new Date()).toUTCString();\n}\n\n// Function to convert duration from seconds to HH:MM:SS\nfunction formatDuration(seconds = 0) {\n const hours = Math.floor(seconds / 3600);\n const minutes = Math.floor((seconds % 3600) / 60);\n const remainingSeconds = Math.floor(seconds % 60);\n\n const minutesStr = minutes.toString().padStart(2, '0');\n const secondsStr = remainingSeconds.toString().padStart(2, '0');\n \n if (hours > 0) {\n return `${hours}:${minutesStr}:${secondsStr}`;\n }\n return `${minutesStr}:${secondsStr}`;\n}\n\n// Function to safely sanitize text\nfunction sanitizeText(text) {\n if (text === undefined || text === null) {\n return '';\n }\n return String(text)\n .replace(/&/g, '&amp;')\n .replace(/</g, '&lt;')\n .replace(/>/g, '&gt;')\n .replace(/\"/g, '&quot;')\n .replace(/'/g, '&apos;');\n}\n\n// Generate the RSS feed header\nlet rssFeed = `<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<rss xmlns:itunes=\"http://www.itunes.com/dtds/podcast-1.0.dtd\" \n xmlns:content=\"http://purl.org/rss/1.0/modules/content/\"\n xmlns:atom=\"http://www.w3.org/2005/Atom\"\n version=\"2.0\">\n <channel>\n <title>${sanitizeText(podcastTitle)}</title>\n <description>${sanitizeText(podcastDescription)}</description>\n <link>${sanitizeText(baseUrl)}</link>\n <atom:link href=\"${sanitizeText(webhookUrl)}\" rel=\"self\" type=\"application/rss+xml\"/>\n <language>${sanitizeText(language)}</language>\n <copyright>\u00a9 ${new Date().getFullYear()} ${sanitizeText(authorName)}</copyright>\n <lastBuildDate>${new Date().toUTCString()}</lastBuildDate>\n <itunes:author>${sanitizeText(authorName)}</itunes:author>\n <itunes:owner>\n <itunes:name>${sanitizeText(ownerName)}</itunes:name>\n <itunes:email>${sanitizeText(ownerEmail)}</itunes:email>\n </itunes:owner>\n <itunes:image href=\"${sanitizeText(coverImageUrl)}\"/>\n <itunes:category text=\"${sanitizeText(itunesCategory)}\"/>\n <itunes:explicit>${explicitContent}</itunes:explicit>\n <itunes:type>episodic</itunes:type>\\n`;\n\n// Generate items\nfor (const item of inputItems) {\n const json = item.json;\n \n // Extract values from the json object\n const title = sanitizeText(json.title);\n const description = sanitizeText(json.description);\n const link = sanitizeText(json.link);\n const date = json.date;\n const duration = json.duration;\n \n // Assign episode and season numbers dynamically based on row_number\n const episodeNumber = json.row_number; // Use row_number for the episode number\n const seasonNumber = 1; // You can adjust this logic if your episodes span multiple seasons\n\n rssFeed += ` <item>\n <title>${title}</title>\n <description>${description}</description>\n <link>${link}</link>\n <guid isPermaLink=\"false\">${link}</guid>\n <pubDate>${formatDate(date)}</pubDate>\n <enclosure \n url=\"${link}\"\n length=\"0\"\n type=\"audio/mpeg\"/>\n <itunes:duration>${formatDuration(duration)}</itunes:duration>\n <itunes:summary>${description}</itunes:summary>\n <itunes:episodeType>full</itunes:episodeType>\n <itunes:episode>${episodeNumber}</itunes:episode>\n <itunes:season>${seasonNumber}</itunes:season>\n <itunes:explicit>${explicitContent}</itunes:explicit>\n <content:encoded>\n <![CDATA[\n <p>${description}</p>\n ]]>\n </content:encoded>\n </item>\\n`;\n}\n\n// Close the RSS feed\nrssFeed += ` </channel>\n</rss>`;\n\n// Return the complete RSS feed\nreturn [{\n json: {\n rssFeed\n }\n}];\n"
  },
  "typeVersion": 2
}

================ Node #2581 ================
{
  "id": "c8c7fbfc-c408-438e-af7e-5c384cfce4a5",
  "name": "Sticky Note6",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    -240,
    320
  ],
  "parameters": {
    "color": 5,
    "width": 340,
    "height": 360,
    "content": "## Write Podcast Feed\nGenerates RSS feed XML from collected data."
  },
  "typeVersion": 1
}

================ Node #2582 ================
{
  "id": "b5962e24-49eb-423a-ab8c-cb04daf5e1a0",
  "name": "Sticky Note7",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    -240,
    -400
  ],
  "parameters": {
    "color": 5,
    "width": 460,
    "height": 540,
    "content": "## Audio to Cloudinary and Obsidian\nCloudinary stores audio files and provides duration metadata for podcast feed.\n\nSetup:\n- Create Custom Auth credentials\n- Set CLOUDINARY_ENV to your environment"
  },
  "typeVersion": 1
}

================ Node #2583 ================
{
  "id": "e0f18eda-13fc-4771-8ce0-11574a4469ad",
  "name": "Return Podcast Feed to Webhook",
  "type": "n8n-nodes-base.respondToWebhook",
  "position": [
    200,
    460
  ],
  "parameters": {
    "options": {
      "responseHeaders": {
        "entries": [
          {
            "name": "Content-Type",
            "value": "application/xml"
          }
        ]
      }
    },
    "respondWith": "text",
    "responseBody": "={{ $json.rssFeed }}"
  },
  "typeVersion": 1.1
}

================ Node #2584 ================
{
  "id": "d3afe3f0-79e4-48c1-a0d6-356b462156c7",
  "name": "Sticky Note5",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    260,
    -400
  ],
  "parameters": {
    "color": 6,
    "width": 500,
    "height": 540,
    "content": "## Prepare Relevant Data\nConsolidates and formats data for Google Sheets storage."
  },
  "typeVersion": 1
}

================ Node #2585 ================
{
  "id": "f77ff10c-e4e3-4761-b4db-4c42d5831f5c",
  "name": "Manually Enter Other Data for Podcast Feed",
  "type": "n8n-nodes-base.set",
  "position": [
    -460,
    460
  ],
  "parameters": {
    "options": {},
    "assignments": {
      "assignments": [
        {
          "id": "05d1c4f7-ebe7-4df8-925b-0e0d5539f172",
          "name": "baseUrl",
          "type": "string",
          "value": "https://n8n.io"
        },
        {
          "id": "e8c6845e-887f-49e9-8336-ca2cb2a2fd29",
          "name": "podcastTitle",
          "type": "string",
          "value": "My Notes to Podcast"
        },
        {
          "id": "bf2948ed-cffa-4d3f-9bab-5fb008d83b4c",
          "name": "podcastDescription",
          "type": "string",
          "value": "My Notes Read Aloud"
        },
        {
          "id": "f5008697-3e52-4ae2-94da-c059b60a6de9",
          "name": "authorName",
          "type": "string",
          "value": "Your Name"
        },
        {
          "id": "6595bf45-e054-4e18-ade9-13e38e6efedb",
          "name": "ownerName",
          "type": "string",
          "value": "Owner Name"
        },
        {
          "id": "b21efe1c-e5b5-4bb3-bf07-a52859c7a607",
          "name": "ownerEmail",
          "type": "string",
          "value": "owner@email.com"
        },
        {
          "id": "3f0b090c-0b5e-41cb-9841-05b7b8f83126",
          "name": "coverImageUrl",
          "type": "string",
          "value": "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcRPDcMnpgGkzIFxDpDaHEIFVg_D6nVG5Z0pPA&s"
        },
        {
          "id": "1fb27792-1f2b-4a9a-a353-a64e31bb4747",
          "name": "language",
          "type": "string",
          "value": "en-us"
        },
        {
          "id": "7c3d868a-f3c0-4fd0-8909-e4172f8a4b18",
          "name": "explicitContent",
          "type": "string",
          "value": "false"
        },
        {
          "id": "6aa041b4-554c-4540-889c-e37a314d5842",
          "name": "itunesCategory",
          "type": "string",
          "value": "Technology"
        }
      ]
    },
    "includeOtherFields": true
  },
  "typeVersion": 3.4
}

================ Node #2586 ================
{
  "id": "e77fbc32-5ee9-49b4-93d5-f2ffda134b08",
  "name": "Google Gemini Chat Model",
  "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
  "position": [
    1230,
    530
  ],
  "parameters": {
    "options": {}
  },
  "credentials": {
    "googlePalmApi": {
      "id": "UcdfdADI6w9nkgg5",
      "name": "Google Gemini(PaLM) Api account"
    }
  },
  "typeVersion": 1
}

================ Node #2587 ================
{
  "id": "9e24167f-cac6-4b98-95da-30065510d79a",
  "name": "Confirmation of CV Submission",
  "type": "n8n-nodes-base.gmail",
  "position": [
    1780,
    460
  ],
  "webhookId": "954756dc-2946-4b78-b208-06f3df612ab5",
  "parameters": {
    "sendTo": "={{ $('Application Form').item.json['E-mail'] }}",
    "message": "=Dear {{ $('Application Form').item.json['Full Name'] }}, \n\nThank you for submitting your CV. We have received it and will review it shortly. \n\nBest regards,\nMediusware",
    "options": {},
    "subject": "We Have Received Your CV"
  },
  "credentials": {
    "gmailOAuth2": {
      "id": "taFlf0vD5S4QlOKM",
      "name": "Gmail account"
    }
  },
  "typeVersion": 2.1
}

================ Node #2588 ================
{
  "id": "ff49d370-b4eb-4426-b396-763455e647e7",
  "name": "Inform HR New CV Received",
  "type": "n8n-nodes-base.gmail",
  "position": [
    1760,
    200
  ],
  "webhookId": "e969a9f5-631b-4719-a4f6-87e6063cef6a",
  "parameters": {
    "sendTo": "sarfaraz@mediusaware.com",
    "message": "=Hello HR,\n\nA new CV has been successfully received in our system. Please review the candidate's details at your earliest convenience.\n\nCandidate Name: {{ $('Application Form').item.json['Full Name'] }}\nCandidate E-mail: {{ $('Application Form').item.json['E-mail'] }}\nCandidate Linkedin: {{ $('Application Form').item.json.Linkedin }}\nCandidate Expectation: {{ $('Application Form').item.json.Expectation }}\nCandidate AI Rating: {{ $('Using AI Analysis & Rating').item.json.text }}\n\nThank you for your attention.\n\nBest regards,\nAutomated CV Screening",
    "options": {},
    "subject": "New Candidate CV Awaiting Review"
  },
  "credentials": {
    "gmailOAuth2": {
      "id": "taFlf0vD5S4QlOKM",
      "name": "Gmail account"
    }
  },
  "typeVersion": 2.1
}

================ Node #2589 ================
{
  "id": "8479fa4c-10bc-4914-896d-f5b00d063fa8",
  "name": "Using AI Analysis & Rating",
  "type": "@n8n/n8n-nodes-langchain.chainLlm",
  "position": [
    1320,
    240
  ],
  "parameters": {
    "text": "={{ $json.text }}",
    "messages": {
      "messageValues": [
        {
          "message": "Rule 1 : Do not exceed maximum of 75 words. As an AI with advanced capabilities in talent acquisition and human resources, your task is to conduct a thorough and intricate analysis of a candidate's resume or CV against a specific job description. You will assist hiring professionals in discerning the alignment between the candidate's skills, experience, qualifications, and the requirements of the job. Your expert insights will equip employers with a lucid understanding of the candidate's suitability for the role. Very important for you to write output text in ${output_language} language. It's VERY IMPORTANT for me for text be in ${output_language} or I will be fired. Your analysis should follow this structured format: 1. **Compatibility Rating**: Propose an overall compatibility rating on a scale from 1 (not compatible) to 10 (perfect fit). Support your rating by elucidating the rationale behind it. 2. **Recommendation**: Informed by your analysis and compatibility rating, offer a recommendation on whether the employer should consider this candidate for an interview. Furnish a well-argued explanation for your recommendation. Remember, your analysis should be comprehensive, professional, and actionable. It should equip an employer with a vivid understanding of the candidate's suitability for the role. This isn't merely about ticking off boxes; it's about illustrating a comprehensive picture of how well the candidate might fit into the role and complement the existing team. Here is your task: Analyze the compatibility of the following candidate's resume with the provided job description. Endeavor to apply your deep understanding of talent evaluation to provide the most insightful analysis. Job description: \"Software Engineer\" Resume: ${resume}\nNo Markdown Please, only plain text. Please no double '**'"
        }
      ]
    },
    "promptType": "define"
  },
  "typeVersion": 1.5
}

================ Node #2590 ================
{
  "id": "da0fd18b-2420-471e-b930-9aabc45bc2ca",
  "name": "Convert Binary to Json",
  "type": "n8n-nodes-base.extractFromFile",
  "position": [
    1080,
    220
  ],
  "parameters": {
    "options": {},
    "operation": "pdf",
    "binaryPropertyName": "Your_Resume_CV"
  },
  "retryOnFail": false,
  "typeVersion": 1
}

================ Node #2591 ================
{
  "id": "bc5480c1-d9c2-414b-8cd4-0b3e49d4dde9",
  "name": "Application Form",
  "type": "n8n-nodes-base.formTrigger",
  "position": [
    820,
    380
  ],
  "webhookId": "0cd422d3-e69f-4ec0-92ab-05362808c4da",
  "parameters": {
    "options": {},
    "formTitle": "Application for Software Engineer Position",
    "formFields": {
      "values": [
        {
          "fieldLabel": "Full Name",
          "requiredField": true
        },
        {
          "fieldLabel": "E-mail",
          "requiredField": true
        },
        {
          "fieldLabel": "Expectation",
          "placeholder": "2000-3000$",
          "requiredField": true
        },
        {
          "fieldLabel": "Linkedin",
          "requiredField": true
        },
        {
          "fieldType": "file",
          "fieldLabel": "Your Resume/CV",
          "requiredField": true,
          "acceptFileTypes": ".pdf"
        }
      ]
    }
  },
  "typeVersion": 2.2
}

================ Node #2592 ================
{
  "id": "d2dfbf1e-8d88-49e6-940d-e1717de97b30",
  "name": "Candidate Lists",
  "type": "n8n-nodes-base.googleSheets",
  "position": [
    1540,
    480
  ],
  "parameters": {
    "columns": {
      "value": {
        "CV": "={{ $('Application Form').item.json['Your Resume/CV'][0].filename }}",
        "E-mail": "={{ $('Application Form').item.json['E-mail'] }}",
        "Linkedin": "={{ $('Application Form').item.json.Linkedin }}",
        "AI Rating": "={{ $json.text }}",
        "Full Name": "={{ $('Application Form').item.json['Full Name'] }}",
        "Expectation": "={{ $('Application Form').item.json.Expectation }}"
      },
      "schema": [
        {
          "id": "CV",
          "type": "string",
          "display": true,
          "required": false,
          "displayName": "CV",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "Full Name",
          "type": "string",
          "display": true,
          "required": false,
          "displayName": "Full Name",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "E-mail",
          "type": "string",
          "display": true,
          "required": false,
          "displayName": "E-mail",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "Expectation",
          "type": "string",
          "display": true,
          "required": false,
          "displayName": "Expectation",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "Linkedin",
          "type": "string",
          "display": true,
          "required": false,
          "displayName": "Linkedin",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "AI Rating",
          "type": "string",
          "display": true,
          "required": false,
          "displayName": "AI Rating",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        }
      ],
      "mappingMode": "defineBelow",
      "matchingColumns": []
    },
    "options": {},
    "operation": "append",
    "sheetName": {
      "__rl": true,
      "mode": "list",
      "value": "gid=0",
      "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1y4FFMXTuznSf2wWUraK57eBJnu4MVtgkxrGYRzRMwDQ/edit#gid=0",
      "cachedResultName": "\u09aa\u09a4\u09cd\u09b0\u09951"
    },
    "documentId": {
      "__rl": true,
      "mode": "list",
      "value": "1y4FFMXTuznSf2wWUraK57eBJnu4MVtgkxrGYRzRMwDQ",
      "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1y4FFMXTuznSf2wWUraK57eBJnu4MVtgkxrGYRzRMwDQ/edit?usp=drivesdk",
      "cachedResultName": "CV of Software Engineers"
    }
  },
  "credentials": {
    "googleSheetsOAuth2Api": {
      "id": "YdlTTXiu8194dEFE",
      "name": "Google Sheets account"
    }
  },
  "typeVersion": 4.5
}

================ Node #2593 ================
{
  "id": "d2a24a9b-9cf3-4de0-82e7-5d858658d4b4",
  "name": "Extract specific content",
  "type": "n8n-nodes-base.html",
  "notes": "Extract selected headlines, editor's picks, spotlight etc.",
  "position": [
    800,
    340
  ],
  "parameters": {
    "options": {
      "cleanUpText": true
    },
    "operation": "extractHtmlContent",
    "extractionValues": {
      "values": [
        {
          "key": "Headline #1",
          "cssSelector": "#site-content > div:nth-child(1) > section > div > div > div.layout-desktop__grid.layout-desktop__grid--span4.layout-desktop__grid--column-start-1.layout-desktop__grid--row-start-1.layout-desktop__grid--with-border.layout--default > div > div > div > div.story-group-stacked__primary-story > div > div > div > div > div.primary-story__teaser"
        },
        {
          "key": "Headline #2",
          "cssSelector": "#site-content > div:nth-child(1) > section > div > div > div.layout-desktop__grid.layout-desktop__grid--span6.layout-desktop__grid--column-start-5.layout-desktop__grid--row-start-1.layout-desktop__grid--with-border.layout--default > div > div > div > div > div > div.story-group__article.story-group__article--featured > div > div.featured-story-content > div.headline.js-teaser-headline.headline--scale-5.headline--color-black > a > span"
        },
        {
          "key": "Editor's Picks",
          "cssSelector": "#site-content > div:nth-child(1) > section > div > div > div.layout-desktop__grid.layout-desktop__grid--span2.layout-desktop__grid--column-start-11.layout-desktop__grid--row-start-1.layout--default > div"
        },
        {
          "key": "Top Stories",
          "cssSelector": "#site-content > div:nth-child(3) > section > div",
          "skipSelectors": "h2"
        },
        {
          "key": "Spotlight",
          "cssSelector": "#site-content > div:nth-child(6) > section",
          "skipSelectors": "h2"
        },
        {
          "key": "Various News",
          "cssSelector": "#site-content > div:nth-child(8) > section",
          "skipSelectors": "h2"
        },
        {
          "key": "Europe News",
          "cssSelector": "#site-content > div:nth-child(13) > section",
          "skipSelectors": "h2"
        }
      ]
    }
  },
  "notesInFlow": true,
  "typeVersion": 1.2
}

================ Node #2594 ================
{
  "id": "38af5df2-65ce-4f04-aed3-6f71d81a37df",
  "name": "Get financial news online",
  "type": "n8n-nodes-base.httpRequest",
  "notes": "Url : https://www.ft.com/",
  "position": [
    580,
    340
  ],
  "parameters": {
    "url": "https://www.ft.com/",
    "options": {}
  },
  "notesInFlow": true,
  "typeVersion": 4.2
}

================ Node #2595 ================
{
  "id": "764b2209-bf20-4feb-b000-fa261459a617",
  "name": "Schedule Trigger",
  "type": "n8n-nodes-base.scheduleTrigger",
  "position": [
    360,
    340
  ],
  "parameters": {
    "rule": {
      "interval": [
        {
          "triggerAtHour": 7
        }
      ]
    }
  },
  "typeVersion": 1.2
}

================ Node #2596 ================
{
  "id": "96b337ba-6fe7-47ec-8385-58bfc6c789cb",
  "name": "Google Gemini Chat Model",
  "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
  "position": [
    1200,
    520
  ],
  "parameters": {
    "options": {}
  },
  "credentials": {
    "googlePalmApi": {
      "id": "450x4z8bKvomb0tZ",
      "name": "Google Gemini(PaLM) Api account"
    }
  },
  "typeVersion": 1
}

================ Node #2597 ================
{
  "id": "925eabf3-3619-4da2-be2c-bda97c605d4d",
  "name": "Gather the elements",
  "type": "n8n-nodes-base.set",
  "position": [
    1020,
    340
  ],
  "parameters": {
    "options": {},
    "assignments": {
      "assignments": [
        {
          "id": "5412a5ee-dbbe-4fcc-98a5-6fafc37b94d1",
          "name": "News together",
          "type": "string",
          "value": "=Yahoo news :\n\n{{ $json['Headline '] }};\n\n{{ $('HTML').item.json['News #1'] }};\n\n{{ $('HTML').item.json['News #2'] }};\n\nFinancial times news :\n\n{{ $('Extract specific content').item.json['Headline #1'] }};\n\n{{ $('Extract specific content').item.json['Headline #2'] }};\n\n{{ $('Extract specific content').item.json['Editor\\'s Picks'] }};\n\n{{ $('Extract specific content').item.json['Top Stories'] }};\n\n{{ $('Extract specific content').item.json.Spotlight }};\n\n{{ $('Extract specific content').item.json['Various News'] }};\n\n{{ $('Extract specific content').item.json['Europe News'] }};\n\n"
        }
      ]
    }
  },
  "typeVersion": 3.4
}

================ Node #2598 ================
{
  "id": "5445b14f-25e8-4759-82d4-985961ca7fdd",
  "name": "AI Agent",
  "type": "@n8n/n8n-nodes-langchain.agent",
  "position": [
    1200,
    340
  ],
  "parameters": {
    "text": "=Here are the news to summarise :\n\n{{ $json['News together'] }}",
    "options": {
      "systemMessage": "You role is to summarise the financial news from today. The summary will help an investor to have a clear view of the market, and to make better choice. \n\nYou will write the body of an e-mail using a well structured html format"
    },
    "promptType": "define"
  },
  "typeVersion": 1.6
}

================ Node #2599 ================
{
  "id": "30b76eac-d646-44d8-bc41-46aa2d9fe05f",
  "name": "Sticky Note",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    -200,
    200
  ],
  "parameters": {
    "width": 683.6774193548385,
    "height": 581.4193548387093,
    "content": "# Financial News Recap Workflow\n\nThis workflow automates the daily email delivery of curated financial news to a designated recipient at 7:00 AM. It extracts relevant financial news articles, structures the content, and sends it in a concise summary format via Microsoft Outlook.\n\n### Workflow Steps\n1. **Schedule Trigger** \n Sets the workflow to activate daily at 7:00 AM.\n2. **Fetch Financial News** \n Retrieves financial news content from [ft.com](https://www.ft.com/) using an HTTP Request node.\n3. **Extract News Headlines and Sections** \n Using CSS selectors, this node parses specific sections of the HTML page to gather key headlines and sections:\n - Headline #1, Headline #2\n - Editor's Picks\n - etc.\n4. **Aggregate News Content** \n Combines all extracted news sections into a single data set, organizing content under relevant categories.\n5. **AI Agent for Summarization** \n A Google Gemini Chat Model generates a structured summary in HTML format, optimized to provide investors with a clear market overview.\n6. **Email Dispatch** \n Sends the summarized content via Microsoft Outlook with a subject \"Financial news from today,\" formatted in HTML for clarity and readability.\n"
  },
  "typeVersion": 1
}

================ Node #2600 ================
{
  "id": "7f2b6e9a-8b14-4083-a05c-3b76aae601a8",
  "name": "Send the summary by e-mail",
  "type": "n8n-nodes-base.microsoftOutlook",
  "position": [
    1540,
    340
  ],
  "parameters": {
    "subject": "Financial news from today",
    "bodyContent": "=News of the day : \n\n{{ $json.output }}",
    "toRecipients": "",
    "additionalFields": {
      "bodyContentType": "html"
    }
  },
  "credentials": {
    "microsoftOutlookOAuth2Api": {
      "id": "8asOQiRWBGic8ei8",
      "name": "Microsoft Outlook account"
    }
  },
  "typeVersion": 2
}

================ Node #2601 ================
{
  "id": "c3738490-ed39-4774-b337-bf5ee99d0c72",
  "name": "When clicking \u2018Test workflow\u2019",
  "type": "n8n-nodes-base.manualTrigger",
  "position": [
    500,
    940
  ],
  "parameters": {},
  "typeVersion": 1
}

================ Node #2602 ================
{
  "id": "3ab719bd-3652-433f-a597-9cd28f8cfcea",
  "name": "Embeddings OpenAI",
  "type": "@n8n/n8n-nodes-langchain.embeddingsOpenAi",
  "position": [
    2580,
    1320
  ],
  "parameters": {
    "model": "text-embedding-3-small",
    "options": {}
  },
  "typeVersion": 1
}

================ Node #2603 ================
{
  "id": "e8639569-2091-44de-a84d-c3fc3ce54de4",
  "name": "Default Data Loader",
  "type": "@n8n/n8n-nodes-langchain.documentDefaultDataLoader",
  "position": [
    2800,
    1260
  ],
  "parameters": {
    "options": {
      "metadata": {
        "metadataValues": [
          {
            "name": "title",
            "value": "={{ $json.title }}"
          },
          {
            "name": "url",
            "value": "={{ $json.url }}"
          },
          {
            "name": "content_type",
            "value": "={{ $json.content_type }}"
          },
          {
            "name": "publication_date",
            "value": "={{ $json.publication_date }}"
          },
          {
            "name": "modification_date",
            "value": "={{ $json.modification_date }}"
          },
          {
            "name": "id",
            "value": "={{ $json.id }}"
          }
        ]
      }
    },
    "jsonData": "={{ $json.data }}",
    "jsonMode": "expressionData"
  },
  "typeVersion": 1
}

================ Node #2604 ================
{
  "id": "e7f858eb-4dca-40ea-9da9-af953687e63d",
  "name": "Token Splitter",
  "type": "@n8n/n8n-nodes-langchain.textSplitterTokenSplitter",
  "position": [
    2900,
    1480
  ],
  "parameters": {
    "chunkSize": 300,
    "chunkOverlap": 30
  },
  "typeVersion": 1
}

================ Node #2605 ================
{
  "id": "27585104-5315-4c11-b333-4b5d27d9bae4",
  "name": "Embeddings OpenAI1",
  "type": "@n8n/n8n-nodes-langchain.embeddingsOpenAi",
  "position": [
    1400,
    2340
  ],
  "parameters": {
    "model": "text-embedding-3-small",
    "options": {}
  },
  "typeVersion": 1
}

================ Node #2606 ================
{
  "id": "35269a98-d905-4e4f-ae5b-dadad678f260",
  "name": "OpenAI Chat Model",
  "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
  "position": [
    2800,
    2300
  ],
  "parameters": {
    "model": "gpt-4o-mini",
    "options": {}
  },
  "typeVersion": 1
}

================ Node #2607 ================
{
  "id": "cd26b6fa-a8bb-4139-9bec-8656d90d8203",
  "name": "Postgres Chat Memory",
  "type": "@n8n/n8n-nodes-langchain.memoryPostgresChat",
  "position": [
    2920,
    2300
  ],
  "parameters": {
    "tableName": "website_chat_histories"
  },
  "typeVersion": 1.1
}

================ Node #2608 ================
{
  "id": "7c718e1b-1398-49f3-ba67-f970a82983e0",
  "name": "Respond to Webhook",
  "type": "n8n-nodes-base.respondToWebhook",
  "position": [
    3380,
    2060
  ],
  "parameters": {
    "options": {}
  },
  "typeVersion": 1.1
}

================ Node #2609 ================
{
  "id": "f91f18e0-7a04-4218-8490-bff35dfbf7a8",
  "name": "Set fields",
  "type": "n8n-nodes-base.set",
  "position": [
    2360,
    2060
  ],
  "parameters": {
    "options": {},
    "assignments": {
      "assignments": [
        {
          "id": "6888175b-853b-457a-96f7-33dfe952a05d",
          "name": "documents",
          "type": "string",
          "value": "={{ \n JSON.stringify(\n $json.documents.map(doc => ({\n metadata: \n 'URL: ' + doc.metadata.url.replaceAll('&rsquo;', \"'\").replaceAll(/[\"]/g, '') + '\\n' +\n 'Publication Date: ' + doc.metadata.publication_date.replaceAll(/[\"]/g, '') + '\\n' +\n 'Modification Date: ' + doc.metadata.modification_date.replaceAll(/[\"]/g, '') + '\\n' +\n 'Content Type: ' + doc.metadata.content_type.replaceAll(/[\"]/g, '') + '\\n' +\n 'Title: ' + doc.metadata.title.replaceAll('&rsquo;', \"'\").replaceAll(/[\"]/g, '') + '\\n',\n \n page_content: doc.pageContent\n }))\n ).replaceAll(/[\\[\\]{}]/g, '')\n}}"
        },
        {
          "id": "ae310b77-4560-4f44-8c4e-8d13f680072e",
          "name": "sessionId",
          "type": "string",
          "value": "={{ $('When chat message received').item.json.sessionId }}"
        },
        {
          "id": "8738f4de-b3c3-45ad-af4b-8311c8105c35",
          "name": "chatInput",
          "type": "string",
          "value": "={{ $('When chat message received').item.json.chatInput }}"
        }
      ]
    }
  },
  "typeVersion": 3.4
}

================ Node #2610 ================
{
  "id": "7f392a40-e353-4bb2-9ecf-3ee330110b95",
  "name": "Embeddings OpenAI2",
  "type": "@n8n/n8n-nodes-langchain.embeddingsOpenAi",
  "position": [
    6400,
    860
  ],
  "parameters": {
    "model": "text-embedding-3-small",
    "options": {}
  },
  "typeVersion": 1
}

================ Node #2611 ================
{
  "id": "9e045857-5fcd-4c4b-83ee-ceda28195b76",
  "name": "Default Data Loader1",
  "type": "@n8n/n8n-nodes-langchain.documentDefaultDataLoader",
  "position": [
    6500,
    860
  ],
  "parameters": {
    "options": {
      "metadata": {
        "metadataValues": [
          {
            "name": "title",
            "value": "={{ $json.title }}"
          },
          {
            "name": "url",
            "value": "={{ $json.url }}"
          },
          {
            "name": "content_type",
            "value": "={{ $json.content_type }}"
          },
          {
            "name": "publication_date",
            "value": "={{ $json.publication_date }}"
          },
          {
            "name": "modification_date",
            "value": "={{ $json.modification_date }}"
          },
          {
            "name": "id",
            "value": "={{ $json.id }}"
          }
        ]
      }
    },
    "jsonData": "={{ $json.data }}",
    "jsonMode": "expressionData"
  },
  "typeVersion": 1
}

================ Node #2612 ================
{
  "id": "d0c1144b-4542-470e-8cbe-f985e839d9d0",
  "name": "Token Splitter1",
  "type": "@n8n/n8n-nodes-langchain.textSplitterTokenSplitter",
  "position": [
    6500,
    980
  ],
  "parameters": {
    "chunkSize": 300,
    "chunkOverlap": 30
  },
  "typeVersion": 1
}

================ Node #2613 ================
{
  "id": "ec7cf1b2-f56f-45da-bb34-1dc8a66a7de6",
  "name": "Markdown1",
  "type": "n8n-nodes-base.markdown",
  "position": [
    6240,
    900
  ],
  "parameters": {
    "html": "={{ $json.content }}",
    "options": {}
  },
  "typeVersion": 1
}

================ Node #2614 ================
{
  "id": "8399976b-340a-49ce-a5b6-f7339957aa9d",
  "name": "Postgres",
  "type": "n8n-nodes-base.postgres",
  "position": [
    4260,
    900
  ],
  "parameters": {
    "query": "select max(created_at) as last_workflow_execution from n8n_website_embedding_histories",
    "options": {},
    "operation": "executeQuery"
  },
  "typeVersion": 2.5
}

================ Node #2615 ================
{
  "id": "88e79403-06df-4f18-9e4c-a4c4e727aa17",
  "name": "Aggregate",
  "type": "n8n-nodes-base.aggregate",
  "position": [
    3300,
    900
  ],
  "parameters": {
    "options": {},
    "aggregate": "aggregateAllItemData"
  },
  "typeVersion": 1
}

================ Node #2616 ================
{
  "id": "db7241e8-1c3a-4f91-99b7-383000f41afe",
  "name": "Aggregate1",
  "type": "n8n-nodes-base.aggregate",
  "position": [
    6800,
    680
  ],
  "parameters": {
    "options": {},
    "aggregate": "aggregateAllItemData"
  },
  "typeVersion": 1
}

================ Node #2617 ================
{
  "id": "94bbba31-d83b-427f-a7dc-336725238294",
  "name": "Aggregate2",
  "type": "n8n-nodes-base.aggregate",
  "position": [
    7180,
    1160
  ],
  "parameters": {
    "options": {},
    "fieldsToAggregate": {
      "fieldToAggregate": [
        {
          "fieldToAggregate": "metadata.id"
        }
      ]
    }
  },
  "typeVersion": 1
}

================ Node #2618 ================
{
  "id": "52a110fa-cdd6-4b1d-99fe-394b5dfa0a1f",
  "name": "Sticky Note",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    440,
    600
  ],
  "parameters": {
    "color": 5,
    "width": 3308.2687575224263,
    "height": 1015.3571428571431,
    "content": "# Workflow 1 : Initial Embedding \n## Use this workflow to create the initial embedding for your WordPress website content\n\n"
  },
  "typeVersion": 1
}

================ Node #2619 ================
{
  "id": "4cbf8135-a52b-4a54-b7b0-15ea27ce7ae3",
  "name": "Sticky Note1",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    3812,
    605
  ],
  "parameters": {
    "color": 5,
    "width": 3785.6673412474183,
    "height": 1020.4528919414245,
    "content": "# Workflow 2 : Upsert\n## Use this workflow to upsert embeddings for documents stored in the Supabase vector table\n"
  },
  "typeVersion": 1
}

================ Node #2620 ================
{
  "id": "f6e954e0-a37a-45ac-9882-20f4f1944b70",
  "name": "Sticky Note2",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    440,
    1820
  ],
  "parameters": {
    "color": 5,
    "width": 3235.199999999999,
    "height": 817.9199999999992,
    "content": "# Workflow 3 : Use this workflow to enable chat functionality with your website content. The chat can be embedded into your website to enhance user experience"
  },
  "typeVersion": 1
}

================ Node #2621 ================
{
  "id": "acbdd54b-f02a-41aa-a0ce-8642db560151",
  "name": "Wordpress - Get all posts",
  "type": "n8n-nodes-base.wordpress",
  "position": [
    1260,
    880
  ],
  "parameters": {
    "options": {},
    "operation": "getAll",
    "returnAll": true
  },
  "typeVersion": 1
}

================ Node #2622 ================
{
  "id": "94fce59d-9336-4d49-a378-17335ec02e52",
  "name": "Wordpress - Get all pages",
  "type": "n8n-nodes-base.wordpress",
  "position": [
    1260,
    1060
  ],
  "parameters": {
    "options": {},
    "resource": "page",
    "operation": "getAll",
    "returnAll": true
  },
  "typeVersion": 1
}

================ Node #2623 ================
{
  "id": "b00c92e5-1765-4fd9-9981-e01053992a0a",
  "name": "Sticky Note3",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    1157,
    727
  ],
  "parameters": {
    "width": 1108.3519999999999,
    "height": 561.4080000000004,
    "content": "## Use filters to create embeddings only for content that you want to include in your GenAI application"
  },
  "typeVersion": 1
}

================ Node #2624 ================
{
  "id": "f8a22739-898d-456b-93f8-79f74b60a00c",
  "name": "Set fields1",
  "type": "n8n-nodes-base.set",
  "position": [
    2320,
    900
  ],
  "parameters": {
    "options": {},
    "assignments": {
      "assignments": [
        {
          "id": "de6711dc-d03c-488c-bef4-0a853e2d0a14",
          "name": "publication_date",
          "type": "string",
          "value": "={{ $json.date }}"
        },
        {
          "id": "f8e35dcc-c96c-4554-b6bc-8e5d7eca90e3",
          "name": "modification_date",
          "type": "string",
          "value": "={{ $json.modified }}"
        },
        {
          "id": "f6a6e3de-fe39-4cfc-ab07-c4ccfaef78f5",
          "name": "content_type",
          "type": "string",
          "value": "={{ $json.type }}"
        },
        {
          "id": "b0428598-073f-4560-9a0c-01caf3708921",
          "name": "title",
          "type": "string",
          "value": "={{ $json.title.rendered }}"
        },
        {
          "id": "534f51b4-b43a-40d3-8120-58df8043d909",
          "name": "url",
          "type": "string",
          "value": "={{ $json.link }}"
        },
        {
          "id": "dbe0c559-90bd-49f8-960e-0d85d5ed4f5e",
          "name": "content",
          "type": "string",
          "value": "={{ $json.content.rendered }}"
        },
        {
          "id": "892be7c6-b032-4129-b285-1986ed4ee046",
          "name": "protected",
          "type": "boolean",
          "value": "={{ $json.excerpt.protected }}"
        },
        {
          "id": "06fac885-4431-41ff-a43b-6eb84ca57401",
          "name": "status",
          "type": "string",
          "value": "={{ $json.status }}"
        },
        {
          "id": "43b1aea7-895e-41da-a0a6-2f1cec1f1b97",
          "name": "id",
          "type": "number",
          "value": "={{ $json.id }}"
        }
      ]
    }
  },
  "typeVersion": 3.4
}

================ Node #2625 ================
{
  "id": "404db031-f470-4e42-a3b3-66b849a86174",
  "name": "Filter - Only published & unprotected content",
  "type": "n8n-nodes-base.filter",
  "position": [
    2520,
    900
  ],
  "parameters": {
    "options": {},
    "conditions": {
      "options": {
        "version": 2,
        "leftValue": "",
        "caseSensitive": true,
        "typeValidation": "strict"
      },
      "combinator": "and",
      "conditions": [
        {
          "id": "1f708587-f3d3-487a-843a-b6a2bfad2ca9",
          "operator": {
            "type": "boolean",
            "operation": "false",
            "singleValue": true
          },
          "leftValue": "={{ $json.protected }}",
          "rightValue": ""
        },
        {
          "id": "04f47269-e112-44c3-9014-749898aca8bd",
          "operator": {
            "name": "filter.operator.equals",
            "type": "string",
            "operation": "equals"
          },
          "leftValue": "={{ $json.status }}",
          "rightValue": "publish"
        }
      ]
    }
  },
  "typeVersion": 2.2
}

================ Node #2626 ================
{
  "id": "05bb6091-515e-4f22-a3fd-d25b2046a03d",
  "name": "HTML To Markdown",
  "type": "n8n-nodes-base.markdown",
  "position": [
    2740,
    900
  ],
  "parameters": {
    "html": "={{ $json.content}}",
    "options": {}
  },
  "typeVersion": 1
}

================ Node #2627 ================
{
  "id": "391e9ea7-71dd-42ae-bee7-badcae32427c",
  "name": "Supabase - Store workflow execution",
  "type": "n8n-nodes-base.supabase",
  "position": [
    3520,
    900
  ],
  "parameters": {
    "tableId": "n8n_website_embedding_histories",
    "fieldsUi": {
      "fieldValues": [
        {
          "fieldId": "id",
          "fieldValue": "={{ $executionId }}"
        }
      ]
    }
  },
  "typeVersion": 1
}

================ Node #2628 ================
{
  "id": "47dad096-efc8-4bdd-9c22-49562325d8a0",
  "name": "Sticky Note4",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    460,
    1320
  ],
  "parameters": {
    "width": 851.1898437499999,
    "height": 275.2000000000001,
    "content": "## Run these two nodes if the \"documents\" table on Supabase and the \"n8n_website_embedding_histories\" table do not exist"
  },
  "typeVersion": 1
}

================ Node #2629 ================
{
  "id": "d19f3a5f-fa42-46d0-a366-4c5a5d09f559",
  "name": "Every 30 seconds",
  "type": "n8n-nodes-base.scheduleTrigger",
  "position": [
    3940,
    900
  ],
  "parameters": {
    "rule": {
      "interval": [
        {
          "field": "seconds"
        }
      ]
    }
  },
  "typeVersion": 1.2
}

================ Node #2630 ================
{
  "id": "a22ab0dd-1da8-4fc2-8106-6130bf7938c8",
  "name": "Sticky Note5",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    3820,
    740
  ],
  "parameters": {
    "width": 336.25,
    "height": 292.5,
    "content": "## Set this node to match the frequency of publishing and updating on your website"
  },
  "typeVersion": 1
}

================ Node #2631 ================
{
  "id": "ba25135b-6e6e-406b-b18a-f532a6e37276",
  "name": "Wordpress - Get posts modified after last workflow execution",
  "type": "n8n-nodes-base.httpRequest",
  "position": [
    4600,
    840
  ],
  "parameters": {
    "url": "https://mydomain.com/wp-json/wp/v2/posts",
    "options": {},
    "sendQuery": true,
    "authentication": "predefinedCredentialType",
    "queryParameters": {
      "parameters": [
        {
          "name": "modified_after",
          "value": "={{ $json.last_workflow_execution }}"
        }
      ]
    },
    "nodeCredentialType": "wordpressApi"
  },
  "typeVersion": 4.2
}

================ Node #2632 ================
{
  "id": "a1d8572e-2b0d-40a1-a898-bbd563a6b190",
  "name": "Wordpress - Get posts modified after last workflow execution1",
  "type": "n8n-nodes-base.httpRequest",
  "position": [
    4600,
    1060
  ],
  "parameters": {
    "url": "https://mydomain.com/wp-json/wp/v2/pages",
    "options": {},
    "sendQuery": true,
    "authentication": "predefinedCredentialType",
    "queryParameters": {
      "parameters": [
        {
          "name": "modified_after",
          "value": "={{ $json.last_workflow_execution }}"
        }
      ]
    },
    "nodeCredentialType": "wordpressApi"
  },
  "typeVersion": 4.2
}

================ Node #2633 ================
{
  "id": "c0839aaa-8ba7-47ff-8fa9-dc75e1c4da84",
  "name": "Set fields2",
  "type": "n8n-nodes-base.set",
  "position": [
    5420,
    920
  ],
  "parameters": {
    "options": {},
    "assignments": {
      "assignments": [
        {
          "id": "de6711dc-d03c-488c-bef4-0a853e2d0a14",
          "name": "publication_date",
          "type": "string",
          "value": "={{ $json.date }}"
        },
        {
          "id": "f8e35dcc-c96c-4554-b6bc-8e5d7eca90e3",
          "name": "modification_date",
          "type": "string",
          "value": "={{ $json.modified }}"
        },
        {
          "id": "f6a6e3de-fe39-4cfc-ab07-c4ccfaef78f5",
          "name": "content_type",
          "type": "string",
          "value": "={{ $json.type }}"
        },
        {
          "id": "b0428598-073f-4560-9a0c-01caf3708921",
          "name": "title",
          "type": "string",
          "value": "={{ $json.title.rendered }}"
        },
        {
          "id": "534f51b4-b43a-40d3-8120-58df8043d909",
          "name": "url",
          "type": "string",
          "value": "={{ $json.link }}"
        },
        {
          "id": "dbe0c559-90bd-49f8-960e-0d85d5ed4f5e",
          "name": "content",
          "type": "string",
          "value": "={{ $json.content.rendered }}"
        },
        {
          "id": "892be7c6-b032-4129-b285-1986ed4ee046",
          "name": "protected",
          "type": "boolean",
          "value": "={{ $json.content.protected }}"
        },
        {
          "id": "06fac885-4431-41ff-a43b-6eb84ca57401",
          "name": "status",
          "type": "string",
          "value": "={{ $json.status }}"
        },
        {
          "id": "43b1aea7-895e-41da-a0a6-2f1cec1f1b97",
          "name": "id",
          "type": "number",
          "value": "={{ $json.id }}"
        }
      ]
    }
  },
  "typeVersion": 3.4
}

================ Node #2634 ================
{
  "id": "15b1d30a-5861-4380-89d5-0eef65240503",
  "name": "Filter - Only published and unprotected content",
  "type": "n8n-nodes-base.filter",
  "position": [
    5760,
    920
  ],
  "parameters": {
    "options": {},
    "conditions": {
      "options": {
        "version": 2,
        "leftValue": "",
        "caseSensitive": true,
        "typeValidation": "strict"
      },
      "combinator": "and",
      "conditions": [
        {
          "id": "c2b25d74-91d7-44ea-8598-422100947b07",
          "operator": {
            "type": "boolean",
            "operation": "false",
            "singleValue": true
          },
          "leftValue": "={{ $json.protected }}",
          "rightValue": ""
        },
        {
          "id": "3e63bf79-25ca-4ccf-aa86-ff5f90e1ece1",
          "operator": {
            "name": "filter.operator.equals",
            "type": "string",
            "operation": "equals"
          },
          "leftValue": "={{ $json.status }}",
          "rightValue": "publish"
        }
      ]
    }
  },
  "typeVersion": 2.2
}

================ Node #2635 ================
{
  "id": "0990f503-8d6f-44f6-8d04-7e2f7d74301a",
  "name": "Loop Over Items",
  "type": "n8n-nodes-base.splitInBatches",
  "position": [
    6040,
    920
  ],
  "parameters": {
    "options": {}
  },
  "typeVersion": 3
}

================ Node #2636 ================
{
  "id": "6cc4e46e-3884-4259-b7ed-51c5552cc3e0",
  "name": "Set fields3",
  "type": "n8n-nodes-base.set",
  "position": [
    7400,
    1160
  ],
  "parameters": {
    "options": {},
    "assignments": {
      "assignments": [
        {
          "id": "de6711dc-d03c-488c-bef4-0a853e2d0a14",
          "name": "publication_date",
          "type": "string",
          "value": "={{ $('Loop Over Items').item.json.publication_date }}"
        },
        {
          "id": "f8e35dcc-c96c-4554-b6bc-8e5d7eca90e3",
          "name": "modification_date",
          "type": "string",
          "value": "={{ $('Loop Over Items').item.json.modification_date }}"
        },
        {
          "id": "f6a6e3de-fe39-4cfc-ab07-c4ccfaef78f5",
          "name": "content_type",
          "type": "string",
          "value": "={{ $('Loop Over Items').item.json.content_type }}"
        },
        {
          "id": "b0428598-073f-4560-9a0c-01caf3708921",
          "name": "title",
          "type": "string",
          "value": "={{ $('Loop Over Items').item.json.title }}"
        },
        {
          "id": "534f51b4-b43a-40d3-8120-58df8043d909",
          "name": "url",
          "type": "string",
          "value": "={{ $('Loop Over Items').item.json.url }}"
        },
        {
          "id": "dbe0c559-90bd-49f8-960e-0d85d5ed4f5e",
          "name": "content",
          "type": "string",
          "value": "={{ $('Loop Over Items').item.json.content }}"
        },
        {
          "id": "892be7c6-b032-4129-b285-1986ed4ee046",
          "name": "protected",
          "type": "boolean",
          "value": "={{ $('Loop Over Items').item.json.protected }}"
        },
        {
          "id": "06fac885-4431-41ff-a43b-6eb84ca57401",
          "name": "status",
          "type": "string",
          "value": "={{ $('Loop Over Items').item.json.status }}"
        },
        {
          "id": "43b1aea7-895e-41da-a0a6-2f1cec1f1b97",
          "name": "id",
          "type": "number",
          "value": "={{ $('Loop Over Items').item.json.id }}"
        }
      ]
    }
  },
  "typeVersion": 3.4
}

================ Node #2637 ================
{
  "id": "24f47982-a803-4848-8390-c400a8cebcee",
  "name": "Set fields4",
  "type": "n8n-nodes-base.set",
  "position": [
    6680,
    1400
  ],
  "parameters": {
    "options": {},
    "assignments": {
      "assignments": [
        {
          "id": "de6711dc-d03c-488c-bef4-0a853e2d0a14",
          "name": "publication_date",
          "type": "string",
          "value": "={{ $('Loop Over Items').item.json.publication_date }}"
        },
        {
          "id": "f8e35dcc-c96c-4554-b6bc-8e5d7eca90e3",
          "name": "modification_date",
          "type": "string",
          "value": "={{ $('Loop Over Items').item.json.modification_date }}"
        },
        {
          "id": "f6a6e3de-fe39-4cfc-ab07-c4ccfaef78f5",
          "name": "content_type",
          "type": "string",
          "value": "={{ $('Loop Over Items').item.json.content_type }}"
        },
        {
          "id": "b0428598-073f-4560-9a0c-01caf3708921",
          "name": "title",
          "type": "string",
          "value": "={{ $('Loop Over Items').item.json.title }}"
        },
        {
          "id": "534f51b4-b43a-40d3-8120-58df8043d909",
          "name": "url",
          "type": "string",
          "value": "={{ $('Loop Over Items').item.json.url }}"
        },
        {
          "id": "dbe0c559-90bd-49f8-960e-0d85d5ed4f5e",
          "name": "content",
          "type": "string",
          "value": "={{ $('Loop Over Items').item.json.content }}"
        },
        {
          "id": "892be7c6-b032-4129-b285-1986ed4ee046",
          "name": "protected",
          "type": "boolean",
          "value": "={{ $('Loop Over Items').item.json.protected }}"
        },
        {
          "id": "06fac885-4431-41ff-a43b-6eb84ca57401",
          "name": "status",
          "type": "string",
          "value": "={{ $('Loop Over Items').item.json.status }}"
        },
        {
          "id": "43b1aea7-895e-41da-a0a6-2f1cec1f1b97",
          "name": "id",
          "type": "number",
          "value": "={{ $('Loop Over Items').item.json.id }}"
        }
      ]
    }
  },
  "typeVersion": 3.4
}

================ Node #2638 ================
{
  "id": "5f59ebbf-ca17-4311-809c-85b74ce624cc",
  "name": "Store documents on Supabase",
  "type": "@n8n/n8n-nodes-langchain.vectorStoreSupabase",
  "position": [
    6380,
    680
  ],
  "parameters": {
    "mode": "insert",
    "options": {
      "queryName": "match_documents"
    },
    "tableName": {
      "__rl": true,
      "mode": "list",
      "value": "documents",
      "cachedResultName": "documents"
    }
  },
  "typeVersion": 1
}

================ Node #2639 ================
{
  "id": "2422562e-9c95-4d77-ae8c-485b06f9234e",
  "name": "Store workflow execution id and timestamptz",
  "type": "n8n-nodes-base.supabase",
  "position": [
    7060,
    680
  ],
  "parameters": {
    "tableId": "n8n_website_embedding_histories"
  },
  "typeVersion": 1
}

================ Node #2640 ================
{
  "id": "5013f3a1-f7fb-4fa7-9ef2-3599f77f5fc8",
  "name": "Aggregate documents",
  "type": "n8n-nodes-base.aggregate",
  "position": [
    1960,
    2060
  ],
  "parameters": {
    "options": {},
    "fieldsToAggregate": {
      "fieldToAggregate": [
        {
          "renameField": true,
          "outputFieldName": "documents",
          "fieldToAggregate": "document"
        }
      ]
    }
  },
  "typeVersion": 1
}

================ Node #2641 ================
{
  "id": "26532217-3206-4be3-b186-733bc364913b",
  "name": "Sticky Note6",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    1220,
    1980
  ],
  "parameters": {
    "width": 665.78125,
    "height": 507.65625,
    "content": "## Retrieve documents from Supabase immediately after chat input to send metadata to OpenAI"
  },
  "typeVersion": 1
}

================ Node #2642 ================
{
  "id": "78d2806c-8d13-44b8-bd6d-866fa794edae",
  "name": "Sticky Note7",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    6375,
    1090
  ],
  "parameters": {
    "width": 1198.9843749999998,
    "height": 515.4687499999998,
    "content": "## Switch:\n- **If the document exists and has been updated:** delete rows and insert new embedding\n- **If it\u2019s a new document:** insert embedding"
  },
  "typeVersion": 1
}

================ Node #2643 ================
{
  "id": "3b5ffada-ae2a-45a2-a76c-69732b05761c",
  "name": "Postgres - Create documents table",
  "type": "n8n-nodes-base.postgres",
  "position": [
    560,
    1440
  ],
  "parameters": {
    "query": "-- Enable the pgvector extension to work with embedding vectors\nCREATE EXTENSION vector;\n\n-- Create a table to store your documents with default RLS\nCREATE TABLE\n documents (\n id BIGINT PRIMARY KEY GENERATED ALWAYS AS IDENTITY,\n CONTENT TEXT, -- corresponds to Document.pageContent\n metadata jsonb, -- corresponds to Document.metadata\n embedding vector (1536) -- 1536 works for OpenAI embeddings, change if needed\n );\n\n-- Enable Row Level Security on the documents table\nALTER TABLE documents ENABLE ROW LEVEL SECURITY;\n\n-- Create a function to search for documents\nCREATE FUNCTION match_documents (\n query_embedding vector (1536),\n match_count INT DEFAULT NULL,\n FILTER jsonb DEFAULT '{}'\n) RETURNS TABLE (\n id BIGINT,\n CONTENT TEXT,\n metadata jsonb,\n similarity FLOAT\n) LANGUAGE plpgsql AS $$\n#variable_conflict use_column\nBEGIN\n RETURN QUERY\n SELECT\n id,\n content,\n metadata,\n 1 - (documents.embedding <=> query_embedding) AS similarity\n FROM documents\n WHERE metadata @> filter\n ORDER BY documents.embedding <=> query_embedding\n LIMIT match_count;\nEND;\n$$;",
    "options": {},
    "operation": "executeQuery"
  },
  "typeVersion": 2.5
}

================ Node #2644 ================
{
  "id": "632a7b44-a062-472e-a777-805ee74a4bd6",
  "name": "Postgres - Create workflow execution history table",
  "type": "n8n-nodes-base.postgres",
  "position": [
    920,
    1440
  ],
  "parameters": {
    "query": "CREATE TABLE\n n8n_website_embedding_histories (\n id BIGINT PRIMARY KEY GENERATED ALWAYS AS IDENTITY,\n created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()\n );",
    "options": {},
    "operation": "executeQuery"
  },
  "typeVersion": 2.5
}

================ Node #2645 ================
{
  "id": "7c55e08b-e116-4e22-bd1d-e4bec5107d89",
  "name": "Merge Wordpress Posts and Pages",
  "type": "n8n-nodes-base.merge",
  "position": [
    1660,
    900
  ],
  "parameters": {},
  "typeVersion": 3
}

================ Node #2646 ================
{
  "id": "4520db6c-2e68-45ff-9439-6fd95f95dc85",
  "name": "Merge retrieved WordPress posts and pages",
  "type": "n8n-nodes-base.merge",
  "position": [
    5120,
    920
  ],
  "parameters": {},
  "typeVersion": 3
}

================ Node #2647 ================
{
  "id": "d547a063-6b76-4bfd-ba0a-165181c4af19",
  "name": "Postgres - Filter on existing documents",
  "type": "n8n-nodes-base.postgres",
  "position": [
    6260,
    1180
  ],
  "parameters": {
    "query": "SELECT *\nFROM documents\nWHERE (metadata->>'id')::integer = {{ $json.id }};\n",
    "options": {},
    "operation": "executeQuery"
  },
  "typeVersion": 2.5,
  "alwaysOutputData": true
}

================ Node #2648 ================
{
  "id": "03456a81-d512-4fd8-842a-27b6d8b3f94e",
  "name": "Supabase - Delete row if documents exists",
  "type": "n8n-nodes-base.supabase",
  "position": [
    6900,
    1160
  ],
  "parameters": {
    "tableId": "documents",
    "operation": "delete",
    "filterType": "string",
    "filterString": "=metadata->>id=like.{{ $json.metadata.id }}"
  },
  "executeOnce": false,
  "typeVersion": 1,
  "alwaysOutputData": false
}

================ Node #2649 ================
{
  "id": "72e5bf4b-c413-4fb7-acb8-59e7abee60f7",
  "name": "Switch",
  "type": "n8n-nodes-base.switch",
  "position": [
    6580,
    1180
  ],
  "parameters": {
    "rules": {
      "values": [
        {
          "outputKey": "existing_documents",
          "conditions": {
            "options": {
              "version": 2,
              "leftValue": "",
              "caseSensitive": true,
              "typeValidation": "strict"
            },
            "combinator": "and",
            "conditions": [
              {
                "operator": {
                  "type": "number",
                  "operation": "exists",
                  "singleValue": true
                },
                "leftValue": "={{ $json.metadata.id }}",
                "rightValue": ""
              }
            ]
          },
          "renameOutput": true
        },
        {
          "outputKey": "new_documents",
          "conditions": {
            "options": {
              "version": 2,
              "leftValue": "",
              "caseSensitive": true,
              "typeValidation": "strict"
            },
            "combinator": "and",
            "conditions": [
              {
                "id": "696d1c1b-8674-4549-880e-e0d0ff681905",
                "operator": {
                  "type": "number",
                  "operation": "notExists",
                  "singleValue": true
                },
                "leftValue": "={{ $json.metadata.id }}",
                "rightValue": ""
              }
            ]
          },
          "renameOutput": true
        }
      ]
    },
    "options": {}
  },
  "typeVersion": 3.2
}

================ Node #2650 ================
{
  "id": "6c5d8f6a-569e-4f1e-99a6-07ec492575ff",
  "name": "When chat message received",
  "type": "@n8n/n8n-nodes-langchain.chatTrigger",
  "position": [
    660,
    2060
  ],
  "webhookId": "4e762668-c19f-40ec-83bf-302bb9fc6527",
  "parameters": {
    "mode": "webhook",
    "public": true,
    "options": {}
  },
  "typeVersion": 1.1
}

================ Node #2651 ================
{
  "id": "9a2f17ba-902f-4528-9eef-f8c0e4ddf516",
  "name": "Supabase - Retrieve documents from chatinput",
  "type": "@n8n/n8n-nodes-langchain.vectorStoreSupabase",
  "position": [
    1380,
    2060
  ],
  "parameters": {
    "mode": "load",
    "prompt": "={{ $json.chatInput }}",
    "options": {},
    "tableName": {
      "__rl": true,
      "mode": "list",
      "value": "documents",
      "cachedResultName": "documents"
    }
  },
  "typeVersion": 1
}

================ Node #2652 ================
{
  "id": "43607f23-d33f-4aca-b478-f20ba8c218cf",
  "name": "AI Agent",
  "type": "@n8n/n8n-nodes-langchain.agent",
  "position": [
    2780,
    2060
  ],
  "parameters": {
    "text": "=Visitor's question : {{ $json.chatInput }}\nDocuments found: {{ $json.documents }}",
    "agent": "conversationalAgent",
    "options": {
      "systemMessage": "You are an assistant tasked with answering questions from visitors to the website {{your_website_url}}.\n\nInput:\nVisitor's question: The question posed by the visitor.\nDocuments found: A selection of documents from the vector database that match the visitor's question. These documents are accompanied by the following metadata:\nurl: The URL of the page or blog post found.\ncontent_type: The type of content (e.g., page or blog article).\npublication_date: The publication date of the document.\nmodification_date: The last modification date of the document.\nObjective:\nProvide a helpful answer using the relevant information from the documents found.\nIMPORTANT : You must always include all metadata (url, content_type, publication_date, and modification_date) directly in the main answer to the visitor to indicate the source of the information. These should not be separated from the main answer, and must be naturally integrated into the response.\nIf multiple documents are used in your response, mention each one with its respective metadata.\nIf no relevant documents are found, or if the documents are insufficient, clearly indicate this in your response.\nImportant: Respond in the language used by the visitor who asked the question.\nExample of forced metadata integration:\n\"The cost of a home charging station for an electric vehicle varies depending on several factors. According to [title of the page](https://example.com/charging-point-price), published on April 8, 2021, and updated on July 24, 2022, the price for a 7kW station is \u20ac777.57 including VAT. This page provides further details about the price range and installation considerations.\""
    },
    "promptType": "define"
  },
  "typeVersion": 1.6
}

================ Node #2653 ================
{
  "id": "cd4107cb-e521-4c1e-88e2-3417a12fd585",
  "name": "Supabase Vector Store",
  "type": "@n8n/n8n-nodes-langchain.vectorStoreSupabase",
  "position": [
    2940,
    900
  ],
  "parameters": {
    "mode": "insert",
    "options": {
      "queryName": "match_documents"
    },
    "tableName": {
      "__rl": true,
      "mode": "list",
      "value": "documents",
      "cachedResultName": "documents"
    }
  },
  "typeVersion": 1
}

================ Node #2654 ================
{
  "id": "6c78b4c7-993b-410d-93e7-e11b3052e53b",
  "name": "When clicking \u2018Test workflow\u2019",
  "type": "n8n-nodes-base.manualTrigger",
  "position": [
    0,
    420
  ],
  "parameters": {},
  "typeVersion": 1
}

================ Node #2655 ================
{
  "id": "c2ab6497-6d6d-483b-bd43-494ae95394c0",
  "name": "Structured Output Parser",
  "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
  "position": [
    1440,
    600
  ],
  "parameters": {
    "schemaType": "manual",
    "inputSchema": "{\n\t\"type\": \"object\",\n\t\"properties\": {\n\t\t\"is_valid\": { \"type\": \"boolean\" },\n \"photo_description\": {\n \"type\": \"string\",\n \"description\": \"describe the appearance of the person(s), object(s) if any and the background in the image. Mention any colours of each if possible.\"\n },\n\t\t\"reasons\": {\n \"type\": \"array\",\n \"items\": { \"type\": \"string\" }\n }\n\t}\n}"
  },
  "typeVersion": 1.2
}

================ Node #2656 ================
{
  "id": "b23f5298-17c7-49ac-a8ca-78e006b2d294",
  "name": "Photo URLs",
  "type": "n8n-nodes-base.set",
  "position": [
    360,
    380
  ],
  "parameters": {
    "options": {},
    "assignments": {
      "assignments": [
        {
          "id": "6baa3e08-8957-454e-8ee9-d5414a0ff990",
          "name": "data",
          "type": "array",
          "value": "={{\n[\n{\n \"name\": \"portrait_1\",\n \"url\": \"https://drive.google.com/file/d/1zs963iFkO-3g2rKak8Hcy555h55D8gjF/view?usp=sharing\"\n},\n{\n \"name\": \"portrait_2\",\n \"url\": \"https://drive.google.com/file/d/19FyDcs68dZauQSEf6SEulJMag51SPsFy/view?usp=sharing\"\n},\n{\n \"name\": \"portrait_3\",\n \"url\": \"https://drive.google.com/file/d/1gbXjfNYE7Tvuw_riFmHMKoqPPu696VfW/view?usp=sharing\",\n\n},\n{\n \"name\": \"portrait_4\",\n \"url\": \"https://drive.google.com/file/d/1s19hYdxgfMkrnU25l6YIDq-myQr1tQMa/view?usp=sharing\"\n},\n{\n \"name\": \"portrait_5\",\n \"url\": \"https://drive.google.com/file/d/193FqIXJWAKj6O2SmOj3cLBfypHBkgdI5/view?usp=sharing\"\n}\n]\n}}"
        }
      ]
    }
  },
  "typeVersion": 3.4
}

================ Node #2657 ================
{
  "id": "8d445f73-dff7-485b-87e2-5b64da09cbf0",
  "name": "Photos To List",
  "type": "n8n-nodes-base.splitOut",
  "position": [
    520,
    380
  ],
  "parameters": {
    "options": {},
    "fieldToSplitOut": "data"
  },
  "typeVersion": 1
}

================ Node #2658 ================
{
  "id": "7fb3b829-88a7-42ec-abfd-3ddaa042c916",
  "name": "Download Photos",
  "type": "n8n-nodes-base.googleDrive",
  "position": [
    680,
    380
  ],
  "parameters": {
    "fileId": {
      "__rl": true,
      "mode": "url",
      "value": "={{ $json.url }}"
    },
    "options": {},
    "operation": "download"
  },
  "credentials": {
    "googleDriveOAuth2Api": {
      "id": "yOwz41gMQclOadgu",
      "name": "Google Drive account"
    }
  },
  "typeVersion": 3
}

================ Node #2659 ================
{
  "id": "b8644f6d-691f-49bc-b0fe-33a68c59638d",
  "name": "Resize For AI",
  "type": "n8n-nodes-base.editImage",
  "position": [
    1060,
    440
  ],
  "parameters": {
    "width": 1024,
    "height": 1024,
    "options": {},
    "operation": "resize",
    "resizeOption": "onlyIfLarger"
  },
  "typeVersion": 1
}

================ Node #2660 ================
{
  "id": "ecb266f2-0d2d-4cbe-a641-26735f0bdf18",
  "name": "Sticky Note",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    280,
    180
  ],
  "parameters": {
    "color": 7,
    "width": 594,
    "height": 438,
    "content": "## 1. Import Photos To Validate\n[Read more about using Google Drive](https://docs.n8n.io/integrations/builtin/app-nodes/n8n-nodes-base.googledrive)\n\nIn this demonstration, we'll import 5 different portraits to test our AI vision model. For convenience, we'll use Google Drive but feel free to swap this out for other sources such as other storage or by using webhooks."
  },
  "typeVersion": 1
}

================ Node #2661 ================
{
  "id": "a1034923-0905-4cdd-a6bf-21d28aa3dd71",
  "name": "Sticky Note1",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    900,
    180
  ],
  "parameters": {
    "color": 7,
    "width": 774,
    "height": 589.25,
    "content": "## 2. Verify Passport Photo Validity Using AI Vision Model\n[Learn more about Basic LLM Chain](https://docs.n8n.io/integrations/builtin/cluster-nodes/root-nodes/n8n-nodes-langchain.chainllm)\n\nVerifying if a photo is suitable for a passport photo is a great use-case for AI vision and to automate the process is an equally great use-case for using n8n. Here's we've pasted in the UK governments guidelines copied from gov.uk and have asked the AI to validate the incoming photos following those rules. A structured output parser is used to simplify the AI response which can be used to update a database or backend of your choosing."
  },
  "typeVersion": 1
}

================ Node #2662 ================
{
  "id": "af231ee5-adff-4d27-ba5f-8c04ddd4892d",
  "name": "Sticky Note2",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    -140,
    0
  ],
  "parameters": {
    "width": 386,
    "height": 610.0104651162792,
    "content": "## Try It Out!\n\n### This workflow takes a portrait and verifies if it makes for a valid passport photo. It achieves this by using an AI vision model following the UK government guidance.\n\nOpenAI's vision model was found to perform well for understanding photographs and so is recommended for this type of workflow. However, any capable vision model should work.\n\n### Need Help?\nJoin the [Discord](https://discord.com/invite/XPKeKXeB7d) or ask in the [Forum](https://community.n8n.io/)!"
  },
  "typeVersion": 1
}

================ Node #2663 ================
{
  "id": "e07e1655-2683-4e21-b2b7-e0c0bfb569c0",
  "name": "Passport Photo Validator",
  "type": "@n8n/n8n-nodes-langchain.chainLlm",
  "position": [
    1240,
    440
  ],
  "parameters": {
    "text": "Assess if the image is a valid according to the passport photo criteria as set by the UK Government.",
    "messages": {
      "messageValues": [
        {
          "message": "=You help verify passport photo validity.\n\n## Rules for digital photos\nhttps://www.gov.uk/photos-for-passports\n\n### The quality of your digital photo\nYour photo must be:\n* clear and in focus\n* in colour\n* unaltered by computer software\n* at least 600 pixels wide and 750 pixels tall\n* at least 50KB and no more than 10MB\n\n### What your digital photo must show\nThe digital photo must:\n* contain no other objects or people\n* be taken against a plain white or light-coloured background\n* be in clear contrast to the background\n* not have \u2018red eye\u2019\n* If you\u2019re using a photo taken on your own device, include your head, shoulders and upper body. Do not crop your photo - it will be done for you.\n\nIn your photo you must:\n* be facing forwards and looking straight at the camera\n* have a plain expression and your mouth closed\n* have your eyes open and visible\n* not have hair in front of your eyes\n* not have a head covering (unless it\u2019s for religious or medical reasons)\n* not have anything covering your face\n* not have any shadows on your face or behind you - shadows on light background are okay\n* Do not wear glasses in your photo unless you have to do so. If you must wear glasses, they cannot be sunglasses or tinted glasses, and you must make sure your eyes are not covered by the frames or any glare, reflection or shadow.\n\n### Photos of babies and children\n* Children must be on their own in the picture. Babies must not be holding toys or using dummies.\n* Children under 6 do not have to be looking directly at the camera or have a plain expression.\n* Children under one do not have to have their eyes open. You can support their head with your hand, but your hand must not be visible in the photo.\n* Children under one should lie on a plain light-coloured sheet. Take the photo from above.\n\n"
        },
        {
          "type": "HumanMessagePromptTemplate",
          "messageType": "imageBinary"
        }
      ]
    },
    "promptType": "define",
    "hasOutputParser": true
  },
  "typeVersion": 1.4
}

================ Node #2664 ================
{
  "id": "0a36ba22-90b2-4abf-943b-c1cc8e7317d5",
  "name": "Google Gemini Chat Model",
  "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
  "position": [
    1240,
    600
  ],
  "parameters": {
    "options": {},
    "modelName": "models/gemini-1.5-pro-latest"
  },
  "credentials": {
    "googlePalmApi": {
      "id": "dSxo6ns5wn658r8N",
      "name": "Google Gemini(PaLM) Api account"
    }
  },
  "typeVersion": 1
}

================ Node #2665 ================
{
  "id": "e7374976-f3c1-4f60-ae57-9eec65444216",
  "name": "On new manual Chat Message",
  "type": "@n8n/n8n-nodes-langchain.manualChatTrigger",
  "position": [
    763,
    676
  ],
  "parameters": {},
  "typeVersion": 1
}

================ Node #2666 ================
{
  "id": "97e84a23-9536-43cd-94e9-b8166be8ed32",
  "name": "OpenAI Chat Model",
  "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
  "position": [
    983,
    896
  ],
  "parameters": {
    "model": "gpt-4-1106-preview",
    "options": {
      "timeout": 300000,
      "temperature": 0.7,
      "frequencyPenalty": 0.3
    }
  },
  "credentials": {
    "openAiApi": {
      "id": "wPFAzp4ZHdLLwvkK",
      "name": "OpenAi account"
    }
  },
  "typeVersion": 1
}

================ Node #2667 ================
{
  "id": "63d98361-8978-4042-84e7-53a0e226f946",
  "name": "HTTP Request",
  "type": "n8n-nodes-base.httpRequest",
  "onError": "continueRegularOutput",
  "position": [
    1360,
    1200
  ],
  "parameters": {
    "url": "={{ encodeURI($json.query.url) }}",
    "options": {
      "response": {
        "response": {
          "neverError": true
        }
      },
      "allowUnauthorizedCerts": true
    }
  },
  "typeVersion": 4.1,
  "alwaysOutputData": false
}

================ Node #2668 ================
{
  "id": "17d4b5ae-f5d3-4793-8419-d3c879f7f50d",
  "name": "Exctract HTML Body",
  "type": "n8n-nodes-base.set",
  "position": [
    1780,
    1480
  ],
  "parameters": {
    "fields": {
      "values": [
        {
          "name": "HTML",
          "stringValue": "={{ $json?.data.match(/<body[^>]*>([\\s\\S]*?)<\\/body>/i)[1] }}"
        }
      ]
    },
    "include": "selected",
    "options": {},
    "includeFields": "HTML"
  },
  "typeVersion": 3.2
}

================ Node #2669 ================
{
  "id": "36c38ee4-724c-4ba2-a59a-ac0bbc912e94",
  "name": "Is error?",
  "type": "n8n-nodes-base.if",
  "position": [
    1560,
    1200
  ],
  "parameters": {
    "conditions": {
      "boolean": [
        {
          "value1": "={{ $json.hasOwnProperty('error') }}",
          "value2": true
        }
      ]
    }
  },
  "typeVersion": 1
}

================ Node #2670 ================
{
  "id": "4e4d97ce-14a9-4f4f-aa75-f218784d9ed9",
  "name": "Stringify error message",
  "type": "n8n-nodes-base.set",
  "position": [
    1780,
    980
  ],
  "parameters": {
    "fields": {
      "values": [
        {
          "name": "page_content",
          "stringValue": "={{ $('QUERY_PARAMS').first()?.json?.query?.url == null ? \"INVALID action_input. This should be an HTTP query string like this: \\\"?url=VALIDURL&method=SELECTEDMETHOD\\\". Only a simple string value is accepted. JSON object as an action_input is NOT supported!\" : JSON.stringify($json.error) }}"
        }
      ]
    },
    "include": "selected",
    "options": {},
    "includeFields": "HTML"
  },
  "typeVersion": 3.2
}

================ Node #2671 ================
{
  "id": "8452e5c4-aa29-4a02-9579-8d9da3727bcb",
  "name": "Execute Workflow Trigger",
  "type": "n8n-nodes-base.executeWorkflowTrigger",
  "position": [
    760,
    1200
  ],
  "parameters": {},
  "typeVersion": 1
}

================ Node #2672 ================
{
  "id": "063220c2-fa4d-4d5e-9549-7712aaa72921",
  "name": "Remove extra tags",
  "type": "n8n-nodes-base.set",
  "position": [
    1980,
    1480
  ],
  "parameters": {
    "fields": {
      "values": [
        {
          "name": "HTML",
          "stringValue": "={{ ($json.HTML || \"HTML BODY CONTENT FOR THIS SEARCH RESULT IS NOT AVAILABLE\").replace(/<script[^>]*>([\\s\\S]*?)<\\/script>|<style[^>]*>([\\s\\S]*?)<\\/style>|<noscript[^>]*>([\\s\\S]*?)<\\/noscript>|<!--[\\s\\S]*?-->|<iframe[^>]*>([\\s\\S]*?)<\\/iframe>|<object[^>]*>([\\s\\S]*?)<\\/object>|<embed[^>]*>([\\s\\S]*?)<\\/embed>|<video[^>]*>([\\s\\S]*?)<\\/video>|<audio[^>]*>([\\s\\S]*?)<\\/audio>|<svg[^>]*>([\\s\\S]*?)<\\/svg>/ig, '')}}"
        }
      ]
    },
    "options": {}
  },
  "typeVersion": 3.2
}

================ Node #2673 ================
{
  "id": "036511d7-a4be-4bbf-b4bc-47ddfabfe76f",
  "name": "Simplify output",
  "type": "n8n-nodes-base.set",
  "notes": "remove links and image URLs",
  "position": [
    2360,
    1380
  ],
  "parameters": {
    "fields": {
      "values": [
        {
          "name": "HTML",
          "stringValue": "={{ $json.HTML.replace(/href\\s*=\\s*\"(.+?)\"/gi, 'href=\"NOURL\"').replace(/src\\s*=\\s*\"(.+?)\"/gi, 'src=\"NOIMG\"')}}"
        }
      ]
    },
    "options": {}
  },
  "notesInFlow": true,
  "typeVersion": 3.2
}

================ Node #2674 ================
{
  "id": "5e2b5383-adcf-4de0-a406-4f5d631b5e8a",
  "name": "Simplify?",
  "type": "n8n-nodes-base.if",
  "position": [
    2180,
    1480
  ],
  "parameters": {
    "conditions": {
      "string": [
        {
          "value1": "={{ $('CONFIG').first()?.json?.query?.method }}",
          "value2": "simplif",
          "operation": "contains"
        }
      ]
    }
  },
  "typeVersion": 1
}

================ Node #2675 ================
{
  "id": "a0fc004a-ab0f-4b31-94df-50f5eee69c86",
  "name": "QUERY_PARAMS",
  "type": "n8n-nodes-base.set",
  "position": [
    960,
    1200
  ],
  "parameters": {
    "fields": {
      "values": [
        {
          "name": "query",
          "type": "objectValue",
          "objectValue": "={{ $json.query.substring($json.query.indexOf('?') + 1).split('&').reduce((result, item) => (result[item.split('=')[0]] = decodeURIComponent(item.split('=')[1]), result), {}) }}"
        }
      ]
    },
    "options": {}
  },
  "typeVersion": 3.2
}

================ Node #2676 ================
{
  "id": "3b6599d6-ce9a-4861-9b52-07156eb52539",
  "name": "CONFIG",
  "type": "n8n-nodes-base.set",
  "position": [
    1160,
    1200
  ],
  "parameters": {
    "fields": {
      "values": [
        {
          "name": "query.maxlimit",
          "type": "numberValue",
          "numberValue": "={{ $json?.query?.maxlimit == null ? 70000 : Number($json?.query?.maxlimit) }}"
        }
      ]
    },
    "options": {}
  },
  "typeVersion": 3.2
}

================ Node #2677 ================
{
  "id": "14f683be-76f6-4034-9a0e-d785738b135f",
  "name": "Sticky Note",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    721,
    1134
  ],
  "parameters": {
    "width": 556.25,
    "height": 235.79999999999995,
    "content": "### Convert the query string into JSON, apply the limit for a page length"
  },
  "typeVersion": 1
}

================ Node #2678 ================
{
  "id": "6deabcb7-a984-48ec-af2a-8c70b3a4e4bf",
  "name": "Sticky Note1",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    1720,
    840
  ],
  "parameters": {
    "width": 491,
    "height": 285.7,
    "content": "## Send an error message:\n1. If query param was incorrect, return the instruction. AI Agent should pick up on this and adapt the query on the next iteration.\n2. If the query is OK and an error was during the HTTP Request, then send back the original error message."
  },
  "typeVersion": 1
}

================ Node #2679 ================
{
  "id": "df1e8d00-0e18-44fa-8f94-8a53c27f7c88",
  "name": "Sticky Note2",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    1720,
    1160
  ],
  "parameters": {
    "width": 1200,
    "height": 472.5,
    "content": "## Post-processing of the HTML page:\n1. Keep only <BODY> content\n2. Remove inline <SCRIPT> tag entirely, as well as: NOSCRIPT, IFRAME, OBJECT, EMBED, VIDEO, AUDIO, SVG, and HTML comments.\n3. In case query parameter method=simplified, replace all page URLs (a href) and IMG (src) with NOURL / NOIMG - this may save up to 20% of the page length\n4. Convert the remaining HTML to Markdown. This step further reduces the length of the page: long HTML tags and styles are eliminated, but the markdown syntax keeps some page structure. This gives much better results compared to just a blank text.\n5. Finally, check the page length. If it's too long, send an \"ERROR: PAGE CONTENT TOO LONG\" instead of the actual page. Of course, you could split the page content in chunks, but sometimes long pages just don't have a needed content, so it makes little sense to burn tokens on them."
  },
  "typeVersion": 1
}

================ Node #2680 ================
{
  "id": "6afe96a0-0fba-4ae1-ab8f-f7da56d420b1",
  "name": "Sticky Note3",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    720,
    540
  ],
  "parameters": {
    "width": 616.8597285067872,
    "height": 483.0226244343891,
    "content": "## Example ReAct AI Agent\n1. Agent Prompt is default\n2. Check the description of the HTTP_Request_Tool, it guides the agent to provide a query string with several parameters instead of a JSON object"
  },
  "typeVersion": 1
}

================ Node #2681 ================
{
  "id": "d5ff2114-1e74-43cf-9f3c-744c241988db",
  "name": "ReAct AI Agent",
  "type": "@n8n/n8n-nodes-langchain.agent",
  "position": [
    983,
    676
  ],
  "parameters": {
    "agent": "reActAgent",
    "options": {
      "prefix": "Answer the following questions as best you can. You have access to the following tools:",
      "suffix": "Begin!\n\n\tQuestion: {input}\n\tThought:{agent_scratchpad}",
      "suffixChat": "Begin! Reminder to always use the exact characters `Final Answer` when responding.",
      "humanMessageTemplate": "{input}\n\n{agent_scratchpad}"
    }
  },
  "typeVersion": 1
}

================ Node #2682 ================
{
  "id": "cc7aef4a-a1fb-4a69-a670-1f200f9e9541",
  "name": "Convert to Markdown",
  "type": "n8n-nodes-base.markdown",
  "position": [
    2540,
    1480
  ],
  "parameters": {
    "html": "={{ $json.HTML }}",
    "options": {},
    "destinationKey": "page_content"
  },
  "typeVersion": 1
}

================ Node #2683 ================
{
  "id": "11806e8c-5fc4-4d9d-8144-179356993aa7",
  "name": "Send Page Content",
  "type": "n8n-nodes-base.set",
  "position": [
    2740,
    1480
  ],
  "parameters": {
    "fields": {
      "values": [
        {
          "name": "page_content",
          "stringValue": "={{ $json.page_content.length < $('CONFIG').first()?.json?.query?.maxlimit ? $json.page_content : \"ERROR: PAGE CONTENT TOO LONG\" }}"
        },
        {
          "name": "page_length",
          "type": "numberValue",
          "numberValue": "={{ $json.page_content.length }}"
        }
      ]
    },
    "include": "selected",
    "options": {}
  },
  "typeVersion": 3.2
}

================ Node #2684 ================
{
  "id": "a3a6b199-517b-4987-8281-d7997a32f54b",
  "name": "HTTP_Request_Tool",
  "type": "@n8n/n8n-nodes-langchain.toolWorkflow",
  "position": [
    1103,
    896
  ],
  "parameters": {
    "name": "HTTP_Request_Tool",
    "workflowId": "={{ $workflow.id }}",
    "description": "Call this tool to fetch a webpage content. The input should be a stringified HTTP query parameter like this: \"?url=VALIDURL&method=SELECTEDMETHOD\". \"url\" parameter should contain the valid URL string. \"method\" key can be either \"full\" or \"simplified\". method=full will fetch the whole webpage content in the Markdown format, including page links and image links. method=simplified will return the Markdown content of the page but remove urls and image links from the page content for simplicity. Before calling this tool, think strategically which \"method\" to call. Best of all to use method=simplified. However, if you anticipate that the page request is not final or if you need to extract links from the page, pick method=full.",
    "responsePropertyName": "page_content"
  },
  "typeVersion": 1
}

================ Node #2685 ================
{
  "id": "67850bd7-f9f4-4d5b-8c9e-bd1451247ba6",
  "name": "When clicking \"Execute Workflow\"",
  "type": "n8n-nodes-base.manualTrigger",
  "position": [
    -740,
    1000
  ],
  "parameters": {},
  "typeVersion": 1
}

================ Node #2686 ================
{
  "id": "0d9133f9-b6d3-4101-95c6-3cd24cdb70c3",
  "name": "Fetch essay list",
  "type": "n8n-nodes-base.httpRequest",
  "position": [
    -520,
    1000
  ],
  "parameters": {
    "url": "http://www.paulgraham.com/articles.html",
    "options": {}
  },
  "typeVersion": 4.1
}

================ Node #2687 ================
{
  "id": "ee634297-a456-4f70-a995-55b02950571e",
  "name": "Extract essay names",
  "type": "n8n-nodes-base.html",
  "position": [
    -300,
    1000
  ],
  "parameters": {
    "options": {},
    "operation": "extractHtmlContent",
    "dataPropertyName": "=data",
    "extractionValues": {
      "values": [
        {
          "key": "essay",
          "attribute": "href",
          "cssSelector": "table table a",
          "returnArray": true,
          "returnValue": "attribute"
        }
      ]
    }
  },
  "typeVersion": 1
}

================ Node #2688 ================
{
  "id": "83d75693-dbb8-44c4-8533-da06f611c59c",
  "name": "Fetch essay texts",
  "type": "n8n-nodes-base.httpRequest",
  "position": [
    360,
    1000
  ],
  "parameters": {
    "url": "=http://www.paulgraham.com/{{ $json.essay }}",
    "options": {}
  },
  "typeVersion": 4.1
}

================ Node #2689 ================
{
  "id": "151022b5-8570-4176-bf3f-137f27ac7036",
  "name": "Extract title",
  "type": "n8n-nodes-base.html",
  "position": [
    700,
    700
  ],
  "parameters": {
    "options": {},
    "operation": "extractHtmlContent",
    "extractionValues": {
      "values": [
        {
          "key": "title",
          "cssSelector": "title"
        }
      ]
    }
  },
  "typeVersion": 1
}

================ Node #2690 ================
{
  "id": "07bcf095-3c4d-4a72-9bcb-341411750ff5",
  "name": "Clean up",
  "type": "n8n-nodes-base.set",
  "position": [
    1360,
    980
  ],
  "parameters": {
    "fields": {
      "values": [
        {
          "name": "title",
          "stringValue": "={{ $json.title }}"
        },
        {
          "name": "summary",
          "stringValue": "={{ $json.response.text }}"
        },
        {
          "name": "url",
          "stringValue": "=http://www.paulgraham.com/{{ $('Limit to first 3').item.json.essay }}"
        }
      ]
    },
    "include": "none",
    "options": {}
  },
  "typeVersion": 3
}

================ Node #2691 ================
{
  "id": "11285de0-3c5d-4296-a322-9b7585af9acc",
  "name": "Sticky Note",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    -580,
    920
  ],
  "parameters": {
    "width": 1071.752021563343,
    "height": 285.66037735849045,
    "content": "## Scrape latest Paul Graham essays"
  },
  "typeVersion": 1
}

================ Node #2692 ================
{
  "id": "c32f905d-dd7a-4b68-bbe0-dd8115ee0944",
  "name": "Sticky Note1",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    620,
    920
  ],
  "parameters": {
    "width": 465.3908355795153,
    "height": 606.7924528301882,
    "content": "## Summarize them with GPT"
  },
  "typeVersion": 1
}

================ Node #2693 ================
{
  "id": "29d264f4-df6d-4a41-ab38-58e1b1becc9a",
  "name": "Split out into items",
  "type": "n8n-nodes-base.splitOut",
  "position": [
    -80,
    1000
  ],
  "parameters": {
    "options": {},
    "fieldToSplitOut": "essay"
  },
  "typeVersion": 1
}

================ Node #2694 ================
{
  "id": "ccfa3a1d-f170-44b4-a1f2-3573c88cae98",
  "name": "Limit to first 3",
  "type": "n8n-nodes-base.limit",
  "position": [
    140,
    1000
  ],
  "parameters": {
    "maxItems": 3
  },
  "typeVersion": 1
}

================ Node #2695 ================
{
  "id": "c3d05068-9d1a-4ef5-8249-e7384dc617ee",
  "name": "Default Data Loader",
  "type": "@n8n/n8n-nodes-langchain.documentDefaultDataLoader",
  "position": [
    820,
    1200
  ],
  "parameters": {
    "options": {}
  },
  "typeVersion": 1
}

================ Node #2696 ================
{
  "id": "db75adad-cb16-4e72-b16e-34684a733b05",
  "name": "Recursive Character Text Splitter",
  "type": "@n8n/n8n-nodes-langchain.textSplitterRecursiveCharacterTextSplitter",
  "position": [
    820,
    1340
  ],
  "parameters": {
    "options": {}
  },
  "typeVersion": 1
}

================ Node #2697 ================
{
  "id": "022cc091-9b4c-45c2-bc8e-4037ec2d0d60",
  "name": "OpenAI Chat Model1",
  "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
  "position": [
    680,
    1200
  ],
  "parameters": {
    "model": "gpt-4o-mini",
    "options": {}
  },
  "credentials": {
    "openAiApi": {
      "id": "8gccIjcuf3gvaoEr",
      "name": "OpenAi account"
    }
  },
  "typeVersion": 1
}

================ Node #2698 ================
{
  "id": "cda47bb7-36c5-4d15-a1ef-0c66b1194825",
  "name": "Merge",
  "type": "n8n-nodes-base.merge",
  "position": [
    1160,
    980
  ],
  "parameters": {
    "mode": "combine",
    "options": {},
    "combineBy": "combineByPosition"
  },
  "typeVersion": 3
}

================ Node #2699 ================
{
  "id": "28144e4c-e425-428d-b3d1-f563bfd4e5b3",
  "name": "Summarization Chain",
  "type": "@n8n/n8n-nodes-langchain.chainSummarization",
  "position": [
    720,
    1000
  ],
  "parameters": {
    "options": {},
    "operationMode": "documentLoader"
  },
  "typeVersion": 2
}

================ Node #2700 ================
{
  "id": "1bad6bfc-9ec9-48a5-b8f7-73c4de3d08cf",
  "name": "Gmail Trigger",
  "type": "n8n-nodes-base.gmailTrigger",
  "position": [
    1480,
    160
  ],
  "parameters": {
    "simple": false,
    "filters": {},
    "options": {},
    "pollTimes": {
      "item": [
        {
          "mode": "everyMinute"
        }
      ]
    }
  },
  "credentials": {
    "gmailOAuth2": {
      "id": "kkhNhqKpZt6IUZd0",
      "name": " Gmail"
    }
  },
  "typeVersion": 1.2
}

================ Node #2701 ================
{
  "id": "9ac747a1-4fd8-46ba-b4c1-75fd17aab2ed",
  "name": "Microsoft Outlook Trigger",
  "type": "n8n-nodes-base.microsoftOutlookTrigger",
  "disabled": true,
  "position": [
    1480,
    720
  ],
  "parameters": {
    "fields": [
      "body",
      "toRecipients",
      "subject",
      "bodyPreview"
    ],
    "output": "fields",
    "filters": {},
    "options": {},
    "pollTimes": {
      "item": [
        {
          "mode": "everyMinute"
        }
      ]
    }
  },
  "credentials": {
    "microsoftOutlookOAuth2Api": {
      "id": "vTCK0oVQ0WjFrI5H",
      "name": " Outlook Credential"
    }
  },
  "typeVersion": 1
}

================ Node #2702 ================
{
  "id": "5bf9b0e8-b84e-44a2-aad2-45dde3e4ab1b",
  "name": "Screenshot HTML",
  "type": "n8n-nodes-base.httpRequest",
  "position": [
    2520,
    480
  ],
  "parameters": {
    "url": "https://hcti.io/v1/image",
    "method": "POST",
    "options": {},
    "sendBody": true,
    "sendQuery": true,
    "authentication": "genericCredentialType",
    "bodyParameters": {
      "parameters": [
        {
          "name": "html",
          "value": "={{ $json.htmlBody }}"
        }
      ]
    },
    "genericAuthType": "httpBasicAuth",
    "queryParameters": {
      "parameters": [
        {}
      ]
    }
  },
  "credentials": {
    "httpBasicAuth": {
      "id": "8tm8mUWmPvtmPFPk",
      "name": "hcti.io"
    }
  },
  "typeVersion": 4.2
}

================ Node #2703 ================
{
  "id": "fc770d1d-6c18-4d14-8344-1dc042464df6",
  "name": "Retrieve Screenshot",
  "type": "n8n-nodes-base.httpRequest",
  "position": [
    2700,
    480
  ],
  "parameters": {
    "url": "={{ $json.url }}",
    "options": {},
    "authentication": "genericCredentialType",
    "genericAuthType": "httpBasicAuth"
  },
  "credentials": {
    "httpBasicAuth": {
      "id": "8tm8mUWmPvtmPFPk",
      "name": "hcti.io"
    }
  },
  "typeVersion": 4.2
}

================ Node #2704 ================
{
  "id": "2f3e5cc0-24e8-450a-898b-71e2d6f7bb58",
  "name": "Set Outlook Variables",
  "type": "n8n-nodes-base.set",
  "position": [
    2020,
    720
  ],
  "parameters": {
    "options": {},
    "assignments": {
      "assignments": [
        {
          "id": "38bd3db2-1a8d-4c40-a2dd-336e0cc84224",
          "name": "htmlBody",
          "type": "string",
          "value": "={{ $('Microsoft Outlook Trigger').item.json.body.content }}"
        },
        {
          "id": "13bdd95b-ef02-486e-b38b-d14bd05a4a8a",
          "name": "headers",
          "type": "string",
          "value": "={{ $json}}"
        },
        {
          "id": "20566ad4-7eb7-42b1-8a0d-f8b759610f10",
          "name": "subject",
          "type": "string",
          "value": "={{ $('Microsoft Outlook Trigger').item.json.subject }}"
        },
        {
          "id": "7171998f-a5a2-4e23-946a-9c1ad75710e7",
          "name": "recipient",
          "type": "string",
          "value": "={{ $('Microsoft Outlook Trigger').item.json.toRecipients[0].emailAddress.address }}"
        },
        {
          "id": "cc262634-2470-4524-8319-abe2518a6335",
          "name": "textBody",
          "type": "string",
          "value": "={{ $('Retrieve Headers of Email').item.json.body.content }}"
        }
      ]
    }
  },
  "typeVersion": 3.4
}

================ Node #2705 ================
{
  "id": "374e5b16-a666-4706-9fd2-762b2927012d",
  "name": "Set Gmail Variables",
  "type": "n8n-nodes-base.set",
  "position": [
    2040,
    160
  ],
  "parameters": {
    "options": {},
    "assignments": {
      "assignments": [
        {
          "id": "38bd3db2-1a8d-4c40-a2dd-336e0cc84224",
          "name": "htmlBody",
          "type": "string",
          "value": "={{ $json.html }}"
        },
        {
          "id": "18fbcf78-6d3c-4036-b3a2-fb5adf22176a",
          "name": "headers",
          "type": "string",
          "value": "={{ $json.headers }}"
        },
        {
          "id": "1d690098-be2a-4604-baf8-62f314930929",
          "name": "subject",
          "type": "string",
          "value": "={{ $json.subject }}"
        },
        {
          "id": "8009f00a-547f-4eb1-b52d-2e7305248885",
          "name": "recipient",
          "type": "string",
          "value": "={{ $json.to.text }}"
        },
        {
          "id": "1932e97d-b03b-4964-b8bc-8262aaaa1f7a",
          "name": "textBody",
          "type": "string",
          "value": "={{ $json.text }}"
        }
      ]
    }
  },
  "typeVersion": 3.4
}

================ Node #2706 ================
{
  "id": "3166738e-d0a3-475b-8b19-51afd519ee3a",
  "name": "Retrieve Headers of Email",
  "type": "n8n-nodes-base.httpRequest",
  "position": [
    1680,
    720
  ],
  "parameters": {
    "url": "=https://graph.microsoft.com/v1.0/me/messages/{{ $json.id }}?$select=internetMessageHeaders,body",
    "options": {},
    "sendHeaders": true,
    "authentication": "predefinedCredentialType",
    "headerParameters": {
      "parameters": [
        {
          "name": "Accept",
          "value": "application/json"
        },
        {
          "name": "Prefer",
          "value": "outlook.body-content-type=\"text\""
        }
      ]
    },
    "nodeCredentialType": "microsoftOutlookOAuth2Api"
  },
  "credentials": {
    "microsoftOutlookOAuth2Api": {
      "id": "vTCK0oVQ0WjFrI5H",
      "name": " Outlook Credential"
    }
  },
  "typeVersion": 4.2
}

================ Node #2707 ================
{
  "id": "25ae222c-088f-4565-98d6-803c8c1b0826",
  "name": "Format Headers",
  "type": "n8n-nodes-base.code",
  "position": [
    1860,
    720
  ],
  "parameters": {
    "jsCode": "const input = $('Retrieve Headers of Email').item.json.internetMessageHeaders;\n\nconst result = input.reduce((acc, { name, value }) => {\n if (!acc[name]) acc[name] = [];\n acc[name].push(value);\n return acc;\n}, {});\n\nreturn result;"
  },
  "typeVersion": 2
}

================ Node #2708 ================
{
  "id": "8f14f267-1074-43ea-968d-26a6ab36fd7b",
  "name": "Set Email Variables",
  "type": "n8n-nodes-base.set",
  "position": [
    2360,
    480
  ],
  "parameters": {
    "options": {},
    "includeOtherFields": true
  },
  "typeVersion": 3.4
}

================ Node #2709 ================
{
  "id": "45d156aa-91f4-483c-91d4-c9de4a4f595d",
  "name": "ChatGPT Analysis",
  "type": "@n8n/n8n-nodes-langchain.openAi",
  "position": [
    3100,
    480
  ],
  "parameters": {
    "text": "=Describe this image. Determine if the email could be a phishing email. The message headers are as follows:\n{{ $('Set Email Variables').item.json.headers }}\n\nFormat the response for Jira who uses a wiki-style renderer. Do not include ``` around your response.",
    "modelId": {
      "__rl": true,
      "mode": "list",
      "value": "chatgpt-4o-latest",
      "cachedResultName": "CHATGPT-4O-LATEST"
    },
    "options": {
      "maxTokens": 1500
    },
    "resource": "image",
    "inputType": "base64",
    "operation": "analyze"
  },
  "credentials": {
    "openAiApi": {
      "id": "76",
      "name": "OpenAi account"
    }
  },
  "typeVersion": 1.6
}

================ Node #2710 ================
{
  "id": "62ca591b-6627-496c-96a7-95cb0081480d",
  "name": "Create Jira Ticket",
  "type": "n8n-nodes-base.jira",
  "position": [
    3500,
    480
  ],
  "parameters": {
    "project": {
      "__rl": true,
      "mode": "list",
      "value": "10001",
      "cachedResultName": "Support"
    },
    "summary": "=Phishing Email Reported: \"{{ $('Set Email Variables').item.json.subject }}\"",
    "issueType": {
      "__rl": true,
      "mode": "list",
      "value": "10008",
      "cachedResultName": "Task"
    },
    "additionalFields": {
      "description": "=A phishing email was reported by {{ $('Set Email Variables').item.json.recipient }} with the subject line \"{{ $('Set Email Variables').item.json.subject }}\" and body:\n{{ $('Set Email Variables').item.json.textBody }}\n\\\\\n\\\\\n\\\\\nh2. Here is ChatGPT's analysis of the email:\n{{ $json.content }}"
    }
  },
  "credentials": {
    "jiraSoftwareCloudApi": {
      "id": "BZmmGUrNIsgM9fDj",
      "name": "New Jira Cloud"
    }
  },
  "typeVersion": 1
}

================ Node #2711 ================
{
  "id": "071380c8-8070-4f8f-86c6-87c4ee3bc261",
  "name": "Rename Screenshot",
  "type": "n8n-nodes-base.code",
  "position": [
    3680,
    480
  ],
  "parameters": {
    "mode": "runOnceForEachItem",
    "jsCode": "$('Retrieve Screenshot').item.binary.data.fileName = 'emailScreenshot.png'\n\nreturn $('Retrieve Screenshot').item;"
  },
  "typeVersion": 2
}

================ Node #2712 ================
{
  "id": "05c57490-c1ee-48f0-9e38-244c9a995e22",
  "name": "Upload Screenshot of Email to Jira",
  "type": "n8n-nodes-base.jira",
  "position": [
    3860,
    480
  ],
  "parameters": {
    "issueKey": "={{ $('Create Jira Ticket').item.json.key }}",
    "resource": "issueAttachment"
  },
  "credentials": {
    "jiraSoftwareCloudApi": {
      "id": "BZmmGUrNIsgM9fDj",
      "name": "New Jira Cloud"
    }
  },
  "typeVersion": 1
}

================ Node #2713 ================
{
  "id": "be02770d-a943-41f5-98a9-5c433a6a3dbf",
  "name": "Sticky Note",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    1420,
    -107.36679523834897
  ],
  "parameters": {
    "color": 7,
    "width": 792.3026315789474,
    "height": 426.314163659402,
    "content": "![Gmail](https://uploads.n8n.io/templates/gmail.png)\n## Gmail Integration and Data Extraction\n\nThis section of the workflow connects to a Gmail account using the **Gmail Trigger** node, capturing incoming emails in real-time, with checks performed every minute. Once an email is detected, its key components\u2014such as the subject, recipient, body, and headers\u2014are extracted and assigned to variables using the **Set Gmail Variables** node. These variables are structured for subsequent analysis and processing in later steps."
  },
  "typeVersion": 1
}

================ Node #2714 ================
{
  "id": "c1d2f691-669a-46de-9ef8-59ce4e6980c5",
  "name": "Sticky Note1",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    1420,
    380.6918768014301
  ],
  "parameters": {
    "color": 7,
    "width": 792.3026315789474,
    "height": 532.3344389880435,
    "content": "![Gmail](https://uploads.n8n.io/templates/outlook.png)\n## Microsoft Outlook Integration and Email Header Processing\n\nThis section connects to a Microsoft Outlook account to monitor incoming emails using the **Microsoft Outlook Trigger** node, which checks for new messages every minute. Emails are then processed to retrieve detailed headers and body content via the **Retrieve Headers of Email** node. The headers are structured into a user-friendly format using the **Format Headers** code node, ensuring clarity for further analysis. Key details, including the email's subject, recipient, and body content, are assigned to variables with the **Set Outlook Variables** node for streamlined integration into subsequent workflow steps."
  },
  "typeVersion": 1
}

================ Node #2715 ================
{
  "id": "c189e2e0-9f51-4bc0-a483-8b7f0528be70",
  "name": "Sticky Note2",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    2287.3684210526317,
    46.18421052631584
  ],
  "parameters": {
    "color": 7,
    "width": 580.4605263157906,
    "height": 615.460526315789,
    "content": "![hctiapi](https://uploads.n8n.io/templates/hctiapi.png)\n## HTML Screenshot Generation and Email Visualization\n\nThis section processes an email\u2019s HTML content to create a visual representation, useful for documentation or phishing detection workflows. The **Set Email Variables** node organizes the email's HTML body into a format ready for processing. The **Screenshot HTML** node sends this HTML content to the **hcti.io** API, which generates a screenshot of the email's layout. The **Retrieve Screenshot** node then fetches the image URL for further use in the workflow. This setup ensures that the email's appearance is preserved in a visually accessible format, simplifying review and reporting. Keep in mind however that this exposes the email content to a third party. If you self host n8n, you can deploy a cli tool to rasterize locally instead."
  },
  "typeVersion": 1
}

================ Node #2716 ================
{
  "id": "9076f9e9-f4fb-409a-9580-1ae459094c31",
  "name": "Sticky Note3",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    2880,
    123.72476075009968
  ],
  "parameters": {
    "color": 7,
    "width": 507.82894736842223,
    "height": 537.9199760920052,
    "content": "![hctiapi](https://uploads.n8n.io/templates/openai.png)\n## AI-Powered Email Analysis with ChatGPT\n\nThis section leverages AI to analyze email content and headers for phishing indicators. The **ChatGPT Analysis** node utilizes the ChatGPT-4 model to review the email screenshot and associated metadata, including message headers. It generates a detailed report indicating whether the email might be a phishing attempt. The output is formatted specifically for Jira\u2019s wiki-style renderer, making it ready for seamless integration into ticketing workflows. This ensures thorough and automated email threat assessments."
  },
  "typeVersion": 1
}

================ Node #2717 ================
{
  "id": "ca2488af-e787-4675-802a-8b4f2d845376",
  "name": "Sticky Note4",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    3400,
    122.88662032580646
  ],
  "parameters": {
    "color": 7,
    "width": 692.434210526317,
    "height": 529.5475902005091,
    "content": "![hctiapi](https://uploads.n8n.io/templates/jira.png)\n## Automated Jira Ticket Creation for Phishing Reports\n\nThis section streamlines the process of reporting phishing emails by automatically creating detailed Jira tickets. The **Create Jira Ticket** node compiles email information, including the subject, recipient, body text, and ChatGPT's phishing analysis, into a structured ticket. The **Rename Screenshot** node ensures that the email screenshot file is appropriately labeled for attachment. Finally, the **Upload Screenshot of Email to Jira** node attaches the email\u2019s visual representation to the ticket, providing additional context for the security team. This integration ensures that phishing reports are logged with all necessary details, enabling efficient tracking and resolution."
  },
  "typeVersion": 1
}

================ Node #2718 ================
{
  "id": "8e7dc5cb-6822-4ef6-9e5a-2b350a1526bf",
  "name": "Sticky Note4",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    -640,
    -620
  ],
  "parameters": {
    "color": 5,
    "width": 1172,
    "height": 970,
    "content": "\n## Step 1. Set Up a Free Brave Web Search Query API Key\n\nTo attain the free web search API tier from Brave, follow these steps:\n\n1. Visit api.search.brave.com\n2. Create an account\n3. Subscribe to the free plan (no charge)\n4. Navigate to the API Keys section\n5. Generate an API key. For the subscription type, choose \"Free\".\n6. Go to the \"Query\" Nodes and change the \"X-Subscription-Token\" value to your API Key.\n"
  },
  "typeVersion": 1
}

================ Node #2719 ================
{
  "id": "5bb3e68f-7693-4d4b-b794-843f2c3535e0",
  "name": "Sticky Note",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    -1580,
    -420
  ],
  "parameters": {
    "color": 4,
    "width": 680,
    "height": 360,
    "content": "## If you require to change this Node to Webhook Or any Other Item:\n\n- In case you want to change the input type from Webhook to any other item, Make sure to go to the Query 1 and Query 1 Ranker and replace the Webhook Input to your Node's input."
  },
  "typeVersion": 1
}

================ Node #2720 ================
{
  "id": "f2fc02f9-a78a-4e87-be85-0032492a9f3f",
  "name": "Date & Time",
  "type": "n8n-nodes-base.dateTime",
  "position": [
    -820,
    -240
  ],
  "parameters": {
    "options": {}
  },
  "typeVersion": 2
}

================ Node #2721 ================
{
  "id": "6f18ebbd-83db-4900-bc2e-0a9f23d6e8c8",
  "name": "Webhook",
  "type": "n8n-nodes-base.webhook",
  "position": [
    -1340,
    -240
  ],
  "webhookId": "962f1468-c80f-4c0c-8555-a0acf648ede4",
  "parameters": {
    "path": "962f1468-c80f-4c0c-8555-a0acf648ede4",
    "options": {},
    "responseMode": "responseNode"
  },
  "typeVersion": 2
}

================ Node #2722 ================
{
  "id": "ba5ea83e-1b47-475b-863f-269ae293729a",
  "name": "Auto-fixing Output Parser6",
  "type": "@n8n/n8n-nodes-langchain.outputParserAutofixing",
  "position": [
    180,
    -140
  ],
  "parameters": {
    "options": {}
  },
  "typeVersion": 1
}

================ Node #2723 ================
{
  "id": "ca426b6d-5412-4c5b-a55c-009a47c59a81",
  "name": "Auto-fixing Output Parser",
  "type": "@n8n/n8n-nodes-langchain.outputParserAutofixing",
  "position": [
    -580,
    -140
  ],
  "parameters": {
    "options": {}
  },
  "typeVersion": 1
}

================ Node #2724 ================
{
  "id": "501d5390-5317-4973-a3e9-b0f502399c2b",
  "name": "Structured Output Parser1",
  "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
  "position": [
    -460,
    -60
  ],
  "parameters": {
    "jsonSchemaExample": "{\n \"reasoning_summary\": \"Detailed explanation of each analytical chain\u2019s purpose and insights, including key terms and considerations for query formulation.\",\n \"final_search_query\": \"The single, best-fit search query derived from the meta-reasoning and multi-chain analysis, optimized to answer the research question.\"\n}"
  },
  "typeVersion": 1.2
}

================ Node #2725 ================
{
  "id": "a27e75c7-0307-4d71-9266-5a56b297a6e3",
  "name": "Query-1 Combined",
  "type": "n8n-nodes-base.code",
  "position": [
    -80,
    -240
  ],
  "parameters": {
    "jsCode": "// Initialize an empty string to store all title, url, and description pairs\nlet aggregatedOutputText = \"\";\n\n// Loop through all items passed to this Function node\nfor (let item of items) {\n // Access the JSON data from \"Query 1\" node for the current item\n const queryData = item.json;\n\n // Ensure there is a \"web.results\" array to process\n if (queryData.web?.results && Array.isArray(queryData.web.results)) {\n // Loop through all results in the \"web.results\" array\n for (let result of queryData.web.results) {\n // Extract the title, url, and description for each result\n const title = result.title || \"No Title\";\n const url = result.url || \"No URL\";\n const description = result.description || \"No Description\";\n\n // Append the values to the aggregated string\n aggregatedOutputText += `Title: ${title}\\nURL: ${url}\\nDescription: ${description}\\n\\n`;\n }\n } else {\n // If no results array, handle gracefully\n aggregatedOutputText += \"No results found for this item.\\n\\n\";\n }\n}\n\n// Trim the final string to remove any trailing newline and whitespace\naggregatedOutputText = aggregatedOutputText.trim();\n\n// Return a single item containing the aggregated output as a string\nreturn [\n {\n json: {\n aggregated_text: aggregatedOutputText\n }\n }\n];\n"
  },
  "typeVersion": 2
}

================ Node #2726 ================
{
  "id": "acbdbe94-b5a7-4ec9-9fc8-c3ab147f42fa",
  "name": "Respond to Webhook",
  "type": "n8n-nodes-base.respondToWebhook",
  "position": [
    640,
    -240
  ],
  "parameters": {
    "options": {},
    "respondWith": "text",
    "responseBody": "={\n \"Highest_RANKEDURL_1\": {\n \"title\": \"{{ $item('0').$node['Semantic Search - Result Re-Ranker'].json['output']['Highest_RANKEDURL_1']['title'] }}\",\n \"link\": \"{{ $item('0').$node['Semantic Search - Result Re-Ranker'].json['output']['Highest_RANKEDURL_1']['link'] }}\",\n \"description\": \"{{ $item('0').$node['Semantic Search - Result Re-Ranker'].json['output']['Highest_RANKEDURL_1']['description'] }}\"\n },\n \"Highest_RANKEDURL_2\": {\n \"title\": \"{{ $item('0').$node['Semantic Search - Result Re-Ranker'].json['output']['Highest_RANKEDURL_2']['title'] }}\",\n \"link\": \"{{ $item('0').$node['Semantic Search - Result Re-Ranker'].json['output']['Highest_RANKEDURL_2']['link'] }}\",\n \"description\": \"{{ $item('0').$node['Semantic Search - Result Re-Ranker'].json['output']['Highest_RANKEDURL_2']['description'] }}\"\n },\n \"Highest_RANKEDURL_3\": {\n \"title\": \"{{ $item('0').$node['Semantic Search - Result Re-Ranker'].json['output']['Highest_RANKEDURL_3']['title'] }}\",\n \"link\": \"{{ $item('0').$node['Semantic Search - Result Re-Ranker'].json['output']['Highest_RANKEDURL_3']['link'] }}\",\n \"description\": \"{{ $item('0').$node['Semantic Search - Result Re-Ranker'].json['output']['Highest_RANKEDURL_3']['description'] }}\"\n },\n \"Highest_RANKEDURL_4\": {\n \"title\": \"{{ $item('0').$node['Semantic Search - Result Re-Ranker'].json['output']['Highest_RANKEDURL_4']['title'] }}\",\n \"link\": \"{{ $item('0').$node['Semantic Search - Result Re-Ranker'].json['output']['Highest_RANKEDURL_4']['link'] }}\",\n \"description\": \"{{ $item('0').$node['Semantic Search - Result Re-Ranker'].json['output']['Highest_RANKEDURL_4']['description'] }}\"\n },\n \"Highest_RANKEDURL_5\": {\n \"title\": \"{{ $item('0').$node['Semantic Search - Result Re-Ranker'].json['output']['Highest_RANKEDURL_5']['title'] }}\",\n \"link\": \"{{ $item('0').$node['Semantic Search - Result Re-Ranker'].json['output']['Highest_RANKEDURL_5']['link'] }}\",\n \"description\": \"{{ $item('0').$node['Semantic Search - Result Re-Ranker'].json['output']['Highest_RANKEDURL_5']['description'] }}\"\n },\n \"Highest_RANKEDURL_6\": {\n \"title\": \"{{ $item('0').$node['Semantic Search - Result Re-Ranker'].json['output']['Highest_RANKEDURL_6']['title'] }}\",\n \"link\": \"{{ $item('0').$node['Semantic Search - Result Re-Ranker'].json['output']['Highest_RANKEDURL_6']['link'] }}\",\n \"description\": \"{{ $item('0').$node['Semantic Search - Result Re-Ranker'].json['output']['Highest_RANKEDURL_6']['description'] }}\"\n },\n \"Highest_RANKEDURL_7\": {\n \"title\": \"{{ $item('0').$node['Semantic Search - Result Re-Ranker'].json['output']['Highest_RANKEDURL_7']['title'] }}\",\n \"link\": \"{{ $item('0').$node['Semantic Search - Result Re-Ranker'].json['output']['Highest_RANKEDURL_7']['link'] }}\",\n \"description\": \"{{ $item('0').$node['Semantic Search - Result Re-Ranker'].json['output']['Highest_RANKEDURL_7']['description'] }}\"\n },\n \"Highest_RANKEDURL_8\": {\n \"title\": \"{{ $item('0').$node['Semantic Search - Result Re-Ranker'].json['output']['Highest_RANKEDURL_8']['title'] }}\",\n \"link\": \"{{ $item('0').$node['Semantic Search - Result Re-Ranker'].json['output']['Highest_RANKEDURL_8']['link'] }}\",\n \"description\": \"{{ $item('0').$node['Semantic Search - Result Re-Ranker'].json['output']['Highest_RANKEDURL_8']['description'] }}\"\n },\n \"Highest_RANKEDURL_9\": {\n \"title\": \"{{ $item('0').$node['Semantic Search - Result Re-Ranker'].json['output']['Highest_RANKEDURL_9']['title'] }}\",\n \"link\": \"{{ $item('0').$node['Semantic Search - Result Re-Ranker'].json['output']['Highest_RANKEDURL_9']['link'] }}\",\n \"description\": \"{{ $item('0').$node['Semantic Search - Result Re-Ranker'].json['output']['Highest_RANKEDURL_9']['description'] }}\"\n },\n \"Highest_RANKEDURL_10\": {\n \"title\": \"{{ $item('0').$node['Semantic Search - Result Re-Ranker'].json['output']['Highest_RANKEDURL_10']['title'] }}\",\n \"link\": \"{{ $item('0').$node['Semantic Search - Result Re-Ranker'].json['output']['Highest_RANKEDURL_10']['link'] }}\",\n \"description\": \"{{ $item('0').$node['Semantic Search - Result Re-Ranker'].json['output']['Highest_RANKEDURL_10']['description'] }}\"\n },\n \"Information_extracted\": \"{{ $item('0').$node['Semantic Search - Result Re-Ranker'].json['output']['Information_extracted'] }}\"\n}\n"
  },
  "typeVersion": 1.1
}

================ Node #2727 ================
{
  "id": "b8b6ae73-586a-406f-9641-57e2625f800c",
  "name": "Semantic Search - Result Re-Ranker",
  "type": "@n8n/n8n-nodes-langchain.chainLlm",
  "onError": "continueRegularOutput",
  "position": [
    100,
    -240
  ],
  "parameters": {
    "text": "=\n**Objective:**\n\nFor the user's query, web search results are provided. Your tasks are:\n\n1. **Rank the links** based on how well they match the user's query.\n2. **Extract relevant information** from the descriptions provided. If no relevant information is found, return \"N/A\".\n\n---\n\n**Task:**\n\n**Step 1: Understand the User's Intent**\n\n- Determine what the user is truly and technically looking for.\n- The user's request query is: \"{{ $('Webhook').item.json.query['Research Question'] }}\"\n- The serach results below, however their performance seem, have been based on this query \"{{ $item(\"0\").$node[\"Semantic Search -Query Maker\"].json[\"output\"][\"final_search_query\"] }}\". If the result are not satisfactory or missing due to bad query making, you should note that as well for the neww query making.\n- To nesure being time aware , realize todays date is: \"{{ $item(\"0\").$node[\"Date & Time\"].json[\"currentDate\"] }}\"\n\n- Follow a three-step chain of thought to comprehend the user's needs. Think out loud.\n\n---\n\n**Step 2: Rank the Links**\n\n- From the URLs and description snippets provided, **rank the top 10 websites** that are most likely to contain the required information.\n- Use the titles, descriptions, and sources to inform your ranking.\n\n**Links, Titles, and Descriptions:**\n\n{{ $json.aggregated_text }}\n\n---\n\nThis list completes the structure up to 20 results as you requested. Let me know if there\u2019s anything more you need!\n\n---\n\n**Step 3: Analyze and Create a Follow-up Query**\n\n- Recognize that for the user's request:\n\n `\"{{ $('Webhook').item.json.query['Research Question'] }}\"`\n\n The results provided are based on the assistant's generated search query:\n\n `\"{{ $item(\"0\").$node[\"Semantic Search -Query Maker\"].json[\"output\"][\"final_search_query\"] }}\"`\n\n- Analyze and revise any issues or new insights through multi-step thinking to create a follow-up query.\n\n**Indications and Priorities:**\n\n1. **No Results Received:** If no search items are shared, the search query may have been ineffective (e.g., too specific, incorrect parameters).\n2. **Insufficient or Unpromising Results:** If fewer than 20 but more than 5 results are provided, and none seem promising, the search query may need refinement.\n3. **Successful Results with Potential Follow-up:** If none of the above issues occurred and the search results provide answers or suggest a follow-up, create a new query. This could be a new topic, a deep dive, or a parallel factor that offers additional benefits.\n\n- Provide your chain of thought that connects the user's request to the actual information.\n\n- Deliver precise, detailed, and value-oriented information relevant to the user's query.\n\n**Step 4: Query making notes and examples**: \n\nThe queries must not be long tails , as they result in 0 websearch reutrns. We give you some examples of good web search queries:\nExamples:\n\nUser Question: \"What is the current state of the U.S. economy in 2024?\"\nEffective Search Query: \"U.S. Economy Analysis Report 2024\"\n\nUser Question: \"What are the recent advancements in artificial intelligence?\"\nEffective Search Query: \"2024 Artificial Intelligence Developments\"\n\nUser Question: \"How is climate change affecting agriculture globally?\"\nEffective Search Query: \"Global Impact of Climate Change on Agriculture 2024\"\n\nUser Question: \"What are the latest trends in cybersecurity threats?\"\nEffective Search Query: \"Cybersecurity Threats and Trends 2024\"\n\nUser Question: \"What is the outlook for renewable energy investments?\"\nEffective Search Query: \"Renewable Energy Investment Outlook 2024\"\n\n**Step 5: Query making*: \nor query making remember as we said:\n - **Today's Date:** \"{{ $item(\"0\").$node[\"Date & Time\"].json[\"currentDate\"] }}\"\n **Search Inquiry:** \n - **Search Topic to create the query upon it:**{{ $item(\"0\").$node[\"Webhook\"].json[\"query\"][\"Research Question\"] }}\"\"\n\n\n---\n\n**Step 6: Output Format**\n\nEnsure the response is in the following JSON format:\n\n{\n \"chain_of_thought\": \"Insert your step-by-step reasoning here.\",\n \"Highest_RANKEDURL_1\": {\n \"title\": \"Insert the First Ranked URL's Title here.\",\n \"link\": \"Insert the First Ranked URL here.\",\n \"description\": \"Insert the First Ranked URL's Description here.\"\n },\n \"Highest_RANKEDURL_2\": {\n \"title\": \"Insert the Second Ranked URL's Title here.\",\n \"link\": \"Insert the Second Ranked URL here.\",\n \"description\": \"Insert the Second Ranked URL's Description here.\"\n },\n \"Highest_RANKEDURL_3\": {\n \"title\": \"Insert the Third Ranked URL's Title here.\",\n \"link\": \"Insert the Third Ranked URL here.\",\n \"description\": \"Insert the Third Ranked URL's Description here.\"\n },\n \"Highest_RANKEDURL_4\": {\n \"title\": \"Insert the Fourth Ranked URL's Title here.\",\n \"link\": \"Insert the Fourth Ranked URL here.\",\n \"description\": \"Insert the Fourth Ranked URL's Description here.\"\n },\n \"Highest_RANKEDURL_5\": {\n \"title\": \"Insert the Fifth Ranked URL's Title here.\",\n \"link\": \"Insert the Fifth Ranked URL here.\",\n \"description\": \"Insert the Fifth Ranked URL's Description here.\"\n },\n \"Highest_RANKEDURL_6\": {\n \"title\": \"Insert the Sixth Ranked URL's Title here.\",\n \"link\": \"Insert the Sixth Ranked URL here.\",\n \"description\": \"Insert the Sixth Ranked URL's Description here.\"\n },\n \"Highest_RANKEDURL_7\": {\n \"title\": \"Insert the Seventh Ranked URL's Title here.\",\n \"link\": \"Insert the Seventh Ranked URL here.\",\n \"description\": \"Insert the Seventh Ranked URL's Description here.\"\n },\n \"Highest_RANKEDURL_8\": {\n \"title\": \"Insert the Eighth Ranked URL's Title here.\",\n \"link\": \"Insert the Eighth Ranked URL here.\",\n \"description\": \"Insert the Eighth Ranked URL's Description here.\"\n },\n \"Highest_RANKEDURL_9\": {\n \"title\": \"Insert the Ninth Ranked URL's Title here.\",\n \"link\": \"Insert the Ninth Ranked URL here.\",\n \"description\": \"Insert the Ninth Ranked URL's Description here.\"\n },\n \"Highest_RANKEDURL_10\": {\n \"title\": \"Insert the Tenth Ranked URL's Title here.\",\n \"link\": \"Insert the Tenth Ranked URL here.\",\n \"description\": \"Insert the Tenth Ranked URL's Description here.\"\n },\n \"Information_extracted\": \"Insert all extracted information relevant to the user's query or 'N/A' if none.\"\n}\n",
    "messages": {
      "messageValues": [
        {
          "message": "=\nYou are an expert information retrieval and critical evaluation assistant designed to process, rank, and extract high-relevance content from web search results for complex user queries. You must provide value-oriented insights while refining searches based on relevance and context sensitivity. \n\n**Your Process and Priorities:**\n\n#### 1. **Determine the User's Technical Intent**\n - Interpret the user's core question provided as `{{ $item(\"0\").$node[\"Webhook\"].json[\"query\"][\"Research Question\"] }}`, discerning underlying objectives and specialized needs.\n - Recognize that the search results may have been generated from a **secondary query**: `{{ $item(\"0\").$node[\"Semantic Search -Query Maker\"].json[\"output\"][\"final_search_query\"] }}`. \n - Judge the adequacy of this generated query. If it does not meet the user\u2019s objectives, highlight the need for query refinement and prepare to adapt the approach.\n - Stay mindful of the date context, using `{{ $item(\"0\").$node[\"Date & Time\"].json[\"currentDate\"] }}` to assess the freshness of content or time-sensitive relevance.\n\n#### 2. **Rank Results Based on Analytical Relevance**\n - From the search results provided, **rank the top 3 URLs** that most closely align with the user\u2019s intent and technical needs.\n - Use multi-dimensional analysis to assess how each link\u2019s title, description, and source match the user\u2019s objective.\n - Prioritize results based on credibility, relevance, and their potential to add depth to the user\u2019s inquiry.\n - Your goal is to select the highest-value links, disregarding results that offer superficial, off-topic, or outdated information.\n\n#### 3. **Extract Key Information**\n - For each of the top 3 ranked results, extract insights and details from the description snippets that directly address the user\u2019s query.\n - If no pertinent information is available in a description, record `\"N/A\"` to indicate its lack of relevance.\n\n#### 4. **Evaluate for Potential Query Improvement**\n - Evaluate the relevance and coverage of search results:\n - If fewer than 5 relevant results are present, consider that the initial query may be too narrow, specific, or otherwise misaligned.\n - Generate a **refined query** that is adjusted to better match the user\u2019s likely needs and produce higher-quality results.\n - Use advanced language modifications, new keyword suggestions, or rephrasing to formulate a search query that enhances alignment with the user\u2019s goals.\n"
        }
      ]
    },
    "promptType": "define",
    "hasOutputParser": true
  },
  "retryOnFail": true,
  "typeVersion": 1.4
}

================ Node #2728 ================
{
  "id": "a1ca671d-0b0c-4717-9def-93fdb965de8d",
  "name": "Query",
  "type": "n8n-nodes-base.httpRequest",
  "position": [
    -240,
    -240
  ],
  "parameters": {
    "url": "https://api.search.brave.com/res/v1/web/search",
    "options": {},
    "sendQuery": true,
    "sendHeaders": true,
    "queryParameters": {
      "parameters": [
        {
          "name": "q",
          "value": "={{ $json.output.final_search_query }}"
        }
      ]
    },
    "headerParameters": {
      "parameters": [
        {
          "name": "Accept",
          "value": "application/json"
        },
        {
          "name": "Accept-Encoding",
          "value": "gzip"
        },
        {
          "name": "X-Subscription-Token",
          "value": "<Insert Your API Key Here>"
        }
      ]
    }
  },
  "typeVersion": 4.2
}

================ Node #2729 ================
{
  "id": "d3cc4e7c-3ead-4d38-9b51-a11cd9d7faeb",
  "name": "Webhook Call",
  "type": "n8n-nodes-base.httpRequest",
  "position": [
    -180,
    1040
  ],
  "parameters": {
    "url": "https://primary-production-8aa4.up.railway.app/webhook-test/962f1468-c80f-4c0c-8555-a0acf648ede4",
    "options": {},
    "sendQuery": true,
    "queryParameters": {
      "parameters": [
        {
          "name": "Research Question",
          "value": "what is the latest news in global world in politics and economy?"
        }
      ]
    }
  },
  "typeVersion": 4.2
}

================ Node #2730 ================
{
  "id": "6931404b-94d6-4b9d-9f0a-124012212eb5",
  "name": "Sticky Note6",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    -640,
    420
  ],
  "parameters": {
    "color": 3,
    "width": 1180,
    "height": 840,
    "content": "## Step 2. Setup the Webhook Call Node\n\n**Instructions for Setting Up the Webhook Call and Using It in Your Workflow**\n\nThis node is designed to send a **web search query** to the workflow (partly built in this chart) and return the results. Follow these steps to correctly configure and use it:\n\n1. **Locate the \"Webhook\" Node in the Workflow**:\n - Navigate to the workflow above, the first item, the \"Webhook\" node.\n - In the \"Webhook\" node, change the **Webhook URL option** from \"Test URL\" to \"Production URL.\"\n - Copy the generated **Production URL**.\n\n2. **Paste the Webhook URL in the HTTP Node**:\n - In your target workflow, locate the **HTTP Request** node.\n - Paste the copied **Production URL** into the URL field of the HTTP Request node. This connects the two workflows.\n\n3. **Send the Research Request**:\n - When sending the request to this workflow, make sure to include your web search query in the **\"Research Question\" parameter** of the HTTP Request node.\n\n4. **Move the Webhook Call Node**:\n - Move this **Webhook Call Node** into the workflow where you need the research results. Ensure that it\u2019s correctly connected and configured to send the data to the main workflow.\n"
  },
  "typeVersion": 1
}

================ Node #2731 ================
{
  "id": "01d73f91-1dd6-4b80-951c-9f944ea9d992",
  "name": "Semantic Search -Query Maker",
  "type": "@n8n/n8n-nodes-langchain.chainLlm",
  "position": [
    -560,
    -240
  ],
  "parameters": {
    "text": "=1. **Task:** `\"Your task is to develop a web search query that most effectively answers the research question given. Use meta-reasoning and multi-chain analysis to ensure a comprehensive approach.\"`\n\n2. **Structured Guidance for Chains of Thought:** \n a. **Chain 1:** Break down the research question, identifying keywords and relevant terms. \n b. **Chain 2:** Explore the context and potential sources, determining the types of results that would be most relevant. \n c. **Chain 3:** Refine the query for specificity and completeness, considering how to capture nuances of the question.\n\n3. **Final Query Generation:** Based on the insights from the three chains, generate a single, refined search query.\n\n\n4. Note, the queries must not be long tails , as they result in 0 websearch reutrns. We give you some examples of good web search queries:\nExamples:\n\nUser Question: \"What is the current state of the U.S. economy in 2024?\"\n\nEffective Search Query: \"U.S. Economy Analysis Report 2024\"\nUser Question: \"What are the recent advancements in artificial intelligence?\"\n\nEffective Search Query: \"2024 Artificial Intelligence Developments\"\nUser Question: \"How is climate change affecting agriculture globally?\"\n\nEffective Search Query: \"Global Impact of Climate Change on Agriculture 2024\"\nUser Question: \"What are the latest trends in cybersecurity threats?\"\n\nEffective Search Query: \"Cybersecurity Threats and Trends 2024\"\nUser Question: \"What is the outlook for renewable energy investments?\"\n\nEffective Search Query: \"Renewable Energy Investment Outlook 2024\"\n\n5. Data Input:\n - **Today's Date:** \"{{ $item(\"0\").$node[\"Date & Time\"].json[\"currentDate\"] }}\"\n **Search Inquiry:** \n - **Search Topic to create the query upon it:**{{ $item(\"0\").$node[\"Webhook\"].json[\"query\"][\"Research Question\"] }}\"\"\n\n6. Now develop the best fit web search query given the user request above under number 5\n---\n\n**Output Requirements:** \nThe Assistant\u2019s output should be in JSON format, structured as follows:\n\n{\n \"reasoning_summary\": \"Detailed explanation of each analytical chain\u2019s purpose and insights, including key terms and considerations for query formulation.\",\n \"final_search_query\": \"The single, best-fit search query derived from the meta-reasoning and multi-chain analysis, optimized to answer the research question.\"\n}\n```\n\n---\n",
    "messages": {
      "messageValues": [
        {
          "message": "You are an advanced data and research retrieval through smart search queires via Bing and Brave websearch APIs. "
        },
        {
          "type": "HumanMessagePromptTemplate",
          "message": "1. **Task:** `\"Your task is to develop a web search query that most effectively answers the research question given. Use meta-reasoning and multi-chain analysis to ensure a comprehensive approach.\"`\n\n2. **Structured Guidance for Chains of Thought:** \n a. **Chain 1:** Break down the research question, identifying keywords and relevant terms. \n b. **Chain 2:** Explore the context and potential sources, determining the types of results that would be most relevant. \n c. **Chain 3:** Refine the query for specificity and completeness, considering how to capture nuances of the question.\n\n3. **Final Query Generation:** Based on the insights from the three chains, generate a single, refined search query.\n\n4. Data Input:\n - **Today's Date:** \"2024-11-12T10:21:33.764-05:00\"\n2. **Search Inquiry:** \n - **Search Topic to create the query upon it:** \"What is the latest stock Market Analysis in mid-term?\"\n\n\n---\n\n**Output Requirements:** \nThe Assistant\u2019s output should be in JSON format, structured as follows:\n\n{\n \"reasoning_summary\": \"Detailed explanation of each analytical chain\u2019s purpose and insights, including key terms and considerations for query formulation.\",\n \"final_search_query\": \"The single, best-fit search query derived from the meta-reasoning and multi-chain analysis, optimized to answer the research question.\"\n}\n```\n\n---\n"
        },
        {
          "type": "AIMessagePromptTemplate",
          "message": "Assessing query functionality\n\nI\u2019m evaluating the viability of the assistant's proposed search query. The user questions if it would yield meaningful results on different search engines.\n\nClarifying the query\n\nOK, let me see. The task involves clarifying the user's needs, ensuring the response aligns with OpenAI's policies, and possibly re-evaluating and correcting any errors in the previous response.\n\nRefining search specifics\n\nI'm working through refining the search query to focus on specific terms like 'S&P 500', integrating dates such as 'November 2024', and emphasizing phrases for precision.\n\nSelf-reflecting on search queries\n\nToday, I\u2019m thinking about how to validate search queries for accuracy and realism, ensuring they are practical and likely to yield productive results.\n\nAcknowledging insights\n\nI\u2019m recognizing and correcting a search query to ensure it\u2019s optimal and effectively aligned with advanced user needs, leading to a more precise output.\n\nCrafting a search query\n\nI\u2019m crafting a search query to pinpoint the most pertinent recent mid-term stock market analyses. Starting with relevant terms and then exploring potential sources for context and relevance.\n\nPinpointing sources and specifics\n\nI'm gathering info from financial news, investment reports, and economic research institutions. I\u2019m refining search terms like \"mid-term stock market analysis\" and \"market forecast\" to keep results current and nuanced.\n\nCrafting the query\n\nI\u2019m finalizing the query by merging terms like 'latest' and 'stock market analysis' with 'mid-term', and considering synonyms such as 'market forecast' to refine the search for 2024.\n\nTweaking the search\n\nI adjusted the search terms to 'latest stock market mid-term outlook 2024,' removing excessive quotes for better clarity and relevance.\n\n\n{\n \"reasoning_summary\": \"Chain 1: Broke down the research question to identify key terms such as 'latest', 'stock market analysis', and 'mid-term'. Considered synonyms like 'mid-term outlook', 'market forecast', and included the current year '2024' for recency.\\n\\nChain 2: Explored the context where the user seeks recent analyses of the stock market with a mid-term perspective. Relevant sources would be financial news outlets, investment banks, and economic research firms. The most useful results would be up-to-date articles or reports offering mid-term forecasts.\\n\\nChain 3: Refined the query by removing unnecessary quotation marks and simplifying it to reflect how an advanced user might search. Included terms like 'latest', 'mid-term outlook', and '2024' to enhance specificity without limiting the search results unnecessarily.\",\n \"final_search_query\": \"latest stock market mid-term outlook 2024\"\n}"
        }
      ]
    },
    "promptType": "define",
    "hasOutputParser": true
  },
  "typeVersion": 1.4
}

================ Node #2732 ================
{
  "id": "696b4f97-ad29-406b-9157-44ad9d05c9cd",
  "name": "Anthropic Chat Model",
  "type": "@n8n/n8n-nodes-langchain.lmChatAnthropic",
  "position": [
    740,
    180
  ],
  "parameters": {
    "model": "claude-3-5-haiku-20241022",
    "options": {
      "topP": 0.8,
      "temperature": 0.4,
      "maxTokensToSample": 4096
    }
  },
  "credentials": {
    "anthropicApi": {
      "id": "mVKB2CryW6bMm9Qo",
      "name": "Anthropic account"
    }
  },
  "typeVersion": 1.2
}

================ Node #2733 ================
{
  "id": "82f25610-8b70-4aee-ad90-2616d3389f15",
  "name": "OpenAI Chat Model",
  "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
  "position": [
    900,
    180
  ],
  "parameters": {
    "options": {
      "topP": 0.7,
      "maxTokens": 4096,
      "maxRetries": 1,
      "temperature": 0.5
    }
  },
  "credentials": {
    "openAiApi": {
      "id": "wQQZLwJO9A5nFu8h",
      "name": "OpenAi account"
    }
  },
  "typeVersion": 1
}

================ Node #2734 ================
{
  "id": "f230bdf0-4a22-4abf-96cd-47f309f0c514",
  "name": "Structured Output Parser2",
  "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
  "position": [
    260,
    -60
  ],
  "parameters": {
    "jsonSchemaExample": "{\n \"chain_of_thought\": \"Insert your step-by-step reasoning here.\",\n \"Highest_RANKEDURL_1\": {\n \"title\": \"Insert the First Ranked URL's Title here.\",\n \"link\": \"Insert the First Ranked URL here.\",\n \"description\": \"Insert the First Ranked URL's Description here.\"\n },\n \"Highest_RANKEDURL_2\": {\n \"title\": \"Insert the Second Ranked URL's Title here.\",\n \"link\": \"Insert the Second Ranked URL here.\",\n \"description\": \"Insert the Second Ranked URL's Description here.\"\n },\n \"Highest_RANKEDURL_3\": {\n \"title\": \"Insert the Third Ranked URL's Title here.\",\n \"link\": \"Insert the Third Ranked URL here.\",\n \"description\": \"Insert the Third Ranked URL's Description here.\"\n },\n \"Highest_RANKEDURL_4\": {\n \"title\": \"Insert the Fourth Ranked URL's Title here.\",\n \"link\": \"Insert the Fourth Ranked URL here.\",\n \"description\": \"Insert the Fourth Ranked URL's Description here.\"\n },\n \"Highest_RANKEDURL_5\": {\n \"title\": \"Insert the Fifth Ranked URL's Title here.\",\n \"link\": \"Insert the Fifth Ranked URL here.\",\n \"description\": \"Insert the Fifth Ranked URL's Description here.\"\n },\n \"Highest_RANKEDURL_6\": {\n \"title\": \"Insert the Sixth Ranked URL's Title here.\",\n \"link\": \"Insert the Sixth Ranked URL here.\",\n \"description\": \"Insert the Sixth Ranked URL's Description here.\"\n },\n \"Highest_RANKEDURL_7\": {\n \"title\": \"Insert the Seventh Ranked URL's Title here.\",\n \"link\": \"Insert the Seventh Ranked URL here.\",\n \"description\": \"Insert the Seventh Ranked URL's Description here.\"\n },\n \"Highest_RANKEDURL_8\": {\n \"title\": \"Insert the Eighth Ranked URL's Title here.\",\n \"link\": \"Insert the Eighth Ranked URL here.\",\n \"description\": \"Insert the Eighth Ranked URL's Description here.\"\n },\n \"Highest_RANKEDURL_9\": {\n \"title\": \"Insert the Ninth Ranked URL's Title here.\",\n \"link\": \"Insert the Ninth Ranked URL here.\",\n \"description\": \"Insert the Ninth Ranked URL's Description here.\"\n },\n \"Highest_RANKEDURL_10\": {\n \"title\": \"Insert the Tenth Ranked URL's Title here.\",\n \"link\": \"Insert the Tenth Ranked URL here.\",\n \"description\": \"Insert the Tenth Ranked URL's Description here.\"\n },\n \"Information_extracted\": \"Insert all extracted information relevant to the user's query or 'N/A' if none.\"\n}\n"
  },
  "typeVersion": 1.2
}

================ Node #2735 ================
{
  "id": "3421ebe5-6a86-435e-b9c6-e3dcf6dd7833",
  "name": "Parser Model",
  "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
  "position": [
    -180,
    180
  ],
  "parameters": {
    "options": {
      "topP": 0.6,
      "temperature": 0.4,
      "maxOutputTokens": 4096
    },
    "modelName": "models/gemini-1.5-flash-002"
  },
  "credentials": {
    "googlePalmApi": {
      "id": "rTbWGMQGwWtjhNaA",
      "name": "Google Gemini(PaLM) Api account 4"
    }
  },
  "typeVersion": 1
}

================ Node #2736 ================
{
  "id": "fd19e9f6-d8c7-45df-93d9-ecf7956b461f",
  "name": "Agent Model",
  "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
  "position": [
    -180,
    -20
  ],
  "parameters": {
    "options": {
      "topP": 0.6,
      "temperature": 0.4,
      "safetySettings": {
        "values": [
          {
            "category": "HARM_CATEGORY_HARASSMENT",
            "threshold": "BLOCK_NONE"
          },
          {
            "category": "HARM_CATEGORY_HATE_SPEECH",
            "threshold": "BLOCK_NONE"
          },
          {
            "category": "HARM_CATEGORY_SEXUALLY_EXPLICIT",
            "threshold": "BLOCK_NONE"
          },
          {
            "category": "HARM_CATEGORY_DANGEROUS_CONTENT",
            "threshold": "BLOCK_NONE"
          }
        ]
      },
      "maxOutputTokens": 4086
    },
    "modelName": "models/gemini-1.5-flash-002"
  },
  "credentials": {
    "googlePalmApi": {
      "id": "rTbWGMQGwWtjhNaA",
      "name": "Google Gemini(PaLM) Api account 4"
    }
  },
  "typeVersion": 1
}

================ Node #2737 ================
{
  "id": "156e83ff-928a-4aca-af8b-0c0fa51acd56",
  "name": "Sticky Note5",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    560,
    -20
  ],
  "parameters": {
    "color": 6,
    "width": 712,
    "height": 370,
    "content": "\n## Customized Models to Replace\n\nIn case you rather to use another LLM Model to Perform the Semantic Search and Re-Ranking, These nodes below are Optimized based on the LLM Structure of OpenAI GPT4o & Anthropic Claude.\n"
  },
  "typeVersion": 1
}

================ Node #2738 ================
{
  "id": "f4b3833b-cf25-4bbc-927c-080586c5713c",
  "name": "Sticky Note9",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    700,
    760
  ],
  "parameters": {
    "color": 7,
    "width": 330.5152611046425,
    "height": 239.5888196628349,
    "content": "### ... or watch set up video [13 min]\n[![Youtube Thumbnail](https://cflobdhpqwnoisuctsoc.supabase.co/storage/v1/object/public/my_storage/Youtube%20AI%20Agent%20Blur.png)](https://youtu.be/6RmLZS8Yl4E)\n"
  },
  "typeVersion": 1
}

================ Node #2739 ================
{
  "id": "64d96c53-b3e2-4aea-9a29-9b9e5c729f4f",
  "name": "Sticky Note7",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    400,
    240
  ],
  "parameters": {
    "color": 7,
    "width": 636.2128494576581,
    "height": 497.1532689930921,
    "content": "![5min Logo](https://cflobdhpqwnoisuctsoc.supabase.co/storage/v1/object/public/my_storage/banner.png)\n## AI Agent To Chat With Youtube\n**Made by [Mark Shcherbakov](https://www.linkedin.com/in/marklowcoding/) from community [5minAI](https://www.skool.com/5minai)**\n\nNavigating the content generation and optimization process can be complex, especially without significant audience insight. This workflow automates insights extraction from YouTube videos and comments, empowering users to create more engaging and relevant content effectively.\n\nThe workflow integrates various APIs to gather insights from YouTube videos, enabling automated commentary analysis, video transcription, and thumbnail evaluation. The main functionalities include:\n- Extracting user preferences from comments.\n- Transcribing video content for enhanced understanding.\n- Analyzing thumbnails via AI for maximum viewer engagement insights.\n\n"
  },
  "typeVersion": 1
}

================ Node #2740 ================
{
  "id": "57d2ede9-1bf9-4449-9dc9-af1ccee763b6",
  "name": "Sticky Note6",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    400,
    760
  ],
  "parameters": {
    "color": 7,
    "width": 280.2462120317618,
    "height": 545.9087885077763,
    "content": "### Set up steps\n\n1. **API Setup**:\n - Create a [Google Cloud](https://console.cloud.google.com/apis/dashboard) project and enable the YouTube Data API.\n - Generate an API key for [Apify](https://www.apify.com?fpr=ujogj).\n - Generate API key for [OpenAI](https://platform.openai.com)\n - Create all credentials in N8N - OpenAI, Apify, Google Cloud.\n\n2. **YouTube Creator and Video Selection**:\n - Start by defining a request to identify top creators based on their video views.\n - Capture the YouTube video IDs for further analysis of comments and other video metrics.\n\n3. **Comment Analysis**:\n - Gather comments associated with the selected videos and analyze them for user insights.\n - Implement pagination to handle the maximum comment retrieval limits in API requests.\n\n4. **Video Transcription**:\n - Request transcriptions for videos of interest, ensuring to manage potential costs associated with longer video processing.\n - Utilize the insights from transcriptions to formulate content plans.\n\n5. **Thumbnail Analysis**:\n - Evaluate your video thumbnails by submitting the URL through the OpenAI API to gain insights into their effectiveness.\n\n6. **Data Management**:\n - Incorporate a database agent to organize video data and metrics, allowing efficient record management and future content planning."
  },
  "typeVersion": 1
}

================ Node #2741 ================
{
  "id": "ca0fd549-88a7-44fd-ab81-7fd5ca140dae",
  "name": "OpenAI Chat Model",
  "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
  "position": [
    1540,
    820
  ],
  "parameters": {
    "options": {}
  },
  "credentials": {
    "openAiApi": {
      "id": "zJhr5piyEwVnWtaI",
      "name": "OpenAi club"
    }
  },
  "typeVersion": 1
}

================ Node #2742 ================
{
  "id": "7f2cf209-2e9d-4d6a-bc9e-d1bfd6df7266",
  "name": "get_channel_details",
  "type": "@n8n/n8n-nodes-langchain.toolWorkflow",
  "position": [
    1900,
    820
  ],
  "parameters": {
    "name": "get_channel_details",
    "fields": {
      "values": [
        {
          "name": "command",
          "stringValue": "=get_channel_details"
        }
      ]
    },
    "schemaType": "manual",
    "workflowId": {
      "__rl": true,
      "mode": "list",
      "value": "FgknOUpOBkpY85NX",
      "cachedResultName": "Youtube parser - tools"
    },
    "description": "Get channel_id, title and description by handle/username.\nChannel_id is required to find videos and details about this channel.\nIf Youtube link to channel provided - parse handle from there or return channel_id. (e.g. https://www.youtube.com/@example_handle - example_handle)\n\n\nExample Input:\nexample_handle\n\nExample Output:\nid:UCOgz_YflAsYnGbdvzXuKNCA\ntitle:Daniel Simmons\ndescription:Digital Diary \ud83e\udd0e\\n\\n\\nWeekly videos around fashion...",
    "inputSchema": "{\n \"type\": \"object\",\n \"properties\": {\n \"handle\": {\n \"type\": \"string\",\n \"description\": \"Handle/username of channel\"\n }},\n \"required\": [\"handle\"]\n}",
    "specifyInputSchema": true
  },
  "typeVersion": 1.2
}

================ Node #2743 ================
{
  "id": "c02f5c19-6e50-4a06-95b9-eceb3eec1012",
  "name": "get_video_description",
  "type": "@n8n/n8n-nodes-langchain.toolWorkflow",
  "position": [
    2020,
    820
  ],
  "parameters": {
    "name": "get_video_description",
    "fields": {
      "values": [
        {
          "name": "command",
          "stringValue": "video_details"
        }
      ]
    },
    "schemaType": "manual",
    "workflowId": {
      "__rl": true,
      "mode": "list",
      "value": "FgknOUpOBkpY85NX",
      "cachedResultName": "Youtube parser - tools"
    },
    "description": "Fetch video details - the full description, title, and publish date of a video using its video_id.\n\nExample input:\nvideo_id:dQw4w9WgXcQ\n\nExample Output:\ntitle:Never Gonna Give You Up\ndescription: \"The official video for \u201cNever Gonna Give You Up\u201d by Rick Astley.\nduration:4 min\nviewCount:154\nlikeCount:6\nthumbnails: urls",
    "inputSchema": "{\n \"type\": \"object\",\n \"properties\": {\n \"video_id\": {\n \"type\": \"string\",\n \"description\": \"The ID of the video to fetch details for\"\n }\n },\n \"required\": [\"video_id\"]\n}",
    "specifyInputSchema": true
  },
  "typeVersion": 1.2
}

================ Node #2744 ================
{
  "id": "2d61160b-3a65-4766-ace6-947a7c5de6e5",
  "name": "get_list_of_videos",
  "type": "@n8n/n8n-nodes-langchain.toolWorkflow",
  "position": [
    2140,
    820
  ],
  "parameters": {
    "name": "get_list_of_videos",
    "fields": {
      "values": [
        {
          "name": "command",
          "stringValue": "videos"
        }
      ]
    },
    "schemaType": "manual",
    "workflowId": {
      "__rl": true,
      "mode": "list",
      "value": "FgknOUpOBkpY85NX",
      "cachedResultName": "Youtube parser - tools"
    },
    "description": "Retrieve a list of videos from a channel using channel_id. Supports sorting by date, relevance, or view count.\n\nExample Input:\nchannel_id\": \"UCxxxxxxxxxxxxxxxx\"\nnumber_of_videos\": 5\norder: \"date\"\npublishedAfter: \"timestamp\"\n\nExample Output:\nvideo_id:abc123\ntitle:Latest Video\nshort cut description:Latest Video\npublished_at:2023-12-05T10:00:00Z",
    "inputSchema": "{\n \"type\": \"object\",\n \"properties\": {\n \"channel_id\": {\n \"type\": \"string\",\n \"description\": \"The ID of the channel to fetch videos from\"\n },\n \"number_of_videos\": {\n \"type\": \"integer\",\n \"description\": \"The maximum number of videos to retrieve (max 50)\"\n },\n \"order\": {\n \"type\": \"string\",\n \"enum\": [\"date\", \"relevance\", \"viewCount\"],\n \"description\": \"Order in which to fetch videos\"\n },\n \"publishedAfter\": {\n \"type\": \"string\",\n \"description\": \"Timestamp for filtering like 2023-11-03T15:28:05Z.\"\n }\n },\n \"required\": [\"channel_id\", \"number_of_videos\", \"order\"]\n}",
    "specifyInputSchema": true
  },
  "typeVersion": 1.2
}

================ Node #2745 ================
{
  "id": "c5aa2f7c-7748-4f88-abb6-fd274ad1295a",
  "name": "get_list_of_comments",
  "type": "@n8n/n8n-nodes-langchain.toolWorkflow",
  "position": [
    2260,
    820
  ],
  "parameters": {
    "name": "get_list_of_comments",
    "fields": {
      "values": [
        {
          "name": "command",
          "stringValue": "comments"
        }
      ]
    },
    "schemaType": "manual",
    "workflowId": {
      "__rl": true,
      "mode": "list",
      "value": "FgknOUpOBkpY85NX",
      "cachedResultName": "Youtube parser - tools"
    },
    "description": "Retrieve a list of comments from a video using video_id.\n\nInput:\n \"video_id\": \"dQw4w9WgXcQ\"\n\nOutput:\n \"author\": \"John Doe\",\n \"comment\": \"This is an amazing video!\",\n \"published_at\": \"2023-12-04T12:00:00Z\"",
    "inputSchema": "{\n \"type\": \"object\",\n \"properties\": {\n \"video_id\": {\n \"type\": \"string\",\n \"description\": \"The ID of the video to fetch comments from\"\n }\n },\n \"required\": [\"video_id\"]\n}",
    "specifyInputSchema": true
  },
  "typeVersion": 1.2
}

================ Node #2746 ================
{
  "id": "c68cad77-1d71-45a3-b94b-8f7c701f56fb",
  "name": "search",
  "type": "@n8n/n8n-nodes-langchain.toolWorkflow",
  "position": [
    2380,
    820
  ],
  "parameters": {
    "name": "search",
    "fields": {
      "values": [
        {
          "name": "command",
          "stringValue": "search"
        }
      ]
    },
    "schemaType": "manual",
    "workflowId": {
      "__rl": true,
      "mode": "list",
      "value": "FgknOUpOBkpY85NX",
      "cachedResultName": "Youtube parser - tools"
    },
    "description": "Search for videos or channels using a query. Supports filtering by type (video or channel) and sorting (date, viewCount, relevance). Use | for OR and - to exclude terms in the query.\n\nInput:\ntype: video or channel\nquery: search query\nsorting: date, viewCount, relevance\npublishedAfter: timestamp\n\nOutput:\n- id, title, short cut description, and published_at.",
    "inputSchema": "{\n \"type\": \"object\",\n \"properties\": {\n \"type\": {\n \"type\": \"string\",\n \"enum\": [\"video\", \"channel\"],\n \"description\": \"Type of results to retrieve: video or channel\"\n },\n \"query\": {\n \"type\": \"string\",\n \"description\": \"Search query. Supports | for OR and - to exclude terms\"\n },\n \"sorting\": {\n \"type\": \"string\",\n \"enum\": [\"date\", \"viewCount\", \"relevance\"],\n \"description\": \"Sorting criteria for search results\"\n },\n \"publishedAfter\": {\n \"type\": \"string\",\n \"description\": \"Timestamp for filtering like 2023-11-03T15:28:05Z\"\n }\n },\n \"required\": [\"type\", \"query\", \"sorting\"]\n}",
    "specifyInputSchema": true
  },
  "typeVersion": 1.2
}

================ Node #2747 ================
{
  "id": "c87d5392-8a5c-4999-9e58-89a5e0700c40",
  "name": "analyze_thumbnail",
  "type": "@n8n/n8n-nodes-langchain.toolWorkflow",
  "position": [
    2500,
    820
  ],
  "parameters": {
    "name": "analyze_thumbnail",
    "fields": {
      "values": [
        {
          "name": "command",
          "stringValue": "analyze_thumbnail"
        }
      ]
    },
    "schemaType": "manual",
    "workflowId": {
      "__rl": true,
      "mode": "list",
      "value": "FgknOUpOBkpY85NX",
      "cachedResultName": "Youtube parser - tools"
    },
    "description": "Analyze a thumbnail image based on a given prompt. The prompt can be customized for specific analysis needs, such as design critique, color scheme evaluation, or content assessment.\nUse link of maxRes thumbnail. \n\nInput:\n- url: URL of the thumbnail image.\n- prompt: Customizable instruction for the analysis.\n\nOutput:\n- Results of the analysis based on the given prompt.",
    "inputSchema": "{\n \"type\": \"object\",\n \"properties\": {\n \"url\": {\n \"type\": \"string\",\n \"description\": \"URL of the thumbnail image to analyze\"\n },\n \"prompt\": {\n \"type\": \"string\",\n \"description\": \"Customizable instruction to guide the image analysis\"\n }\n },\n \"required\": [\"url\", \"prompt\"]\n}",
    "specifyInputSchema": true
  },
  "typeVersion": 1.2
}

================ Node #2748 ================
{
  "id": "1be2fa35-9091-4db8-a8eb-50f822d618d3",
  "name": "video_transcription",
  "type": "@n8n/n8n-nodes-langchain.toolWorkflow",
  "position": [
    2620,
    820
  ],
  "parameters": {
    "name": "video_transcription",
    "fields": {
      "values": [
        {
          "name": "command",
          "stringValue": "video_transcription"
        }
      ]
    },
    "schemaType": "manual",
    "workflowId": {
      "__rl": true,
      "mode": "list",
      "value": "FgknOUpOBkpY85NX",
      "cachedResultName": "Youtube parser - tools"
    },
    "description": "Transcribe a video and retrieve its text transcription. Useful for analyzing video content or repurposing it for other formats.\n\nInput:\n- video_url: URL of the video to transcribe.\n\nOutput:\n- The text transcription of the video.",
    "inputSchema": "{\n \"type\": \"object\",\n \"properties\": {\n \"video_url\": {\n \"type\": \"string\",\n \"description\": \"URL of the video to transcribe\"\n }\n },\n \"required\": [\"video_url\"]\n}",
    "specifyInputSchema": true
  },
  "typeVersion": 1.2
}

================ Node #2749 ================
{
  "id": "fbfcd82f-e247-4a21-be12-339df7afe681",
  "name": "Postgres Chat Memory",
  "type": "@n8n/n8n-nodes-langchain.memoryPostgresChat",
  "position": [
    1700,
    820
  ],
  "parameters": {
    "sessionKey": "={{ $('When chat message received').item.json.sessionId }}",
    "sessionIdType": "customKey"
  },
  "credentials": {
    "postgres": {
      "id": "AO9cER6p8uX7V07T",
      "name": "Postgres 5minai"
    }
  },
  "typeVersion": 1.3
}

================ Node #2750 ================
{
  "id": "6a4bbad9-27ab-448b-9222-2c8843fe241a",
  "name": "AI Agent",
  "type": "@n8n/n8n-nodes-langchain.agent",
  "position": [
    1760,
    560
  ],
  "parameters": {
    "text": "={{ $('When chat message received').item.json.chatInput }}",
    "agent": "openAiFunctionsAgent",
    "options": {
      "systemMessage": "You are Youtube assistant. \nYou need to process user's requests and run relevant tools for that. \n\nPlan and execute in right order runs of tools to get data for user's request.\n\nIMPORTANT Search query and list of videos for channel tools returns all videos including shorts - use Get Video description tool to identify shorts (less than minute) and filter them out if needed.\n\nFeel free to ask questions before do actions - especially if you noticed some inconcistency in user requests that might be error/misspelling. "
    },
    "promptType": "define"
  },
  "typeVersion": 1.6
}

================ Node #2751 ================
{
  "id": "739cc12a-27d1-48e9-b124-7f83fb372514",
  "name": "When chat message received",
  "type": "@n8n/n8n-nodes-langchain.chatTrigger",
  "position": [
    1460,
    600
  ],
  "webhookId": "6e95bc27-99a6-417c-8bf7-2831d7f7a4be",
  "parameters": {
    "options": {}
  },
  "typeVersion": 1.1
}

================ Node #2752 ================
{
  "id": "613af9f2-77fa-42c4-86d3-87e20f2c0c89",
  "name": "Sticky Note",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    1380,
    500
  ],
  "parameters": {
    "width": 1430.34590072234,
    "height": 588.1344471094899,
    "content": "## Scenario 1: AI agent"
  },
  "typeVersion": 1
}

================ Node #2753 ================
{
  "id": "54116346-bc73-4a6a-8bca-f2a6e6699374",
  "name": "Get Comments",
  "type": "n8n-nodes-base.httpRequest",
  "position": [
    2064,
    1598
  ],
  "parameters": {
    "url": "=https://www.googleapis.com/youtube/v3/commentThreads",
    "options": {},
    "sendQuery": true,
    "authentication": "genericCredentialType",
    "genericAuthType": "httpQueryAuth",
    "queryParameters": {
      "parameters": [
        {
          "name": "part",
          "value": "id,snippet,replies"
        },
        {
          "name": "videoId",
          "value": "={{ $('Execute Workflow Trigger').item.json.query.video_id }}"
        },
        {
          "name": "maxResults",
          "value": "100"
        }
      ]
    }
  },
  "credentials": {
    "httpQueryAuth": {
      "id": "1DXeuNaLSixqGPaU",
      "name": "Query Auth account Youtube"
    }
  },
  "typeVersion": 4.2
}

================ Node #2754 ================
{
  "id": "faabf71a-69f2-4113-802e-124a09fa9a0a",
  "name": "Execute Workflow Trigger",
  "type": "n8n-nodes-base.executeWorkflowTrigger",
  "position": [
    1444,
    1598
  ],
  "parameters": {},
  "typeVersion": 1
}

================ Node #2755 ================
{
  "id": "4b3ec3aa-7c69-4a72-a989-02f97acdf612",
  "name": "Get Channel Details",
  "type": "n8n-nodes-base.httpRequest",
  "position": [
    2064,
    1278
  ],
  "parameters": {
    "url": "=https://www.googleapis.com/youtube/v3/channels",
    "options": {},
    "sendQuery": true,
    "authentication": "genericCredentialType",
    "genericAuthType": "httpQueryAuth",
    "queryParameters": {
      "parameters": [
        {
          "name": "part",
          "value": "snippet"
        },
        {
          "name": "forHandle",
          "value": "={{ $('Execute Workflow Trigger').item.json.query.handle }}"
        }
      ]
    }
  },
  "credentials": {
    "httpQueryAuth": {
      "id": "1DXeuNaLSixqGPaU",
      "name": "Query Auth account Youtube"
    }
  },
  "typeVersion": 4.2
}

================ Node #2756 ================
{
  "id": "ed8dec73-8c50-4eb9-8efe-68ee72c4d5e6",
  "name": "Get Video Description",
  "type": "n8n-nodes-base.httpRequest",
  "position": [
    2064,
    1438
  ],
  "parameters": {
    "url": "=https://www.googleapis.com/youtube/v3/videos",
    "options": {},
    "sendQuery": true,
    "authentication": "genericCredentialType",
    "genericAuthType": "httpQueryAuth",
    "queryParameters": {
      "parameters": [
        {
          "name": "part",
          "value": "snippet,contentDetails,statistics"
        },
        {
          "name": "id",
          "value": "={{ $('Execute Workflow Trigger').item.json.query.video_id }}"
        }
      ]
    }
  },
  "credentials": {
    "httpQueryAuth": {
      "id": "1DXeuNaLSixqGPaU",
      "name": "Query Auth account Youtube"
    }
  },
  "typeVersion": 4.2
}

================ Node #2757 ================
{
  "id": "c1ff3837-8d7e-49ad-a333-c177833fcd05",
  "name": "Edit Fields",
  "type": "n8n-nodes-base.set",
  "position": [
    2224,
    1598
  ],
  "parameters": {
    "options": {},
    "assignments": {
      "assignments": [
        {
          "id": "469d89ba-23fc-482a-b4ae-ce5d3bc13579",
          "name": "response",
          "type": "string",
          "value": "={{ JSON.stringify(` Comments: ${$json.items.map(item => { const topLevelComment = `${item.snippet.topLevelComment.snippet.authorDisplayName}: ${item.snippet.topLevelComment.snippet.textOriginal}`; const replies = item.replies?.comments.map(reply => `${reply.snippet.authorDisplayName}: ${reply.snippet.textOriginal}` ).join('\\n') || ''; return [topLevelComment, replies].filter(Boolean).join('\\n'); }).join('\\n\\n')} `) }}"
        }
      ]
    }
  },
  "typeVersion": 3.4
}

================ Node #2758 ================
{
  "id": "5f0c44fe-2523-4170-a27d-0ccd1bef24a7",
  "name": "Run Query",
  "type": "n8n-nodes-base.httpRequest",
  "position": [
    2064,
    1758
  ],
  "parameters": {
    "url": "=https://www.googleapis.com/youtube/v3/search",
    "options": {},
    "sendQuery": true,
    "authentication": "genericCredentialType",
    "genericAuthType": "httpQueryAuth",
    "queryParameters": {
      "parameters": [
        {
          "name": "part",
          "value": "snippet"
        },
        {
          "name": "q",
          "value": "={{ $('Execute Workflow Trigger').item.json.query.query }}"
        },
        {
          "name": "order",
          "value": "={{ $('Execute Workflow Trigger').item.json.query.order }}"
        },
        {
          "name": "type",
          "value": "={{ $('Execute Workflow Trigger').item.json.query.type }}"
        },
        {
          "name": "maxResults",
          "value": "={{ $('Execute Workflow Trigger').item.json.query.number_of_videos }}"
        },
        {
          "name": "publishedAfter",
          "value": "={{ $('Execute Workflow Trigger').item.json.query.publishedAfter }}"
        }
      ]
    }
  },
  "credentials": {
    "httpQueryAuth": {
      "id": "1DXeuNaLSixqGPaU",
      "name": "Query Auth account Youtube"
    }
  },
  "typeVersion": 4.2
}

================ Node #2759 ================
{
  "id": "3e192718-6710-4143-ac6e-15df79ee5363",
  "name": "Get Videos by Channel",
  "type": "n8n-nodes-base.httpRequest",
  "position": [
    2064,
    1918
  ],
  "parameters": {
    "url": "=https://www.googleapis.com/youtube/v3/search",
    "options": {},
    "sendQuery": true,
    "authentication": "genericCredentialType",
    "genericAuthType": "httpQueryAuth",
    "queryParameters": {
      "parameters": [
        {
          "name": "part",
          "value": "snippet"
        },
        {
          "name": "channelId",
          "value": "={{ $('Execute Workflow Trigger').item.json.query.channel_id }}"
        },
        {
          "name": "order",
          "value": "={{ $('Execute Workflow Trigger').item.json.query.order }}"
        },
        {
          "name": "maxResults",
          "value": "={{ $('Execute Workflow Trigger').item.json.query.number_of_videos }}"
        },
        {
          "name": "type",
          "value": "video"
        },
        {
          "name": "publishedAfter",
          "value": "={{ $('Execute Workflow Trigger').item.json.query.publishedAfter }}"
        }
      ]
    }
  },
  "credentials": {
    "httpQueryAuth": {
      "id": "1DXeuNaLSixqGPaU",
      "name": "Query Auth account Youtube"
    }
  },
  "typeVersion": 4.2
}

================ Node #2760 ================
{
  "id": "8bcb50a4-0cd1-4311-ac6a-2ee8653cfb71",
  "name": "Response",
  "type": "n8n-nodes-base.set",
  "position": [
    2564,
    1598
  ],
  "parameters": {
    "options": {},
    "assignments": {
      "assignments": [
        {
          "id": "cfdbe2f5-921e-496d-87bd-9c57fdc22a7a",
          "name": "response",
          "type": "object",
          "value": "={{$json}}"
        }
      ]
    }
  },
  "typeVersion": 3.4
}

================ Node #2761 ================
{
  "id": "7f5a36d3-6710-4e69-8459-7c8c748ee7d9",
  "name": "Switch",
  "type": "n8n-nodes-base.switch",
  "position": [
    1624,
    1578
  ],
  "parameters": {
    "rules": {
      "values": [
        {
          "outputKey": "get_channel_details",
          "conditions": {
            "options": {
              "version": 2,
              "leftValue": "",
              "caseSensitive": true,
              "typeValidation": "strict"
            },
            "combinator": "and",
            "conditions": [
              {
                "operator": {
                  "type": "string",
                  "operation": "equals"
                },
                "leftValue": "={{ $('Execute Workflow Trigger').item.json.command }}",
                "rightValue": "get_channel_details"
              }
            ]
          },
          "renameOutput": true
        },
        {
          "outputKey": "video_details",
          "conditions": {
            "options": {
              "version": 2,
              "leftValue": "",
              "caseSensitive": true,
              "typeValidation": "strict"
            },
            "combinator": "and",
            "conditions": [
              {
                "id": "26a3ffe8-c8a6-4564-8d18-5494a8059372",
                "operator": {
                  "name": "filter.operator.equals",
                  "type": "string",
                  "operation": "equals"
                },
                "leftValue": "={{ $('Execute Workflow Trigger').item.json.command }}",
                "rightValue": "video_details"
              }
            ]
          },
          "renameOutput": true
        },
        {
          "outputKey": "comments",
          "conditions": {
            "options": {
              "version": 2,
              "leftValue": "",
              "caseSensitive": true,
              "typeValidation": "strict"
            },
            "combinator": "and",
            "conditions": [
              {
                "id": "0f51cc26-2e42-42e1-a5c2-cb1d2e384962",
                "operator": {
                  "name": "filter.operator.equals",
                  "type": "string",
                  "operation": "equals"
                },
                "leftValue": "={{ $('Execute Workflow Trigger').item.json.command }}",
                "rightValue": "comments"
              }
            ]
          },
          "renameOutput": true
        },
        {
          "outputKey": "search",
          "conditions": {
            "options": {
              "version": 2,
              "leftValue": "",
              "caseSensitive": true,
              "typeValidation": "strict"
            },
            "combinator": "and",
            "conditions": [
              {
                "id": "51031140-5ceb-48aa-9f33-d314131a9653",
                "operator": {
                  "name": "filter.operator.equals",
                  "type": "string",
                  "operation": "equals"
                },
                "leftValue": "={{ $('Execute Workflow Trigger').item.json.command }}",
                "rightValue": "search"
              }
            ]
          },
          "renameOutput": true
        },
        {
          "outputKey": "videos",
          "conditions": {
            "options": {
              "version": 2,
              "leftValue": "",
              "caseSensitive": true,
              "typeValidation": "strict"
            },
            "combinator": "and",
            "conditions": [
              {
                "id": "f160bf0a-423f-448d-ab80-50a0b6a177ca",
                "operator": {
                  "name": "filter.operator.equals",
                  "type": "string",
                  "operation": "equals"
                },
                "leftValue": "={{ $('Execute Workflow Trigger').item.json.command }}",
                "rightValue": "videos"
              }
            ]
          },
          "renameOutput": true
        },
        {
          "outputKey": "analyze_thumbnail",
          "conditions": {
            "options": {
              "version": 2,
              "leftValue": "",
              "caseSensitive": true,
              "typeValidation": "strict"
            },
            "combinator": "and",
            "conditions": [
              {
                "id": "29542ac4-7b9d-413f-aabb-a1cdabed2fa7",
                "operator": {
                  "name": "filter.operator.equals",
                  "type": "string",
                  "operation": "equals"
                },
                "leftValue": "={{ $('Execute Workflow Trigger').item.json.command }}",
                "rightValue": "analyze_thumbnail"
              }
            ]
          },
          "renameOutput": true
        },
        {
          "outputKey": "video_transcription",
          "conditions": {
            "options": {
              "version": 2,
              "leftValue": "",
              "caseSensitive": true,
              "typeValidation": "strict"
            },
            "combinator": "and",
            "conditions": [
              {
                "id": "35fc39b8-6cf1-4ea6-9609-4a195c5526f8",
                "operator": {
                  "name": "filter.operator.equals",
                  "type": "string",
                  "operation": "equals"
                },
                "leftValue": "={{ $('Execute Workflow Trigger').item.json.command }}",
                "rightValue": "video_transcription"
              }
            ]
          },
          "renameOutput": true
        }
      ]
    },
    "options": {}
  },
  "typeVersion": 3.2
}

================ Node #2762 ================
{
  "id": "df432d53-33bf-4e91-9ead-7f4b36bd788a",
  "name": "Get Video Transcription",
  "type": "n8n-nodes-base.httpRequest",
  "position": [
    2064,
    2238
  ],
  "parameters": {
    "url": "=https://api.apify.com/v2/acts/dB9f4B02ocpTICIEY/run-sync-get-dataset-items",
    "method": "POST",
    "options": {},
    "jsonBody": "={\n \"startUrls\": [\n \"{{ $('Execute Workflow Trigger').item.json.query.video_url }}\"\n ]\n}",
    "sendBody": true,
    "specifyBody": "json",
    "authentication": "genericCredentialType",
    "genericAuthType": "httpQueryAuth"
  },
  "credentials": {
    "httpQueryAuth": {
      "id": "XDavOaI9qH5Zi3QC",
      "name": "Apify"
    }
  },
  "typeVersion": 4.2
}

================ Node #2763 ================
{
  "id": "8079e5c9-4a52-45ce-ac41-7fc707177a5a",
  "name": "OpenAI",
  "type": "@n8n/n8n-nodes-langchain.openAi",
  "position": [
    2064,
    2078
  ],
  "parameters": {
    "text": "={{ $('Execute Workflow Trigger').item.json.query.prompt }}",
    "modelId": {
      "__rl": true,
      "mode": "list",
      "value": "gpt-4o",
      "cachedResultName": "GPT-4O"
    },
    "options": {},
    "resource": "image",
    "imageUrls": "={{ $('Execute Workflow Trigger').item.json.query.url }}",
    "operation": "analyze"
  },
  "credentials": {
    "openAiApi": {
      "id": "SphXAX7rlwRLkiox",
      "name": "Test club key"
    }
  },
  "typeVersion": 1.7
}

================ Node #2764 ================
{
  "id": "7847e82a-fe82-498c-8c14-4c1c718d632c",
  "name": "Sticky Note1",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    1380,
    1140
  ],
  "parameters": {
    "width": 1427.3810326521016,
    "height": 1313.2689194736308,
    "content": "## Scenario 2: Agent tools"
  },
  "typeVersion": 1
}

================ Node #2765 ================
{
  "id": "3a0fbbb0-4c0e-41f1-abb3-c87e955ad1b3",
  "name": "Sticky Note2",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    1540,
    960
  ],
  "parameters": {
    "color": 4,
    "width": 266.7375650720483,
    "height": 80,
    "content": "### Replace credentials"
  },
  "typeVersion": 1
}

================ Node #2766 ================
{
  "id": "363eaca0-aaa5-4551-845f-528f19bba57a",
  "name": "Sticky Note3",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    2004,
    1178
  ],
  "parameters": {
    "color": 4,
    "width": 266.7375650720483,
    "height": 80,
    "content": "### Replace credentials in all nodes - Apify, OpenAI, Google"
  },
  "typeVersion": 1
}

================ Node #2767 ================
{
  "id": "c17e444e-0a5e-4bfe-8de6-c3185de4465d",
  "name": "Grants to List",
  "type": "n8n-nodes-base.splitOut",
  "position": [
    -240,
    -180
  ],
  "parameters": {
    "options": {},
    "fieldToSplitOut": "oppHits"
  },
  "typeVersion": 1
}

================ Node #2768 ================
{
  "id": "9251d39c-6098-42fa-aadd-3a22464dee64",
  "name": "Get Grant Details",
  "type": "n8n-nodes-base.httpRequest",
  "position": [
    280,
    -280
  ],
  "parameters": {
    "url": "https://apply07.grants.gov/grantsws/rest/opportunity/details",
    "method": "POST",
    "options": {},
    "sendBody": true,
    "contentType": "form-urlencoded",
    "bodyParameters": {
      "parameters": [
        {
          "name": "oppId",
          "value": "={{ $json.id }}"
        }
      ]
    }
  },
  "typeVersion": 4.2
}

================ Node #2769 ================
{
  "id": "ade994d6-a1f8-45bf-a82e-83eb38da08d6",
  "name": "OpenAI Chat Model",
  "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
  "position": [
    440,
    -120
  ],
  "parameters": {
    "options": {}
  },
  "credentials": {
    "openAiApi": {
      "id": "8gccIjcuf3gvaoEr",
      "name": "OpenAi account"
    }
  },
  "typeVersion": 1
}

================ Node #2770 ================
{
  "id": "4d81b20e-0038-48d3-840c-3fcf8b798a0d",
  "name": "Summarize Synopsis",
  "type": "@n8n/n8n-nodes-langchain.informationExtractor",
  "position": [
    460,
    -280
  ],
  "parameters": {
    "text": "=Agency: {{ $json.synopsis.agencyName }}\nTitle: {{ $json.opportunityTitle }}\nSynopsis: {{ $json.synopsis.synopsisDesc }}",
    "options": {
      "systemPromptTemplate": "You've been given a grant opportunity listing. Help summarize the opportunity in simple terms."
    },
    "schemaType": "manual",
    "inputSchema": "{\n\t\"type\": \"object\",\n\t\"properties\": {\n \"goal\": { \"type\": [\"string\", \"null\"] },\n \"duration\": { \"type\": \"string\" },\n \"success_criteria\": {\n \"type\": \"array\",\n \"items\": { \"type\": \"string\" }\n },\n \"good_to_know\": {\n\t\t \"type\": \"array\",\n \"items\": { \"type\": \"string\" }\n }\n\t}\n}"
  },
  "typeVersion": 1
}

================ Node #2771 ================
{
  "id": "71e1a2e9-6690-4247-aae3-f5bd61019553",
  "name": "Eligibility Factors",
  "type": "@n8n/n8n-nodes-langchain.informationExtractor",
  "position": [
    640,
    -120
  ],
  "parameters": {
    "text": "=Agency: {{ $json.synopsis.agencyName }}\nTitle: {{ $json.opportunityTitle }}\nSynopsis: {{ $json.synopsis.synopsisDesc }}\nEligibility: {{ $json.synopsis.applicantEligibilityDesc }}",
    "options": {
      "systemPromptTemplate": "Help determine if we are eligible for this grant.\n\nWe are AI Consultants Limited (\u201cCompany\u201d) and are the controllers of your personal data. Our registered office is Unit 29, Intelligent Park, Milton Road, Cambridge Cambridgeshire CB9 RDW, and our registered company number is 1234567.\n\nWe are part of a group of companies which provides consultancy services across the globe. Our other group companies are:\n\nAI Consultants Inc. of 2 Drydock Avenue, Suite 1210, Boston, MA 02210, USA\nAI Consultants (Singapore) Pte Ltd of 300 Beach Road, Singapore 199555\nAI Consultants Japan Inc, of 3-1-3 Minamiaoyama, Minato-ku, Tokyo, 107-0062\nIn the UK we are registered with the Information Commissioner\u2019s Office under registration number Z9888888.\n\nIn the US we are registered with the Data Privacy Framework Program (DPF). To view the Company\u2019s certification, please visit https://www.dataprivacyframework.gov/list.\n\nWe are a leading, worldwide product development service provider. We specialise in design engineering services, professional technical services and product technical support services (\u201cServices\u201d).\n\nAs the deep tech powerhouse of Capgemini, CC spearheads transformative projects to solve the toughest scientific and engineering challenges. Ambitious clients collaborate with us to create new-to-the-world technologies, services and products that have never been seen before. Our unique combination of technical, commercial and market expertise yields market-leading solutions that are hard to copy. This creates valuable intellectual property that generates protectable long-term value.\n\nWe work with some of the world\u2019s biggest brands and most ambitious technology start-up ventures across a wide range of markets. From aerospace to agritech, consumer to industry, communications to healthcare, our knowledge of one sector can often be applied to another to create new breakthroughs. We focus on our clients\u2019 success and we are trusted as integral partners in the future of their businesses.\n\nWe do important, difficult, radical and impactful things that benefit society. We helped develop the world's first 24/7 wrist-worn activity monitor, wireless pacemaker and wireless patient monitor, as well as the first connected drug inhaler. Our work led to the most densely packed cellular network in the world \u2013 orchestrating swarms of bots across highly automated warehouses. It produced the Bluetooth chip that connects your phone to your car and the latest satellite technology that lets people in remote locations across the world keep in touch."
    },
    "schemaType": "manual",
    "inputSchema": "{\n\t\"type\": \"object\",\n\t\"properties\": {\n\t\t\"eligibility_matches\": {\n\t\t \"type\": \"array\",\n \"items\": { \"type\": \"string\" }\n }\n\t}\n}"
  },
  "typeVersion": 1
}

================ Node #2772 ================
{
  "id": "d741ef63-dcf3-452d-978c-8cbc27f55a33",
  "name": "OpenAI Chat Model1",
  "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
  "position": [
    600,
    20
  ],
  "parameters": {
    "options": {}
  },
  "credentials": {
    "openAiApi": {
      "id": "8gccIjcuf3gvaoEr",
      "name": "OpenAi account"
    }
  },
  "typeVersion": 1
}

================ Node #2773 ================
{
  "id": "7354ed6d-50f5-4234-90d8-2d9d0c7eccd4",
  "name": "Merge",
  "type": "n8n-nodes-base.merge",
  "position": [
    1000,
    -120
  ],
  "parameters": {
    "mode": "combine",
    "options": {},
    "combineBy": "combineByPosition"
  },
  "typeVersion": 3
}

================ Node #2774 ================
{
  "id": "2dffda98-18c6-4c7b-8fc3-0e6539642ea2",
  "name": "Save to Tracker",
  "type": "n8n-nodes-base.airtable",
  "position": [
    1420,
    -20
  ],
  "parameters": {
    "base": {
      "__rl": true,
      "mode": "list",
      "value": "appiNoPRvhJxz9crl",
      "cachedResultUrl": "https://airtable.com/appiNoPRvhJxz9crl",
      "cachedResultName": "US Grants.gov Tracker"
    },
    "table": {
      "__rl": true,
      "mode": "list",
      "value": "tblX93C9MNzizhibd",
      "cachedResultUrl": "https://airtable.com/appiNoPRvhJxz9crl/tblX93C9MNzizhibd",
      "cachedResultName": "Table 1"
    },
    "columns": {
      "value": {
        "URL": "=https://grants.gov/search-results-detail/{{ $('Get Grant Details').item.json.id }}",
        "Goal": "={{ $json.output.goal }}",
        "Notes": "={{ $json.output.good_to_know.join('\\n') }}",
        "Title": "={{ $('Get Grant Details').item.json.opportunityTitle }}",
        "Agency": "={{ $('Get Grant Details').item.json.synopsis.agencyContactName }}",
        "Status": "New",
        "Funding": "={{ $('Get Grant Details').item.json.synopsis.estimatedFunding }}",
        "Duration": "={{ $json.output.duration }}",
        "Award Floor": "={{ $('Get Grant Details').item.json.synopsis.awardFloor }}",
        "Posted Date": "={{ $('Get Grant Details').item.json.synopsis.postingDate }}",
        "Agency Email": "={{ $('Get Grant Details').item.json.synopsis.agencyContactEmail }}",
        "Agency Phone": "={{ $('Get Grant Details').item.json.synopsis.agencyContactPhone }}",
        "Eligibility?": "={{ $json.output.eligibility_matches.length > 0 ? 'Yes' : 'No' }}",
        "Award Ceiling": "={{ $('Get Grant Details').item.json.synopsis.awardCeiling }}",
        "Response Date": "={{ $('Get Grant Details').item.json.synopsis.responseDate }}",
        "Success Criteria": "={{ $json.output.success_criteria.join('\\n') }}",
        "Eligibility Notes": "={{ $json.output.eligibility_matches.join('\\n') }}",
        "Opportunity Number": "={{ $('Get Grant Details').item.json.opportunityNumber }}"
      },
      "schema": [
        {
          "id": "Opportunity Number",
          "type": "string",
          "display": true,
          "removed": false,
          "readOnly": false,
          "required": false,
          "displayName": "Opportunity Number",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "Status",
          "type": "options",
          "display": true,
          "options": [
            {
              "name": "New",
              "value": "New"
            },
            {
              "name": "Under Review",
              "value": "Under Review"
            },
            {
              "name": "Interested",
              "value": "Interested"
            },
            {
              "name": "Not Interested",
              "value": "Not Interested"
            }
          ],
          "removed": false,
          "readOnly": false,
          "required": false,
          "displayName": "Status",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "Title",
          "type": "string",
          "display": true,
          "removed": false,
          "readOnly": false,
          "required": false,
          "displayName": "Title",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "URL",
          "type": "string",
          "display": true,
          "removed": false,
          "readOnly": false,
          "required": false,
          "displayName": "URL",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "Goal",
          "type": "string",
          "display": true,
          "removed": false,
          "readOnly": false,
          "required": false,
          "displayName": "Goal",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "Success Criteria",
          "type": "string",
          "display": true,
          "removed": false,
          "readOnly": false,
          "required": false,
          "displayName": "Success Criteria",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "Notes",
          "type": "string",
          "display": true,
          "removed": false,
          "readOnly": false,
          "required": false,
          "displayName": "Notes",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "Eligibility?",
          "type": "options",
          "display": true,
          "options": [
            {
              "name": "Yes",
              "value": "Yes"
            },
            {
              "name": "No",
              "value": "No"
            }
          ],
          "removed": false,
          "readOnly": false,
          "required": false,
          "displayName": "Eligibility?",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "Eligibility Notes",
          "type": "string",
          "display": true,
          "removed": false,
          "readOnly": false,
          "required": false,
          "displayName": "Eligibility Notes",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "Duration",
          "type": "string",
          "display": true,
          "removed": false,
          "readOnly": false,
          "required": false,
          "displayName": "Duration",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "Agency",
          "type": "string",
          "display": true,
          "removed": false,
          "readOnly": false,
          "required": false,
          "displayName": "Agency",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "Agency Email",
          "type": "string",
          "display": true,
          "removed": false,
          "readOnly": false,
          "required": false,
          "displayName": "Agency Email",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "Agency Phone",
          "type": "string",
          "display": true,
          "removed": false,
          "readOnly": false,
          "required": false,
          "displayName": "Agency Phone",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "Posted Date",
          "type": "dateTime",
          "display": true,
          "removed": false,
          "readOnly": false,
          "required": false,
          "displayName": "Posted Date",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "Response Date",
          "type": "dateTime",
          "display": true,
          "removed": false,
          "readOnly": false,
          "required": false,
          "displayName": "Response Date",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "Funding",
          "type": "number",
          "display": true,
          "removed": false,
          "readOnly": false,
          "required": false,
          "displayName": "Funding",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "Award Ceiling",
          "type": "number",
          "display": true,
          "removed": false,
          "readOnly": false,
          "required": false,
          "displayName": "Award Ceiling",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "Award Floor",
          "type": "number",
          "display": true,
          "removed": false,
          "readOnly": false,
          "required": false,
          "displayName": "Award Floor",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        }
      ],
      "mappingMode": "defineBelow",
      "matchingColumns": []
    },
    "options": {},
    "operation": "create"
  },
  "credentials": {
    "airtableTokenApi": {
      "id": "Und0frCQ6SNVX3VV",
      "name": "Airtable Personal Access Token account"
    }
  },
  "typeVersion": 2.1
}

================ Node #2775 ================
{
  "id": "f0712788-b801-4070-a5c2-2f7ed620588e",
  "name": "Only New Grants",
  "type": "n8n-nodes-base.removeDuplicates",
  "position": [
    -60,
    -180
  ],
  "parameters": {
    "options": {},
    "operation": "removeItemsSeenInPreviousExecutions",
    "dedupeValue": "={{ $json.id }}"
  },
  "typeVersion": 2
}

================ Node #2776 ================
{
  "id": "fb4ac14d-0bdd-40f7-9b31-3a23450b1f0b",
  "name": "AI Grants since Yesterday",
  "type": "n8n-nodes-base.httpRequest",
  "position": [
    -420,
    -180
  ],
  "parameters": {
    "url": "https://apply07.grants.gov/grantsws/rest/opportunities/search",
    "method": "POST",
    "options": {},
    "jsonBody": "{\n \"keyword\": \"ai\",\n \"cfda\": null,\n \"agencies\": null,\n \"sortBy\": \"openDate|desc\",\n \"rows\": 5000,\n \"eligibilities\": null,\n \"fundingCategories\": null,\n \"fundingInstruments\": null,\n \"dateRange\": \"1\",\n \"oppStatuses\": \"forecasted|posted\"\n}",
    "sendBody": true,
    "specifyBody": "json"
  },
  "typeVersion": 4.2
}

================ Node #2777 ================
{
  "id": "0446c882-764a-4c94-8c49-f368c50586a0",
  "name": "Get New Eligible Grants Today",
  "type": "n8n-nodes-base.airtable",
  "position": [
    -400,
    500
  ],
  "parameters": {
    "base": {
      "__rl": true,
      "mode": "list",
      "value": "appiNoPRvhJxz9crl",
      "cachedResultUrl": "https://airtable.com/appiNoPRvhJxz9crl",
      "cachedResultName": "US Grants.gov Tracker"
    },
    "table": {
      "__rl": true,
      "mode": "list",
      "value": "tblX93C9MNzizhibd",
      "cachedResultUrl": "https://airtable.com/appiNoPRvhJxz9crl/tblX93C9MNzizhibd",
      "cachedResultName": "Table 1"
    },
    "options": {},
    "operation": "search",
    "filterByFormula": "=AND(\n {Status} = 'New',\n {Eligibility?} = 'Yes',\n IS_SAME(DATETIME_FORMAT(Created, 'YYYY-MM-DD'), DATETIME_FORMAT(TODAY(), 'YYYY-MM-DD'))\n)"
  },
  "credentials": {
    "airtableTokenApi": {
      "id": "Und0frCQ6SNVX3VV",
      "name": "Airtable Personal Access Token account"
    }
  },
  "typeVersion": 2.1
}

================ Node #2778 ================
{
  "id": "70bca43a-d00e-4ee6-828a-9926ba1d8fdb",
  "name": "Generate Email",
  "type": "n8n-nodes-base.html",
  "position": [
    -160,
    500
  ],
  "parameters": {
    "html": "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional //EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n<html xmlns=\"http://www.w3.org/1999/xhtml\" xmlns:v=\"urn:schemas-microsoft-com:vml\" xmlns:o=\"urn:schemas-microsoft-com:office:office\">\n<head>\n<!--[if gte mso 9]>\n<xml>\n <o:OfficeDocumentSettings>\n <o:AllowPNG/>\n <o:PixelsPerInch>96</o:PixelsPerInch>\n </o:OfficeDocumentSettings>\n</xml>\n<![endif]-->\n <meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">\n <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n <meta name=\"x-apple-disable-message-reformatting\">\n <!--[if !mso]><!--><meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\"><!--<![endif]-->\n <title></title>\n \n <style type=\"text/css\">\n @media only screen and (min-width: 520px) {\n .u-row {\n width: 500px !important;\n }\n .u-row .u-col {\n vertical-align: top;\n }\n\n .u-row .u-col-100 {\n width: 500px !important;\n }\n\n}\n\n@media (max-width: 520px) {\n .u-row-container {\n max-width: 100% !important;\n padding-left: 0px !important;\n padding-right: 0px !important;\n }\n .u-row .u-col {\n min-width: 320px !important;\n max-width: 100% !important;\n display: block !important;\n }\n .u-row {\n width: 100% !important;\n }\n .u-col {\n width: 100% !important;\n }\n .u-col > div {\n margin: 0 auto;\n }\n}\nbody {\n margin: 0;\n padding: 0;\n}\n\ntable,\ntr,\ntd {\n vertical-align: top;\n border-collapse: collapse;\n}\n\np {\n margin: 0;\n}\n\n.ie-container table,\n.mso-container table {\n table-layout: fixed;\n}\n\n* {\n line-height: inherit;\n}\n\na[x-apple-data-detectors='true'] {\n color: inherit !important;\n text-decoration: none !important;\n}\n\ntable, td { color: #000000; } </style>\n \n \n\n</head>\n\n<body class=\"clean-body u_body\" style=\"margin: 0;padding: 0;-webkit-text-size-adjust: 100%;background-color: #F7F8F9;color: #000000\">\n <!--[if IE]><div class=\"ie-container\"><![endif]-->\n <!--[if mso]><div class=\"mso-container\"><![endif]-->\n <table style=\"border-collapse: collapse;table-layout: fixed;border-spacing: 0;mso-table-lspace: 0pt;mso-table-rspace: 0pt;vertical-align: top;min-width: 320px;Margin: 0 auto;background-color: #F7F8F9;width:100%\" cellpadding=\"0\" cellspacing=\"0\">\n <tbody>\n <tr style=\"vertical-align: top\">\n <td style=\"word-break: break-word;border-collapse: collapse !important;vertical-align: top\">\n <!--[if (mso)|(IE)]><table width=\"100%\" cellpadding=\"0\" cellspacing=\"0\" border=\"0\"><tr><td align=\"center\" style=\"background-color: #F7F8F9;\"><![endif]-->\n \n \n \n<div class=\"u-row-container\" style=\"padding: 0px;background-color: #f7f8f9\">\n <div class=\"u-row\" style=\"margin: 0 auto;min-width: 320px;max-width: 500px;overflow-wrap: break-word;word-wrap: break-word;word-break: break-word;background-color: #ffffff;\">\n <div style=\"border-collapse: collapse;display: table;width: 100%;height: 100%;background-color: transparent;\">\n <!--[if (mso)|(IE)]><table width=\"100%\" cellpadding=\"0\" cellspacing=\"0\" border=\"0\"><tr><td style=\"padding: 0px;background-color: #f7f8f9;\" align=\"center\"><table cellpadding=\"0\" cellspacing=\"0\" border=\"0\" style=\"width:500px;\"><tr style=\"background-color: #ffffff;\"><![endif]-->\n \n<!--[if (mso)|(IE)]><td align=\"center\" width=\"500\" style=\"background-color: #f7f8f9;width: 500px;padding: 0px;border-top: 0px solid transparent;border-left: 0px solid transparent;border-right: 0px solid transparent;border-bottom: 0px solid transparent;border-radius: 0px;-webkit-border-radius: 0px; -moz-border-radius: 0px;\" valign=\"top\"><![endif]-->\n<div class=\"u-col u-col-100\" style=\"max-width: 320px;min-width: 500px;display: table-cell;vertical-align: top;\">\n <div style=\"background-color: #f7f8f9;height: 100%;width: 100% !important;border-radius: 0px;-webkit-border-radius: 0px; -moz-border-radius: 0px;\">\n <!--[if (!mso)&(!IE)]><!--><div style=\"box-sizing: border-box; height: 100%; padding: 0px;border-top: 0px solid transparent;border-left: 0px solid transparent;border-right: 0px solid transparent;border-bottom: 0px solid transparent;border-radius: 0px;-webkit-border-radius: 0px; -moz-border-radius: 0px;\"><!--<![endif]-->\n \n<table style=\"font-family:arial,helvetica,sans-serif;\" role=\"presentation\" cellpadding=\"0\" cellspacing=\"0\" width=\"100%\" border=\"0\">\n <tbody>\n <tr>\n <td style=\"overflow-wrap:break-word;word-break:break-word;padding:32px 10px;font-family:arial,helvetica,sans-serif;\" align=\"left\">\n \n <!--[if mso]><table width=\"100%\"><tr><td><![endif]-->\n <h1 style=\"margin: 0px; line-height: 140%; text-align: center; word-wrap: break-word; font-family: arial black,AvenirNext-Heavy,avant garde,arial; font-size: 22px; font-weight: 400;\"><span><span><span><span><span><span>Latest AI Grants</span></span></span></span></span></span></h1>\n <!--[if mso]></td></tr></table><![endif]-->\n\n </td>\n </tr>\n </tbody>\n</table>\n\n <!--[if (!mso)&(!IE)]><!--></div><!--<![endif]-->\n </div>\n</div>\n<!--[if (mso)|(IE)]></td><![endif]-->\n <!--[if (mso)|(IE)]></tr></table></td></tr></table><![endif]-->\n </div>\n </div>\n </div>\n \n\n\n \n \n<div class=\"u-row-container\" style=\"padding: 0px;background-color: #f7f8f9\">\n <div class=\"u-row\" style=\"margin: 0 auto;min-width: 320px;max-width: 500px;overflow-wrap: break-word;word-wrap: break-word;word-break: break-word;background-color: transparent;\">\n <div style=\"border-collapse: collapse;display: table;width: 100%;height: 100%;background-color: transparent;\">\n <!--[if (mso)|(IE)]><table width=\"100%\" cellpadding=\"0\" cellspacing=\"0\" border=\"0\"><tr><td style=\"padding: 0px;background-color: #f7f8f9;\" align=\"center\"><table cellpadding=\"0\" cellspacing=\"0\" border=\"0\" style=\"width:500px;\"><tr style=\"background-color: transparent;\"><![endif]-->\n \n<!--[if (mso)|(IE)]><td align=\"center\" width=\"500\" style=\"background-color: #ffffff;width: 500px;padding: 0px;border-top: 0px solid transparent;border-left: 0px solid transparent;border-right: 0px solid transparent;border-bottom: 0px solid transparent;border-radius: 0px;-webkit-border-radius: 0px; -moz-border-radius: 0px;\" valign=\"top\"><![endif]-->\n<div class=\"u-col u-col-100\" style=\"max-width: 320px;min-width: 500px;display: table-cell;vertical-align: top;\">\n <div style=\"background-color: #ffffff;height: 100%;width: 100% !important;border-radius: 0px;-webkit-border-radius: 0px; -moz-border-radius: 0px;\">\n <!--[if (!mso)&(!IE)]><!--><div style=\"box-sizing: border-box; height: 100%; padding: 0px;border-top: 0px solid transparent;border-left: 0px solid transparent;border-right: 0px solid transparent;border-bottom: 0px solid transparent;border-radius: 0px;-webkit-border-radius: 0px; -moz-border-radius: 0px;\"><!--<![endif]-->\n \n<table style=\"font-family:arial,helvetica,sans-serif;\" role=\"presentation\" cellpadding=\"0\" cellspacing=\"0\" width=\"100%\" border=\"0\">\n <tbody>\n <tr>\n <td style=\"overflow-wrap:break-word;word-break:break-word;padding:10px;font-family:arial,helvetica,sans-serif;\" align=\"left\">\n{{\n$input.all().map((input,idx) => {\nreturn `\n <div>\n <div style=\"padding-top:14px;padding-bottom:24px\">\n <h3 style=\"margin-top:0;margin-bottom:7px;font-size:16px\">\n ${idx+1}. ${input.json.Title}\n </h3>\n <div style=\"margin-bottom:14px;font-size:12px;\">\n <strong>${input.json.Agency}</strong>\n &middot;\n <a href=\"${input.json.URL}\">See details</a>\n </div>\n <p style=\"margin-bottom:14px;font-size:14px\">\n <strong>Synopsis:</strong> ${input.json.Goal}\n </p>\n <ul style=\"font-size:14px;\">\n ${input.json['Success Criteria']\n .split('\\n')\n .map(text => `<li>${text}</li>`)\n .join('')\n }\n </ul>\n <div style=\"font-size:12px;\">\n <strong>Posted By</strong> ${input.json['Posted Date']\n .toDateTime()\n .format('EEE, dd MMM yyyy t')}\n <br/>\n <strong>Respond By</strong> ${input.json['Response Date']\n .toDateTime()\n .format('EEE, dd MMM yyyy t')}\n \n </div>\n</div> \n`\n}).join('<hr/>')\n}} \n </td>\n </tr>\n </tbody>\n</table>\n\n <!--[if (!mso)&(!IE)]><!--></div><!--<![endif]-->\n </div>\n</div>\n<!--[if (mso)|(IE)]></td><![endif]-->\n <!--[if (mso)|(IE)]></tr></table></td></tr></table><![endif]-->\n </div>\n </div>\n </div>\n \n\n\n \n \n<div class=\"u-row-container\" style=\"padding: 0px;background-color: transparent\">\n <div class=\"u-row\" style=\"margin: 0 auto;min-width: 320px;max-width: 500px;overflow-wrap: break-word;word-wrap: break-word;word-break: break-word;background-color: transparent;\">\n <div style=\"border-collapse: collapse;display: table;width: 100%;height: 100%;background-color: transparent;\">\n <!--[if (mso)|(IE)]><table width=\"100%\" cellpadding=\"0\" cellspacing=\"0\" border=\"0\"><tr><td style=\"padding: 0px;background-color: transparent;\" align=\"center\"><table cellpadding=\"0\" cellspacing=\"0\" border=\"0\" style=\"width:500px;\"><tr style=\"background-color: transparent;\"><![endif]-->\n \n<!--[if (mso)|(IE)]><td align=\"center\" width=\"500\" style=\"width: 500px;padding: 0px;border-top: 0px solid transparent;border-left: 0px solid transparent;border-right: 0px solid transparent;border-bottom: 0px solid transparent;border-radius: 0px;-webkit-border-radius: 0px; -moz-border-radius: 0px;\" valign=\"top\"><![endif]-->\n<div class=\"u-col u-col-100\" style=\"max-width: 320px;min-width: 500px;display: table-cell;vertical-align: top;\">\n <div style=\"height: 100%;width: 100% !important;border-radius: 0px;-webkit-border-radius: 0px; -moz-border-radius: 0px;\">\n <!--[if (!mso)&(!IE)]><!--><div style=\"box-sizing: border-box; height: 100%; padding: 0px;border-top: 0px solid transparent;border-left: 0px solid transparent;border-right: 0px solid transparent;border-bottom: 0px solid transparent;border-radius: 0px;-webkit-border-radius: 0px; -moz-border-radius: 0px;\"><!--<![endif]-->\n \n<table style=\"font-family:arial,helvetica,sans-serif;\" role=\"presentation\" cellpadding=\"0\" cellspacing=\"0\" width=\"100%\" border=\"0\">\n <tbody>\n <tr>\n <td style=\"overflow-wrap:break-word;word-break:break-word;padding:24px 10px;font-family:arial,helvetica,sans-serif;\" align=\"left\">\n \n <div style=\"font-size: 14px; color: #7e8c8d; line-height: 140%; text-align: center; word-wrap: break-word;\">\n <p style=\"line-height: 140%;\">Autogenerated by n8n.</p>\n<p style=\"line-height: 140%;\">Brought to you by workflow #{{ $workflow.id }}</p>\n </div>\n\n </td>\n </tr>\n </tbody>\n</table>\n\n <!--[if (!mso)&(!IE)]><!--></div><!--<![endif]-->\n </div>\n</div>\n<!--[if (mso)|(IE)]></td><![endif]-->\n <!--[if (mso)|(IE)]></tr></table></td></tr></table><![endif]-->\n </div>\n </div>\n </div>\n \n\n\n <!--[if (mso)|(IE)]></td></tr></table><![endif]-->\n </td>\n </tr>\n </tbody>\n </table>\n <!--[if mso]></div><![endif]-->\n <!--[if IE]></div><![endif]-->\n</body>\n\n</html>\n"
  },
  "executeOnce": true,
  "typeVersion": 1.2
}

================ Node #2779 ================
{
  "id": "12bd72f5-3028-4572-b59e-1cc143e44a86",
  "name": "Everyday @ 9am",
  "type": "n8n-nodes-base.scheduleTrigger",
  "position": [
    -720,
    460
  ],
  "parameters": {
    "rule": {
      "interval": [
        {
          "triggerAtHour": 8
        }
      ]
    }
  },
  "typeVersion": 1.2
}

================ Node #2780 ================
{
  "id": "ca62c507-bce5-4a63-be0e-e60591408668",
  "name": "Everyday @ 8.30am",
  "type": "n8n-nodes-base.scheduleTrigger",
  "position": [
    -720,
    -220
  ],
  "parameters": {
    "rule": {
      "interval": [
        {
          "triggerAtHour": 8,
          "triggerAtMinute": 30
        }
      ]
    }
  },
  "typeVersion": 1.2
}

================ Node #2781 ================
{
  "id": "032bec7e-5aff-4103-b81e-e5bc4a88ddde",
  "name": "Sticky Note",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    -540,
    -420
  ],
  "parameters": {
    "color": 7,
    "width": 700,
    "height": 480,
    "content": "## 1. Fetch Latest AI Grants, Ignore Those Already Seen\n[Learn more about the Remove Duplicates node](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.removeduplicates/)\n\nA cool feature of n8n's remove duplicates node is that it works across executions. What this means for this template is that the node will help us keep track of grant IDs to know if we've already processed them and if so, filter them out so we won't have duplicate alerts."
  },
  "typeVersion": 1
}

================ Node #2782 ================
{
  "id": "07147665-3571-4512-adce-2727dcb95240",
  "name": "Sticky Note1",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    180,
    -520
  ],
  "parameters": {
    "color": 7,
    "width": 1000,
    "height": 720,
    "content": "## 2. Quickly Determine Eligibility Using AI\n[Learn more about the Information Extractor node](https://docs.n8n.io/integrations/builtin/cluster-nodes/root-nodes/n8n-nodes-langchain.information-extractor/)\n\nQualifying Leads requires a lot of contextual reasoning taking into account many factors such as commercials, location and eligibility criteria. Whilst it's not guaranteed AI can or will solve this for your particular requirements, it can however get you a good distance of the way there!\n\nAI in this template intends to reduce time (and therefore cost) for a team member needs to spend per grant listing or increase their coverage of grants which they would otherwise miss due to capacity."
  },
  "typeVersion": 1
}

================ Node #2783 ================
{
  "id": "f4758b4d-727a-4ce8-b071-3388eb16b219",
  "name": "Sticky Note2",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    1200,
    -280
  ],
  "parameters": {
    "color": 7,
    "width": 520,
    "height": 480,
    "content": "## 3. Save Results to Grant Tracker\n[Learn more about the Airtable Node](https://docs.n8n.io/integrations/builtin/app-nodes/n8n-nodes-base.airtable/)\n\nIn n8n, it's easy to send your data anywhere to manage yourself, share with your team or reuse with other workflows. Here for demonstration purposes, we'll just store each grant as a row in our Airtable database.\n\nCheck out the sample Airtable here: https://airtable.com/appiNoPRvhJxz9crl/shrRdP6zstgsxjDKL"
  },
  "typeVersion": 1
}

================ Node #2784 ================
{
  "id": "a7861a21-021f-4629-b863-2163c7436d13",
  "name": "Sticky Note3",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    -540,
    240
  ],
  "parameters": {
    "color": 7,
    "width": 620,
    "height": 500,
    "content": "## 4. Generate Latest AI Grants Alert Email\n[Learn more about the HTML Template node](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.html/)\n\nUsing our freshly collected AI grants, it would be nice if we can share them with our team members via email. A nicely formatted email digest can be generated using the HTML template node, with added links for greater impact.\n\nHere in this demonstration, we will loop through all eligible new grants and compile them into a newsletter format using the HTML node.\n"
  },
  "typeVersion": 1
}

================ Node #2785 ================
{
  "id": "4d09af53-92cb-4288-86d7-dcf695bfb358",
  "name": "Sticky Note4",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    100,
    240
  ],
  "parameters": {
    "color": 7,
    "width": 640,
    "height": 500,
    "content": "## 5. Send to a list of Subscribers\n[Learn more about the Gmail node](https://docs.n8n.io/integrations/builtin/app-nodes/n8n-nodes-base.gmail/)\n\nFinally, we can source a list of subscribers to send our generated email newsletter.\n\nHere, our subscriber list is another table alongside our grants table that we can import that list using the Airtable node. You can use any email provider that supports HTML but for this demonstration, we're using Gmail for simplicity sake."
  },
  "typeVersion": 1
}

================ Node #2786 ================
{
  "id": "784d59f3-5b1f-4404-bc04-4bd58cf03585",
  "name": "Get Subscribers",
  "type": "n8n-nodes-base.airtable",
  "position": [
    240,
    500
  ],
  "parameters": {
    "base": {
      "__rl": true,
      "mode": "list",
      "value": "appiNoPRvhJxz9crl",
      "cachedResultUrl": "https://airtable.com/appiNoPRvhJxz9crl",
      "cachedResultName": "US Grants.gov Tracker"
    },
    "table": {
      "__rl": true,
      "mode": "list",
      "value": "tblaS91hyhguntfaC",
      "cachedResultUrl": "https://airtable.com/appiNoPRvhJxz9crl/tblaS91hyhguntfaC",
      "cachedResultName": "Subscribers"
    },
    "options": {},
    "operation": "search",
    "filterByFormula": "AND({Status} = 'Active')"
  },
  "credentials": {
    "airtableTokenApi": {
      "id": "Und0frCQ6SNVX3VV",
      "name": "Airtable Personal Access Token account"
    }
  },
  "executeOnce": true,
  "typeVersion": 2.1
}

================ Node #2787 ================
{
  "id": "3be0788b-90ef-4648-aa25-1170208a685d",
  "name": "Send Subscriber Email",
  "type": "n8n-nodes-base.gmail",
  "position": [
    480,
    500
  ],
  "webhookId": "37eeec7a-1982-4137-8473-313bfb6c5b42",
  "parameters": {
    "sendTo": "={{ $json.Email }}",
    "message": "={{ $('Generate Email').first().json.html }}",
    "options": {},
    "subject": "Daily Newletter for Intersting US Grants"
  },
  "credentials": {
    "gmailOAuth2": {
      "id": "Sf5Gfl9NiFTNXFWb",
      "name": "Gmail account"
    }
  },
  "typeVersion": 2.1
}

================ Node #2788 ================
{
  "id": "14a65482-b314-4a2f-9ce3-87e3aae126f9",
  "name": "Sticky Note5",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    -1280,
    300
  ],
  "parameters": {
    "color": 7,
    "width": 460,
    "height": 200,
    "content": "## Scheduled Triggers\n[Learn more about Scheduled Triggers](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.scheduletrigger)\n\nScheduled triggers are a great way to run this template automatically in the morning ready for your team before they start their working day.\n\nFeel free to adjust the interval to a time which suits you!"
  },
  "typeVersion": 1
}

================ Node #2789 ================
{
  "id": "b172eb7a-58bc-4d4a-be22-796d34a59897",
  "name": "Sticky Note6",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    -1280,
    -620
  ],
  "parameters": {
    "width": 460,
    "height": 900,
    "content": "## Try It Out!\n\n### This n8n templates demonstrates how to automatically ingest a source of leads at regular intervals and take advantage of n8n's remove duplicates node to simplify duplicate detection.\nAdditionally after the leads are captured, a simple alerts notification can be generated and shared with team members.\n\n### How it works\n* A scheduled trigger is set to fetch a list of AI grants listed on the grants.gov website in the past day.\n* A Remove Duplicates node is used to track Grant IDs to filter out those already processed by the workflow.\n* New grants are summarized and analysed by AI nodes to determine eligibility and interest which is then saved to an Airtable database.\n* Another scheduled trigger starts a little later than the first to collect and summarize the new grants\n* The results are then compiled into an email template using the HTML node, in the form of a newsletter designed to alert and brief team members of new AI grants.\n* This email is then sent to a list of subscribers using the gmail node.\n\n## How to use\n* Make a copy of sample Airtable here: https://airtable.com/appiNoPRvhJxz9crl/shrRdP6zstgsxjDKL\n* The filters for fetching the grants is currently set to the \"AI\" category. Feel free to change this to include more categories.\n* Not interested in grants, this template can works for other sources of leads just change the endpoint and how you're defining the item ID to track.\n\n\n### Need Help?\nJoin the [Discord](https://discord.com/invite/XPKeKXeB7d) or ask in the [Forum](https://community.n8n.io/)!\n\nHappy Hacking!"
  },
  "typeVersion": 1
}

================ Node #2790 ================
{
  "id": "f9849413-4dad-44dc-92ec-8879d123bfd3",
  "name": "Sticky Note7",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    720,
    40
  ],
  "parameters": {
    "width": 320,
    "height": 120,
    "content": "### Add your company details here!\nCompany details are added in the system prompt to help the AI determine eligibility. The more details the better!"
  },
  "typeVersion": 1
}

================ Node #2791 ================
{
  "id": "201ef455-2d65-4563-8ec1-318211b1fa6a",
  "name": "Get Message Contents",
  "type": "n8n-nodes-base.gmail",
  "position": [
    2080,
    500
  ],
  "webhookId": "fa1d496f-17fa-4e50-bae9-84ca85ed4502",
  "parameters": {
    "simple": false,
    "options": {},
    "messageId": "={{ $json.id }}",
    "operation": "get"
  },
  "credentials": {
    "gmailOAuth2": {
      "id": "Sf5Gfl9NiFTNXFWb",
      "name": "Gmail account"
    }
  },
  "typeVersion": 2.1
}

================ Node #2792 ================
{
  "id": "ded010af-e977-4c47-87dd-8221d601af74",
  "name": "Simplify Emails",
  "type": "n8n-nodes-base.set",
  "position": [
    2240,
    500
  ],
  "parameters": {
    "options": {},
    "assignments": {
      "assignments": [
        {
          "id": "2006c806-42db-4457-84c2-35f59ed39018",
          "name": "date",
          "type": "string",
          "value": "={{ $json.date }}"
        },
        {
          "id": "872278d2-b97c-45ba-a9d3-162f154fe7dc",
          "name": "subject",
          "type": "string",
          "value": "={{ $json.subject }}"
        },
        {
          "id": "282f03e9-1d0f-4a17-b9ed-75b44171d4ee",
          "name": "text",
          "type": "string",
          "value": "={{ $json.text }}"
        },
        {
          "id": "9421776c-ff53-4490-b0e1-1e610534ba25",
          "name": "from",
          "type": "string",
          "value": "={{ $json.from.value[0].name }} ({{ $json.from.value[0].address }})"
        },
        {
          "id": "3b6716e8-5582-4da3-ae9d-e8dd1afad530",
          "name": "to",
          "type": "string",
          "value": "={{ $json.to.value[0].name }} ({{ $json.to.value[0].address }})"
        }
      ]
    }
  },
  "typeVersion": 3.4
}

================ Node #2793 ================
{
  "id": "816bf787-ff9c-4b97-80ac-4b0c6ae5638b",
  "name": "Check For Upcoming Meetings",
  "type": "n8n-nodes-base.googleCalendar",
  "position": [
    526,
    -180
  ],
  "parameters": {
    "limit": 1,
    "options": {
      "orderBy": "startTime",
      "timeMax": "={{ $now.toUTC().plus(1, 'hour') }}",
      "timeMin": "={{ $now.toUTC() }}",
      "singleEvents": true
    },
    "calendar": {
      "__rl": true,
      "mode": "list",
      "value": "c_5792bdf04bc395cbcbc6f7b754268245a33779d36640cc80a357711aa2f09a0a@group.calendar.google.com",
      "cachedResultName": "n8n-events"
    },
    "operation": "getAll"
  },
  "credentials": {
    "googleCalendarOAuth2Api": {
      "id": "kWMxmDbMDDJoYFVK",
      "name": "Google Calendar account"
    }
  },
  "typeVersion": 1.2
}

================ Node #2794 ================
{
  "id": "234d5c79-bf40-44bb-8829-c6ccf8648359",
  "name": "OpenAI Chat Model2",
  "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
  "position": [
    920,
    -20
  ],
  "parameters": {
    "model": "gpt-4o-2024-08-06",
    "options": {}
  },
  "credentials": {
    "openAiApi": {
      "id": "8gccIjcuf3gvaoEr",
      "name": "OpenAi account"
    }
  },
  "typeVersion": 1
}

================ Node #2795 ================
{
  "id": "445aa0f4-d41a-4d46-aa2f-e79a9cdb04b5",
  "name": "Extract Attendee Information",
  "type": "@n8n/n8n-nodes-langchain.informationExtractor",
  "position": [
    920,
    -180
  ],
  "parameters": {
    "text": "=start: {{ $json.start.dateTime }}\nmeeting url: {{ $json.hangoutLink }}\nsummary: {{ $json.summary }}\ndescription: {{ $json.description }}\norganiser: {{ $json.organizer.displayName }} ({{ $json.organizer.email }})\nattendees: {{ $json.attendees.filter(item => !item.organizer).map(item => item.email).join(',') }}",
    "options": {
      "systemPromptTemplate": "You are an expert extraction algorithm. Try to link any information found in the description to help fill in the attendee details.\nIf you do not know the value of an attribute asked to extract, you may omit the attribute's value."
    },
    "schemaType": "manual",
    "inputSchema": "{\n\t\"type\": \"object\",\n\t\"properties\": {\n\t\t\"attendees\": {\n \"type\": \"array\",\n \"description\": \"list of attendees excluding the meeting organiser\",\n \"items\": {\n\t\t\t\"type\": \"object\",\n\t\t\t\"properties\": {\n\t\t\t \"name\": { \"type\": \"string\" },\n \"email\": { \"type\": \"string\" },\n \"linkedin_url\": { \"type\": \"string\" }\n\t\t\t}\n }\n\t\t}\n\t}\n}"
  },
  "typeVersion": 1
}

================ Node #2796 ================
{
  "id": "390743d8-acfd-4951-8901-212f162dcbb4",
  "name": "Execute Workflow Trigger",
  "type": "n8n-nodes-base.executeWorkflowTrigger",
  "position": [
    920,
    580
  ],
  "parameters": {},
  "typeVersion": 1
}

================ Node #2797 ================
{
  "id": "ea9c76a0-40a0-413a-a93a-ad99069d0d91",
  "name": "OpenAI Chat Model",
  "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
  "position": [
    2460,
    640
  ],
  "parameters": {
    "model": "gpt-4o-2024-08-06",
    "options": {}
  },
  "credentials": {
    "openAiApi": {
      "id": "8gccIjcuf3gvaoEr",
      "name": "OpenAi account"
    }
  },
  "typeVersion": 1
}

================ Node #2798 ================
{
  "id": "8d9df9e4-1815-44a2-a6fc-a9af42a77153",
  "name": "Get Last Correspondence",
  "type": "n8n-nodes-base.gmail",
  "position": [
    1740,
    500
  ],
  "webhookId": "b00c960c-3689-4fa1-9f0f-7d6c9479f0c6",
  "parameters": {
    "limit": 1,
    "filters": {
      "sender": "={{ $json.email }}"
    },
    "operation": "getAll"
  },
  "credentials": {
    "gmailOAuth2": {
      "id": "Sf5Gfl9NiFTNXFWb",
      "name": "Gmail account"
    }
  },
  "typeVersion": 2.1,
  "alwaysOutputData": true
}

================ Node #2799 ================
{
  "id": "23c7161f-60e2-4a99-9279-ff1dca5efc1c",
  "name": "OpenAI Chat Model1",
  "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
  "position": [
    4020,
    1320
  ],
  "parameters": {
    "model": "gpt-4o-2024-08-06",
    "options": {}
  },
  "credentials": {
    "openAiApi": {
      "id": "8gccIjcuf3gvaoEr",
      "name": "OpenAi account"
    }
  },
  "typeVersion": 1
}

================ Node #2800 ================
{
  "id": "9ab535aa-bd8c-4bd6-a7a0-f7182d8d7123",
  "name": "OpenAI Chat Model3",
  "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
  "position": [
    2720,
    -20
  ],
  "parameters": {
    "model": "gpt-4o-2024-08-06",
    "options": {}
  },
  "credentials": {
    "openAiApi": {
      "id": "8gccIjcuf3gvaoEr",
      "name": "OpenAi account"
    }
  },
  "typeVersion": 1
}

================ Node #2801 ================
{
  "id": "410acb11-a16c-4abd-9f10-7582168d100e",
  "name": "WhatsApp Business Cloud",
  "type": "n8n-nodes-base.whatsApp",
  "position": [
    3360,
    -140
  ],
  "parameters": {
    "textBody": "={{ $json.text }}",
    "operation": "send",
    "phoneNumberId": "477115632141067",
    "requestOptions": {},
    "additionalFields": {},
    "recipientPhoneNumber": "44123456789"
  },
  "credentials": {
    "whatsAppApi": {
      "id": "9SFJPeqrpChOkAmw",
      "name": "WhatsApp account"
    }
  },
  "typeVersion": 1
}

================ Node #2802 ================
{
  "id": "a7e8195d-eb73-4acb-aae1-eb04f8290d24",
  "name": "Sticky Note",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    180,
    -400
  ],
  "parameters": {
    "color": 7,
    "width": 616.7897454470152,
    "height": 449.1424626006906,
    "content": "## 1. Periodically Search For Upcoming Meetings\n[Read about the Scheduled Trigger](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.scheduletrigger)\n\nLet's use the Scheduled Trigger node to trigger our Assistant to notify about upcoming meetings. Here, we'll set it for 1 hour intervals to check for meetings scheduled in our Google Calendar. You may need to play with the intervals and frequency depending on how many meetings you typically have."
  },
  "typeVersion": 1
}

================ Node #2803 ================
{
  "id": "1aebb209-e440-4ef2-8527-381e5e70b4ea",
  "name": "Schedule Trigger",
  "type": "n8n-nodes-base.scheduleTrigger",
  "position": [
    326,
    -180
  ],
  "parameters": {
    "rule": {
      "interval": [
        {
          "field": "hours"
        }
      ]
    }
  },
  "typeVersion": 1.2
}

================ Node #2804 ================
{
  "id": "95758053-fcc2-45c6-96c2-ec0bf89bcb82",
  "name": "Sticky Note1",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    820,
    -520
  ],
  "parameters": {
    "color": 7,
    "width": 655.5654775604146,
    "height": 670.4114154200236,
    "content": "## 2. Extract Attendee Details From Invite\n[Learn more about the Information Extractor node](https://docs.n8n.io/integrations/builtin/cluster-nodes/root-nodes/n8n-nodes-langchain.information-extractor/)\n\nOnce we have our upcoming meeting, it'll be nice to prepare for it by reminding the user what the meeting is about and some context with the attendees. This will be the goal this template and of our assistant! However, first we'll need to extract some contact information of the attendees to do so.\n\nFor this demonstration, we'll assume that attendee's email and LinkedIn profile URLs are included in the meeting invite. We'll extract this information for each attendee using the Information Extractor node. This convenient node uses AI to parse and extract which saves us from writing complex pattern matching code otherwise.\n\nIn your own scenario, feel free to use your CRM to get this information instead."
  },
  "typeVersion": 1
}

================ Node #2805 ================
{
  "id": "bd17aed0-9c96-4301-b09b-e61a03ebc1ac",
  "name": "Sticky Note2",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    1500,
    -520
  ],
  "parameters": {
    "color": 7,
    "width": 1020.0959898041108,
    "height": 670.8210817031078,
    "content": "## 3. Fetch Recent Correspondance & LinkedIn Activity\n[Learn more about the Execute Workflow node](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.executeworkflow)\n\nAs both email fetching and LinkedIn scraping actions are quite complex, we'll split them out as subworkflow executions. Doing so (in my honest opinion), helps with development and maintainability of the template. Here, we'll make perform the research for all applicable attendees by making 2 calls to the subworkflow and merging them back into a single node at the end.\n\nHead over to the subworkflow (see below - step 3a) to see how we pull the summaries from Gmail and LinkedIn."
  },
  "typeVersion": 1
}

================ Node #2806 ================
{
  "id": "ae804039-32e0-4d2d-a2ef-a6e8d65f7ce2",
  "name": "Sticky Note3",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    2547.540603371386,
    -440
  ],
  "parameters": {
    "color": 7,
    "width": 610.3630186140072,
    "height": 582.1201380897592,
    "content": "## 4. Generate Pre-Meeting Notification\n[Read more about the Basic LLM node](https://docs.n8n.io/integrations/builtin/cluster-nodes/root-nodes/n8n-nodes-langchain.chainllm)\n\nNow that we have (1) our upcoming meeting details and (2) recent email and/or Linkedin summaries about our attendee, let's feed them into our LLM node to generate the best pre-meeting notification ever seen! Of course, we'll need to keep it short as we intend to send this notification via WhatsApp message but should you choose to use another channel such as email, feel free to adjust the length of the message which suits."
  },
  "typeVersion": 1
}

================ Node #2807 ================
{
  "id": "045eb1d9-fd80-4f9c-8218-ae66583d0186",
  "name": "Sticky Note4",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    3180,
    -360
  ],
  "parameters": {
    "color": 7,
    "width": 466.8967433831988,
    "height": 454.24485615650235,
    "content": "## 5. Send Notification via WhatsApp\n[Learn more about the WhatsApp node](https://docs.n8n.io/integrations/builtin/app-nodes/n8n-nodes-base.whatsapp)\n\nThe WhatsApp node is a super convenient way to send messages to WhatsApp which is one of the many messaging apps supported by n8n out of the box. Not using WhatsApp? Simply swap this our for Twilio, Telegram, Slack and others."
  },
  "typeVersion": 1
}

================ Node #2808 ================
{
  "id": "46d35c68-88d7-445f-9834-b8b37ce90619",
  "name": "Sticky Note5",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    1740,
    260
  ],
  "parameters": {
    "color": 7,
    "width": 519.1145893777881,
    "height": 190.5042226526524,
    "content": "## 3.2: Fetch Last Email Correspondance\n[Learn more about Gmail node](https://docs.n8n.io/integrations/builtin/app-nodes/n8n-nodes-base.gmail)\n\nFetching our attendee's last email will definitely help the user \"pick up\" from when they last last off. To do this, we'll assume a Gmail user and use the Gmail node to filter messages by the attendee's email address."
  },
  "typeVersion": 1
}

================ Node #2809 ================
{
  "id": "fe1c751c-4879-482b-bb6f-89df23e1faa8",
  "name": "Sticky Note6",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    1740,
    860
  ],
  "parameters": {
    "color": 7,
    "width": 667.8619481635637,
    "height": 259.7914017217902,
    "content": "## 3.4 Scraping LinkedIn With [Apify.com](https://www.apify.com?fpr=414q6)\n[Learn more about Apify.com for Web Scraping](https://www.apify.com?fpr=414q6)\n\nTo get the attendee's recent LinkedIn activity, we'll need a webscraper capable of rendering the user's LinkedIn profile. We'll use [Apify.com](https://www.apify.com?fpr=414q6) which is a commercial web scraping service but has a very generous monthly free tier ($5/mo).\n\nWhile Apify offers a number of dedicated LinkedIn scrapers, we'll build our own which works by impersonating our own LinkedIn account using our login cookie - this can be obtained by inspecting network requests when logged into Linkedin. **Add your LinkedIn Cookie to the node below!**"
  },
  "typeVersion": 1
}

================ Node #2810 ================
{
  "id": "a648cf7d-b859-4fec-8ae7-6450c70e6333",
  "name": "Sticky Note7",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    920,
    310
  ],
  "parameters": {
    "color": 7,
    "width": 572.0305871208889,
    "height": 231.49547088049098,
    "content": "## 3.1 Attendee Researcher SubWorkflow\n[Learn more about using Execute Workflow Trigger](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.executeworkflowtrigger/)\n\nThe Attendee Researcher SubWorkflow's aims to collect and summarize both an attendee's last correspondance with the user (if applicable) and the attendee's LinkedIn profile (if available). It uses the router pattern to handle both branches allowing for shorter execution chains. Using the Switch node, this subworkflow is either triggered to fetch emails or scrape LinkedIn but never both simultaneously."
  },
  "typeVersion": 1
}

================ Node #2811 ================
{
  "id": "8a8dbe4f-86b1-41a4-9b7e-3affdee8e524",
  "name": "Return LinkedIn Success",
  "type": "n8n-nodes-base.set",
  "position": [
    4360,
    1180
  ],
  "parameters": {
    "options": {},
    "assignments": {
      "assignments": [
        {
          "id": "fc4b63a7-ad4d-49ff-9d42-715760910f6a",
          "name": "linkedin_summary",
          "type": "string",
          "value": "={{ $json.text }}"
        }
      ]
    }
  },
  "typeVersion": 3.4
}

================ Node #2812 ================
{
  "id": "537a399b-1f78-440b-abc4-ad2e91c5950a",
  "name": "Return LinkedIn Error",
  "type": "n8n-nodes-base.set",
  "position": [
    2380,
    1320
  ],
  "parameters": {
    "options": {},
    "assignments": {
      "assignments": [
        {
          "id": "bf5a0781-3bad-4f63-a49c-273b03204747",
          "name": "linkedin_summary",
          "type": "string",
          "value": "No activities found."
        }
      ]
    }
  },
  "typeVersion": 3.4
}

================ Node #2813 ================
{
  "id": "a68e7df7-8467-46e2-8ea8-fcf270755d12",
  "name": "Return Email Error",
  "type": "n8n-nodes-base.set",
  "position": [
    2080,
    680
  ],
  "parameters": {
    "options": {},
    "assignments": {
      "assignments": [
        {
          "id": "9a7efc9e-26b0-48c9-83aa-ae989f20b1df",
          "name": "email_summary",
          "type": "string",
          "value": "No correspondance found."
        }
      ]
    }
  },
  "typeVersion": 3.4
}

================ Node #2814 ================
{
  "id": "00df2b18-22ca-48d6-b053-12fe502effc5",
  "name": "Return Email Success",
  "type": "n8n-nodes-base.set",
  "position": [
    2800,
    500
  ],
  "parameters": {
    "options": {},
    "assignments": {
      "assignments": [
        {
          "id": "fc4b63a7-ad4d-49ff-9d42-715760910f6a",
          "name": "email_summary",
          "type": "object",
          "value": "={{ $json.text }}"
        }
      ]
    }
  },
  "typeVersion": 3.4
}

================ Node #2815 ================
{
  "id": "cdae9f9f-11c0-4f26-9ba1-5d5ed279ebfc",
  "name": "Set Route Email",
  "type": "n8n-nodes-base.set",
  "position": [
    1600,
    -260
  ],
  "parameters": {
    "mode": "raw",
    "options": {},
    "jsonOutput": "={{ Object.assign({ \"route\": \"email\" }, $json) }}"
  },
  "typeVersion": 3.4
}

================ Node #2816 ================
{
  "id": "b01371f6-8871-4ad9-866d-888e22e7908e",
  "name": "Set Route Linkedin",
  "type": "n8n-nodes-base.set",
  "position": [
    1600,
    -100
  ],
  "parameters": {
    "mode": "raw",
    "options": {},
    "jsonOutput": "={{ Object.assign({ \"route\": \"linkedin\" }, $json) }}"
  },
  "typeVersion": 3.4
}

================ Node #2817 ================
{
  "id": "c4907171-b239-46a6-a0b0-6bf66570005f",
  "name": "Router",
  "type": "n8n-nodes-base.switch",
  "position": [
    1100,
    580
  ],
  "parameters": {
    "rules": {
      "values": [
        {
          "outputKey": "email",
          "conditions": {
            "options": {
              "version": 2,
              "leftValue": "",
              "caseSensitive": true,
              "typeValidation": "strict"
            },
            "combinator": "and",
            "conditions": [
              {
                "operator": {
                  "type": "string",
                  "operation": "equals"
                },
                "leftValue": "={{ $json.route }}",
                "rightValue": "email"
              }
            ]
          },
          "renameOutput": true
        },
        {
          "outputKey": "linkedin",
          "conditions": {
            "options": {
              "version": 2,
              "leftValue": "",
              "caseSensitive": true,
              "typeValidation": "strict"
            },
            "combinator": "and",
            "conditions": [
              {
                "id": "ba71a258-de67-4f61-a24a-33c86bd4c4f5",
                "operator": {
                  "type": "string",
                  "operation": "equals"
                },
                "leftValue": "={{ $json.route }}",
                "rightValue": "linkedin"
              }
            ]
          },
          "renameOutput": true
        }
      ]
    },
    "options": {}
  },
  "typeVersion": 3.2
}

================ Node #2818 ================
{
  "id": "45554355-57ad-464d-b768-5b00d707fc58",
  "name": "Return LinkedIn Error1",
  "type": "n8n-nodes-base.set",
  "position": [
    1440,
    870
  ],
  "parameters": {
    "options": {},
    "assignments": {
      "assignments": [
        {
          "id": "bf5a0781-3bad-4f63-a49c-273b03204747",
          "name": "linkedin_summary",
          "type": "string",
          "value": "No activities found."
        }
      ]
    }
  },
  "typeVersion": 3.4
}

================ Node #2819 ================
{
  "id": "05b04c17-eeeb-42f2-8d94-bc848889f17c",
  "name": "Has Emails?",
  "type": "n8n-nodes-base.if",
  "position": [
    1900,
    500
  ],
  "parameters": {
    "options": {},
    "conditions": {
      "options": {
        "version": 2,
        "leftValue": "",
        "caseSensitive": true,
        "typeValidation": "strict"
      },
      "combinator": "and",
      "conditions": [
        {
          "id": "ff11640a-33e4-4695-a62c-7dcab57f0ae5",
          "operator": {
            "type": "object",
            "operation": "empty",
            "singleValue": true
          },
          "leftValue": "={{ $json }}",
          "rightValue": ""
        }
      ]
    }
  },
  "typeVersion": 2.2
}

================ Node #2820 ================
{
  "id": "c24aca66-6222-46ae-bb9b-1838b01f3100",
  "name": "Return Email Error1",
  "type": "n8n-nodes-base.set",
  "position": [
    1440,
    700
  ],
  "parameters": {
    "options": {},
    "assignments": {
      "assignments": [
        {
          "id": "9a7efc9e-26b0-48c9-83aa-ae989f20b1df",
          "name": "email_summary",
          "type": "string",
          "value": "No correspondance found."
        }
      ]
    }
  },
  "typeVersion": 3.4
}

================ Node #2821 ================
{
  "id": "22f3ccbf-19a2-4ca5-ba23-f91963b52c0a",
  "name": "Sticky Note9",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    2560,
    920
  ],
  "parameters": {
    "color": 7,
    "width": 682.7350931085596,
    "height": 219.59936012669806,
    "content": "## 3.5: Extract LinkedIn Profile & Recent Activity\n[Learn more about the HTML node](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.html)\n\nOnce we have our scraped LinkedIn profile, it's just a simple case of parsing and extracting the relevant sections from the page.\nFor the purpose of our workflow, we'll only need the \"About\" and \"Activity\" sections which we'll pull out of the page using a series of HTML nodes. Feel free to extract other sections to suit your needs! Once extracted, we'll combine the about and activities data in preparation of sending it to our LLM."
  },
  "typeVersion": 1
}

================ Node #2822 ================
{
  "id": "49b1fc8f-1259-4596-84b0-b37fae1c098c",
  "name": "Sections To List",
  "type": "n8n-nodes-base.splitOut",
  "position": [
    2720,
    1180
  ],
  "parameters": {
    "options": {
      "destinationFieldName": "data"
    },
    "fieldToSplitOut": "sections"
  },
  "typeVersion": 1
}

================ Node #2823 ================
{
  "id": "875b278d-44c6-4315-87e3-459a90799a9b",
  "name": "Set LinkedIn Cookie",
  "type": "n8n-nodes-base.set",
  "position": [
    1800,
    1180
  ],
  "parameters": {
    "options": {},
    "assignments": {
      "assignments": [
        {
          "id": "b4354c00-cc1a-4a55-8b44-6ba4854cc6ba",
          "name": "linkedin_profile_url",
          "type": "string",
          "value": "={{ $json.linkedin_url }}"
        },
        {
          "id": "4888db89-2573-4246-8ab9-c106a7fe5f38",
          "name": "linkedin_cookies",
          "type": "string",
          "value": "<COPY_YOUR_LINKEDIN_COOKIES_HERE>"
        }
      ]
    }
  },
  "typeVersion": 3.4
}

================ Node #2824 ================
{
  "id": "91da49ab-86a1-4539-b673-106b9edaeae9",
  "name": "Sticky Note8",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    1400,
    1240
  ],
  "parameters": {
    "color": 3,
    "width": 308.16846950517856,
    "height": 110.18457997698513,
    "content": "### Be aware of LinkedIn T&Cs!\nFor production, you may want to consider not using your main Linkedin account if you can help it!"
  },
  "typeVersion": 1
}

================ Node #2825 ================
{
  "id": "7abd390f-36a6-49af-b190-5bb720bd2ae8",
  "name": "Sticky Note10",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    1740,
    1152
  ],
  "parameters": {
    "width": 209.84856156501735,
    "height": 301.5806674338321,
    "content": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n### \ud83d\udea8 Input Required!\nYou need to add your cuurent linkedIn Cookies here to continue."
  },
  "typeVersion": 1
}

================ Node #2826 ================
{
  "id": "40dfb438-76c2-40b5-8945-94dcf7cafcf7",
  "name": "Attendees to List",
  "type": "n8n-nodes-base.splitOut",
  "position": [
    1260,
    -180
  ],
  "parameters": {
    "options": {},
    "fieldToSplitOut": "output.attendees"
  },
  "typeVersion": 1
}

================ Node #2827 ================
{
  "id": "cc7f8416-6ea1-4425-a320-3f8217d2ad4e",
  "name": "Merge Attendee with Summaries",
  "type": "n8n-nodes-base.set",
  "position": [
    2160,
    -180
  ],
  "parameters": {
    "mode": "raw",
    "options": {},
    "jsonOutput": "={{ Object.assign({}, $('Attendees to List').item.json, $json) }}"
  },
  "typeVersion": 3.4
}

================ Node #2828 ================
{
  "id": "459c5f2b-5dd5-491f-8bed-475ae5af7ac0",
  "name": "Has Email Address?",
  "type": "n8n-nodes-base.if",
  "position": [
    1280,
    580
  ],
  "parameters": {
    "options": {},
    "conditions": {
      "options": {
        "version": 2,
        "leftValue": "",
        "caseSensitive": true,
        "typeValidation": "strict"
      },
      "combinator": "and",
      "conditions": [
        {
          "id": "1382e335-bfae-4665-a2ee-a05496a7b463",
          "operator": {
            "type": "string",
            "operation": "exists",
            "singleValue": true
          },
          "leftValue": "={{ $json.email }}",
          "rightValue": ""
        }
      ]
    }
  },
  "typeVersion": 2.2
}

================ Node #2829 ================
{
  "id": "610e9849-f06c-4534-a269-d1982dcab259",
  "name": "Has LinkedIn URL?",
  "type": "n8n-nodes-base.if",
  "position": [
    1280,
    750
  ],
  "parameters": {
    "options": {},
    "conditions": {
      "options": {
        "version": 2,
        "leftValue": "",
        "caseSensitive": true,
        "typeValidation": "strict"
      },
      "combinator": "and",
      "conditions": [
        {
          "id": "1382e335-bfae-4665-a2ee-a05496a7b463",
          "operator": {
            "type": "string",
            "operation": "exists",
            "singleValue": true
          },
          "leftValue": "={{ $json.linkedin_url }}",
          "rightValue": ""
        }
      ]
    }
  },
  "typeVersion": 2.2
}

================ Node #2830 ================
{
  "id": "43e5192e-c1b0-4d71-8d0e-aa466aa9930c",
  "name": "Get Correspondance",
  "type": "n8n-nodes-base.executeWorkflow",
  "onError": "continueRegularOutput",
  "position": [
    1780,
    -260
  ],
  "parameters": {
    "mode": "each",
    "options": {
      "waitForSubWorkflow": true
    },
    "workflowId": {
      "__rl": true,
      "mode": "id",
      "value": "={{ $workflow.id }}"
    }
  },
  "typeVersion": 1.1
}

================ Node #2831 ================
{
  "id": "4662f928-d38b-42e1-8a70-5676eb638ce1",
  "name": "Merge",
  "type": "n8n-nodes-base.merge",
  "position": [
    2000,
    -180
  ],
  "parameters": {
    "mode": "combine",
    "options": {},
    "combineBy": "combineByPosition"
  },
  "typeVersion": 3
}

================ Node #2832 ================
{
  "id": "3eaf5d5b-d99c-4f9f-beaa-53b859bf482e",
  "name": "Aggregate Attendees",
  "type": "n8n-nodes-base.aggregate",
  "position": [
    2340,
    -180
  ],
  "parameters": {
    "options": {},
    "aggregate": "aggregateAllItemData",
    "destinationFieldName": "attendees"
  },
  "typeVersion": 1
}

================ Node #2833 ================
{
  "id": "752afdd3-0561-4e53-8b18-391741a2f43b",
  "name": "Activities To Array",
  "type": "n8n-nodes-base.aggregate",
  "position": [
    3680,
    1360
  ],
  "parameters": {
    "options": {},
    "aggregate": "aggregateAllItemData",
    "destinationFieldName": "activity"
  },
  "typeVersion": 1
}

================ Node #2834 ================
{
  "id": "a35dc751-62a0-4f5c-92cb-2801d060c613",
  "name": "Extract Profile Metadata",
  "type": "n8n-nodes-base.html",
  "position": [
    2560,
    1180
  ],
  "parameters": {
    "options": {},
    "operation": "extractHtmlContent",
    "dataPropertyName": "body",
    "extractionValues": {
      "values": [
        {
          "key": "name",
          "cssSelector": "h1"
        },
        {
          "key": "tagline",
          "cssSelector": ".pv-text-details__left-panel--full-width .text-body-medium"
        },
        {
          "key": "location",
          "cssSelector": ".pv-text-details__left-panel--full-width + div .text-body-small"
        },
        {
          "key": "num_connections",
          "cssSelector": "a[href=\"/mynetwork/invite-connect/connections/\"]"
        },
        {
          "key": "num_followers",
          "cssSelector": "a[href=\"https://www.linkedin.com/feed/followers/\"]"
        },
        {
          "key": "sections",
          "cssSelector": "section[data-view-name]",
          "returnArray": true,
          "returnValue": "html"
        }
      ]
    }
  },
  "typeVersion": 1.2
}

================ Node #2835 ================
{
  "id": "5685ec9f-c219-41b4-94d7-787daef8a628",
  "name": "Activities To List",
  "type": "n8n-nodes-base.splitOut",
  "position": [
    3360,
    1360
  ],
  "parameters": {
    "options": {},
    "fieldToSplitOut": "activity"
  },
  "typeVersion": 1
}

================ Node #2836 ================
{
  "id": "71240827-3e0d-4276-afb0-9ed72878ea4c",
  "name": "APIFY Web Scraper",
  "type": "n8n-nodes-base.httpRequest",
  "position": [
    2000,
    1180
  ],
  "parameters": {
    "url": "https://api.apify.com/v2/acts/apify~web-scraper/run-sync-get-dataset-items",
    "options": {},
    "jsonBody": "={\n \"startUrls\": [\n {\n \"url\": \"{{ $json.linkedin_profile_url }}\",\n \"method\": \"GET\"\n }\n ],\n \"initialCookies\": [\n {\n \"name\": \"li_at\",\n \"value\": \"{{ $json.linkedin_cookies.match(/li_at=([^;]+)/)[1] }}\",\n \"domain\": \".www.linkedin.com\"\n }\n ],\n \"breakpointLocation\": \"NONE\",\n \"browserLog\": false,\n \"closeCookieModals\": false,\n \"debugLog\": false,\n \"downloadCss\": false,\n \"downloadMedia\": false,\n \"excludes\": [\n {\n \"glob\": \"/**/*.{png,jpg,jpeg,pdf}\"\n }\n ],\n \"headless\": true,\n \"ignoreCorsAndCsp\": false,\n \"ignoreSslErrors\": false,\n \n \"injectJQuery\": true,\n \"keepUrlFragments\": false,\n \"linkSelector\": \"a[href]\",\n \"maxCrawlingDepth\": 1,\n \"maxPagesPerCrawl\": 1,\n \"maxRequestRetries\": 1,\n \"maxResultsPerCrawl\": 1,\n \"pageFunction\": \"// The function accepts a single argument: the \\\"context\\\" object.\\n// For a complete list of its properties and functions,\\n// see https://apify.com/apify/web-scraper#page-function \\nasync function pageFunction(context) {\\n\\n await new Promise(res => { setTimeout(res, 6000) });\\n // This statement works as a breakpoint when you're trying to debug your code. Works only with Run mode: DEVELOPMENT!\\n // debugger; \\n\\n // jQuery is handy for finding DOM elements and extracting data from them.\\n // To use it, make sure to enable the \\\"Inject jQuery\\\" option.\\n const $ = context.jQuery;\\n const title = $('title').first().text();\\n\\n // Clone the body to avoid modifying the original content\\n const bodyClone = $('body').clone();\\n bodyClone.find('iframe, img, script, style, object, embed, noscript, svg, video, audio').remove();\\n const body = bodyClone.html();\\n\\n // Return an object with the data extracted from the page.\\n // It will be stored to the resulting dataset.\\n return {\\n url: context.request.url,\\n title,\\n body\\n };\\n}\",\n \"postNavigationHooks\": \"// We need to return array of (possibly async) functions here.\\n// The functions accept a single argument: the \\\"crawlingContext\\\" object.\\n[\\n async (crawlingContext) => {\\n // ...\\n },\\n]\",\n \"preNavigationHooks\": \"// We need to return array of (possibly async) functions here.\\n// The functions accept two arguments: the \\\"crawlingContext\\\" object\\n// and \\\"gotoOptions\\\".\\n[\\n async (crawlingContext, gotoOptions) => {\\n // ...\\n },\\n]\\n\",\n \"proxyConfiguration\": {\n \"useApifyProxy\": true\n },\n \"runMode\": \"PRODUCTION\",\n \n \"useChrome\": false,\n \"waitUntil\": [\n \"domcontentloaded\"\n ],\n \"globs\": [],\n \"pseudoUrls\": [],\n \"proxyRotation\": \"RECOMMENDED\",\n \"maxConcurrency\": 50,\n \"pageLoadTimeoutSecs\": 60,\n \"pageFunctionTimeoutSecs\": 60,\n \"maxScrollHeightPixels\": 5000,\n \"customData\": {}\n}",
    "sendBody": true,
    "specifyBody": "json",
    "authentication": "genericCredentialType",
    "genericAuthType": "httpQueryAuth"
  },
  "credentials": {
    "httpQueryAuth": {
      "id": "cO2w8RDNOZg8DRa8",
      "name": "Apify API"
    }
  },
  "typeVersion": 4.2
}

================ Node #2837 ================
{
  "id": "01659121-44f9-4d53-b973-cea29a8b0301",
  "name": "Get Activity Details",
  "type": "n8n-nodes-base.html",
  "position": [
    3520,
    1360
  ],
  "parameters": {
    "options": {},
    "operation": "extractHtmlContent",
    "dataPropertyName": "activity",
    "extractionValues": {
      "values": [
        {
          "key": "header",
          "attribute": "aria-label",
          "cssSelector": ".feed-mini-update-optional-navigation-context-wrapper",
          "returnValue": "attribute"
        },
        {
          "key": "url",
          "attribute": "href",
          "cssSelector": ".feed-mini-update-optional-navigation-context-wrapper",
          "returnValue": "attribute"
        },
        {
          "key": "content",
          "cssSelector": ".inline-show-more-text--is-collapsed"
        },
        {
          "key": "num_reactions",
          "cssSelector": ".social-details-social-counts__reactions-count"
        },
        {
          "key": "num_comments",
          "cssSelector": ".social-details-social-counts__comments"
        },
        {
          "key": "num_reposts",
          "cssSelector": ".social-details-social-counts__item--truncate-text"
        }
      ]
    }
  },
  "typeVersion": 1.2
}

================ Node #2838 ================
{
  "id": "420a3a3e-ca99-49fb-b6b7-e9757f27b5d4",
  "name": "Get Sections",
  "type": "n8n-nodes-base.html",
  "position": [
    2880,
    1180
  ],
  "parameters": {
    "options": {},
    "operation": "extractHtmlContent",
    "extractionValues": {
      "values": [
        {
          "key": "title",
          "cssSelector": "h2 [aria-hidden=true]"
        },
        {
          "key": "content",
          "cssSelector": "*",
          "returnValue": "html"
        }
      ]
    }
  },
  "typeVersion": 1.2
}

================ Node #2839 ================
{
  "id": "4983c987-79a7-4725-9913-630a71608f41",
  "name": "Get About Section",
  "type": "n8n-nodes-base.set",
  "position": [
    3040,
    1180
  ],
  "parameters": {
    "options": {},
    "assignments": {
      "assignments": [
        {
          "id": "79d7943f-45a5-456c-a15b-cef53903409d",
          "name": "html",
          "type": "string",
          "value": "={{\n$input.all()\n .find(input => input.json.title.toLowerCase().trim() === 'about')\n .json\n .content\n}}"
        }
      ]
    }
  },
  "executeOnce": true,
  "typeVersion": 3.4
}

================ Node #2840 ================
{
  "id": "0e8bed5b-a622-4dbd-a11e-24df5d68f038",
  "name": "Get Activity Section",
  "type": "n8n-nodes-base.set",
  "position": [
    3040,
    1360
  ],
  "parameters": {
    "options": {},
    "assignments": {
      "assignments": [
        {
          "id": "79d7943f-45a5-456c-a15b-cef53903409d",
          "name": "html",
          "type": "string",
          "value": "={{\n$input.all()\n .find(input => input.json.title.toLowerCase().trim() === 'activity')\n .json\n .content\n}}"
        }
      ]
    }
  },
  "executeOnce": true,
  "typeVersion": 3.4
}

================ Node #2841 ================
{
  "id": "5dd2677f-a4fc-447f-af7d-28e90dda46e8",
  "name": "Extract Activities",
  "type": "n8n-nodes-base.html",
  "position": [
    3200,
    1360
  ],
  "parameters": {
    "options": {},
    "operation": "extractHtmlContent",
    "dataPropertyName": "html",
    "extractionValues": {
      "values": [
        {
          "key": "activity",
          "cssSelector": ".profile-creator-shared-feed-update__mini-container",
          "returnArray": true,
          "returnValue": "html"
        }
      ]
    }
  },
  "typeVersion": 1.2
}

================ Node #2842 ================
{
  "id": "1a32808f-e465-47ef-b8bd-52b19c26ff1a",
  "name": "Merge1",
  "type": "n8n-nodes-base.merge",
  "position": [
    3860,
    1180
  ],
  "parameters": {
    "mode": "combine",
    "options": {},
    "combineBy": "combineByPosition"
  },
  "typeVersion": 3
}

================ Node #2843 ================
{
  "id": "6e452337-55a3-4466-a094-ec9106b36498",
  "name": "Is Scrape Successful?",
  "type": "n8n-nodes-base.if",
  "position": [
    2180,
    1180
  ],
  "parameters": {
    "options": {},
    "conditions": {
      "options": {
        "version": 2,
        "leftValue": "",
        "caseSensitive": true,
        "typeValidation": "strict"
      },
      "combinator": "and",
      "conditions": [
        {
          "id": "3861abc7-7699-4459-b983-0c8b33e090b5",
          "operator": {
            "type": "string",
            "operation": "exists",
            "singleValue": true
          },
          "leftValue": "={{ $json.body }}",
          "rightValue": ""
        }
      ]
    }
  },
  "typeVersion": 2.2
}

================ Node #2844 ================
{
  "id": "51a79d99-46af-4951-a99e-64f1d59f556e",
  "name": "Extract About",
  "type": "n8n-nodes-base.html",
  "position": [
    3200,
    1180
  ],
  "parameters": {
    "options": {},
    "operation": "extractHtmlContent",
    "dataPropertyName": "html",
    "extractionValues": {
      "values": [
        {
          "key": "about",
          "cssSelector": "body"
        }
      ]
    }
  },
  "typeVersion": 1.2
}

================ Node #2845 ================
{
  "id": "d943fbde-f8fc-42b1-8b7e-f73735b81394",
  "name": "Sticky Note11",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    3860,
    940
  ],
  "parameters": {
    "color": 7,
    "width": 508.12647286359606,
    "height": 212.26880753952497,
    "content": "## 3.6 Summarize LinkedIn For Attendee\n[Read more about the Basic LLM node](https://docs.n8n.io/integrations/builtin/cluster-nodes/root-nodes/n8n-nodes-langchain.chainllm)\n\nFinally, we'll use the Basic LLM node to summarize our attendee's LinkedIn profile and recent activity. Our goal here is to identify and send back interesting tidbits of information which may be relevant to the meeting as well as inform the user. Should you require different criteria, simply edit the summarizer to get the response you need."
  },
  "typeVersion": 1
}

================ Node #2846 ================
{
  "id": "b64bbfb0-ebd6-4fe7-9c02-3c1b72407df5",
  "name": "Sticky Note12",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    2460,
    270
  ],
  "parameters": {
    "color": 7,
    "width": 593.8676556715506,
    "height": 196.6490014749014,
    "content": "## 3.3: Summarize Correspondance For Attendee\n[Read more about the Basic LLM node](https://docs.n8n.io/integrations/builtin/cluster-nodes/root-nodes/n8n-nodes-langchain.chainllm)\n\nNext, we'll generate a shorter version of the email(s) using the Basic LLM node - useful if the email was part of a large chain. The goal here is, if applicable, to remind the user of the conversion with this attendee and highlight any expectations which might be set before going into the meeting."
  },
  "typeVersion": 1
}

================ Node #2847 ================
{
  "id": "a2dd5060-dd12-463b-8bbe-327ed691bdb9",
  "name": "Get LinkedIn Profile & Activity",
  "type": "n8n-nodes-base.executeWorkflow",
  "onError": "continueRegularOutput",
  "position": [
    1780,
    -100
  ],
  "parameters": {
    "mode": "each",
    "options": {
      "waitForSubWorkflow": true
    },
    "workflowId": {
      "__rl": true,
      "mode": "id",
      "value": "={{ $workflow.id }}"
    }
  },
  "typeVersion": 1.1
}

================ Node #2848 ================
{
  "id": "fde0fa35-e692-4ca9-83ef-14e527f2f8d2",
  "name": "Sticky Note13",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    -320,
    -660
  ],
  "parameters": {
    "width": 453.4804561790962,
    "height": 588.3011632094225,
    "content": "## Try It Out!\n\n### This workflow builds an AI meeting assistant who sends information-dense pre-meeting notifications for a user's upcoming meetings. This template is ideal for busy professional who is constantly on the move and wants to save time and make an impression.\n\n### How It Works\n* A scheduled trigger fires hourly and checks for upcoming meetings within the hour.\n* When found, a search for last correspondence and LinkedIn profile + recent activity is performed for each attendee.\n* Using both available correspondance and/or Linkedin profile, an AI/LLM is used to summarize this information and generate a short notification message which should help the user prepare for the meeting.\n* The notification is finally sent to the user's WhatsApp.\n\n### Need Help?\nJoin the [Discord](https://discord.com/invite/XPKeKXeB7d) or ask in the [Forum](https://community.n8n.io/)!\n\nHappy Hacking!"
  },
  "typeVersion": 1
}

================ Node #2849 ================
{
  "id": "f2f19824-9865-465b-a612-7d3215209c79",
  "name": "Correspondance Recap Agent",
  "type": "@n8n/n8n-nodes-langchain.chainLlm",
  "position": [
    2460,
    500
  ],
  "parameters": {
    "text": "=from: {{ $json.from }}\nto: {{ $json.to }}\ndate: {{ $json.date }}\nsubject: {{ $json.subject }}\ntext:\n{{ $json.text }}",
    "messages": {
      "messageValues": [
        {
          "message": "=You are helping the \"to\" user recap the last correspondance they had in this email thread. Summarize succiently what was discussed, changed or agreed to help the user prepare for their upcoming meeting."
        }
      ]
    },
    "promptType": "define"
  },
  "typeVersion": 1.4
}

================ Node #2850 ================
{
  "id": "42641933-edf6-4b01-a17f-8cda2be7a093",
  "name": "Attendee Research Agent",
  "type": "@n8n/n8n-nodes-langchain.chainLlm",
  "position": [
    2720,
    -180
  ],
  "parameters": {
    "text": "=meeting date: {{ $('Check For Upcoming Meetings').item.json.start.dateTime }}\nmeeting url: {{ $('Check For Upcoming Meetings').item.json.hangoutLink }}\nmeeting summary: {{ $('Check For Upcoming Meetings').first().json.summary }}\nmeeting description: {{ $('Check For Upcoming Meetings').item.json.description }}\nmeeting with: {{ $json.attendees.map(item => item.name).join(',') }}\n---\n{{\n$json.attendees.map(item => {\n return\n`attendee name: ${item.name}\n${item.name}'s last correspondance: ${item.email_summary.replaceAll('\\n', ' ') || `We have not had any correspondance with ${item.name}`}\n${item.name}'s linkedin profile: ${item.linkedin_summary.replaceAll('\\n', ' ') || `We were unable to find the linkedin profile for ${$json.name}`}\n`\n}).join('\\n---\\n')\n}}",
    "messages": {
      "messageValues": [
        {
          "message": "=You are a personal meeing assistant.\nYou are helping to remind user of an upcoming meeting with {{ $json.attendees.map(item => item.name).join(',') }} (aka \"the attendee(s)\"}. You will structure your notification using the following guidance:\n1. Start by providing the meeting summary, mentioning the date, with whom and providing the meeting link.\n2. For each attendee, give a short bullet point summary of their last correspondance. Assess if the correspondance has any relevance to the meeting and if so, identify any important todos or items which should be mentioned during the meeting. Additionally, give a short bullet point summary of attendee's recent activity which makes for good talking points. These need not be relevant to the meeting.\n\nWrite your response in a casual tone as if sending a SMS message to the user. USe bullet points where appropriate."
        }
      ]
    },
    "promptType": "define"
  },
  "typeVersion": 1.4
}

================ Node #2851 ================
{
  "id": "1916515d-8b85-4da9-ac17-1c08485cdf04",
  "name": "LinkedIn Summarizer Agent",
  "type": "@n8n/n8n-nodes-langchain.chainLlm",
  "position": [
    4020,
    1180
  ],
  "parameters": {
    "text": "=### name\n{{ $('Extract Profile Metadata').item.json.name }}\n### about\n\"{{ $('Extract Profile Metadata').item.json.tagline }}\"\n{{ $json.about.replaceAll('\\n', ' ')}}\n### recent activity\n{{\n$json.activity.map((item, idx) => {\n return [\n item.header.replace('View full post.', ''),\n `(${item.url})`,\n ' - ',\n item.content.replaceAll('\\n', ' ').replaceAll('\u2026show more', '')\n ].join(' ')\n}).join('\\n---\\n')\n}}",
    "messages": {
      "messageValues": [
        {
          "message": "=Summarize briefly the person and their recent activities as seen in the given feed and highlight noteworthy awards or achievements which make for good talking points."
        }
      ]
    },
    "promptType": "define"
  },
  "typeVersion": 1.4
}

================ Node #2852 ================
{
  "id": "10565888-4a1b-439a-a188-c6ee7990bb63",
  "name": "Extract from File",
  "type": "n8n-nodes-base.extractFromFile",
  "position": [
    860,
    260
  ],
  "parameters": {
    "options": {},
    "operation": "pdf",
    "binaryPropertyName": "File_Upload"
  },
  "typeVersion": 1
}

================ Node #2853 ================
{
  "id": "583aff4b-d9f5-44e7-8e91-4938592b5630",
  "name": "OpenAI Chat Model1",
  "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
  "position": [
    1740,
    380
  ],
  "parameters": {
    "options": {}
  },
  "credentials": {
    "openAiApi": {
      "id": "8gccIjcuf3gvaoEr",
      "name": "OpenAi account"
    }
  },
  "typeVersion": 1
}

================ Node #2854 ================
{
  "id": "3a09afd0-0dce-41fd-bec3-783fcb3d01fc",
  "name": "Structured Output Parser",
  "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
  "position": [
    1920,
    380
  ],
  "parameters": {
    "schemaType": "manual",
    "inputSchema": "{\n \"type\": \"object\",\n \"properties\": {\n \"Name\": { \"type\": \"string\" },\n \"Address\": { \"type\": \"string\" },\n \"Email\": { \"type\": \"string\" },\n \"Telephone\": { \"type\": \"string\" },\n \"Education\": { \"type\": \"string\" },\n \"Skills & Technologies\": { \"type\": \"string\" },\n \"Years of Experience\": { \"type\": \"string\" },\n \"Cover Letter\": { \"type\": \"string\" }\n }\n}"
  },
  "typeVersion": 1.2
}

================ Node #2855 ================
{
  "id": "541a00d0-1635-48ad-b69e-83b28e178d6e",
  "name": "OpenAI Chat Model2",
  "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
  "position": [
    1020,
    420
  ],
  "parameters": {
    "options": {}
  },
  "credentials": {
    "openAiApi": {
      "id": "8gccIjcuf3gvaoEr",
      "name": "OpenAi account"
    }
  },
  "typeVersion": 1
}

================ Node #2856 ================
{
  "id": "19e4ad5b-2f96-491c-bcb3-52cca526ff82",
  "name": "Step 1 of 2 - Upload CV",
  "type": "n8n-nodes-base.formTrigger",
  "position": [
    460,
    220
  ],
  "webhookId": "4cf0f3b7-6282-47af-a7f1-3dfb00a1311d",
  "parameters": {
    "options": {
      "path": "job-application-step1of2",
      "ignoreBots": true,
      "buttonLabel": "Submit",
      "useWorkflowTimezone": true
    },
    "formTitle": "Step 1 of 2: Submit Your CV",
    "formFields": {
      "values": [
        {
          "fieldLabel": "Name",
          "placeholder": "Eg. Sam Smith",
          "requiredField": true
        },
        {
          "fieldType": "file",
          "fieldLabel": "File Upload",
          "multipleFiles": false,
          "requiredField": true,
          "acceptFileTypes": "pdf"
        },
        {
          "fieldType": "dropdown",
          "fieldLabel": "Acknowledgement of Terms",
          "multiselect": true,
          "fieldOptions": {
            "values": [
              {
                "option": "I agree to the terms & conditions"
              }
            ]
          },
          "requiredField": true
        }
      ]
    },
    "responseMode": "lastNode",
    "formDescription": "Thank you for your interest in applying for Acme Inc. To ensure a speedy process, please ensure you following all instructions and fill out all required inputs.\n\nThis step requires you upload your CV in a password-free PDF document. Any document that is not a CV will be rejected."
  },
  "typeVersion": 2.2
}

================ Node #2857 ================
{
  "id": "ec54096b-5f9f-444e-87b1-db99197731f1",
  "name": "Save to Airtable",
  "type": "n8n-nodes-base.airtable",
  "position": [
    2340,
    320
  ],
  "parameters": {
    "base": {
      "__rl": true,
      "mode": "list",
      "value": "appQ6mE9KSzlvaGDT",
      "cachedResultUrl": "https://airtable.com/appQ6mE9KSzlvaGDT",
      "cachedResultName": "Job Applications with AI & Forms"
    },
    "table": {
      "__rl": true,
      "mode": "list",
      "value": "tblUwwRXGnNzesNgr",
      "cachedResultUrl": "https://airtable.com/appQ6mE9KSzlvaGDT/tblUwwRXGnNzesNgr",
      "cachedResultName": "Table 1"
    },
    "columns": {
      "value": {
        "Name": "={{ $json.output.Name }}",
        "Email": "={{ $json.output.Email }}",
        "Address": "={{ $json.output.Address }}",
        "Education": "={{ $json.output.Education }}",
        "Telephone": "={{ $json.output.Telephone }}",
        "Cover Letter": "={{ $json.output['Cover Letter'] }}",
        "Submitted By": "={{ $('Step 1 of 2 - Upload CV').first().json.Name }}",
        "Years of Experience": "={{ $json.output['Years of Experience'] }}",
        "Skills & Technologies": "={{ $json.output['Skills & Technologies'] }}"
      },
      "schema": [
        {
          "id": "Name",
          "type": "string",
          "display": true,
          "removed": false,
          "readOnly": false,
          "required": false,
          "displayName": "Name",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "File",
          "type": "array",
          "display": true,
          "removed": true,
          "readOnly": false,
          "required": false,
          "displayName": "File",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "Cover Letter",
          "type": "string",
          "display": true,
          "removed": false,
          "readOnly": false,
          "required": false,
          "displayName": "Cover Letter",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "Address",
          "type": "string",
          "display": true,
          "removed": false,
          "readOnly": false,
          "required": false,
          "displayName": "Address",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "Email",
          "type": "string",
          "display": true,
          "removed": false,
          "readOnly": false,
          "required": false,
          "displayName": "Email",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "Telephone",
          "type": "string",
          "display": true,
          "removed": false,
          "readOnly": false,
          "required": false,
          "displayName": "Telephone",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "Education",
          "type": "string",
          "display": true,
          "removed": false,
          "readOnly": false,
          "required": false,
          "displayName": "Education",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "Skills & Technologies",
          "type": "string",
          "display": true,
          "removed": false,
          "readOnly": false,
          "required": false,
          "displayName": "Skills & Technologies",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "Years of Experience",
          "type": "string",
          "display": true,
          "removed": false,
          "readOnly": false,
          "required": false,
          "displayName": "Years of Experience",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "Created",
          "type": "string",
          "display": true,
          "removed": true,
          "readOnly": true,
          "required": false,
          "displayName": "Created",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "Last Modified",
          "type": "string",
          "display": true,
          "removed": true,
          "readOnly": true,
          "required": false,
          "displayName": "Last Modified",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "Submitted By",
          "type": "string",
          "display": true,
          "removed": false,
          "readOnly": false,
          "required": false,
          "displayName": "Submitted By",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        }
      ],
      "mappingMode": "defineBelow",
      "matchingColumns": []
    },
    "options": {},
    "operation": "create"
  },
  "credentials": {
    "airtableTokenApi": {
      "id": "Und0frCQ6SNVX3VV",
      "name": "Airtable Personal Access Token account"
    }
  },
  "typeVersion": 2.1
}

================ Node #2858 ================
{
  "id": "127965b3-a2c6-443b-942d-8691b5bcb25d",
  "name": "Classify Document",
  "type": "@n8n/n8n-nodes-langchain.textClassifier",
  "position": [
    1020,
    260
  ],
  "parameters": {
    "options": {
      "fallback": "other"
    },
    "inputText": "={{ $json.text }}",
    "categories": {
      "categories": [
        {
          "category": "CV or Resume",
          "description": "This document is a CV or Resume"
        }
      ]
    }
  },
  "typeVersion": 1
}

================ Node #2859 ================
{
  "id": "b82476c8-b285-467f-b344-e1f667f42479",
  "name": "Upload File to Record",
  "type": "n8n-nodes-base.httpRequest",
  "position": [
    2540,
    320
  ],
  "parameters": {
    "url": "=https://content.airtable.com/v0/{{ $('Save to Airtable').params.base.value }}/{{ $json.id }}/File/uploadAttachment",
    "method": "POST",
    "options": {},
    "sendBody": true,
    "authentication": "predefinedCredentialType",
    "bodyParameters": {
      "parameters": [
        {
          "name": "contentType",
          "value": "application/pdf"
        },
        {
          "name": "filename",
          "value": "={{ $workflow.id }}-{{ $execution.id }}.pdf"
        },
        {
          "name": "file",
          "value": "={{ $('Step 1 of 2 - Upload CV').first().binary.File_Upload.data }}"
        }
      ]
    },
    "nodeCredentialType": "airtableTokenApi"
  },
  "credentials": {
    "airtableTokenApi": {
      "id": "Und0frCQ6SNVX3VV",
      "name": "Airtable Personal Access Token account"
    }
  },
  "typeVersion": 4.2
}

================ Node #2860 ================
{
  "id": "ee6f59ee-781f-4ed4-8cec-b7de70a82dac",
  "name": "Form Success",
  "type": "n8n-nodes-base.form",
  "position": [
    3900,
    320
  ],
  "webhookId": "4b154ccc-ad54-4cc2-a239-cf8354fc91bf",
  "parameters": {
    "options": {},
    "operation": "completion",
    "completionTitle": "Application Success",
    "completionMessage": "Thank you for completing the application process.\nYour informaion is filed securely and will be reviewed by our team.\n\nWe will be in touch shortly."
  },
  "typeVersion": 1
}

================ Node #2861 ================
{
  "id": "43d46474-b9f8-4adf-89f8-d4c993641448",
  "name": "Save to Airtable1",
  "type": "n8n-nodes-base.airtable",
  "onError": "continueErrorOutput",
  "position": [
    3720,
    320
  ],
  "parameters": {
    "base": {
      "__rl": true,
      "mode": "list",
      "value": "appQ6mE9KSzlvaGDT",
      "cachedResultUrl": "https://airtable.com/appQ6mE9KSzlvaGDT",
      "cachedResultName": "Job Applications with AI & Forms"
    },
    "table": {
      "__rl": true,
      "mode": "list",
      "value": "tblUwwRXGnNzesNgr",
      "cachedResultUrl": "https://airtable.com/appQ6mE9KSzlvaGDT/tblUwwRXGnNzesNgr",
      "cachedResultName": "Table 1"
    },
    "columns": {
      "value": {
        "Name": "={{ $json.Name }}",
        "Email": "={{ $json.Email }}",
        "Address": "={{ $json.Address }}",
        "Education": "={{ $json.Education }}",
        "Telephone": "={{ $json.Telephone }}",
        "Cover Letter": "={{ $json.output['Cover Letter'] }}",
        "Years of Experience": "={{ $json['Years of Experience'] }}",
        "Skills & Technologies": "={{ $json['Skills & Technologies'] }}"
      },
      "schema": [
        {
          "id": "Name",
          "type": "string",
          "display": true,
          "removed": false,
          "readOnly": false,
          "required": false,
          "displayName": "Name",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "File",
          "type": "array",
          "display": true,
          "removed": true,
          "readOnly": false,
          "required": false,
          "displayName": "File",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "Cover Letter",
          "type": "string",
          "display": true,
          "removed": false,
          "readOnly": false,
          "required": false,
          "displayName": "Cover Letter",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "Address",
          "type": "string",
          "display": true,
          "removed": false,
          "readOnly": false,
          "required": false,
          "displayName": "Address",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "Email",
          "type": "string",
          "display": true,
          "removed": false,
          "readOnly": false,
          "required": false,
          "displayName": "Email",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "Telephone",
          "type": "string",
          "display": true,
          "removed": false,
          "readOnly": false,
          "required": false,
          "displayName": "Telephone",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "Education",
          "type": "string",
          "display": true,
          "removed": false,
          "readOnly": false,
          "required": false,
          "displayName": "Education",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "Skills & Technologies",
          "type": "string",
          "display": true,
          "removed": false,
          "readOnly": false,
          "required": false,
          "displayName": "Skills & Technologies",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "Years of Experience",
          "type": "string",
          "display": true,
          "removed": false,
          "readOnly": false,
          "required": false,
          "displayName": "Years of Experience",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "Created",
          "type": "string",
          "display": true,
          "removed": true,
          "readOnly": true,
          "required": false,
          "displayName": "Created",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "Last Modified",
          "type": "string",
          "display": true,
          "removed": true,
          "readOnly": true,
          "required": false,
          "displayName": "Last Modified",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "Submitted By",
          "type": "string",
          "display": true,
          "removed": true,
          "readOnly": false,
          "required": false,
          "displayName": "Submitted By",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        }
      ],
      "mappingMode": "defineBelow",
      "matchingColumns": [
        "Email",
        "Name"
      ]
    },
    "options": {},
    "operation": "update"
  },
  "credentials": {
    "airtableTokenApi": {
      "id": "Und0frCQ6SNVX3VV",
      "name": "Airtable Personal Access Token account"
    }
  },
  "typeVersion": 2.1
}

================ Node #2862 ================
{
  "id": "38115307-824c-4354-917c-b18e93178f87",
  "name": "Step 2 of 2 - Application Form",
  "type": "n8n-nodes-base.formTrigger",
  "position": [
    3520,
    320
  ],
  "webhookId": "db923d6c-ea24-4679-b4ba-d3b142ef8338",
  "parameters": {
    "options": {
      "path": "job-application-step2of2",
      "ignoreBots": true,
      "useWorkflowTimezone": true
    },
    "formTitle": "Step 2 of 2: Application Form",
    "formFields": {
      "values": [
        {
          "fieldLabel": "Name",
          "placeholder": "Eg. Sam Smith",
          "requiredField": true
        },
        {
          "fieldLabel": "Address",
          "requiredField": true
        },
        {
          "fieldType": "email",
          "fieldLabel": "Email",
          "requiredField": true
        },
        {
          "fieldLabel": "Telephone",
          "requiredField": true
        },
        {
          "fieldType": "textarea",
          "fieldLabel": "Education",
          "requiredField": true
        },
        {
          "fieldType": "textarea",
          "fieldLabel": "Skills & Technologies",
          "requiredField": true
        },
        {
          "fieldType": "textarea",
          "fieldLabel": "Years of Experience",
          "requiredField": true
        },
        {
          "fieldType": "textarea",
          "fieldLabel": "Cover Letter",
          "requiredField": true
        },
        {
          "fieldType": "dropdown",
          "fieldLabel": "Acknowledgement of Terms",
          "multiselect": true,
          "fieldOptions": {
            "values": [
              {
                "option": "I agree to consent to the terms and conditions"
              }
            ]
          },
          "requiredField": true
        }
      ]
    },
    "formDescription": "This application form prefills using the CV you submitted. Please make any amendments as required and once satisfied, please submit the form to complete the application process."
  },
  "typeVersion": 2.2
}

================ Node #2863 ================
{
  "id": "1171540b-ebb2-41cb-b9f1-2da335caaece",
  "name": "Sticky Note",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    300,
    20
  ],
  "parameters": {
    "color": 7,
    "width": 430,
    "height": 381,
    "content": "## 1. Application Form To Upload CV\n[Learn more the Form Trigger node](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.formtrigger/)\n\nOur application process starts with a simple file upload to get the applicant's CV for processing."
  },
  "typeVersion": 1
}

================ Node #2864 ================
{
  "id": "4791901b-31a6-44c3-a1da-9c32b78cf305",
  "name": "Sticky Note1",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    760,
    17.5
  ],
  "parameters": {
    "color": 7,
    "width": 774,
    "height": 593,
    "content": "## 2. Document Classifier and ReUpload Form\n[Read more about the Text Classifier](https://docs.n8n.io/integrations/builtin/cluster-nodes/root-nodes/n8n-nodes-langchain.text-classifier/)\n\nForm validation remains a critical step and before the introduction of LLMs, classifying document types was a relatively troublesome process. Today, n8n's text classifier node does an excellent job at this task.\n\nContextual validation powered by AI means invalid, incomplete or poorly created applicant CVs can be rejected as a quality check. When this happens in our workflow, we present the user again with the file upload form to retry."
  },
  "typeVersion": 1
}

================ Node #2865 ================
{
  "id": "4dc1a316-15b7-4568-9910-79b4a7989dcb",
  "name": "Sticky Note2",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    1560,
    -20
  ],
  "parameters": {
    "color": 7,
    "width": 648,
    "height": 584,
    "content": "## 3. Smarter Application Pre-fill with Job Role Context\n[Read more about the Basic LLM node](https://docs.n8n.io/integrations/builtin/cluster-nodes/root-nodes/n8n-nodes-langchain.chainllm)\n\nInformation extraction is a logical next step once we have our PDF contents but we can extend further by only extracting data which is relevant to our job post. This ensure the information we extract is always relevant which saves time for the hiring team.\n\nTo achieve this for this demo, I've included the job post in the prompt for the LLM to compare the CV against. The provides the AI enough context to complete the task successfully."
  },
  "typeVersion": 1
}

================ Node #2866 ================
{
  "id": "76006a7b-32ce-4606-be98-9a7b7b451215",
  "name": "Application Suitability Agent",
  "type": "@n8n/n8n-nodes-langchain.chainLlm",
  "position": [
    1740,
    220
  ],
  "parameters": {
    "text": "=Here is the candidate's CV:\n{{ $json.text }}",
    "messages": {
      "messageValues": [
        {
          "message": "=Extract information from the applicant's CV which is relevant to the job post.\nWhen writing the cover letter, use no more than a few paragraphs. No need to address the hiring company or personnel as this text will be input into an online form.\nUse a formal and professional tone.\nThis is the job post which the cover letter should address:\n\n```\nJob Post: General Operations Manager \u2013 Manufacturing Industry\nJob Type: Full-time\nExperience Level: Mid to Senior\n\nAbout Us:\nWe are a forward-thinking manufacturing company committed to innovation, quality, and sustainability. We strive to improve operations, enhance product quality, and implement eco-friendly practices, fostering a productive and collaborative work environment.\n\nJob Description:\nWe are seeking an experienced and dynamic General Operations Manager to lead and optimize our manufacturing processes. The successful candidate will oversee production, enhance efficiency, and implement effective strategies to support our mission. This role is ideal for a seasoned professional with a strong background in operational management and a knack for process improvement.\n\nKey Responsibilities:\n\nOversee and manage production and sales teams across multiple shifts, ensuring seamless 24/6 operations.\nDevelop and implement cost-effective quality control and accountability measures to maintain high manufacturing standards.\nManage inventory and procurement, strategically timing raw material purchases to maximize cost efficiency.\nLead ERP system upgrades or similar digital transformation projects, ensuring timely and budget-friendly execution.\nOptimize credit control and payment terms to improve cash flow while maintaining client relationships.\nAdvocate for sustainable practices, including integrating recycled materials into production processes.\nQualifications:\n\nBachelor's degree in Business Administration or a related field; a Master's in Financial Economics is a plus.\nProven experience in a leadership role within the manufacturing industry.\nExpertise in managing teams, production cycles, and quality assurance.\nProficiency in ERP systems and software such as Stata, Bloomberg Professional, and Thomson Reuters DataStream.\nStrong analytical, decision-making, and organizational skills.\nFamiliarity with capital markets, private equity, or strategic management consulting is a plus.\nPreferred Skills:\n\nAdvanced knowledge of plastics manufacturing, including polyethylene and polypropylene applications.\nExperience in implementing sustainability initiatives and green business practices.\nExcellent communication skills, with a history of collaboration and team-building.\nWhat We Offer:\n\nCompetitive salary and benefits package.\nOpportunities for professional growth and development.\nA collaborative and innovative work environment.\nHow to Apply:\nPlease send your resume and a cover letter highlighting your experience and achievements to [HR Email]. Applications will be reviewed on a rolling basis.\n\nJoin us and drive operational excellence in manufacturing!\n```"
        }
      ]
    },
    "promptType": "define",
    "hasOutputParser": true
  },
  "typeVersion": 1.5
}

================ Node #2867 ================
{
  "id": "cfc6a1a1-d42c-49b1-a93b-4a04e7e88521",
  "name": "Sticky Note3",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    2240,
    40
  ],
  "parameters": {
    "color": 7,
    "width": 528,
    "height": 524,
    "content": "## 4. Save to Applicant Tracking System\n[Read more about the Airtable node](https://docs.n8n.io/integrations/builtin/app-nodes/n8n-nodes-base.airtable/)\n\nNext, we can complete our simple data capture by integrating and pushing data to our Applicant Tracking System.\n\nHere, we're using Airtable because we can also store PDF files in our rows.\n\nSee our example Airtable here: [https://airtable.com/appQ6mE9KSzlvaGDT/shrIivfe9qH6YEYAs](https://airtable.com/appQ6mE9KSzlvaGDT/shrIivfe9qH6YEYAs)"
  },
  "typeVersion": 1
}

================ Node #2868 ================
{
  "id": "8f21067f-a851-4480-84b8-bb37eddfd7d6",
  "name": "Sticky Note4",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    2780,
    40
  ],
  "parameters": {
    "color": 7,
    "width": 575.8190139534884,
    "height": 524,
    "content": "## 5. Redirect to Application Form\n[Learn more about Form Ending](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.form/#form-ending)\n\nFinally to complete the form flow for step 1 of 2, we'll use a form ending node to redirect the user to step 2 of 2.\n\nHere, we using query params as part of our redirect as this will pre-fill the form fields in step 2 of 2."
  },
  "typeVersion": 1
}

================ Node #2869 ================
{
  "id": "2ba9cea6-173f-45be-bdda-a6ef061d91f5",
  "name": "Sticky Note5",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    3380,
    40
  ],
  "parameters": {
    "color": 7,
    "width": 788,
    "height": 524,
    "content": "## 6. Application Form to Amend Details\n[Learn more about Forms](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.form)\n\nIn the second part of the application process, applicants are presented with a form containing multiple fields to complete. This step has often been a source of frustration for many, as they end up duplicating information that\u2019s already in their CV.\n\nIf our redirection with prefilled data works as intended, this issue will be resolved, as the fields will be automatically populated by our LLM during step 1 of 2. This also allows candidates the opportunity to review and refine the application fields before submitting."
  },
  "typeVersion": 1
}

================ Node #2870 ================
{
  "id": "5add63c3-19d4-4035-a718-b1c125a03c67",
  "name": "File Upload Retry",
  "type": "n8n-nodes-base.form",
  "position": [
    1340,
    380
  ],
  "webhookId": "c3e8dc74-c6e0-4d0b-acf3-8bbc2f7c9ae2",
  "parameters": {
    "options": {
      "formTitle": "Please upload a CV",
      "formDescription": "Unfortunately, we were unable to process your previous file upload.\n\nTo continue, you must upload a valid CV in PDF format. "
    },
    "formFields": {
      "values": [
        {
          "fieldType": "file",
          "fieldLabel": "File Upload",
          "multipleFiles": false,
          "requiredField": true,
          "acceptFileTypes": "pdf"
        }
      ]
    }
  },
  "typeVersion": 1
}

================ Node #2871 ================
{
  "id": "cc27b37f-26f5-47c3-9ac2-4412352070e5",
  "name": "Redirect To Step 2 of 2",
  "type": "n8n-nodes-base.form",
  "position": [
    3120,
    280
  ],
  "webhookId": "1b6e2375-e21d-4e4f-a44e-3ef0de95320e",
  "parameters": {
    "operation": "completion",
    "redirectUrl": "=https://<HOST>/form/job-application-step2of2?{{ $('Application Suitability Agent').first().json.output.urlEncode() }}",
    "respondWith": "redirect"
  },
  "typeVersion": 1
}

================ Node #2872 ================
{
  "id": "1cba63a9-57cb-4e17-a601-2bd64fb50dbf",
  "name": "Sticky Note6",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    -140,
    -240
  ],
  "parameters": {
    "width": 420,
    "height": 640,
    "content": "## Try It Out!\n\n### This n8n template combines form file uploads with AI components to create a simple but effective job application submission flow.\nIt's a perfect low-cost solution without the bells and whistles of the surface yet is highly advanced with its use of AI.\n\n### How it works\n* The application submission process starts with an n8n form trigger to accept CV files in the form of PDFs.\n* The PDF is validated using the text classifier node to determine if it is a valid CV.\n* A basic LLM node is used to extract relevant information from the CV as data capture. A copy of the original job post is included to ensure relevancy.\n* Applicant's data is then sent to an ATS for processing. For our demo, we used airtable because we could attach PDFs to rows.\n* Finally, a second form trigger is used to allow the applicant to amend any of the generated application fields.\n\n\n### Need Help?\nJoin the [Discord](https://discord.com/invite/XPKeKXeB7d) or ask in the [Forum](https://community.n8n.io/)!\n\nHappy Hacking!\n"
  },
  "typeVersion": 1
}

================ Node #2873 ================
{
  "id": "4289f9f2-2286-4bc7-9045-c645ff292341",
  "name": "Sticky Note7",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    3060,
    460
  ],
  "parameters": {
    "height": 120,
    "content": "### \ud83d\udea8 Change Base URL here!\nThis redirect requires the full base URL, change it to the host of your n8n instance."
  },
  "typeVersion": 1
}

================ Node #2874 ================
{
  "id": "fca5b2ab-291f-4ac3-b4e1-13911666359f",
  "name": "Submission Success",
  "type": "n8n-nodes-base.form",
  "position": [
    2900,
    280
  ],
  "webhookId": "f3b12dd4-dd5d-47a9-8bc1-727ba7eb5d15",
  "parameters": {
    "options": {
      "formTitle": "CV Submission Successful!",
      "buttonLabel": "Continue",
      "formDescription": "We'll now redirect you to step 2 of 2 - our Application form. Please note, some fields will be prefilled with information from your CV. Feel free to amend this information as needed."
    },
    "formFields": {
      "values": [
        {
          "fieldType": "dropdown",
          "fieldLabel": "Acknowledgement",
          "multiselect": true,
          "fieldOptions": {
            "values": [
              {
                "option": "I understand my CV will be held soley for purpose of application and for no more than 90 days."
              }
            ]
          },
          "requiredField": true
        }
      ]
    }
  },
  "typeVersion": 1
}

================ Node #2875 ================
{
  "id": "6d16b5be-8f7b-49f2-8523-9b84c62f2759",
  "name": "OpenAI Chat Model",
  "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
  "position": [
    1960,
    660
  ],
  "parameters": {
    "model": "gpt-4o-2024-08-06",
    "options": {}
  },
  "credentials": {
    "openAiApi": {
      "id": "8gccIjcuf3gvaoEr",
      "name": "OpenAi account"
    }
  },
  "typeVersion": 1
}

================ Node #2876 ================
{
  "id": "a6084f09-9a4f-478a-ac1a-ab1413628c1f",
  "name": "Capture Frames",
  "type": "n8n-nodes-base.code",
  "position": [
    720,
    460
  ],
  "parameters": {
    "mode": "runOnceForEachItem",
    "language": "python",
    "pythonCode": "import cv2\nimport numpy as np\nimport base64\n\ndef extract_evenly_distributed_frames_from_base64(base64_string, max_frames=90):\n # Decode the Base64 string into bytes\n video_bytes = base64.b64decode(base64_string)\n \n # Write the bytes to a temporary file\n video_path = '/tmp/temp_video.mp4'\n with open(video_path, 'wb') as video_file:\n video_file.write(video_bytes)\n \n # Open the video file using OpenCV\n video_capture = cv2.VideoCapture(video_path)\n \n # Get the total number of frames in the video\n total_frames = int(video_capture.get(cv2.CAP_PROP_FRAME_COUNT))\n \n # Calculate the step size to take 'max_frames' evenly distributed frames\n step_size = max(1, total_frames // (max_frames - 1))\n \n # List to store selected frames as base64\n selected_frames_base64 = []\n \n for i in range(0, total_frames, step_size):\n # Set the current frame position\n video_capture.set(cv2.CAP_PROP_POS_FRAMES, i)\n \n # Read the frame\n ret, frame = video_capture.read()\n if ret:\n # Convert frame (NumPy array) to a Base64 string\n frame_base64 = convert_frame_to_base64(frame)\n selected_frames_base64.append(frame_base64)\n if len(selected_frames_base64) >= max_frames:\n break\n \n # Release the video capture object\n video_capture.release()\n\n return selected_frames_base64\n\ndef convert_frame_to_base64(frame):\n # Convert the frame (NumPy array) to JPEG format\n ret, buffer = cv2.imencode('.jpg', frame)\n if not ret:\n return None\n\n # Encode JPEG image to Base64\n frame_base64 = base64.b64encode(buffer).decode('utf-8')\n return frame_base64\n\nbase64_video = _input.item.binary.data.data\nframes_base64 = extract_evenly_distributed_frames_from_base64(base64_video, max_frames=90)\n\nreturn { \"output\": frames_base64 }"
  },
  "typeVersion": 2
}

================ Node #2877 ================
{
  "id": "b45e82a4-f304-4733-a9cf-07cae6df13ea",
  "name": "Split Out Frames",
  "type": "n8n-nodes-base.splitOut",
  "position": [
    920,
    460
  ],
  "parameters": {
    "options": {},
    "fieldToSplitOut": "output"
  },
  "typeVersion": 1
}

================ Node #2878 ================
{
  "id": "83d29c51-a415-476d-b380-1ca5f0d4f521",
  "name": "Download Video",
  "type": "n8n-nodes-base.httpRequest",
  "position": [
    329,
    346
  ],
  "parameters": {
    "url": "=https://cdn.pixabay.com/video/2016/05/12/3175-166339863_small.mp4",
    "options": {}
  },
  "typeVersion": 4.2
}

================ Node #2879 ================
{
  "id": "0304ebb5-945d-4b0b-9597-f83ae8c1fe31",
  "name": "Convert to Binary",
  "type": "n8n-nodes-base.convertToFile",
  "position": [
    1480,
    500
  ],
  "parameters": {
    "options": {},
    "operation": "toBinary",
    "sourceProperty": "output"
  },
  "typeVersion": 1.1
}

================ Node #2880 ================
{
  "id": "32a21e1d-1d8b-411e-8281-8d0e68a06889",
  "name": "When clicking \u2018Test workflow\u2019",
  "type": "n8n-nodes-base.manualTrigger",
  "position": [
    149,
    346
  ],
  "parameters": {},
  "typeVersion": 1
}

================ Node #2881 ================
{
  "id": "0ad2ea6a-e1f4-4b26-a4de-9103ecbb3831",
  "name": "Combine Script",
  "type": "n8n-nodes-base.aggregate",
  "position": [
    2640,
    360
  ],
  "parameters": {
    "options": {},
    "aggregate": "aggregateAllItemData"
  },
  "typeVersion": 1
}

================ Node #2882 ================
{
  "id": "2d9bb91a-3369-4268-882f-f97e73897bb8",
  "name": "Upload to GDrive",
  "type": "n8n-nodes-base.googleDrive",
  "position": [
    3040,
    360
  ],
  "parameters": {
    "name": "=narrating-video-using-vision-ai-{{ $now.format('yyyyMMddHHmmss') }}.mp3",
    "driveId": {
      "__rl": true,
      "mode": "list",
      "value": "My Drive",
      "cachedResultUrl": "https://drive.google.com/drive/my-drive",
      "cachedResultName": "My Drive"
    },
    "options": {},
    "folderId": {
      "__rl": true,
      "mode": "id",
      "value": "1dBJZL_SCh6F2U7N7kIMsnSiI4QFxn2xD"
    }
  },
  "credentials": {
    "googleDriveOAuth2Api": {
      "id": "yOwz41gMQclOadgu",
      "name": "Google Drive account"
    }
  },
  "typeVersion": 3
}

================ Node #2883 ================
{
  "id": "137185f6-ba32-4c68-844f-f50c7a5a261d",
  "name": "Sticky Note",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    -440,
    0
  ],
  "parameters": {
    "width": 476.34074202271484,
    "height": 586.0597334122469,
    "content": "## Try It Out!\n\n### This n8n template takes a video and extracts frames from it which are used with a multimodal LLM to generate a script. The script is then passed to the same multimodal LLM to generate a voiceover clip.\n\nThis template was inspired by [Processing and narrating a video with GPT's visual capabilities and the TTS API](https://cookbook.openai.com/examples/gpt_with_vision_for_video_understanding)\n\n* Video is downloaded using the HTTP node.\n* Python code node is used to extract the frames using OpenCV.\n* Loop node is used o batch the frames for the LLM to generate partial scripts.\n* All partial scripts are combined to form the full script which is then sent to OpenAI to generate audio from it.\n* The finished voiceover clip is uploaded to Google Drive.\n\nSample the finished product here: https://drive.google.com/file/d/1-XCoii0leGB2MffBMPpCZoxboVyeyeIX/view?usp=sharing\n\n\n### Need Help?\nJoin the [Discord](https://discord.com/invite/XPKeKXeB7d) or ask in the [Forum](https://community.n8n.io/)!"
  },
  "typeVersion": 1
}

================ Node #2884 ================
{
  "id": "23700b04-2549-4121-b442-4b92adf7f6d6",
  "name": "Sticky Note1",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    60,
    120
  ],
  "parameters": {
    "color": 7,
    "width": 459.41860465116287,
    "height": 463.313953488372,
    "content": "## 1. Download Video\n[Learn more about the HTTP Request node](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.httprequest/)\n\nIn this demonstration, we'll download a stock video from pixabay using the HTTP Request node. Feel free to use other sources but ensure they are in a format support by OpenCV ([See docs](https://docs.opencv.org/3.4/dd/d43/tutorial_py_video_display.html))"
  },
  "typeVersion": 1
}

================ Node #2885 ================
{
  "id": "0a42aeb0-96cd-401c-abeb-c50e0f04f7ad",
  "name": "Sticky Note2",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    560,
    120
  ],
  "parameters": {
    "color": 7,
    "width": 605.2674418604653,
    "height": 522.6860465116279,
    "content": "## 2. Split Video into Frames\n[Learn more about the Code node](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.code/)\n\nWe need to think of videos are a sum of 2 parts; a visual track and an audio track. The visual track is technically just a collection of images displayed one after the other and are typically referred to as frames. When we want LLM to understand videos, most of the time we can do so by giving it a series of frames as images to process.\n\nHere, we use the Python Code node to extract the frames from the video using OpenCV, a computer vision library. For performance reasons, we'll also capture only a max of 90 frames from the video but ensure they are evenly distributed across the video. This step takes about 1-2 mins to complete on a 3mb video."
  },
  "typeVersion": 1
}

================ Node #2886 ================
{
  "id": "b518461c-13f1-45ae-a156-20ae6051fc19",
  "name": "Sticky Note3",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    560,
    660
  ],
  "parameters": {
    "color": 3,
    "width": 418.11627906976724,
    "height": 132.89534883720933,
    "content": "### \ud83d\udea8 PERFORMANCE WARNING!\nUsing large videos or capturing a large number of frames is really memory intensive and could crash your n8n instance. Be sure you have sufficient memory and to optimise the video beforehand! "
  },
  "typeVersion": 1
}

================ Node #2887 ================
{
  "id": "585f7a7f-1676-4bc3-a6fb-eace443aa5da",
  "name": "Sticky Note4",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    1200,
    118.69767441860472
  ],
  "parameters": {
    "color": 7,
    "width": 1264.8139534883715,
    "height": 774.3720930232558,
    "content": "## 3. Use Vision AI to Narrate on Batches of Frames\n[Read more about the Basic LLM node](https://docs.n8n.io/integrations/builtin/cluster-nodes/root-nodes/n8n-nodes-langchain.chainllm/)\n\nTo keep within token limits of our LLM, we'll need to send our frames in sequential batches to represent chunks of our original video. We'll use the loop node to create batches of 15 frames - this is because of our max of 90 frames, this fits perfectly for a total of 6 loops. Next, we'll convert each frame to a binary image so we can resize for and attach to the Basic LLM node. One trick to point out is that within the Basic LLM node, previous iterations of the generation are prepended to form a cohesive script. Without, the LLM will assume it needs to start fresh for each batch of frames.\n\nA wait node is used to stay within service rate limits. This is useful for new users who are still on lower tiers. If you do not have such restrictions, feel free to remove this wait node!"
  },
  "typeVersion": 1
}

================ Node #2888 ================
{
  "id": "42c002a3-37f6-4dd7-af14-20391b19cb5a",
  "name": "Stay Within Service Limits",
  "type": "n8n-nodes-base.wait",
  "position": [
    2280,
    640
  ],
  "webhookId": "677fa706-b4dd-4fe3-ba17-feea944c3193",
  "parameters": {},
  "typeVersion": 1.1
}

================ Node #2889 ================
{
  "id": "5beb17fa-8a57-4c72-9c3b-b7fdf41b545a",
  "name": "For Every 15 Frames",
  "type": "n8n-nodes-base.splitInBatches",
  "position": [
    1320,
    380
  ],
  "parameters": {
    "options": {},
    "batchSize": 15
  },
  "typeVersion": 3
}

================ Node #2890 ================
{
  "id": "9a57256a-076a-4823-8cad-3b64a17ff705",
  "name": "Resize Frame",
  "type": "n8n-nodes-base.editImage",
  "position": [
    1640,
    500
  ],
  "parameters": {
    "width": 768,
    "height": 768,
    "options": {
      "format": "jpeg"
    },
    "operation": "resize"
  },
  "typeVersion": 1
}

================ Node #2891 ================
{
  "id": "3e776939-1a25-4ea0-8106-c3072d108106",
  "name": "Aggregate Frames",
  "type": "n8n-nodes-base.aggregate",
  "position": [
    1800,
    500
  ],
  "parameters": {
    "options": {
      "includeBinaries": true
    },
    "aggregate": "aggregateAllItemData"
  },
  "typeVersion": 1
}

================ Node #2892 ================
{
  "id": "3a973a9c-2c7a-43c5-9c45-a14d49b56622",
  "name": "Sticky Note5",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    2500,
    120.6860465116277
  ],
  "parameters": {
    "color": 7,
    "width": 769.1860465116274,
    "height": 487.83720930232533,
    "content": "## 4. Generate Voice Over Clip Using TTS\n[Read more about the OpenAI node](https://docs.n8n.io/integrations/builtin/app-nodes/n8n-nodes-langchain.openai)\n\nFinally with our generated script parts, we can combine them into one and use OpenAI's Audio generation capabilities to generate a voice over from the full script. Once we have the output mp3, we can upload it to somewhere like Google Drive for later use.\n\nHave a listen to the finished product here: https://drive.google.com/file/d/1-XCoii0leGB2MffBMPpCZoxboVyeyeIX/view?usp=sharing"
  },
  "typeVersion": 1
}

================ Node #2893 ================
{
  "id": "92e07c18-4058-4098-a448-13451bd8a17a",
  "name": "Use Text-to-Speech",
  "type": "@n8n/n8n-nodes-langchain.openAi",
  "position": [
    2840,
    360
  ],
  "parameters": {
    "input": "={{ $json.data.map(item => item.text).join('\\n') }}",
    "options": {
      "response_format": "mp3"
    },
    "resource": "audio"
  },
  "credentials": {
    "openAiApi": {
      "id": "8gccIjcuf3gvaoEr",
      "name": "OpenAi account"
    }
  },
  "typeVersion": 1.5
}

================ Node #2894 ================
{
  "id": "0696c336-1814-4ad4-aa5e-b86489a4231e",
  "name": "Sticky Note6",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    61,
    598
  ],
  "parameters": {
    "color": 7,
    "width": 458.1279069767452,
    "height": 296.8139534883723,
    "content": "**The video used in this demonstration is**\n&copy; [Coverr-Free-Footage](https://pixabay.com/users/coverr-free-footage-1281706/) via [Pixabay](https://pixabay.com/videos/india-street-busy-rickshaw-people-3175/)\n![](https://res.cloudinary.com/daglih2g8/image/upload/f_auto,q_auto/v1/n8n-workflows/jhx2tma2gxaabkeiqlgp#full-width)"
  },
  "typeVersion": 1
}

================ Node #2895 ================
{
  "id": "81185ac4-c7fd-4921-937f-109662d5dfa5",
  "name": "Generate Narration Script",
  "type": "@n8n/n8n-nodes-langchain.chainLlm",
  "position": [
    1960,
    500
  ],
  "parameters": {
    "text": "=These are frames of a video. Create a short voiceover script in the style of David Attenborough. Only include the narration.\n{{\n$('Generate Narration Script').isExecuted\n ? `Continue from this script:\\n${$('Generate Narration Script').all().map(item => item.json.text.replace(/\\n/g,'')).join('\\n')}`\n : ''\n}}",
    "messages": {
      "messageValues": [
        {
          "type": "HumanMessagePromptTemplate",
          "messageType": "imageBinary"
        },
        {
          "type": "HumanMessagePromptTemplate",
          "messageType": "imageBinary",
          "binaryImageDataKey": "data_1"
        },
        {
          "type": "HumanMessagePromptTemplate",
          "messageType": "imageBinary",
          "binaryImageDataKey": "data_2"
        },
        {
          "type": "HumanMessagePromptTemplate",
          "messageType": "imageBinary",
          "binaryImageDataKey": "data_3"
        },
        {
          "type": "HumanMessagePromptTemplate",
          "messageType": "imageBinary",
          "binaryImageDataKey": "data_4"
        },
        {
          "type": "HumanMessagePromptTemplate",
          "messageType": "imageBinary",
          "binaryImageDataKey": "data_5"
        },
        {
          "type": "HumanMessagePromptTemplate",
          "messageType": "imageBinary",
          "binaryImageDataKey": "data_6"
        },
        {
          "type": "HumanMessagePromptTemplate",
          "messageType": "imageBinary",
          "binaryImageDataKey": "data_7"
        },
        {
          "type": "HumanMessagePromptTemplate",
          "messageType": "imageBinary",
          "binaryImageDataKey": "data_8"
        },
        {
          "type": "HumanMessagePromptTemplate",
          "messageType": "imageBinary",
          "binaryImageDataKey": "data_9"
        },
        {
          "type": "HumanMessagePromptTemplate",
          "messageType": "imageBinary",
          "binaryImageDataKey": "data_10"
        },
        {
          "type": "HumanMessagePromptTemplate",
          "messageType": "imageBinary",
          "binaryImageDataKey": "data_11"
        },
        {
          "type": "HumanMessagePromptTemplate",
          "messageType": "imageBinary",
          "binaryImageDataKey": "data_12"
        },
        {
          "type": "HumanMessagePromptTemplate",
          "messageType": "imageBinary",
          "binaryImageDataKey": "data_13"
        },
        {
          "type": "HumanMessagePromptTemplate",
          "messageType": "imageBinary",
          "binaryImageDataKey": "data_14"
        }
      ]
    },
    "promptType": "define"
  },
  "typeVersion": 1.4
}

================ Node #2896 ================
{
  "id": "9cc26a42-eb43-40c4-b507-cbaf187a5e15",
  "name": "Get New Message",
  "type": "n8n-nodes-base.telegramTrigger",
  "position": [
    1120,
    500
  ],
  "webhookId": "464f0a75-56d1-402f-8b12-b358452e9736",
  "parameters": {
    "updates": [
      "message"
    ],
    "additionalFields": {}
  },
  "credentials": {
    "telegramApi": {
      "id": "rI0zyfIYVIyXt2fL",
      "name": "Telegram Club"
    }
  },
  "typeVersion": 1.1
}

================ Node #2897 ================
{
  "id": "098b6fcf-7cb6-4730-8892-949fedc946b3",
  "name": "OPENAI - Create thread",
  "type": "n8n-nodes-base.httpRequest",
  "position": [
    1740,
    640
  ],
  "parameters": {
    "url": "https://api.openai.com/v1/threads",
    "method": "POST",
    "options": {},
    "sendHeaders": true,
    "authentication": "predefinedCredentialType",
    "headerParameters": {
      "parameters": [
        {
          "name": "OpenAI-Beta",
          "value": "assistants=v2"
        }
      ]
    },
    "nodeCredentialType": "openAiApi"
  },
  "credentials": {
    "openAiApi": {
      "id": "zJhr5piyEwVnWtaI",
      "name": "OpenAi club"
    }
  },
  "typeVersion": 4.2
}

================ Node #2898 ================
{
  "id": "fa157f8c-b776-4b20-bfaf-c17460383505",
  "name": "Create User",
  "type": "n8n-nodes-base.supabase",
  "position": [
    1900,
    640
  ],
  "parameters": {
    "tableId": "telegram_users",
    "fieldsUi": {
      "fieldValues": [
        {
          "fieldId": "telegram_id",
          "fieldValue": "={{ $('Get New Message').item.json.message.chat.id }}"
        },
        {
          "fieldId": "openai_thread_id",
          "fieldValue": "={{ $('OPENAI - Create thread').item.json.id }}"
        }
      ]
    }
  },
  "credentials": {
    "supabaseApi": {
      "id": "QBhcokohbJHfQZ9A",
      "name": "Supabase club"
    }
  },
  "typeVersion": 1
}

================ Node #2899 ================
{
  "id": "115e417f-5962-409b-8adf-ff236eb9ce2e",
  "name": "Merge",
  "type": "n8n-nodes-base.merge",
  "position": [
    2080,
    500
  ],
  "parameters": {},
  "typeVersion": 3
}

================ Node #2900 ================
{
  "id": "ba5c7385-8c80-43c8-9de2-430175bda70b",
  "name": "OPENAI - Send message",
  "type": "n8n-nodes-base.httpRequest",
  "position": [
    2240,
    500
  ],
  "parameters": {
    "url": "=https://api.openai.com/v1/threads/{{ $('Merge').item.json.openai_thread_id }}/messages ",
    "method": "POST",
    "options": {},
    "sendBody": true,
    "sendHeaders": true,
    "authentication": "predefinedCredentialType",
    "bodyParameters": {
      "parameters": [
        {
          "name": "role",
          "value": "user"
        },
        {
          "name": "content",
          "value": "={{ $('Get New Message').item.json.message.text }}"
        }
      ]
    },
    "headerParameters": {
      "parameters": [
        {
          "name": "OpenAI-Beta",
          "value": "assistants=v2"
        }
      ]
    },
    "nodeCredentialType": "openAiApi"
  },
  "credentials": {
    "openAiApi": {
      "id": "fLfRtaXbR0EVD0pl",
      "name": "OpenAi account"
    }
  },
  "typeVersion": 4.2
}

================ Node #2901 ================
{
  "id": "024832bc-3d42-4879-a57f-b23e962b4c69",
  "name": "OPENAI - Run assistant",
  "type": "n8n-nodes-base.httpRequest",
  "position": [
    2440,
    500
  ],
  "parameters": {
    "url": "=https://api.openai.com/v1/threads/{{ $('Merge').item.json.openai_thread_id }}/runs",
    "method": "POST",
    "options": {},
    "sendBody": true,
    "sendHeaders": true,
    "authentication": "predefinedCredentialType",
    "bodyParameters": {
      "parameters": [
        {
          "name": "assistant_id",
          "value": "asst_b0QhuzySG6jofHFdzPZD7WEz"
        },
        {
          "name": "stream",
          "value": "={{true}}"
        }
      ]
    },
    "headerParameters": {
      "parameters": [
        {
          "name": "OpenAI-Beta",
          "value": "assistants=v2"
        }
      ]
    },
    "nodeCredentialType": "openAiApi"
  },
  "credentials": {
    "openAiApi": {
      "id": "fLfRtaXbR0EVD0pl",
      "name": "OpenAi account"
    }
  },
  "typeVersion": 4.2
}

================ Node #2902 ================
{
  "id": "bc191e2b-15f4-45b7-af2e-19ed1639b7f5",
  "name": "OPENAI - Get messages",
  "type": "n8n-nodes-base.httpRequest",
  "position": [
    2640,
    500
  ],
  "parameters": {
    "url": "=https://api.openai.com/v1/threads/{{ $('Merge').item.json.openai_thread_id }}/messages",
    "options": {},
    "sendHeaders": true,
    "authentication": "predefinedCredentialType",
    "headerParameters": {
      "parameters": [
        {
          "name": "OpenAI-Beta",
          "value": "assistants=v2"
        }
      ]
    },
    "nodeCredentialType": "openAiApi"
  },
  "credentials": {
    "openAiApi": {
      "id": "zJhr5piyEwVnWtaI",
      "name": "OpenAi club"
    }
  },
  "typeVersion": 4.2
}

================ Node #2903 ================
{
  "id": "c22e05e5-f0a7-4a09-a864-acfc58469b30",
  "name": "Send Message to User",
  "type": "n8n-nodes-base.telegram",
  "position": [
    2840,
    500
  ],
  "parameters": {
    "text": "={{ $('OPENAI - Get messages').item.json.data[0].content[0].text.value }}",
    "chatId": "={{ $('Get New Message').item.json.message.chat.id }}",
    "additionalFields": {
      "appendAttribution": false
    }
  },
  "credentials": {
    "telegramApi": {
      "id": "rI0zyfIYVIyXt2fL",
      "name": "Telegram Club"
    }
  },
  "typeVersion": 1.2
}

================ Node #2904 ================
{
  "id": "0673be1f-3cae-42a0-9c62-1ed570859043",
  "name": "If User exists",
  "type": "n8n-nodes-base.if",
  "position": [
    1560,
    500
  ],
  "parameters": {
    "options": {},
    "conditions": {
      "options": {
        "leftValue": "",
        "caseSensitive": true,
        "typeValidation": "strict"
      },
      "combinator": "and",
      "conditions": [
        {
          "id": "b6e69a1f-eb42-4ef6-b80c-3167f1b8c830",
          "operator": {
            "type": "string",
            "operation": "exists",
            "singleValue": true
          },
          "leftValue": "={{ $json.id }}",
          "rightValue": ""
        }
      ]
    }
  },
  "typeVersion": 2.1
}

================ Node #2905 ================
{
  "id": "a4916f54-ae6b-495d-979b-92dca965e3bb",
  "name": "Find User",
  "type": "n8n-nodes-base.supabase",
  "position": [
    1360,
    500
  ],
  "parameters": {
    "filters": {
      "conditions": [
        {
          "keyName": "telegram_id",
          "keyValue": "={{ $json.message.chat.id }}",
          "condition": "eq"
        }
      ]
    },
    "tableId": "telegram_users",
    "operation": "getAll"
  },
  "credentials": {
    "supabaseApi": {
      "id": "QBhcokohbJHfQZ9A",
      "name": "Supabase club"
    }
  },
  "typeVersion": 1,
  "alwaysOutputData": true
}

================ Node #2906 ================
{
  "id": "6d01d7ed-e96b-47cf-9a5f-46608031baa2",
  "name": "Sticky Note1",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    1300,
    800
  ],
  "parameters": {
    "color": 7,
    "width": 600.723278204605,
    "height": 213.15921994594194,
    "content": "SQL query to create table in Supabase:\n\n```\ncreate table\n public.telegram_users (\n id uuid not null default gen_random_uuid (),\n date_created timestamp with time zone not null default (now() at time zone 'utc'::text),\n telegram_id bigint null,\n openai_thread_id text null,\n constraint telegram_users_pkey primary key (id)\n ) tablespace pg_default;\n```"
  },
  "typeVersion": 1
}

================ Node #2907 ================
{
  "id": "1a996da0-6022-48d7-ba40-1d137547a3d7",
  "name": "Sticky Note2",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    2340,
    360
  ],
  "parameters": {
    "color": 3,
    "width": 282.075050779723,
    "height": 80,
    "content": "Create assistant in [OpenAI](https://platform.openai.com/assistants).\n\n**Specify own assistant id here**\n"
  },
  "typeVersion": 1
}

================ Node #2908 ================
{
  "id": "b24d2008-7950-41f0-a7fa-50360c0c6854",
  "name": "Sticky Note3",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    1040,
    380
  ],
  "parameters": {
    "color": 3,
    "width": 235.09282368774151,
    "height": 80,
    "content": "Create own Telegram bot in [Botfather bot](https://t.me/botfather)"
  },
  "typeVersion": 1
}

================ Node #2909 ================
{
  "id": "9eb2491e-5ad9-4015-8ed9-611e72924503",
  "name": "Sticky Note4",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    1300,
    680
  ],
  "parameters": {
    "color": 3,
    "height": 80,
    "content": "Create table in [Supabase](https://supabase.com) with SQL query"
  },
  "typeVersion": 1
}

================ Node #2910 ================
{
  "id": "884b5a1b-007c-4752-becc-46c8fc58db92",
  "name": "Sticky Note5",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    200,
    120
  ],
  "parameters": {
    "color": 7,
    "width": 280.2462120317618,
    "height": 438.5821431288714,
    "content": "### Set up steps\n1. **Create a Telegram Bot** using the [Botfather](https://t.me/botfather) and obtain the bot token.\n2. **Set up Supabase:**\n\t1. Create a new project and generate a ```SUPABASE_URL``` and ```SUPABASE_KEY```.\n\t2. Create a new table named ```telegram_users``` with the following SQL query:\n```\ncreate table\n public.telegram_users (\n id uuid not null default gen_random_uuid (),\n date_created timestamp with time zone not null default (now() at time zone 'utc'::text),\n telegram_id bigint null,\n openai_thread_id text null,\n constraint telegram_users_pkey primary key (id)\n ) tablespace pg_default;\n```\n3. **OpenAI Setup:**\n\t1. Create an OpenAI assistant and obtain the ```OPENAI_API_KEY```.\n\t2. Customize your assistant\u2019s personality or use cases according to your requirements.\n4. **Environment Configuration in n8n:**\n\t1. Configure the Telegram, Supabase, and OpenAI nodes with the appropriate credentials.\n\t2. Set up triggers for receiving messages and handling conversation logic.\n\t3. Set up OpenAI assistant ID in \"++OPENAI - Run assistant++\" node."
  },
  "typeVersion": 1
}

================ Node #2911 ================
{
  "id": "02db77ac-4909-4a56-a558-03c86d8b8552",
  "name": "Sticky Note6",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    200,
    -400
  ],
  "parameters": {
    "color": 7,
    "width": 636.2128494576581,
    "height": 494.9629292914819,
    "content": "![5min Logo](https://cflobdhpqwnoisuctsoc.supabase.co/storage/v1/object/public/my_storage/Untitled%20(1500%20x%20300%20px).png)\n## AI Telegram Bot with Supabase memory\n**Made by [Mark Shcherbakov](https://www.linkedin.com/in/marklowcoding/) from community [5minAI](https://www.skool.com/5minai-2861)**\n\nMany simple chatbots lack context awareness and user memory. This workflow solves that by integrating Supabase to keep track of user sessions (via ```telegram_id``` and ```openai_thread_id```), allowing the bot to maintain continuity and context in conversations, leading to a more human-like and engaging experience.\n\nThis Telegram bot template connects with OpenAI to answer user queries while storing and retrieving user information from a Supabase database. The memory component ensures that the bot can reference past interactions, making it suitable for use cases such as customer support, virtual assistants, or any application where context retention is crucial.\n\n"
  },
  "typeVersion": 1
}

================ Node #2912 ================
{
  "id": "a991a7c9-ea5f-4a25-aa92-6dc2fce11b05",
  "name": "Sticky Note7",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    500,
    120
  ],
  "parameters": {
    "color": 7,
    "width": 330.5152611046425,
    "height": 240.6839895136402,
    "content": "### ... or watch set up video [5 min]\n[![Youtube Thumbnail](https://cflobdhpqwnoisuctsoc.supabase.co/storage/v1/object/public/my_storage/Youtube%20thumb%20(3).png)](https://www.youtube.com/watch?v=kS41gut8l0g)\n"
  },
  "typeVersion": 1
}

================ Node #2913 ================
{
  "id": "49ab7596-665e-4a0f-bb8b-9dc04525ce88",
  "name": "Gmail",
  "type": "n8n-nodes-base.gmail",
  "position": [
    2340,
    1440
  ],
  "parameters": {
    "message": "={{ $json.html }}",
    "options": {},
    "subject": "Podcast Review"
  },
  "credentials": {
    "gmailOAuth2": {
      "id": "1MUdv1HbrQUFABiZ",
      "name": "Gmail account"
    }
  },
  "typeVersion": 2.1
}

================ Node #2914 ================
{
  "id": "40aa23f4-69d6-46e5-84a2-b46a64a3f0af",
  "name": "TaddyTopDaily",
  "type": "n8n-nodes-base.httpRequest",
  "position": [
    1620,
    820
  ],
  "parameters": {
    "url": "https://api.taddy.org/",
    "method": "POST",
    "options": {},
    "sendBody": true,
    "sendHeaders": true,
    "bodyParameters": {
      "parameters": [
        {
          "name": "query",
          "value": "=query { getTopChartsByGenres( limitPerPage:10, filterByCountry:UNITED_STATES_OF_AMERICA, taddyType:PODCASTEPISODE, genres:PODCASTSERIES_{{ $json.genre }}){ topChartsId podcastEpisodes{ uuid name audioUrl podcastSeries{ uuid name } } } }"
        }
      ]
    },
    "headerParameters": {
      "parameters": [
        {
          "name": "X-USER-ID"
        },
        {
          "name": "X-API-KEY"
        }
      ]
    }
  },
  "typeVersion": 4.2
}

================ Node #2915 ================
{
  "id": "42eea23b-b09c-49ee-af5b-12abb3960390",
  "name": "Genre",
  "type": "n8n-nodes-base.set",
  "position": [
    1420,
    820
  ],
  "parameters": {
    "options": {},
    "assignments": {
      "assignments": [
        {
          "id": "e995cd5b-b91c-4a9d-8215-44d7dfe3f52f",
          "name": "genre",
          "type": "string",
          "value": "TECHNOLOGY"
        }
      ]
    }
  },
  "typeVersion": 3.4
}

================ Node #2916 ================
{
  "id": "da256fbf-ed7b-4a26-9fa8-33d1c2b717a5",
  "name": "Split Out",
  "type": "n8n-nodes-base.splitOut",
  "position": [
    1840,
    820
  ],
  "parameters": {
    "options": {},
    "fieldToSplitOut": "data.getTopChartsByGenres.podcastEpisodes"
  },
  "typeVersion": 1
}

================ Node #2917 ================
{
  "id": "069ab68c-dcd6-406f-8e7f-2597f62a04f5",
  "name": "Whisper Transcribe Audio",
  "type": "n8n-nodes-base.httpRequest",
  "position": [
    1880,
    1120
  ],
  "parameters": {
    "url": "https://api.openai.com/v1/audio/transcriptions",
    "method": "POST",
    "options": {},
    "sendBody": true,
    "contentType": "multipart-form-data",
    "authentication": "predefinedCredentialType",
    "bodyParameters": {
      "parameters": [
        {
          "name": "model",
          "value": "whisper-1"
        },
        {
          "name": "file",
          "parameterType": "formBinaryData",
          "inputDataFieldName": "data"
        }
      ]
    },
    "nodeCredentialType": "openAiApi"
  },
  "credentials": {
    "openAiApi": {
      "id": "tTOOlpAaNT3QoKbQ",
      "name": "OpenAi account"
    }
  },
  "typeVersion": 3
}

================ Node #2918 ================
{
  "id": "ffa67b8d-8601-4e1d-8f72-b6266e6b3327",
  "name": "Final Data",
  "type": "n8n-nodes-base.set",
  "position": [
    2320,
    1120
  ],
  "parameters": {
    "mode": "raw",
    "options": {},
    "jsonOutput": "={\n\"podcast\": \"{{ $('TaddyTopDaily').item.json.data.getTopChartsByGenres.podcastEpisodes[$itemIndex].podcastSeries.name }}\",\n\"name\": \"{{ $('TaddyTopDaily').item.json.data.getTopChartsByGenres.podcastEpisodes[$itemIndex].name.replace(/\\\"/g,'\\\"') }}\",\n \"url\":\"{{ $('TaddyTopDaily').item.json.data.getTopChartsByGenres.podcastEpisodes[$itemIndex].audioUrl.replace(/\"/g,'') }}\",\n\"summary\":\"{{ $json.message.content.replace(/\\\\/g, '\\\\\\\\').replace(/\"/g, '\\\\\"').replace(/\\n/g, '<br/>').replace(/\\r/g, '\\\\r').replace(/\\t/g, '\\\\t') }}\"\n \n}\n"
  },
  "typeVersion": 3.4
}

================ Node #2919 ================
{
  "id": "88cd1fa5-07ae-4dcd-b4f8-85cbf7c98d73",
  "name": "Merge Results",
  "type": "n8n-nodes-base.code",
  "position": [
    1900,
    1440
  ],
  "parameters": {
    "jsCode": "return [{fields:$input.all().map(x=>x.json)}]"
  },
  "typeVersion": 2
}

================ Node #2920 ================
{
  "id": "4c2c80d1-750f-42f1-a0f1-343dec325b0f",
  "name": "HTML",
  "type": "n8n-nodes-base.html",
  "position": [
    2120,
    1440
  ],
  "parameters": {
    "html": "<!DOCTYPE html>\n<html>\n<head>\n <meta charset=\"UTF-8\" />\n</head>\n<body>\n <table>\n <tr> \n {{ ['Podcast', 'Episode', 'Summary'].map(propname=>'<td><h4>'+propname+'</h4></td>').join('') }}\n </tr>\n {{ $json.fields.map(ep=>{ return `<tr><td>${ep.podcast}</td><td><a href=\"${ep.url}\">${ep.name}</a></td><td>${ep.summary}</td><td></td></tr>`} ) }}\n </table>\n</body>\n</html>\n\n<style>\ntr { \n border: 1px solid #000; \n padding: 8px; \n }\n.container {\n background-color: #ffffff;\n text-align: center;\n padding: 16px;\n border-radius: 8px;\n}\n\nh1 {\n color: #ff6d5a;\n font-size: 24px;\n font-weight: bold;\n padding: 8px;\n}\n\nh2 {\n color: #909399;\n font-size: 18px;\n font-weight: bold;\n padding: 8px;\n}\n</style>\n"
  },
  "executeOnce": true,
  "typeVersion": 1.2
}

================ Node #2921 ================
{
  "id": "f1d13556-2c3a-48e5-84a1-5b82f338c6ba",
  "name": "Sticky Note",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    340,
    760
  ],
  "parameters": {
    "color": 4,
    "width": 547.952991050529,
    "height": 683.5200847858991,
    "content": "## Daily Podcast Summary\n### This workflow will summarize the content in the day's top podcasts for a certain genre, then send you the podcasts with summaries by email\n\n## Setup:\n 1. Create a free API key on Taddy here: https://taddy.org/signup/developers\n 2. Input your user number and API key into the `TaddyTopDaily` node in the header parameters X-USER-ID and X-API-KEY respectively.\n 3. Create access credentials for your Gmail as described here: https://developers.google.com/workspace/guides/create-credentials. Use the credentials from your *client_secret.json* in the `Gmail` node.\n 4. In the `Genre` node, set the genre of podcasts you want a summary for. Valid values are: TECHNOLOGY, NEWS, ARTS, COMEDY, SPORTS, FICTION, etc. Look at api.taddy.org for the full list (they will be displayed in the help docs as PODCASTSERIES_TECHNOLOGY, PODCASTSERIES_NEWS, etc.)\n 5. Enter your email address in the `Gmail` node.\n 6. Change the schedule time for sending email from `Schedule` to whichever time you want to receive the email.\n \n\n## Test:\n- Link a `Test Workflow` node in place of the `Schedule` node.\n- Hit Test Workflow.\n- Check your email for the results."
  },
  "typeVersion": 1
}

================ Node #2922 ================
{
  "id": "5aee7279-349e-47cd-99dc-7a32677b5a20",
  "name": "Sticky Note1",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    1820,
    1060
  ],
  "parameters": {
    "width": 651.4454343326669,
    "height": 252.64899257060446,
    "content": "### Whisper transcribes and Open AI summarizes the podcast"
  },
  "typeVersion": 1
}

================ Node #2923 ================
{
  "id": "f8b4a203-b27f-4a11-90ef-a7e1561219f5",
  "name": "Sticky Note2",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    1100,
    760
  ],
  "parameters": {
    "width": 1189.7320416038633,
    "height": 249.2202456997519,
    "content": "### Get daily list of top podcasts (according to Apple charts) and download audio, then crop for OpenAI"
  },
  "typeVersion": 1
}

================ Node #2924 ================
{
  "id": "7045c9c8-5509-4dc0-b167-ddd4d6c90c22",
  "name": "Sticky Note3",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    1825,
    1384
  ],
  "parameters": {
    "width": 645.0210885124873,
    "height": 227.94126205257731,
    "content": "### Finally, send the email!"
  },
  "typeVersion": 1
}

================ Node #2925 ================
{
  "id": "8dc9583b-cec3-4ac0-a74a-329f6c3b4801",
  "name": "Summarize Podcast",
  "type": "n8n-nodes-base.openAi",
  "position": [
    2140,
    1120
  ],
  "parameters": {
    "model": "gpt-4o-mini",
    "prompt": {
      "messages": [
        {
          "content": "=Summarize the major points of the following podcast: {{ $json.text }}. Start your answer by saying 'This episode focuses on', 'This episode is about', etc. Contain your answer to 3-4 paragraphs max, and focus on only key information. "
        }
      ]
    },
    "options": {
      "maxTokens": 500
    },
    "resource": "chat",
    "requestOptions": {}
  },
  "credentials": {
    "openAiApi": {
      "id": "tTOOlpAaNT3QoKbQ",
      "name": "OpenAi account"
    }
  },
  "typeVersion": 1
}

================ Node #2926 ================
{
  "id": "e8d122f1-29f9-41ca-9c6b-b72269686fd6",
  "name": "Schedule",
  "type": "n8n-nodes-base.scheduleTrigger",
  "position": [
    1220,
    820
  ],
  "parameters": {
    "rule": {
      "interval": [
        {
          "triggerAtHour": 8
        }
      ]
    }
  },
  "typeVersion": 1.2
}

================ Node #2927 ================
{
  "id": "67bc7a5b-8d0a-4de4-918d-410551dad4d7",
  "name": "Request Audio Crop",
  "type": "n8n-nodes-base.httpRequest",
  "position": [
    1000,
    1220
  ],
  "parameters": {
    "url": "https://api.products.aspose.app/audio/cutter/api/cutter",
    "method": "POST",
    "options": {},
    "sendBody": true,
    "contentType": "multipart-form-data",
    "sendHeaders": true,
    "bodyParameters": {
      "parameters": [
        {
          "name": "1",
          "parameterType": "formBinaryData",
          "inputDataFieldName": "data"
        },
        {
          "name": "convertOption",
          "value": "{\"startTime\":\"00:08:00\",\"endTime\":\"00:24:00\",\"audioFormat\":\"mp3\"}"
        }
      ]
    },
    "headerParameters": {
      "parameters": [
        {
          "name": "Accept",
          "value": "*/*("
        },
        {
          "name": "Connection",
          "value": "keep-alive"
        },
        {
          "name": "Origin",
          "value": "https://products.aspose.app"
        },
        {
          "name": "Referer",
          "value": "https://products.aspose.app"
        },
        {
          "name": "Sec-Fetch-Dest",
          "value": "empty"
        },
        {
          "name": "Sec-Fetch-Mode",
          "value": "cors"
        },
        {
          "name": "Sec-Fetch-Site",
          "value": "same-site"
        }
      ]
    }
  },
  "typeVersion": 4.2
}

================ Node #2928 ================
{
  "id": "0dc62507-3fea-45d7-a0dc-e92fb8e2600f",
  "name": "Get Download Link",
  "type": "n8n-nodes-base.httpRequest",
  "position": [
    1200,
    1220
  ],
  "parameters": {
    "url": "=https://api.products.aspose.app/audio/cutter/api/cutter/HandleStatus?fileRequestId={{ $('Request Audio Crop').item.json.Data.FileRequestId }}",
    "options": {},
    "sendHeaders": true,
    "headerParameters": {
      "parameters": [
        {
          "name": "Accept",
          "value": "application/json, text/javascript, */*; q=0.01"
        },
        {
          "name": "Connection",
          "value": "keep-alive"
        },
        {
          "name": "Origin",
          "value": "https://products.aspose.app"
        },
        {
          "name": "Referer",
          "value": "https://products.aspose.app"
        },
        {
          "name": "Sec-Fetch-Dest",
          "value": "empty"
        },
        {
          "name": "Sec-Fetch-Dest",
          "value": "cors"
        },
        {
          "name": "Sec-Fetch-Dest",
          "value": "same-site"
        }
      ]
    }
  },
  "typeVersion": 4.2
}

================ Node #2929 ================
{
  "id": "8aa65189-2a4b-4ac4-9915-45ccd679a5da",
  "name": "Download Cut MP3",
  "type": "n8n-nodes-base.httpRequest",
  "position": [
    1660,
    1140
  ],
  "parameters": {
    "url": "={{ $json.Data.DownloadLink }}",
    "options": {}
  },
  "typeVersion": 4.2
}

================ Node #2930 ================
{
  "id": "4e7318df-dbaa-4d9f-858d-4455ead763c1",
  "name": "Download Podcast",
  "type": "n8n-nodes-base.httpRequest",
  "position": [
    2060,
    820
  ],
  "parameters": {
    "url": "={{ $json.audioUrl }}",
    "options": {}
  },
  "typeVersion": 4.2
}

================ Node #2931 ================
{
  "id": "ab4601c6-7387-4f2f-a2f3-4256f88c0b3e",
  "name": "Wait",
  "type": "n8n-nodes-base.wait",
  "position": [
    1600,
    1360
  ],
  "webhookId": "bc28bc57-d9ea-430e-88db-78d088a058cb",
  "parameters": {},
  "typeVersion": 1.1
}

================ Node #2932 ================
{
  "id": "a0b300b9-aaad-48f1-8319-a03700e0d298",
  "name": "Sticky Note4",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    920,
    1100
  ],
  "parameters": {
    "width": 898.7483569555845,
    "height": 387.3779915472271,
    "content": "### Crop the podcast down before analysis"
  },
  "typeVersion": 1
}

================ Node #2933 ================
{
  "id": "34ca89fe-4ed1-491f-b3b9-32e97040959b",
  "name": "If Downloads Ready",
  "type": "n8n-nodes-base.if",
  "position": [
    1380,
    1180
  ],
  "parameters": {
    "options": {},
    "conditions": {
      "options": {
        "leftValue": "",
        "caseSensitive": true,
        "typeValidation": "loose"
      },
      "combinator": "and",
      "conditions": [
        {
          "id": "49440938-0cb3-41c8-bcab-b7ad96973f77",
          "operator": {
            "type": "boolean",
            "operation": "true",
            "singleValue": true
          },
          "leftValue": "={{ $input.all().map(x=>x.json.Data.DownloadLink).reduce((accumulator, currentValue) => accumulator && currentValue, true)\n}}",
          "rightValue": ""
        }
      ]
    },
    "looseTypeValidation": true
  },
  "typeVersion": 2.1
}

================ Node #2934 ================
{
  "id": "490493d1-e9ac-458a-ac9e-a86048ce6169",
  "name": "When clicking \u2018Test workflow\u2019",
  "type": "n8n-nodes-base.manualTrigger",
  "position": [
    -700,
    260
  ],
  "parameters": {},
  "typeVersion": 1
}

================ Node #2935 ================
{
  "id": "116f1137-632f-4021-ad0f-cf59ed1776fd",
  "name": "Google Gemini Chat Model",
  "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
  "position": [
    980,
    440
  ],
  "parameters": {
    "options": {},
    "modelName": "models/gemini-1.5-pro-latest"
  },
  "credentials": {
    "googlePalmApi": {
      "id": "dSxo6ns5wn658r8N",
      "name": "Google Gemini(PaLM) Api account"
    }
  },
  "typeVersion": 1
}

================ Node #2936 ================
{
  "id": "44695b4f-702c-4230-9ec3-e37447fed38e",
  "name": "Sort Pages",
  "type": "n8n-nodes-base.sort",
  "position": [
    400,
    320
  ],
  "parameters": {
    "options": {},
    "sortFieldsUi": {
      "sortField": [
        {
          "fieldName": "fileName"
        }
      ]
    }
  },
  "typeVersion": 1
}

================ Node #2937 ================
{
  "id": "f2575b2c-0808-464e-b982-1eed8e0d9df7",
  "name": "Sticky Note",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    -1280,
    0
  ],
  "parameters": {
    "width": 437.0502325581392,
    "height": 430.522325581395,
    "content": "## Try Me Out!\n\n### This workflow converts a bank statement to markdown, faithfully capturing the details using the power of Vision Language Models (\"VLMs\"). The resulting markdown can then be parsed again by your standard LLM to extract data such as identifying all deposit table rows in the document.\n\nThis workflow is able to handle both downloaded PDFs as well as scanned PDFs. Be sure to protect sensitive data before running this workflow.\n\n### Need Help?\nJoin the [Discord](https://discord.com/invite/XPKeKXeB7d) or ask in the [Forum](https://community.n8n.io/)!"
  },
  "typeVersion": 1
}

================ Node #2938 ================
{
  "id": "d62d7b0e-29eb-48a9-a471-4279e663c521",
  "name": "Get Bank Statement",
  "type": "n8n-nodes-base.googleDrive",
  "position": [
    -500,
    260
  ],
  "parameters": {
    "fileId": {
      "__rl": true,
      "mode": "id",
      "value": "1wS9U7MQDthj57CvEcqG_Llkr-ek6RqGA"
    },
    "options": {},
    "operation": "download"
  },
  "credentials": {
    "googleDriveOAuth2Api": {
      "id": "yOwz41gMQclOadgu",
      "name": "Google Drive account"
    }
  },
  "typeVersion": 3
}

================ Node #2939 ================
{
  "id": "1329973b-a4e0-4272-9e24-3674bb9d4923",
  "name": "Split PDF into Images",
  "type": "n8n-nodes-base.httpRequest",
  "position": [
    -140,
    320
  ],
  "parameters": {
    "url": "http://stirling-pdf:8080/api/v1/convert/pdf/img",
    "method": "POST",
    "options": {},
    "sendBody": true,
    "contentType": "multipart-form-data",
    "bodyParameters": {
      "parameters": [
        {
          "name": "fileInput",
          "parameterType": "formBinaryData",
          "inputDataFieldName": "data"
        },
        {
          "name": "imageFormat",
          "value": "jpg"
        },
        {
          "name": "singleOrMultiple",
          "value": "multiple"
        },
        {
          "name": "dpi",
          "value": "300"
        }
      ]
    }
  },
  "typeVersion": 4.2
}

================ Node #2940 ================
{
  "id": "4e263346-9f55-4316-a505-4a54061ccfbb",
  "name": "Extract Zip File",
  "type": "n8n-nodes-base.compression",
  "position": [
    40,
    320
  ],
  "parameters": {},
  "typeVersion": 1.1
}

================ Node #2941 ================
{
  "id": "5e97072f-a7c5-45aa-99d1-3231a9230b53",
  "name": "Images To List",
  "type": "n8n-nodes-base.code",
  "position": [
    220,
    320
  ],
  "parameters": {
    "jsCode": "let results = [];\n\nfor (item of items) {\n for (key of Object.keys(item.binary)) {\n results.push({\n json: {\n fileName: item.binary[key].fileName\n },\n binary: {\n data: item.binary[key],\n }\n });\n }\n}\n\nreturn results;"
  },
  "typeVersion": 2
}

================ Node #2942 ================
{
  "id": "62836c73-4cf7-4225-a45d-0cd62b7e227d",
  "name": "Resize Images For AI",
  "type": "n8n-nodes-base.editImage",
  "position": [
    800,
    280
  ],
  "parameters": {
    "width": 75,
    "height": 75,
    "options": {},
    "operation": "resize",
    "resizeOption": "percent"
  },
  "typeVersion": 1
}

================ Node #2943 ================
{
  "id": "59fc6716-9826-4463-be33-923a8f6f33f1",
  "name": "Sticky Note1",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    -820,
    0
  ],
  "parameters": {
    "color": 7,
    "width": 546.4534883720931,
    "height": 478.89348837209275,
    "content": "## 1. Download Bank Statement PDF\n[Read more about Google Drive node](https://docs.n8n.io/integrations/builtin/app-nodes/n8n-nodes-base.googledrive)\n\nFor this demonstration, we'll pull an example bank statement off Google Drive however, you can also swap this out for other triggers such as webhook.\n\nYou can use the example bank statement created specifically for this workflow here: https://drive.google.com/file/d/1wS9U7MQDthj57CvEcqG_Llkr-ek6RqGA/view?usp=sharing"
  },
  "typeVersion": 1
}

================ Node #2944 ================
{
  "id": "8e68a295-ff35-4d28-86bb-c8ea5664b3c6",
  "name": "Sticky Note2",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    -240,
    3.173953488372149
  ],
  "parameters": {
    "color": 7,
    "width": 848.0232558139535,
    "height": 533.5469767441862,
    "content": "## 2. Split PDF Pages into Seperate Images\n\nCurrently, the vision model we'll be using can't accept raw PDFs so we'll have to convert our PDF to a image in order to use it. To achieve this, we'll use the free [Stirling PDF webservice](https://stirlingpdf.io/) for convenience but if we need data privacy (recommended!), we could self-host our own [Stirling PDF instance](https://github.com/Stirling-Tools/Stirling-PDF/) instead. Alternatively, feel free to swap this service out for one of your own as long as it can convert PDFs into images!\n\nWe will ask the PDF service to return each page of our statement as separate images, which it does so as a zip file. Next steps is to just unzip the file and convert the output as a list of images."
  },
  "typeVersion": 1
}

================ Node #2945 ================
{
  "id": "5286aa35-9687-4d5b-987c-79322a1ddc84",
  "name": "Sticky Note3",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    640,
    -40
  ],
  "parameters": {
    "color": 7,
    "width": 775.3441860465115,
    "height": 636.0809302325588,
    "content": "## 3. Convert PDF Pages to Markdown Using Vision Model\n[Learn more about using the Basic LLM node](https://docs.n8n.io/integrations/builtin/cluster-nodes/root-nodes/n8n-nodes-langchain.chainllm)\n\nUnlike traditional OCR, vision models (\"VLMs\") \"transcribe\" what they see so while we shouldn't expect an exact replication of a document, they may perform better making sense of complex document layouts ie. such as with horizontally stacked tables.\n \nIn this demonstration, we can transcribe our bank statement scans to markdown text for the purpose of further processing. With markdown, we can retain tables or columnar data found in the document. We'll employ two optimisations however as a workaround for token and timeout limits (1) we'll only transcribe one page at a time and (2) we'll shrink the pages just a little just enough to speed up processing but not enough to reduce our required resolution."
  },
  "typeVersion": 1
}

================ Node #2946 ================
{
  "id": "49deef00-4617-4b19-a56f-08fd195dfb82",
  "name": "Google Gemini Chat Model1",
  "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
  "position": [
    1760,
    480
  ],
  "parameters": {
    "options": {
      "safetySettings": {
        "values": [
          {
            "category": "HARM_CATEGORY_DANGEROUS_CONTENT",
            "threshold": "BLOCK_NONE"
          }
        ]
      }
    },
    "modelName": "models/gemini-1.5-pro-latest"
  },
  "credentials": {
    "googlePalmApi": {
      "id": "dSxo6ns5wn658r8N",
      "name": "Google Gemini(PaLM) Api account"
    }
  },
  "typeVersion": 1
}

================ Node #2947 ================
{
  "id": "8e9c5d1d-d610-4bad-8feb-7ff0d5e1e64f",
  "name": "Sticky Note4",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    1440,
    80
  ],
  "parameters": {
    "color": 7,
    "width": 719.7534883720941,
    "height": 574.3134883720929,
    "content": "## 4. Extract Key Data Confidently From Statement\n[Read more about the Information Extractor](https://docs.n8n.io/integrations/builtin/cluster-nodes/root-nodes/n8n-nodes-langchain.information-extractor)\n\nWith our newly generated transcript, let's pull just the deposit line items from our statement. Processing all pages together as images may have been compute-extensive but as text, this is usually no problem at all for our LLM.\n\nFor our example bank statement PDF, the resulting extraction should be 8 table rows where a value exists in the \"deposits\" column."
  },
  "typeVersion": 1
}

================ Node #2948 ================
{
  "id": "f849ad3c-69ec-443c-b7cd-ab24e210af73",
  "name": "Sticky Note6",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    -640,
    500
  ],
  "parameters": {
    "color": 5,
    "width": 366.00558139534894,
    "height": 125.41023255813957,
    "content": "### \ud83d\udca1 About the Example PDF\nScanned PDFs (ie. where each page is a scanned image) are a use-case where extracting PDF text content will not work. Vision models are a great solution as this workflow aims to demonstrate!"
  },
  "typeVersion": 1
}

================ Node #2949 ================
{
  "id": "be6f529b-8220-4879-bd99-4333b4d764b6",
  "name": "Combine All Pages",
  "type": "n8n-nodes-base.aggregate",
  "position": [
    1580,
    320
  ],
  "parameters": {
    "options": {},
    "fieldsToAggregate": {
      "fieldToAggregate": [
        {
          "renameField": true,
          "outputFieldName": "pages",
          "fieldToAggregate": "text"
        }
      ]
    }
  },
  "typeVersion": 1
}

================ Node #2950 ================
{
  "id": "2b35755c-7bae-4896-b9f9-1e9110209526",
  "name": "Sticky Note5",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    -190.1172093023256,
    280
  ],
  "parameters": {
    "width": 199.23348837209306,
    "height": 374.95069767441856,
    "content": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n### Privacy Warning!\nThis example uses a public third party service. If your data is senstive, please swap this out for the self-hosted version!"
  },
  "typeVersion": 1
}

================ Node #2951 ================
{
  "id": "f638ba05-9ae2-447f-82af-eb22d8b9d6f1",
  "name": "Extract All Deposit Table Rows",
  "type": "@n8n/n8n-nodes-langchain.informationExtractor",
  "position": [
    1760,
    320
  ],
  "parameters": {
    "text": "= {{ $json.pages.join('---') }}",
    "options": {
      "systemPromptTemplate": "This statement contains tables with rows showing deposit and withdrawal made to the user's account. Deposits and withdrawals are identified by have the amount in their respective columns. What are the deposits to the account found in this statement?"
    },
    "schemaType": "manual",
    "inputSchema": "{\n \"type\": \"array\",\n \"items\": {\n\t\"type\": \"object\",\n\t\"properties\": {\n \"date\": { \"type\": \"string\" },\n \"description\": { \"type\": \"string\" },\n \"amount\": { \"type\": \"number\" }\n\t}\n }\n}"
  },
  "typeVersion": 1
}

================ Node #2952 ================
{
  "id": "cf1e8d85-5c92-469d-98af-7bdd5f469167",
  "name": "Sticky Note7",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    913.9944186046506,
    620
  ],
  "parameters": {
    "color": 5,
    "width": 498.18790697674433,
    "height": 130.35162790697677,
    "content": "### \ud83d\udca1 Don't use Google?\nFeel free to swap the model out for any state-of-the-art multimodal model which supports image inputs such as GPT4o(-mini) or Claude Sonnet/Opus. Note, I've found Gemini to produce the most accurate and consistent for this example use-case so no guarantees if you switch!"
  },
  "typeVersion": 1
}

================ Node #2953 ================
{
  "id": "20f33372-a6b6-4f4d-987d-a94c85313fa8",
  "name": "Transcribe to Markdown",
  "type": "@n8n/n8n-nodes-langchain.chainLlm",
  "position": [
    980,
    280
  ],
  "parameters": {
    "text": "transcribe the image to markdown.",
    "messages": {
      "messageValues": [
        {
          "message": "=You help transcribe documents to markdown, keeping faithful to all text printed and visible to the best of your ability. Ensure you capture all headings, subheadings, titles as well as small print.\nFor any tables found with the document, convert them to markdown tables. If table row descriptions overflow into more than 1 row, concatanate and fit them into a single row. If two or more tables are adjacent horizontally, stack the tables vertically instead. There should be a newline after every markdown table.\nFor any graphics, use replace with a description of the image. Images of scanned checks should be converted to the phrase \"<scanned image of check>\"."
        },
        {
          "type": "HumanMessagePromptTemplate",
          "messageType": "imageBinary"
        }
      ]
    },
    "promptType": "define"
  },
  "typeVersion": 1.4
}

================ Node #2954 ================
{
  "id": "38da57b7-2161-415d-8473-783ccdc7b975",
  "name": "When clicking \u2018Test workflow\u2019",
  "type": "n8n-nodes-base.manualTrigger",
  "position": [
    -260,
    840
  ],
  "parameters": {},
  "typeVersion": 1
}

================ Node #2955 ================
{
  "id": "2cd46d91-105d-4b5e-be43-3343a9da815d",
  "name": "Sticky Note",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    -780,
    540
  ],
  "parameters": {
    "width": 365.05232558139534,
    "height": 401.24529475392126,
    "content": "## Try me out!\n\n### This workflow converts a Candidate Resume PDF to an image which is then \"read\" by a Vision Language Model (VLM). The VLM assesses if the candidate's CV is a fit for the desired role.\n\nThis approach can be employed to combat \"hidden prompts\" planted in resumes to bypass and/or manipulate automated ATS systems using AI.\n\n\n### Need Help?\nJoin the [Discord](https://discord.com/invite/XPKeKXeB7d) or ask in the [Forum](https://community.n8n.io/)!\n"
  },
  "typeVersion": 1
}

================ Node #2956 ================
{
  "id": "40bab53a-fcbc-4acc-8d59-c20b3e1b2697",
  "name": "Structured Output Parser",
  "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
  "position": [
    1200,
    980
  ],
  "parameters": {
    "jsonSchemaExample": "{\n\t\"is_qualified\": true,\n\t\"reason\": \"\"\n}"
  },
  "typeVersion": 1.2
}

================ Node #2957 ================
{
  "id": "d75fb7ab-cfbc-419d-b803-deb9e99114ba",
  "name": "Should Proceed To Stage 2?",
  "type": "n8n-nodes-base.if",
  "position": [
    1360,
    820
  ],
  "parameters": {
    "options": {},
    "conditions": {
      "options": {
        "leftValue": "",
        "caseSensitive": true,
        "typeValidation": "strict"
      },
      "combinator": "and",
      "conditions": [
        {
          "id": "4dd69ba3-bf07-43b3-86b7-d94b07e9eea6",
          "operator": {
            "type": "boolean",
            "operation": "true",
            "singleValue": true
          },
          "leftValue": "={{ $json.output.is_qualified }}",
          "rightValue": ""
        }
      ]
    }
  },
  "typeVersion": 2
}

================ Node #2958 ================
{
  "id": "a0f56270-67c2-4fab-b521-aa6f06b0b0fd",
  "name": "Sticky Note1",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    -380,
    540
  ],
  "parameters": {
    "color": 7,
    "width": 543.5706868577606,
    "height": 563.6162790697684,
    "content": "## 1. Download Candidate Resume\n[Read more about using Google Drive](https://docs.n8n.io/integrations/builtin/app-nodes/n8n-nodes-base.googledrive)\n\nFor this demonstration, we'll pull the candidate's resume PDF from Google Drive but you can just as easily recieve this resume from email or your ATS.\n\nIt should be noted that our PDF is a special test case which has been deliberately injected with an AI bypass; the bypass is a hidden prompt which aims to override AI instructions and auto-qualify the candidate... sneaky!\n\nDownload a copy of this resume here: https://drive.google.com/file/d/1MORAdeev6cMcTJBV2EYALAwll8gCDRav/view?usp=sharing"
  },
  "typeVersion": 1
}

================ Node #2959 ================
{
  "id": "d21fe4dd-0879-4e5a-a70d-10f09b25eee2",
  "name": "Download Resume",
  "type": "n8n-nodes-base.googleDrive",
  "position": [
    -80,
    840
  ],
  "parameters": {
    "fileId": {
      "__rl": true,
      "mode": "id",
      "value": "1MORAdeev6cMcTJBV2EYALAwll8gCDRav"
    },
    "options": {},
    "operation": "download"
  },
  "credentials": {
    "googleDriveOAuth2Api": {
      "id": "yOwz41gMQclOadgu",
      "name": "Google Drive account"
    }
  },
  "typeVersion": 3
}

================ Node #2960 ================
{
  "id": "ea904365-d9d2-4f15-b7c3-7abfeb4c8c50",
  "name": "Sticky Note2",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    200,
    540
  ],
  "parameters": {
    "color": 7,
    "width": 605.0267171444024,
    "height": 595.3148729042731,
    "content": "## 2. Convert PDF to Image(s)\n[Read more about using Stirling PDF](https://github.com/Stirling-Tools/Stirling-PDF)\n\nAI vision models can only accept images (and sometimes videos!) as non-text inputs but not PDFs at time of writing. We'll have to convert our PDF to an image in order to use it.\n\nHere, we'll use a tool called **Stirling PDF** which can provide this functionality and can be accessed via a HTTP API. Feel free to use an alternative solution if available, otherwise follow the instructions on the Stirling PDF website to set up your own instance.\n\nAdditionally, we'll reduce the resolution of our converted image to speed up the processing done by the LLM. I find that about 75% of an A4 (30x40cm) is a good balance."
  },
  "typeVersion": 1
}

================ Node #2961 ================
{
  "id": "cd00a47f-1ab9-46bf-8ea1-46ac899095e7",
  "name": "Sticky Note3",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    840,
    540
  ],
  "parameters": {
    "color": 7,
    "width": 747.8139534883712,
    "height": 603.1395348837208,
    "content": "## 3. Parse Resume with Multimodal LLM\n[Read more about using Basic LLM Chain](https://docs.n8n.io/integrations/builtin/cluster-nodes/root-nodes/n8n-nodes-langchain.chainllm/)\n\nMultimodal LLMs are LLMs which can accept binary inputs such as images, audio and/or video files. Most newer LLMs are by default multimodal and we'll use Google's Gemini here as an example. By processing each candidate's resume as an image, we avoid scenarios where text extraction fails due to layout issues or by picking up \"hidden\" or malicious prompts planted to subvert AI automated processing.\n\nThis vision model ensures the resume is read and understood as a human would. The hidden bypass is therefore rendered mute since the AI also cannot \"see\" the special prompt embedded in the document."
  },
  "typeVersion": 1
}

================ Node #2962 ================
{
  "id": "d60214c6-c67e-4433-9121-4d54f782b19d",
  "name": "PDF-to-Image API",
  "type": "n8n-nodes-base.httpRequest",
  "position": [
    340,
    880
  ],
  "parameters": {
    "url": "https://stirlingpdf.io/api/v1/convert/pdf/img",
    "method": "POST",
    "options": {},
    "sendBody": true,
    "contentType": "multipart-form-data",
    "bodyParameters": {
      "parameters": [
        {
          "name": "fileInput",
          "parameterType": "formBinaryData",
          "inputDataFieldName": "data"
        },
        {
          "name": "imageFormat",
          "value": "jpg"
        },
        {
          "name": "singleOrMultiple",
          "value": "single"
        },
        {
          "name": "dpi",
          "value": "300"
        }
      ]
    }
  },
  "typeVersion": 4.2
}

================ Node #2963 ================
{
  "id": "847de537-ad8f-47f5-a1c1-d207c3fc15ef",
  "name": "Resize Converted Image",
  "type": "n8n-nodes-base.editImage",
  "position": [
    530,
    880
  ],
  "parameters": {
    "width": 75,
    "height": 75,
    "options": {},
    "operation": "resize",
    "resizeOption": "percent"
  },
  "typeVersion": 1
}

================ Node #2964 ================
{
  "id": "5fb6ac7e-b910-4dce-bba7-19b638fd817a",
  "name": "Google Gemini Chat Model",
  "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
  "position": [
    1000,
    980
  ],
  "parameters": {
    "options": {},
    "modelName": "models/gemini-1.5-pro-latest"
  },
  "credentials": {
    "googlePalmApi": {
      "id": "dSxo6ns5wn658r8N",
      "name": "Google Gemini(PaLM) Api account"
    }
  },
  "typeVersion": 1
}

================ Node #2965 ================
{
  "id": "2580b583-544a-47ee-b248-9cca528c9866",
  "name": "Candidate Resume Analyser",
  "type": "@n8n/n8n-nodes-langchain.chainLlm",
  "position": [
    1000,
    820
  ],
  "parameters": {
    "text": "=Evaluate the candidate's resume.",
    "messages": {
      "messageValues": [
        {
          "message": "=Assess the given Candiate Resume for the role of Plumber.\nDetermine if the candidate's skills match the role and if they qualify for an in-person interview."
        },
        {
          "type": "HumanMessagePromptTemplate",
          "messageType": "imageBinary"
        }
      ]
    },
    "promptType": "define",
    "hasOutputParser": true
  },
  "typeVersion": 1.4
}

================ Node #2966 ================
{
  "id": "694669c2-9cf5-43ec-8846-c0ecbc5a77ee",
  "name": "Sticky Note4",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    280,
    840
  ],
  "parameters": {
    "width": 225.51725256895617,
    "height": 418.95152406706313,
    "content": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n### Data Privacy Warning!\nFor demo purposes, we're using the public online version of Stirling PDF. It is recommended to setup your own private instance of Stirling PDF before using this workflow in production."
  },
  "typeVersion": 1
}

================ Node #2967 ================
{
  "id": "54065cc9-047c-4741-95f6-cec3e352abd7",
  "name": "Google Drive",
  "type": "n8n-nodes-base.googleDrive",
  "position": [
    2700,
    -1840
  ],
  "parameters": {
    "fileId": {
      "__rl": true,
      "mode": "url",
      "value": "https://drive.google.com/file/d/xxxxxxxxxxxxxxx/view"
    },
    "options": {},
    "operation": "download"
  },
  "typeVersion": 3
}

================ Node #2968 ================
{
  "id": "62af57f5-a001-4174-bece-260a1fc595e8",
  "name": "Default Data Loader",
  "type": "@n8n/n8n-nodes-langchain.documentDefaultDataLoader",
  "position": [
    3120,
    -1620
  ],
  "parameters": {
    "loader": "epubLoader",
    "options": {},
    "dataType": "binary"
  },
  "typeVersion": 1
}

================ Node #2969 ================
{
  "id": "ce3d9c7c-6ce9-421a-b4d0-4235217cf8e6",
  "name": "Sticky Note",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    2620,
    -2000
  ],
  "parameters": {
    "width": 749.1276349295781,
    "height": 820.5109034066329,
    "content": "# INSERTING\n\n- it's important to use the same embedding model when for any interaction with your vector database (inserting, upserting and retrieval)"
  },
  "typeVersion": 1
}

================ Node #2970 ================
{
  "id": "81cb3d3e-70af-46c8-bc18-3d076a222d0b",
  "name": "Sticky Note1",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    1720,
    -1160
  ],
  "parameters": {
    "color": 3,
    "width": 873.9739981925188,
    "height": 534.0012007720542,
    "content": "# UPSERTING\n"
  },
  "typeVersion": 1
}

================ Node #2971 ================
{
  "id": "60ebdb71-c7e0-429b-9394-b680cc000951",
  "name": "Sticky Note2",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    1720,
    -2000
  ],
  "parameters": {
    "color": 4,
    "width": 876.5116990000852,
    "height": 821.787041589866,
    "content": "# PREPARATION (in Supabase)\n\n- your database needs the extension 'pgvector' enabled -> select Database > Extension > Search for 'vector'\n- make sure you have a table that has the following columns (if not, use the query below in the Supabase SQL Editor)\n\n```\nALTER TABLE \"YOUR TABLE NAME\"\nADD COLUMN embedding VECTOR(1536), // check which number of dimensions you need (depends on the embed model)\nADD COLUMN metadata JSONB,\nADD COLUMN content TEXT;\n```\n\n- make sure you have the right policies set -> select Authentication > Policies\n- make sure you have the custom function `match_documents` set up in Supabase -> This is needed for the Vector Store Node (as query name) \n(if not, use the query below in the Supabase SQL Editor to create that function)\n- make sure you check the size of the AI model as it should be the same vector size for the table \n(e.g. OpenAI's Text-Embedding-3-Small uses 1536)\n\n```\nCREATE OR REPLACE FUNCTION public.match_documents(\n filter JSONB,\n match_count INT,\n query_embedding VECTOR(1536) // should match same dimensions as from insertion\n)\nRETURNS TABLE (\n id BIGINT,\n content TEXT,\n metadata JSONB,\n embedding VECTOR(1536), // should match same dimensions as from insertion\n similarity FLOAT\n)\nLANGUAGE plpgsql AS $$\nBEGIN\n RETURN QUERY\n SELECT\n v.id,\n v.content,\n v.metadata,\n v.embedding,\n 1 - (v.embedding <=> match_documents.query_embedding) AS similarity\n FROM \"YOUR TABLE NAME\" v\n WHERE v.metadata @> filter\n ORDER BY v.embedding <=> match_documents.query_embedding\n LIMIT match_count;\nEND;\n$$\n;\n```\n"
  },
  "typeVersion": 1
}

================ Node #2972 ================
{
  "id": "ae95b0c3-b8b3-44eb-8070-b1bc6cac5cd2",
  "name": "Sticky Note3",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    3400,
    -2000
  ],
  "parameters": {
    "color": 5,
    "width": 810.9488123113013,
    "height": 821.9537074055816,
    "content": "# RETRIEVAL"
  },
  "typeVersion": 1
}

================ Node #2973 ================
{
  "id": "58168721-cbd7-498c-9d16-41b4d5c6a68f",
  "name": "Question and Answer Chain",
  "type": "@n8n/n8n-nodes-langchain.chainRetrievalQa",
  "position": [
    3680,
    -1860
  ],
  "parameters": {},
  "typeVersion": 1.3
}

================ Node #2974 ================
{
  "id": "ddf1228f-f051-445b-8a42-54c2510a0b2e",
  "name": "OpenAI Chat Model",
  "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
  "position": [
    3600,
    -1680
  ],
  "parameters": {
    "options": {}
  },
  "typeVersion": 1
}

================ Node #2975 ================
{
  "id": "734a2c48-b445-4e62-99b7-dc1dcd921c52",
  "name": "Vector Store Retriever",
  "type": "@n8n/n8n-nodes-langchain.retrieverVectorStore",
  "position": [
    3760,
    -1680
  ],
  "parameters": {
    "topK": 10
  },
  "typeVersion": 1
}

================ Node #2976 ================
{
  "id": "43f761b7-f4da-4b29-8099-9b2c15f79fe9",
  "name": "Recursive Character Text Splitter1",
  "type": "@n8n/n8n-nodes-langchain.textSplitterRecursiveCharacterTextSplitter",
  "position": [
    3120,
    -1460
  ],
  "parameters": {
    "options": {}
  },
  "typeVersion": 1
}

================ Node #2977 ================
{
  "id": "de0d2666-88e4-4a4d-ba46-cf789b9cba85",
  "name": "Customize Response",
  "type": "n8n-nodes-base.set",
  "notes": "output || text",
  "position": [
    4020,
    -1860
  ],
  "parameters": {
    "options": {},
    "assignments": {
      "assignments": [
        {
          "id": "440fc115-ccae-4e30-85a5-501d0617b2cf",
          "name": "output",
          "type": "string",
          "value": "={{ $json.response.text }}"
        }
      ]
    }
  },
  "notesInFlow": true,
  "typeVersion": 3.4
}

================ Node #2978 ================
{
  "id": "a396671f-a217-4f05-b969-cb64f10e4b01",
  "name": "When chat message received",
  "type": "@n8n/n8n-nodes-langchain.chatTrigger",
  "position": [
    3480,
    -1860
  ],
  "webhookId": "d7431c58-89aa-4d70-b5bd-044be981b3a9",
  "parameters": {
    "public": true,
    "options": {
      "responseMode": "lastNode"
    },
    "initialMessages": "=Hi there! \ud83d\ude4f\n\nYou can ask me anything about Venerable Geshe Kelsang Gyatso's Book - 'How To Transform Your Life'\n\nWhat would you like to know? "
  },
  "typeVersion": 1.1
}

================ Node #2979 ================
{
  "id": "6312f6bc-c69c-4d4f-8838-8a9d0d22ed55",
  "name": "Retrieve by Query",
  "type": "@n8n/n8n-nodes-langchain.vectorStoreSupabase",
  "position": [
    3700,
    -1520
  ],
  "parameters": {
    "options": {
      "queryName": "match_documents"
    },
    "tableName": {
      "__rl": true,
      "mode": "list",
      "value": "Kadampa",
      "cachedResultName": "Kadampa"
    }
  },
  "typeVersion": 1
}

================ Node #2980 ================
{
  "id": "ba6b87b9-e96d-47a3-83f8-169d7172325a",
  "name": "Embeddings OpenAI Retrieval",
  "type": "@n8n/n8n-nodes-langchain.embeddingsOpenAi",
  "position": [
    3700,
    -1360
  ],
  "parameters": {
    "options": {}
  },
  "typeVersion": 1
}

================ Node #2981 ================
{
  "id": "bcd1b31f-c60b-4c40-b039-d47dadc86b23",
  "name": "Embeddings OpenAI Insertion",
  "type": "@n8n/n8n-nodes-langchain.embeddingsOpenAi",
  "position": [
    2920,
    -1620
  ],
  "parameters": {
    "model": "text-embedding-3-small",
    "options": {}
  },
  "typeVersion": 1
}

================ Node #2982 ================
{
  "id": "dfd7f734-eb00-4af3-9179-724503422fe4",
  "name": "Placeholder (File/Content to Upsert)",
  "type": "n8n-nodes-base.set",
  "position": [
    1900,
    -1000
  ],
  "parameters": {
    "mode": "raw",
    "options": {},
    "jsonOutput": "={\n \"Date\": \"{{ $now.format('dd MMM yyyy') }}\",\n \"Time\": \"{{ $now.format('HH:mm ZZZZ z') }}\"\n}\n"
  },
  "typeVersion": 3.4
}

================ Node #2983 ================
{
  "id": "c54c9458-9b8a-4ef1-a6db-5265729be19d",
  "name": "Embeddings OpenAI Upserting",
  "type": "@n8n/n8n-nodes-langchain.embeddingsOpenAi",
  "position": [
    2120,
    -840
  ],
  "parameters": {
    "model": "text-embedding-3-small",
    "options": {}
  },
  "typeVersion": 1
}

================ Node #2984 ================
{
  "id": "30c18e9e-d047-40d3-8324-f5d0e7892db6",
  "name": "Insert Documents",
  "type": "@n8n/n8n-nodes-langchain.vectorStoreSupabase",
  "position": [
    2920,
    -1840
  ],
  "parameters": {
    "mode": "insert",
    "options": {},
    "tableName": {
      "__rl": true,
      "mode": "list",
      "value": "Kadampa",
      "cachedResultName": "Kadampa"
    }
  },
  "typeVersion": 1
}

================ Node #2985 ================
{
  "id": "3c0ed0ee-9134-4b4e-bcfd-632dd67a57da",
  "name": "Retrieve Rows from Table",
  "type": "n8n-nodes-base.supabase",
  "position": [
    3960,
    -1380
  ],
  "parameters": {
    "tableId": "n8n",
    "operation": "getAll",
    "returnAll": true
  },
  "typeVersion": 1
}

================ Node #2986 ================
{
  "id": "53aca1b4-31e8-4699-b158-673623bc9b95",
  "name": "Sticky Note4",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    2620,
    -1160
  ],
  "parameters": {
    "color": 6,
    "width": 1587.0771183771394,
    "height": 537.3056597675153,
    "content": "# DELETION\n\nAt the moment n8n does not have a built-in Supabase Node to delete records in a Vector Database. For this you would typically use the HTTP Request node to make an authorized API call to Supabase. \n\n## HTTP Request Node\n\nUse this node to send a DELETE request to your Supabase instance.\n\n- Supabase API Endpoint: Use the appropriate URL for your Supabase project. The endpoint will typically look like this: [https://<your-supabase-ref>.supabase.co/rest/v1/<your-vector-table>](https://supabase.com/docs/guides/api). Replace `<your-supabase-ref>` and `<your-vector-table>` with your details.\n### HEADERS:\n- apikey: Your Supabase API key.\n- Authorization: Bearer token with your Supabase JWT.\n- Query Parameters: Use query parameters to specify which record(s) to delete. For example, `?id=eq.<your-record-id>` where `<your-record-id>` is the specific record ID you want to delete \n(You can also reference back to the **Retrieve Rows From Table** Node to get the ID dynamically)\n\nEnsure you have the necessary permissions set up in Supabase to delete records through the API.\n\nPlease refer to the official n8n documentation for more detailed information on using the [HTTP Request Node](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.httprequest/).\n\n_Note:_ Deleting records is a sensitive operation, so make sure that your permissions are correctly configured and that you are targeting the correct records to avoid unwanted data loss."
  },
  "typeVersion": 1
}

================ Node #2987 ================
{
  "id": "4ffaccdb-9e0f-464d-9284-7771f6599fd8",
  "name": "Update Documents",
  "type": "@n8n/n8n-nodes-langchain.vectorStoreSupabase",
  "position": [
    2100,
    -1000
  ],
  "parameters": {
    "id": "1",
    "mode": "update",
    "options": {
      "queryName": "match_documents"
    },
    "tableName": {
      "__rl": true,
      "mode": "list",
      "value": "n8n",
      "cachedResultName": "n8n"
    }
  },
  "typeVersion": 1
}

================ Node #2988 ================
{
  "id": "9fbce801-8c42-43a4-bc70-d93042d68b2c",
  "name": "Telegram Trigger",
  "type": "n8n-nodes-base.telegramTrigger",
  "position": [
    -220,
    240
  ],
  "webhookId": "b178f034-9997-4832-9bb4-a43c3015506e",
  "parameters": {
    "updates": [
      "message"
    ],
    "additionalFields": {}
  },
  "credentials": {
    "telegramApi": {
      "id": "",
      "name": ""
    }
  },
  "typeVersion": 1.1
}

================ Node #2989 ================
{
  "id": "1bfc1fbd-86b1-4a8a-9301-fe54497f5acd",
  "name": "Embeddings OpenAI",
  "type": "@n8n/n8n-nodes-langchain.embeddingsOpenAi",
  "position": [
    720,
    460
  ],
  "parameters": {
    "options": {}
  },
  "credentials": {
    "openAiApi": {
      "id": "",
      "name": ""
    }
  },
  "typeVersion": 1
}

================ Node #2990 ================
{
  "id": "d5ad7851-ed40-4b3a-b0d5-aeaf04362f1c",
  "name": "Default Data Loader",
  "type": "@n8n/n8n-nodes-langchain.documentDefaultDataLoader",
  "position": [
    860,
    460
  ],
  "parameters": {
    "options": {},
    "dataType": "binary"
  },
  "typeVersion": 1
}

================ Node #2991 ================
{
  "id": "fed803d0-49a2-4b82-8f20-a02a10caa027",
  "name": "Recursive Character Text Splitter",
  "type": "@n8n/n8n-nodes-langchain.textSplitterRecursiveCharacterTextSplitter",
  "position": [
    940,
    680
  ],
  "parameters": {
    "options": {},
    "chunkSize": 3000,
    "chunkOverlap": 200
  },
  "typeVersion": 1
}

================ Node #2992 ================
{
  "id": "ab60f36f-fada-4812-8dbd-441ad372cb80",
  "name": "Stop and Error",
  "type": "n8n-nodes-base.stopAndError",
  "position": [
    220,
    840
  ],
  "parameters": {
    "errorMessage": "An error occurred"
  },
  "typeVersion": 1
}

================ Node #2993 ================
{
  "id": "c87f1db3-7cc9-4063-9895-4b4d68ea53a1",
  "name": "Question and Answer Chain",
  "type": "@n8n/n8n-nodes-langchain.chainRetrievalQa",
  "position": [
    -280,
    500
  ],
  "parameters": {
    "text": "={{ $json.message.text }}\nSearch the database with the retriever for information for the answer",
    "promptType": "define"
  },
  "typeVersion": 1.3
}

================ Node #2994 ================
{
  "id": "c9bc4c80-8e57-48bc-a405-131ed7348c1d",
  "name": "Vector Store Retriever",
  "type": "@n8n/n8n-nodes-langchain.retrieverVectorStore",
  "position": [
    -240,
    680
  ],
  "parameters": {},
  "typeVersion": 1
}

================ Node #2995 ================
{
  "id": "0217056f-2b71-4308-adf1-19dcd4d2cc11",
  "name": "Pinecone Vector Store1",
  "type": "@n8n/n8n-nodes-langchain.vectorStorePinecone",
  "position": [
    -280,
    860
  ],
  "parameters": {
    "options": {},
    "pineconeIndex": {
      "__rl": true,
      "mode": "list",
      "value": "telegram",
      "cachedResultName": "telegram"
    }
  },
  "credentials": {
    "pineconeApi": {
      "id": "",
      "name": ""
    }
  },
  "typeVersion": 1
}

================ Node #2996 ================
{
  "id": "693f9026-f47f-48dc-8e5d-e8b832a37235",
  "name": "Groq Chat Model",
  "type": "@n8n/n8n-nodes-langchain.lmChatGroq",
  "position": [
    -380,
    660
  ],
  "parameters": {
    "model": "llama-3.1-70b-versatile",
    "options": {}
  },
  "credentials": {
    "groqApi": {
      "id": "",
      "name": ""
    }
  },
  "typeVersion": 1
}

================ Node #2997 ================
{
  "id": "c7acf014-138f-4be7-b569-c309bb10e50d",
  "name": "Sticky Note",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    500,
    73.04879287725316
  ],
  "parameters": {
    "color": 7,
    "width": 1139.5159692915001,
    "height": 873.6068151028411,
    "content": "# Load data into database\nFetch file from **Telegram**, split it into chunks and insert into **Pinecone** index, a message from **Telegram** will be sent just to let the user know that the process finished"
  },
  "typeVersion": 1
}

================ Node #2998 ================
{
  "id": "dd3b9d8b-5771-4a09-8c1b-794cb8737d5d",
  "name": "Sticky Note1",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    -878.769,
    400
  ],
  "parameters": {
    "color": 7,
    "width": 1344.7918019808176,
    "height": 806.8716167324012,
    "content": "# Chat with Database\n\n1. **Receive** the incoming chat message.\n2. **Retrieve** relevant chunks from the _vector store_.\n3. **Pass** these chunks to the model.\n\nThe model will use the retrieved information to **formulate a precise response**.\n"
  },
  "typeVersion": 1
}

================ Node #2999 ================
{
  "id": "9aaf575a-5e40-407c-951c-10b1d16e5d3c",
  "name": "Check If is a document",
  "type": "n8n-nodes-base.if",
  "position": [
    220,
    240
  ],
  "parameters": {
    "options": {},
    "conditions": {
      "options": {
        "leftValue": "",
        "caseSensitive": true,
        "typeValidation": "strict"
      },
      "combinator": "and",
      "conditions": [
        {
          "id": "8839993b-9fe7-4e1e-a1cc-fe5de6b0bb62",
          "operator": {
            "type": "object",
            "operation": "exists",
            "singleValue": true
          },
          "leftValue": "={{ $json.message.document }}",
          "rightValue": ""
        }
      ]
    }
  },
  "typeVersion": 2
}

================ Node #3000 ================
{
  "id": "c1edb6bf-ba95-4a5f-9626-add673274086",
  "name": "Change to application/pdf",
  "type": "n8n-nodes-base.code",
  "position": [
    700,
    220
  ],
  "parameters": {
    "jsCode": "// Fun\u00e7\u00e3o para modificar os metadados do arquivo bin\u00e1rio\nfunction modifyBinaryMetadata(items) {\n for (const item of items) {\n if (item.binary && item.binary.data) {\n // Modifica o tipo MIME\n item.binary.data.mimeType = 'application/pdf';\n \n // Garante que o nome do arquivo termine com .pdf\n if (!item.binary.data.fileName.toLowerCase().endsWith('.pdf')) {\n item.binary.data.fileName += '.pdf';\n }\n \n // Atualiza o contentType no fileType (se existir)\n if (item.binary.data.fileType) {\n item.binary.data.fileType.contentType = 'application/pdf';\n }\n }\n }\n return items;\n}\n\n// Aplica a modifica\u00e7\u00e3o e retorna os itens atualizados\nreturn modifyBinaryMetadata($input.all());"
  },
  "typeVersion": 2
}