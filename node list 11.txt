================ Node #5001 ================
{
  "id": "906d44f0-7582-4742-9fd8-4c8dfba918e0",
  "name": "HTML To Markdown",
  "type": "n8n-nodes-base.markdown",
  "position": [
    1860,
    380
  ],
  "parameters": {
    "html": "={{ $json.content }}",
    "options": {}
  },
  "typeVersion": 1
}

================ Node #5002 ================
{
  "id": "8c1a5d64-4f38-4f9e-8878-443f750206b7",
  "name": "Slack - Notify ",
  "type": "n8n-nodes-base.slack",
  "position": [
    2300,
    380
  ],
  "parameters": {
    "text": "=*New Organizaton {{ $('Pipedrive Trigger - An Organization is created').item.json.current.name }} created on Pipedrive* :\n\n\n {{ $json.slackFormattedMarkdown }}",
    "select": "channel",
    "channelId": {
      "__rl": true,
      "mode": "list",
      "value": "",
      "cachedResultName": "pipedrive-notification"
    },
    "otherOptions": {},
    "authentication": "oAuth2"
  },
  "credentials": {
    "slackOAuth2Api": {
      "id": "",
      "name": "Slack Connection"
    }
  },
  "typeVersion": 2.2
}

================ Node #5003 ================
{
  "id": "2414a5d3-1d4b-447b-b401-4b6f823a0cf9",
  "name": "OpenAI - Message GPT-4o with Scraped Data",
  "type": "@n8n/n8n-nodes-langchain.openAi",
  "position": [
    1260,
    380
  ],
  "parameters": {
    "modelId": {
      "__rl": true,
      "mode": "list",
      "value": "gpt-4o",
      "cachedResultName": "GPT-4O"
    },
    "options": {},
    "messages": {
      "values": [
        {
          "content": "={{ $json.data }}"
        },
        {
          "role": "system",
          "content": "You're an assistant that summarizes website content for CRM entries. The user will provide HTML content from a company's website. Your task is to analyze the HTML content and create a concise summary that includes:\n\n1. A brief description of the company's services or products.\n2. Any information about the company's target market or customer base.\n3. Key points about the company's unique selling propositions or competitive advantages.\n4. Based on the provided information, suggest potential competitors if you know any.\n\nFormat your response as HTML.\n\nExample response :\n\n <h1>Company Description</h1>\n <p>Company1 specializes in services related to electric vehicles. The company focuses on providing resources and information about electric car chargers, battery life, different car brands, and the environmental impact of electric vehicles.</p>\n\n <h2>Target Market</h2>\n <p>The target market for Company1 includes electric vehicle owners and potential buyers who are interested in making the shift from traditional fossil fuel vehicles to electric cars. The company also targets environmentally conscious consumers who are looking for sustainable mobility solutions.</p>\n\n <h2>Unique Selling Propositions</h2>\n <ul>\n <li>Comprehensive information about electric vehicle charging solutions, including how to install home charging stations.</li>\n <li>Detailed articles on the advantages of electric vehicles such as ecology and reliability.</li>\n <li>Educational resources on the autonomy and battery life of different electric car models.</li>\n <li>Insights into premier electric vehicle brands.</li>\n </ul>\n\n <h2>Potential Competitors</h2>\n <table border=\"1\">\n <tr>\n <th>Competitor Name</th>\n <th>Website</th>\n </tr>\n <tr>\n <td>Competitor1</td>\n <td><a href=\"https://www.example1.com\">https://www.example1.com</a></td>\n </tr>\n <tr>\n <td>Competitor2</td>\n <td><a href=\"https://www.example2.com\">https://www.example2.com</a></td>\n </tr>\n <tr>\n <td>Competitor3</td>\n <td><a href=\"https://www.example3.com\">https://www.example3.com</a></td>\n </tr>\n <tr>\n <td>Competitor4</td>\n <td><a href=\"https://www.example4.com\">https://www.example4.com</a></td>\n </tr>\n </table>\n"
        }
      ]
    }
  },
  "credentials": {
    "openAiApi": {
      "id": "",
      "name": "OpenAi Connection"
    }
  },
  "typeVersion": 1.3
}

================ Node #5004 ================
{
  "id": "7786165e-5e74-4614-b065-86db19482b72",
  "name": "Format text with Markdown",
  "type": "n8n-nodes-base.markdown",
  "position": [
    -1200,
    980
  ],
  "parameters": {
    "html": "={{ $json.text }}",
    "options": {},
    "destinationKey": "textClean"
  },
  "typeVersion": 1,
  "continueOnFail": true
}

================ Node #5005 ================
{
  "id": "8f73d4d6-2473-4fdf-8797-c049d6df6967",
  "name": "Lemlist Trigger - On new reply",
  "type": "n8n-nodes-base.lemlistTrigger",
  "position": [
    -1600,
    980
  ],
  "webhookId": "039bb443-8d2a-4eb3-9c16-772943a46db7",
  "parameters": {
    "event": "emailsReplied",
    "options": {
      "isFirst": true
    }
  },
  "typeVersion": 1
}

================ Node #5006 ================
{
  "id": "1f94d672-0a70-45ad-bf96-72c4aecabcd0",
  "name": "Sticky Note",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    -1700,
    680
  ],
  "parameters": {
    "width": 304.92548549441915,
    "height": 504.9663351162785,
    "content": "### Get your lemlist API key\n\n1. Go to your lemlist account or create one [HERE](https://app.lemlist.com/create-account)\n\n2. Go to Settings -> Integrations\n\n3. Generate your API Key and copy it\n\n4. On this node, click on create new credential and paste your API key"
  },
  "typeVersion": 1
}

================ Node #5007 ================
{
  "id": "3032b04c-76a2-4f7c-a790-ede26b102254",
  "name": "Sticky Note1",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    -2040,
    680
  ],
  "parameters": {
    "width": 319.6621253622332,
    "height": 507.1074887209538,
    "content": "# Read me\n\nThis workflow send email replies of your lemlist campaigns to the Slack channel of your choice.\n\nThe OpenAI node will classify the reply status. \n\nThe Slack alert is structured in a way that make it easy to read for the user."
  },
  "typeVersion": 1
}

================ Node #5008 ================
{
  "id": "df142fcb-f5ec-475d-8f90-c0bd064d390c",
  "name": "OpenAI Chat Model",
  "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
  "position": [
    -760,
    1320
  ],
  "parameters": {
    "model": "gpt-4o",
    "options": {}
  },
  "typeVersion": 1
}

================ Node #5009 ================
{
  "id": "1fa6d12c-2555-42c6-8f80-b24dc3608ed7",
  "name": "Structured Output Parser",
  "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
  "position": [
    -600,
    1320
  ],
  "parameters": {
    "schemaType": "manual",
    "inputSchema": "{\n\t\"type\": \"object\",\n\t\"properties\": {\n\t\t\"category\": {\n\t\t\t\"type\": \"string\"\n }\n\t}\n}"
  },
  "typeVersion": 1.2
}

================ Node #5010 ================
{
  "id": "734013f9-d058-4f08-9026-a41cd5877a3b",
  "name": "Send alert to Slack",
  "type": "n8n-nodes-base.slack",
  "position": [
    320,
    700
  ],
  "parameters": {
    "text": "=",
    "select": "channel",
    "blocksUi": "={\n\t\"blocks\": [\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"text\": {\n\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\"text\": \":raised_hands: New reply in lemlist!\\n\"\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Categorized as:*\\n{{ $json[\"output\"][\"category\"] }}\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Campaign:*\\n<https://app.lemlist.com/teams/{{ $json[\"teamId\"] }}/reports/campaigns/{{ $json[\"campaignId\"] }}|{{ $json[\"campaignName\"] }}>\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Sender Email:*\\n{{ $json[\"sendUserEmail\"] }}\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Lead Email:*\\n{{ $json[\"leadEmail\"] }}\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Linkedin URL:*\\n{{ $json[\"linkedinUrl\"] }}\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"text\": {\n\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\"text\": \"*Reply preview*:\\n{{ JSON.stringify($json[\"textClean\"]).replace(/^\"(.+(?=\"$))\"$/, '$1').substring(0, 100) }}\"\n\t\t\t}\n\t\t}\n\t]\n}",
    "channelId": {
      "__rl": true,
      "mode": "name",
      "value": "automated_outbound_replies"
    },
    "messageType": "block",
    "otherOptions": {
      "botProfile": {
        "imageValues": {
          "icon_emoji": ":fire:",
          "profilePhotoType": "emoji"
        }
      },
      "unfurl_links": false,
      "includeLinkToWorkflow": false
    }
  },
  "typeVersion": 2.1
}

================ Node #5011 ================
{
  "id": "0558c166-16d7-4c26-a09c-fb46c2b6b687",
  "name": "Lemlist - Unsubscribe",
  "type": "n8n-nodes-base.lemlist",
  "position": [
    300,
    1000
  ],
  "parameters": {
    "email": "={{ $json[\"leadEmail\"] }}",
    "resource": "lead",
    "operation": "unsubscribe",
    "campaignId": "={{$json[\"campaignId\"]}}"
  },
  "typeVersion": 1
}

================ Node #5012 ================
{
  "id": "79d17d20-a60a-4b5a-a83c-821cac265b17",
  "name": "lemlist - Mark as interested",
  "type": "n8n-nodes-base.httpRequest",
  "position": [
    300,
    1260
  ],
  "parameters": {
    "url": "=https://api.lemlist.com/api/campaigns/{{$json[\"campaignId\"]}}/leads/{{$json[\"leadEmail\"]}}/interested",
    "options": {},
    "requestMethod": "POST",
    "authentication": "predefinedCredentialType",
    "nodeCredentialType": "lemlistApi"
  },
  "typeVersion": 2
}

================ Node #5013 ================
{
  "id": "04f74337-903c-481a-95ca-a1d4a5985b9e",
  "name": "Categorize lemlist reply",
  "type": "@n8n/n8n-nodes-langchain.chainLlm",
  "position": [
    -780,
    1120
  ],
  "parameters": {
    "text": "=Classify the [email_content] in one only of the following categories: \n\nCategories=[\"Interested\", \"Out of office\", \"Unsubscribe\", \"Not interested\", \"Other\"] \n\n- Interested is when the reply is positive, and the person want more information or a meeting \n\nDon't output quotes like in the next example: \nemail_content_example:Hey I would like to know more \ncategory:Interested\n\nemail_content:\"{{ $json.textClean }}\" \n\nOnly answer with JSON in the following format:\n{\"replyStatus\":category}\n\nJSON:",
    "promptType": "define",
    "hasOutputParser": true
  },
  "typeVersion": 1.4
}

================ Node #5014 ================
{
  "id": "c1d66785-e096-4fd7-90de-51c7b9117413",
  "name": "Merge data",
  "type": "n8n-nodes-base.merge",
  "position": [
    -280,
    1000
  ],
  "parameters": {
    "mode": "combine",
    "options": {},
    "combinationMode": "mergeByPosition"
  },
  "typeVersion": 2.1
}

================ Node #5015 ================
{
  "id": "bf21f5b9-6978-4657-a0a2-847265cff31e",
  "name": "Sticky Note2",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    260,
    520
  ],
  "parameters": {
    "width": 480.38008828116847,
    "height": 341.5885389153657,
    "content": "### Create a Slack notification for each new replies\n\n1. Connect your Slack account by clicking to add Credentials\n\n2. Write the name of the channel where you want to send the Slack alert"
  },
  "typeVersion": 1
}

================ Node #5016 ================
{
  "id": "024b4399-8e20-4974-986d-6c1ee4103fa0",
  "name": "Route reply to the right branch",
  "type": "n8n-nodes-base.switch",
  "position": [
    -100,
    1000
  ],
  "parameters": {
    "rules": {
      "values": [
        {
          "outputKey": "Send all replies to Slack",
          "conditions": {
            "options": {
              "leftValue": "",
              "caseSensitive": true,
              "typeValidation": "strict"
            },
            "combinator": "and",
            "conditions": [
              {
                "operator": {
                  "type": "string",
                  "operation": "exists",
                  "singleValue": true
                },
                "leftValue": "={{ $json.output.category }}",
                "rightValue": ""
              }
            ]
          },
          "renameOutput": true
        },
        {
          "outputKey": "Unsubscribe",
          "conditions": {
            "options": {
              "leftValue": "",
              "caseSensitive": true,
              "typeValidation": "strict"
            },
            "combinator": "and",
            "conditions": [
              {
                "id": "9ad6f5cd-8c50-4710-8eaf-085e8f11f202",
                "operator": {
                  "name": "filter.operator.equals",
                  "type": "string",
                  "operation": "equals"
                },
                "leftValue": "={{ $json.output.category }}",
                "rightValue": "Unsubscribe"
              }
            ]
          },
          "renameOutput": true
        },
        {
          "outputKey": "Interested",
          "conditions": {
            "options": {
              "leftValue": "",
              "caseSensitive": true,
              "typeValidation": "strict"
            },
            "combinator": "and",
            "conditions": [
              {
                "id": "cb410bcc-a70c-4430-aec1-b71f3f615c4d",
                "operator": {
                  "name": "filter.operator.equals",
                  "type": "string",
                  "operation": "equals"
                },
                "leftValue": "={{ $json.output.category }}",
                "rightValue": "Interested"
              }
            ]
          },
          "renameOutput": true
        }
      ]
    },
    "options": {
      "allMatchingOutputs": true
    }
  },
  "typeVersion": 3
}

================ Node #5017 ================
{
  "id": "f9f23daa-f7a9-49f9-8ffb-16798656af73",
  "name": "Sticky Note3",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    260,
    900
  ],
  "parameters": {
    "width": 480.38008828116847,
    "height": 256.5682017131378,
    "content": "### Save time by automatically unsubscribing leads that don't want to receive emails from you"
  },
  "typeVersion": 1
}

================ Node #5018 ================
{
  "id": "63c536bd-e624-4118-b0c8-38c07f2d1955",
  "name": "Sticky Note4",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    260,
    1200
  ],
  "parameters": {
    "width": 480.38008828116847,
    "height": 256.5682017131378,
    "content": "### Mark interested leads as interested in lemlist"
  },
  "typeVersion": 1
}

================ Node #5019 ================
{
  "id": "8ed8b714-8196-4593-87b8-18c6a7318fbe",
  "name": "Sticky Note5",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    -880,
    875.46282303881
  ],
  "parameters": {
    "width": 480.38008828116847,
    "height": 608.2279357257166,
    "content": "### Categorize the reply with OpenAI"
  },
  "typeVersion": 1
}

================ Node #5020 ================
{
  "id": "6b1846df-0214-4383-87cf-55232093ae2a",
  "name": "Sticky Note6",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    -1320,
    880
  ],
  "parameters": {
    "width": 336.62085535637357,
    "height": 311.3046602455328,
    "content": "### This node will clean the text and make sure it looks pretty on Slack"
  },
  "typeVersion": 1
}

================ Node #5021 ================
{
  "id": "f7378ecd-e8d2-4204-a883-3161be601ffc",
  "name": "Sticky Note7",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    -220,
    880
  ],
  "parameters": {
    "width": 336.62085535637357,
    "height": 311.3046602455328,
    "content": "### Trigger a different scenario according to the category of the reply"
  },
  "typeVersion": 1
}

================ Node #5022 ================
{
  "id": "e0f68f60-f036-4103-a9fc-d6cb80b6f8a2",
  "name": "OpenAI Chat Model",
  "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
  "position": [
    1980,
    1100
  ],
  "parameters": {
    "model": "gpt-4-turbo",
    "options": {}
  },
  "credentials": {
    "openAiApi": {
      "id": "kDo5LhPmHS2WQE0b",
      "name": "OpenAi account"
    }
  },
  "typeVersion": 1
}

================ Node #5023 ================
{
  "id": "23779dea-c21d-42da-b493-09394bc64436",
  "name": "OpenAI Chat Model1",
  "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
  "position": [
    2420,
    660
  ],
  "parameters": {
    "model": "gpt-4-turbo",
    "options": {}
  },
  "credentials": {
    "openAiApi": {
      "id": "kDo5LhPmHS2WQE0b",
      "name": "OpenAi account"
    }
  },
  "typeVersion": 1
}

================ Node #5024 ================
{
  "id": "af59863e-12c5-414c-bf64-dd6712e3aa7b",
  "name": "Schedule Trigger",
  "type": "n8n-nodes-base.scheduleTrigger",
  "position": [
    1680,
    960
  ],
  "parameters": {
    "rule": {
      "interval": [
        {
          "field": "hours",
          "hoursInterval": 12
        }
      ]
    }
  },
  "typeVersion": 1.1
}

================ Node #5025 ================
{
  "id": "bc2ad02b-72c9-4132-96e8-b64487f589f7",
  "name": "Recursive Character Text Splitter",
  "type": "@n8n/n8n-nodes-langchain.textSplitterRecursiveCharacterTextSplitter",
  "position": [
    2160,
    1140
  ],
  "parameters": {
    "options": {},
    "chunkSize": 500,
    "chunkOverlap": 300
  },
  "typeVersion": 1
}

================ Node #5026 ================
{
  "id": "cb11a8bb-bdca-43cb-a586-7f93471d58f7",
  "name": "OpenAI Chat Model2",
  "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
  "position": [
    2420,
    1300
  ],
  "parameters": {
    "options": {}
  },
  "credentials": {
    "openAiApi": {
      "id": "kDo5LhPmHS2WQE0b",
      "name": "OpenAi account"
    }
  },
  "typeVersion": 1
}

================ Node #5027 ================
{
  "id": "9d02b910-a467-4d4d-a2fa-32d1d3361d21",
  "name": "Create a Prompt for DALL-E",
  "type": "@n8n/n8n-nodes-langchain.chainSummarization",
  "position": [
    2400,
    1080
  ],
  "parameters": {
    "options": {
      "summarizationMethodAndPrompts": {
        "values": {
          "prompt": "Summarize the characters in this story based on their appearance and describe them if they are humans or animals and how they look like and what kind of are they, the prompt should be no-text in the picture.\n\n\n\n\n\"{text}\"\n\n\nCONCISE SUMMARY:",
          "summarizationMethod": "stuff"
        }
      }
    }
  },
  "typeVersion": 2
}

================ Node #5028 ================
{
  "id": "4723dd65-96f5-41c1-9ff6-f1a344d96241",
  "name": "Generate an Image for the Story",
  "type": "@n8n/n8n-nodes-langchain.openAi",
  "position": [
    2860,
    1080
  ],
  "parameters": {
    "prompt": "=Produce an image ensuring that no text is generated within the visual content. {{ $json.response.text }}",
    "options": {},
    "resource": "image"
  },
  "credentials": {
    "openAiApi": {
      "id": "kDo5LhPmHS2WQE0b",
      "name": "OpenAi account"
    }
  },
  "typeVersion": 1.3
}

================ Node #5029 ================
{
  "id": "70b7f55a-31c4-456b-8273-8250bac74409",
  "name": "Generate Audio for the Story",
  "type": "@n8n/n8n-nodes-langchain.openAi",
  "position": [
    2640,
    820
  ],
  "parameters": {
    "input": "={{ $json.response.text }}",
    "options": {},
    "resource": "audio"
  },
  "credentials": {
    "openAiApi": {
      "id": "kDo5LhPmHS2WQE0b",
      "name": "OpenAi account"
    }
  },
  "executeOnce": true,
  "typeVersion": 1.3
}

================ Node #5030 ================
{
  "id": "c381dbe4-6112-441c-b213-8a2d218f4cc2",
  "name": "Send the Story To Channel",
  "type": "n8n-nodes-base.telegram",
  "position": [
    3160,
    480
  ],
  "parameters": {
    "text": "={{ $json.response.text }}",
    "chatId": "=-4170994782",
    "additionalFields": {
      "appendAttribution": false
    }
  },
  "credentials": {
    "telegramApi": {
      "id": "k3RE6o9brmFRFE9p",
      "name": "Telegram account"
    }
  },
  "typeVersion": 1.1
}

================ Node #5031 ================
{
  "id": "78289bfa-54b4-4acb-b513-7a0134a010f3",
  "name": "Send Image to the Channel",
  "type": "n8n-nodes-base.telegram",
  "position": [
    3180,
    1080
  ],
  "parameters": {
    "chatId": "=-4170994782",
    "operation": "sendPhoto",
    "binaryData": true,
    "additionalFields": {}
  },
  "credentials": {
    "telegramApi": {
      "id": "k3RE6o9brmFRFE9p",
      "name": "Telegram account"
    }
  },
  "typeVersion": 1.1
}

================ Node #5032 ================
{
  "id": "f779047b-6dec-4e4e-ae09-4dd91f961d08",
  "name": "Sticky Note",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    380,
    240
  ],
  "parameters": {
    "width": 1224.7156767468991,
    "height": 1282.378312060854,
    "content": "# Template for Kids' Story in Arabic\n\nThe n8n template for creating kids' stories in Arabic provides a versatile platform for storytellers to captivate young audiences with educational and interactive tales. Along with its core functionalities, this template allows for customization to suit various use cases and can be set up effortlessly.\n\nCheck this example: [https://t.me/st0ries95](https://t.me/st0ries95)\n\n\n## Node Functionalities\n\n\n## Automated Storytelling Process\n\n\n## Use Cases\n1. **Educational Platforms**:\n Educational platforms can automate the creation and distribution of educational stories in Arabic for children using this template. By incorporating visual and auditory elements into the storytelling process, educational platforms can enhance learning experiences and engage young learners effectively.\n\n2. **Children's Libraries**:\n Children's libraries can utilize this template to curate and share a diverse collection of Arabic stories with young readers. The automated generation of visual content and audio files enhances the storytelling experience, encouraging children to immerse themselves in new worlds and characters through captivating narratives.\n\n3. **Language Learning Apps**:\n Language learning apps focused on Arabic can integrate this template to offer culturally rich storytelling experiences for children learning the language. By translating stories into Arabic and supplementing them with visual and auditory components, these apps can facilitate language acquisition in an enjoyable and interactive manner.\n\n## Configuration Guide for Nodes\n\n### OpenAI Chat Model Nodes:\n- **Credentials**: Provide the necessary API credentials for the OpenAI GPT-4 Turbo model.\n- **Options**: Configure any specific options required for the chat model.\n\n### Create a Prompt for DALL-E Node:\n- **Prompts Customization**: Customize prompts to generate relevant visual content for the stories.\n- **Summarization Method and Prompts**: Define the summarization method and prompts for generating visual content without text.\n\n### Generate an Image for the Story Node:\n- **Resource**: Specify the type of resource (image).\n- **Prompt**: Set up the prompt for producing an image without text within the visual content.\n\n### Generate Audio for the Story Node:\n- **Resource**: Select the type of resource (audio).\n- **Input**: Define the input text for generating audio files.\n\n### Translate the Story to Arabic Node:\n- **Chunking Mode**: Choose the chunking mode (advanced).\n- **Summarization Method and Prompts**: Set the summarization method and prompts for translating the story into Arabic.\n\n### Send the Story To Channel Node:\n- **Chat ID**: Provide the chat ID where the story text will be sent.\n- **Text**: Configure the text to be sent to the channel.\n\nBy configuring each node as per the guidelines above, users can effectively set up and customize the n8n template for kids' stories in Arabic, tailoring it to specific use cases and delivering a seamless and engaging storytelling experience for young audiences.\n"
  },
  "typeVersion": 1
}

================ Node #5033 ================
{
  "id": "5ef92ebc-e4e4-4165-a7df-9f94802f8e27",
  "name": "Sticky Note1",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    1620,
    240
  ],
  "parameters": {
    "width": 1811.9647367735226,
    "height": 1280.7253282813103,
    "content": ""
  },
  "typeVersion": 1
}

================ Node #5034 ================
{
  "id": "76d2b256-8083-42d9-8465-63b2f9c73a67",
  "name": "Translate the Story to Arabic",
  "type": "@n8n/n8n-nodes-langchain.chainSummarization",
  "position": [
    2400,
    480
  ],
  "parameters": {
    "options": {
      "summarizationMethodAndPrompts": {
        "values": {
          "prompt": "Translate this story texts to \"Arabic\" and make it easy to understands for kids with easy words and moral lesson :\n\n\n\"{text}\"\n\n\n",
          "summarizationMethod": "stuff"
        }
      }
    },
    "chunkingMode": "advanced"
  },
  "executeOnce": true,
  "typeVersion": 2
}

================ Node #5035 ================
{
  "id": "126e463e-f1e8-4cd2-856d-aaaebc279797",
  "name": "Send Audio to the Channel",
  "type": "n8n-nodes-base.telegram",
  "position": [
    3180,
    820
  ],
  "parameters": {
    "chatId": "-4170994782",
    "operation": "sendAudio",
    "binaryData": true,
    "additionalFields": {
      "caption": "\u0646\u0647\u0627\u064a\u0629 \u0627\u0644\u0642\u0635\u0629 ... "
    }
  },
  "credentials": {
    "telegramApi": {
      "id": "k3RE6o9brmFRFE9p",
      "name": "Telegram account"
    }
  },
  "typeVersion": 1.1
}

================ Node #5036 ================
{
  "id": "162049a0-620a-4044-966a-27b665827b60",
  "name": "Create a Story for Kids",
  "type": "@n8n/n8n-nodes-langchain.chainSummarization",
  "position": [
    1980,
    960
  ],
  "parameters": {
    "options": {
      "summarizationMethodAndPrompts": {
        "values": {
          "prompt": "Create a captivating short tale for kids, whisking them away to magical lands brimming with wisdom. Explore diverse themes in a fun and simple way, weaving in valuable messages. Dive into cultural adventures with lively language that sparks curiosity. Let your story inspire young minds through enchanting narratives that linger long after the last word. Begin crafting your imaginative tale now! (Approximately 900 characters)\n\n\n\"{text}\"\n\nCONCISE SUMMARY:",
          "summarizationMethod": "stuff"
        }
      }
    },
    "chunkingMode": "advanced"
  },
  "executeOnce": true,
  "typeVersion": 2
}

================ Node #5037 ================
{
  "id": "d743f947-ad45-4e59-97d4-79b98eaddedb",
  "name": "Webhook",
  "type": "n8n-nodes-base.webhook",
  "position": [
    260,
    -20
  ],
  "webhookId": "970dd3c6-de83-46fd-9038-33c470571390",
  "parameters": {
    "path": "970dd3c6-de83-46fd-9038-33c470571390",
    "options": {},
    "responseMode": "responseNode"
  },
  "typeVersion": 1.1
}

================ Node #5038 ================
{
  "id": "832e993e-69e9-475b-8322-776d88da0440",
  "name": "Respond to Webhook",
  "type": "n8n-nodes-base.respondToWebhook",
  "position": [
    1400,
    -20
  ],
  "parameters": {
    "options": {},
    "respondWith": "binary"
  },
  "typeVersion": 1
}

================ Node #5039 ================
{
  "id": "53044a93-375f-48f2-971d-bf765bcdb7a0",
  "name": "Sticky Note",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    180,
    -120
  ],
  "parameters": {
    "width": 301.7420425026802,
    "height": 260.80333469825376,
    "content": "## Webhook Trigger \n**This Node starts listening to requests to the Webhook URL**\n\n"
  },
  "typeVersion": 1
}

================ Node #5040 ================
{
  "id": "c7b3b04e-903b-4d7c-bbf1-2bc2f1b1a426",
  "name": "Sticky Note1",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    180,
    -460
  ],
  "parameters": {
    "width": 469.32758643852594,
    "height": 297.34454352637044,
    "content": "## Creating your Prompt-URL \n**To use this Workflow you need to append your prompt to your Webhook URL in the following way**\n\n1. Take your Webhook URL\n2. Ideate a Prompt and Replace every Space (\" \") by %20 (Url Encoding)\n3. Append \"?input=\" and right after that your encoded prompt to your url\n4. Copy paste this into a webbrowser as soon as you run the Webhook"
  },
  "typeVersion": 1
}

================ Node #5041 ================
{
  "id": "473ff6e5-441a-4706-86a4-190936cc6ac1",
  "name": "Sticky Note2",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    540,
    -54.959833265087354
  ],
  "parameters": {
    "width": 522.2493371551094,
    "height": 109.59833265087394,
    "content": "## Starting the Workflow\n**To start the workflow paste the encoded URL into your webbrowser**\n\n"
  },
  "typeVersion": 1
}

================ Node #5042 ================
{
  "id": "e8874f52-ef7e-4aea-be5b-81e3276da3d2",
  "name": "OpenAI",
  "type": "@n8n/n8n-nodes-langchain.openAi",
  "position": [
    1120,
    -20
  ],
  "parameters": {
    "prompt": "={{ $json.query.input }}",
    "options": {},
    "resource": "image"
  },
  "typeVersion": 1.1
}

================ Node #5043 ================
{
  "id": "08c073a6-e01e-4b04-8051-502c918998c4",
  "name": "Sticky Note3",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    1280,
    -120
  ],
  "parameters": {
    "width": 329.4629595446998,
    "height": 278.4439182704484,
    "content": "## Response\n**Watch the image being rendered in your webbrowser**\n\n"
  },
  "typeVersion": 1
}

================ Node #5044 ================
{
  "id": "6d7f34b8-6203-4512-a428-7b5a18c63db6",
  "name": "Sticky Note",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    240,
    1100
  ],
  "parameters": {
    "width": 373.2796418305297,
    "height": 381.1230421279239,
    "content": "## Setup \n**For Testing use the Setup node to put in test name & url.**\n\nIf you want to use this workflow in production, you can expand it to load data from other sources like a DB or Google Sheet"
  },
  "typeVersion": 1
}

================ Node #5045 ================
{
  "id": "ae568c65-e8f6-45bb-9c96-a870da1fc7d6",
  "name": "Setup",
  "type": "n8n-nodes-base.set",
  "position": [
    360,
    1320
  ],
  "parameters": {
    "values": {
      "string": [
        {
          "name": "website_name",
          "value": "=n8n"
        },
        {
          "name": "url",
          "value": "https://n8n.io/"
        }
      ]
    },
    "options": {}
  },
  "typeVersion": 2
}

================ Node #5046 ================
{
  "id": "ca9f0357-a596-4453-b351-fdd8d47c81ad",
  "name": "URLbox API Request",
  "type": "n8n-nodes-base.httpRequest",
  "position": [
    780,
    1120
  ],
  "parameters": {
    "url": "https://api.urlbox.io/v1/render/sync",
    "method": "POST",
    "options": {},
    "sendBody": true,
    "sendHeaders": true,
    "bodyParameters": {
      "parameters": [
        {
          "name": "url",
          "value": "={{ $json.url }}"
        },
        {
          "name": "full_page",
          "value": true
        }
      ]
    },
    "headerParameters": {
      "parameters": [
        {
          "name": "Authorization",
          "value": "YOUR_API_KEY"
        }
      ]
    }
  },
  "retryOnFail": true,
  "typeVersion": 4.1
}

================ Node #5047 ================
{
  "id": "3caffa3c-657a-4f74-a3cb-daf7beb67890",
  "name": "Sticky Note1",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    640,
    920
  ],
  "parameters": {
    "width": 373.2796418305297,
    "height": 381.1230421279239,
    "content": "## URLbox API call \n[URLbox](https://urlbox.com/) is a Screenshot API. With this API you can automate making screenshots based on website url's.\n\nYou have to replace the Placeholder with your API Key"
  },
  "typeVersion": 1
}

================ Node #5048 ================
{
  "id": "d2b81b41-1497-4733-8130-67f8de0acff4",
  "name": "Analyze the Screenshot",
  "type": "@n8n/n8n-nodes-langchain.openAi",
  "position": [
    1220,
    1120
  ],
  "parameters": {
    "text": "=Your Input is a Screenshot of a Website.\nDescribe the content of the Website in one sentence.",
    "options": {},
    "resource": "image",
    "imageUrls": "renderURL",
    "operation": "analyze"
  },
  "typeVersion": 1.1
}

================ Node #5049 ================
{
  "id": "68d86931-69bb-4b78-a7fe-44969172672f",
  "name": "Sticky Note2",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    1080,
    920
  ],
  "parameters": {
    "width": 373.2796418305297,
    "height": 381.1230421279239,
    "content": "## Analyze the Screenshot \nAnalyze the screenshot using OpenAI.\n\nAdd your OpenAI Credentials on the top of the node.\n\nThe prompt is an example. Change it based on what you want to extract from the screenshot."
  },
  "typeVersion": 1
}

================ Node #5050 ================
{
  "id": "8a22fca5-7f06-45fb-a03f-585a7eb35b40",
  "name": "Merge Name & Description",
  "type": "n8n-nodes-base.merge",
  "position": [
    1620,
    1300
  ],
  "parameters": {
    "mode": "combine",
    "options": {},
    "combinationMode": "mergeByPosition"
  },
  "typeVersion": 2.1
}

================ Node #5051 ================
{
  "id": "4f902a0a-ee93-4190-9b1e-ab3fa15eb4aa",
  "name": "Sticky Note3",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    1480,
    1200
  ],
  "parameters": {
    "width": 371.85912137154685,
    "height": 300.15337596590155,
    "content": "## Merge\nMerge the description with the name of the website & the url."
  },
  "typeVersion": 1
}

================ Node #5052 ================
{
  "id": "8b3eb3f4-b31a-48f0-94bb-35379d07a81f",
  "name": "Manual Execution",
  "type": "n8n-nodes-base.manualTrigger",
  "position": [
    20,
    1320
  ],
  "parameters": {},
  "typeVersion": 1
}

================ Node #5053 ================
{
  "id": "7f11a684-911b-4fbc-ba1b-a8e7bce8e914",
  "name": "getHubspotMessage",
  "type": "n8n-nodes-base.httpRequest",
  "position": [
    280,
    580
  ],
  "parameters": {
    "url": "=https://api.hubapi.com/conversations/v3/conversations/threads/{{ $json[\"body\"][0][\"objectId\"] }}/messages/{{ $json[\"body\"][0][\"messageId\"] }}",
    "options": {},
    "authentication": "predefinedCredentialType",
    "nodeCredentialType": "hubspotAppToken"
  },
  "credentials": {
    "hubspotAppToken": {
      "id": "56nluFhXiGjYN1EY",
      "name": "HubSpot App Token tinder"
    },
    "hubspotOAuth2Api": {
      "id": "y6819fYl4TsW9gl6",
      "name": "HubSpot account 6"
    },
    "hubspotDeveloperApi": {
      "id": "dHB9nVcnZTqf2JDX",
      "name": "HubSpot Developer account"
    }
  },
  "typeVersion": 4.1
}

================ Node #5054 ================
{
  "id": "687bcbb8-38c8-4d21-a46f-186e880d003c",
  "name": "OpenAi Create Thread",
  "type": "n8n-nodes-base.httpRequest",
  "position": [
    1260,
    420
  ],
  "parameters": {
    "url": "https://api.openai.com/v1/threads",
    "method": "POST",
    "options": {},
    "jsonBody": "={\n \"messages\": [\n {\n \"role\": \"user\",\n \"content\": \"{{ $('getHubspotMessage').item.json[\"text\"] }}\"\n }\n ]\n}",
    "sendBody": true,
    "sendHeaders": true,
    "specifyBody": "json",
    "authentication": "predefinedCredentialType",
    "headerParameters": {
      "parameters": [
        {
          "name": "openai-beta",
          "value": "assistants=v1"
        }
      ]
    },
    "nodeCredentialType": "openAiApi"
  },
  "credentials": {
    "openAiApi": {
      "id": "sCh1Lrc1ZT8NVcgn",
      "name": "OpenAi Makeitfuture.eu"
    }
  },
  "typeVersion": 4.1
}

================ Node #5055 ================
{
  "id": "8b51d465-d298-4b7a-b939-026bd51469d3",
  "name": "OpenAI Run",
  "type": "n8n-nodes-base.httpRequest",
  "position": [
    1620,
    420
  ],
  "parameters": {
    "url": "=https://api.openai.com/v1/threads/{{ $json[\"OpenAI Thread ID\"] }}/runs",
    "method": "POST",
    "options": {},
    "jsonBody": "={\n \"assistant_id\": \"asst_MA71Jq0SElVpdjmJa212CTFd\"\n}",
    "sendBody": true,
    "sendHeaders": true,
    "specifyBody": "json",
    "authentication": "predefinedCredentialType",
    "headerParameters": {
      "parameters": [
        {
          "name": "openai-beta",
          "value": "assistants=v1"
        }
      ]
    },
    "nodeCredentialType": "openAiApi"
  },
  "credentials": {
    "openAiApi": {
      "id": "sCh1Lrc1ZT8NVcgn",
      "name": "OpenAi Makeitfuture.eu"
    }
  },
  "typeVersion": 4.1
}

================ Node #5056 ================
{
  "id": "3e645c55-a236-466f-9983-2a3e91c250db",
  "name": "Get Run",
  "type": "n8n-nodes-base.httpRequest",
  "position": [
    1920,
    600
  ],
  "parameters": {
    "url": "=https://api.openai.com/v1/threads/{{ $json[\"thread_id\"] }}/runs/{{ $json[\"id\"] }}",
    "options": {},
    "sendHeaders": true,
    "authentication": "predefinedCredentialType",
    "headerParameters": {
      "parameters": [
        {
          "name": "openai-beta",
          "value": "assistants=v1"
        }
      ]
    },
    "nodeCredentialType": "openAiApi"
  },
  "credentials": {
    "openAiApi": {
      "id": "sCh1Lrc1ZT8NVcgn",
      "name": "OpenAi Makeitfuture.eu"
    }
  },
  "typeVersion": 4.1,
  "alwaysOutputData": true
}

================ Node #5057 ================
{
  "id": "a69a1d1e-b932-481e-8d36-8d121c63ad4b",
  "name": "Get Last Message",
  "type": "n8n-nodes-base.httpRequest",
  "position": [
    2520,
    460
  ],
  "parameters": {
    "url": "=https://api.openai.com/v1/threads/{{ $json[\"thread_id\"] }}/messages",
    "options": {},
    "sendHeaders": true,
    "authentication": "predefinedCredentialType",
    "headerParameters": {
      "parameters": [
        {
          "name": "openai-beta",
          "value": "assistants=v1"
        }
      ]
    },
    "nodeCredentialType": "openAiApi"
  },
  "credentials": {
    "openAiApi": {
      "id": "sCh1Lrc1ZT8NVcgn",
      "name": "OpenAi Makeitfuture.eu"
    }
  },
  "typeVersion": 4.1
}

================ Node #5058 ================
{
  "id": "d9758207-56d4-4180-aac7-f0ebafab1064",
  "name": "HTTP Request",
  "type": "n8n-nodes-base.httpRequest",
  "position": [
    2820,
    960
  ],
  "parameters": {
    "url": "=https://www.listafirme.ro/api/search-v1.asp",
    "options": {},
    "sendQuery": true,
    "queryParameters": {
      "parameters": [
        {
          "name": "key",
          "value": "982dc86a0c1bd4c71185d39ae9f36998"
        },
        {
          "name": "src",
          "value": "={{JSON.parse($json[\"required_action\"][\"submit_tool_outputs\"][\"tool_calls\"][0][\"function\"][\"arguments\"]).src}}"
        }
      ]
    }
  },
  "typeVersion": 4.1
}

================ Node #5059 ================
{
  "id": "5c6f30fd-3ac2-401c-897a-54c7e998c97b",
  "name": "Completed, Action or Inprogress",
  "type": "n8n-nodes-base.switch",
  "position": [
    2120,
    600
  ],
  "parameters": {
    "rules": {
      "rules": [
        {
          "value2": "completed"
        },
        {
          "output": 1,
          "value2": "requires_action"
        },
        {
          "output": 2,
          "value2": "in_progress",
          "operation": "=equal"
        },
        {
          "output": 3,
          "value2": "queued"
        }
      ]
    },
    "value1": "={{ $json.status }}",
    "dataType": "string"
  },
  "typeVersion": 1
}

================ Node #5060 ================
{
  "id": "c1bc0adf-3552-43a3-b38f-bfc76e2683cd",
  "name": "Wait",
  "type": "n8n-nodes-base.wait",
  "position": [
    2360,
    1000
  ],
  "webhookId": "e15c2bb6-e022-4c6d-869b-f361b1ec1259",
  "parameters": {
    "unit": "seconds"
  },
  "typeVersion": 1
}

================ Node #5061 ================
{
  "id": "2e0c4528-5b2b-4d3c-9b53-166ea0f2a28e",
  "name": "Wait1",
  "type": "n8n-nodes-base.wait",
  "position": [
    2340,
    760
  ],
  "webhookId": "3a175bf4-c569-431e-bc56-abed3653ce9d",
  "parameters": {
    "unit": "seconds"
  },
  "typeVersion": 1
}

================ Node #5062 ================
{
  "id": "f80a2cd8-6691-4186-909b-cfed95318014",
  "name": "Submit Data",
  "type": "n8n-nodes-base.httpRequest",
  "position": [
    3360,
    960
  ],
  "parameters": {
    "url": "=https://api.openai.com/v1/threads/{{ $('Select Function').item.json[\"thread_id\"] }}/runs/{{ $('Select Function').item.json[\"id\"] }}/submit_tool_outputs",
    "method": "POST",
    "options": {},
    "jsonBody": "={\n \"tool_outputs\": [\n {\n \"tool_call_id\": \"{{ $('Select Function').item.json[\"required_action\"][\"submit_tool_outputs\"][\"tool_calls\"][0][\"id\"] }}\",\n \"output\": \"{{$json.escapedJsonString}}\"\n }\n ]\n} ",
    "sendBody": true,
    "sendHeaders": true,
    "specifyBody": "json",
    "authentication": "predefinedCredentialType",
    "headerParameters": {
      "parameters": [
        {
          "name": "openai-beta",
          "value": "assistants=v1"
        }
      ]
    },
    "nodeCredentialType": "openAiApi"
  },
  "credentials": {
    "openAiApi": {
      "id": "sCh1Lrc1ZT8NVcgn",
      "name": "OpenAi Makeitfuture.eu"
    }
  },
  "typeVersion": 4.1,
  "alwaysOutputData": true
}

================ Node #5063 ================
{
  "id": "eb114cfd-1af2-4c8b-bfba-583453a1d7ca",
  "name": "Select Function",
  "type": "n8n-nodes-base.switch",
  "position": [
    2520,
    700
  ],
  "parameters": {
    "rules": {
      "rules": [
        {
          "value2": "getAWBbyOrder"
        },
        {
          "output": 1,
          "value2": "get_awb_history"
        }
      ]
    },
    "value1": "={{ $json.required_action.submit_tool_outputs.tool_calls[0].function.name }}",
    "dataType": "string"
  },
  "typeVersion": 1
}

================ Node #5064 ================
{
  "id": "4d1ad478-a9a4-4e9f-9b06-e2a9b7b2b55c",
  "name": "Code1",
  "type": "n8n-nodes-base.code",
  "position": [
    3080,
    960
  ],
  "parameters": {
    "jsCode": "const item1 = $input.all()[0]?.json;\nconst jsonString = JSON.stringify(item1);\nconst escapedJsonString = jsonString.replace(/\"/g, '\\\\\"');\n\nreturn { escapedJsonString };\n"
  },
  "typeVersion": 2
}

================ Node #5065 ================
{
  "id": "39cab0c4-1d7d-41cb-a88d-00acc8e79a24",
  "name": "Wait2",
  "type": "n8n-nodes-base.wait",
  "position": [
    3720,
    1400
  ],
  "webhookId": "68ae5068-6a39-424c-b88d-019bfee78b6f",
  "parameters": {
    "unit": "seconds"
  },
  "typeVersion": 1
}

================ Node #5066 ================
{
  "id": "54205ed2-7c96-44b6-9637-20830300310a",
  "name": "HTTP Request1",
  "type": "n8n-nodes-base.httpRequest",
  "position": [
    2820,
    1180
  ],
  "parameters": {
    "url": "=https://www.listafirme.ro/api/info-v1.asp",
    "options": {},
    "sendQuery": true,
    "queryParameters": {
      "parameters": [
        {
          "name": "key",
          "value": "982dc86a0c1bd4c71185d39ae9f36998"
        },
        {
          "name": "data",
          "value": "={\"TaxCode\":\"{{JSON.parse($json[\"required_action\"][\"submit_tool_outputs\"][\"tool_calls\"][0][\"function\"][\"arguments\"]).src}}\",\"NACE\":\"info\",\"VAT\":\"\", \"RegNo\":\"\", \"Status\":\"\", \"LegalForm\":\"\", \"Name\":\"\", \"Date\":\"\", \"TownCode\":\"\", \"County\":\"\", \"City\":\"\", \"Address\":\"\", \"Administrators\":\"\", \"Shareholders\":\"\", \"Balance\":\"latest\", \"Phone\":\"\", \"Mobile\":\"\", \"Fax\":\"\", \"Email\":\"\", \"Web\":\"\", \"Geolocation\":\"\", \"Description\":\"\", \"Trademarks\":\"\", \"Subsidiaries\":\"\", \"Branches\":\"\", \"FiscalActivity\":\"\", \"Obligations\":\"\", \"Links\":\"\"}"
        }
      ]
    }
  },
  "typeVersion": 4.1
}

================ Node #5067 ================
{
  "id": "862ab78d-0288-4c78-9e02-7ad4ff794a6d",
  "name": "Code",
  "type": "n8n-nodes-base.code",
  "position": [
    3060,
    1180
  ],
  "parameters": {
    "jsCode": "const item1 = $input.all()[0]?.json;\nconst jsonString = JSON.stringify(item1);\nconst escapedJsonString = jsonString.replace(/\"/g, '\\\\\"');\n\nreturn { escapedJsonString };\n"
  },
  "typeVersion": 2
}

================ Node #5068 ================
{
  "id": "e9d1d277-107d-403c-9911-5faa4ae75671",
  "name": "Submit Data1",
  "type": "n8n-nodes-base.httpRequest",
  "position": [
    3260,
    1180
  ],
  "parameters": {
    "url": "=https://api.openai.com/v1/threads/{{ $('Select Function').item.json[\"thread_id\"] }}/runs/{{ $('Select Function').item.json[\"id\"] }}/submit_tool_outputs",
    "method": "POST",
    "options": {},
    "jsonBody": "={\n \"tool_outputs\": [\n {\n \"tool_call_id\": \"{{ $('Select Function').item.json[\"required_action\"][\"submit_tool_outputs\"][\"tool_calls\"][0][\"id\"] }}\",\n \"output\": \"{{$json.escapedJsonString}}\"\n }\n ]\n} ",
    "sendBody": true,
    "sendHeaders": true,
    "specifyBody": "json",
    "authentication": "predefinedCredentialType",
    "headerParameters": {
      "parameters": [
        {
          "name": "openai-beta",
          "value": "assistants=v1"
        }
      ]
    },
    "nodeCredentialType": "openAiApi"
  },
  "credentials": {
    "openAiApi": {
      "id": "sCh1Lrc1ZT8NVcgn",
      "name": "OpenAi Makeitfuture.eu"
    }
  },
  "typeVersion": 4.1,
  "alwaysOutputData": true
}

================ Node #5069 ================
{
  "id": "28e7637b-9a3b-49ba-b4c7-efd3f6cf0522",
  "name": "Wait3",
  "type": "n8n-nodes-base.wait",
  "position": [
    3460,
    1360
  ],
  "webhookId": "6d7d039c-8a4b-4178-8d31-57fb3c24ac14",
  "parameters": {
    "unit": "seconds"
  },
  "typeVersion": 1
}

================ Node #5070 ================
{
  "id": "2b954546-8bc6-4028-9826-37a64d2aed04",
  "name": "respondHubspotMessage1",
  "type": "n8n-nodes-base.httpRequest",
  "position": [
    2820,
    420
  ],
  "parameters": {
    "url": "=https://api.hubapi.com/conversations/v3/conversations/threads/{{ $('getHubspotMessage').item.json[\"conversationsThreadId\"] }}/messages",
    "method": "POST",
    "options": {},
    "sendBody": true,
    "authentication": "predefinedCredentialType",
    "bodyParameters": {
      "parameters": [
        {
          "name": "type",
          "value": "MESSAGE"
        },
        {
          "name": "richText",
          "value": "={{ $json.data[0].content[0].text.value }}"
        },
        {
          "name": "senderActorId",
          "value": "A-5721819"
        },
        {
          "name": "channelId",
          "value": "={{ $('getHubspotMessage').item.json.channelId }}"
        },
        {
          "name": "channelAccountId",
          "value": "={{ $('getHubspotMessage').item.json.channelAccountId }}"
        },
        {
          "name": "text",
          "value": "{{ $json.data[0].content[0].text.value }}"
        }
      ]
    },
    "nodeCredentialType": "hubspotAppToken"
  },
  "credentials": {
    "hubspotAppToken": {
      "id": "56nluFhXiGjYN1EY",
      "name": "HubSpot App Token tinder"
    },
    "hubspotOAuth2Api": {
      "id": "y6819fYl4TsW9gl6",
      "name": "HubSpot account 6"
    },
    "hubspotDeveloperApi": {
      "id": "dHB9nVcnZTqf2JDX",
      "name": "HubSpot Developer account"
    }
  },
  "typeVersion": 4.1
}

================ Node #5071 ================
{
  "id": "6facd7e9-5cbd-4eb7-ab22-84b4fbf35885",
  "name": "IF",
  "type": "n8n-nodes-base.if",
  "position": [
    640,
    600
  ],
  "parameters": {
    "conditions": {
      "string": [
        {
          "value1": "={{ $('getHubspotMessage').item.json[\"senders\"][0][\"actorId\"] }}",
          "value2": "A-5721819",
          "operation": "notEqual"
        }
      ]
    }
  },
  "typeVersion": 1
}

================ Node #5072 ================
{
  "id": "9410bce8-3a2d-4852-acbd-8baa7ee4964d",
  "name": "Airtable",
  "type": "n8n-nodes-base.airtable",
  "position": [
    860,
    600
  ],
  "parameters": {
    "base": {
      "__rl": true,
      "mode": "list",
      "value": "appGAPr0tOy8J0NXC",
      "cachedResultUrl": "https://airtable.com/appGAPr0tOy8J0NXC",
      "cachedResultName": "Hubspot Conversations ChatGPT"
    },
    "table": {
      "__rl": true,
      "mode": "list",
      "value": "tbljZ0POq35jgnKES",
      "cachedResultUrl": "https://airtable.com/appGAPr0tOy8J0NXC/tbljZ0POq35jgnKES",
      "cachedResultName": "Conversations"
    },
    "options": {},
    "operation": "search",
    "filterByFormula": "={Hubspot Thread ID}=\"{{ $json.conversationsThreadId }}\""
  },
  "credentials": {
    "airtableTokenApi": {
      "id": "Ha1BL7JqKQIwX3H1",
      "name": "Hubspot Conversations Makeitfuture Management"
    }
  },
  "typeVersion": 2,
  "alwaysOutputData": true
}

================ Node #5073 ================
{
  "id": "06449687-7521-4151-89c5-050a2768af13",
  "name": "IF1",
  "type": "n8n-nodes-base.if",
  "position": [
    1040,
    640
  ],
  "parameters": {
    "conditions": {
      "string": [
        {
          "value1": "={{ $('Airtable').item.json.id }}",
          "operation": "isEmpty"
        }
      ]
    }
  },
  "typeVersion": 1
}

================ Node #5074 ================
{
  "id": "65c3015e-760f-41e8-9d18-05492cf908c8",
  "name": "createThread",
  "type": "n8n-nodes-base.airtable",
  "position": [
    1440,
    420
  ],
  "parameters": {
    "base": {
      "__rl": true,
      "mode": "list",
      "value": "appGAPr0tOy8J0NXC",
      "cachedResultUrl": "https://airtable.com/appGAPr0tOy8J0NXC",
      "cachedResultName": "Hubspot Conversations ChatGPT"
    },
    "table": {
      "__rl": true,
      "mode": "list",
      "value": "tbljZ0POq35jgnKES",
      "cachedResultUrl": "https://airtable.com/appGAPr0tOy8J0NXC/tbljZ0POq35jgnKES",
      "cachedResultName": "Conversations"
    },
    "columns": {
      "value": {
        "OpenAI Thread ID": "={{ $json[\"id\"] }}",
        "Hubspot Thread ID": "={{ $('getHubspotMessage').item.json.conversationsThreadId }}"
      },
      "schema": [
        {
          "id": "Hubspot Thread ID",
          "type": "string",
          "display": true,
          "removed": false,
          "readOnly": false,
          "required": false,
          "displayName": "Hubspot Thread ID",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "OpenAI Thread ID",
          "type": "string",
          "display": true,
          "removed": false,
          "readOnly": false,
          "required": false,
          "displayName": "OpenAI Thread ID",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        }
      ],
      "mappingMode": "defineBelow",
      "matchingColumns": []
    },
    "options": {},
    "operation": "create"
  },
  "credentials": {
    "airtableTokenApi": {
      "id": "Ha1BL7JqKQIwX3H1",
      "name": "Hubspot Conversations Makeitfuture Management"
    }
  },
  "typeVersion": 2
}

================ Node #5075 ================
{
  "id": "14cd4854-34fa-4a40-8bd2-cce2d9da9571",
  "name": "OpenAI Run1",
  "type": "n8n-nodes-base.httpRequest",
  "position": [
    1620,
    780
  ],
  "parameters": {
    "url": "=https://api.openai.com/v1/threads/{{ $('Airtable').item.json[\"OpenAI Thread ID\"] }}/runs",
    "method": "POST",
    "options": {},
    "jsonBody": "={\n \"assistant_id\": \"asst_MA71Jq0SElVpdjmJa212CTFd\"\n}",
    "sendBody": true,
    "sendHeaders": true,
    "specifyBody": "json",
    "authentication": "predefinedCredentialType",
    "headerParameters": {
      "parameters": [
        {
          "name": "openai-beta",
          "value": "assistants=v1"
        }
      ]
    },
    "nodeCredentialType": "openAiApi"
  },
  "credentials": {
    "openAiApi": {
      "id": "sCh1Lrc1ZT8NVcgn",
      "name": "OpenAi Makeitfuture.eu"
    }
  },
  "typeVersion": 4.1,
  "continueOnFail": true,
  "alwaysOutputData": false
}

================ Node #5076 ================
{
  "id": "7c37641f-b0a4-4031-b289-3d6aed5a5bd6",
  "name": "IF2",
  "type": "n8n-nodes-base.if",
  "position": [
    60,
    600
  ],
  "parameters": {
    "conditions": {
      "string": [
        {
          "value1": "={{ $json[\"body\"][0][\"messageId\"] }}",
          "operation": "isNotEmpty"
        }
      ]
    }
  },
  "typeVersion": 1
}

================ Node #5077 ================
{
  "id": "12744ebd-1d36-4f3c-9cbe-2ed7d18d37e3",
  "name": "Sticky Note1",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    -200,
    440
  ],
  "parameters": {
    "width": 640.1970959824021,
    "height": 428.68258455167785,
    "content": "Watch for new message on the chatbot. \nThis can be triggered with [n8n chat widget](https://www.npmjs.com/package/@n8n/chat), hubspot or other chat services. \n\n"
  },
  "typeVersion": 1
}

================ Node #5078 ================
{
  "id": "9c200085-e9aa-4e11-93c2-da8184976229",
  "name": "Sticky Note",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    2480,
    340
  ],
  "parameters": {
    "width": 615.2010006500725,
    "height": 279.76857176586907,
    "content": "Post assistant Message back to chat service, in this case Hubspot"
  },
  "typeVersion": 1
}

================ Node #5079 ================
{
  "id": "4458aafb-d280-46d0-ba54-3eb4ee746892",
  "name": "Sticky Note2",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    1200,
    300
  ],
  "parameters": {
    "width": 636.6434938094908,
    "height": 304.69360473583896,
    "content": "Create a new Thread, save it to database and RUN"
  },
  "typeVersion": 1
}

================ Node #5080 ================
{
  "id": "f13f45aa-47c9-4a76-a69c-f13f51d9434f",
  "name": "Sticky Note3",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    480,
    440
  ],
  "parameters": {
    "width": 328.9155262250898,
    "height": 421.64797280574976,
    "content": "UPDATE USER FILTER FOR DUPLICATION"
  },
  "typeVersion": 1
}

================ Node #5081 ================
{
  "id": "ba0d0a2c-5014-44b8-a281-9d5014b78bcc",
  "name": "Sticky Note6",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    840,
    440
  ],
  "parameters": {
    "width": 328.9155262250898,
    "height": 421.64797280574976,
    "content": "Search for Thread ID in a database. \n\nThis database is maintaing references between messaging service thread id and OpenI Thread ID. "
  },
  "typeVersion": 1
}

================ Node #5082 ================
{
  "id": "3d3562b5-631f-405c-b671-6856214f167f",
  "name": "Sticky Note7",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    1200,
    680
  ],
  "parameters": {
    "width": 636.6434938094908,
    "height": 304.69360473583896,
    "content": "POST a new message to existing thread."
  },
  "typeVersion": 1
}

================ Node #5083 ================
{
  "id": "9ad1622c-5b42-4279-bf16-edf7bcbb5155",
  "name": "Sticky Note8",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    1900,
    320
  ],
  "parameters": {
    "width": 393.4831089305742,
    "height": 629.4777449641093,
    "content": "Get Run Status:\nIf still in progress, run again. \nIf action needed go to respective action.\nIf Completed, post message."
  },
  "typeVersion": 1
}

================ Node #5084 ================
{
  "id": "e51965ef-7694-41b3-9c9a-9f78c00af3f3",
  "name": "Sticky Note9",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    2538.191410231545,
    840
  ],
  "parameters": {
    "width": 1361.867818730004,
    "height": 731.995091888263,
    "content": "Run required actions based on Assistant answer and respond to Assistant with the function answer. \n\nEach route is a function that you need to define inside your assistant configuration.\n"
  },
  "typeVersion": 1
}

================ Node #5085 ================
{
  "id": "706fb261-724e-4c22-8def-24a320d213a2",
  "name": "OpenAI",
  "type": "@n8n/n8n-nodes-langchain.openAi",
  "position": [
    1280,
    780
  ],
  "parameters": {
    "text": "={{ $('getHubspotMessage').item.json[\"text\"] }}",
    "prompt": "define",
    "options": {
      "baseURL": "https://api.openai.com/v1/threads/{{ $('Airtable').item.json[\"OpenAI Thread ID\"] }}/messages"
    },
    "resource": "assistant",
    "assistantId": {
      "__rl": true,
      "mode": "list",
      "value": "asst_wVbEcnRttQ8K65DOV0fk1DJU",
      "cachedResultName": "Lista Firma Agent"
    }
  },
  "credentials": {
    "openAiApi": {
      "id": "sCh1Lrc1ZT8NVcgn",
      "name": "OpenAi Makeitfuture.eu"
    }
  },
  "typeVersion": 1.3
}

================ Node #5086 ================
{
  "id": "b8f686cc-33d6-4e99-987c-d1f91864e81d",
  "name": "Webhook",
  "type": "n8n-nodes-base.webhook",
  "position": [
    -160,
    600
  ],
  "webhookId": "637d5b46-b35f-4943-92a2-864ddce170f4",
  "parameters": {
    "path": "hubspot-tinder",
    "options": {},
    "httpMethod": "POST"
  },
  "typeVersion": 1
}

================ Node #5087 ================
{
  "id": "cd80cd2f-a6e1-48eb-ba05-0f8f1a0875e5",
  "name": "When clicking \"Test workflow\"",
  "type": "n8n-nodes-base.manualTrigger",
  "position": [
    680,
    320
  ],
  "parameters": {},
  "typeVersion": 1
}

================ Node #5088 ================
{
  "id": "9f03f1c4-c47e-4eda-bc0a-a598c21e4616",
  "name": "Sticky Note",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    640,
    130
  ],
  "parameters": {
    "width": 369.1031874662338,
    "height": 349,
    "content": "### 1. Create a Google Sheet document\n* This tutorial uses Google Sheet document connected to Google Forms, but a standalone Sheet document will work too\n* Adapt initial trigger to your needs: run manually or at some time intervals\n\n[Link to the Google Sheets template](https://docs.google.com/spreadsheets/d/1Kcr1oF_RrfNQJczmJDpwClOSYpvSnwbeX-_pdUo91-I/edit?usp=sharing)"
  },
  "typeVersion": 1
}

================ Node #5089 ================
{
  "id": "1e478f81-76e7-4fc3-a147-11a92d3f9998",
  "name": "Sticky Note1",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    1040,
    160
  ],
  "parameters": {
    "width": 394,
    "height": 319,
    "content": "### 2. Combine all answers into an array\n* Since the main goal is to provide an overall summary, we need to combine all answers for each Google Form question\n* Aggregate Node takes multiple incoming items and produces just a single item which contains arrays of user feedback"
  },
  "typeVersion": 1
}

================ Node #5090 ================
{
  "id": "1ab06b51-3b9e-4a4c-afba-c98e529a636c",
  "name": "Sticky Note2",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    1480,
    160
  ],
  "parameters": {
    "width": 432,
    "height": 319,
    "content": "### 3. Generate a summary report\n* Enter a __system message__ with a overall instructions on how to analyze the feedback form\n* Provide a __user message__ with JSON arrays.\n\n__NB! Consider splitting the form questions for a very long forms or when the number of responses is too high__"
  },
  "typeVersion": 1
}

================ Node #5091 ================
{
  "id": "ce0118a3-4eaf-4d60-adf0-5bde5d41328a",
  "name": "Sticky Note3",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    1940,
    160
  ],
  "parameters": {
    "width": 359.1031874662346,
    "height": 319,
    "content": "### 4. Convert to HTML and send an email\n* GPT is configured to reply in Markdown format. Markdown Node converts such text into HTML\n* Finally, the Gmail node sends a message with HTML report"
  },
  "typeVersion": 1
}

================ Node #5092 ================
{
  "id": "37bc8ab5-328c-4f50-bbda-f7482bf36522",
  "name": "Get Google Sheets records",
  "type": "n8n-nodes-base.googleSheets",
  "position": [
    860,
    320
  ],
  "parameters": {
    "options": {},
    "sheetName": {
      "__rl": true,
      "mode": "list",
      "value": 2035968519,
      "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1Kcr1oF_RrfNQJczmJDpwClOSYpvSnwbeX-_pdUo91-I/edit#gid=2035968519",
      "cachedResultName": "Form Responses 1"
    },
    "documentId": {
      "__rl": true,
      "mode": "list",
      "value": "1Kcr1oF_RrfNQJczmJDpwClOSYpvSnwbeX-_pdUo91-I",
      "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1Kcr1oF_RrfNQJczmJDpwClOSYpvSnwbeX-_pdUo91-I/edit?usp=drivesdk",
      "cachedResultName": "Event feedback form (Responses)"
    }
  },
  "credentials": {
    "googleSheetsOAuth2Api": {
      "id": "RtRiRezoxiWkzZQt",
      "name": "Ted's Tech Talks Google account"
    }
  },
  "typeVersion": 4.2
}

================ Node #5093 ================
{
  "id": "d75b11b1-2cce-40c2-ab5a-d18fdf7f5283",
  "name": "Aggregate responses into arrays",
  "type": "n8n-nodes-base.aggregate",
  "position": [
    1200,
    320
  ],
  "parameters": {
    "options": {},
    "fieldsToAggregate": {
      "fieldToAggregate": [
        {
          "fieldToAggregate": "['What went great?']"
        },
        {
          "fieldToAggregate": "['How can we improve?']"
        },
        {
          "fieldToAggregate": "['What is the chance of recommending our event?']"
        }
      ]
    }
  },
  "typeVersion": 1
}

================ Node #5094 ================
{
  "id": "a90f83fe-809b-42db-b65d-43fb11b2979a",
  "name": "Summarize via GPT model",
  "type": "n8n-nodes-base.openAi",
  "position": [
    1620,
    320
  ],
  "parameters": {
    "prompt": {
      "messages": [
        {
          "role": "system",
          "content": "Your task is to summarize event feedback form responses. You will receive answers on three questions:\n1. What went great?\n2. How can we improve?\n3. What is the chance of recommending our event?\n\nEach questions has several answers separated by | character.\nAnalyze each question and prepare a summary report. It should contain an overall sentiment regarding the event, followed by the constructive ideas of what to improve.\n\nReply in Markdown formatting"
        },
        {
          "content": "=1. What went great: ```{{ $json['What went great?'].join(' | ') }}```\n2. How can we improve: ```{{ $json['How can we improve?'].join(' | ') }}```\n3. What is the chance of recommending our event: ```{{ $json['What is the chance of recommending our event?'].join(' | ') }}```"
        }
      ]
    },
    "options": {
      "temperature": 0.3
    },
    "resource": "chat",
    "chatModel": "gpt-4-turbo-preview"
  },
  "credentials": {
    "openAiApi": {
      "id": "rveqdSfp7pCRON1T",
      "name": "Ted's Tech Talks OpenAi"
    }
  },
  "typeVersion": 1.1
}

================ Node #5095 ================
{
  "id": "2c8d4e46-9d3e-4655-952b-37d04f673914",
  "name": "Convet from Markdown to HTML",
  "type": "n8n-nodes-base.markdown",
  "position": [
    1980,
    320
  ],
  "parameters": {
    "mode": "markdownToHtml",
    "options": {
      "completeHTMLDocument": false
    },
    "markdown": "={{ $json.message.content }}"
  },
  "typeVersion": 1
}

================ Node #5096 ================
{
  "id": "a27d8664-dc87-4458-9f12-970b88ab6515",
  "name": "Send via Gmail",
  "type": "n8n-nodes-base.gmail",
  "position": [
    2160,
    320
  ],
  "parameters": {
    "sendTo": "teds.tech.talks@gmail.com",
    "message": "={{ $json.data }}",
    "options": {
      "appendAttribution": false
    },
    "subject": "Feedback form response"
  },
  "credentials": {
    "gmailOAuth2": {
      "id": "UllrXlZsDnkdA3tT",
      "name": "Gmail account"
    }
  },
  "typeVersion": 2.1
}

================ Node #5097 ================
{
  "id": "8920dc6e-b2fb-4446-8cb3-f3f6d626dcb3",
  "name": "Linear Trigger",
  "type": "n8n-nodes-base.linearTrigger",
  "position": [
    420,
    360
  ],
  "webhookId": "a02faf62-684f-44bb-809f-e962c9ede70d",
  "parameters": {
    "teamId": "7a330c36-4b39-4bf1-922e-b4ceeb91850a",
    "resources": [
      "issue"
    ],
    "authentication": "oAuth2"
  },
  "credentials": {
    "linearOAuth2Api": {
      "id": "02MqKUMdPxr9t3mX",
      "name": "Nik's Linear Creds"
    }
  },
  "typeVersion": 1
}

================ Node #5098 ================
{
  "id": "61214884-62f9-4a00-9517-e2d51b44d0ae",
  "name": "Only tickets that need to be classified",
  "type": "n8n-nodes-base.filter",
  "position": [
    1000,
    360
  ],
  "parameters": {
    "options": {},
    "conditions": {
      "options": {
        "leftValue": "",
        "caseSensitive": true,
        "typeValidation": "strict"
      },
      "combinator": "and",
      "conditions": [
        {
          "id": "bc3a756d-b2b6-407b-91c9-a1cd9da004e0",
          "operator": {
            "type": "string",
            "operation": "notContains"
          },
          "leftValue": "={{ $('Linear Trigger').item.json.data.description }}",
          "rightValue": "Add a description here"
        },
        {
          "id": "f3d8d0fc-332d-41a6-aef8-1f221bf30c0e",
          "operator": {
            "name": "filter.operator.equals",
            "type": "string",
            "operation": "equals"
          },
          "leftValue": "={{ $('Linear Trigger').item.json.data.state.id }}",
          "rightValue": "6b9a8eec-82dc-453a-878b-50f4c98d3e53"
        },
        {
          "id": "9cdb55b2-3ca9-43bd-84b0-ef025b59ce18",
          "operator": {
            "type": "number",
            "operation": "gt"
          },
          "leftValue": "={{ $('Linear Trigger').item.json.data.labels.filter(label => label.id === 'f2b6e3e9-b42d-4106-821c-6a08dcb489a9').length }}",
          "rightValue": 0
        }
      ]
    }
  },
  "typeVersion": 2
}

================ Node #5099 ================
{
  "id": "da4d8e0c-895b-4a84-8319-438f971af403",
  "name": "Sticky Note",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    1000,
    111.31510859283728
  ],
  "parameters": {
    "color": 7,
    "height": 219.68489140716272,
    "content": "### When does this fire?\nIn our setup we have a general team in Linear where we post new tickets to. Additionally, the bug needs to have a certain label and the description needs to be filled. \nYou're of course free to adjust this to your needs\n\ud83d\udc47"
  },
  "typeVersion": 1
}

================ Node #5100 ================
{
  "id": "b7e3a328-96c4-4082-93a9-0cb331367190",
  "name": "Update team",
  "type": "n8n-nodes-base.linear",
  "position": [
    2160,
    280
  ],
  "parameters": {
    "issueId": "={{ $('Linear Trigger').item.json.data.id }}",
    "operation": "update",
    "updateFields": {
      "teamId": "={{ $json.teamId }}"
    }
  },
  "credentials": {
    "linearApi": {
      "id": "oYIZvhmcNt5JWTCP",
      "name": "Nik's Linear Key"
    }
  },
  "typeVersion": 1
}

================ Node #5101 ================
{
  "id": "858764ce-cd24-4399-88ce-cf69e676beaa",
  "name": "Get all linear teams",
  "type": "n8n-nodes-base.httpRequest",
  "position": [
    1300,
    540
  ],
  "parameters": {
    "url": "https://api.linear.app/graphql",
    "method": "POST",
    "options": {},
    "sendBody": true,
    "authentication": "predefinedCredentialType",
    "bodyParameters": {
      "parameters": [
        {
          "name": "query",
          "value": "{ teams { nodes { id name } } }"
        }
      ]
    },
    "nodeCredentialType": "linearOAuth2Api"
  },
  "credentials": {
    "linearOAuth2Api": {
      "id": "02MqKUMdPxr9t3mX",
      "name": "Nik's Linear Creds"
    }
  },
  "typeVersion": 3
}

================ Node #5102 ================
{
  "id": "167f0c66-5bfb-4dd7-a345-81f4d62df2c4",
  "name": "Set team ID",
  "type": "n8n-nodes-base.set",
  "position": [
    2000,
    280
  ],
  "parameters": {
    "options": {},
    "assignments": {
      "assignments": [
        {
          "id": "a46c4476-b851-4112-ac72-e805308c5ab7",
          "name": "teamId",
          "type": "string",
          "value": "={{ $('Get all linear teams').first().json.data.teams.nodes.find(team => team.name === $json.message.content).id }}"
        }
      ]
    }
  },
  "typeVersion": 3.3
}

================ Node #5103 ================
{
  "id": "36363240-2b03-4af8-8987-0db95094403b",
  "name": "Set me up",
  "type": "n8n-nodes-base.set",
  "position": [
    700,
    360
  ],
  "parameters": {
    "options": {},
    "assignments": {
      "assignments": [
        {
          "id": "a56f24c8-0a28-4dd2-885a-cb6a081a5bf4",
          "name": "teams",
          "type": "string",
          "value": "- [Adore][Is responsible for every persona that is not Enterprise. This includes signup journeys, trials, n8n Cloud, the Canvas building experience and more, the nodes detail view (NDV), the nodes panel, the workflows list and the executions view] \n- [Payday][Is responsible for the Enterprise persona. This includes making sure n8n is performant, the enterprise features SSO, LDAP, SAML, Log streaming, environments, queue mode, version control, external storage. Additionally the team looks out for the execution logic in n8n and how branching works] \n- [Nodes][This team is responsible for everything that is related to a specific node in n8n] \n- [Other][This is a placeholder if you don't know to which team something belongs]"
        },
        {
          "id": "d672cb59-72be-4fc8-9327-2623795f225d",
          "name": "slackChannel",
          "type": "string",
          "value": "#yourChannelName"
        }
      ]
    }
  },
  "typeVersion": 3.3
}

================ Node #5104 ================
{
  "id": "49f2a157-b037-46d9-a6d7-97f8a72ee093",
  "name": "Sticky Note1",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    581.3284642016245,
    85.15358950105212
  ],
  "parameters": {
    "color": 5,
    "width": 349.85308830334156,
    "height": 439.62604295396085,
    "content": "## Setup\n1. Add your Linear and OpenAi credentials\n2. Change the team in the `Linear Trigger` to match your needs\n3. Customize your teams and their areas of responsibility in the `Set me up` node. Please use the format `[Teamname][Description/Areas of responsibility]`. Also make sure that the teamnames match the names in Linear exactly.\n4. Change the Slack channel in the `Set me up` node to your Slack channel of choice."
  },
  "typeVersion": 1
}

================ Node #5105 ================
{
  "id": "8cdb3d0d-4fd3-4ea2-957f-daf746934728",
  "name": "Check if AI was able to find a team",
  "type": "n8n-nodes-base.if",
  "position": [
    1780,
    380
  ],
  "parameters": {
    "options": {},
    "conditions": {
      "options": {
        "leftValue": "",
        "caseSensitive": true,
        "typeValidation": "strict"
      },
      "combinator": "and",
      "conditions": [
        {
          "id": "86bfb688-3ecc-4360-b83a-d706bb11c8f9",
          "operator": {
            "type": "string",
            "operation": "notEquals"
          },
          "leftValue": "={{ $json.message.content }}",
          "rightValue": "Other"
        }
      ]
    }
  },
  "typeVersion": 2
}

================ Node #5106 ================
{
  "id": "a4cb20ca-658a-4b30-9185-5af9a32a7e20",
  "name": "Notify in Slack",
  "type": "n8n-nodes-base.slack",
  "position": [
    2000,
    460
  ],
  "parameters": {
    "text": "The AI was not able to identify a fitting team for a bug",
    "select": "channel",
    "channelId": {
      "__rl": true,
      "mode": "name",
      "value": "={{ $('Set me up').first().json.slackChannel }}"
    },
    "otherOptions": {}
  },
  "credentials": {
    "slackApi": {
      "id": "376",
      "name": "Idea Bot"
    }
  },
  "typeVersion": 2.1
}

================ Node #5107 ================
{
  "id": "393b2392-80be-4a68-9240-dc1065e0081a",
  "name": "Merge data",
  "type": "n8n-nodes-base.merge",
  "position": [
    1600,
    380
  ],
  "parameters": {
    "mode": "chooseBranch"
  },
  "typeVersion": 2.1
}

================ Node #5108 ================
{
  "id": "f25da511-b255-4a53-ba4e-5765916e90be",
  "name": "OpenAI",
  "type": "@n8n/n8n-nodes-langchain.openAi",
  "position": [
    1220,
    360
  ],
  "parameters": {
    "modelId": {
      "__rl": true,
      "mode": "list",
      "value": "gpt-4-32k-0314",
      "cachedResultName": "GPT-4-32K-0314"
    },
    "options": {},
    "messages": {
      "values": [
        {
          "role": "system",
          "content": "I need you to classify a bug ticket and tell me which team should work on it"
        },
        {
          "role": "system",
          "content": "All possible teams will be described in the following format: [Teamname][Areas of responsibility] "
        },
        {
          "role": "system",
          "content": "=The possible teams are the following:\n {{ $('Set me up').first().json.teams }}"
        },
        {
          "role": "system",
          "content": "=This is the bug that we're trying to classify:\nTitle: {{ $('Linear Trigger').first().json.data.title }}\nDescription: {{ $('Linear Trigger').first().json.data.description }}"
        },
        {
          "content": "Which team should work on this bug?"
        },
        {
          "role": "system",
          "content": "Do not respond with anything else than the name of the team from the list you were given"
        }
      ]
    }
  },
  "credentials": {
    "openAiApi": {
      "id": "VQtv7frm7eLiEDnd",
      "name": "OpenAi account 7"
    }
  },
  "typeVersion": 1
}

================ Node #5109 ================
{
  "id": "a60c8572-56c1-4bf3-8352-a6419a475887",
  "name": "Window Buffer Memory",
  "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
  "position": [
    900,
    760
  ],
  "parameters": {},
  "typeVersion": 1.1
}

================ Node #5110 ================
{
  "id": "b4f2e26c-903b-46b8-bd8b-110fd64de9e4",
  "name": "Not sure?",
  "type": "@n8n/n8n-nodes-langchain.toolWorkflow",
  "position": [
    1120,
    760
  ],
  "parameters": {
    "name": "dont_know_tool",
    "fields": {
      "values": [
        {
          "name": "chatInput",
          "stringValue": "={{ $('Chat Trigger').item.json.chatInput }}"
        }
      ]
    },
    "workflowId": "={{ $workflow.id}}",
    "description": "Use this tool if you don't know the answer to the user's question, or if you're not very confident about your answer."
  },
  "typeVersion": 1
}

================ Node #5111 ================
{
  "id": "951cc691-b422-4ce6-901f-b7feb3afd1ad",
  "name": "Execute Workflow Trigger",
  "type": "n8n-nodes-base.executeWorkflowTrigger",
  "position": [
    540,
    1360
  ],
  "parameters": {},
  "typeVersion": 1
}

================ Node #5112 ================
{
  "id": "194ba9c0-e256-449a-8da7-ac5339123a99",
  "name": "Sticky Note1",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    500,
    1020
  ],
  "parameters": {
    "color": 7,
    "width": 1118.3459011229047,
    "height": 775.3931210698682,
    "content": "### Sub-workflow: Custom tool\nThe agent above can call this workflow. It checks if the user has supplied an email address. If they haven't it prompts them to provide one. If they have, it messages a customer support channel for help."
  },
  "typeVersion": 1
}

================ Node #5113 ================
{
  "id": "38c6b363-45a7-4e72-9e40-8c0df3cc480f",
  "name": "Sticky Note2",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    500,
    460
  ],
  "parameters": {
    "color": 7,
    "width": 927.5,
    "height": 486.5625,
    "content": "### Main workflow: AI agent using custom tool"
  },
  "typeVersion": 1
}

================ Node #5114 ================
{
  "id": "0389315b-e48d-4b00-b9a1-899302b1b094",
  "name": "Sticky Note",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    1060,
    700
  ],
  "parameters": {
    "color": 5,
    "width": 197.45572294791873,
    "height": 179.21380662202682,
    "content": "**This tool calls the sub-workflow below**"
  },
  "typeVersion": 1
}

================ Node #5115 ================
{
  "id": "fb11064a-4cf5-4110-9e39-af24a3225164",
  "name": "Sticky Note5",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    700,
    680
  ],
  "parameters": {
    "color": 2,
    "width": 150,
    "height": 213.44323866265472,
    "content": "**Set your credentials**"
  },
  "typeVersion": 1
}

================ Node #5116 ================
{
  "id": "d689021d-0a46-4dff-a01a-0b01ecdd198b",
  "name": "Sticky Note4",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    1020,
    1180
  ],
  "parameters": {
    "color": 2,
    "width": 178.0499248677781,
    "height": 250.57252651663197,
    "content": "**Set your credentials and Slack details**"
  },
  "typeVersion": 1
}

================ Node #5117 ================
{
  "id": "0926cd61-c0b8-4bae-ae65-9afd130d17cd",
  "name": "Sticky Note3",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    340,
    520
  ],
  "parameters": {
    "color": 4,
    "width": 185.9375,
    "height": 214.8397420554627,
    "content": "## Try it out\n\nSelect **Chat** at the bottom and enter:\n\n_Hi! Please respond to this as if you don't know the answer to my query._"
  },
  "typeVersion": 1
}

================ Node #5118 ================
{
  "id": "cde69dfe-252e-4a05-8d56-fa79431df5d8",
  "name": "Sticky Note6",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    1580,
    1600
  ],
  "parameters": {
    "height": 144.50520156238127,
    "content": "## Next steps\n\nLearn more about [Advanced AI in n8n](https://docs.n8n.io/advanced-ai/)"
  },
  "typeVersion": 1
}

================ Node #5119 ================
{
  "id": "927b775a-47f6-4067-a1a5-5f13dea28e45",
  "name": "Chat Trigger",
  "type": "@n8n/n8n-nodes-langchain.chatTrigger",
  "position": [
    600,
    520
  ],
  "webhookId": "785e0c0c-12e5-4249-9abe-47bb131975cb",
  "parameters": {},
  "typeVersion": 1
}

================ Node #5120 ================
{
  "id": "971e7b90-c2d8-4292-9da8-732d7d399f04",
  "name": "Prompt the user to provide an email",
  "type": "n8n-nodes-base.code",
  "position": [
    1060,
    1520
  ],
  "parameters": {
    "jsCode": "response = {\"response\":\"I'm sorry I don't know the answer. Please repeat your question and include your email address so I can request help.\"};\nreturn response;"
  },
  "typeVersion": 2
}

================ Node #5121 ================
{
  "id": "6f5a21b3-c145-46c8-8e69-660100c4a6fc",
  "name": "Confirm that we've messaged a human",
  "type": "n8n-nodes-base.code",
  "position": [
    1300,
    1260
  ],
  "parameters": {
    "jsCode": "response = {\"response\": \"Thank you for getting in touch. I've messaged a human to help.\"}\nreturn response;"
  },
  "typeVersion": 2
}

================ Node #5122 ================
{
  "id": "8b17da5e-e392-4028-91b0-bc02d34e46ed",
  "name": "AI Agent",
  "type": "@n8n/n8n-nodes-langchain.agent",
  "position": [
    820,
    520
  ],
  "parameters": {
    "options": {
      "systemMessage": "Try to answer the user's question. When you can't answer, or you're not confident of the answer, use the appropriate tool. When you use the dont_know_tool, respond with the message from the tool."
    }
  },
  "typeVersion": 1.2
}

================ Node #5123 ================
{
  "id": "990ecd3b-6aa0-4b17-8d01-d606b9164fa8",
  "name": "Check if user has provided email",
  "type": "n8n-nodes-base.if",
  "position": [
    760,
    1360
  ],
  "parameters": {
    "options": {},
    "conditions": {
      "options": {
        "leftValue": "",
        "caseSensitive": true,
        "typeValidation": "strict"
      },
      "combinator": "and",
      "conditions": [
        {
          "id": "5e21e7c5-db60-4111-bb17-c289ae0fc159",
          "operator": {
            "type": "string",
            "operation": "regex"
          },
          "leftValue": "={{ $('Execute Workflow Trigger').item.json.chatInput }}",
          "rightValue": "/([a-zA-Z0-9._-]+@[a-zA-Z0-9._-]+\\.[a-zA-Z0-9_-]+)/gi"
        }
      ]
    }
  },
  "typeVersion": 2
}

================ Node #5124 ================
{
  "id": "d14da0ae-06ca-422b-b5b6-e7759e74c787",
  "name": "Message Slack for help",
  "type": "n8n-nodes-base.slack",
  "position": [
    1060,
    1260
  ],
  "parameters": {
    "text": "={{ \"A user had a question the bot couldn't answer. Here's their message: \" + $('Execute Workflow Trigger').item.json.chatInput }}",
    "select": "channel",
    "channelId": {
      "__rl": true,
      "mode": "name",
      "value": ""
    },
    "otherOptions": {}
  },
  "typeVersion": 2.1
}

================ Node #5125 ================
{
  "id": "278391c7-6945-495e-a4f1-74fb8fcc3549",
  "name": "GPT4",
  "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
  "position": [
    740,
    740
  ],
  "parameters": {
    "model": "gpt-4",
    "options": {
      "temperature": 0.2
    }
  },
  "typeVersion": 1
}

================ Node #5126 ================
{
  "id": "938fedbd-e34c-40af-af2f-b9c669e1a6e9",
  "name": "When clicking \"Test workflow\"",
  "type": "n8n-nodes-base.manualTrigger",
  "position": [
    380,
    380
  ],
  "parameters": {},
  "typeVersion": 1
}

================ Node #5127 ================
{
  "id": "1d59db5d-8fe6-4292-a221-a0d0194c6e0c",
  "name": "Set input text and TTS voice",
  "type": "n8n-nodes-base.set",
  "position": [
    760,
    380
  ],
  "parameters": {
    "mode": "raw",
    "options": {},
    "jsonOutput": "{\n \"input_text\": \"The quick brown fox jumped over the lazy dog.\",\n \"voice\": \"alloy\"\n}\n"
  },
  "typeVersion": 3.2
}

================ Node #5128 ================
{
  "id": "9d54de1d-59b7-4c1f-9e88-13572da5292c",
  "name": "Send HTTP Request to OpenAI's TTS Endpoint",
  "type": "n8n-nodes-base.httpRequest",
  "position": [
    1120,
    380
  ],
  "parameters": {
    "url": "https://api.openai.com/v1/audio/speech",
    "method": "POST",
    "options": {},
    "sendBody": true,
    "sendHeaders": true,
    "authentication": "predefinedCredentialType",
    "bodyParameters": {
      "parameters": [
        {
          "name": "model",
          "value": "tts-1"
        },
        {
          "name": "input",
          "value": "={{ $json.input_text }}"
        },
        {
          "name": "voice",
          "value": "={{ $json.voice }}"
        }
      ]
    },
    "headerParameters": {
      "parameters": [
        {
          "name": "Authorization",
          "value": "Bearer $OPENAI_API_KEY"
        }
      ]
    },
    "nodeCredentialType": "openAiApi"
  },
  "credentials": {
    "openAiApi": {
      "id": "VokTSv2Eg5m5aDg7",
      "name": "OpenAi account"
    }
  },
  "typeVersion": 4.1
}

================ Node #5129 ================
{
  "id": "1ce72c9c-aa6f-4a18-9d5a-3971686a51ec",
  "name": "Sticky Note",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    280,
    256
  ],
  "parameters": {
    "width": 273,
    "height": 339,
    "content": "## Workflow Trigger\nYou can replace this manual trigger with another trigger type as required by your use case."
  },
  "typeVersion": 1
}

================ Node #5130 ================
{
  "id": "eb487535-5f36-465e-aeee-e9ff62373e53",
  "name": "Sticky Note1",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    660,
    257
  ],
  "parameters": {
    "width": 273,
    "height": 335,
    "content": "## Manually Set OpenAI TTS Configuration\n"
  },
  "typeVersion": 1
}

================ Node #5131 ================
{
  "id": "36b380bd-0703-4b60-83cb-c4ad9265864d",
  "name": "Sticky Note2",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    1020,
    260
  ],
  "parameters": {
    "width": 302,
    "height": 335,
    "content": "## Send Request to OpenAI TTS API\n"
  },
  "typeVersion": 1
}

================ Node #5132 ================
{
  "id": "ff35ff28-62b5-49c8-a657-795aa916b524",
  "name": "Sticky Note3",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    660,
    620
  ],
  "parameters": {
    "color": 4,
    "width": 273,
    "height": 278,
    "content": "### Configuration Options\n- \"input_text\" is the text you would like to be turned into speech, and can be replaced with a programmatic value for your use case. Bear in mind that the maximum number of tokens per API call is 4,000.\n\n- \"voice\" is the voice used by the TTS model. The default is alloy, other options can be found here: [OpenAI TTS Docs](https://platform.openai.com/docs/guides/text-to-speech)"
  },
  "typeVersion": 1
}

================ Node #5133 ================
{
  "id": "5f7ef80e-b5c8-41df-9411-525fafc2d910",
  "name": "Sticky Note4",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    1020,
    620
  ],
  "parameters": {
    "color": 4,
    "width": 299,
    "height": 278,
    "content": "### Output\nThe output returned by OpenAI's TTS endpoint is a .mp3 audio file (binary).\n\n\n### Credentials\nTo use this workflow, you'll have to configure and provide a valid OpenAI credential.\n"
  },
  "typeVersion": 1
}

================ Node #5134 ================
{
  "id": "aa0c62d1-2a5e-4336-8783-a8a21cb23374",
  "name": "OpenAI Chat Model",
  "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
  "position": [
    1180,
    760
  ],
  "parameters": {
    "options": {
      "temperature": 0
    }
  },
  "credentials": {
    "openAiApi": {
      "id": "VQtv7frm7eLiEDnd",
      "name": "OpenAi account 7"
    }
  },
  "typeVersion": 1
}

================ Node #5135 ================
{
  "id": "0c7d21e6-5bf6-4927-ad23-008b22e2ffde",
  "name": "When clicking \"Execute Workflow\"",
  "type": "n8n-nodes-base.manualTrigger",
  "position": [
    280,
    560
  ],
  "parameters": {},
  "typeVersion": 1
}

================ Node #5136 ================
{
  "id": "352de912-3a36-4bf2-b013-b46e0ace38e9",
  "name": "Generate French Audio",
  "type": "n8n-nodes-base.httpRequest",
  "position": [
    720,
    560
  ],
  "parameters": {
    "url": "=https://api.elevenlabs.io/v1/text-to-speech/{{ $json.voice_id }}",
    "method": "POST",
    "options": {},
    "jsonBody": "={\"text\":\"{{ $json.text }}\",\"model_id\":\"eleven_multilingual_v2\",\"voice_settings\":{\"stability\":0.5,\"similarity_boost\":0.5}}",
    "sendBody": true,
    "sendQuery": true,
    "sendHeaders": true,
    "specifyBody": "json",
    "authentication": "genericCredentialType",
    "genericAuthType": "httpHeaderAuth",
    "queryParameters": {
      "parameters": [
        {
          "name": "optimize_streaming_latency",
          "value": "1"
        }
      ]
    },
    "headerParameters": {
      "parameters": [
        {
          "name": "accept",
          "value": "audio/mpeg"
        }
      ]
    }
  },
  "credentials": {
    "httpHeaderAuth": {
      "id": "OMni1VQQclVYOmeZ",
      "name": "ElevenLabs David"
    }
  },
  "typeVersion": 4.1
}

================ Node #5137 ================
{
  "id": "0cde2e89-0669-41b4-8fe1-1a6aff14792f",
  "name": "Set ElevenLabs voice ID and text",
  "type": "n8n-nodes-base.set",
  "position": [
    500,
    560
  ],
  "parameters": {
    "fields": {
      "values": [
        {
          "name": "voice_id",
          "stringValue": "wl7sZxfTOitHVachQiUm"
        },
        {
          "name": "text",
          "stringValue": "=Apr\u00e8s, on a fait la sieste, Camille a travaill\u00e9 pour French Today et j\u2019ai \u00e9tudi\u00e9 un peu, et puis Camille a propos\u00e9 de suivre une visite guid\u00e9e de l\u2019Abbaye de Beauport qui commen\u00e7ait \u00e0 17 heures. On a march\u00e9 environ vingt minutes, et je m\u2019arr\u00eatais souvent pour prendre des photos : la baie de Paimpol est si jolie ! Mais Camille m\u2019a dit : \u00ab D\u00e9p\u00eache-toi Sunny\u202f! La visite guid\u00e9e commence dans cinq minutes. \u00bb Donc, j\u2019ai boug\u00e9 mes fesses et on est arriv\u00e9es \u00e0 l\u2019abbaye"
        }
      ]
    },
    "options": {}
  },
  "typeVersion": 3.2
}

================ Node #5138 ================
{
  "id": "38aa323e-a899-4018-afb9-4d4682ac8ff1",
  "name": "Translate Text to English",
  "type": "@n8n/n8n-nodes-langchain.chainLlm",
  "position": [
    1180,
    560
  ],
  "parameters": {
    "prompt": "=Translate to English:\n{{ $json.text }}"
  },
  "typeVersion": 1.2
}

================ Node #5139 ================
{
  "id": "f0b7adad-fa0b-4764-96e0-0883bbcc02d6",
  "name": "Translate English text to speech",
  "type": "n8n-nodes-base.httpRequest",
  "position": [
    1540,
    560
  ],
  "parameters": {
    "url": "=https://api.elevenlabs.io/v1/text-to-speech/{{ $('Set ElevenLabs voice ID and text').item.json.voice_id }}",
    "method": "POST",
    "options": {},
    "jsonBody": "={\"text\":\"{{ $json[\"text\"].replaceAll('\"', '\\\\\"').trim() }}\",\"model_id\":\"eleven_multilingual_v2\",\"voice_settings\":{\"stability\":0.5,\"similarity_boost\":0.5}}",
    "sendBody": true,
    "sendQuery": true,
    "sendHeaders": true,
    "specifyBody": "json",
    "authentication": "genericCredentialType",
    "genericAuthType": "httpHeaderAuth",
    "queryParameters": {
      "parameters": [
        {
          "name": "optimize_streaming_latency",
          "value": "1"
        }
      ]
    },
    "headerParameters": {
      "parameters": [
        {
          "name": "accept",
          "value": "audio/mpeg"
        }
      ]
    }
  },
  "credentials": {
    "httpHeaderAuth": {
      "id": "OMni1VQQclVYOmeZ",
      "name": "ElevenLabs David"
    }
  },
  "typeVersion": 4.1
}

================ Node #5140 ================
{
  "id": "f8700266-5491-4ca7-b29a-3f5ec1e9b66f",
  "name": "Transcribe Audio",
  "type": "n8n-nodes-base.httpRequest",
  "position": [
    960,
    560
  ],
  "parameters": {
    "url": "https://api.openai.com/v1/audio/transcriptions",
    "method": "POST",
    "options": {},
    "sendBody": true,
    "contentType": "multipart-form-data",
    "authentication": "predefinedCredentialType",
    "bodyParameters": {
      "parameters": [
        {
          "name": "file",
          "parameterType": "formBinaryData",
          "inputDataFieldName": "data"
        },
        {
          "name": "model",
          "value": "whisper-1"
        }
      ]
    },
    "nodeCredentialType": "openAiApi"
  },
  "credentials": {
    "openAiApi": {
      "id": "VQtv7frm7eLiEDnd",
      "name": "OpenAi account 7"
    }
  },
  "typeVersion": 4.1
}

================ Node #5141 ================
{
  "id": "25630b45-3827-4ee0-a77e-c30cadefe999",
  "name": "Sticky Note2",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    449.2637232176971,
    319.7947500318393
  ],
  "parameters": {
    "color": 7,
    "width": 199.37543798209555,
    "height": 420.623805972039,
    "content": "1] In ElevenLabs, add a voice to your [voice lab](https://elevenlabs.io/voice-lab) and copy its ID. Open this node and add the ID there"
  },
  "typeVersion": 1
}

================ Node #5142 ================
{
  "id": "a41d2622-4476-44c2-bac6-212be237aa4b",
  "name": "Sticky Note3",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    680,
    320
  ],
  "parameters": {
    "color": 7,
    "width": 192.21792012722693,
    "height": 418.3754668433847,
    "content": "2] Get your ElevenLabs API key (click your name in the bottom-left of [ElevenLabs](https://elevenlabs.io/voice-lab) and choose \u2018profile\u2019)\n\nIn this node, create a new header auth cred. Set the name to `xi-api-key` and the value to your API key"
  },
  "typeVersion": 1
}

================ Node #5143 ================
{
  "id": "58143bb1-816f-4ff6-9cac-9ce7765e02be",
  "name": "Sticky Note4",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    920,
    320
  ],
  "parameters": {
    "color": 7,
    "width": 192.21792012722693,
    "height": 414.59045768149747,
    "content": "3] In the 'credential' field of this node, create a new OpenAI cred with your [OpenAI API key](https://platform.openai.com/api-keys)"
  },
  "typeVersion": 1
}

================ Node #5144 ================
{
  "id": "bd2ef5d2-c27d-45e4-a66e-a73168f94087",
  "name": "Sticky Note",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    160,
    273.1221160672591
  ],
  "parameters": {
    "color": 7,
    "width": 230.39134868652621,
    "height": 233.3354221029769,
    "content": "### About\nThis workflow takes some French text, and translates it into spoken audio.\n\nIt then transcribes that audio back into text, translates it into English and generates an audio file of the English text"
  },
  "typeVersion": 1
}

================ Node #5145 ================
{
  "id": "a1f207d4-dbed-4dfa-aad5-2b2f6e4e6271",
  "name": "Sticky Note1",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    440,
    272.42998167622557
  ],
  "parameters": {
    "color": 7,
    "width": 685.8541178336201,
    "height": 478.0993479050163,
    "content": "### Setup steps"
  },
  "typeVersion": 1
}

================ Node #5146 ================
{
  "id": "97b36168-7fa8-4a97-a6cc-c42496918c4c",
  "name": "Search Person in CRM",
  "type": "n8n-nodes-base.pipedrive",
  "position": [
    -880,
    400
  ],
  "parameters": {
    "term": "={{ $json.from.value[0].address }}",
    "limit": 1,
    "resource": "person",
    "operation": "search",
    "additionalFields": {
      "includeFields": ""
    }
  },
  "credentials": {
    "pipedriveApi": {
      "id": "MdJQDtRDHnpwuVYP",
      "name": "Pipedrive LinkedUp"
    }
  },
  "typeVersion": 1
}

================ Node #5147 ================
{
  "id": "2a17582b-9375-4a01-87d9-a50f573b83db",
  "name": "In campaign?",
  "type": "n8n-nodes-base.if",
  "position": [
    -420,
    400
  ],
  "parameters": {
    "conditions": {
      "string": [
        {
          "value1": "={{ $json.in_campaign }}",
          "value2": "True"
        }
      ]
    }
  },
  "typeVersion": 1
}

================ Node #5148 ================
{
  "id": "2a8d509f-8ac2-4f45-a905-f34552833381",
  "name": "Get person from CRM",
  "type": "n8n-nodes-base.pipedrive",
  "position": [
    -640,
    400
  ],
  "parameters": {
    "personId": "={{ $json.id }}",
    "resource": "person",
    "operation": "get",
    "resolveProperties": true
  },
  "credentials": {
    "pipedriveApi": {
      "id": "MdJQDtRDHnpwuVYP",
      "name": "Pipedrive LinkedUp"
    }
  },
  "typeVersion": 1
}

================ Node #5149 ================
{
  "id": "b9c6f3d3-1a6d-4144-8e77-3a3c6e5282d8",
  "name": "Is interested?",
  "type": "n8n-nodes-base.openAi",
  "position": [
    -180,
    380
  ],
  "parameters": {
    "model": "gpt-4",
    "prompt": {
      "messages": [
        {
          "content": "=You are the best sales development representative in the world. You send cold email messages daily to CEOs and founders of companies. You do this to persuade them to make contact. This could be a phone call or a video meeting. \n\nYour task is to assess whether someone is interested in meeting up or calling sometime. You do this by attentively evaluating their response.\n\nThis is the email:\n{{ $('Get email').item.json.text }}\n\nThe response format should be:\n{\"interested\": [yes/no],\n\"reason\": reason\n}\n\nJSON:"
        }
      ]
    },
    "options": {},
    "resource": "chat"
  },
  "credentials": {
    "openAiApi": {
      "id": "qPBzqgpCRxncJ90K",
      "name": "OpenAi account 2"
    }
  },
  "typeVersion": 1
}

================ Node #5150 ================
{
  "id": "f1eb438d-f002-4082-8481-51565df13f5c",
  "name": "Get email",
  "type": "n8n-nodes-base.set",
  "position": [
    -1100,
    400
  ],
  "parameters": {
    "fields": {
      "values": [
        {
          "name": "email",
          "stringValue": "={{ $json.text }}"
        }
      ]
    },
    "options": {}
  },
  "typeVersion": 3.2
}

================ Node #5151 ================
{
  "id": "78461c36-ba54-4f0f-a38e-183bfafa576c",
  "name": "Create deal in CRM",
  "type": "n8n-nodes-base.pipedrive",
  "position": [
    460,
    360
  ],
  "parameters": {
    "title": "={{ $('Get person from CRM').item.json.Name }} Deal",
    "additionalFields": {}
  },
  "credentials": {
    "pipedriveApi": {
      "id": "MdJQDtRDHnpwuVYP",
      "name": "Pipedrive LinkedUp"
    }
  },
  "typeVersion": 1
}

================ Node #5152 ================
{
  "id": "efe07661-9afc-4184-b558-e1f547b6721f",
  "name": "IF interested",
  "type": "n8n-nodes-base.if",
  "position": [
    240,
    380
  ],
  "parameters": {
    "conditions": {
      "string": [
        {
          "value1": "={{ $json.interested }}",
          "value2": "yes"
        }
      ]
    }
  },
  "typeVersion": 1
}

================ Node #5153 ================
{
  "id": "7c2b7b59-9d68-4d8c-9b9f-a36ea47526c9",
  "name": "Get response",
  "type": "n8n-nodes-base.code",
  "position": [
    20,
    380
  ],
  "parameters": {
    "mode": "runOnceForEachItem",
    "jsCode": "let interested = JSON.parse($json[\"message\"][\"content\"]).interested\nlet reason = JSON.parse($json[\"message\"][\"content\"]).reason\n\nreturn {json:{\n interested: interested,\n reason: reason\n}}"
  },
  "typeVersion": 1
}

================ Node #5154 ================
{
  "id": "53f51f8c-5995-4bcd-a038-3018834942e6",
  "name": "Email box 1",
  "type": "n8n-nodes-base.gmailTrigger",
  "position": [
    -1300,
    400
  ],
  "parameters": {
    "simple": false,
    "filters": {
      "labelIds": []
    },
    "options": {},
    "pollTimes": {
      "item": [
        {
          "mode": "everyMinute"
        }
      ]
    }
  },
  "typeVersion": 1
}

================ Node #5155 ================
{
  "id": "bb1254ec-676a-4edc-bf4a-a1c66bac78bb",
  "name": "Sticky Note",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    -1880,
    360
  ],
  "parameters": {
    "width": 452.37174177689576,
    "height": 462.1804790107177,
    "content": "## About the workflow\nThe workflow reads every reply that is received from a cold email campaign and qualifies if the lead is interested in a meeting. If the lead is interested, a deal is made in pipedrive. You can add as many email inboxes as you need!\n\n## Setup:\n- Add credentials to the Gmail, OpenAI and Pipedrive Nodes.\n- Add a in_campaign field in Pipedrive for persons. In Pipedrive click on your credentials at the top right, go to company settings > Data fields > Person and click on add custom field. Single option [TRUE/FALSE].\n- If you have only one email inbox, you can delete one of the Gmail nodes.\n- If you have more than two email inboxes, you can duplicate a Gmail node as many times as you like. Just connect it to the Get email node, and you are good to go!\n- In the Gmail inbox nodes, select Inbox under label names and uncheck Simplify."
  },
  "typeVersion": 1
}

================ Node #5156 ================
{
  "id": "c1aaee97-11f4-4e9d-9a71-90ca3f5773a9",
  "name": "Email box 2",
  "type": "n8n-nodes-base.gmailTrigger",
  "position": [
    -1300,
    600
  ],
  "parameters": {
    "simple": false,
    "filters": {
      "labelIds": []
    },
    "options": {},
    "pollTimes": {
      "item": [
        {
          "mode": "everyMinute"
        }
      ]
    }
  },
  "typeVersion": 1
}

================ Node #5157 ================
{
  "id": "d15e7634-408b-43c5-a8d6-afcbc83479a9",
  "name": "On new manual Chat Message",
  "type": "@n8n/n8n-nodes-langchain.manualChatTrigger",
  "position": [
    600,
    300
  ],
  "parameters": {},
  "typeVersion": 1.1
}

================ Node #5158 ================
{
  "id": "5d9ad043-adbe-4970-aa4e-b81dfcb9e255",
  "name": "OpenAI Assistant",
  "type": "@n8n/n8n-nodes-langchain.openAiAssistant",
  "position": [
    820,
    300
  ],
  "parameters": {
    "options": {},
    "assistantId": "asst_BWy0154vMGMdrX7MjCYaYv6a"
  },
  "credentials": {
    "openAiApi": {
      "id": "au6fQZN7it62DWlS",
      "name": "OpenAi account"
    }
  },
  "typeVersion": 1
}

================ Node #5159 ================
{
  "id": "0c3aded2-886d-4c9f-8d6e-2729f12b6711",
  "name": "Execute Workflow Trigger",
  "type": "n8n-nodes-base.executeWorkflowTrigger",
  "position": [
    600,
    960
  ],
  "parameters": {},
  "typeVersion": 1
}

================ Node #5160 ================
{
  "id": "c77010ac-82e6-40f2-92c4-c360d276b896",
  "name": "Mapping data",
  "type": "n8n-nodes-base.code",
  "position": [
    1080,
    820
  ],
  "parameters": {
    "jsCode": "return [\n {\n \"country\": \"Wakanda\",\n \"capital\": \"Birnin Zana\"\n },\n {\n \"country\": \"Narnia\",\n \"capital\": \"Cair Paravel\"\n },\n {\n \"country\": \"Gondor\",\n \"capital\": \"Minas Tirith\"\n },\n {\n \"country\": \"Oz\",\n \"capital\": \"The Emerald City\"\n },\n {\n \"country\": \"Westeros\",\n \"capital\": \"King's Landing\"\n },\n {\n \"country\": \"Panem\",\n \"capital\": \"The Capitol\"\n },\n {\n \"country\": \"Ruritania\",\n \"capital\": \"Strelsau\"\n },\n {\n \"country\": \"Mordor\",\n \"capital\": \"Barad-d\u00fbr\"\n },\n {\n \"country\": \"Latveria\",\n \"capital\": \"Doomstadt\"\n },\n {\n \"country\": \"Atlantis\",\n \"capital\": \"Poseidonis\"\n }\n]\n"
  },
  "typeVersion": 2
}

================ Node #5161 ================
{
  "id": "3949d5d8-a8d6-4a21-8e34-fca558ee6a97",
  "name": "List countries?",
  "type": "n8n-nodes-base.if",
  "position": [
    840,
    960
  ],
  "parameters": {
    "conditions": {
      "string": [
        {
          "value1": "={{ $json.query }}",
          "value2": "list"
        }
      ]
    }
  },
  "executeOnce": false,
  "typeVersion": 1
}

================ Node #5162 ================
{
  "id": "23bd1672-f736-4ac0-abf6-65f5f6aeabac",
  "name": "Mapping data1",
  "type": "n8n-nodes-base.code",
  "position": [
    840,
    1160
  ],
  "parameters": {
    "jsCode": "return [\n {\n \"country\": \"Wakanda\",\n \"capital\": \"Birnin Zana\"\n },\n {\n \"country\": \"Narnia\",\n \"capital\": \"Cair Paravel\"\n },\n {\n \"country\": \"Gondor\",\n \"capital\": \"Minas Tirith\"\n },\n {\n \"country\": \"Oz\",\n \"capital\": \"The Emerald City\"\n },\n {\n \"country\": \"Westeros\",\n \"capital\": \"King's Landing\"\n },\n {\n \"country\": \"Panem\",\n \"capital\": \"The Capitol\"\n },\n {\n \"country\": \"Ruritania\",\n \"capital\": \"Strelsau\"\n },\n {\n \"country\": \"Mordor\",\n \"capital\": \"Barad-d\u00fbr\"\n },\n {\n \"country\": \"Latveria\",\n \"capital\": \"Doomstadt\"\n },\n {\n \"country\": \"Atlantis\",\n \"capital\": \"Poseidonis\"\n }\n]\n"
  },
  "typeVersion": 2
}

================ Node #5163 ================
{
  "id": "ec16de2b-7945-4133-a73d-11d4e42355c2",
  "name": "Sticky Note",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    540,
    741.6494845360827
  ],
  "parameters": {
    "width": 1174.6162657502882,
    "height": 578.9520146851776,
    "content": "## Sub-workflow: Return the capitals of fictional countries\nIt can either list the countries it knows about or return the capital of a specific country"
  },
  "typeVersion": 1
}

================ Node #5164 ================
{
  "id": "65e659a0-6e1b-4642-b263-59ed2e284ee8",
  "name": "Return country list",
  "type": "n8n-nodes-base.set",
  "position": [
    1520,
    820
  ],
  "parameters": {
    "fields": {
      "values": [
        {
          "name": "response",
          "stringValue": "={{ $json.concatenated_country }}"
        }
      ]
    },
    "include": "none",
    "options": {}
  },
  "typeVersion": 3.2
}

================ Node #5165 ================
{
  "id": "65fc898d-0361-461a-9055-9e29bf310336",
  "name": "Return specific capital",
  "type": "n8n-nodes-base.set",
  "position": [
    1520,
    1060
  ],
  "parameters": {
    "fields": {
      "values": [
        {
          "name": "response",
          "stringValue": "={{ $ifEmpty($json.capital, 'Capital not found') }}"
        }
      ]
    },
    "include": "none",
    "options": {}
  },
  "typeVersion": 3.2
}

================ Node #5166 ================
{
  "id": "bdf7c927-deb4-4a73-a015-43797c6cf816",
  "name": "Tool to call the workflow below",
  "type": "@n8n/n8n-nodes-langchain.toolWorkflow",
  "position": [
    880,
    540
  ],
  "parameters": {
    "name": "country_capitals_tool",
    "workflowId": "={{ $workflow.id }}",
    "description": "This tool has two modes:\n1. Pass 'list' to the tool to get a list of countries that the tool has the capitals for (one per line). This is useful if you can't find a match, to see if the country being asked about might have been misspelled.\n2. Pass one of the country names in the list to the tool to get the capital of that country. Note that the country must be spelled exactly as it is in the list of countries returned in mode 1"
  },
  "typeVersion": 1
}

================ Node #5167 ================
{
  "id": "4e93323f-d4be-4a49-be24-3f49db39907b",
  "name": "Concatenate country names",
  "type": "n8n-nodes-base.summarize",
  "position": [
    1300,
    820
  ],
  "parameters": {
    "options": {},
    "fieldsToSummarize": {
      "values": [
        {
          "field": "country",
          "separateBy": "\n",
          "aggregation": "concatenate"
        }
      ]
    }
  },
  "typeVersion": 1
}

================ Node #5168 ================
{
  "id": "e2ec1eee-4bb2-4240-82cf-e109b87229eb",
  "name": "Get the matching country's details",
  "type": "n8n-nodes-base.merge",
  "position": [
    1080,
    1060
  ],
  "parameters": {
    "mode": "combine",
    "options": {},
    "joinMode": "enrichInput1",
    "mergeByFields": {
      "values": [
        {
          "field1": "query",
          "field2": "country"
        }
      ]
    }
  },
  "typeVersion": 2.1
}

================ Node #5169 ================
{
  "id": "ed2997be-c709-4eca-bcad-c987bbc160fc",
  "name": "Sticky Note1",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    540,
    200
  ],
  "parameters": {
    "width": 1168.2339341502545,
    "height": 487.70693675217734,
    "content": "## Main workflow: Chat with OpenAI Assistant\nClick the 'Chat' button at the bottom of the screen to try"
  },
  "typeVersion": 1
}

================ Node #5170 ================
{
  "id": "01ab30c3-3951-4652-b706-72af1cad4f22",
  "name": "Tool: Get current date and time",
  "type": "@n8n/n8n-nodes-langchain.toolCode",
  "position": [
    1080,
    540
  ],
  "parameters": {
    "name": "date_tool",
    "jsCode": "let now = DateTime.now()\nreturn now.toISO()",
    "description": "Call this tool to get the current timestamp (in ISO format). No parameters necessary"
  },
  "typeVersion": 1
}

================ Node #5171 ================
{
  "id": "4ea39a4f-d8c1-438f-9738-bfbb906a3d7a",
  "name": "Sticky Note2",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    1200,
    1020
  ],
  "parameters": {
    "width": 253,
    "height": 342,
    "content": "## Send customer feedback to OpenAI for sentiment analysis"
  },
  "typeVersion": 1
}

================ Node #5172 ================
{
  "id": "6962ea41-7d15-4932-919f-21ac94fa1269",
  "name": "Sticky Note3",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    1960,
    1180
  ],
  "parameters": {
    "width": 253,
    "height": 342,
    "content": "## Add new feedback to google sheets"
  },
  "typeVersion": 1
}

================ Node #5173 ================
{
  "id": "4c8a8984-2d8e-4139-866b-6f3536aced07",
  "name": "Sticky Note4",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    800,
    1600
  ],
  "parameters": {
    "width": 1407,
    "height": 254,
    "content": "## Instructions\n1. Connect Google sheets\n2. Connect your OpenAi account (api key + org Id)\n3. Create a customer feedback form, use an existing one or use the one below as example. \nAll set!\n\n\n- Here is the example google sheet being used in this workflow: https://docs.google.com/spreadsheets/d/1omWdRbiT6z6GNZ6JClu9gEsRhPQ6J0EJ2yXyFH9Zng4/edit?usp=sharing. You can download it to your account."
  },
  "typeVersion": 1
}

================ Node #5174 ================
{
  "id": "d43a9574-626d-4817-87ba-d99bdd6f41dc",
  "name": "Sticky Note5",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    800,
    1160
  ],
  "parameters": {
    "width": 253,
    "height": 342,
    "content": "## Feedback form is submitted"
  },
  "typeVersion": 1
}

================ Node #5175 ================
{
  "id": "76dab2dc-935f-416e-91aa-5a1b7017ec1b",
  "name": "Sticky Note6",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    1600,
    1180
  ],
  "parameters": {
    "width": 253,
    "height": 342,
    "content": "## Merge form data and OpenAI result"
  },
  "typeVersion": 1
}

================ Node #5176 ================
{
  "id": "9772eac1-8df2-4305-9b2c-265d3c5a9a4a",
  "name": "Add customer feedback to Google Sheets",
  "type": "n8n-nodes-base.googleSheets",
  "position": [
    2020,
    1320
  ],
  "parameters": {
    "columns": {
      "value": {
        "Category": "={{ $json['What is your feedback about?'] }}",
        "Sentiment": "={{ $json.text }}",
        "Timestamp": "={{ $json.submittedAt }}",
        "Entered by": "=Form",
        "Customer Name": "={{ $json.Name }}",
        "Customer contact": "={{ $json['How do we get in touch with you?'] }}",
        "Customer Feedback": "={{ $json['Your feedback'] }}"
      },
      "schema": [
        {
          "id": "Timestamp",
          "type": "string",
          "display": true,
          "required": false,
          "displayName": "Timestamp",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "Category",
          "type": "string",
          "display": true,
          "required": false,
          "displayName": "Category",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "Customer Feedback",
          "type": "string",
          "display": true,
          "required": false,
          "displayName": "Customer Feedback",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "Customer Name",
          "type": "string",
          "display": true,
          "required": false,
          "displayName": "Customer Name",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "Customer contact",
          "type": "string",
          "display": true,
          "required": false,
          "displayName": "Customer contact",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "Entered by",
          "type": "string",
          "display": true,
          "required": false,
          "displayName": "Entered by",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "Urgent?",
          "type": "string",
          "display": true,
          "required": false,
          "displayName": "Urgent?",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "Sentiment",
          "type": "string",
          "display": true,
          "required": false,
          "displayName": "Sentiment",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        }
      ],
      "mappingMode": "defineBelow",
      "matchingColumns": []
    },
    "options": {},
    "operation": "append",
    "sheetName": {
      "__rl": true,
      "mode": "list",
      "value": "gid=0",
      "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1omWdRbiT6z6GNZ6JClu9gEsRhPQ6J0EJ2yXyFH9Zng4/edit#gid=0",
      "cachedResultName": "Sheet1"
    },
    "documentId": {
      "__rl": true,
      "mode": "list",
      "value": "1omWdRbiT6z6GNZ6JClu9gEsRhPQ6J0EJ2yXyFH9Zng4",
      "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1omWdRbiT6z6GNZ6JClu9gEsRhPQ6J0EJ2yXyFH9Zng4/edit?usp=drivesdk",
      "cachedResultName": "CustomerFeedback"
    }
  },
  "credentials": {
    "googleSheetsOAuth2Api": {
      "id": "3",
      "name": "Google Sheets account"
    }
  },
  "typeVersion": 4.1
}

================ Node #5177 ================
{
  "id": "12084971-c81b-4a0e-814e-120867562642",
  "name": "Merge sentiment with form content",
  "type": "n8n-nodes-base.merge",
  "position": [
    1680,
    1320
  ],
  "parameters": {
    "mode": "combine",
    "options": {},
    "combinationMode": "multiplex"
  },
  "typeVersion": 2.1
}

================ Node #5178 ================
{
  "id": "235edf5b-7724-4712-8dc5-d8327a0620b8",
  "name": "Classify feedback with OpenAI",
  "type": "n8n-nodes-base.openAi",
  "position": [
    1280,
    1180
  ],
  "parameters": {
    "prompt": "=Classify the sentiment in the following customer feedback: {{ $json['Your feedback'] }}",
    "options": {}
  },
  "credentials": {
    "openAiApi": {
      "id": "s2iucY0IctjYNbrb",
      "name": "OpenAi account"
    }
  },
  "typeVersion": 1
}

================ Node #5179 ================
{
  "id": "af4b22aa-0925-40b1-a9ac-298f9745a98e",
  "name": "Submit form with customer feedback",
  "type": "n8n-nodes-base.formTrigger",
  "position": [
    860,
    1340
  ],
  "webhookId": "e7bf682e-48e8-40de-9815-cd180cdd1480",
  "parameters": {
    "options": {
      "formSubmittedText": "Your response has been recorded"
    },
    "formTitle": "Customer Feedback",
    "formFields": {
      "values": [
        {
          "fieldLabel": "Name",
          "requiredField": true
        },
        {
          "fieldType": "dropdown",
          "fieldLabel": "What is your feedback about?",
          "fieldOptions": {
            "values": [
              {
                "option": "Product"
              },
              {
                "option": "Service"
              },
              {
                "option": "Other"
              }
            ]
          },
          "requiredField": true
        },
        {
          "fieldType": "textarea",
          "fieldLabel": "Your feedback",
          "requiredField": true
        },
        {
          "fieldLabel": "How do we get in touch with you?"
        }
      ]
    },
    "formDescription": "Please give feedback about our company orproducts."
  },
  "typeVersion": 1
}

================ Node #5180 ================
{
  "id": "5b43e57d-1fe1-4ea6-bf3d-661f7e5fc4b0",
  "name": "When clicking \"Execute Workflow\"",
  "type": "n8n-nodes-base.manualTrigger",
  "position": [
    960,
    240
  ],
  "parameters": {},
  "typeVersion": 1
}

================ Node #5181 ================
{
  "id": "291466e8-1592-4080-a675-5e9f486d0d05",
  "name": "OpenAI",
  "type": "n8n-nodes-base.openAi",
  "position": [
    1160,
    240
  ],
  "parameters": {
    "model": "gpt-4",
    "prompt": {
      "messages": [
        {
          "content": "=please create a list of 10 random users. Return back ONLY a JSON array. Character names of famous fiction characters. Make Names and Surnames start with the same letter. Name and Surname can be from different characters. If subscribed is false then make date_subscribed empty. If date_subscribed is not empty then make it random and no later then 2023-10-01. Make JSON in a single line, avoid line breaks. Here's an example: [{\"user_name\": \"Jack Jones\", \"user_email\":\"jackjo@yahoo.com\",\"subscribed\": true, \"date_subscribed\":\"2023-10-01\" },{\"user_name\": \"Martin Moor\", \"user_email\":\"mmoor@gmail.com\",\"subscribed\": false, \"date_subscribed\":\"\" }]"
        }
      ]
    },
    "options": {
      "n": 3,
      "maxTokens": 2500,
      "temperature": 1
    },
    "resource": "chat"
  },
  "credentials": {
    "openAiApi": {
      "id": "63",
      "name": "OpenAi account"
    }
  },
  "typeVersion": 1
}

================ Node #5182 ================
{
  "id": "edd5bed7-a8a1-4298-b026-3b0061c5064a",
  "name": "Split In Batches",
  "type": "n8n-nodes-base.splitInBatches",
  "position": [
    1340,
    240
  ],
  "parameters": {
    "options": {},
    "batchSize": 1
  },
  "typeVersion": 2
}

================ Node #5183 ================
{
  "id": "f0e414e6-741a-42db-86eb-ba95e220f9ef",
  "name": "Sticky Note",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    940,
    80
  ],
  "parameters": {
    "width": 600,
    "height": 126,
    "content": "## This is a helper workflow to create 3 CSV files\n### Feel free to adapt as needed\n### Some mock data from GPT is pinned for convenience"
  },
  "typeVersion": 1
}

================ Node #5184 ================
{
  "id": "f1c2891f-5110-423c-9fb4-37e0a0d0f750",
  "name": "Parse JSON",
  "type": "n8n-nodes-base.set",
  "position": [
    1520,
    240
  ],
  "parameters": {
    "fields": {
      "values": [
        {
          "name": "content",
          "type": "arrayValue",
          "arrayValue": "={{JSON.parse($json.message.content)}}"
        }
      ]
    },
    "include": "none",
    "options": {}
  },
  "typeVersion": 3
}

================ Node #5185 ================
{
  "id": "ce59d3e1-3916-48ad-a811-fa19ad66284a",
  "name": "Make JSON Table",
  "type": "n8n-nodes-base.itemLists",
  "position": [
    1700,
    240
  ],
  "parameters": {
    "options": {},
    "fieldToSplitOut": "content"
  },
  "typeVersion": 3
}

================ Node #5186 ================
{
  "id": "8b1fda14-6593-4cc2-ab74-483b7aa4d84a",
  "name": "Convert to CSV",
  "type": "n8n-nodes-base.spreadsheetFile",
  "position": [
    1880,
    240
  ],
  "parameters": {
    "options": {
      "fileName": "=funny_names_{{ $('Split In Batches').item.json.index+1 }}.{{ $parameter[\"fileFormat\"] }}",
      "headerRow": true
    },
    "operation": "toFile",
    "fileFormat": "csv"
  },
  "typeVersion": 2
}

================ Node #5187 ================
{
  "id": "d2a621e0-88df-4642-91ab-772f062c8682",
  "name": "Save to Disk",
  "type": "n8n-nodes-base.writeBinaryFile",
  "position": [
    2420,
    240
  ],
  "parameters": {
    "options": {},
    "fileName": "=./.n8n/{{ $binary.data.fileName }}"
  },
  "typeVersion": 1
}

================ Node #5188 ================
{
  "id": "20f60bb0-0527-44c4-85d5-a95c20670893",
  "name": "Strip UTF BOM bytes",
  "type": "n8n-nodes-base.moveBinaryData",
  "position": [
    2060,
    240
  ],
  "parameters": {
    "options": {
      "encoding": "utf8",
      "stripBOM": true,
      "jsonParse": false,
      "keepSource": false
    },
    "setAllData": false
  },
  "typeVersion": 1
}

================ Node #5189 ================
{
  "id": "bda91493-df5d-4b8c-b739-abca6045faf9",
  "name": "Create valid binary",
  "type": "n8n-nodes-base.moveBinaryData",
  "position": [
    2240,
    240
  ],
  "parameters": {
    "mode": "jsonToBinary",
    "options": {
      "addBOM": false,
      "encoding": "utf8",
      "fileName": "=funny_names_{{ $('Split In Batches').item.json.index+1 }}.{{ $('Convert to CSV').first().binary.data.fileExtension }}",
      "mimeType": "text/csv",
      "keepSource": false,
      "useRawData": true
    },
    "convertAllData": false
  },
  "typeVersion": 1
}

================ Node #5190 ================
{
  "id": "e1b54e0d-56a5-43e7-82b4-aaead2875a9d",
  "name": "Sticky Note1",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    2007,
    140
  ],
  "parameters": {
    "width": 394,
    "height": 254,
    "content": "### These 2 nodes fix an issue with BOM bytes in the beginning of the file.\nWithout them reading the CSV file back becomes tricky"
  },
  "typeVersion": 1
}

================ Node #5191 ================
{
  "id": "efdc3050-6c68-4419-9f12-f37d6fefb276",
  "name": "When clicking \"Execute Workflow\"",
  "type": "n8n-nodes-base.manualTrigger",
  "position": [
    460,
    200
  ],
  "parameters": {},
  "typeVersion": 1
}

================ Node #5192 ================
{
  "id": "e0edb9ab-c59f-4d34-983d-861bb2df4f01",
  "name": "Workflow Retriever",
  "type": "@n8n/n8n-nodes-langchain.retrieverWorkflow",
  "position": [
    1120,
    440
  ],
  "parameters": {
    "workflowId": "QacfBRBnf1xOyckC"
  },
  "typeVersion": 1
}

================ Node #5193 ================
{
  "id": "ba47dd13-67d0-499a-b9a2-16928099efce",
  "name": "Retrieval QA Chain2",
  "type": "@n8n/n8n-nodes-langchain.chainRetrievalQa",
  "position": [
    900,
    200
  ],
  "parameters": {},
  "typeVersion": 1
}

================ Node #5194 ================
{
  "id": "f6d16571-0573-4860-aed9-611f93b050ad",
  "name": "OpenAI Chat Model",
  "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
  "position": [
    800,
    480
  ],
  "parameters": {
    "options": {}
  },
  "credentials": {
    "openAiApi": {
      "id": "4jRB4A20cPycBqP5",
      "name": "OpenAI account - n8n"
    }
  },
  "typeVersion": 1
}

================ Node #5195 ================
{
  "id": "4fd00751-3db0-489b-8c7f-4ee0fb32fb51",
  "name": "Example Prompt",
  "type": "n8n-nodes-base.set",
  "position": [
    680,
    200
  ],
  "parameters": {
    "fields": {
      "values": [
        {
          "name": "input",
          "stringValue": "What notes can you find for Jay Gatsby and what is his email address?"
        }
      ]
    },
    "options": {}
  },
  "typeVersion": 3
}

================ Node #5196 ================
{
  "id": "732b6277-cb4d-4586-ab95-778ac9473fe5",
  "name": "Sticky Note",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    860,
    140
  ],
  "parameters": {
    "width": 363,
    "height": 211.90203341144422,
    "content": "### Q&A on data returned from a workflow"
  },
  "typeVersion": 1
}

================ Node #5197 ================
{
  "id": "f09583a3-78e3-4888-8251-2148ffb7ab18",
  "name": "Sticky Note1",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    1040,
    400
  ],
  "parameters": {
    "width": 262.67019427016413,
    "height": 255.8330939602389,
    "content": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nReplace \"Workflow ID\" with the ID the Subworkflow got saved as"
  },
  "typeVersion": 1
}

================ Node #5198 ================
{
  "id": "3d669ba2-65b7-4502-92d9-645c4e51b26d",
  "name": "When clicking \"Execute Workflow\"",
  "type": "n8n-nodes-base.manualTrigger",
  "position": [
    380,
    240
  ],
  "parameters": {},
  "typeVersion": 1
}

================ Node #5199 ================
{
  "id": "9a509299-746d-4a3f-b379-8a4a9a92c75a",
  "name": "Prompt",
  "type": "n8n-nodes-base.set",
  "position": [
    600,
    240
  ],
  "parameters": {
    "values": {
      "string": [
        {
          "name": "input",
          "value": "Return the 5 largest states by area in the USA with their 3 largest cities and their population."
        }
      ]
    },
    "options": {}
  },
  "typeVersion": 2
}

================ Node #5200 ================
{
  "id": "e2092fe6-d803-43e9-b2df-b0fc7aa83b02",
  "name": "LLM Chain",
  "type": "@n8n/n8n-nodes-langchain.chainLlm",
  "position": [
    1060,
    240
  ],
  "parameters": {},
  "typeVersion": 1
}

================ Node #5201 ================
{
  "id": "711734d0-1003-4639-bdee-c160f6f976b3",
  "name": "Structured Output Parser",
  "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
  "position": [
    1560,
    900
  ],
  "parameters": {
    "jsonSchema": "{\n \"type\": \"object\",\n \"properties\": {\n \"state\": {\n \"type\": \"string\"\n },\n \"cities\": {\n \"type\": \"array\",\n \"items\": {\n \"type\": \"object\",\n \"properties\": {\n \"name\": \"string\",\n \"population\": \"number\"\n }\n }\n }\n }\n}"
  },
  "typeVersion": 1
}

================ Node #5202 ================
{
  "id": "f9b782f8-bb7b-4d65-be0d-d65c11de03d2",
  "name": "Auto-fixing Output Parser",
  "type": "@n8n/n8n-nodes-langchain.outputParserAutofixing",
  "position": [
    1260,
    540
  ],
  "parameters": {},
  "typeVersion": 1
}

================ Node #5203 ================
{
  "id": "a26f034e-ea19-47ba-8fef-4f0a0d447c01",
  "name": "Sticky Note",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    1480,
    795
  ],
  "parameters": {
    "height": 264.69900963477494,
    "content": "### Parser which defines the output format and which gets used to validate the output"
  },
  "typeVersion": 1
}

================ Node #5204 ================
{
  "id": "d902971a-e304-449c-a933-900c9c49ce55",
  "name": "Sticky Note1",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    1080,
    792
  ],
  "parameters": {
    "height": 266.9506012398238,
    "content": "### The LLM which gets used to try to autofix the output in case it was not valid"
  },
  "typeVersion": 1
}

================ Node #5205 ================
{
  "id": "b4c3b935-61b1-4243-b7df-ba4b7fd6e3ce",
  "name": "Sticky Note2",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    920,
    440
  ],
  "parameters": {
    "height": 245.56048099185898,
    "content": "### The LLM to process the original prompt"
  },
  "typeVersion": 1
}

================ Node #5206 ================
{
  "id": "916d2998-cf0e-40f9-a373-149c609ed229",
  "name": "Sticky Note3",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    1200,
    449
  ],
  "parameters": {
    "width": 348.0763970423483,
    "height": 233.17672716408998,
    "content": "### Autofixing parser which tries to fix invalid outputs with the help of an LLM"
  },
  "typeVersion": 1
}

================ Node #5207 ================
{
  "id": "5cabf993-6bdd-4401-bb6d-fa20ff703127",
  "name": "OpenAI Chat Model",
  "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
  "position": [
    980,
    540
  ],
  "parameters": {
    "options": {
      "temperature": 0
    }
  },
  "credentials": {
    "openAiApi": {
      "id": "wJtZwsVKW5v6R2Iy",
      "name": "OpenAi account 2"
    }
  },
  "typeVersion": 1
}

================ Node #5208 ================
{
  "id": "7f666edb-ecb7-4a6d-9dc7-ba67ef41d71f",
  "name": "OpenAI Chat Model1",
  "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
  "position": [
    1140,
    900
  ],
  "parameters": {
    "options": {
      "temperature": 0
    }
  },
  "credentials": {
    "openAiApi": {
      "id": "wJtZwsVKW5v6R2Iy",
      "name": "OpenAi account 2"
    }
  },
  "typeVersion": 1
}

================ Node #5209 ================
{
  "id": "48bf1045-cfc1-4b37-9cce-86634bd97480",
  "name": "When clicking \"Execute Workflow\"",
  "type": "n8n-nodes-base.manualTrigger",
  "position": [
    -420,
    580
  ],
  "parameters": {},
  "typeVersion": 1
}

================ Node #5210 ================
{
  "id": "75f2e528-e5fe-4508-b98f-e1f71f803e60",
  "name": "Podcast Episode Transcript",
  "type": "n8n-nodes-base.code",
  "position": [
    -220,
    580
  ],
  "parameters": {
    "jsCode": "return { transcript: `So throughout the last couple episodes we\u2019ve been doing on the philosophy of mind\u2026there\u2019s been an IDEA that we\u2019ve referenced MULTIPLE TIMES\u2026 and really just glossed over it as something, that\u2019s PRACTICALLY self evident. \n\n\n\nThe idea\u2026 is that when we THINK about consciousness\u2026 we can SPLIT it into two different types\u2026there\u2019s ACCESS consciousness on the one hand\u2026 and PHENOMENAL consciousness on the other. This is what we\u2019ve been saying. \n\n\n\nWhen it comes to ACCESS consciousness\u2026that\u2019s stuff we CAN explain with neuroscience things like memories, information processing, our field of visual awareness\u2026we can CLEARLY EXPLAIN a bit about how all THAT stuff works.\n\n\n\nBut in this conversation so far, what KEEPS on being said\u2026 is that what we CAN\u2019T SEEM to explain\u2026is PHENOMENAL consciousness\u2026you know, the subjective experience, that UNDERLIES conscious thought. That it FEELS like something to be me. There\u2019s this idea\u2026that this phenomenal consciousness is something separate\u2026something fundamental, something in a category ALL IT\u2019S OWN\u2026 that needs to be explained. You can explain a lot of stuff about access consciousness\u2026but you can\u2019t explain PHENOMENAL consciousness. \n\n\n\nBut if you were a good materialist listening to the discussions on this series so far\u2026and you\u2019re sitting in the back of the room, being SUPER PATIENT, NOT SAYING ANYTHING trying to be respectful to all the other ideas being presented\u2026maybe there\u2019s a part of you so far that\u2019s just been BOILING inside, because you\u2019re waiting for the part of the show where we\u2019re ACTUALLY going to call that GIANT assumption that\u2019s being made into question. \n\n\n\nBecause a materialist might say, SURE\u2026phenomenal consciousness is PRETTY mysterious and all. But DOES that necessarily mean that it\u2019s something that NEEDS a further explanation? \n\n\n\nThis is a good question. What is the difference\u2026 between EXPLAINING ALL of the component PARTS of our subjective experience again the thoughts, memories, information processing\u2026what\u2019s the difference between explaining all that and explaining phenomenal consciousness\u2026 in itself? Like what does that even mean?\n\n\n\nThat\u2019s kinda like you saying\u2026well\u2026 you can EXPLAIN the delicious waffle cone. You can EXPLAIN the creamy chocolatey goodness inside, you can EXPLAIN the RAINBOW colored SPRINKLES. But you CAN\u2019T explain the ICE CREAM CONE\u2026in ITSELF, now can you? \n\n\n\nI mean at a CERTAIN point what are we even talking about anymore? IS phenomenal consciousness REALLY something that\u2019s ENTIRELY SEPARATE that needs to be explained? \n\n\n\nMaybe, it DOESN\u2019T need to be explained. Maybe phenomenal consciousness is less a thing in itself\u2026and MORE a sort of ATTRIBUTION we make\u2026 about a particular INTERSECTION of those component parts that we CAN study and explain. \n\n\n\nNow obviously there\u2019s a bit to clarify there\u2026 and going over some popular arguments as to why that might be the case will take a good portion of the episode here today. But maybe a good place to start is to ask the question\u2026if the hard problem of consciousness is to be able to explain why it FEELS like something to be me\u2026and your SOLUTION to that is that maybe we don\u2019t even need to explain that. One thing you\u2019re gonna HAVE to explain no matter what\u2026 is why it SEEMS to MOST people living in today\u2019s world\u2026that phenomenal consciousness IS something that needs to be explained. \n\n\n\nRight before we began this series we did an episode on Susan Sontag and the power of the metaphors we casually use in conversations. And we talked about how these metaphors ACTUALLY go on to have a pretty huge impact on the way we contextualize the things in our lives. \n\n\n\nWell the philosopher Susan Blackmore, and apparently\u2026 I ONLY cover female philosophers by the name of Susan or Simone on this show\u2026but anyway SUSAN BLACKMORE, huge player in these modern conversations about the mysteries of consciousness\u2026and she thinks that if it\u2019s DIFFICULT for someone to wrap their brain around the idea that phenomenal consciousness is NOT something that is conceptually distinct\u2026it MAY BE because of the METAPHORS about consciousness that we use in everyday conversation that are directing the way you THINK about consciousness\u2026 into a particular lane that\u2019s incorrect. \n\n\n\nFor example, there\u2019s a way people think about consciousness\u2026 that\u2019s TRAGICALLY common in today\u2019s world\u2026it\u2019s become known as the Cartesian theater. So Cartesian obviously referring to Descartes. And when Descartes arrives at his substance dualism where the MIND is something ENTIRELY SEPARATE from the BODY\u2026this EVENT in the history of philosophy goes on to CHANGE the way that people start to see their conscious experience. They start to think\u2026 well what I am\u2026is I\u2019m this conscious creature, sort of perched up here inside of this head\u2026and I\u2019m essentially\u2026sitting in a theater, LOOKING OUT through a set of eyes which are kind of like the screen in a theater\u2026and on the screen what I SEE is the outside world. \n\n\n\nNow nobody ACTUALLY believes this is what is happening. Every person on this god forsaken planet KNOWS that there isn\u2019t a movie theater up in their heads. But hearing and using this metaphor DOES SHADE the way that they see their own conscious experience. The casual use of the metaphor\u2026 ALLOWS people to smuggle in assumptions about their subjective experience, that we REALLY have no evidence to be assuming. \n\n\n\nFor example, when the mind and body is totally separate\u2026maybe it becomes EASIER for people to believe that they\u2019re a SPIRIT that\u2019s INHABITING a body. Maybe it just makes it easier for people to VIEW their subjective, phenomenal consciousness as something SEPARATE from the body that needs to be explained in itself. WHATEVER IT IS though\u2026the point to Susan Blackmore is that metaphors you use have an IMPACT on your intuitions about consciousness. And she thinks there\u2019s several OTHER examples that fall into the very same CATEGORY as the Cartesian Theater. \n\n\n\nHow about the idea that there\u2019s a unified, single, STREAM of consciousness that you\u2019re experiencing. The STREAM being the metaphor there. Susan Blackmore asks is a SINGLE, unified STREAM, REALLY the way that you experience your conscious thought? Like when you REALLY pay attention is that how you\u2019re existing?\n\n\n\nShe says most likely the only reason people SEE their consciousness in terms of a stream\u2026is because of the specific way that people are often asked to OBSERVE their own consciousness. There\u2019s a BIAS built into the way that we\u2019re checking in. How do people typically do it? Well they\u2019ll take a moment\u2026they\u2019ll stop what they\u2019re doing\u2026and they\u2019ll ask themselves: what does it feel like to be ME right now. They\u2019ll pay attention, they\u2019ll listen, they\u2019ll try to come up with an answer to the question\u2026and they\u2019ll realize that there\u2019s a PARTICULAR set of thoughts, feelings and perceptions that it FEELS like, to be YOU in THAT moment. \n\n\n\nBut then that person can wait for an hour\u2026come back later, and ask the very SAME QUESTION in a different moment: what does it feel like to be me right now\u2026and low and behold a totally DIFFERENT set of thoughts, feelings and perceptions come up. \n\n\n\nAnd then what we OFTEN DO as people at that point\u2026 is we FILL IN that empty space between those two moments with some ethereal STREAM of consciousness that we assume MUST HAVE existed between the two. \n\n\n\nBut at some OTHER level\u2026RATIONALLY we KNOW\u2026that for the whole time that we WEREN\u2019T doing this accounting of what it FEELS like to be me\u2026we KNOW that there were TONS of different unconscious meta-processes going on\u2026all doing their own things, sometimes interacting with each other, most of the time not. We KNOW that our EXPERIENCE of consciousness is just directing our attention to one PIECE of our mental activity or another\u2026 and that all those pieces of mental activity KEEP on operating whether we\u2019re FOCUSING on one of them or not. \n\n\n\nSo is there a specific LOCATION where there\u2019s some sort of collective STREAM where all of this stuff is bound together HOLISTICALLY? Is there ANY good reason to ASSUME that it NEEDS to BE that way? Could it be that the continuity of this mental activity is more of an ILLUSION\u2026 than it is a reality?\n\n\n\nAnd if this sounds impossible at first\u2026think of OTHER illusions that we KNOW go on in the brain. Think of how any SINGLE sector of the brain CREATES a similar sort of illusion. Memories. We KNOW that DIFFERENT parts of the brain are responsible for different types of memory. Semantic memory in the frontal cortex, episodic memory in the hippocampus, procedural memory in the cerebellum. ALL of these different areas work together in concert with each other, it\u2019s ALL seemingly unified. \n\n\n\nWhen someone cuts me off in traffic and I\u2019m choosing a reaction\u2026I don\u2019t CONSCIOUSLY, travel down to my cerebellum and say hey 200 million years ago how did my lizard grandfather react when a lizard cut him off in traffic\u2026no MULTIPLE different parts of the brain work together and create an ILLUSION of continuity. And the SAME thing goes for our VISUAL experience of the world. The SAME thing happens with our emotions. \n\n\n\nHere\u2019s Susan Blackmore saying: the traditional METAPHORS that we casually throw around about consciousness\u2026even with just a LITTLE bit of careful observation of your own experience\u2026being someone up in a theater in your head with a unified, continuous STREAM of your own consciousness\u2026this ISN\u2019T even how our experiences SEEM. \n\n\n\nNow it should be said if you were sufficiently COMMITTED to the process\u2026you could ABSOLUTELY carry on in life with a complete LACK of self awareness fueled by the METAPHORS of pop-psychology and MOVIES and TV shows, and you could DEFINITELY LIVE in a state of illusion about it. But that DOESN\u2019T make it right\u2026and what happens she asks when those METAPHORS go on to impact the way we conduct science or break things down philosophically? She says:\n\n\n\n\u201cNeuroscience and disciplined introspection give the same answer: there are multiple parallel processes with no clear distinction between conscious and unconscious ones. Consciousness is an attribution we make, not a property of only some special events or processes. Notions of the stream, contents, continuity and function of consciousness are all misguided as is the search for the neural correlates of consciousness.\u201d\n\n\n\nThe MORE you think about the ILLUSIONS that our brains create for the sake of simplicity\u2026the more the question starts to emerge: what if there is no CENTRALIZED HEADQUARTERS of the brain where the subjective experience of YOU\u2026is being produced? \n\n\n\nWhat if consciousness\u2026is an emergent property that exists\u2026ONLY, when there is a VERY SPECIFIC organization of physical systems? \n\n\n\nThere are people that believe that phenomenal consciousness\u2026 is an ILLUSION, they\u2019re often called Illusionists\u2026and what someone like THAT may say is sure, fully acknowledge there are other theories about what may ultimately explain phenomenal consciousness\u2026but isn\u2019t it ALSO, ENTIRELY POSSIBLE\u2026that what it FEELS like to be YOU\u2026is an illusion created by several, distributed processes of the brain running in parallel? Multiple different channels, exerting simultaneous influence on a variety of subsystems of the brain. That these subsystems talk to each other, they compete with each other, they ebb and flow between various states of representation. \n\n\n\nBut that these different DRAFTS of cognitive processes come together, to create a type of simplification of what\u2019s going on in aggregate\u2026 and that simplification is what YOU experience as\u2026 YOU. I mean we have our five senses that help us map the EXTERNAL world and they do so in a way that is often crude and incomplete. Could it be\u2026 that we SIMILARLY\u2026 have a crude misrepresentation of our own brain activity that SIMILARLY, allows us to be able to function efficiently as a person? \n\n\n\nIf you were looking for another METAPHOR to apply here that an illusionist might say is probably better for people to think of themselves in terms of\u2026 because its not gonna lead us down that rabbit hole of the cartesian theater\u2026its to THINK of phenomenal CONSCIOUSNESS\u2026as being SIMILAR to a USER INTERFACE or a DESKTOP on a computer. \n\n\n\nThe idea is: what IS the desktop of a computer? Well its a bunch of simplified ICONS on a screen, that allow you to essentially manipulate the ELECTRICAL VOLTAGE going on in between transistors on computer hardware. But AS you\u2019re pushing buttons to CHANNEL this electricity, getting things DONE on the computer\u2026you don\u2019t ACTUALLY need to know ANYTHING ABOUT the complex inner workings of how the software and hardware are operating.\n\n\n\nThe philosopher Daniel Dennett INTRODUCES the metaphor here in his famous book called Consciousness Explained (1991). He says:\n\n\n\n\u201cWhen I interact with the computer, I have limited access to the events occurring within it. Thanks to the schemes of presentation devised by the programmers, I am treated to an elaborate audiovisual metaphor, an interactive drama acted out on the stage of keyboard, mouse, and screen. I, the User, am subjected to a series of benign illusions: I seem to be able to move the cursor (a powerful and visible servant) to the very place in the computer where I keep my file, and once that I see that the cursor has arrived \u2018there\u2019, by pressing a key I get it to retrieve the file, spreading it out on a long scroll that unrolls in front of a window (the screen) at my command. I can make all sorts of things happen inside the computer by typing in various commands, pressing various buttons, and I don\u2019t have to know the details; I maintain control by relying on my understanding of the detailed audiovisual metaphors provided by the User illusion.\u201d\n\n\n\nSo if we take this metaphor seriously\u2026then the idea that you are some sort of privileged observer of everything that\u2019s going on in your mind\u2026that starts to seem like it\u2019s just FALSE. To Daniel Dennett\u2026we don\u2019t know what\u2019s REALLY happening at the deepest levels of our brains\u2026we only know what SEEMS to be happening. We are constantly acting in certain ways, doing things\u2026and then AFTER the fact making up reasons for why we ACTED in the way that we did.\n\n\n\nPoint is: you don\u2019t need to know EVERYTHING that\u2019s going on at EVERY LEVEL of a computer\u2026 to be able to for example, drag a file that you don\u2019t need anymore into the trash can on your desktop. You just drag the file into the trash can on this convenient, intuitive SCREEN. In fact you could make the argument that KNOWING about all the information being processed at other levels would get in the way of you being able to get things done that are USEFUL.\n\n\n\nBut\u2026 as its been said many times before\u2026to RELATE this back to our subjective experience of consciousness\u2026to an ILLUSIONIST\u2026 we have to acknowledge the fact\u2026that there is NO MORE\u2026 a TRASH CAN inside of your computer screen\u2026as there is a separate PHENOMENAL SUBJECT inside of your brain that needs to be explained. THAT\u2026is an ILLUSION. What you HAVE\u2026 Daniel Dennett refers to as an EDITED DIGEST, of events that are going on inside your brain. \n\n\n\nSo again just to clarify\u2026an ILLUSIONIST\u2026 doesn\u2019t DOUBT the existence of access consciousness, they\u2019re not saying that the OUTSIDE WORLD is an illusion\u2026 No, just the phenomenal REPRESENTATION of brain activity\u2026just the subjective YOU that experiences the world phenomenologically.\n\n\n\nThe philosopher Keith Frankish gives the example of a television set to describe the type of illusion they\u2019re talking about. He says: \n\n\n\u201cThink of watching a movie. What your eyes are actually witnessing is a series of still images rapidly succeeding each other. But your visual system represents these images as a single fluid moving image. The motion is an illusion. Similarly, illusionists argue, your introspective system misrepresents complex patterns of brain activity as simple phenomenal properties. The phenomenality is an illusion.\u201d\n\n\n\nWhen it FEELS LIKE SOMETHING to be you\u2026these phenomena are \u201cmetaphorical representations\u201d of REAL neural events that are going on\u2026and they definitely help us navigate reality\u2026they definitely ARE useful\u2026 but nothing about those phenomena\u2026 offer ANY sort of deep insight into the processes involved to produce that experience. So in THAT sense, they are an illusion. \n\n\n\nAnd Daniel Dennett goes HARD on ANYONE trying to smuggle in ANY MORE MAGIC than needs to be brought in to EXPLAIN consciousness. He wrote a GREAT entry in the journal of consciousness studies in 2016 called Illusionism as the obvious default theory of consciousness. \n\n\n\nNow what\u2019s he GETTING at with that title? Why should consciousness being an ILLUSION\u2026 be the DEFAULT theory we should all START from? Well he COMPARES the possibility of consciousness being an illusion\u2026with ANOTHER kind of illusion. The kind of illusion that you\u2019d see in VEGAS at a MAGIC show. \n\n\n\nBecause what HAPPENS at a MAGIC show? Well there are GREAT efforts MADE by the magician you\u2019re watching\u2026to TRICK you into thinking that what you\u2019re seeing is real. \n\n\n\nYou\u2019re watching the magic show from a VERY specific point of view\u2026CAREFULLY selected by the magician to LIMIT the information you have. They got lights and smoke and music to DISTRACT you, they\u2019re usually wearing some kind of bedazzled, cowboy costume looks like they got it at spirit Halloween, their poor assistant is dressed in God knows what to distract you. \n\n\n\nAnd when they DO the trick and the ILLUSION is finally COMPLETE\u2026and you\u2019re sitting there AMAZED, WONDERING as to how they defied the laws of nature and actually sawed someone in half and put them back together in front of you\u2026imagine someone in the crowd writing a REVIEW of the show the next day and saying, welp\u2026I guess EVERYTHING we KNOW about science needs to be rethought\u2026I mean this man is CLEARLY a wizard\u2026he is CLEARLY outside the bounds of natural constraints that we THOUGHT existed\u2026it\u2019s time to RETHINK our ENTIRE theoretical model.\n\n\n\nDaniel Dennett says who would EVER TAKE that person seriously? They\u2019d be laughed off the internet if they wrote that. And RIGHTFULLY SO. And SIMILARLY when it comes to these modern conversations about consciousness\u2026why would we EVER assume that our entire theoretical MODEL is flawed? Why would we ASSUME the supernatural? Why wouldn\u2019t we assume that anything that seems magical or mysterious definitely HAS a natural explanation\u2026and that we just don\u2019t understand it yet? \n\n\n\nIf you ONLY saw a magic trick from a single angle, like sitting in the audience of a theater\u2026it would be silly for us to assume that there wasn\u2019t a different perspective available that would SHOW how the trick was done. Similarly\u2026 we ONLY REALLY SEE the qualia of our subjective experience from the angle of introspection. \n\n\n\nThis is why to daniel dennett\u2026the DEFAULT position we should be starting from\u2026the MOST parsimonious explanation for a mystery that contradicts everything else we know\u2026is that it\u2019s an illusion. \n\n\n\nIt\u2019s funny because it\u2019s an argument that\u2019s coming from a place that\u2019s SIMILAR to where a panpsychist may be coming from, but it\u2019s arriving at a totally different conclusion. Panpsychist might say that we don\u2019t yet know enough about the human brain to write OFF the possibility that consciousness exists at some level underneath. Here\u2019s an illusionist position that\u2019s saying, yeah, we certainly HAVEN\u2019T been doing science long enough to know EVERYTHING about the brain\u2026and think of all the low hanging fruit in the sciences that could potentially EXPLAIN this mystery if only we have more time to study it. \n\n\n\nMore than that\u2026to an illusionist\u2026maybe there is something ABOUT the nature of the illusion that we\u2019re experiencing, that is NOT fully explainable by studying the physical properties of the brain. Maybe studying the ILLUSION ITSELF\u2026 is where we should be focusing more of our attention. \n\n\n\nBut that said\u2026there\u2019s no shortage of people out there that have PROBLEMS with saying consciousness is an illusion. For example\u2026 the philosopher Massimo Pigliucci, who by the way fun trivia fact is the only person OTHER than phillip goff that we\u2019ve ever interviewed on this show all the way back in our HUME series\u2026anyway HE once wrote an article where he talks about how Illusionism\u2026AS an ANSWER to the hard problem of consciousness\u2026is something that HE thinks HEAVILY relies on the specific definition you\u2019re using of what an ILLUSION is or what CONSCIOUSNESS is. \n\n\n\nTo explain what he means\u2026 let\u2019s go back to the metaphor about the icons on the computer screen. Massimo Pigliucci says this metaphor that Daniel Dennett presents in Consciousness Explained\u2026is a POWERFUL metaphor when it comes to describing the relationship between phenomenal consciousness\u2026 and the underlying neural machinery that makes it possible. It\u2019s great. But what HE can\u2019t seem to understand is why ANYONE would EVER CALL what\u2019s going ON there\u2026an \u201cillusion\u201d? Why USE the word illusion? \n\n\n\nWhen you hear the word illusion he says\u2026 you think of mind trickery, smoke and mirrors. But that\u2019s not what\u2019s happening when it comes to the user interface of a computer. He says, \u201ccomputer icons, cursors and so forth are not illusions, they are causally efficacious representations\u2026 of underlying machine language processes.\u201d \n\n\n\nWhat he\u2019s getting at\u2026 is that there\u2019s no ILLUSION going on here. There IS a connection between the underlying processes of the brain and our phenomenal experience of it. If it were truly an illusion, there would BE no real connection. But he says if you wanted to use that same logic\u2026would you say that the wheel of your CAR is an illusion? I mean when you\u2019re driving down the road and you turn the wheel\u2026you\u2019re not aware of the complexity of everything the car is doing, all of the internal communication going on to be able to turn the car in whatever direction you\u2019re going. Does that make it an illusion when you turn the steering wheel left and everything moves that makes the car go left? No, the steering wheel is causally connected to the underlying machinery\u2026 and that steering wheel makes it POSSIBLE for you to actually be able to drive the car efficiently. So why would you ever choose the word ILLUSION\u2026 to describe\u2026 what\u2019s going ON there? \n\n\n\nMassimo Pigliucci thinks there\u2019s an easy trap for someone to fall into living in today\u2019s world\u2026he calls it a sort of reductionist temptation\u2026we come from a LONG HISTORY in the sciences of progressively reducing things to a deeper, more fundamental level of their component parts\u2026 and then the assumption has usually been that if you can find a lower level of description about something\u2026for example if we can explain what PHENOMENAL CONSCIOUSNESS is, with a neurobiological explanation\u2026well then THAT explanation, must be MORE TRUE than anything going on at a more macro level\u2026at the level of the consciousness we experience every day. It must be a more FUNDAMENTAL explanation, and therefore a BETTER explanation. \n\n\n\nYou\u2019ll see this same kind of thinking going on when someone assumes the atoms that MAKE UP an apple\u2026 are more REAL in some sense than the apple in macroscopic reality\u2026the assumption being that the apple as WE experience it is some kind of an illusion created by our flawed SENSES and that it\u2019s somehow less valuable. \n\n\n\nBut this whole way of thinking\u2026is UNWORKABLE he says. We\u2019ve learned over the course of THOUSANDS of years of trying to STUDY the things around us\u2026that different levels of description\u2026 are USEFUL for different purposes. \n\n\n\nHe gives a series of examples: he says, \u201cIf we are interested in the biochemistry of the brain, then the proper level of description is the subcellular one, taking lower levels (eg, the quantum one) as background conditions. If we want a broader picture of how the brain works, we need to move up to the anatomical level, which takes all previous levels, from the subcellular to the quantum one, as background conditions. But if we want to talk to other human beings about how we feel and what we are experiencing, then it is the psychological level of description (the equivalent of Dennett\u2019s icons and cursors) that, far from being illusory, is the most valuable.\u201d\n\n\n\nReality plays by different sets of rules at different scales. And different SCALES of reality are USEFUL for different types of inquiry. When you\u2019re going about your everyday life do you assume that the ground is solid? Or do you use the lower level of description at the atomic level where the ground is really 99.9% empty space?\n\n\n\nSo when it comes to consciousness\u2026if we\u2019re gonna SAY that a neurobiological description of what\u2019s going on invalidates the experience of what\u2019s going on at the level of subjectivity, that subjectivity is nothing but an illusion\u2026then why stop at the neurobiological level he says? Why not say that neurons are actually an illusion because they\u2019re ultimately made up of molecules? Why not say that MOLECULES are illusions because they\u2019re really made up of quarks and gluons. You can do this INFINITELY. \n\n\n\nAnd maybe on a more GENERAL note\u2026JUST when it comes to this lifelong process of trying to be as clear thinking of a human being as you possibly CAN be\u2026maybe part of that whole process\u2026 is accepting the fact that there is no, single, monistic way of analyzing reality that is the ULTIMATE METHOD of understanding it. Maybe understanding reality\u2026 just takes a more pluralistic approach, maybe GETTING as close to the truth as we can as people takes LOOKING at reality from many different angles at many different scales, and maybe phenomenal consciousness is an important scale of reality\u2026 that we need to be considering. \n\n\n\nSo from Daniel Dennett and Keith Frankish offering a take on HOW consciousness might be an illusion\u2026to Susan Blackmore offering a take on WHY the illusion of consciousness is such an easy trap to FALL into\u2026I think if anyone you\u2019re in a conversation with calls themselves an illusionist\u2026then unless you\u2019re talking to David Copperfield I think you\u2019ll at LEAST be able to understand the main reasons for why someone may THINK this way about consciousness. \n\n\n\nAnd this is the point in the conversation where we hit a bit of a crossroads\u2026SAME crossroads that we\u2019ve seen with OTHER theories of consciousness in the series so far. At a certain point...there are GOOD reasons to believe that phenomenal consciousness may be an illusion\u2026and there are good reasons to DOUBT whether that is true or not. As we\u2019ve talked about at a certain point with these conversations you just have to CHOOSE to believe in something, and then deal with the prescriptive implications of BELIEVING it after the fact\u2026and one of the ones with Illusionism in particular is you can start to wonder, the more you think about it, how much consciousness being an illusion, ACTUALLY has an impact on ANYTHING going on in your everyday life or your relationship to society. \n\n\n\nIt\u2019s actually pretty interesting to consider\u2026how much the possibility of consciousness being an illusion\u2026DIRECTLY MIRRORS, OTHER, unsolved conversations in the philosophy of mind more broadly. Like for example\u2026the ongoing debate about whether FREE WILL is an illusion. \n\n\n\nIn fact in order to be able to talk about the societal impacts of consciousness being an illusion we have to talk about free will being one as well. \n\n\n\nNext episode we\u2019re going to dive into it. Free will, free wont, hard determinism and the implications of ALL of these when it comes to structuring our societies. Keep your eyes open for it, it will be out soon! Thanks for everyone on Patreon and thanks for checking out the website at philosophizethis.org\n\n\n\nBut as always, thank you for listening. Talk to you next time. `}"
  },
  "typeVersion": 2
}

================ Node #5211 ================
{
  "id": "70b657d9-5a8f-4a9e-8d4e-18940ba35683",
  "name": "Workflow Input to JSON Document",
  "type": "@n8n/n8n-nodes-langchain.documentJsonInputLoader",
  "position": [
    80,
    780
  ],
  "parameters": {
    "pointers": "/transcript"
  },
  "typeVersion": 1
}

================ Node #5212 ================
{
  "id": "b05c5e26-5a1d-4717-868d-3b05783a0d24",
  "name": "Recursive Character Text Splitter",
  "type": "@n8n/n8n-nodes-langchain.textSplitterRecursiveCharacterTextSplitter",
  "position": [
    220,
    900
  ],
  "parameters": {
    "chunkSize": 6000,
    "chunkOverlap": 1000
  },
  "typeVersion": 1
}

================ Node #5213 ================
{
  "id": "1b78b734-167e-4eb6-ba2e-19bbecd3a75e",
  "name": "Sticky Note",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    -100,
    460
  ],
  "parameters": {
    "width": 455.5091388435286,
    "height": 577.6862533692728,
    "content": "## Chunk the transcript into several parts, and refine-summarize it "
  },
  "typeVersion": 1
}

================ Node #5214 ================
{
  "id": "86ac5fad-307f-4f95-ad1c-1ba00a29e807",
  "name": "Topics",
  "type": "n8n-nodes-base.itemLists",
  "position": [
    920,
    580
  ],
  "parameters": {
    "options": {},
    "fieldToSplitOut": "topics"
  },
  "typeVersion": 3
}

================ Node #5215 ================
{
  "id": "078890f1-d840-479e-b702-ce6f9e3b4852",
  "name": "Summarize Transcript",
  "type": "@n8n/n8n-nodes-langchain.chainSummarization",
  "position": [
    -40,
    580
  ],
  "parameters": {
    "type": "refine"
  },
  "typeVersion": 1
}

================ Node #5216 ================
{
  "id": "4a583efe-ff24-4bc1-b3e7-89651e3147c7",
  "name": "GPT 4 - Extract",
  "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
  "position": [
    560,
    755
  ],
  "parameters": {
    "model": "gpt-4",
    "options": {
      "temperature": 0.8
    }
  },
  "credentials": {
    "openAiApi": {
      "id": "wJtZwsVKW5v6R2Iy",
      "name": "OpenAi account 2"
    }
  },
  "typeVersion": 1
}

================ Node #5217 ================
{
  "id": "b658f2c1-3f60-4ff0-8b7b-2b2ebe1b1f5e",
  "name": "Wikipedia1",
  "type": "@n8n/n8n-nodes-langchain.toolWikipedia",
  "position": [
    1380,
    900
  ],
  "parameters": {},
  "typeVersion": 1
}

================ Node #5218 ================
{
  "id": "5bffc33d-bb52-4432-bb82-ce2005be3c06",
  "name": "Sticky Note1",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    480,
    460
  ],
  "parameters": {
    "width": 615.8516011477997,
    "height": 443.66706715913415,
    "content": "## Generate Questions and Topics from the summary and make sure the response follows required schema."
  },
  "typeVersion": 1
}

================ Node #5219 ================
{
  "id": "53626ccb-451d-4ed8-8512-2daa74baf556",
  "name": "Send Digest",
  "type": "n8n-nodes-base.gmail",
  "position": [
    1900,
    580
  ],
  "parameters": {
    "sendTo": "oleg@n8n.io",
    "message": "=Greetings \ud83d\udc4b,\nHope you're doing well! Here's your digest for this week's episode of Philoshopy This! \n\n<h2>\ud83c\udf99 Episode Summary</h2>\n{{ $json.summary }}\n\n<h2>\ud83d\udca1 Topics Discussed</h2>\n{{ $json.topics.join('\\n') }}\n\n<h2>\u2753 Questions to Ponder</h2>\n{{ $json.questions.join('\\n') }}",
    "options": {},
    "subject": "Podcast Digest",
    "emailType": "html"
  },
  "credentials": {
    "gmailOAuth2": {
      "id": "kLFedNEM8Zwkergv",
      "name": "Gmail account"
    }
  },
  "typeVersion": 2
}

================ Node #5220 ================
{
  "id": "751ffffe-190e-4fc6-93ff-0021c98f225d",
  "name": "Sticky Note3",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    1220,
    460
  ],
  "parameters": {
    "width": 359.3751741576458,
    "height": 567.5105121293799,
    "content": "## Ask Agent to research and explain each topic using Wikipedia\n\n"
  },
  "typeVersion": 1
}

================ Node #5221 ================
{
  "id": "0165bec2-f390-44a8-8435-ba718cf18465",
  "name": "Format topic text & title",
  "type": "n8n-nodes-base.code",
  "position": [
    1740,
    580
  ],
  "parameters": {
    "jsCode": "const inputItems = $input.all();\nconst topics = [];\nconst questions = [];\nconst summary = $('Summarize Transcript').item.json.response.output_text;\n// Format Topics\nfor (const [index, topic] of inputItems.entries()) {\n const title = $('Topics').all()[index].json.topic\n\n topics.push(`\n <h3>${title}</h3>\n <p>${topic.json.output}</p>`.trim()\n )\n}\n\n// Format Questions\nfor (const question of $('Extract Topics & Questions').item.json.questions) {\n questions.push(`\n <h3>${question.question}</h3>\n <p>${question.why}</p>`.trim()\n )\n}\n\nreturn { topics, summary, questions }"
  },
  "typeVersion": 2
}

================ Node #5222 ================
{
  "id": "497c5a49-e4cb-4c1f-98c2-49088ced2e72",
  "name": "Structured Output Parser",
  "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
  "position": [
    720,
    755
  ],
  "parameters": {
    "jsonSchema": "{\n \"$schema\": \"http://json-schema.org/draft-07/schema#\",\n \"title\": \"Generated schema for Root\",\n \"type\": \"object\",\n \"properties\": {\n \"questions\": {\n \"type\": \"array\",\n \"items\": {\n \"type\": \"object\",\n \"properties\": {\n \"question\": {\n \"type\": \"string\"\n },\n \"why\": {\n \"type\": \"string\",\n \"description\": \"Explanation of why this question is relevant for the context\"\n }\n },\n \"required\": [\n \"question\",\n \"why\"\n ]\n }\n },\n \"topics\": {\n \"type\": \"array\",\n \"items\": {\n \"type\": \"object\",\n \"properties\": {\n \"topic\": {\n \"type\": \"string\"\n },\n \"why\": {\n \"type\": \"string\",\n \"description\": \"A few sentences explanation of why this topic is relevant for the context\"\n }\n },\n \"required\": [\n \"topic\",\n \"why\"\n ]\n }\n }\n },\n \"required\": [\n \"questions\",\n \"topics\"\n ]\n}"
  },
  "typeVersion": 1
}

================ Node #5223 ================
{
  "id": "6b42d3bf-912e-4df3-91c6-2eba06dbe27c",
  "name": "Extract Topics & Questions",
  "type": "@n8n/n8n-nodes-langchain.chainLlm",
  "position": [
    560,
    580
  ],
  "parameters": {
    "prompt": "=Come up with a list of questions and further topics to explore that are relevant for the context. Make sure questions are relevant to the topics but not verbatim. Think hard about what the appropriate questions should be and how it relates to the summarization.\nPodcast Summary: {{ $json.response.output_text }}"
  },
  "typeVersion": 1
}

================ Node #5224 ================
{
  "id": "701c2977-0c17-4fa0-ad4b-afbbbaa6f044",
  "name": "GPT3.5 - Research",
  "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
  "position": [
    1280,
    780
  ],
  "parameters": {
    "model": "gpt-3.5-turbo-16k",
    "options": {
      "temperature": 0.8
    }
  },
  "credentials": {
    "openAiApi": {
      "id": "wJtZwsVKW5v6R2Iy",
      "name": "OpenAi account 2"
    }
  },
  "typeVersion": 1
}

================ Node #5225 ================
{
  "id": "0da11c5a-ffd3-47a0-a082-9eaf9d18fc10",
  "name": "GPT3.5 - Summarize",
  "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
  "position": [
    -60,
    780
  ],
  "parameters": {
    "model": "gpt-3.5-turbo-16k",
    "options": {
      "temperature": 0
    }
  },
  "credentials": {
    "openAiApi": {
      "id": "wJtZwsVKW5v6R2Iy",
      "name": "OpenAi account 2"
    }
  },
  "typeVersion": 1
}

================ Node #5226 ================
{
  "id": "bbb29b9f-f765-4f0c-926f-1b34a6eb999c",
  "name": "Sticky Note4",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    1700,
    460
  ],
  "parameters": {
    "width": 371.7094059635757,
    "height": 330.6932614555254,
    "content": "## Format as HTML and send via Gmail"
  },
  "typeVersion": 1
}

================ Node #5227 ================
{
  "id": "cfdde2b8-5fb7-4eb6-b821-e5d0511bcabd",
  "name": "Research & Explain Topics",
  "type": "@n8n/n8n-nodes-langchain.agent",
  "position": [
    1260,
    580
  ],
  "parameters": {
    "text": "=Topic: {{ $json.topic }}\n\nContext: {{ $('Summarize Transcript').item.json.response.output_text }}\n",
    "agent": "openAiFunctionsAgent"
  },
  "typeVersion": 1
}

================ Node #5228 ================
{
  "id": "ad1a920e-1048-4b58-9c4a-a0469a1f189d",
  "name": "OpenAI",
  "type": "@n8n/n8n-nodes-langchain.lmOpenAi",
  "position": [
    900,
    628
  ],
  "parameters": {
    "options": {}
  },
  "credentials": {
    "openAiApi": {
      "id": "4jRB4A20cPycBqP5",
      "name": "OpenAI account - n8n"
    }
  },
  "typeVersion": 1
}

================ Node #5229 ================
{
  "id": "7dd04ecd-f169-455c-9c90-140140e37542",
  "name": "Sticky Note",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    800,
    340
  ],
  "parameters": {
    "width": 432,
    "height": 237,
    "content": "## Self-coded LLM Chain Node"
  },
  "typeVersion": 1
}

================ Node #5230 ================
{
  "id": "05ad7d68-5dc8-42f2-8274-fcb5bdeb68cb",
  "name": "When clicking \"Execute Workflow\"",
  "type": "n8n-nodes-base.manualTrigger",
  "position": [
    280,
    428
  ],
  "parameters": {},
  "typeVersion": 1
}

================ Node #5231 ================
{
  "id": "39e2fd34-3261-44a1-aa55-96f169d55aad",
  "name": "Set",
  "type": "n8n-nodes-base.set",
  "position": [
    620,
    428
  ],
  "parameters": {
    "values": {
      "string": [
        {
          "name": "input",
          "value": "Tell me a joke"
        }
      ]
    },
    "options": {}
  },
  "typeVersion": 2
}

================ Node #5232 ================
{
  "id": "42a3184c-0c62-4e79-9220-7a93e313317e",
  "name": "Set1",
  "type": "n8n-nodes-base.set",
  "position": [
    620,
    820
  ],
  "parameters": {
    "values": {
      "string": [
        {
          "name": "input",
          "value": "What year was Einstein born?"
        }
      ]
    },
    "options": {}
  },
  "typeVersion": 2
}

================ Node #5233 ================
{
  "id": "4e2af29d-7fc4-484b-8028-1b9a84d60172",
  "name": "Chat OpenAI",
  "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
  "position": [
    731,
    1108
  ],
  "parameters": {
    "options": {}
  },
  "credentials": {
    "openAiApi": {
      "id": "4jRB4A20cPycBqP5",
      "name": "OpenAI account - n8n"
    }
  },
  "typeVersion": 1
}

================ Node #5234 ================
{
  "id": "334e9176-3a18-4838-84cb-70e8154f1a30",
  "name": "Sticky Note1",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    880,
    1028
  ],
  "parameters": {
    "width": 320.2172923777021,
    "height": 231,
    "content": "## Self-coded Tool Node"
  },
  "typeVersion": 1
}

================ Node #5235 ================
{
  "id": "05e0d5c6-df18-42ba-99b6-a2b65633a14d",
  "name": "Custom - Wikipedia",
  "type": "@n8n/n8n-nodes-langchain.code",
  "position": [
    971,
    1108
  ],
  "parameters": {
    "code": {
      "supplyData": {
        "code": "console.log('Custom Wikipedia Node runs');\nconst { WikipediaQueryRun } = require('langchain/tools');\nreturn new WikipediaQueryRun();"
      }
    },
    "outputs": {
      "output": [
        {
          "type": "ai_tool"
        }
      ]
    }
  },
  "typeVersion": 1
}

================ Node #5236 ================
{
  "id": "9c729e9a-f173-430c-8bcd-74101b614891",
  "name": "Custom - LLM Chain Node",
  "type": "@n8n/n8n-nodes-langchain.code",
  "position": [
    880,
    428
  ],
  "parameters": {
    "code": {
      "execute": {
        "code": "const { PromptTemplate } = require('langchain/prompts');\n\nconst query = $input.item.json.input;\nconst prompt = PromptTemplate.fromTemplate(query);\nconst llm = await this.getInputConnectionData('ai_languageModel', 0);\nlet chain = prompt.pipe(llm);\nconst output = await chain.invoke();\nreturn [ {json: { output } } ];"
      }
    },
    "inputs": {
      "input": [
        {
          "type": "main"
        },
        {
          "type": "ai_languageModel",
          "required": true,
          "maxConnections": 1
        }
      ]
    },
    "outputs": {
      "output": [
        {
          "type": "main"
        }
      ]
    }
  },
  "typeVersion": 1
}

================ Node #5237 ================
{
  "id": "6427bbf0-49a6-4810-9744-87d88151e914",
  "name": "Agent",
  "type": "@n8n/n8n-nodes-langchain.agent",
  "position": [
    880,
    820
  ],
  "parameters": {
    "options": {}
  },
  "typeVersion": 1
}

================ Node #5238 ================
{
  "id": "6f188270-2c08-491f-bf52-c4a152b33aa0",
  "name": "When clicking \"Execute Workflow\"",
  "type": "n8n-nodes-base.manualTrigger",
  "position": [
    1220,
    780
  ],
  "parameters": {},
  "typeVersion": 1
}

================ Node #5239 ================
{
  "id": "e4839de2-fc04-40b0-b6bc-596455ad93fe",
  "name": "Webhook",
  "type": "n8n-nodes-base.webhook",
  "position": [
    1220,
    580
  ],
  "webhookId": "d0cdd428-be96-4821-85bc-65342cf928d0",
  "parameters": {
    "path": "d0cdd428-be96-4821-85bc-65342cf928d0",
    "options": {},
    "httpMethod": "POST"
  },
  "typeVersion": 1
}

================ Node #5240 ================
{
  "id": "15dcafe1-6361-4775-ace0-e34fd2a143b4",
  "name": "No Operation, do nothing",
  "type": "n8n-nodes-base.noOp",
  "position": [
    2120,
    940
  ],
  "parameters": {},
  "typeVersion": 1
}

================ Node #5241 ================
{
  "id": "0d28fe8e-da80-458b-9a75-d316019cb3ae",
  "name": "Analyze user request",
  "type": "n8n-nodes-base.openAi",
  "position": [
    1420,
    680
  ],
  "parameters": {
    "model": "gpt-4",
    "prompt": {
      "messages": [
        {
          "role": "system",
          "content": "Act as a service desk agent and help to categorize user messages. Return back only JSON without quotations. Do not return anything else."
        },
        {
          "content": "=Here is a user feedback: \"{{ $json.body.feedback }}\". Please analyse it and put into one of the categories:\n1. \"success-story\" for user appraisal or success story. this will be processed by customer success department\n2. \"urgent-issue\" for extreme dissatisfaction or an urgent problem. this will be escalated to the IT team. Please assess if the request is really urgent and whether it has an immediate impact on the client. If the ticket doesn't look like an immediate problem or an extreme dissatisfaction then proceed as a normal ticket.\n3. \"ticket\" for everything else. This will be processed as normal by customer support team.\n\nPlease return back a JSON with the following structure: category (string), feedback (string), instruction (string).\nCategory must match the analysed category. feedback must match the original text. instruction should contain a text for a department according to the category with a one sentense summary of the feedback. Please be polite and friendly to the colleagues."
        }
      ]
    },
    "options": {
      "maxTokens": 500,
      "temperature": 0.5
    },
    "resource": "chat"
  },
  "credentials": {
    "openAiApi": {
      "id": "63",
      "name": "OpenAi account"
    }
  },
  "typeVersion": 1
}

================ Node #5242 ================
{
  "id": "ce1c4198-ce21-4436-9ccb-4a2a078cd06e",
  "name": "Select category",
  "type": "n8n-nodes-base.switch",
  "position": [
    1840,
    680
  ],
  "parameters": {
    "rules": {
      "rules": [
        {
          "value2": "success-story"
        },
        {
          "output": 1,
          "value2": "urgent-issue"
        },
        {
          "output": 2,
          "value2": "ticket"
        }
      ]
    },
    "value1": "={{ $json.gpt_reply.category.toLowerCase() }}",
    "dataType": "string",
    "fallbackOutput": 3
  },
  "typeVersion": 1
}

================ Node #5243 ================
{
  "id": "839cc38d-b393-4fc1-a068-47a8fcf55e3f",
  "name": "Parse JSON",
  "type": "n8n-nodes-base.set",
  "position": [
    1640,
    680
  ],
  "parameters": {
    "values": {
      "string": [
        {
          "name": "gpt_reply",
          "value": "={{ JSON.parse( $json.message.content.replace(/\\n(?=[^\"]*\"(?:[^\"]*\"[^\"]*\")*[^\"]*$)/g, '\\\\n')) }}"
        }
      ]
    },
    "options": {}
  },
  "typeVersion": 2
}

================ Node #5244 ================
{
  "id": "4c150439-89af-42bd-bbdc-905d13ada76b",
  "name": "User Success Dept",
  "type": "n8n-nodes-base.discord",
  "position": [
    2120,
    460
  ],
  "parameters": {
    "text": "={{ $json.gpt_reply.instruction }}",
    "options": {},
    "webhookUri": "https://discord.com/api/webhooks/<YOUR WEBHOOK HERE>"
  },
  "typeVersion": 1
}

================ Node #5245 ================
{
  "id": "9a5e5335-9e6c-4f1f-a0f0-b1b022956549",
  "name": "IT Dept",
  "type": "n8n-nodes-base.discord",
  "position": [
    2120,
    620
  ],
  "parameters": {
    "text": "={{ $json.gpt_reply.instruction }}",
    "options": {},
    "webhookUri": "https://discord.com/api/webhooks/<YOUR WEBHOOK HERE>"
  },
  "typeVersion": 1
}

================ Node #5246 ================
{
  "id": "d6d6250a-3a24-49f1-a597-47ebc179949c",
  "name": "Helpdesk",
  "type": "n8n-nodes-base.discord",
  "position": [
    2120,
    780
  ],
  "parameters": {
    "text": "={{ $json.gpt_reply.instruction }}",
    "options": {},
    "webhookUri": "https://discord.com/api/webhooks/<YOUR WEBHOOK HERE>"
  },
  "typeVersion": 1
}

================ Node #5247 ================
{
  "id": "ad6dc2cd-21cc-4563-86ba-f78cc4a55543",
  "name": "When clicking \"Execute Workflow\"",
  "type": "n8n-nodes-base.manualTrigger",
  "position": [
    -640,
    380
  ],
  "parameters": {},
  "typeVersion": 1
}

================ Node #5248 ================
{
  "id": "b370da23-ead4-4221-b7fe-a9d943f7fbb9",
  "name": "davinci-003-complete",
  "type": "n8n-nodes-base.openAi",
  "position": [
    1160,
    60
  ],
  "parameters": {
    "prompt": "={{ $json.text }}\n\nTl;dr:",
    "options": {
      "maxTokens": 500
    }
  },
  "credentials": {
    "openAiApi": {
      "id": "63",
      "name": "OpenAi account"
    }
  },
  "typeVersion": 1
}

================ Node #5249 ================
{
  "id": "5e04f355-36c0-4540-8e65-68118cb73135",
  "name": "ChatGPT-ex2",
  "type": "n8n-nodes-base.openAi",
  "position": [
    1160,
    740
  ],
  "parameters": {
    "prompt": {
      "messages": [
        {
          "role": "system",
          "content": "=You are an assistant. Always add 5 emojis to the end of your answer."
        },
        {
          "content": "=Write tl;dr of the wollowing text: {{ $json.text}}"
        }
      ]
    },
    "options": {
      "maxTokens": 500,
      "temperature": 0.8
    },
    "resource": "chat"
  },
  "credentials": {
    "openAiApi": {
      "id": "63",
      "name": "OpenAi account"
    }
  },
  "typeVersion": 1
}

================ Node #5250 ================
{
  "id": "16a7cf80-16e3-44f9-b15c-7501417fe38f",
  "name": "davinci-003-edit",
  "type": "n8n-nodes-base.openAi",
  "position": [
    1340,
    60
  ],
  "parameters": {
    "input": "={{ $json.text }}",
    "options": {},
    "operation": "edit",
    "instruction": "translate to German"
  },
  "credentials": {
    "openAiApi": {
      "id": "63",
      "name": "OpenAi account"
    }
  },
  "typeVersion": 1
}

================ Node #5251 ================
{
  "id": "95254870-65c3-4714-83fb-20ba2c0ca007",
  "name": "ChatGPT-ex1.1",
  "type": "n8n-nodes-base.openAi",
  "position": [
    1160,
    380
  ],
  "parameters": {
    "prompt": {
      "messages": [
        {
          "content": "=Write a Tl;dr of the followint text: {{ $json.text }}"
        }
      ]
    },
    "options": {
      "maxTokens": 500
    },
    "resource": "chat"
  },
  "credentials": {
    "openAiApi": {
      "id": "63",
      "name": "OpenAi account"
    }
  },
  "typeVersion": 1
}

================ Node #5252 ================
{
  "id": "be9c4820-18b0-46fd-a5a0-51a5dc3ebed5",
  "name": "ChatGPT-ex1.2",
  "type": "n8n-nodes-base.openAi",
  "position": [
    1340,
    380
  ],
  "parameters": {
    "prompt": {
      "messages": [
        {
          "content": "=Translate to German the following text: {{ $json.message.content }}"
        }
      ]
    },
    "options": {
      "maxTokens": 500
    },
    "resource": "chat"
  },
  "credentials": {
    "openAiApi": {
      "id": "63",
      "name": "OpenAi account"
    }
  },
  "typeVersion": 1
}

================ Node #5253 ================
{
  "id": "c52c875b-5270-44ac-bfca-ce25124e3d04",
  "name": "Text-example",
  "type": "n8n-nodes-base.code",
  "position": [
    540,
    380
  ],
  "parameters": {
    "jsCode": "return [\n {\n \"text\": \"Science Underground with your host, Anissa Ramirez. In this episode, how to stop your bathroom mirror from fogging up with a little dash of science. I'm Anissa Ramirez and this is Science Underground. We've all been there. You come out of the shower and you go to the mirror and you can't see yourself because the mirror is fogged up. You can't see anything until you first clear off the surface. Every morning it's the same thing. Shower, fog, shower, fog, shower, fog. There's gotta be a better way. Well, there is. Before you take the next shower, wipe a bit of shaving cream on the surface of the mirror and keep it there for about 30 seconds. Then wipe it off. The next time you take a shower, that part of the mirror that was covered with shaving cream will be amazingly fog free. And the shaving cream will keep the water from fogging up for a few weeks. So what's going on? Well, the fog on your mirror is made out of little itty bitty water droplets. If you were to look at the surface of the mirror under the microscope, you will see that the surface looks like a newly waxed car. The water forms beads, preventing you from seeing yourself in the mirror. When you add shaving cream to the surface of the mirror, the water droplets are no longer beads. They are a thin, smoothed out layer of water. Just like the surface of an old car that hasn't been waxed. Scientists would say that the shaving cream has changed the surface tension of the mirror. So there you have it. There's the answer. The secret to fogless mirrors is shaving cream. A little dab of science will do you. I'm Anissa Ramirez, and this was Science Underground.\"\n }\n];"
  },
  "typeVersion": 1
}

================ Node #5254 ================
{
  "id": "45d3bad7-0e9a-426b-b4e9-b3568181d9dc",
  "name": "Code-ex3.1",
  "type": "n8n-nodes-base.code",
  "position": [
    1160,
    1100
  ],
  "parameters": {
    "jsCode": "var intext = $input.first().json;\n\nvar messages = [\n {\"role\": \"system\", \"content\": \"You are a helpful assistant. Write a Tl;dr of each user message\"},\n {\"role\": \"user\", \"content\": intext.text}\n];\n\nreturn {\"messages\":messages};"
  },
  "typeVersion": 1
}

================ Node #5255 ================
{
  "id": "4db3de05-51a7-46ea-a818-508bdcb04582",
  "name": "ChatGPT-ex3.1",
  "type": "n8n-nodes-base.httpRequest",
  "position": [
    1340,
    1100
  ],
  "parameters": {
    "url": "https://api.openai.com/v1/chat/completions",
    "method": "POST",
    "options": {},
    "sendBody": true,
    "authentication": "predefinedCredentialType",
    "bodyParameters": {
      "parameters": [
        {
          "name": "model",
          "value": "gpt-3.5-turbo"
        },
        {
          "name": "temperature",
          "value": "={{ parseFloat(0.8) }}"
        },
        {
          "name": "n",
          "value": "={{ Number(1) }}"
        },
        {
          "name": "max_tokens",
          "value": "={{ Number(500) }}"
        },
        {
          "name": "messages",
          "value": "={{ $json.messages }}"
        }
      ]
    },
    "nodeCredentialType": "openAiApi"
  },
  "credentials": {
    "openAiApi": {
      "id": "63",
      "name": "OpenAi account"
    }
  },
  "typeVersion": 3
}

================ Node #5256 ================
{
  "id": "709fcd7c-deb3-469d-b16b-62d4d36d100d",
  "name": "ChatGPT-ex3.2",
  "type": "n8n-nodes-base.openAi",
  "position": [
    1880,
    1100
  ],
  "parameters": {
    "prompt": {
      "messages": [
        {
          "role": "system",
          "content": "=You are now a DALLE-2 prompt generation tool that will generate a suitable prompt. Write a promt to create a cover image relevant to the user input. The image should be in a comic style of the 60-s."
        },
        {
          "content": "={{ $json.choices[0].message.content }}"
        }
      ]
    },
    "options": {
      "maxTokens": 500,
      "temperature": 0.8
    },
    "resource": "chat"
  },
  "credentials": {
    "openAiApi": {
      "id": "63",
      "name": "OpenAi account"
    }
  },
  "typeVersion": 1
}

================ Node #5257 ================
{
  "id": "6b32cc45-5ba2-4605-b690-3929ec9acecf",
  "name": "Sticky Note",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    900,
    -60
  ],
  "parameters": {
    "width": 746.6347949130579,
    "height": 295.50954755505853,
    "content": "## The old way of using text completion and text edit\n### Davinci model is 10 times more expensive then ChatGPT, consider switching to the new API:\nhttps://openai.com/blog/introducing-chatgpt-and-whisper-apis\n"
  },
  "typeVersion": 1
}

================ Node #5258 ================
{
  "id": "3cc74d77-7b02-40fd-83d8-f540d5ff34ab",
  "name": "Sticky Note1",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    -160,
    260
  ],
  "parameters": {
    "width": 428.4578974150008,
    "height": 316.6202633391793,
    "content": "## Whisper-1 example\n### Prepare your audio file and send it to whisper-1 transcription model"
  },
  "typeVersion": 1
}

================ Node #5259 ================
{
  "id": "6ba8069a-485c-497c-8b27-4c7562fbccab",
  "name": "Sticky Note2",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    380,
    280
  ],
  "parameters": {
    "width": 421.9002034748082,
    "height": 302.4086532331564,
    "content": "## An example of transcribed text\n### Please pause this node when using real audio files"
  },
  "typeVersion": 1
}

================ Node #5260 ================
{
  "id": "c71001e6-b80f-41dd-bcdd-10927014b374",
  "name": "Sticky Note3",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    900,
    280
  ],
  "parameters": {
    "width": 747.8556016477869,
    "height": 288.18470714667706,
    "content": "## ChatGPT example 1.1 and 1.2 \n### Write a Tl;dr of the text input\n### Translate it to German\n### only user content provided"
  },
  "typeVersion": 1
}

================ Node #5261 ================
{
  "id": "4605be68-4c57-404f-8624-e095c8e86ff9",
  "name": "Sticky Note4",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    900,
    620
  ],
  "parameters": {
    "width": 742.9723747088658,
    "height": 288.18470714667706,
    "content": "## ChatGPT example 2 \n### Use system content to provide general instruction\n### Manual setup of system and user content"
  },
  "typeVersion": 1
}

================ Node #5262 ================
{
  "id": "f5b72d7a-655a-4cc9-b722-b75429889d1d",
  "name": "Sticky Note5",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    900,
    960
  ],
  "parameters": {
    "width": 739.309954504675,
    "height": 288.18470714667706,
    "content": "## ChatGPT example 3.1\n### When using ChatGPT programmatically, create an array of system / user / assistant contents and append them one after another\n### Call ChatGPT API via HTTP Request node to provide all messages at once"
  },
  "typeVersion": 1
}

================ Node #5263 ================
{
  "id": "a003a4db-1960-4867-8dfe-3114cf0742f3",
  "name": "DALLE-ex3.3",
  "type": "n8n-nodes-base.openAi",
  "position": [
    2060,
    1100
  ],
  "parameters": {
    "prompt": "={{ $json.message.content }}",
    "options": {
      "n": 4,
      "size": "512x512"
    },
    "resource": "image"
  },
  "credentials": {
    "openAiApi": {
      "id": "63",
      "name": "OpenAi account"
    }
  },
  "typeVersion": 1
}

================ Node #5264 ================
{
  "id": "d71a01ff-4d47-4675-964c-c47820d3989b",
  "name": "Sticky Note6",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    1720,
    960
  ],
  "parameters": {
    "width": 611.1252473579985,
    "height": 284.52228694248623,
    "content": "## ChatGPT example 3.2 & DALLE-2 example 3.3\n### Use ChatGPT to create a prompt for a cover image of the Tl;dr message\n### Use OpenAI node to generate 4 images using the auto-generated prompt"
  },
  "typeVersion": 1
}

================ Node #5265 ================
{
  "id": "f5a55cfe-c110-4833-9668-1f1ba895860f",
  "name": "ChatGPT-ex4",
  "type": "n8n-nodes-base.openAi",
  "position": [
    1240,
    1420
  ],
  "parameters": {
    "model": "gpt-3.5-turbo-0301",
    "prompt": {
      "messages": [
        {
          "content": "={{ $json.prompt }}"
        }
      ]
    },
    "options": {
      "maxTokens": 500,
      "temperature": 0.5
    },
    "resource": "chat"
  },
  "credentials": {
    "openAiApi": {
      "id": "63",
      "name": "OpenAi account"
    }
  },
  "typeVersion": 1
}

================ Node #5266 ================
{
  "id": "8a9f7a20-187c-4494-8005-b10d066d04e2",
  "name": "Set-ex4",
  "type": "n8n-nodes-base.set",
  "position": [
    1060,
    1420
  ],
  "parameters": {
    "values": {
      "string": [
        {
          "name": "model",
          "value": "code-davinci-002"
        },
        {
          "name": "suffix",
          "value": "</svg>"
        },
        {
          "name": "prompt",
          "value": "=Create an HTML code with and SVG tag that contains random shapes of various colors. Include triangles, lines, ellipses and other shapes"
        }
      ]
    },
    "options": {},
    "keepOnlySet": true
  },
  "typeVersion": 1
}

================ Node #5267 ================
{
  "id": "68fcc6a2-761c-42ac-8778-313c8db7d53c",
  "name": "HTML-ex4",
  "type": "n8n-nodes-base.html",
  "position": [
    1420,
    1420
  ],
  "parameters": {
    "html": "{{$json.message.content }}"
  },
  "typeVersion": 1
}

================ Node #5268 ================
{
  "id": "1f70cf3f-b6a9-4ea7-9486-c7565e6951b7",
  "name": "Sticky Note7",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    900,
    1300
  ],
  "parameters": {
    "width": 739.309954504675,
    "height": 288.18470714667706,
    "content": "## ChatGPT example 4\n### Generate HTML code that contains SVG image"
  },
  "typeVersion": 1
}

================ Node #5269 ================
{
  "id": "d857acd9-ea74-44d2-ac89-66b1fac4645f",
  "name": "Sticky Note8",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    900,
    1640
  ],
  "parameters": {
    "width": 739.309954504675,
    "height": 288.18470714667706,
    "content": "## ChatGPT example 5\n### Provide several outputs. Useful for quick replies (i.e. in Gmail / Outlook)"
  },
  "typeVersion": 1
}

================ Node #5270 ================
{
  "id": "fe64533a-4cd4-4adc-a48a-8abf3f2d61d7",
  "name": "ChatGPT-ex",
  "type": "n8n-nodes-base.openAi",
  "position": [
    1160,
    1760
  ],
  "parameters": {
    "model": "gpt-3.5-turbo-0301",
    "prompt": {
      "messages": [
        {
          "role": "system",
          "content": "Act as an e-mail client. Provide a five to eight word answers to a given user messages."
        },
        {
          "content": "Hi There! My name is Jack.\n\nI'm sending you an overview of my pricelist attached.\nCould you please reply to me within 3 days?\n\nBest regards and have a nice day,\nJack"
        }
      ]
    },
    "options": {
      "n": 3,
      "maxTokens": 15,
      "temperature": 0.8
    },
    "resource": "chat"
  },
  "credentials": {
    "openAiApi": {
      "id": "63",
      "name": "OpenAi account"
    }
  },
  "typeVersion": 1
}

================ Node #5271 ================
{
  "id": "6c9f8a70-99ae-4310-8e6a-26cc6f75b3a2",
  "name": "LoadMP3",
  "type": "n8n-nodes-base.readBinaryFiles",
  "disabled": true,
  "position": [
    -80,
    380
  ],
  "parameters": {
    "fileSelector": "/home/node/.n8n/OpenAI-article/Using Science to Stop Your Mirror From Fogging Up.mp3"
  },
  "typeVersion": 1
}

================ Node #5272 ================
{
  "id": "0edc1996-6484-4e62-a47b-5666dfbb3546",
  "name": "Whisper-transcribe",
  "type": "n8n-nodes-base.httpRequest",
  "disabled": true,
  "position": [
    100,
    380
  ],
  "parameters": {
    "url": "https://api.openai.com/v1/audio/transcriptions",
    "method": "POST",
    "options": {},
    "sendBody": true,
    "contentType": "multipart-form-data",
    "authentication": "predefinedCredentialType",
    "bodyParameters": {
      "parameters": [
        {
          "name": "model",
          "value": "whisper-1"
        },
        {
          "name": "file",
          "parameterType": "formBinaryData",
          "inputDataFieldName": "data"
        }
      ]
    },
    "nodeCredentialType": "openAiApi"
  },
  "credentials": {
    "openAiApi": {
      "id": "63",
      "name": "OpenAi account"
    }
  },
  "typeVersion": 3
}

================ Node #5273 ================
{
  "id": "c12ba294-bdcd-4ece-8370-fa6a83a8ef0b",
  "name": "Sticky Note9",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    -840,
    260
  ],
  "parameters": {
    "width": 596.9600747621192,
    "height": 320.63203364295396,
    "content": "## Do not run the whole workflow, it's rather slow\n### Better execute the last node of each branch or simply disconnect branches that are not needed"
  },
  "typeVersion": 1
}

================ Node #5274 ================
{
  "id": "88c0f64c-a7cd-4f35-96dd-9eee4b1d6a1a",
  "name": "Generate reply",
  "type": "n8n-nodes-base.openAi",
  "position": [
    -480,
    2260
  ],
  "parameters": {
    "prompt": "=From: {{ $json.from.value }}\nTo: {{ $json.to.value }}\nSubject: {{ $json.subject }}\nBody: {{ $json.reply }}\n\n\nReply: ",
    "options": {
      "maxTokens": "={{ $('Configure').first().json.replyTokenSize }}"
    }
  },
  "credentials": {
    "openAiApi": {
      "id": "27",
      "name": "[UPDATE ME]"
    }
  },
  "typeVersion": 1
}

================ Node #5275 ================
{
  "id": "7105b689-9f9c-4354-aad9-8f1abb6c0a06",
  "name": "On email received",
  "type": "n8n-nodes-base.gmailTrigger",
  "position": [
    -2460,
    2680
  ],
  "parameters": {
    "simple": false,
    "filters": {},
    "options": {},
    "pollTimes": {
      "item": [
        {
          "mode": "everyMinute"
        }
      ]
    }
  },
  "credentials": {
    "gmailOAuth2": {
      "id": "26",
      "name": "[UPDATE ME]"
    }
  },
  "typeVersion": 1
}

================ Node #5276 ================
{
  "id": "ea18ed9a-0158-45e1-ac1b-1993ace4ff2c",
  "name": "Only continue for specific emails",
  "type": "n8n-nodes-base.if",
  "position": [
    -1360,
    2460
  ],
  "parameters": {
    "conditions": {
      "string": [
        {
          "value1": "={{ $('Configure').first().json.recipients.split(',') }}",
          "value2": "*",
          "operation": "contains"
        },
        {
          "value1": "={{ $('Configure').first().json.recipients.split(',') }}",
          "value2": "={{ $json.from.value[0].address }}",
          "operation": "contains"
        }
      ]
    },
    "combineOperation": "any"
  },
  "typeVersion": 1
}

================ Node #5277 ================
{
  "id": "d1425dff-0fc1-4a4b-9202-418ce30d7cd9",
  "name": "Configure",
  "type": "n8n-nodes-base.set",
  "position": [
    -1940,
    2800
  ],
  "parameters": {
    "values": {
      "number": [
        {
          "name": "maxTokenSize",
          "value": 4000
        },
        {
          "name": "replyTokenSize",
          "value": 300
        }
      ],
      "string": [
        {
          "name": "spreadsheetId"
        },
        {
          "name": "worksheetId"
        },
        {
          "name": "spreadsheetName",
          "value": "ChatGPT responses"
        },
        {
          "name": "worksheetName",
          "value": "Database"
        },
        {
          "name": "recipients",
          "value": "[UPDATE ME]"
        }
      ]
    },
    "options": {}
  },
  "typeVersion": 1
}

================ Node #5278 ================
{
  "id": "594f77e6-9e7e-4e93-b6e0-95fad57e42f0",
  "name": "Note5",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    -2060,
    2480
  ],
  "parameters": {
    "width": 330.0279884670691,
    "height": 929.4540475960038,
    "content": "### Configuration\nIf you decide to use your own spreadsheet, it is up to you to ensure all columns are present before running this workflow. A good way to do this is to run this workflow once with **empty** `spreadsheetid` and `worksheetId` variables (see the `Configure` node). Then map the output from `Store spreadsheet ID` to this node.\n\nIt is recommended that you specify the `spreadsheetId` and `worksheetId`, since relying solely on a workflow's static data is considered bad practice.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n__`spreadsheetId`__: The ID of the spreadsheet where Pipedrive deals will be stored.\n__`worksheetId`__: The ID of the worksheet where Pipedrive deals will be stored.\n__`spreadsheetName`(required)__: The human readable name of the spreadsheet where Pipedrive deals will be stored.\n__`worksheetName`(required)__: The human readable name of the worksheet in the spreadsheet where Pipedrive deals will be stored.\n__`recipients`(required)__: Comma-separated list of email recipients to send ChatGPT emails to. Use `*` to send ChatGPT response to every email address.\n__`maxTokenSize`(required)__: The maximum token size for the model you choose. See possible models from OpenAI [here](https://platform.openai.com/docs/models/gpt-3).\n__`replyTokenSize`(required)__: The reply's maximum token size. Default is 300. This determines how much text the AI will reply with."
  },
  "typeVersion": 1
}

================ Node #5279 ================
{
  "id": "2dc3e403-f2a0-43c2-a1e4-187d901d692f",
  "name": "Send reply to recipient",
  "type": "n8n-nodes-base.gmail",
  "position": [
    360,
    1860
  ],
  "parameters": {
    "message": "={{ $json.html }}",
    "options": {},
    "emailType": "html",
    "messageId": "={{ $node[\"On email received\"].json.id }}",
    "operation": "reply"
  },
  "credentials": {
    "gmailOAuth2": {
      "id": "26",
      "name": "[UPDATE ME]"
    }
  },
  "typeVersion": 2
}

================ Node #5280 ================
{
  "id": "f845aa4d-5542-4126-a42d-4e5afa1893d1",
  "name": "Generate UUID",
  "type": "n8n-nodes-base.crypto",
  "position": [
    -1140,
    2360
  ],
  "parameters": {
    "action": "generate",
    "dataPropertyName": "uuid"
  },
  "typeVersion": 1
}

================ Node #5281 ================
{
  "id": "3c468585-4546-439b-9e8a-efb7231277d8",
  "name": "Thanks for your response!",
  "type": "n8n-nodes-base.html",
  "position": [
    -1140,
    2980
  ],
  "parameters": {
    "html": "<!DOCTYPE html>\n\n<html>\n<head>\n <meta charset=\"UTF-8\" />\n <title>Thanks for your response!</title>\n</head>\n<body>\n <div class=\"container\">\n <h1>Thanks for your response!</h1>\n <h2>You can safely close this window.</h2>\n </div>\n</body>\n</html>\n\n<style>\n.container {\n background-color: #ffffff;\n text-align: center;\n padding: 16px;\n border-radius: 8px;\n}\n\nh1 {\n color: #ff6d5a;\n font-size: 24px;\n font-weight: bold;\n padding: 8px;\n}\n\nh2 {\n color: #909399;\n font-size: 18px;\n font-weight: bold;\n padding: 8px;\n}\n</style>\n\n<script>\nconsole.log(\"Hello World!\");\n</script>"
  },
  "typeVersion": 1
}

================ Node #5282 ================
{
  "id": "6b0bfa33-84ca-4b9c-98ec-c1bc08a1230d",
  "name": "Extract message content (advanced)",
  "type": "n8n-nodes-base.code",
  "position": [
    -920,
    2360
  ],
  "parameters": {
    "jsCode": "// source: https://gist.github.com/ikbelkirasan/2462073f6c7c760faa6fad7c6a0c4dc3\nvar EmailParser=function(t){var r={};function n(e){if(r[e])return r[e].exports;var o=r[e]={i:e,l:!1,exports:{}};return t[e].call(o.exports,o,o.exports,n),o.l=!0,o.exports}return n.m=t,n.c=r,n.d=function(t,r,e){n.o(t,r)||Object.defineProperty(t,r,{enumerable:!0,get:e})},n.r=function(t){\"undefined\"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:\"Module\"}),Object.defineProperty(t,\"__esModule\",{value:!0})},n.t=function(t,r){if(1&r&&(t=n(t)),8&r)return t;if(4&r&&\"object\"==typeof t&&t&&t.__esModule)return t;var e=Object.create(null);if(n.r(e),Object.defineProperty(e,\"default\",{enumerable:!0,value:t}),2&r&&\"string\"!=typeof t)for(var o in t)n.d(e,o,function(r){return t[r]}.bind(null,o));return e},n.n=function(t){var r=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(r,\"a\",r),r},n.o=function(t,r){return Object.prototype.hasOwnProperty.call(t,r)},n.p=\"\",n(n.s=59)}([function(t,r){var n=Array.isArray;t.exports=n},function(t,r,n){var e=n(31),o=\"object\"==typeof self&&self&&self.Object===Object&&self,u=e||o||Function(\"return this\")();t.exports=u},function(t,r,n){var e=n(74),o=n(79);t.exports=function(t,r){var n=o(t,r);return e(n)?n:void 0}},function(t,r){t.exports=function(t){return null!=t&&\"object\"==typeof t}},function(t,r){t.exports=function(t){var r=typeof t;return null!=t&&(\"object\"==r||\"function\"==r)}},function(t,r,n){var e=n(6),o=n(75),u=n(76),i=e?e.toStringTag:void 0;t.exports=function(t){return null==t?void 0===t?\"[object Undefined]\":\"[object Null]\":i&&i in Object(t)?o(t):u(t)}},function(t,r,n){var e=n(1).Symbol;t.exports=e},function(t,r,n){var e=n(35),o=n(99),u=n(14);t.exports=function(t){return u(t)?e(t):o(t)}},function(t,r,n){var e=n(64),o=n(65),u=n(66),i=n(67),c=n(68);function a(t){var r=-1,n=null==t?0:t.length;for(this.clear();++r<n;){var e=t[r];this.set(e[0],e[1])}}a.prototype.clear=e,a.prototype.delete=o,a.prototype.get=u,a.prototype.has=i,a.prototype.set=c,t.exports=a},function(t,r,n){var e=n(18);t.exports=function(t,r){for(var n=t.length;n--;)if(e(t[n][0],r))return n;return-1}},function(t,r,n){var e=n(2)(Object,\"create\");t.exports=e},function(t,r,n){var e=n(88);t.exports=function(t,r){var n=t.__data__;return e(r)?n[\"string\"==typeof r?\"string\":\"hash\"]:n.map}},function(t,r,n){var e=n(33),o=n(34);t.exports=function(t,r,n,u){var i=!n;n||(n={});for(var c=-1,a=r.length;++c<a;){var s=r[c],f=u?u(n[s],t[s],s,n,t):void 0;void 0===f&&(f=t[s]),i?o(n,s,f):e(n,s,f)}return n}},function(t,r){t.exports=function(t){return t.webpackPolyfill||(t.deprecate=function(){},t.paths=[],t.children||(t.children=[]),Object.defineProperty(t,\"loaded\",{enumerable:!0,get:function(){return t.l}}),Object.defineProperty(t,\"id\",{enumerable:!0,get:function(){return t.i}}),t.webpackPolyfill=1),t}},function(t,r,n){var e=n(30),o=n(22);t.exports=function(t){return null!=t&&o(t.length)&&!e(t)}},function(t,r,n){var e=n(109),o=n(19),u=n(110),i=n(111),c=n(112),a=n(5),s=n(32),f=s(e),p=s(o),l=s(u),v=s(i),b=s(c),h=a;(e&&\"[object DataView]\"!=h(new e(new ArrayBuffer(1)))||o&&\"[object Map]\"!=h(new o)||u&&\"[object Promise]\"!=h(u.resolve())||i&&\"[object Set]\"!=h(new i)||c&&\"[object WeakMap]\"!=h(new c))&&(h=function(t){var r=a(t),n=\"[object Object]\"==r?t.constructor:void 0,e=n?s(n):\"\";if(e)switch(e){case f:return\"[object DataView]\";case p:return\"[object Map]\";case l:return\"[object Promise]\";case v:return\"[object Set]\";case b:return\"[object WeakMap]\"}return r}),t.exports=h},function(t,r,n){var e=n(29);t.exports=function(t){if(\"string\"==typeof t||e(t))return t;var r=t+\"\";return\"0\"==r&&1/t==-1/0?\"-0\":r}},function(t,r,n){var e=n(8),o=n(69),u=n(70),i=n(71),c=n(72),a=n(73);function s(t){var r=this.__data__=new e(t);this.size=r.size}s.prototype.clear=o,s.prototype.delete=u,s.prototype.get=i,s.prototype.has=c,s.prototype.set=a,t.exports=s},function(t,r){t.exports=function(t,r){return t===r||t!=t&&r!=r}},function(t,r,n){var e=n(2)(n(1),\"Map\");t.exports=e},function(t,r,n){var e=n(80),o=n(87),u=n(89),i=n(90),c=n(91);function a(t){var r=-1,n=null==t?0:t.length;for(this.clear();++r<n;){var e=t[r];this.set(e[0],e[1])}}a.prototype.clear=e,a.prototype.delete=o,a.prototype.get=u,a.prototype.has=i,a.prototype.set=c,t.exports=a},function(t,r,n){(function(t){var e=n(1),o=n(97),u=r&&!r.nodeType&&r,i=u&&\"object\"==typeof t&&t&&!t.nodeType&&t,c=i&&i.exports===u?e.Buffer:void 0,a=(c?c.isBuffer:void 0)||o;t.exports=a}).call(this,n(13)(t))},function(t,r){t.exports=function(t){return\"number\"==typeof t&&t>-1&&t%1==0&&t<=9007199254740991}},function(t,r){t.exports=function(t){return function(r){return t(r)}}},function(t,r,n){(function(t){var e=n(31),o=r&&!r.nodeType&&r,u=o&&\"object\"==typeof t&&t&&!t.nodeType&&t,i=u&&u.exports===o&&e.process,c=function(){try{var t=u&&u.require&&u.require(\"util\").types;return t||i&&i.binding&&i.binding(\"util\")}catch(t){}}();t.exports=c}).call(this,n(13)(t))},function(t,r){var n=Object.prototype;t.exports=function(t){var r=t&&t.constructor;return t===(\"function\"==typeof r&&r.prototype||n)}},function(t,r,n){var e=n(41),o=n(42),u=Object.prototype.propertyIsEnumerable,i=Object.getOwnPropertySymbols,c=i?function(t){return null==t?[]:(t=Object(t),e(i(t),(function(r){return u.call(t,r)})))}:o;t.exports=c},function(t,r,n){var e=n(48);t.exports=function(t){var r=new t.constructor(t.byteLength);return new e(r).set(new e(t)),r}},function(t,r,n){var e=n(0),o=n(29),u=/\\.|\\[(?:[^[\\]]*|([\"'])(?:(?!\\1)[^\\\\]|\\\\.)*?\\1)\\]/,i=/^\\w*$/;t.exports=function(t,r){if(e(t))return!1;var n=typeof t;return!(\"number\"!=n&&\"symbol\"!=n&&\"boolean\"!=n&&null!=t&&!o(t))||(i.test(t)||!u.test(t)||null!=r&&t in Object(r))}},function(t,r,n){var e=n(5),o=n(3);t.exports=function(t){return\"symbol\"==typeof t||o(t)&&\"[object Symbol]\"==e(t)}},function(t,r,n){var e=n(5),o=n(4);t.exports=function(t){if(!o(t))return!1;var r=e(t);return\"[object Function]\"==r||\"[object GeneratorFunction]\"==r||\"[object AsyncFunction]\"==r||\"[object Proxy]\"==r}},function(t,r){var n=\"object\"==typeof global&&global&&global.Object===Object&&global;t.exports=n},function(t,r){var n=Function.prototype.toString;t.exports=function(t){if(null!=t){try{return n.call(t)}catch(t){}try{return t+\"\"}catch(t){}}return\"\"}},function(t,r,n){var e=n(34),o=n(18),u=Object.prototype.hasOwnProperty;t.exports=function(t,r,n){var i=t[r];u.call(t,r)&&o(i,n)&&(void 0!==n||r in t)||e(t,r,n)}},function(t,r,n){var e=n(93);t.exports=function(t,r,n){\"__proto__\"==r&&e?e(t,r,{configurable:!0,enumerable:!0,value:n,writable:!0}):t[r]=n}},function(t,r,n){var e=n(95),o=n(36),u=n(0),i=n(21),c=n(37),a=n(38),s=Object.prototype.hasOwnProperty;t.exports=function(t,r){var n=u(t),f=!n&&o(t),p=!n&&!f&&i(t),l=!n&&!f&&!p&&a(t),v=n||f||p||l,b=v?e(t.length,String):[],h=b.length;for(var y in t)!r&&!s.call(t,y)||v&&(\"length\"==y||p&&(\"offset\"==y||\"parent\"==y)||l&&(\"buffer\"==y||\"byteLength\"==y||\"byteOffset\"==y)||c(y,h))||b.push(y);return b}},function(t,r,n){var e=n(96),o=n(3),u=Object.prototype,i=u.hasOwnProperty,c=u.propertyIsEnumerable,a=e(function(){return arguments}())?e:function(t){return o(t)&&i.call(t,\"callee\")&&!c.call(t,\"callee\")};t.exports=a},function(t,r){var n=/^(?:0|[1-9]\\d*)$/;t.exports=function(t,r){var e=typeof t;return!!(r=null==r?9007199254740991:r)&&(\"number\"==e||\"symbol\"!=e&&n.test(t))&&t>-1&&t%1==0&&t<r}},function(t,r,n){var e=n(98),o=n(23),u=n(24),i=u&&u.isTypedArray,c=i?o(i):e;t.exports=c},function(t,r){t.exports=function(t,r){return function(n){return t(r(n))}}},function(t,r,n){var e=n(35),o=n(102),u=n(14);t.exports=function(t){return u(t)?e(t,!0):o(t)}},function(t,r){t.exports=function(t,r){for(var n=-1,e=null==t?0:t.length,o=0,u=[];++n<e;){var i=t[n];r(i,n,t)&&(u[o++]=i)}return u}},function(t,r){t.exports=function(){return[]}},function(t,r,n){var e=n(44),o=n(45),u=n(26),i=n(42),c=Object.getOwnPropertySymbols?function(t){for(var r=[];t;)e(r,u(t)),t=o(t);return r}:i;t.exports=c},function(t,r){t.exports=function(t,r){for(var n=-1,e=r.length,o=t.length;++n<e;)t[o+n]=r[n];return t}},function(t,r,n){var e=n(39)(Object.getPrototypeOf,Object);t.exports=e},function(t,r,n){var e=n(47),o=n(26),u=n(7);t.exports=function(t){return e(t,u,o)}},function(t,r,n){var e=n(44),o=n(0);t.exports=function(t,r,n){var u=r(t);return o(t)?u:e(u,n(t))}},function(t,r,n){var e=n(1).Uint8Array;t.exports=e},function(t,r,n){var e=n(41),o=n(125),u=n(51),i=n(0);t.exports=function(t,r){return(i(t)?e:o)(t,u(r,3))}},function(t,r,n){var e=n(126),o=n(129)(e);t.exports=o},function(t,r,n){var e=n(130),o=n(143),u=n(153),i=n(0),c=n(154);t.exports=function(t){return\"function\"==typeof t?t:null==t?u:\"object\"==typeof t?i(t)?o(t[0],t[1]):e(t):c(t)}},function(t,r,n){var e=n(132),o=n(3);t.exports=function t(r,n,u,i,c){return r===n||(null==r||null==n||!o(r)&&!o(n)?r!=r&&n!=n:e(r,n,u,i,t,c))}},function(t,r,n){var e=n(133),o=n(136),u=n(137);t.exports=function(t,r,n,i,c,a){var s=1&n,f=t.length,p=r.length;if(f!=p&&!(s&&p>f))return!1;var l=a.get(t);if(l&&a.get(r))return l==r;var v=-1,b=!0,h=2&n?new e:void 0;for(a.set(t,r),a.set(r,t);++v<f;){var y=t[v],x=r[v];if(i)var d=s?i(x,y,v,r,t,a):i(y,x,v,t,r,a);if(void 0!==d){if(d)continue;b=!1;break}if(h){if(!o(r,(function(t,r){if(!u(h,r)&&(y===t||c(y,t,n,i,a)))return h.push(r)}))){b=!1;break}}else if(y!==x&&!c(y,x,n,i,a)){b=!1;break}}return a.delete(t),a.delete(r),b}},function(t,r,n){var e=n(4);t.exports=function(t){return t==t&&!e(t)}},function(t,r){t.exports=function(t,r){return function(n){return null!=n&&(n[t]===r&&(void 0!==r||t in Object(n)))}}},function(t,r,n){var e=n(57),o=n(16);t.exports=function(t,r){for(var n=0,u=(r=e(r,t)).length;null!=t&&n<u;)t=t[o(r[n++])];return n&&n==u?t:void 0}},function(t,r,n){var e=n(0),o=n(28),u=n(145),i=n(148);t.exports=function(t,r){return e(t)?t:o(t,r)?[t]:u(i(t))}},function(t,r){t.exports=function(t,r){for(var n=-1,e=null==t?0:t.length,o=Array(e);++n<e;)o[n]=r(t[n],n,t);return o}},function(t,r,n){var e=n(60);t.exports=function(t,r){var n=(new e).parse(t);return r?n?n.getVisibleText():\"\":n}},function(t,r,n){var e=n(61),o=n(159),u=n(160),i=n(49),c=n(161);const a=/(?:^\\s*--|^\\s*__|^-\\w|^-- $)|(?:^Sent from my (?:\\s*\\w+){1,4}$)|(?:^={30,}$)$/,s=/>+$/,f=[/^\\s*(On(?:(?!.*On\\b|\\bwrote:)[\\s\\S])+wrote:)$/m,/^\\s*(Le(?:(?!.*Le\\b|\\b\u00e9crit:)[\\s\\S])+\u00e9crit :)$/m,/^\\s*(El(?:(?!.*El\\b|\\bescribi\u00f3:)[\\s\\S])+escribi\u00f3:)$/m,/^\\s*(Il(?:(?!.*Il\\b|\\bscritto:)[\\s\\S])+scritto:)$/m,/^\\s*(Op\\s[\\S\\s]+?schreef[\\S\\s]+:)$/m,/^\\s*((W\\sdniu|Dnia)\\s[\\S\\s]+?(pisze|napisa\u0142(\\(a\\))?):)$/mu,/^\\s*(Den\\s.+\\sskrev\\s.+:)$/m,/^\\s*(Am\\s.+\\sum\\s.+\\sschrieb\\s.+:)$/m,/^(\u5728[\\S\\s]+\u5199\u9053\uff1a)$/m,/^(20[0-9]{2}\\..+\\s\uc791\uc131:)$/m,/^(20[0-9]{2}\\/.+\u306e\u30e1\u30c3\u30bb\u30fc\u30b8:)$/m,/^(.+\\s<.+>\\sschrieb:)$/m,/^\\s*(From\\s?:.+\\s?(\\[|<).+(\\]|>))/mu,/^\\s*(De\\s?:.+\\s?(\\[|<).+(\\]|>))/mu,/^\\s*(Van\\s?:.+\\s?(\\[|<).+(\\]|>))/mu,/^\\s*(Da\\s?:.+\\s?(\\[|<).+(\\]|>))/mu,/^(20[0-9]{2}-(?:0?[1-9]|1[012])-(?:0?[0-9]|[1-2][0-9]|3[01]|[1-9])\\s[0-2]?[0-9]:\\d{2}\\s[\\S\\s]+?:)$/m,/^\\s*([a-z]{3,4}\\.[\\s\\S]+\\sskrev[\\s\\S]+:)$/m];\n/**\n * Represents a fragment that hasn't been constructed (yet)\n * @license MIT License\n */\nclass p{constructor(){this.lines=[],this.isHidden=!1,this.isSignature=!1,this.isQuoted=!1}toFragment(){var t=c.reverse(this.lines.join(\"\\n\")).replace(/^\\n/,\"\");return new o(t,this.isHidden,this.isSignature,this.isQuoted)}}t.exports=class{constructor(t,r,n){this._signatureRegex=t||a,this._quotedLineRegex=r||s,this._quoteHeadersRegex=n||f}parse(t){if(\"string\"!=typeof t)return new e([]);var r=[];for(var n of(t=t.replace(\"\\r\\n\",\"\\n\"),this._quoteHeadersRegex)){var o=t.match(n);o&&o.length>=2&&(t=t.replace(o[1],o[1].replace(/\\n/g,\" \")))}var i=null;for(var a of c.reverse(t).split(\"\\n\")){if(a=a.replace(/\\n+$/,\"\"),this._isSignature(a)||(a=a.replace(/^\\s+/,\"\")),i){var s=i.lines[i.lines.length-1];this._isSignature(s)?(i.isSignature=!0,this._addFragment(i,r),i=null):0===a.length&&this._isQuoteHeader(s)&&(i.isQuoted=!0,this._addFragment(i,r),i=null)}var f=this._isQuote(a);null!==i&&this._isFragmentLine(i,a,f)||(i&&this._addFragment(i,r),(i=new p).isQuoted=f),i.lines.push(a)}i&&this._addFragment(i,r);var l=[];for(var v of r)l.push(v.toFragment());return new e(u(l))}_addFragment(t,r){(t.isQuoted||t.isSignature||0===t.lines.join(\"\").length)&&(t.isHidden=!0),r.push(t)}_isFragmentLine(t,r,n){return t.isQuoted===n||!!t.isQuoted&&(this._isQuoteHeader(r)||0===r.length)}_isSignature(t){return this._signatureRegex.test(c.reverse(t))}_isQuote(t){return this._quotedLineRegex.test(t)}_isQuoteHeader(t){return i(this._quoteHeadersRegex,r=>r.test(c.reverse(t))).length>0}}},function(t,r,n){var e=n(62),o=n(49),u=n(157);t.exports=class{constructor(t){this._fragments=t}getFragments(){return e(this._fragments)}getVisibleText(){var t=o(this._fragments,t=>!t.isHidden());return u(t,t=>t.getContent()).join(\"\\n\")}}},function(t,r,n){var e=n(63);t.exports=function(t){return e(t,5)}},function(t,r,n){var e=n(17),o=n(92),u=n(33),i=n(94),c=n(101),a=n(104),s=n(105),f=n(106),p=n(107),l=n(46),v=n(108),b=n(15),h=n(113),y=n(114),x=n(119),d=n(0),j=n(21),_=n(121),g=n(4),m=n(123),O=n(7),w={};w[\"[object Arguments]\"]=w[\"[object Array]\"]=w[\"[object ArrayBuffer]\"]=w[\"[object DataView]\"]=w[\"[object Boolean]\"]=w[\"[object Date]\"]=w[\"[object Float32Array]\"]=w[\"[object Float64Array]\"]=w[\"[object Int8Array]\"]=w[\"[object Int16Array]\"]=w[\"[object Int32Array]\"]=w[\"[object Map]\"]=w[\"[object Number]\"]=w[\"[object Object]\"]=w[\"[object RegExp]\"]=w[\"[object Set]\"]=w[\"[object String]\"]=w[\"[object Symbol]\"]=w[\"[object Uint8Array]\"]=w[\"[object Uint8ClampedArray]\"]=w[\"[object Uint16Array]\"]=w[\"[object Uint32Array]\"]=!0,w[\"[object Error]\"]=w[\"[object Function]\"]=w[\"[object WeakMap]\"]=!1,t.exports=function t(r,n,F,A,S,D){var $,P=1&n,z=2&n,E=4&n;if(F&&($=S?F(r,A,S,D):F(r)),void 0!==$)return $;if(!g(r))return r;var k=d(r);if(k){if($=h(r),!P)return s(r,$)}else{var B=b(r),M=\"[object Function]\"==B||\"[object GeneratorFunction]\"==B;if(j(r))return a(r,P);if(\"[object Object]\"==B||\"[object Arguments]\"==B||M&&!S){if($=z||M?{}:x(r),!P)return z?p(r,c($,r)):f(r,i($,r))}else{if(!w[B])return S?r:{};$=y(r,B,P)}}D||(D=new e);var I=D.get(r);if(I)return I;D.set(r,$),m(r)?r.forEach((function(e){$.add(t(e,n,F,e,r,D))})):_(r)&&r.forEach((function(e,o){$.set(o,t(e,n,F,o,r,D))}));var C=E?z?v:l:z?keysIn:O,Q=k?void 0:C(r);return o(Q||r,(function(e,o){Q&&(e=r[o=e]),u($,o,t(e,n,F,o,r,D))})),$}},function(t,r){t.exports=function(){this.__data__=[],this.size=0}},function(t,r,n){var e=n(9),o=Array.prototype.splice;t.exports=function(t){var r=this.__data__,n=e(r,t);return!(n<0)&&(n==r.length-1?r.pop():o.call(r,n,1),--this.size,!0)}},function(t,r,n){var e=n(9);t.exports=function(t){var r=this.__data__,n=e(r,t);return n<0?void 0:r[n][1]}},function(t,r,n){var e=n(9);t.exports=function(t){return e(this.__data__,t)>-1}},function(t,r,n){var e=n(9);t.exports=function(t,r){var n=this.__data__,o=e(n,t);return o<0?(++this.size,n.push([t,r])):n[o][1]=r,this}},function(t,r,n){var e=n(8);t.exports=function(){this.__data__=new e,this.size=0}},function(t,r){t.exports=function(t){var r=this.__data__,n=r.delete(t);return this.size=r.size,n}},function(t,r){t.exports=function(t){return this.__data__.get(t)}},function(t,r){t.exports=function(t){return this.__data__.has(t)}},function(t,r,n){var e=n(8),o=n(19),u=n(20);t.exports=function(t,r){var n=this.__data__;if(n instanceof e){var i=n.__data__;if(!o||i.length<199)return i.push([t,r]),this.size=++n.size,this;n=this.__data__=new u(i)}return n.set(t,r),this.size=n.size,this}},function(t,r,n){var e=n(30),o=n(77),u=n(4),i=n(32),c=/^\\[object .+?Constructor\\]$/,a=Function.prototype,s=Object.prototype,f=a.toString,p=s.hasOwnProperty,l=RegExp(\"^\"+f.call(p).replace(/[\\\\^$.*+?()[\\]{}|]/g,\"\\\\$&\").replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g,\"$1.*?\")+\"$\");t.exports=function(t){return!(!u(t)||o(t))&&(e(t)?l:c).test(i(t))}},function(t,r,n){var e=n(6),o=Object.prototype,u=o.hasOwnProperty,i=o.toString,c=e?e.toStringTag:void 0;t.exports=function(t){var r=u.call(t,c),n=t[c];try{t[c]=void 0;var e=!0}catch(t){}var o=i.call(t);return e&&(r?t[c]=n:delete t[c]),o}},function(t,r){var n=Object.prototype.toString;t.exports=function(t){return n.call(t)}},function(t,r,n){var e,o=n(78),u=(e=/[^.]+$/.exec(o&&o.keys&&o.keys.IE_PROTO||\"\"))?\"Symbol(src)_1.\"+e:\"\";t.exports=function(t){return!!u&&u in t}},function(t,r,n){var e=n(1)[\"__core-js_shared__\"];t.exports=e},function(t,r){t.exports=function(t,r){return null==t?void 0:t[r]}},function(t,r,n){var e=n(81),o=n(8),u=n(19);t.exports=function(){this.size=0,this.__data__={hash:new e,map:new(u||o),string:new e}}},function(t,r,n){var e=n(82),o=n(83),u=n(84),i=n(85),c=n(86);function a(t){var r=-1,n=null==t?0:t.length;for(this.clear();++r<n;){var e=t[r];this.set(e[0],e[1])}}a.prototype.clear=e,a.prototype.delete=o,a.prototype.get=u,a.prototype.has=i,a.prototype.set=c,t.exports=a},function(t,r,n){var e=n(10);t.exports=function(){this.__data__=e?e(null):{},this.size=0}},function(t,r){t.exports=function(t){var r=this.has(t)&&delete this.__data__[t];return this.size-=r?1:0,r}},function(t,r,n){var e=n(10),o=Object.prototype.hasOwnProperty;t.exports=function(t){var r=this.__data__;if(e){var n=r[t];return\"__lodash_hash_undefined__\"===n?void 0:n}return o.call(r,t)?r[t]:void 0}},function(t,r,n){var e=n(10),o=Object.prototype.hasOwnProperty;t.exports=function(t){var r=this.__data__;return e?void 0!==r[t]:o.call(r,t)}},function(t,r,n){var e=n(10);t.exports=function(t,r){var n=this.__data__;return this.size+=this.has(t)?0:1,n[t]=e&&void 0===r?\"__lodash_hash_undefined__\":r,this}},function(t,r,n){var e=n(11);t.exports=function(t){var r=e(this,t).delete(t);return this.size-=r?1:0,r}},function(t,r){t.exports=function(t){var r=typeof t;return\"string\"==r||\"number\"==r||\"symbol\"==r||\"boolean\"==r?\"__proto__\"!==t:null===t}},function(t,r,n){var e=n(11);t.exports=function(t){return e(this,t).get(t)}},function(t,r,n){var e=n(11);t.exports=function(t){return e(this,t).has(t)}},function(t,r,n){var e=n(11);t.exports=function(t,r){var n=e(this,t),o=n.size;return n.set(t,r),this.size+=n.size==o?0:1,this}},function(t,r){t.exports=function(t,r){for(var n=-1,e=null==t?0:t.length;++n<e&&!1!==r(t[n],n,t););return t}},function(t,r,n){var e=n(2),o=function(){try{var t=e(Object,\"defineProperty\");return t({},\"\",{}),t}catch(t){}}();t.exports=o},function(t,r,n){var e=n(12),o=n(7);t.exports=function(t,r){return t&&e(r,o(r),t)}},function(t,r){t.exports=function(t,r){for(var n=-1,e=Array(t);++n<t;)e[n]=r(n);return e}},function(t,r,n){var e=n(5),o=n(3);t.exports=function(t){return o(t)&&\"[object Arguments]\"==e(t)}},function(t,r){t.exports=function(){return!1}},function(t,r,n){var e=n(5),o=n(22),u=n(3),i={};i[\"[object Float32Array]\"]=i[\"[object Float64Array]\"]=i[\"[object Int8Array]\"]=i[\"[object Int16Array]\"]=i[\"[object Int32Array]\"]=i[\"[object Uint8Array]\"]=i[\"[object Uint8ClampedArray]\"]=i[\"[object Uint16Array]\"]=i[\"[object Uint32Array]\"]=!0,i[\"[object Arguments]\"]=i[\"[object Array]\"]=i[\"[object ArrayBuffer]\"]=i[\"[object Boolean]\"]=i[\"[object DataView]\"]=i[\"[object Date]\"]=i[\"[object Error]\"]=i[\"[object Function]\"]=i[\"[object Map]\"]=i[\"[object Number]\"]=i[\"[object Object]\"]=i[\"[object RegExp]\"]=i[\"[object Set]\"]=i[\"[object String]\"]=i[\"[object WeakMap]\"]=!1,t.exports=function(t){return u(t)&&o(t.length)&&!!i[e(t)]}},function(t,r,n){var e=n(25),o=n(100),u=Object.prototype.hasOwnProperty;t.exports=function(t){if(!e(t))return o(t);var r=[];for(var n in Object(t))u.call(t,n)&&\"constructor\"!=n&&r.push(n);return r}},function(t,r,n){var e=n(39)(Object.keys,Object);t.exports=e},function(t,r,n){var e=n(12),o=n(40);t.exports=function(t,r){return t&&e(r,o(r),t)}},function(t,r,n){var e=n(4),o=n(25),u=n(103),i=Object.prototype.hasOwnProperty;t.exports=function(t){if(!e(t))return u(t);var r=o(t),n=[];for(var c in t)(\"constructor\"!=c||!r&&i.call(t,c))&&n.push(c);return n}},function(t,r){t.exports=function(t){var r=[];if(null!=t)for(var n in Object(t))r.push(n);return r}},function(t,r,n){(function(t){var e=n(1),o=r&&!r.nodeType&&r,u=o&&\"object\"==typeof t&&t&&!t.nodeType&&t,i=u&&u.exports===o?e.Buffer:void 0,c=i?i.allocUnsafe:void 0;t.exports=function(t,r){if(r)return t.slice();var n=t.length,e=c?c(n):new t.constructor(n);return t.copy(e),e}}).call(this,n(13)(t))},function(t,r){t.exports=function(t,r){var n=-1,e=t.length;for(r||(r=Array(e));++n<e;)r[n]=t[n];return r}},function(t,r,n){var e=n(12),o=n(26);t.exports=function(t,r){return e(t,o(t),r)}},function(t,r,n){var e=n(12),o=n(43);t.exports=function(t,r){return e(t,o(t),r)}},function(t,r,n){var e=n(47),o=n(43),u=n(40);t.exports=function(t){return e(t,u,o)}},function(t,r,n){var e=n(2)(n(1),\"DataView\");t.exports=e},function(t,r,n){var e=n(2)(n(1),\"Promise\");t.exports=e},function(t,r,n){var e=n(2)(n(1),\"Set\");t.exports=e},function(t,r,n){var e=n(2)(n(1),\"WeakMap\");t.exports=e},function(t,r){var n=Object.prototype.hasOwnProperty;t.exports=function(t){var r=t.length,e=new t.constructor(r);return r&&\"string\"==typeof t[0]&&n.call(t,\"index\")&&(e.index=t.index,e.input=t.input),e}},function(t,r,n){var e=n(27),o=n(115),u=n(116),i=n(117),c=n(118);t.exports=function(t,r,n){var a=t.constructor;switch(r){case\"[object ArrayBuffer]\":return e(t);case\"[object Boolean]\":case\"[object Date]\":return new a(+t);case\"[object DataView]\":return o(t,n);case\"[object Float32Array]\":case\"[object Float64Array]\":case\"[object Int8Array]\":case\"[object Int16Array]\":case\"[object Int32Array]\":case\"[object Uint8Array]\":case\"[object Uint8ClampedArray]\":case\"[object Uint16Array]\":case\"[object Uint32Array]\":return c(t,n);case\"[object Map]\":return new a;case\"[object Number]\":case\"[object String]\":return new a(t);case\"[object RegExp]\":return u(t);case\"[object Set]\":return new a;case\"[object Symbol]\":return i(t)}}},function(t,r,n){var e=n(27);t.exports=function(t,r){var n=r?e(t.buffer):t.buffer;return new t.constructor(n,t.byteOffset,t.byteLength)}},function(t,r){var n=/\\w*$/;t.exports=function(t){var r=new t.constructor(t.source,n.exec(t));return r.lastIndex=t.lastIndex,r}},function(t,r,n){var e=n(6),o=e?e.prototype:void 0,u=o?o.valueOf:void 0;t.exports=function(t){return u?Object(u.call(t)):{}}},function(t,r,n){var e=n(27);t.exports=function(t,r){var n=r?e(t.buffer):t.buffer;return new t.constructor(n,t.byteOffset,t.length)}},function(t,r,n){var e=n(120),o=n(45),u=n(25);t.exports=function(t){return\"function\"!=typeof t.constructor||u(t)?{}:e(o(t))}},function(t,r,n){var e=n(4),o=Object.create,u=function(){function t(){}return function(r){if(!e(r))return{};if(o)return o(r);t.prototype=r;var n=new t;return t.prototype=void 0,n}}();t.exports=u},function(t,r,n){var e=n(122),o=n(23),u=n(24),i=u&&u.isMap,c=i?o(i):e;t.exports=c},function(t,r,n){var e=n(15),o=n(3);t.exports=function(t){return o(t)&&\"[object Map]\"==e(t)}},function(t,r,n){var e=n(124),o=n(23),u=n(24),i=u&&u.isSet,c=i?o(i):e;t.exports=c},function(t,r,n){var e=n(15),o=n(3);t.exports=function(t){return o(t)&&\"[object Set]\"==e(t)}},function(t,r,n){var e=n(50);t.exports=function(t,r){var n=[];return e(t,(function(t,e,o){r(t,e,o)&&n.push(t)})),n}},function(t,r,n){var e=n(127),o=n(7);t.exports=function(t,r){return t&&e(t,r,o)}},function(t,r,n){var e=n(128)();t.exports=e},function(t,r){t.exports=function(t){return function(r,n,e){for(var o=-1,u=Object(r),i=e(r),c=i.length;c--;){var a=i[t?c:++o];if(!1===n(u[a],a,u))break}return r}}},function(t,r,n){var e=n(14);t.exports=function(t,r){return function(n,o){if(null==n)return n;if(!e(n))return t(n,o);for(var u=n.length,i=r?u:-1,c=Object(n);(r?i--:++i<u)&&!1!==o(c[i],i,c););return n}}},function(t,r,n){var e=n(131),o=n(142),u=n(55);t.exports=function(t){var r=o(t);return 1==r.length&&r[0][2]?u(r[0][0],r[0][1]):function(n){return n===t||e(n,t,r)}}},function(t,r,n){var e=n(17),o=n(52);t.exports=function(t,r,n,u){var i=n.length,c=i,a=!u;if(null==t)return!c;for(t=Object(t);i--;){var s=n[i];if(a&&s[2]?s[1]!==t[s[0]]:!(s[0]in t))return!1}for(;++i<c;){var f=(s=n[i])[0],p=t[f],l=s[1];if(a&&s[2]){if(void 0===p&&!(f in t))return!1}else{var v=new e;if(u)var b=u(p,l,f,t,r,v);if(!(void 0===b?o(l,p,3,u,v):b))return!1}}return!0}},function(t,r,n){var e=n(17),o=n(53),u=n(138),i=n(141),c=n(15),a=n(0),s=n(21),f=n(38),p=\"[object Object]\",l=Object.prototype.hasOwnProperty;t.exports=function(t,r,n,v,b,h){var y=a(t),x=a(r),d=y?\"[object Array]\":c(t),j=x?\"[object Array]\":c(r),_=(d=\"[object Arguments]\"==d?p:d)==p,g=(j=\"[object Arguments]\"==j?p:j)==p,m=d==j;if(m&&s(t)){if(!s(r))return!1;y=!0,_=!1}if(m&&!_)return h||(h=new e),y||f(t)?o(t,r,n,v,b,h):u(t,r,d,n,v,b,h);if(!(1&n)){var O=_&&l.call(t,\"__wrapped__\"),w=g&&l.call(r,\"__wrapped__\");if(O||w){var F=O?t.value():t,A=w?r.value():r;return h||(h=new e),b(F,A,n,v,h)}}return!!m&&(h||(h=new e),i(t,r,n,v,b,h))}},function(t,r,n){var e=n(20),o=n(134),u=n(135);function i(t){var r=-1,n=null==t?0:t.length;for(this.__data__=new e;++r<n;)this.add(t[r])}i.prototype.add=i.prototype.push=o,i.prototype.has=u,t.exports=i},function(t,r){t.exports=function(t){return this.__data__.set(t,\"__lodash_hash_undefined__\"),this}},function(t,r){t.exports=function(t){return this.__data__.has(t)}},function(t,r){t.exports=function(t,r){for(var n=-1,e=null==t?0:t.length;++n<e;)if(r(t[n],n,t))return!0;return!1}},function(t,r){t.exports=function(t,r){return t.has(r)}},function(t,r,n){var e=n(6),o=n(48),u=n(18),i=n(53),c=n(139),a=n(140),s=e?e.prototype:void 0,f=s?s.valueOf:void 0;t.exports=function(t,r,n,e,s,p,l){switch(n){case\"[object DataView]\":if(t.byteLength!=r.byteLength||t.byteOffset!=r.byteOffset)return!1;t=t.buffer,r=r.buffer;case\"[object ArrayBuffer]\":return!(t.byteLength!=r.byteLength||!p(new o(t),new o(r)));case\"[object Boolean]\":case\"[object Date]\":case\"[object Number]\":return u(+t,+r);case\"[object Error]\":return t.name==r.name&&t.message==r.message;case\"[object RegExp]\":case\"[object String]\":return t==r+\"\";case\"[object Map]\":var v=c;case\"[object Set]\":var b=1&e;if(v||(v=a),t.size!=r.size&&!b)return!1;var h=l.get(t);if(h)return h==r;e|=2,l.set(t,r);var y=i(v(t),v(r),e,s,p,l);return l.delete(t),y;case\"[object Symbol]\":if(f)return f.call(t)==f.call(r)}return!1}},function(t,r){t.exports=function(t){var r=-1,n=Array(t.size);return t.forEach((function(t,e){n[++r]=[e,t]})),n}},function(t,r){t.exports=function(t){var r=-1,n=Array(t.size);return t.forEach((function(t){n[++r]=t})),n}},function(t,r,n){var e=n(46),o=Object.prototype.hasOwnProperty;t.exports=function(t,r,n,u,i,c){var a=1&n,s=e(t),f=s.length;if(f!=e(r).length&&!a)return!1;for(var p=f;p--;){var l=s[p];if(!(a?l in r:o.call(r,l)))return!1}var v=c.get(t);if(v&&c.get(r))return v==r;var b=!0;c.set(t,r),c.set(r,t);for(var h=a;++p<f;){var y=t[l=s[p]],x=r[l];if(u)var d=a?u(x,y,l,r,t,c):u(y,x,l,t,r,c);if(!(void 0===d?y===x||i(y,x,n,u,c):d)){b=!1;break}h||(h=\"constructor\"==l)}if(b&&!h){var j=t.constructor,_=r.constructor;j==_||!(\"constructor\"in t)||!(\"constructor\"in r)||\"function\"==typeof j&&j instanceof j&&\"function\"==typeof _&&_ instanceof _||(b=!1)}return c.delete(t),c.delete(r),b}},function(t,r,n){var e=n(54),o=n(7);t.exports=function(t){for(var r=o(t),n=r.length;n--;){var u=r[n],i=t[u];r[n]=[u,i,e(i)]}return r}},function(t,r,n){var e=n(52),o=n(144),u=n(150),i=n(28),c=n(54),a=n(55),s=n(16);t.exports=function(t,r){return i(t)&&c(r)?a(s(t),r):function(n){var i=o(n,t);return void 0===i&&i===r?u(n,t):e(r,i,3)}}},function(t,r,n){var e=n(56);t.exports=function(t,r,n){var o=null==t?void 0:e(t,r);return void 0===o?n:o}},function(t,r,n){var e=n(146),o=/[^.[\\]]+|\\[(?:(-?\\d+(?:\\.\\d+)?)|([\"'])((?:(?!\\2)[^\\\\]|\\\\.)*?)\\2)\\]|(?=(?:\\.|\\[\\])(?:\\.|\\[\\]|$))/g,u=/\\\\(\\\\)?/g,i=e((function(t){var r=[];return 46===t.charCodeAt(0)&&r.push(\"\"),t.replace(o,(function(t,n,e,o){r.push(e?o.replace(u,\"$1\"):n||t)})),r}));t.exports=i},function(t,r,n){var e=n(147);t.exports=function(t){var r=e(t,(function(t){return 500===n.size&&n.clear(),t})),n=r.cache;return r}},function(t,r,n){var e=n(20);function o(t,r){if(\"function\"!=typeof t||null!=r&&\"function\"!=typeof r)throw new TypeError(\"Expected a function\");var n=function(){var e=arguments,o=r?r.apply(this,e):e[0],u=n.cache;if(u.has(o))return u.get(o);var i=t.apply(this,e);return n.cache=u.set(o,i)||u,i};return n.cache=new(o.Cache||e),n}o.Cache=e,t.exports=o},function(t,r,n){var e=n(149);t.exports=function(t){return null==t?\"\":e(t)}},function(t,r,n){var e=n(6),o=n(58),u=n(0),i=n(29),c=e?e.prototype:void 0,a=c?c.toString:void 0;t.exports=function t(r){if(\"string\"==typeof r)return r;if(u(r))return o(r,t)+\"\";if(i(r))return a?a.call(r):\"\";var n=r+\"\";return\"0\"==n&&1/r==-1/0?\"-0\":n}},function(t,r,n){var e=n(151),o=n(152);t.exports=function(t,r){return null!=t&&o(t,r,e)}},function(t,r){t.exports=function(t,r){return null!=t&&r in Object(t)}},function(t,r,n){var e=n(57),o=n(36),u=n(0),i=n(37),c=n(22),a=n(16);t.exports=function(t,r,n){for(var s=-1,f=(r=e(r,t)).length,p=!1;++s<f;){var l=a(r[s]);if(!(p=null!=t&&n(t,l)))break;t=t[l]}return p||++s!=f?p:!!(f=null==t?0:t.length)&&c(f)&&i(l,f)&&(u(t)||o(t))}},function(t,r){t.exports=function(t){return t}},function(t,r,n){var e=n(155),o=n(156),u=n(28),i=n(16);t.exports=function(t){return u(t)?e(i(t)):o(t)}},function(t,r){t.exports=function(t){return function(r){return null==r?void 0:r[t]}}},function(t,r,n){var e=n(56);t.exports=function(t){return function(r){return e(r,t)}}},function(t,r,n){var e=n(58),o=n(51),u=n(158),i=n(0);t.exports=function(t,r){return(i(t)?e:u)(t,o(r,3))}},function(t,r,n){var e=n(50),o=n(14);t.exports=function(t,r){var n=-1,u=o(t)?Array(t.length):[];return e(t,(function(t,e,o){u[++n]=r(t,e,o)})),u}},function(t,r){t.exports=class{constructor(t,r,n,e){this._content=t,this._isHidden=r,this._isSignature=n,this._isQuoted=e}getContent(){return this._content}isHidden(){return this._isHidden}isSignature(){return this._isSignature}isQuoted(){return this._isQuoted}isEmpty(){return 0===this.getContent().replace(\"\\n\",\"\").length}}},function(t,r){var n=Array.prototype.reverse;t.exports=function(t){return null==t?t:n.call(t)}},function(t,r,n){(function(t){var e;/*! https://mths.be/esrever v0.2.0 by @mathias */!function(o){var u=r,i=(t&&t.exports,\"object\"==typeof global&&global);i.global!==i&&i.window;var c=/([\\0-\\u02FF\\u0370-\\u1AAF\\u1B00-\\u1DBF\\u1E00-\\u20CF\\u2100-\\uD7FF\\uE000-\\uFE1F\\uFE30-\\uFFFF]|[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]|[\\uD800-\\uDBFF](?![\\uDC00-\\uDFFF])|(?:[^\\uD800-\\uDBFF]|^)[\\uDC00-\\uDFFF])([\\u0300-\\u036F\\u1AB0-\\u1AFF\\u1DC0-\\u1DFF\\u20D0-\\u20FF\\uFE20-\\uFE2F]+)/g,a=/([\\uD800-\\uDBFF])([\\uDC00-\\uDFFF])/g,s=function(t){for(var r=\"\",n=(t=t.replace(c,(function(t,r,n){return s(n)+r})).replace(a,\"$2$1\")).length;n--;)r+=t.charAt(n);return r},f={version:\"0.2.0\",reverse:s};void 0===(e=function(){return f}.call(r,n,r,t))||(t.exports=e)}()}).call(this,n(13)(t))}]);\n\nfunction extractReplyContent(message) {\n const email = EmailParser(message);\n const reply = (email.getFragments()[0].getContent().trim());\n return reply;\n}\n\nfor (const item of $input.all()) {\n item.json.reply = extractReplyContent(item.json.text);\n}\n\nreturn $input.all();"
  },
  "typeVersion": 1
}

================ Node #5283 ================
{
  "id": "4f6998f6-88a8-4b8b-acea-33c3f33d04dd",
  "name": "If spreadsheet doesn't exist",
  "type": "n8n-nodes-base.if",
  "position": [
    1420,
    2500
  ],
  "parameters": {
    "conditions": {
      "string": [
        {
          "value1": "={{ $json[\"error\"] }}",
          "value2": "The resource you are requesting could not be found"
        }
      ]
    }
  },
  "typeVersion": 1
}

================ Node #5284 ================
{
  "id": "f3564023-a1c5-42f5-923d-a8e98c95c284",
  "name": "Successfully created or updated row",
  "type": "n8n-nodes-base.noOp",
  "position": [
    1660,
    2640
  ],
  "parameters": {},
  "typeVersion": 1
}

================ Node #5285 ================
{
  "id": "55869b16-3a98-4127-83ec-bcfdf21c2daf",
  "name": "Note1",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    980,
    2140
  ],
  "parameters": {
    "width": 778.177339901478,
    "height": 289.16256157635416,
    "content": "### Create spreadsheet and populate with headers and deal information\nA spreadsheet is created if the spreadsheet does not exist. The spreadsheet ID is stored in the `$getWorkflowStaticData('global')` variable. Using `Extract current deal` node, the deal information is formatted for the sending to the new spreadsheet."
  },
  "typeVersion": 1
}

================ Node #5286 ================
{
  "id": "8994f1e7-dd0d-4247-89fd-befcc9c511b0",
  "name": "Note2",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    1220,
    2680
  ],
  "parameters": {
    "width": 301.18226600985224,
    "height": 114.67980295566498,
    "content": "### Tip: Deleting old spreadsheets\nIf you ever want to start over, delete the old spreadsheet, __making sure that it is also deleted from Google Drive's trash__."
  },
  "typeVersion": 1
}

================ Node #5287 ================
{
  "id": "cd8c9657-3380-4e25-907e-baa1c02c0793",
  "name": "Note3",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    400,
    2140
  ],
  "parameters": {
    "width": 260.3940886699507,
    "height": 333.34975369458095,
    "content": "### `Get spreadsheet ID`\n\n\n\n\n\n\n\n\n\n\n\n\n\nThe spreadsheet ID is stored in this workflow's static data. If you want to refresh the static data you will need to copy this entire workflow into a new workflow."
  },
  "typeVersion": 1
}

================ Node #5288 ================
{
  "id": "ab0348c2-f688-42d3-815b-63290e95baad",
  "name": "Create spreadsheet",
  "type": "n8n-nodes-base.googleSheets",
  "position": [
    1020,
    2260
  ],
  "parameters": {
    "title": "={{ $(\"Configure\").first().json[\"spreadsheetName\"] }}",
    "options": {},
    "resource": "spreadsheet",
    "sheetsUi": {
      "sheetValues": [
        {
          "title": "={{ $(\"Configure\").first().json[\"worksheetName\"] }}"
        }
      ]
    }
  },
  "credentials": {
    "googleSheetsOAuth2Api": {
      "id": "7",
      "name": "[UPDATE ME]"
    }
  },
  "typeVersion": 3
}

================ Node #5289 ================
{
  "id": "c56522b2-5eca-497d-afbb-d713abd8d810",
  "name": "Store spreadsheet ID",
  "type": "n8n-nodes-base.code",
  "position": [
    1220,
    2260
  ],
  "parameters": {
    "jsCode": "const staticData = $getWorkflowStaticData('global');\n\nstaticData.googleSheetsSpreadsheetId = $('Create spreadsheet').first().json.spreadsheetId\nstaticData.googleSheetsWorksheetId = $('Create spreadsheet').first().json.sheets[0].properties.sheetId\n\nreturn {\n \"spreadsheetId\": staticData.googleSheetsSpreadsheetId,\n \"worksheetId\": staticData.googleSheetsWorksheetId\n}"
  },
  "typeVersion": 1
}

================ Node #5290 ================
{
  "id": "ba62fd4d-912b-4b37-9fda-2f80cdeb65f8",
  "name": "Paste data",
  "type": "n8n-nodes-base.googleSheets",
  "position": [
    1620,
    2260
  ],
  "parameters": {
    "options": {
      "cellFormat": "RAW"
    },
    "dataMode": "autoMapInputData",
    "operation": "append",
    "sheetName": {
      "__rl": true,
      "mode": "id",
      "value": "={{ $node[\"Store spreadsheet ID\"].json[\"worksheetId\"] }}"
    },
    "documentId": {
      "__rl": true,
      "mode": "id",
      "value": "={{ $node[\"Store spreadsheet ID\"].json[\"spreadsheetId\"] }}"
    }
  },
  "credentials": {
    "googleSheetsOAuth2Api": {
      "id": "7",
      "name": "[UPDATE ME]"
    }
  },
  "typeVersion": 3
}

================ Node #5291 ================
{
  "id": "a8be831a-f2be-48c9-a661-bc8c5cde6444",
  "name": "If no sheet IDs",
  "type": "n8n-nodes-base.if",
  "position": [
    800,
    2380
  ],
  "parameters": {
    "conditions": {
      "string": [
        {
          "value1": "={{ $json[\"spreadsheetId\"] }}",
          "operation": "isEmpty"
        },
        {
          "value1": "={{ $json[\"worksheetId\"] }}",
          "operation": "isEmpty"
        }
      ]
    },
    "combineOperation": "any"
  },
  "typeVersion": 1
}

================ Node #5292 ================
{
  "id": "efdb343d-f5bf-4ba4-bc27-850b9e7935ac",
  "name": "Create or update rows",
  "type": "n8n-nodes-base.googleSheets",
  "position": [
    1220,
    2500
  ],
  "parameters": {
    "options": {
      "cellFormat": "RAW"
    },
    "dataMode": "autoMapInputData",
    "operation": "appendOrUpdate",
    "sheetName": {
      "__rl": true,
      "mode": "id",
      "value": "={{ $node[\"If no sheet IDs\"].json[\"worksheetId\"] }}"
    },
    "documentId": {
      "__rl": true,
      "mode": "id",
      "value": "={{ $node[\"If no sheet IDs\"].json[\"spreadsheetId\"] }}"
    },
    "columnToMatchOn": "ID"
  },
  "credentials": {
    "googleSheetsOAuth2Api": {
      "id": "7",
      "name": "[UPDATE ME]"
    }
  },
  "typeVersion": 3,
  "continueOnFail": true
}

================ Node #5293 ================
{
  "id": "091ad4fa-21aa-42e0-abc5-17221cdf8fb7",
  "name": "Get data from `Format data`",
  "type": "n8n-nodes-base.code",
  "position": [
    1020,
    2500
  ],
  "parameters": {
    "jsCode": "return $('Format data').all()"
  },
  "typeVersion": 1
}

================ Node #5294 ================
{
  "id": "97071540-59b2-48dd-8f88-ab44446832fc",
  "name": "Get data from `Format data` node",
  "type": "n8n-nodes-base.code",
  "position": [
    1420,
    2260
  ],
  "parameters": {
    "jsCode": "return $('Format data').all()"
  },
  "typeVersion": 1
}

================ Node #5295 ================
{
  "id": "ecf03802-51c8-43b1-84d8-5ed5826fd444",
  "name": "Format data",
  "type": "n8n-nodes-base.set",
  "position": [
    -40,
    2380
  ],
  "parameters": {
    "values": {
      "string": [
        {
          "name": "ID",
          "value": "={{ $node[\"Generate UUID\"].json.uuid }}"
        },
        {
          "name": "Initial message",
          "value": "={{ $node[\"Extract message content (advanced)\"].json.reply }}"
        },
        {
          "name": "Generated reply",
          "value": "={{ $node[\"Generate reply\"].json.text }}"
        },
        {
          "name": "Good response?"
        }
      ]
    },
    "options": {},
    "keepOnlySet": true
  },
  "typeVersion": 1
}

================ Node #5296 ================
{
  "id": "9eedd7b7-ec4e-4dbf-a257-33e73bdff9c1",
  "name": "Send email reply",
  "type": "n8n-nodes-base.noOp",
  "position": [
    -40,
    1860
  ],
  "parameters": {},
  "typeVersion": 1
}

================ Node #5297 ================
{
  "id": "8e2f4a3b-d224-4248-9682-184a646e022f",
  "name": "On feedback given",
  "type": "n8n-nodes-base.webhook",
  "position": [
    -2460,
    2940
  ],
  "webhookId": "e2aa55fb-618a-4478-805d-d6da46b908d1",
  "parameters": {
    "path": "e2aa55fb-618a-4478-805d-d6da46b908d1",
    "options": {},
    "responseMode": "responseNode"
  },
  "typeVersion": 1
}

================ Node #5298 ================
{
  "id": "87506e44-21aa-4f08-82f9-f47a24ddb9ce",
  "name": "Send feedback for fine-tuned data",
  "type": "n8n-nodes-base.googleSheets",
  "position": [
    -100,
    2980
  ],
  "parameters": {
    "options": {},
    "fieldsUi": {
      "values": [
        {
          "column": "Good response?",
          "fieldValue": "={{ $node[\"On feedback given\"].json.query.feedback }}"
        }
      ]
    },
    "operation": "update",
    "sheetName": {
      "__rl": true,
      "mode": "id",
      "value": "={{ $json[\"worksheetId\"] }}"
    },
    "documentId": {
      "__rl": true,
      "mode": "id",
      "value": "={{ $json[\"spreadsheetId\"] }}"
    },
    "valueToMatchOn": "={{ $node[\"On feedback given\"].json.query.id }}",
    "columnToMatchOn": "ID"
  },
  "credentials": {
    "googleSheetsOAuth2Api": {
      "id": "7",
      "name": "[UPDATE ME]"
    }
  },
  "typeVersion": 3
}

================ Node #5299 ================
{
  "id": "d2a720d4-8487-4dfa-bdb8-6b59368e44bc",
  "name": "Show HTML page",
  "type": "n8n-nodes-base.respondToWebhook",
  "position": [
    -920,
    2980
  ],
  "parameters": {
    "options": {
      "responseCode": 200
    },
    "respondWith": "text",
    "responseBody": "={{ $json.html }}"
  },
  "typeVersion": 1
}

================ Node #5300 ================
{
  "id": "2da7a7b1-e96d-4759-b3cb-13558e2ad1d4",
  "name": "Get sheet IDs #1",
  "type": "n8n-nodes-base.code",
  "position": [
    480,
    2200
  ],
  "parameters": {
    "jsCode": "const staticData = $getWorkflowStaticData('global');\n\nreturn {\n \"spreadsheetId\": staticData.googleSheetsSpreadsheetId,\n \"worksheetId\": staticData.googleSheetsWorksheetId\n}"
  },
  "typeVersion": 1
}

================ Node #5301 ================
{
  "id": "08ddeed5-fefe-4acd-918a-00d1fd5a5392",
  "name": "Note",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    -480,
    2780
  ],
  "parameters": {
    "width": 260.3940886699507,
    "height": 333.34975369458095,
    "content": "### `Get spreadsheet ID`\n\n\n\n\n\n\n\n\n\n\n\n\n\nThe spreadsheet ID is stored in this workflow's static data. If you want to refresh the static data you will need to copy this entire workflow into a new workflow."
  },
  "typeVersion": 1
}

================ Node #5302 ================
{
  "id": "49d77f89-3c1e-4e86-93e8-ae7a566802b7",
  "name": "If no spreadsheet in configuration #2",
  "type": "n8n-nodes-base.if",
  "position": [
    -700,
    2980
  ],
  "parameters": {
    "conditions": {
      "string": [
        {
          "value1": "={{ $('Configure').first().json.spreadsheetId }}",
          "operation": "isEmpty"
        }
      ]
    }
  },
  "typeVersion": 1
}

================ Node #5303 ================
{
  "id": "e3b8f696-41eb-46e1-a4b1-6ba2d219aa45",
  "name": "Store specific sheet IDs #2",
  "type": "n8n-nodes-base.code",
  "position": [
    -400,
    3180
  ],
  "parameters": {
    "jsCode": "const staticData = $getWorkflowStaticData('global');\n\nstaticData.googleSheetsSpreadsheetId = $('Configure').all()[0].json.spreadsheetId\nstaticData.googleSheetsWorksheetId = $('Configure').all()[0].json.worksheetId\n\nreturn {\n \"spreadsheetId\": staticData.googleSheetsSpreadsheetId,\n \"worksheetId\": staticData.googleSheetsWorksheetId\n}"
  },
  "typeVersion": 1
}

================ Node #5304 ================
{
  "id": "44d37f76-af16-4507-b1a1-76fadf530806",
  "name": "Get sheet IDs #2",
  "type": "n8n-nodes-base.code",
  "position": [
    -400,
    2840
  ],
  "parameters": {
    "jsCode": "const staticData = $getWorkflowStaticData('global');\n\nreturn {\n \"spreadsheetId\": staticData.googleSheetsSpreadsheetId,\n \"worksheetId\": staticData.googleSheetsWorksheetId\n}"
  },
  "typeVersion": 1
}

================ Node #5305 ================
{
  "id": "fae8cbc5-7462-4eb0-9f60-85e8e7cfd10e",
  "name": "If no spreadsheet in configuration #1",
  "type": "n8n-nodes-base.if",
  "position": [
    180,
    2380
  ],
  "parameters": {
    "conditions": {
      "string": [
        {
          "value1": "={{ $('Configure').first().json.spreadsheetId }}",
          "operation": "isEmpty"
        }
      ]
    }
  },
  "typeVersion": 1
}

================ Node #5306 ================
{
  "id": "67312347-74c0-4ce4-a78c-615da6937bcf",
  "name": "Store specific sheet IDs #1",
  "type": "n8n-nodes-base.code",
  "position": [
    480,
    2540
  ],
  "parameters": {
    "jsCode": "const staticData = $getWorkflowStaticData('global');\n\nstaticData.googleSheetsSpreadsheetId = $('Configure').all()[0].json.spreadsheetId\nstaticData.googleSheetsWorksheetId = $('Configure').all()[0].json.worksheetId\n\nreturn {\n \"spreadsheetId\": staticData.googleSheetsSpreadsheetId,\n \"worksheetId\": staticData.googleSheetsWorksheetId\n}"
  },
  "typeVersion": 1
}

================ Node #5307 ================
{
  "id": "400eae76-7b17-48de-a49f-8b0cbc9db1f8",
  "name": "Email template",
  "type": "n8n-nodes-base.html",
  "position": [
    160,
    1860
  ],
  "parameters": {
    "html": "<html>\n <head>\n <meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" />\n <title>Template for ChatGPT email</title>\n <style>\n /* cspell:disable-file */\n /* webkit printing magic: print all background colors */\n html {\n -webkit-print-color-adjust: exact;\n }\n * {\n box-sizing: border-box;\n -webkit-print-color-adjust: exact;\n }\n\n html,\n body {\n margin: 0;\n padding: 0;\n }\n @media only screen {\n body {\n margin: 2em auto;\n max-width: 900px;\n color: rgb(55, 53, 47);\n }\n }\n\n body {\n line-height: 1.5;\n white-space: pre-wrap;\n }\n\n a,\n a.visited {\n color: inherit;\n text-decoration: underline;\n }\n\n .pdf-relative-link-path {\n font-size: 80%;\n color: #444;\n }\n\n h1,\n h2,\n h3 {\n letter-spacing: -0.01em;\n line-height: 1.2;\n font-weight: 600;\n margin-bottom: 0;\n }\n\n .page-title {\n font-size: 2.5rem;\n font-weight: 700;\n margin-top: 0;\n margin-bottom: 0.75em;\n }\n\n h1 {\n font-size: 1.875rem;\n margin-top: 1.875rem;\n }\n\n h2 {\n font-size: 1.5rem;\n margin-top: 1.5rem;\n }\n\n h3 {\n font-size: 1.25rem;\n margin-top: 1.25rem;\n }\n\n .source {\n border: 1px solid #ddd;\n border-radius: 3px;\n padding: 1.5em;\n word-break: break-all;\n }\n\n .callout {\n border-radius: 3px;\n padding: 1rem;\n }\n\n figure {\n margin: 1.25em 0;\n page-break-inside: avoid;\n }\n\n figcaption {\n opacity: 0.5;\n font-size: 85%;\n margin-top: 0.5em;\n }\n\n mark {\n background-color: transparent;\n }\n\n .indented {\n padding-left: 1.5em;\n }\n\n hr {\n background: transparent;\n display: block;\n width: 100%;\n height: 1px;\n visibility: visible;\n border: none;\n border-bottom: 1px solid rgba(55, 53, 47, 0.09);\n }\n\n img {\n max-width: 100%;\n }\n\n @media only print {\n img {\n max-height: 100vh;\n object-fit: contain;\n }\n }\n\n @page {\n margin: 1in;\n }\n\n .collection-content {\n font-size: 0.875rem;\n }\n\n .column-list {\n display: flex;\n justify-content: space-between;\n }\n\n .column {\n padding: 0 1em;\n }\n\n .column:first-child {\n padding-left: 0;\n }\n\n .column:last-child {\n padding-right: 0;\n }\n\n .table_of_contents-item {\n display: block;\n font-size: 0.875rem;\n line-height: 1.3;\n padding: 0.125rem;\n }\n\n .table_of_contents-indent-1 {\n margin-left: 1.5rem;\n }\n\n .table_of_contents-indent-2 {\n margin-left: 3rem;\n }\n\n .table_of_contents-indent-3 {\n margin-left: 4.5rem;\n }\n\n .table_of_contents-link {\n text-decoration: none;\n opacity: 0.7;\n border-bottom: 1px solid rgba(55, 53, 47, 0.18);\n }\n\n table,\n th,\n td {\n border: 1px solid rgba(55, 53, 47, 0.09);\n border-collapse: collapse;\n }\n\n table {\n border-left: none;\n border-right: none;\n }\n\n th,\n td {\n font-weight: normal;\n padding: 0.25em 0.5em;\n line-height: 1.5;\n min-height: 1.5em;\n text-align: left;\n }\n\n th {\n color: rgba(55, 53, 47, 0.6);\n }\n\n ol,\n ul {\n margin: 0;\n margin-block-start: 0.6em;\n margin-block-end: 0.6em;\n }\n\n li > ol:first-child,\n li > ul:first-child {\n margin-block-start: 0.6em;\n }\n\n ul > li {\n list-style: disc;\n }\n\n ul.to-do-list {\n text-indent: -1.7em;\n }\n\n ul.to-do-list > li {\n list-style: none;\n }\n\n .to-do-children-checked {\n text-decoration: line-through;\n opacity: 0.375;\n }\n\n ul.toggle > li {\n list-style: none;\n }\n\n ul {\n padding-inline-start: 1.7em;\n }\n\n ul > li {\n padding-left: 0.1em;\n }\n\n ol {\n padding-inline-start: 1.6em;\n }\n\n ol > li {\n padding-left: 0.2em;\n }\n\n .mono ol {\n padding-inline-start: 2em;\n }\n\n .mono ol > li {\n text-indent: -0.4em;\n }\n\n .toggle {\n padding-inline-start: 0em;\n list-style-type: none;\n }\n\n /* Indent toggle children */\n .toggle > li > details {\n padding-left: 1.7em;\n }\n\n .toggle > li > details > summary {\n margin-left: -1.1em;\n }\n\n .selected-value {\n display: inline-block;\n padding: 0 0.5em;\n background: rgba(206, 205, 202, 0.5);\n border-radius: 3px;\n margin-right: 0.5em;\n margin-top: 0.3em;\n margin-bottom: 0.3em;\n white-space: nowrap;\n }\n\n .collection-title {\n display: inline-block;\n margin-right: 1em;\n }\n\n .simple-table {\n margin-top: 1em;\n font-size: 0.875rem;\n empty-cells: show;\n }\n .simple-table td {\n height: 29px;\n min-width: 120px;\n }\n\n .simple-table th {\n height: 29px;\n min-width: 120px;\n }\n\n .simple-table-header-color {\n background: rgb(247, 246, 243);\n color: black;\n }\n .simple-table-header {\n font-weight: 500;\n }\n\n time {\n opacity: 0.5;\n }\n\n .icon {\n display: inline-block;\n max-width: 1.2em;\n max-height: 1.2em;\n text-decoration: none;\n vertical-align: text-bottom;\n margin-right: 0.5em;\n }\n\n img.icon {\n border-radius: 3px;\n }\n\n .user-icon {\n width: 1.5em;\n height: 1.5em;\n border-radius: 100%;\n margin-right: 0.5rem;\n }\n\n .user-icon-inner {\n font-size: 0.8em;\n }\n\n .text-icon {\n border: 1px solid #000;\n text-align: center;\n }\n\n .page-cover-image {\n display: block;\n object-fit: cover;\n width: 100%;\n max-height: 30vh;\n }\n\n .page-header-icon {\n font-size: 3rem;\n margin-bottom: 1rem;\n }\n\n .page-header-icon-with-cover {\n margin-top: -0.72em;\n margin-left: 0.07em;\n }\n\n .page-header-icon img {\n border-radius: 3px;\n }\n\n .link-to-page {\n margin: 1em 0;\n padding: 0;\n border: none;\n font-weight: 500;\n }\n\n p > .user {\n opacity: 0.5;\n }\n\n td > .user,\n td > time {\n white-space: nowrap;\n }\n\n input[type=\"checkbox\"] {\n transform: scale(1.5);\n margin-right: 0.6em;\n vertical-align: middle;\n }\n\n p {\n margin-top: 0.5em;\n margin-bottom: 0.5em;\n }\n\n .image {\n border: none;\n margin: 1.5em 0;\n padding: 0;\n border-radius: 0;\n text-align: center;\n }\n\n .code,\n code {\n background: rgba(135, 131, 120, 0.15);\n border-radius: 3px;\n padding: 0.2em 0.4em;\n border-radius: 3px;\n font-size: 85%;\n tab-size: 2;\n }\n\n code {\n color: #eb5757;\n }\n\n .code {\n padding: 1.5em 1em;\n }\n\n .code-wrap {\n white-space: pre-wrap;\n word-break: break-all;\n }\n\n .code > code {\n background: none;\n padding: 0;\n font-size: 100%;\n color: inherit;\n }\n\n blockquote {\n font-size: 1.25em;\n margin: 1em 0;\n padding-left: 1em;\n border-left: 3px solid rgb(55, 53, 47);\n }\n\n .bookmark {\n text-decoration: none;\n max-height: 8em;\n padding: 0;\n display: flex;\n width: 100%;\n align-items: stretch;\n }\n\n .bookmark-title {\n font-size: 0.85em;\n overflow: hidden;\n text-overflow: ellipsis;\n height: 1.75em;\n white-space: nowrap;\n }\n\n .bookmark-text {\n display: flex;\n flex-direction: column;\n }\n\n .bookmark-info {\n flex: 4 1 180px;\n padding: 12px 14px 14px;\n display: flex;\n flex-direction: column;\n justify-content: space-between;\n }\n\n .bookmark-image {\n width: 33%;\n flex: 1 1 180px;\n display: block;\n position: relative;\n object-fit: cover;\n border-radius: 1px;\n }\n\n .bookmark-description {\n color: rgba(55, 53, 47, 0.6);\n font-size: 0.75em;\n overflow: hidden;\n max-height: 4.5em;\n word-break: break-word;\n }\n\n .bookmark-href {\n font-size: 0.75em;\n margin-top: 0.25em;\n }\n\n .sans {\n font-family: ui-sans-serif, -apple-system, BlinkMacSystemFont,\n \"Segoe UI\", Helvetica, \"Apple Color Emoji\", Arial, sans-serif,\n \"Segoe UI Emoji\", \"Segoe UI Symbol\";\n }\n .code {\n font-family: \"SFMono-Regular\", Menlo, Consolas, \"PT Mono\",\n \"Liberation Mono\", Courier, monospace;\n }\n .serif {\n font-family: Lyon-Text, Georgia, ui-serif, serif;\n }\n .mono {\n font-family: iawriter-mono, Nitti, Menlo, Courier, monospace;\n }\n .pdf .sans {\n font-family: Inter, ui-sans-serif, -apple-system, BlinkMacSystemFont,\n \"Segoe UI\", Helvetica, \"Apple Color Emoji\", Arial, sans-serif,\n \"Segoe UI Emoji\", \"Segoe UI Symbol\", \"Twemoji\", \"Noto Color Emoji\",\n \"Noto Sans CJK JP\";\n }\n .pdf:lang(zh-CN) .sans {\n font-family: Inter, ui-sans-serif, -apple-system, BlinkMacSystemFont,\n \"Segoe UI\", Helvetica, \"Apple Color Emoji\", Arial, sans-serif,\n \"Segoe UI Emoji\", \"Segoe UI Symbol\", \"Twemoji\", \"Noto Color Emoji\",\n \"Noto Sans CJK SC\";\n }\n .pdf:lang(zh-TW) .sans {\n font-family: Inter, ui-sans-serif, -apple-system, BlinkMacSystemFont,\n \"Segoe UI\", Helvetica, \"Apple Color Emoji\", Arial, sans-serif,\n \"Segoe UI Emoji\", \"Segoe UI Symbol\", \"Twemoji\", \"Noto Color Emoji\",\n \"Noto Sans CJK TC\";\n }\n .pdf:lang(ko-KR) .sans {\n font-family: Inter, ui-sans-serif, -apple-system, BlinkMacSystemFont,\n \"Segoe UI\", Helvetica, \"Apple Color Emoji\", Arial, sans-serif,\n \"Segoe UI Emoji\", \"Segoe UI Symbol\", \"Twemoji\", \"Noto Color Emoji\",\n \"Noto Sans CJK KR\";\n }\n .pdf .code {\n font-family: Source Code Pro, \"SFMono-Regular\", Menlo, Consolas,\n \"PT Mono\", \"Liberation Mono\", Courier, monospace, \"Twemoji\",\n \"Noto Color Emoji\", \"Noto Sans Mono CJK JP\";\n }\n .pdf:lang(zh-CN) .code {\n font-family: Source Code Pro, \"SFMono-Regular\", Menlo, Consolas,\n \"PT Mono\", \"Liberation Mono\", Courier, monospace, \"Twemoji\",\n \"Noto Color Emoji\", \"Noto Sans Mono CJK SC\";\n }\n .pdf:lang(zh-TW) .code {\n font-family: Source Code Pro, \"SFMono-Regular\", Menlo, Consolas,\n \"PT Mono\", \"Liberation Mono\", Courier, monospace, \"Twemoji\",\n \"Noto Color Emoji\", \"Noto Sans Mono CJK TC\";\n }\n .pdf:lang(ko-KR) .code {\n font-family: Source Code Pro, \"SFMono-Regular\", Menlo, Consolas,\n \"PT Mono\", \"Liberation Mono\", Courier, monospace, \"Twemoji\",\n \"Noto Color Emoji\", \"Noto Sans Mono CJK KR\";\n }\n .pdf .serif {\n font-family: PT Serif, Lyon-Text, Georgia, ui-serif, serif, \"Twemoji\",\n \"Noto Color Emoji\", \"Noto Serif CJK JP\";\n }\n .pdf:lang(zh-CN) .serif {\n font-family: PT Serif, Lyon-Text, Georgia, ui-serif, serif, \"Twemoji\",\n \"Noto Color Emoji\", \"Noto Serif CJK SC\";\n }\n .pdf:lang(zh-TW) .serif {\n font-family: PT Serif, Lyon-Text, Georgia, ui-serif, serif, \"Twemoji\",\n \"Noto Color Emoji\", \"Noto Serif CJK TC\";\n }\n .pdf:lang(ko-KR) .serif {\n font-family: PT Serif, Lyon-Text, Georgia, ui-serif, serif, \"Twemoji\",\n \"Noto Color Emoji\", \"Noto Serif CJK KR\";\n }\n .pdf .mono {\n font-family: PT Mono, iawriter-mono, Nitti, Menlo, Courier, monospace,\n \"Twemoji\", \"Noto Color Emoji\", \"Noto Sans Mono CJK JP\";\n }\n .pdf:lang(zh-CN) .mono {\n font-family: PT Mono, iawriter-mono, Nitti, Menlo, Courier, monospace,\n \"Twemoji\", \"Noto Color Emoji\", \"Noto Sans Mono CJK SC\";\n }\n .pdf:lang(zh-TW) .mono {\n font-family: PT Mono, iawriter-mono, Nitti, Menlo, Courier, monospace,\n \"Twemoji\", \"Noto Color Emoji\", \"Noto Sans Mono CJK TC\";\n }\n .pdf:lang(ko-KR) .mono {\n font-family: PT Mono, iawriter-mono, Nitti, Menlo, Courier, monospace,\n \"Twemoji\", \"Noto Color Emoji\", \"Noto Sans Mono CJK KR\";\n }\n .highlight-default {\n color: rgba(55, 53, 47, 1);\n }\n .highlight-gray {\n color: rgba(120, 119, 116, 1);\n fill: rgba(120, 119, 116, 1);\n }\n .highlight-brown {\n color: rgba(159, 107, 83, 1);\n fill: rgba(159, 107, 83, 1);\n }\n .highlight-orange {\n color: rgba(217, 115, 13, 1);\n fill: rgba(217, 115, 13, 1);\n }\n .highlight-yellow {\n color: rgba(203, 145, 47, 1);\n fill: rgba(203, 145, 47, 1);\n }\n .highlight-teal {\n color: rgba(68, 131, 97, 1);\n fill: rgba(68, 131, 97, 1);\n }\n .highlight-blue {\n color: rgba(51, 126, 169, 1);\n fill: rgba(51, 126, 169, 1);\n }\n .highlight-purple {\n color: rgba(144, 101, 176, 1);\n fill: rgba(144, 101, 176, 1);\n }\n .highlight-pink {\n color: rgba(193, 76, 138, 1);\n fill: rgba(193, 76, 138, 1);\n }\n .highlight-red {\n color: rgba(212, 76, 71, 1);\n fill: rgba(212, 76, 71, 1);\n }\n .highlight-gray_background {\n background: rgba(241, 241, 239, 1);\n }\n .highlight-brown_background {\n background: rgba(244, 238, 238, 1);\n }\n .highlight-orange_background {\n background: rgba(251, 236, 221, 1);\n }\n .highlight-yellow_background {\n background: rgba(251, 243, 219, 1);\n }\n .highlight-teal_background {\n background: rgba(237, 243, 236, 1);\n }\n .highlight-blue_background {\n background: rgba(231, 243, 248, 1);\n }\n .highlight-purple_background {\n background: rgba(244, 240, 247, 0.8);\n }\n .highlight-pink_background {\n background: rgba(249, 238, 243, 0.8);\n }\n .highlight-red_background {\n background: rgba(253, 235, 236, 1);\n }\n .block-color-default {\n color: inherit;\n fill: inherit;\n }\n .block-color-gray {\n color: rgba(120, 119, 116, 1);\n fill: rgba(120, 119, 116, 1);\n }\n .block-color-brown {\n color: rgba(159, 107, 83, 1);\n fill: rgba(159, 107, 83, 1);\n }\n .block-color-orange {\n color: rgba(217, 115, 13, 1);\n fill: rgba(217, 115, 13, 1);\n }\n .block-color-yellow {\n color: rgba(203, 145, 47, 1);\n fill: rgba(203, 145, 47, 1);\n }\n .block-color-teal {\n color: rgba(68, 131, 97, 1);\n fill: rgba(68, 131, 97, 1);\n }\n .block-color-blue {\n color: rgba(51, 126, 169, 1);\n fill: rgba(51, 126, 169, 1);\n }\n .block-color-purple {\n color: rgba(144, 101, 176, 1);\n fill: rgba(144, 101, 176, 1);\n }\n .block-color-pink {\n color: rgba(193, 76, 138, 1);\n fill: rgba(193, 76, 138, 1);\n }\n .block-color-red {\n color: rgba(212, 76, 71, 1);\n fill: rgba(212, 76, 71, 1);\n }\n .block-color-gray_background {\n background: rgba(241, 241, 239, 1);\n }\n .block-color-brown_background {\n background: rgba(244, 238, 238, 1);\n }\n .block-color-orange_background {\n background: rgba(251, 236, 221, 1);\n }\n .block-color-yellow_background {\n background: rgba(251, 243, 219, 1);\n }\n .block-color-teal_background {\n background: rgba(237, 243, 236, 1);\n }\n .block-color-blue_background {\n background: rgba(231, 243, 248, 1);\n }\n .block-color-purple_background {\n background: rgba(244, 240, 247, 0.8);\n }\n .block-color-pink_background {\n background: rgba(249, 238, 243, 0.8);\n }\n .block-color-red_background {\n background: rgba(253, 235, 236, 1);\n }\n .select-value-color-pink {\n background-color: rgba(245, 224, 233, 1);\n }\n .select-value-color-purple {\n background-color: rgba(232, 222, 238, 1);\n }\n .select-value-color-green {\n background-color: rgba(219, 237, 219, 1);\n }\n .select-value-color-gray {\n background-color: rgba(227, 226, 224, 1);\n }\n .select-value-color-opaquegray {\n background-color: rgba(255, 255, 255, 0.0375);\n }\n .select-value-color-orange {\n background-color: rgba(250, 222, 201, 1);\n }\n .select-value-color-brown {\n background-color: rgba(238, 224, 218, 1);\n }\n .select-value-color-red {\n background-color: rgba(255, 226, 221, 1);\n }\n .select-value-color-yellow {\n background-color: rgba(253, 236, 200, 1);\n }\n .select-value-color-blue {\n background-color: rgba(211, 229, 239, 1);\n }\n\n .checkbox {\n display: inline-flex;\n vertical-align: text-bottom;\n width: 16;\n height: 16;\n background-size: 16px;\n margin-left: 2px;\n margin-right: 5px;\n }\n\n .checkbox-on {\n background-image: url(\"data:image/svg+xml;charset=UTF-8,%3Csvg%20width%3D%2216%22%20height%3D%2216%22%20viewBox%3D%220%200%2016%2016%22%20fill%3D%22none%22%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%3E%0A%3Crect%20width%3D%2216%22%20height%3D%2216%22%20fill%3D%22%2358A9D7%22%2F%3E%0A%3Cpath%20d%3D%22M6.71429%2012.2852L14%204.9995L12.7143%203.71436L6.71429%209.71378L3.28571%206.2831L2%207.57092L6.71429%2012.2852Z%22%20fill%3D%22white%22%2F%3E%0A%3C%2Fsvg%3E\");\n }\n\n .checkbox-off {\n background-image: url(\"data:image/svg+xml;charset=UTF-8,%3Csvg%20width%3D%2216%22%20height%3D%2216%22%20viewBox%3D%220%200%2016%2016%22%20fill%3D%22none%22%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%3E%0A%3Crect%20x%3D%220.75%22%20y%3D%220.75%22%20width%3D%2214.5%22%20height%3D%2214.5%22%20fill%3D%22white%22%20stroke%3D%22%2336352F%22%20stroke-width%3D%221.5%22%2F%3E%0A%3C%2Fsvg%3E\");\n }\n </style>\n </head>\n <body>\n <article id=\"f2b31a8e-f32a-474c-bf3e-baf4928f6c1c\" class=\"page sans\">\n <div class=\"page-body\">\n <p id=\"937a899c-eec7-4aaa-9ec3-631b13c30fb5\" class=\"\">\n {{ $json.text }}\n </p>\n <hr id=\"fc51a942-226f-4411-b001-b5376a835e0c\" />\n <!--\n Was this message helpful? Yes \u2022 No.\n If the user clicks \"Yes\", a webhook will be sent to the URL specified in the \"Yes\" button's \"Webhook URL\" field.\n If the user clicks \"No\", a webhook will be sent to the URL specified in the \"No\" button's \"Webhook URL\" field.\n Include the following in the webhook URL:\n - initial message content\n - reply content\n use links\n -->\n <p id=\"c28c1c98-621b-4169-a7de-90d85d36ca90\" class=\"\">\n Was this message helpful? <a href={{ $env.WEBHOOK_URL + 'webhook/' + $node[\"On feedback given\"].parameter[\"path\"] }}?id={{ $node[\"Generate UUID\"].json.uuid }}&feedback=Yes>Yes</a> <strong>\u2022</strong> <a href={{ $env.WEBHOOK_URL + 'webhook/' + $node[\"On feedback given\"].parameter[\"path\"] }}?id={{ $node[\"Generate UUID\"].json.uuid }}&feedback=No>No</a>\n </p>\n <p id=\"7138639a-e639-4eb8-b80d-3d40bfc5c102\" class=\"\"></p>\n </div>\n </article>\n </body>\n</html>\n"
  },
  "typeVersion": 1
}

================ Node #5308 ================
{
  "id": "38e0f992-a461-4bc1-9f5c-2ceb0e461708",
  "name": "Record feedback",
  "type": "n8n-nodes-base.noOp",
  "position": [
    -1360,
    2980
  ],
  "parameters": {},
  "typeVersion": 1
}

================ Node #5309 ================
{
  "id": "899a0c63-0333-4dc4-ba83-5615a38ae431",
  "name": "Fallback route",
  "type": "n8n-nodes-base.noOp",
  "position": [
    -1360,
    3280
  ],
  "parameters": {},
  "typeVersion": 1
}

================ Node #5310 ================
{
  "id": "2fd5b109-8a54-4684-a8a3-3f7b2d961ae3",
  "name": "Identify trigger #2",
  "type": "n8n-nodes-base.set",
  "position": [
    -2240,
    2940
  ],
  "parameters": {
    "values": {
      "string": [
        {
          "name": "triggeredFrom",
          "value": "webhook"
        }
      ]
    },
    "options": {}
  },
  "typeVersion": 1
}

================ Node #5311 ================
{
  "id": "8c27f798-d947-432c-bfc9-d22727d0159e",
  "name": "Identify trigger #1",
  "type": "n8n-nodes-base.set",
  "position": [
    -2240,
    2680
  ],
  "parameters": {
    "values": {
      "string": [
        {
          "name": "triggeredFrom",
          "value": "gmail"
        }
      ]
    },
    "options": {}
  },
  "typeVersion": 1
}

================ Node #5312 ================
{
  "id": "bd8cc1dd-3643-4d2f-9527-cfd740a4072a",
  "name": "Do not send unfinished email reply",
  "type": "n8n-nodes-base.noOp",
  "position": [
    -40,
    2060
  ],
  "parameters": {},
  "typeVersion": 1
}

================ Node #5313 ================
{
  "id": "c8b68fdb-c1c0-4f94-b712-e0570a3ad53c",
  "name": "If reply is complete",
  "type": "n8n-nodes-base.if",
  "position": [
    -260,
    1960
  ],
  "parameters": {
    "conditions": {
      "string": [
        {
          "value1": "={{ $json.finish_reason }}",
          "value2": "stop"
        }
      ]
    }
  },
  "typeVersion": 1
}

================ Node #5314 ================
{
  "id": "f9d56d42-aa4e-4394-8c83-8d39164a784e",
  "name": "Sticky Note",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    -100,
    2020
  ],
  "parameters": {
    "width": 225.59802712700315,
    "height": 314.2786683107279,
    "content": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nIf your workflow reaches this stage, you will need to consider increasing the tokens in `Generate reply` node."
  },
  "typeVersion": 1
}

================ Node #5315 ================
{
  "id": "039714b3-88ac-4ca8-86fc-ec1c109110c3",
  "name": "Do not send email to this recipient",
  "type": "n8n-nodes-base.noOp",
  "position": [
    -1140,
    2560
  ],
  "parameters": {},
  "typeVersion": 1
}

================ Node #5316 ================
{
  "id": "330c67dd-e538-414d-a144-e05dbf5effb3",
  "name": "Send reply to database",
  "type": "n8n-nodes-base.noOp",
  "position": [
    -260,
    2380
  ],
  "parameters": {},
  "typeVersion": 1
}

================ Node #5317 ================
{
  "id": "6e7586db-f437-4450-a1c7-e5ea7e8767b0",
  "name": "Sticky Note1",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    -3060,
    2520
  ],
  "parameters": {
    "width": 516.6954377311955,
    "height": 680.5491163173024,
    "content": "## Send a ChatGPT email reply when email received and save responses to Google Sheets\nThis workflow sends a OpenAI GPT reply when an email is received from specific email recipients. It then saves the initial email and the GPT response to an automatically generated Google spreadsheet. Subsequent GPT responses will be added to the same spreadsheet. Additionally, when feedback is given for any of the GPT responses, it will be recorded to the spreasheet, which can then be used later to fine-tune the GPT model.\n\n### How it works\nThis workflow is essentially a two-in-one workflow. It triggers off from two different nodes and have very different functionality from each trigger.\n\n**`On email received`**:\n1. Triggers off on the `On email received` node.\n2. Extract the email body from the email.\n3. Generate a response from the email body using the `OpenAI` node.\n4. Reply to the email sender using the `Send reply to recipient` node. A feedback link is also included in the email body which will trigger the `On feedback given` node. This is used to fine-tune the GPT model.\n5. Save the email body and OpenAI response to a Google Sheet. If a sheet does not exist, it will be created.\n\n\n**`On feedback given`**:\n1. Triggers off when a feedback link is clicked in the emailed GPT response.\n2. The feedback, either positive or negative, for that specific GPT response is then recorded to the Google Sheet.\n"
  },
  "typeVersion": 1
}

================ Node #5318 ================
{
  "id": "9d5e780e-4282-4c7e-b083-3f769f7dc740",
  "name": "Determine which trigger ran",
  "type": "n8n-nodes-base.switch",
  "position": [
    -1660,
    2800
  ],
  "parameters": {
    "rules": {
      "rules": [
        {
          "value2": "gmail"
        },
        {
          "output": 1,
          "value2": "webhook"
        }
      ]
    },
    "value1": "={{ $json.triggeredFrom }}",
    "dataType": "string",
    "fallbackOutput": 3
  },
  "typeVersion": 1
}

================ Node #5319 ================
{
  "id": "2c6c604c-7f59-42cc-9ed2-6d55f342f0ae",
  "name": "Sticky Note2",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    -1420,
    3240
  ],
  "parameters": {
    "width": 225.59802712700315,
    "height": 289.61775585696694,
    "content": "\n\n\n\n\n\n\n\n\n\n\n\n\n\nThis workflow should never reach this node. It is only here for extending the functionality of this workflow if needed."
  },
  "typeVersion": 1
}

================ Node #5320 ================
{
  "id": "3defbf98-0caa-49b1-9bfd-f4640b43d64b",
  "name": "Is text within token limit?",
  "type": "n8n-nodes-base.if",
  "position": [
    -700,
    2360
  ],
  "parameters": {
    "conditions": {
      "boolean": [
        {
          "value1": "={{ $json.reply.length() / 4 <= $('Configure').first().json.maxTokenSize - $('Configure').first().json.replyTokenSize }}",
          "value2": true
        }
      ]
    }
  },
  "typeVersion": 1
}

================ Node #5321 ================
{
  "id": "b268b8a3-6361-4515-a995-320cd0979688",
  "name": "Do nothing",
  "type": "n8n-nodes-base.noOp",
  "position": [
    -480,
    2460
  ],
  "parameters": {},
  "typeVersion": 1
}

================ Node #5322 ================
{
  "id": "413588d1-ede0-4a51-85fa-c9035ec2e605",
  "name": "Sticky Note3",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    -540,
    2420
  ],
  "parameters": {
    "width": 225.59802712700315,
    "height": 288.2949081608216,
    "content": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThe email that was received is too large to process, as it exceeds token limit. See more on [token limits](https://help.openai.com/en/articles/4936856-what-are-tokens-and-how-to-count-them)."
  },
  "typeVersion": 1
}

================ Node #5323 ================
{
  "id": "deafa2e8-af41-4f11-92e0-09992f6c6970",
  "name": "Read PDF",
  "type": "n8n-nodes-base.readPDF",
  "position": [
    860,
    1420
  ],
  "parameters": {},
  "typeVersion": 1
}

================ Node #5324 ================
{
  "id": "8e3ddbb1-83a1-4f79-9464-61d5a20f0427",
  "name": "Sticky Note",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    -760,
    1300
  ],
  "parameters": {
    "width": 444.034812880766,
    "height": 599.5274151436035,
    "content": "## Send specific PDF attachments from Gmail to Google Drive using OpenAI\n\n_**DISCLAIMER**: You may have varying success when using this workflow so be prepared to validate the correctness of OpenAI's results._\n\nThis workflow reads PDF textual content and sends the text to OpenAI. Attachments of interest will then be uploaded to a specified Google Drive folder. For example, you may wish to send invoices received from an email to an inbox folder in Google Drive for later processing. This workflow has been designed to easily change the search term to match your needs. See the workflow for more details.\n\n### How it works\n1. Triggers off on the `On email received` node.\n2. Iterates over the attachments in the email.\n3. Uses the `OpenAI` node to filter out the attachments that do not match the search term set in the `Configure` node. You could match on various PDF files (i.e. invoice, receipt, or contract).\n4. If the PDF attachment matches the search term, the workflow uses the `Google Drive` node to upload the PDF attachment to a specific Google Drive folder.\n\n\nWorkflow written by [David Sha](https://davidsha.me)."
  },
  "typeVersion": 1
}

================ Node #5325 ================
{
  "id": "fb2c3697-a92f-4be1-b9a6-0326f87de70b",
  "name": "Configure",
  "type": "n8n-nodes-base.set",
  "position": [
    -20,
    1520
  ],
  "parameters": {
    "values": {
      "number": [
        {
          "name": "maxTokenSize",
          "value": 4000
        },
        {
          "name": "replyTokenSize",
          "value": 50
        }
      ],
      "string": [
        {
          "name": "Match on",
          "value": "payslip"
        },
        {
          "name": "Google Drive folder to upload matched PDFs",
          "value": "https://drive.google.com/drive/u/0/folders/1SKdHTnYoBNlnhF_QJ-Zyepy-3-WZkObo"
        }
      ]
    },
    "options": {}
  },
  "typeVersion": 1
}

================ Node #5326 ================
{
  "id": "792c49f4-06e3-4d77-a31f-1513f70abf32",
  "name": "Is PDF",
  "type": "n8n-nodes-base.if",
  "position": [
    640,
    1520
  ],
  "parameters": {
    "conditions": {
      "string": [
        {
          "value1": "={{ $binary.data.fileExtension }}",
          "value2": "pdf"
        }
      ]
    }
  },
  "typeVersion": 1
}

================ Node #5327 ================
{
  "id": "82be9111-665d-41c6-8190-2247acdb749b",
  "name": "Not a PDF",
  "type": "n8n-nodes-base.noOp",
  "position": [
    860,
    1620
  ],
  "parameters": {},
  "typeVersion": 1
}

================ Node #5328 ================
{
  "id": "c2ac155f-38ee-46f2-8a24-5614e3c32ff5",
  "name": "Is matched",
  "type": "n8n-nodes-base.if",
  "position": [
    1720,
    1480
  ],
  "parameters": {
    "conditions": {
      "string": [
        {
          "value1": "={{ $json[\"text\"] }}",
          "value2": "true"
        }
      ]
    }
  },
  "typeVersion": 1
}

================ Node #5329 ================
{
  "id": "4a8f15b8-c153-493d-9a2a-d63d911d642d",
  "name": "This is a matched PDF",
  "type": "n8n-nodes-base.noOp",
  "position": [
    1940,
    1380
  ],
  "parameters": {},
  "typeVersion": 1
}

================ Node #5330 ================
{
  "id": "89601591-5c7b-461c-859b-25c7c1f0c2e6",
  "name": "This is not a matched PDF",
  "type": "n8n-nodes-base.noOp",
  "position": [
    1940,
    1580
  ],
  "parameters": {},
  "typeVersion": 1
}

================ Node #5331 ================
{
  "id": "ac517c4a-83b8-441f-b14c-c927c18f8012",
  "name": "Iterate over email attachments",
  "type": "n8n-nodes-base.code",
  "position": [
    420,
    1420
  ],
  "parameters": {
    "jsCode": "// https://community.n8n.io/t/iterating-over-email-attachments/13588/3\nlet results = [];\n\nfor (const item of $input.all()) {\n for (key of Object.keys(item.binary)) {\n results.push({\n json: {},\n binary: {\n data: item.binary[key],\n }\n });\n }\n}\n\nreturn results;"
  },
  "typeVersion": 1
}

================ Node #5332 ================
{
  "id": "79fdf2de-42fe-4ebb-80fb-cc80dcd284f9",
  "name": "OpenAI matches PDF textual content",
  "type": "n8n-nodes-base.openAi",
  "position": [
    1300,
    1340
  ],
  "parameters": {
    "prompt": "=Does this PDF file look like a {{ $(\"Configure\").first().json[\"Match on\"] }}? Return \"true\" if it is a {{ $(\"Configure\").first().json[\"Match on\"] }} and \"false\" if not. Only reply with lowercase letters \"true\" or \"false\".\n\nThis is the PDF filename:\n```\n{{ $binary.data.fileName }}\n```\n\nThis is the PDF text content:\n```\n{{ $json.text }}\n```",
    "options": {
      "maxTokens": "={{ $('Configure').first().json.replyTokenSize }}",
      "temperature": 0.1
    }
  },
  "credentials": {
    "openAiApi": {
      "id": "30",
      "name": "REPLACE ME"
    }
  },
  "typeVersion": 1,
  "alwaysOutputData": false
}

================ Node #5333 ================
{
  "id": "8bdb3263-40f2-4277-8cc0-f6edef90a1cd",
  "name": "Merge",
  "type": "n8n-nodes-base.merge",
  "position": [
    1500,
    1480
  ],
  "parameters": {
    "mode": "combine",
    "options": {
      "clashHandling": {
        "values": {
          "resolveClash": "preferInput1"
        }
      }
    },
    "combinationMode": "mergeByPosition"
  },
  "typeVersion": 2
}

================ Node #5334 ================
{
  "id": "8e68e725-b2df-4c0c-8b17-e0cd4610714d",
  "name": "Upload file to folder",
  "type": "n8n-nodes-base.googleDrive",
  "position": [
    2160,
    1380
  ],
  "parameters": {
    "name": "={{ $binary.data.fileName }}",
    "options": {},
    "parents": [
      "={{ $('Configure').first().json[\"Google Drive folder to upload matched PDFs\"].split(\"/\").at(-1) }}"
    ],
    "binaryData": true
  },
  "credentials": {
    "googleDriveOAuth2Api": {
      "id": "32",
      "name": "REPLACE ME"
    }
  },
  "typeVersion": 2
}

================ Node #5335 ================
{
  "id": "bda00901-5ade-471c-b6f9-a18ef4d71589",
  "name": "On email received",
  "type": "n8n-nodes-base.gmailTrigger",
  "position": [
    -240,
    1520
  ],
  "parameters": {
    "simple": false,
    "filters": {},
    "options": {
      "downloadAttachments": true,
      "dataPropertyAttachmentsPrefixName": "attachment_"
    },
    "pollTimes": {
      "item": [
        {
          "mode": "everyMinute"
        }
      ]
    }
  },
  "credentials": {
    "gmailOAuth2": {
      "id": "31",
      "name": "REPLACE ME"
    }
  },
  "typeVersion": 1
}

================ Node #5336 ================
{
  "id": "b2ff4774-336b-47a3-af3f-ada809ed9b8a",
  "name": "Note5",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    -100,
    1440
  ],
  "parameters": {
    "width": 259.0890718059702,
    "height": 607.9684549079709,
    "content": "### Configuration\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n__`Match on`(required)__: What should OpenAI's search term be? Examples: invoice, callsheet, receipt, contract, payslip.\n__`Google Drive folder to upload matched PDFs`(required)__: Paste the link of the GDrive folder, an example has been provided but will need to change to a folder you own.\n__`maxTokenSize`(required)__: The maximum token size for the model you choose. See possible models from OpenAI [here](https://platform.openai.com/docs/models/gpt-3).\n__`replyTokenSize`(required)__: The reply's maximum token size. Default is 300. This determines how much text the AI will reply with."
  },
  "typeVersion": 1
}

================ Node #5337 ================
{
  "id": "beb571fe-e7a3-4f3c-862b-dc01821e5f3f",
  "name": "Ignore large PDFs",
  "type": "n8n-nodes-base.noOp",
  "position": [
    1300,
    1620
  ],
  "parameters": {},
  "typeVersion": 1
}

================ Node #5338 ================
{
  "id": "f3c4f249-08a7-4e5e-8f46-e07393ac10b5",
  "name": "Is text within token limit?",
  "type": "n8n-nodes-base.if",
  "position": [
    1080,
    1520
  ],
  "parameters": {
    "conditions": {
      "boolean": [
        {
          "value1": "={{ $json.text.length() / 4 <= $('Configure').first().json.maxTokenSize - $('Configure').first().json.replyTokenSize }}",
          "value2": true
        }
      ]
    }
  },
  "typeVersion": 1
}

================ Node #5339 ================
{
  "id": "93b6fb96-3e0e-4953-bd09-cf882d2dc69c",
  "name": "Has attachments?",
  "type": "n8n-nodes-base.if",
  "position": [
    200,
    1520
  ],
  "parameters": {
    "conditions": {
      "boolean": [
        {
          "value1": "={{ $('On email received').item.binary.isNotEmpty() }}",
          "value2": true
        }
      ]
    }
  },
  "typeVersion": 1
}

================ Node #5340 ================
{
  "id": "554d415e-a965-46be-8442-35c4cb6b005c",
  "name": "There are no attachments",
  "type": "n8n-nodes-base.noOp",
  "position": [
    420,
    1620
  ],
  "parameters": {},
  "typeVersion": 1
}

================ Node #5341 ================
{
  "id": "d9bae984-2ce7-4f6b-ab53-527ac9dfea3d",
  "name": "When clicking \"Execute Workflow\"",
  "type": "n8n-nodes-base.manualTrigger",
  "position": [
    680,
    320
  ],
  "parameters": {},
  "typeVersion": 1
}

================ Node #5342 ================
{
  "id": "32ecf73c-b6e9-4bd6-9ecc-d82c4c50d7b5",
  "name": "Reddit",
  "type": "n8n-nodes-base.reddit",
  "position": [
    880,
    320
  ],
  "parameters": {
    "keyword": "n8n",
    "location": "allReddit",
    "operation": "search",
    "additionalFields": {
      "sort": "new"
    }
  },
  "credentials": {},
  "typeVersion": 1
}

================ Node #5343 ================
{
  "id": "4b560620-a101-4566-b066-4ce3f44d8b0c",
  "name": "Sticky Note1",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    120,
    180
  ],
  "parameters": {
    "width": 507.1052631578949,
    "height": 210.99380804953552,
    "content": "## What this workflow does\n\u2714\ufe0e 1) Get posts from reddit that might be about n8n\n - Filter for the most relevant posts (posted in last 7 days and more than 5 upvotes and is original content)\n\n\u2714\ufe0e 2) Check if the post is actually about n8n\n\n\u2714\ufe0e 3) if it is, categorise with OpenAi.\n"
  },
  "typeVersion": 1
}

================ Node #5344 ================
{
  "id": "f3be9af5-b4ff-4f4e-a726-fc05fab94521",
  "name": "Set",
  "type": "n8n-nodes-base.set",
  "position": [
    1260,
    320
  ],
  "parameters": {
    "values": {
      "number": [
        {
          "name": "upvotes",
          "value": "={{ $json.ups }}"
        },
        {
          "name": "subredditSize",
          "value": "={{ $json.subreddit_subscribers }}"
        }
      ],
      "string": [
        {
          "name": "selftextTrimmed",
          "value": "={{ $json.selftext.substring(0,500) }}"
        },
        {
          "name": "subreddit",
          "value": "={{ $json.subreddit }}"
        },
        {
          "name": "date",
          "value": "={{ DateTime.fromSeconds($json.created).toLocaleString() }}"
        },
        {
          "name": "url",
          "value": "={{ $json.url }}"
        }
      ]
    },
    "options": {},
    "keepOnlySet": true
  },
  "typeVersion": 1
}

================ Node #5345 ================
{
  "id": "b1dbf78f-c7c6-4ab7-a957-78d58c5e13e3",
  "name": "IF",
  "type": "n8n-nodes-base.if",
  "position": [
    1060,
    320
  ],
  "parameters": {
    "conditions": {
      "number": [
        {
          "value1": "={{ $json.ups }}",
          "value2": "=5",
          "operation": "largerEqual"
        }
      ],
      "string": [
        {
          "value1": "={{ $json.selftext }}",
          "operation": "isNotEmpty"
        }
      ],
      "dateTime": [
        {
          "value1": "={{ DateTime.fromSeconds($json.created).toISO() }}",
          "value2": "={{ $today.minus({days: 7}).toISO() }}"
        }
      ]
    }
  },
  "typeVersion": 1
}

================ Node #5346 ================
{
  "id": "a3aa9e43-a824-4cc1-b4e6-d41a2e8e56cd",
  "name": "Sticky Note2",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    120,
    660
  ],
  "parameters": {
    "width": 504.4736842105267,
    "height": 116.77974205725066,
    "content": "## Drawbacks\n\ud83e\udd14 Workflow only considers first 500 characters of each reddit post. So if n8n is mentioned after this amount, it won't register as being a post about n8n.io."
  },
  "typeVersion": 1
}

================ Node #5347 ================
{
  "id": "b3d566aa-1645-4c2c-9704-15aa2e42bb12",
  "name": "IF1",
  "type": "n8n-nodes-base.if",
  "position": [
    1880,
    340
  ],
  "parameters": {
    "conditions": {
      "string": [
        {
          "value1": "={{ $json.choices[0].text }}",
          "value2": "No",
          "operation": "contains"
        }
      ]
    }
  },
  "typeVersion": 1
}

================ Node #5348 ================
{
  "id": "0ad54272-08b9-46d4-8e6a-1fb55a92d3e4",
  "name": "Merge",
  "type": "n8n-nodes-base.merge",
  "position": [
    1680,
    520
  ],
  "parameters": {
    "mode": "combine",
    "options": {
      "fuzzyCompare": false,
      "includeUnpaired": true
    },
    "combinationMode": "mergeByPosition"
  },
  "typeVersion": 2
}

================ Node #5349 ================
{
  "id": "288f53cc-0e53-4683-ac0e-debe0a3691b8",
  "name": "Merge1",
  "type": "n8n-nodes-base.merge",
  "position": [
    2340,
    540
  ],
  "parameters": {
    "mode": "combine",
    "options": {
      "fuzzyCompare": false,
      "includeUnpaired": true
    },
    "combinationMode": "mergeByPosition"
  },
  "typeVersion": 2
}

================ Node #5350 ================
{
  "id": "46280db5-e4b0-4108-958a-763b6410caa0",
  "name": "SetFinal",
  "type": "n8n-nodes-base.set",
  "position": [
    2560,
    540
  ],
  "parameters": {
    "values": {
      "number": [
        {
          "name": "upvotes",
          "value": "={{ $json.upvotes }}"
        },
        {
          "name": "subredditSize",
          "value": "={{ $json.subredditSize }}"
        }
      ],
      "string": [
        {
          "name": "subreddit",
          "value": "={{ $json.subreddit }}"
        },
        {
          "name": "bulletSummary",
          "value": "={{ $json.text }}"
        },
        {
          "name": "date",
          "value": "={{ $json.date }}"
        },
        {
          "name": "url",
          "value": "={{ $json.url }}"
        }
      ]
    },
    "options": {},
    "keepOnlySet": true
  },
  "typeVersion": 1
}

================ Node #5351 ================
{
  "id": "ac8c4847-4d73-4dce-9543-a199e8b11b51",
  "name": "Sticky Note3",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    120,
    400
  ],
  "parameters": {
    "width": 507.1052631578949,
    "height": 247.53869969040255,
    "content": "## Next steps\n* Improve OpenAI Summary node prompt to return cleaner summaries.\n* Extend to **more platforms/sources** - e.g. it would be really cool to monitor larger slack communities in this way. \n* Do some classification on type of user to highlight users likely to be in our **ICP**.\n* Separate a list of data sources (reddit, twitter, slack, discord etc.), extract messages from there and have them go to a **sub workflow for classification and summarisation.**"
  },
  "typeVersion": 1
}

================ Node #5352 ================
{
  "id": "12ab5ba4-d24d-4fa1-a0d1-d1e81e2d5dee",
  "name": "OpenAI Summary",
  "type": "n8n-nodes-base.openAi",
  "notes": "A one sentence summary of what the post is about.",
  "disabled": true,
  "position": [
    2160,
    160
  ],
  "parameters": {
    "input": "={{ $json.selftextTrimmed }}",
    "options": {
      "temperature": 0.3
    },
    "operation": "edit",
    "instruction": "Summarise what this is talking about in a meta way less than 20 words. Ignore punctuation in your summary and return a short, human readable summary."
  },
  "credentials": {},
  "typeVersion": 1
}

================ Node #5353 ================
{
  "id": "e303a1aa-ee93-4f8f-b834-19aa8da7fe95",
  "name": "OpenAI Classify",
  "type": "n8n-nodes-base.openAi",
  "notes": "Is the post about n8n?",
  "position": [
    1460,
    320
  ],
  "parameters": {
    "prompt": "=Decide whether a reddit post is about n8n.io, a workflow automation low code tool that can be self-hosted, or not.\nReddit Post: {{ $json.selftextTrimmed }}\nAbout n8n?: Yes/No",
    "options": {
      "maxTokens": 32
    },
    "simplifyOutput": false
  },
  "credentials": {},
  "notesInFlow": true,
  "typeVersion": 1
}

================ Node #5354 ================
{
  "id": "f56cb8b6-4c28-448e-b259-8946ffc4c1f7",
  "name": "OpenAI Summary Backup",
  "type": "n8n-nodes-base.openAi",
  "notes": "A one sentence summary of what the post is about.",
  "position": [
    2160,
    340
  ],
  "parameters": {
    "prompt": "=Summarise what this is talking about in a meta way in only 1 sentence.\n\n {{ $json.selftextTrimmed }}",
    "options": {
      "maxTokens": 128
    }
  },
  "credentials": {},
  "typeVersion": 1
}

================ Node #5355 ================
{
  "id": "d1eacbf2-9cc8-482d-a7d2-34c351f20871",
  "name": "Sticky Note",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    640,
    520
  ],
  "parameters": {
    "width": 843.411496498402,
    "height": 258.676790119369,
    "content": "## What we learned\n- \ud83e\udeb6 **Writing prompts**: small changes in the type of prompt result in very different results. e.g. for Summarising OpenAI would use multiple sentences even if we asked it to use only 1. We got better results by following OpenAI's documentation.\n - We could make OpenAI node easier to work with for new users by the node inputs being oriented not to sending parameters to api but by following [their suggestions](https://platform.openai.com/docs/guides/completion/prompt-design) - e.g. have a field for expected output format rather than just for prompt.\n- \u2195\ufe0f **Changing the max_tokens parameter** drastically changes results - sometimes making it smaller even improves results (e.g. when you want a yes/no response in the OpenAI Classify node). In their [docs](https://platform.openai.com/docs/guides/completion/inserting-text) they recommend using max_tokens>256 but [n8n by default](https://community.n8n.io/t/openai-result-not-complete/21533) uses max_tokens=16. We should probably update this."
  },
  "typeVersion": 1
}

================ Node #5356 ================
{
  "name": "Simplify Result",
  "type": "n8n-nodes-base.set",
  "position": [
    680,
    100
  ],
  "parameters": {
    "values": {
      "string": [
        {
          "name": "Content",
          "value": "={{$json[\"full_text\"].replace(/(?:https?|ftp):\\/\\/[\\n\\S]+/g, '')}}"
        },
        {
          "name": "Author",
          "value": "={{$json[\"user\"][\"name\"]}} (@{{$json[\"user\"][\"screen_name\"]}})"
        },
        {
          "name": "Created",
          "value": "={{new Date($json[\"created_at\"]).toISOString()}}"
        },
        {
          "name": "URL",
          "value": "=https://twitter.com/{{$json[\"user\"][\"screen_name\"]}}/status/{{$json[\"id_str\"]}}"
        }
      ]
    },
    "options": {},
    "keepOnlySet": true
  },
  "typeVersion": 1
}

================ Node #5357 ================
{
  "name": "Store in Strapi",
  "type": "n8n-nodes-base.strapi",
  "position": [
    1780,
    100
  ],
  "parameters": {
    "columns": "Content,Author,Created,URL",
    "operation": "create",
    "contentType": "posts"
  },
  "credentials": {
    "strapiApi": {
      "id": "136",
      "name": "Strapi Demo"
    }
  },
  "typeVersion": 1
}

================ Node #5358 ================
{
  "name": "Every 30 Minutes",
  "type": "n8n-nodes-base.interval",
  "position": [
    240,
    100
  ],
  "parameters": {
    "unit": "minutes",
    "interval": 30
  },
  "typeVersion": 1
}

================ Node #5359 ================
{
  "name": "Is Retweet or Old?",
  "type": "n8n-nodes-base.if",
  "position": [
    900,
    100
  ],
  "parameters": {
    "conditions": {
      "string": [
        {
          "value1": "={{$json[\"Content\"]}}",
          "value2": "RT @",
          "operation": "startsWith"
        }
      ],
      "dateTime": [
        {
          "value1": "={{$json[\"Created\"]}}",
          "value2": "={{new Date(new Date().getTime() - 30 * 60 * 1000)}}",
          "operation": "before"
        }
      ]
    },
    "combineOperation": "any"
  },
  "typeVersion": 1
}

================ Node #5360 ================
{
  "name": "Search Tweets",
  "type": "n8n-nodes-base.twitter",
  "position": [
    460,
    100
  ],
  "parameters": {
    "operation": "search",
    "searchText": "(strapi OR n8n.io) AND lang:en",
    "additionalFields": {
      "tweetMode": "extended",
      "resultType": "recent"
    }
  },
  "credentials": {
    "twitterOAuth1Api": {
      "id": "15",
      "name": "@MutedJam"
    }
  },
  "typeVersion": 1
}

================ Node #5361 ================
{
  "name": "Webhook",
  "type": "n8n-nodes-base.webhook",
  "position": [
    240,
    -120
  ],
  "webhookId": "6f833370-9068-44ef-8e56-4ceb563a851e",
  "parameters": {
    "path": "6f833370-9068-44ef-8e56-4ceb563a851e",
    "options": {},
    "httpMethod": "POST"
  },
  "typeVersion": 1
}

================ Node #5362 ================
{
  "name": "Simplify Webhook Result",
  "type": "n8n-nodes-base.set",
  "position": [
    460,
    -120
  ],
  "parameters": {
    "values": {
      "string": [
        {
          "name": "Content",
          "value": "={{$json[\"body\"][\"data\"][\"fields\"][1][\"value\"]}}"
        },
        {
          "name": "Author",
          "value": "={{$json[\"body\"][\"data\"][\"fields\"][0][\"value\"]}}"
        },
        {
          "name": "Created",
          "value": "={{new Date().toISOString()}}"
        },
        {
          "name": "URL"
        }
      ]
    },
    "options": {},
    "keepOnlySet": true
  },
  "typeVersion": 1
}

================ Node #5363 ================
{
  "name": "Analyze Form Submission",
  "type": "n8n-nodes-base.googleCloudNaturalLanguage",
  "position": [
    680,
    -220
  ],
  "parameters": {
    "content": "={{$json[\"Content\"]}}",
    "options": {}
  },
  "credentials": {
    "googleCloudNaturalLanguageOAuth2Api": {
      "id": "138",
      "name": "Google Cloud Natural Language account"
    }
  },
  "typeVersion": 1
}

================ Node #5364 ================
{
  "name": "Analyze Tweet",
  "type": "n8n-nodes-base.googleCloudNaturalLanguage",
  "position": [
    1120,
    200
  ],
  "parameters": {
    "content": "={{$json[\"Content\"]}}",
    "options": {}
  },
  "credentials": {
    "googleCloudNaturalLanguageOAuth2Api": {
      "id": "138",
      "name": "Google Cloud Natural Language account"
    }
  },
  "typeVersion": 1
}

================ Node #5365 ================
{
  "name": "Merge Form Sentiment with Source",
  "type": "n8n-nodes-base.merge",
  "position": [
    900,
    -120
  ],
  "parameters": {
    "mode": "mergeByIndex"
  },
  "typeVersion": 1
}

================ Node #5366 ================
{
  "name": "Merge Tweet Sentiment with Source",
  "type": "n8n-nodes-base.merge",
  "position": [
    1340,
    100
  ],
  "parameters": {
    "mode": "mergeByIndex"
  },
  "typeVersion": 1
}

================ Node #5367 ================
{
  "name": "Positive Form Sentiment?",
  "type": "n8n-nodes-base.if",
  "position": [
    1120,
    -120
  ],
  "parameters": {
    "conditions": {
      "number": [
        {
          "value1": "={{$json[\"documentSentiment\"][\"score\"]}}",
          "value2": 0.4,
          "operation": "larger"
        }
      ]
    }
  },
  "typeVersion": 1
}

================ Node #5368 ================
{
  "name": "Store Form Submission in Strapi",
  "type": "n8n-nodes-base.strapi",
  "position": [
    1340,
    -120
  ],
  "parameters": {
    "columns": "Content,Author,Created,URL",
    "operation": "create",
    "contentType": "posts"
  },
  "credentials": {
    "strapiApi": {
      "id": "136",
      "name": "Strapi Demo"
    }
  },
  "typeVersion": 1
}

================ Node #5369 ================
{
  "name": "Positive Tweet Sentiment?",
  "type": "n8n-nodes-base.if",
  "position": [
    1560,
    100
  ],
  "parameters": {
    "conditions": {
      "number": [
        {
          "value1": "={{$json[\"documentSentiment\"][\"score\"]}}",
          "value2": 0.3,
          "operation": "larger"
        }
      ]
    }
  },
  "typeVersion": 1
}

================ Node #5370 ================
{
  "name": "On clicking 'execute'",
  "type": "n8n-nodes-base.manualTrigger",
  "position": [
    250,
    300
  ],
  "parameters": {},
  "typeVersion": 1
}

================ Node #5371 ================
{
  "name": "FunctionItem",
  "type": "n8n-nodes-base.functionItem",
  "position": [
    450,
    300
  ],
  "parameters": {
    "functionCode": "// hashtag list\nconst Hashtags = [\n \"#techtwitter\",\n \"#n8n\"\n];\n\n// random output function\nconst randomHashtag = Hashtags[Math.floor(Math.random() * Hashtags.length)];\nitem.hashtag = randomHashtag;\nreturn item;"
  },
  "typeVersion": 1
}

================ Node #5372 ================
{
  "name": "HTTP Request",
  "type": "n8n-nodes-base.httpRequest",
  "position": [
    650,
    300
  ],
  "parameters": {
    "url": "https://api.openai.com/v1/engines/text-davinci-001/completions",
    "options": {},
    "requestMethod": "POST",
    "authentication": "headerAuth",
    "jsonParameters": true,
    "bodyParametersJson": "={\n \"prompt\": \"Generate a tweet, with under 100 characters, about and including the hashtag {{$node[\"FunctionItem\"].json[\"hashtag\"]}}:\",\n \"temperature\": 0.7,\n \"max_tokens\": 64,\n \"top_p\": 1,\n \"frequency_penalty\": 0,\n \"presence_penalty\": 0\n}"
  },
  "credentials": {
    "httpHeaderAuth": ""
  },
  "typeVersion": 1
}

================ Node #5373 ================
{
  "name": "Airtable",
  "type": "n8n-nodes-base.airtable",
  "position": [
    1050,
    300
  ],
  "parameters": {
    "table": "main",
    "options": {},
    "operation": "append",
    "application": "appOaG8kEA8FAABOr"
  },
  "credentials": {
    "airtableApi": ""
  },
  "typeVersion": 1
}

================ Node #5374 ================
{
  "name": "Set",
  "type": "n8n-nodes-base.set",
  "position": [
    850,
    300
  ],
  "parameters": {
    "values": {
      "string": [
        {
          "name": "Hashtag",
          "value": "={{$node[\"FunctionItem\"].json[\"hashtag\"]}}"
        },
        {
          "name": "Content",
          "value": "={{$node[\"HTTP Request\"].json[\"choices\"][0][\"text\"]}}"
        }
      ]
    },
    "options": {},
    "keepOnlySet": true
  },
  "typeVersion": 1
}

================ Node #5375 ================
{
  "name": "Cron",
  "type": "n8n-nodes-base.cron",
  "position": [
    440,
    440
  ],
  "parameters": {
    "triggerTimes": {
      "item": [
        {}
      ]
    }
  },
  "typeVersion": 1
}

================ Node #5376 ================
{
  "name": "Airtable2",
  "type": "n8n-nodes-base.airtable",
  "notes": "Grab our list of chats from Airtable to send a random recipe",
  "position": [
    660,
    440
  ],
  "parameters": {
    "table": "Table 1",
    "operation": "list",
    "application": "your_sheet_id",
    "additionalOptions": {}
  },
  "credentials": {
    "airtableApi": {
      "id": "5",
      "name": "Airtable account"
    }
  },
  "notesInFlow": true,
  "typeVersion": 1
}

================ Node #5377 ================
{
  "name": "Set",
  "type": "n8n-nodes-base.set",
  "position": [
    860,
    600
  ],
  "parameters": {
    "values": {
      "number": [
        {
          "name": "chatid",
          "value": "={{$node[\"Airtable2\"].json[\"fields\"][\"chatid\"]}}"
        }
      ],
      "string": []
    },
    "options": {}
  },
  "typeVersion": 1
}

================ Node #5378 ================
{
  "name": "Recipe Photo",
  "type": "n8n-nodes-base.telegram",
  "position": [
    1240,
    440
  ],
  "parameters": {
    "file": "={{$node[\"Get recipes from API\"].json[\"recipes\"][0][\"image\"]}}",
    "chatId": "={{$node[\"Set\"].json[\"chatid\"]}}",
    "operation": "sendPhoto",
    "additionalFields": {}
  },
  "credentials": {
    "telegramApi": {
      "id": "1",
      "name": "Telegram account"
    }
  },
  "typeVersion": 1,
  "continueOnFail": true
}

================ Node #5379 ================
{
  "name": "Recipe URL",
  "type": "n8n-nodes-base.telegram",
  "position": [
    1420,
    440
  ],
  "parameters": {
    "text": "=\n{{$node[\"Get recipes from API\"].json[\"recipes\"][0][\"title\"]}}\n\n{{$node[\"Get recipes from API\"].json[\"recipes\"][0][\"sourceUrl\"]}}",
    "chatId": "={{$node[\"Set\"].json[\"chatid\"]}}",
    "additionalFields": {}
  },
  "credentials": {
    "telegramApi": {
      "id": "1",
      "name": "Telegram account"
    }
  },
  "typeVersion": 1,
  "continueOnFail": true
}

================ Node #5380 ================
{
  "name": "IF",
  "type": "n8n-nodes-base.if",
  "notes": "If the chat ID isn't in our airtable, we add it. This is to send a new recipe daily. ",
  "position": [
    860,
    -80
  ],
  "parameters": {
    "conditions": {
      "number": [],
      "string": [
        {
          "value1": "= {{$node[\"Airtable1\"].parameter[\"fields\"][1]}}",
          "value2": "= {{$node[\"Airtable1\"].parameter[\"fields\"][0]}}",
          "operation": "notEqual"
        }
      ],
      "boolean": []
    }
  },
  "notesInFlow": true,
  "typeVersion": 1
}

================ Node #5381 ================
{
  "name": "Airtable",
  "type": "n8n-nodes-base.airtable",
  "position": [
    620,
    -80
  ],
  "parameters": {
    "table": "Table 1",
    "operation": "list",
    "application": "your_sheet_id",
    "additionalOptions": {}
  },
  "credentials": {
    "airtableApi": {
      "id": "5",
      "name": "Airtable account"
    }
  },
  "typeVersion": 1
}

================ Node #5382 ================
{
  "name": "Airtable1",
  "type": "n8n-nodes-base.airtable",
  "position": [
    1340,
    -100
  ],
  "parameters": {
    "table": "Table 1",
    "fields": [
      "chatid",
      "={{$node[\"Telegram Trigger - people join bot\"].json[\"message\"][\"chat\"][\"id\"]}}",
      "Name",
      "={{$node[\"Telegram Trigger - people join bot\"].json[\"message\"][\"from\"][\"first_name\"]}}"
    ],
    "options": {},
    "operation": "append",
    "application": "your_sheet_id",
    "addAllFields": false
  },
  "credentials": {
    "airtableApi": {
      "id": "5",
      "name": "Airtable account"
    }
  },
  "typeVersion": 1
}

================ Node #5383 ================
{
  "name": "Telegram Recipe Image",
  "type": "n8n-nodes-base.telegram",
  "position": [
    980,
    180
  ],
  "parameters": {
    "file": "={{$node[\"Get recipes\"].json[\"recipes\"][0][\"image\"]}}",
    "chatId": "={{$node[\"Telegram Trigger - people join bot\"].json[\"message\"][\"chat\"][\"id\"]}}",
    "operation": "sendPhoto",
    "additionalFields": {}
  },
  "credentials": {
    "telegramApi": {
      "id": "1",
      "name": "Telegram account"
    }
  },
  "typeVersion": 1
}

================ Node #5384 ================
{
  "name": "Telegram Recipe URL",
  "type": "n8n-nodes-base.telegram",
  "position": [
    1180,
    180
  ],
  "parameters": {
    "text": "=\n{{$node[\"Get recipes\"].json[\"recipes\"][0][\"title\"]}}\n\n{{$node[\"Get recipes\"].json[\"recipes\"][0][\"sourceUrl\"]}}",
    "chatId": "={{$node[\"Telegram Trigger - people join bot\"].json[\"message\"][\"chat\"][\"id\"]}}",
    "additionalFields": {}
  },
  "credentials": {
    "telegramApi": {
      "id": "1",
      "name": "Telegram account"
    }
  },
  "typeVersion": 1
}

================ Node #5385 ================
{
  "name": "Set1",
  "type": "n8n-nodes-base.set",
  "position": [
    1120,
    -100
  ],
  "parameters": {
    "values": {
      "string": [
        {
          "name": "chatid",
          "value": "={{$node[\"Telegram Trigger - people join bot\"].json[\"message\"][\"chat\"][\"id\"]}}"
        },
        {
          "name": "Name",
          "value": "={{$node[\"Telegram Trigger - people join bot\"].json[\"message\"][\"from\"][\"first_name\"]}}"
        }
      ]
    },
    "options": {}
  },
  "typeVersion": 1
}

================ Node #5386 ================
{
  "name": "Get recipes from API",
  "type": "n8n-nodes-base.httpRequest",
  "notes": "https://spoonacular.com/food-api/docs",
  "position": [
    1080,
    440
  ],
  "parameters": {
    "url": "https://api.spoonacular.com/recipes/random?apiKey=APIKEYHERE&number=1&tags=vegan",
    "options": {
      "fullResponse": false
    },
    "queryParametersUi": {
      "parameter": []
    }
  },
  "typeVersion": 1
}

================ Node #5387 ================
{
  "name": "Get recipes",
  "type": "n8n-nodes-base.httpRequest",
  "notes": "https://spoonacular.com/food-api/docs",
  "position": [
    800,
    180
  ],
  "parameters": {
    "url": "https://api.spoonacular.com/recipes/random?apiKey=APIKEYHERE&number=1&tags=vegan",
    "options": {
      "fullResponse": false
    },
    "queryParametersUi": {
      "parameter": []
    }
  },
  "typeVersion": 1
}

================ Node #5388 ================
{
  "name": "Telegram Trigger - people join bot",
  "type": "n8n-nodes-base.telegramTrigger",
  "position": [
    420,
    140
  ],
  "webhookId": "your_bot_id",
  "parameters": {
    "updates": [
      "message"
    ],
    "additionalFields": {}
  },
  "credentials": {
    "telegramApi": {
      "id": "1",
      "name": "Telegram account"
    }
  },
  "typeVersion": 1
}

================ Node #5389 ================
{
  "name": "Telegram - Welcome Message",
  "type": "n8n-nodes-base.telegram",
  "position": [
    620,
    180
  ],
  "parameters": {
    "text": "=Welcome! This bot will send you one vegan recipe a day. Here is your first recipe!",
    "chatId": "={{$node[\"Telegram Trigger - people join bot\"].json[\"message\"][\"chat\"][\"id\"]}}",
    "additionalFields": {}
  },
  "credentials": {
    "telegramApi": {
      "id": "1",
      "name": "Telegram account"
    }
  },
  "typeVersion": 1
}

================ Node #5390 ================
{
  "name": "On clicking 'execute'",
  "type": "n8n-nodes-base.manualTrigger",
  "position": [
    260,
    210
  ],
  "parameters": {},
  "typeVersion": 1
}

================ Node #5391 ================
{
  "name": "Fetch new followers",
  "type": "n8n-nodes-base.httpRequest",
  "position": [
    460,
    210
  ],
  "parameters": {
    "url": "https://api.twitter.com/2/users/{YOUR_USER_ID}/followers?user.fields=profile_image_url&max_results=3",
    "options": {},
    "authentication": "headerAuth"
  },
  "credentials": {
    "httpHeaderAuth": {
      "id": "2",
      "name": "Twitter Token"
    }
  },
  "typeVersion": 1
}

================ Node #5392 ================
{
  "name": "Item Lists",
  "type": "n8n-nodes-base.itemLists",
  "position": [
    660,
    210
  ],
  "parameters": {
    "options": {},
    "fieldToSplitOut": "data"
  },
  "typeVersion": 1
}

================ Node #5393 ================
{
  "name": "Function",
  "type": "n8n-nodes-base.function",
  "position": [
    1660,
    210
  ],
  "parameters": {
    "functionCode": "const binary = {};\nfor (let i=0; i < items.length; i++) {\n binary[`data${i}`] = items[i].binary.avatar;\n}\n\nreturn [\n {\n json: {\n numIcons: items.length,\n },\n binary,\n }\n];\n"
  },
  "typeVersion": 1
}

================ Node #5394 ================
{
  "name": "Merge",
  "type": "n8n-nodes-base.merge",
  "position": [
    1910,
    110
  ],
  "parameters": {
    "mode": "mergeByIndex"
  },
  "typeVersion": 1
}

================ Node #5395 ================
{
  "name": "Fetching images",
  "type": "n8n-nodes-base.httpRequest",
  "position": [
    860,
    210
  ],
  "parameters": {
    "url": "={{$json[\"profile_image_url\"].replace('normal','400x400')}}",
    "options": {},
    "responseFormat": "file",
    "dataPropertyName": "avatar"
  },
  "typeVersion": 1
}

================ Node #5396 ================
{
  "name": "Fetch bg",
  "type": "n8n-nodes-base.httpRequest",
  "position": [
    1660,
    -40
  ],
  "parameters": {
    "url": "{TEMPLATE_IMAGE_URL}",
    "options": {},
    "responseFormat": "file",
    "dataPropertyName": "bg"
  },
  "typeVersion": 1
}

================ Node #5397 ================
{
  "name": "Resize",
  "type": "n8n-nodes-base.editImage",
  "position": [
    1060,
    210
  ],
  "parameters": {
    "width": 200,
    "height": 200,
    "options": {},
    "operation": "resize",
    "dataPropertyName": "avatar"
  },
  "typeVersion": 1
}

================ Node #5398 ================
{
  "name": "Crop",
  "type": "n8n-nodes-base.editImage",
  "position": [
    1260,
    210
  ],
  "parameters": {
    "options": {
      "format": "png"
    },
    "operation": "multiStep",
    "operations": {
      "operations": [
        {
          "width": 200,
          "height": 200,
          "operation": "create",
          "backgroundColor": "#000000ff"
        },
        {
          "color": "#ffffff00",
          "operation": "draw",
          "primitive": "circle",
          "endPositionX": 25,
          "endPositionY": 50,
          "startPositionX": 100,
          "startPositionY": 100
        },
        {
          "operator": "In",
          "operation": "composite",
          "dataPropertyNameComposite": "avatar"
        }
      ]
    },
    "dataPropertyName": "avatar"
  },
  "typeVersion": 1
}

================ Node #5399 ================
{
  "name": "Edit Image",
  "type": "n8n-nodes-base.editImage",
  "position": [
    2110,
    110
  ],
  "parameters": {
    "options": {},
    "operation": "multiStep",
    "operations": {
      "operations": [
        {
          "operation": "composite",
          "positionX": 1000,
          "positionY": 375,
          "dataPropertyNameComposite": "data0"
        },
        {
          "operation": "composite",
          "positionX": 1100,
          "positionY": 375,
          "dataPropertyNameComposite": "data1"
        },
        {
          "operation": "composite",
          "positionX": 1200,
          "positionY": 375,
          "dataPropertyNameComposite": "data2"
        }
      ]
    },
    "dataPropertyName": "bg"
  },
  "typeVersion": 1
}

================ Node #5400 ================
{
  "name": "Resize1",
  "type": "n8n-nodes-base.editImage",
  "position": [
    1450,
    210
  ],
  "parameters": {
    "width": 75,
    "height": 75,
    "options": {},
    "operation": "resize",
    "dataPropertyName": "avatar"
  },
  "typeVersion": 1
}

================ Node #5401 ================
{
  "name": "HTTP Request",
  "type": "n8n-nodes-base.httpRequest",
  "position": [
    2310,
    110
  ],
  "parameters": {
    "url": "https://api.twitter.com/1.1/account/update_profile_banner.json",
    "options": {
      "bodyContentType": "multipart-form-data"
    },
    "requestMethod": "POST",
    "authentication": "oAuth1",
    "jsonParameters": true,
    "sendBinaryData": true,
    "binaryPropertyName": "banner:bg"
  },
  "credentials": {
    "oAuth1Api": {
      "id": "13",
      "name": "Twitter OAuth1.0"
    }
  },
  "typeVersion": 1
}

================ Node #5402 ================
{
  "name": "Start",
  "type": "n8n-nodes-base.start",
  "position": [
    250,
    300
  ],
  "parameters": {},
  "typeVersion": 1
}

================ Node #5403 ================
{
  "name": "HTTP Request",
  "type": "n8n-nodes-base.httpRequest",
  "position": [
    450,
    300
  ],
  "parameters": {
    "url": "https://unsplash.com/photos/lUDMZUWFUXE/download?ixid=MnwxMjA3fDB8MXxhbGx8Mnx8fHx8fDJ8fDE2MzczMjY4Mjc&force=true",
    "options": {},
    "responseFormat": "file",
    "headerParametersUi": {
      "parameter": []
    }
  },
  "typeVersion": 1
}

================ Node #5404 ================
{
  "name": "HTTP Request1",
  "type": "n8n-nodes-base.httpRequest",
  "position": [
    650,
    300
  ],
  "parameters": {
    "url": "https://api.twitter.com/1.1/account/update_profile_banner.json",
    "options": {},
    "requestMethod": "POST",
    "authentication": "oAuth1",
    "jsonParameters": true,
    "sendBinaryData": true,
    "binaryPropertyName": "banner:data"
  },
  "credentials": {
    "oAuth1Api": {
      "id": "300",
      "name": "Unnamed credential"
    }
  },
  "typeVersion": 1
}

================ Node #5405 ================
{
  "name": "Typeform Trigger",
  "type": "n8n-nodes-base.typeformTrigger",
  "position": [
    0,
    400
  ],
  "webhookId": "ad8a87ef-d293-4e48-8d36-838d69ebce0f",
  "parameters": {
    "formId": "fBYjtY5e"
  },
  "credentials": {
    "typeformApi": ""
  },
  "typeVersion": 1
}

================ Node #5406 ================
{
  "name": "Google Cloud Natural Language",
  "type": "n8n-nodes-base.googleCloudNaturalLanguage",
  "position": [
    200,
    400
  ],
  "parameters": {
    "content": "={{$json[\"Any suggestions for us? \"]}}",
    "options": {}
  },
  "credentials": {
    "googleCloudNaturalLanguageOAuth2Api": ""
  },
  "typeVersion": 1
}

================ Node #5407 ================
{
  "name": "IF",
  "type": "n8n-nodes-base.if",
  "position": [
    400,
    400
  ],
  "parameters": {
    "conditions": {
      "number": [
        {
          "value1": "={{$node[\"Google Cloud Natural Language\"].json[\"documentSentiment\"][\"score\"]}}",
          "operation": "larger"
        }
      ]
    }
  },
  "typeVersion": 1
}

================ Node #5408 ================
{
  "name": "Notion",
  "type": "n8n-nodes-base.notion",
  "position": [
    600,
    300
  ],
  "parameters": {
    "resource": "databasePage",
    "databaseId": "b7d1130a-3756-4bb3-aa56-0c77bf416437",
    "propertiesUi": {
      "propertyValues": [
        {
          "key": "Name|title",
          "title": "={{$node[\"Typeform Trigger\"].json[\"Name\"]}}"
        },
        {
          "key": "Feedback|rich_text",
          "textContent": "={{$node[\"Typeform Trigger\"].json[\"Any suggestions for us? \"]}}"
        }
      ]
    }
  },
  "credentials": {
    "notionApi": ""
  },
  "typeVersion": 1
}

================ Node #5409 ================
{
  "name": "Slack",
  "type": "n8n-nodes-base.slack",
  "position": [
    800,
    300
  ],
  "parameters": {
    "channel": "general",
    "blocksUi": {
      "blocksValues": []
    },
    "attachments": [
      {
        "text": "={{$node[\"Typeform Trigger\"].json[\"Any suggestions for us? \"]}}",
        "title": "={{$node[\"Typeform Trigger\"].json[\"Name\"]}} {{$node[\"Google Cloud Natural Language\"].json[\"documentSentiment\"][\"score\"]}}"
      }
    ],
    "otherOptions": {}
  },
  "credentials": {
    "slackApi": ""
  },
  "typeVersion": 1
}

================ Node #5410 ================
{
  "name": "Trello",
  "type": "n8n-nodes-base.trello",
  "position": [
    600,
    500
  ],
  "parameters": {
    "name": "=Score: {{$json[\"documentSentiment\"][\"score\"]}}",
    "listId": "5fbb9e2eb1d5cc0a8a7ab8ac",
    "description": "=Score: {{$json[\"documentSentiment\"][\"score\"]}}\nFeedback: {{$node[\"Typeform Trigger\"].json[\"Any suggestions for us? \"]}}\nUser: {{$node[\"Typeform Trigger\"].json[\"Name\"]}}",
    "additionalFields": {}
  },
  "credentials": {
    "trelloApi": ""
  },
  "typeVersion": 1
}

================ Node #5411 ================
{
  "name": "Twitter",
  "type": "n8n-nodes-base.twitter",
  "position": [
    300,
    300
  ],
  "parameters": {
    "limit": 3,
    "operation": "search",
    "searchText": "=#OnThisDay",
    "additionalFields": {}
  },
  "credentials": {
    "twitterOAuth1Api": "twitter_api"
  },
  "typeVersion": 1
}

================ Node #5412 ================
{
  "name": "Postgres",
  "type": "n8n-nodes-base.postgres",
  "position": [
    1100,
    300
  ],
  "parameters": {
    "table": "tweets",
    "columns": "text, score, magnitude",
    "returnFields": "=*"
  },
  "credentials": {
    "postgres": "postgres"
  },
  "typeVersion": 1
}

================ Node #5413 ================
{
  "name": "MongoDB",
  "type": "n8n-nodes-base.mongoDb",
  "position": [
    500,
    300
  ],
  "parameters": {
    "fields": "text",
    "options": {},
    "operation": "insert",
    "collection": "tweets"
  },
  "credentials": {
    "mongoDb": "mongodb"
  },
  "typeVersion": 1
}

================ Node #5414 ================
{
  "name": "Slack",
  "type": "n8n-nodes-base.slack",
  "position": [
    1500,
    200
  ],
  "parameters": {
    "text": "=\ud83d\udc26 NEW TWEET with sentiment score {{$json[\"score\"]}} and magnitude {{$json[\"magnitude\"]}} \u2b07\ufe0f\n{{$json[\"text\"]}}",
    "channel": "tweets",
    "attachments": [],
    "otherOptions": {}
  },
  "credentials": {
    "slackApi": "slack"
  },
  "typeVersion": 1
}

================ Node #5415 ================
{
  "name": "IF",
  "type": "n8n-nodes-base.if",
  "position": [
    1300,
    300
  ],
  "parameters": {
    "conditions": {
      "number": [
        {
          "value1": "={{$json[\"score\"]}}",
          "operation": "larger"
        }
      ]
    }
  },
  "typeVersion": 1
}

================ Node #5416 ================
{
  "name": "NoOp",
  "type": "n8n-nodes-base.noOp",
  "position": [
    1500,
    400
  ],
  "parameters": {},
  "typeVersion": 1
}

================ Node #5417 ================
{
  "name": "Google Cloud Natural Language",
  "type": "n8n-nodes-base.googleCloudNaturalLanguage",
  "position": [
    700,
    300
  ],
  "parameters": {
    "content": "={{$node[\"MongoDB\"].json[\"text\"]}}",
    "options": {}
  },
  "credentials": {
    "googleCloudNaturalLanguageOAuth2Api": "google_nlp"
  },
  "typeVersion": 1
}

================ Node #5418 ================
{
  "name": "Set",
  "type": "n8n-nodes-base.set",
  "position": [
    900,
    300
  ],
  "parameters": {
    "values": {
      "number": [
        {
          "name": "score",
          "value": "={{$json[\"documentSentiment\"][\"score\"]}}"
        },
        {
          "name": "magnitude",
          "value": "={{$json[\"documentSentiment\"][\"magnitude\"]}}"
        }
      ],
      "string": [
        {
          "name": "text",
          "value": "={{$node[\"Twitter\"].json[\"text\"]}}"
        }
      ]
    },
    "options": {}
  },
  "typeVersion": 1
}

================ Node #5419 ================
{
  "name": "Cron",
  "type": "n8n-nodes-base.cron",
  "position": [
    100,
    300
  ],
  "parameters": {
    "triggerTimes": {
      "item": [
        {
          "hour": 6
        }
      ]
    }
  },
  "typeVersion": 1
}

================ Node #5420 ================
{
  "name": "Mattermost",
  "type": "n8n-nodes-base.mattermost",
  "position": [
    810,
    300
  ],
  "parameters": {
    "message": "=You got new feedback with a score of {{$json[\"SentimentScore\"][\"Negative\"]}}. Here is what it says:{{$node[\"Typeform Trigger\"].json[\"What did you think about the event?\"]}}",
    "channelId": "h7cxrd1cefr13x689enzyw7xhc",
    "attachments": [],
    "otherOptions": {}
  },
  "credentials": {
    "mattermostApi": "Mattermost Credentials"
  },
  "typeVersion": 1
}

================ Node #5421 ================
{
  "name": "NoOp",
  "type": "n8n-nodes-base.noOp",
  "position": [
    800,
    500
  ],
  "parameters": {},
  "typeVersion": 1
}

================ Node #5422 ================
{
  "name": "IF",
  "type": "n8n-nodes-base.if",
  "position": [
    600,
    400
  ],
  "parameters": {
    "conditions": {
      "number": [],
      "string": [
        {
          "value1": "={{$json[\"Sentiment\"]}}",
          "value2": "NEGATIVE"
        }
      ]
    }
  },
  "typeVersion": 1
}

================ Node #5423 ================
{
  "name": "AWS Comprehend",
  "type": "n8n-nodes-base.awsComprehend",
  "position": [
    400,
    400
  ],
  "parameters": {
    "text": "={{$json[\"What did you think about the event?\"]}}",
    "operation": "detectSentiment"
  },
  "credentials": {
    "aws": "AWS Comprehend Credentials"
  },
  "typeVersion": 1
}

================ Node #5424 ================
{
  "name": "Typeform Trigger",
  "type": "n8n-nodes-base.typeformTrigger",
  "position": [
    200,
    400
  ],
  "webhookId": "ad8a87ef-d293-4e48-8d36-838d69ebce0f",
  "parameters": {
    "formId": "DuJHEGW5"
  },
  "credentials": {
    "typeformApi": "typeform"
  },
  "typeVersion": 1
}

================ Node #5425 ================
{
  "name": "Typeform Trigger",
  "type": "n8n-nodes-base.typeformTrigger",
  "position": [
    510,
    260
  ],
  "webhookId": "ad8a87ef-d293-4e48-8d36-838d69ebce0f",
  "parameters": {
    "formId": ""
  },
  "credentials": {
    "typeformApi": "typeform"
  },
  "typeVersion": 1
}

================ Node #5426 ================
{
  "name": "Google Cloud Natural Language",
  "type": "n8n-nodes-base.googleCloudNaturalLanguage",
  "position": [
    710,
    260
  ],
  "parameters": {
    "content": "={{$node[\"Typeform Trigger\"].json[\"What did you think about the event?\"]}}",
    "options": {}
  },
  "credentials": {
    "googleCloudNaturalLanguageOAuth2Api": "cloud"
  },
  "typeVersion": 1
}

================ Node #5427 ================
{
  "name": "IF",
  "type": "n8n-nodes-base.if",
  "position": [
    910,
    260
  ],
  "parameters": {
    "conditions": {
      "number": [
        {
          "value1": "={{$node[\"Google Cloud Natural Language\"].json[\"documentSentiment\"][\"score\"]}}"
        }
      ]
    }
  },
  "typeVersion": 1
}

================ Node #5428 ================
{
  "name": "Mattermost",
  "type": "n8n-nodes-base.mattermost",
  "position": [
    1110,
    160
  ],
  "parameters": {
    "message": "=You got a new feedback with a score of {{$node[\"Google Cloud Natural Language\"].json[\"documentSentiment\"][\"score\"]}}. Here is what it says:{{$node[\"Typeform Trigger\"].json[\"What did you think about the event?\"]}}",
    "channelId": "4h1bz64cyifwxnzojkzh8hxh4a",
    "attachments": [],
    "otherOptions": {}
  },
  "credentials": {
    "mattermostApi": "mattermost"
  },
  "typeVersion": 1
}

================ Node #5429 ================
{
  "name": "NoOp",
  "type": "n8n-nodes-base.noOp",
  "position": [
    1110,
    360
  ],
  "parameters": {},
  "typeVersion": 1
}

================ Node #5430 ================
{
  "name": "On clicking 'execute'",
  "type": "n8n-nodes-base.manualTrigger",
  "position": [
    290,
    300
  ],
  "parameters": {},
  "typeVersion": 1
}

================ Node #5431 ================
{
  "name": "Humantic AI",
  "type": "n8n-nodes-base.humanticAi",
  "position": [
    490,
    300
  ],
  "parameters": {
    "userId": "https://www.linkedin.com/in/harshil1712/"
  },
  "credentials": {
    "humanticAiApi": "humantic"
  },
  "typeVersion": 1
}

================ Node #5432 ================
{
  "name": "HTTP Request",
  "type": "n8n-nodes-base.httpRequest",
  "position": [
    690,
    300
  ],
  "parameters": {
    "url": "",
    "options": {},
    "responseFormat": "file"
  },
  "typeVersion": 1
}

================ Node #5433 ================
{
  "name": "Humantic AI1",
  "type": "n8n-nodes-base.humanticAi",
  "position": [
    890,
    300
  ],
  "parameters": {
    "userId": "={{$node[\"Humantic AI\"].json[\"results\"][\"userid\"]}}",
    "operation": "update",
    "sendResume": true
  },
  "credentials": {
    "humanticAiApi": "humantic"
  },
  "typeVersion": 1
}

================ Node #5434 ================
{
  "name": "Humantic AI2",
  "type": "n8n-nodes-base.humanticAi",
  "position": [
    1090,
    300
  ],
  "parameters": {
    "userId": "={{$node[\"Humantic AI\"].json[\"results\"][\"userid\"]}}",
    "options": {
      "persona": [
        "hiring"
      ]
    },
    "operation": "get"
  },
  "credentials": {
    "humanticAiApi": "humantic"
  },
  "typeVersion": 1
}