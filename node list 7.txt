================ Node #3001 ================
{
  "id": "ea4d4e74-8954-47f0-a3a0-662d47ea2298",
  "name": "Telegram get File",
  "type": "n8n-nodes-base.telegram",
  "position": [
    520,
    220
  ],
  "parameters": {
    "fileId": "={{ $json.message.document.file_id }}",
    "resource": "file"
  },
  "credentials": {
    "telegramApi": {
      "id": "",
      "name": ""
    }
  },
  "typeVersion": 1.2
}

================ Node #3002 ================
{
  "id": "cf548bee-d5d5-4f1a-a059-932ea163e155",
  "name": "Embeddings",
  "type": "@n8n/n8n-nodes-langchain.embeddingsOpenAi",
  "position": [
    -100,
    1080
  ],
  "parameters": {
    "options": {}
  },
  "credentials": {
    "openAiApi": {
      "id": "",
      "name": ""
    }
  },
  "typeVersion": 1
}

================ Node #3003 ================
{
  "id": "e3bd4759-80cc-42bb-ba53-f9e88e9ba916",
  "name": "Telegram Response",
  "type": "n8n-nodes-base.telegram",
  "onError": "continueErrorOutput",
  "position": [
    160,
    560
  ],
  "parameters": {
    "text": "={{ $json.response.text }}",
    "chatId": "={{ $('Telegram Trigger').item.json.message.chat.id }}",
    "additionalFields": {
      "appendAttribution": false
    }
  },
  "credentials": {
    "telegramApi": {
      "id": "",
      "name": ""
    }
  },
  "typeVersion": 1.2
}

================ Node #3004 ================
{
  "id": "e478df48-9e6d-4a84-89be-beb569914ae3",
  "name": "Telegram Response about Database",
  "type": "n8n-nodes-base.telegram",
  "onError": "continueErrorOutput",
  "position": [
    1400,
    220
  ],
  "parameters": {
    "text": "={{ $json.metadata.pdf.totalPages }} pages saved on Pinecone",
    "chatId": "={{ $('Telegram Trigger').item.json.message.chat.id }}",
    "additionalFields": {
      "appendAttribution": false
    }
  },
  "credentials": {
    "telegramApi": {
      "id": "",
      "name": ""
    }
  },
  "typeVersion": 1.2
}

================ Node #3005 ================
{
  "id": "5be7a321-1be6-4173-83de-3d569666718d",
  "name": "Stop and Error1",
  "type": "n8n-nodes-base.stopAndError",
  "position": [
    1400,
    580
  ],
  "parameters": {
    "errorMessage": "An error occurred."
  },
  "typeVersion": 1
}

================ Node #3006 ================
{
  "id": "aae26861-f34d-4b59-bd99-3662fbd6676c",
  "name": "Pinecone Vector Store",
  "type": "@n8n/n8n-nodes-langchain.vectorStorePinecone",
  "position": [
    880,
    220
  ],
  "parameters": {
    "mode": "insert",
    "options": {},
    "pineconeIndex": {
      "__rl": true,
      "mode": "list",
      "value": "telegram",
      "cachedResultName": "telegram"
    }
  },
  "credentials": {
    "pineconeApi": {
      "id": "",
      "name": ""
    }
  },
  "typeVersion": 1
}

================ Node #3007 ================
{
  "id": "312fb807-4225-4630-ab32-aa12fe07c127",
  "name": "Limit to 1",
  "type": "n8n-nodes-base.limit",
  "position": [
    1220,
    220
  ],
  "parameters": {},
  "typeVersion": 1
}

================ Node #3008 ================
{
  "id": "fb774d11-da48-4481-ad4e-8c93274f123e",
  "name": "Send message",
  "type": "n8n-nodes-base.slack",
  "position": [
    2340,
    580
  ],
  "parameters": {
    "text": "=Data from webhook: {{ $json.query.email }}",
    "select": "channel",
    "channelId": {
      "__rl": true,
      "mode": "list",
      "value": "C079GL6K3U6",
      "cachedResultName": "general"
    },
    "otherOptions": {},
    "authentication": "oAuth2"
  },
  "typeVersion": 2.2
}

================ Node #3009 ================
{
  "id": "5a3ad8f1-eba7-4076-80fc-0c1237aab50b",
  "name": "Sticky Note2",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    380,
    240
  ],
  "parameters": {
    "color": 7,
    "width": 1163.3132111854613,
    "height": 677.0358687053997,
    "content": "![h](https://i.postimg.cc/9XLvL5dL/slide-sf-talk.png#full-width)"
  },
  "typeVersion": 1
}

================ Node #3010 ================
{
  "id": "01c59396-0fef-4d1c-aa1f-787669300650",
  "name": "Sticky Note",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    1860,
    240
  ],
  "parameters": {
    "color": 7,
    "width": 437,
    "height": 99,
    "content": "# What is n8n?\n### Low-code Automation Platform for technical teams"
  },
  "typeVersion": 1
}

================ Node #3011 ================
{
  "id": "0bdd4a35-7f5c-443c-a14a-4e6f7ed18712",
  "name": "Execute JavaScript",
  "type": "n8n-nodes-base.code",
  "position": [
    2340,
    380
  ],
  "parameters": {
    "jsCode": "// Loop over input items and add a new field called 'myNewField' to the JSON of each one\nfor (const item of $input.all()) {\n item.json.myNewField = 1;\n}\n\nreturn $input.all();"
  },
  "typeVersion": 2
}

================ Node #3012 ================
{
  "id": "4b1b6cc1-1a9f-4a0c-96d5-fd179c84c79d",
  "name": "Sticky Note3",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    4440,
    240
  ],
  "parameters": {
    "color": 6,
    "width": 318,
    "height": 106,
    "content": "# Example #2\n### RAG with PDF as source"
  },
  "typeVersion": 1
}

================ Node #3013 ================
{
  "id": "7e9e7802-5695-4240-83b9-d6f02192ad2b",
  "name": "Recursive Character Text Splitter",
  "type": "@n8n/n8n-nodes-langchain.textSplitterRecursiveCharacterTextSplitter",
  "position": [
    5120,
    1000
  ],
  "parameters": {
    "options": {},
    "chunkSize": 3000,
    "chunkOverlap": 200
  },
  "typeVersion": 1
}

================ Node #3014 ================
{
  "id": "63783c21-af6d-4e70-8dec-c861641c53fb",
  "name": "Embeddings OpenAI",
  "type": "@n8n/n8n-nodes-langchain.embeddingsOpenAi",
  "position": [
    4880,
    820
  ],
  "parameters": {
    "options": {}
  },
  "typeVersion": 1
}

================ Node #3015 ================
{
  "id": "5742ce9c-2f73-4129-85eb-876f562cf6b1",
  "name": "Default Data Loader",
  "type": "@n8n/n8n-nodes-langchain.documentDefaultDataLoader",
  "position": [
    5100,
    820
  ],
  "parameters": {
    "loader": "pdfLoader",
    "options": {
      "metadata": {
        "metadataValues": [
          {
            "name": "document-title",
            "value": "={{ $('PDFs to download').item.json.whitepaper_title }}"
          },
          {
            "name": "document-publish-year",
            "value": "={{ $('PDFs to download').item.json.publish_year }}"
          },
          {
            "name": "document-author",
            "value": "={{ $('PDFs to download').item.json.author }}"
          }
        ]
      }
    },
    "dataType": "binary"
  },
  "typeVersion": 1
}

================ Node #3016 ================
{
  "id": "686c63fa-4672-4107-bd58-ffbb0650b44b",
  "name": "OpenAI Chat Model",
  "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
  "position": [
    5840,
    840
  ],
  "parameters": {
    "model": "gpt-4o",
    "options": {
      "temperature": 0.3
    }
  },
  "typeVersion": 1
}

================ Node #3017 ================
{
  "id": "73a7df02-aa2c-4f0f-aa88-38cbbbf3b1cb",
  "name": "Embeddings OpenAI2",
  "type": "@n8n/n8n-nodes-langchain.embeddingsOpenAi",
  "position": [
    5980,
    1140
  ],
  "parameters": {
    "options": {}
  },
  "typeVersion": 1
}

================ Node #3018 ================
{
  "id": "42737305-fd39-4ec7-b4ba-53f70085dd5f",
  "name": "Vector Store Retriever",
  "type": "@n8n/n8n-nodes-langchain.retrieverVectorStore",
  "position": [
    6040,
    840
  ],
  "parameters": {},
  "typeVersion": 1
}

================ Node #3019 ================
{
  "id": "2c7a3666-e123-439d-8b74-41eb375f066c",
  "name": "Download PDF",
  "type": "n8n-nodes-base.httpRequest",
  "position": [
    4700,
    600
  ],
  "parameters": {
    "url": "={{ $json.file_url }}",
    "options": {}
  },
  "typeVersion": 4.2
}

================ Node #3020 ================
{
  "id": "866eaeb9-6a7c-4209-b485-8ef13ed006b4",
  "name": "PDFs to download",
  "type": "n8n-nodes-base.noOp",
  "notes": "BTC Whitepaper + metadata",
  "position": [
    4440,
    600
  ],
  "parameters": {},
  "notesInFlow": true,
  "typeVersion": 1
}

================ Node #3021 ================
{
  "id": "e78f2191-096c-4575-9d48-fb891fd18698",
  "name": "Sticky Note4",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    4440,
    440
  ],
  "parameters": {
    "color": 4,
    "width": 414.36616595939887,
    "height": 91.0723900084547,
    "content": "## A. Load PDF into Pinecone\nDownload the PDF, then text embeddings into Pincecone"
  },
  "typeVersion": 1
}

================ Node #3022 ================
{
  "id": "7c3ccf27-32b1-4ea7-b2ef-6997793de733",
  "name": "Sticky Note5",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    5600,
    460
  ],
  "parameters": {
    "color": 4,
    "width": 284.62109466374466,
    "height": 86.95121951219511,
    "content": "## B. Chat with PDF\nUse GPT4o to chat with Pinecone index"
  },
  "typeVersion": 1
}

================ Node #3023 ================
{
  "id": "6063d009-da6e-4cbf-899f-c86b879931a7",
  "name": "Read Pinecone Vector Store",
  "type": "@n8n/n8n-nodes-langchain.vectorStorePinecone",
  "position": [
    5980,
    980
  ],
  "parameters": {
    "options": {
      "pineconeNamespace": "whitepaper"
    },
    "pineconeIndex": {
      "__rl": true,
      "mode": "list",
      "value": "whitepapers",
      "cachedResultName": "whitepapers"
    }
  },
  "typeVersion": 1
}

================ Node #3024 ================
{
  "id": "8aa52156-264d-4911-993c-ac5117a76b21",
  "name": "Question and Answer Chain",
  "type": "@n8n/n8n-nodes-langchain.chainRetrievalQa",
  "position": [
    5840,
    620
  ],
  "parameters": {
    "text": "={{ $json.chatInput }}. \nOnly use vector store knowledge to answer the question. Don't make anything up. If you don't know the answer, tell the user that you don't know.",
    "promptType": "define"
  },
  "typeVersion": 1.3
}

================ Node #3025 ================
{
  "id": "b394ee1d-a2ca-4db0-8caa-981f8f066787",
  "name": "Sticky Note6",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    7380,
    240
  ],
  "parameters": {
    "color": 6,
    "width": 504.25,
    "height": 106,
    "content": "# Example #3\n### AI Assistant that knows how to use predefined API endpoints "
  },
  "typeVersion": 1
}

================ Node #3026 ================
{
  "id": "37a8b8f2-c444-4c6e-9b02-b97a5c616e84",
  "name": "Sticky Note7",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    3020,
    220
  ],
  "parameters": {
    "color": 6,
    "width": 318,
    "height": 111,
    "content": "# Example #1\n### Categorize incoming emails with AI"
  },
  "typeVersion": 1
}

================ Node #3027 ================
{
  "id": "07123e8e-8760-4c89-acda-aaef6de68be2",
  "name": "Anthropic Chat Model",
  "type": "@n8n/n8n-nodes-langchain.lmChatAnthropic",
  "position": [
    7580,
    700
  ],
  "parameters": {
    "options": {
      "temperature": 0.4
    }
  },
  "typeVersion": 1.2
}

================ Node #3028 ================
{
  "id": "e338a175-e823-4cd4-b77d-f5acbfcbdb9d",
  "name": "Get calendar availability",
  "type": "@n8n/n8n-nodes-langchain.toolHttpRequest",
  "position": [
    7900,
    700
  ],
  "parameters": {
    "url": "https://www.googleapis.com/calendar/v3/freeBusy",
    "method": "POST",
    "jsonBody": "={\n \"timeMin\": \"{timeMin}\",\n \"timeMax\": \"{timeMax}\",\n \"timeZone\": \"Europe/Berlin\",\n \"groupExpansionMax\": 20,\n \"calendarExpansionMax\": 10,\n \"items\": [\n {\n \"id\": \"max@n8n.io\"\n }\n ]\n}",
    "sendBody": true,
    "specifyBody": "json",
    "authentication": "predefinedCredentialType",
    "toolDescription": "Call this tool to get the appointment availability for a particular period on the calendar. The tool may refer to availability as \"Free\" or \"Busy\". \n\nUse {timeMin} and {timeMax} to specify the window for the availability query. For example, to get availability for 25 July, 2024 the {timeMin} would be 2024-07-25T09:00:00+02:00 and {timeMax} would be 2024-07-25T17:00:00+02:00.\n\nIf the tool returns an empty response, it means that something went wrong. It does not mean that there is no availability.",
    "nodeCredentialType": "googleCalendarOAuth2Api"
  },
  "typeVersion": 1
}

================ Node #3029 ================
{
  "id": "ae05933c-dfa9-4272-b610-8b5fc94d76fe",
  "name": "Appointment booking agent",
  "type": "@n8n/n8n-nodes-langchain.agent",
  "position": [
    7680,
    480
  ],
  "parameters": {
    "options": {
      "systemMessage": "=You are an efficient and courteous assistant tasked with scheduling appointments with Max Tkacz.\n\nWhen users mention an appointment or meeting, they are referring to a meeting with Max.\nWhen users refer to the calendar or \"your schedule,\" they are referring to Max's calendar. \n\nYou can use various tools to access and manage Max's calendar. Your primary goal is to assist users in successfully booking an appointment with Max, ensuring no scheduling conflicts. Only book an appointment if the requested time slot is available (the tool may refer to this as \"Free\")\n\nToday's date is {{ $today.format('dd LLL yyyy') }}.\nAppointments are always 30 minutes in length. \n\n\nProvide accurate information at all times. If the tools are not functioning correctly, inform the user that you are unable to assist them at the moment.\n"
    }
  },
  "typeVersion": 1.6
}

================ Node #3030 ================
{
  "id": "7e3b1797-150e-4c7c-93a5-306b981e0b6c",
  "name": "Sticky Note1",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    8300,
    440
  ],
  "parameters": {
    "color": 7,
    "width": 327.46658341463433,
    "height": 571.8601927804875,
    "content": "![h](https://i.imghippo.com/files/d9Bgv1721858679.png#full-width)\n[Open Calendar](https://calendar.google.com/calendar/u/0/r/day/2024/7/26)"
  },
  "typeVersion": 1
}

================ Node #3031 ================
{
  "id": "afe8d14d-d0d0-4a11-bb4f-57358de66bc1",
  "name": "Window Buffer Memory",
  "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
  "position": [
    7720,
    700
  ],
  "parameters": {
    "contextWindowLength": 10
  },
  "typeVersion": 1.2
}

================ Node #3032 ================
{
  "id": "53d131ea-3235-4e4e-828b-dc22c9021e50",
  "name": "Sticky Note8",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    6380,
    640
  ],
  "parameters": {
    "color": 7,
    "width": 615.2162978341456,
    "height": 403.1877919219511,
    "content": "![h](https://i.postimg.cc/kXW9XrZt/Screenshot-2024-07-24-at-15-18-27.png#full-width)\nBTC Whitepaper references"
  },
  "typeVersion": 1
}

================ Node #3033 ================
{
  "id": "55a0f180-bb35-4b35-b72c-b9361698e5ad",
  "name": "Sticky Note9",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    9660,
    240
  ],
  "parameters": {
    "color": 7,
    "width": 345.33741540309194,
    "height": 398.9629539487597,
    "content": "### Connect with me or explore this demo \ud83d\udc47\n![QR](https://i.postimg.cc/VNkdCLQh/frame.png#full-width)"
  },
  "typeVersion": 1
}

================ Node #3034 ================
{
  "id": "14b3231d-aa96-4783-be8f-cb2f70b0bc7f",
  "name": "Sticky Note10",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    9220,
    240
  ],
  "parameters": {
    "color": 7,
    "width": 411.2946586626259,
    "height": 197.19036476628202,
    "content": "# Thank you and happy flowgramming \ud83e\udd18\n\n### Max Tkacz | Senior Developer Advocate @ n8n"
  },
  "typeVersion": 1
}

================ Node #3035 ================
{
  "id": "c9a2fcdc-c8ab-4b9d-9979-4fd7cca1e8a8",
  "name": "Insert into Pinecone vector store",
  "type": "@n8n/n8n-nodes-langchain.vectorStorePinecone",
  "position": [
    4920,
    600
  ],
  "parameters": {
    "mode": "insert",
    "options": {
      "clearNamespace": true,
      "pineconeNamespace": "whitepaper"
    },
    "pineconeIndex": {
      "__rl": true,
      "mode": "list",
      "value": "whitepapers",
      "cachedResultName": "whitepapers"
    }
  },
  "typeVersion": 1
}

================ Node #3036 ================
{
  "id": "6a890c74-67f9-4eee-bb56-7c9a68921ae1",
  "name": "Book appointment",
  "type": "@n8n/n8n-nodes-langchain.toolHttpRequest",
  "position": [
    8060,
    700
  ],
  "parameters": {
    "url": "https://www.googleapis.com/calendar/v3/calendars/max@n8n.io/events",
    "method": "POST",
    "jsonBody": "={\n \"summary\": \"Appointment with {userName}\",\n \"start\": {\n \"dateTime\": \"{startTime}\",\n \"timeZone\": \"Europe/Berlin\"\n },\n \"end\": {\n \"dateTime\": \"{endTime}\",\n \"timeZone\": \"Europe/Berlin\"\n },\n \"attendees\": [\n {\"email\": \"max@n8n.io\"},\n {\"email\": \"{userEmail}\"}\n ]\n}",
    "sendBody": true,
    "specifyBody": "json",
    "authentication": "predefinedCredentialType",
    "toolDescription": "Call this tool to book an appointment in the calendar. ",
    "nodeCredentialType": "googleCalendarOAuth2Api",
    "placeholderDefinitions": {
      "values": [
        {
          "name": "userName",
          "description": "The full name of the user making the appointment. Like John Doe"
        },
        {
          "name": "startTime",
          "description": "The start time of the event in Europe/Berlin timezone. For example, 2024-07-24T10:00:00+02:00"
        },
        {
          "name": "endTime",
          "description": "The end time of the event in Europe/Berlin timezone. It should always be 30 minutes after the startTime. "
        },
        {
          "name": "userEmail",
          "description": "The email address of the user making the appointment"
        }
      ]
    }
  },
  "typeVersion": 1
}

================ Node #3037 ================
{
  "id": "7f6e62f2-2d72-4fd2-a6ef-e57028d0055b",
  "name": "When chat message received",
  "type": "@n8n/n8n-nodes-langchain.chatTrigger",
  "position": [
    5600,
    620
  ],
  "webhookId": "c348693e-9c43-4bf2-90a5-23786273e809",
  "parameters": {
    "public": true,
    "options": {
      "title": "Book an appointment with Max"
    },
    "initialMessages": "Hi there! \ud83d\udc4b\nI can help you schedule an appointment with Max Tkacz. On which day would you like to meet?"
  },
  "typeVersion": 1.1
}

================ Node #3038 ================
{
  "id": "52c65975-479d-4c76-bcd3-23f5c9bb6acf",
  "name": "Sticky Note11",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    9220,
    460
  ],
  "parameters": {
    "color": 7,
    "width": 411.2946586626259,
    "height": 80,
    "content": "### Explore 100+ AI Workflow templates on n8n.io\n[Open Templates Library](https://n8n.io/workflows)"
  },
  "typeVersion": 1
}

================ Node #3039 ================
{
  "id": "ba0635c0-2ca4-4b27-b960-3a0e0f93a56a",
  "name": "Sticky Note12",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    9220,
    560
  ],
  "parameters": {
    "color": 7,
    "width": 411.2946586626259,
    "height": 80,
    "content": "### Ask a question in our community (13k+ members)\n[Explore n8n community](https://community.n8n.io/)"
  },
  "typeVersion": 1
}

================ Node #3040 ================
{
  "id": "29227c52-a9cc-4bd1-b1a3-78fb805b659c",
  "name": "OpenAI Chat Model1",
  "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
  "position": [
    3260,
    660
  ],
  "parameters": {
    "model": "gpt-4o",
    "options": {
      "temperature": 0.5
    }
  },
  "typeVersion": 1
}

================ Node #3041 ================
{
  "id": "494a2868-9ff5-402c-b83b-6dd2c3ddbcc9",
  "name": "Add automation label",
  "type": "n8n-nodes-base.gmail",
  "position": [
    3760,
    300
  ],
  "parameters": {
    "labelIds": [
      "Label_4763053241338138112"
    ],
    "messageId": "={{ $json.id }}",
    "operation": "addLabels"
  },
  "typeVersion": 2.1
}

================ Node #3042 ================
{
  "id": "0f9d834d-ec47-43f5-945b-8c464d371122",
  "name": "On new email to nathan's inbox",
  "type": "n8n-nodes-base.gmailTrigger",
  "disabled": true,
  "position": [
    3040,
    460
  ],
  "parameters": {
    "simple": false,
    "filters": {},
    "options": {},
    "pollTimes": {
      "item": [
        {
          "mode": "everyMinute"
        }
      ]
    }
  },
  "typeVersion": 1.1
}

================ Node #3043 ================
{
  "id": "142e2a49-40bd-4bf5-9ba3-f14ecd68618e",
  "name": "Add music label",
  "type": "n8n-nodes-base.gmail",
  "position": [
    3760,
    500
  ],
  "parameters": {
    "labelIds": [
      "Label_6822395192337188416"
    ],
    "messageId": "={{ $json.id }}",
    "operation": "addLabels"
  },
  "typeVersion": 2.1
}

================ Node #3044 ================
{
  "id": "2eb46753-a0e8-43ec-a460-466b1dd265c9",
  "name": "Assign label with AI",
  "type": "@n8n/n8n-nodes-langchain.textClassifier",
  "position": [
    3280,
    460
  ],
  "parameters": {
    "options": {},
    "inputText": "={{ $json.text }}",
    "categories": {
      "categories": [
        {
          "category": "automation",
          "description": "email on the topic of automation or workflows and automated processes, includes newsletters on this topic"
        },
        {
          "category": "music",
          "description": "email on the topic of music, for example from an artist "
        }
      ]
    }
  },
  "typeVersion": 1
}

================ Node #3045 ================
{
  "id": "576d8206-1b1e-4671-ba45-86e9d844a73b",
  "name": "Webhook",
  "type": "n8n-nodes-base.webhook",
  "position": [
    1860,
    460
  ],
  "webhookId": "74facfd7-0f51-4605-9724-2c300594fcf9",
  "parameters": {
    "path": "74facfd7-0f51-4605-9724-2c300594fcf9",
    "options": {}
  },
  "typeVersion": 2
}

================ Node #3046 ================
{
  "id": "1e612376-1a3b-4c48-9cd3-97867ba4cad5",
  "name": "Whether email contains n8n",
  "type": "n8n-nodes-base.if",
  "position": [
    2060,
    460
  ],
  "parameters": {
    "options": {},
    "conditions": {
      "options": {
        "leftValue": "",
        "caseSensitive": true,
        "typeValidation": "strict"
      },
      "combinator": "and",
      "conditions": [
        {
          "id": "a0b16c44-03ea-4e96-9671-7b168697186d",
          "operator": {
            "type": "string",
            "operation": "contains"
          },
          "leftValue": "={{ $json.query.email }}",
          "rightValue": "@n8n"
        }
      ]
    }
  },
  "typeVersion": 2
}

================ Node #3047 ================
{
  "id": "bec5c6c1-52d4-4665-b814-56a6bb82ea6b",
  "name": "OpenAI Chat Model1",
  "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
  "position": [
    800,
    660
  ],
  "parameters": {
    "options": {
      "temperature": 0
    }
  },
  "credentials": {
    "openAiApi": {
      "id": "8gccIjcuf3gvaoEr",
      "name": "OpenAi account"
    }
  },
  "typeVersion": 1
}

================ Node #3048 ================
{
  "id": "d3e057d1-df44-4ac3-ac46-fc2b04e3de78",
  "name": "Get Meeting ConferenceRecords",
  "type": "n8n-nodes-base.httpRequest",
  "position": [
    20,
    580
  ],
  "parameters": {
    "url": "https://meet.googleapis.com/v2/conferenceRecords",
    "options": {},
    "sendQuery": true,
    "authentication": "predefinedCredentialType",
    "queryParameters": {
      "parameters": [
        {
          "name": "filter",
          "value": "=space.meeting_code={{ $json.conferenceData.conferenceId }}"
        }
      ]
    },
    "nodeCredentialType": "googleOAuth2Api"
  },
  "credentials": {
    "googleOAuth2Api": {
      "id": "kgVOfvlBIWTWXthG",
      "name": "Google Meets Oauth2 API"
    }
  },
  "typeVersion": 4.2
}

================ Node #3049 ================
{
  "id": "831668fd-04ab-4144-bec0-c733902f2a13",
  "name": "Get Meeting Transcript Location",
  "type": "n8n-nodes-base.httpRequest",
  "position": [
    200,
    580
  ],
  "parameters": {
    "url": "=https://meet.googleapis.com/v2/{{ $json.conferenceRecords[0].name }}/transcripts",
    "options": {},
    "authentication": "predefinedCredentialType",
    "nodeCredentialType": "googleOAuth2Api"
  },
  "credentials": {
    "googleOAuth2Api": {
      "id": "kgVOfvlBIWTWXthG",
      "name": "Google Meets Oauth2 API"
    }
  },
  "typeVersion": 4.2
}

================ Node #3050 ================
{
  "id": "0a1c3386-1456-4abd-a67c-4f2084efb1f1",
  "name": "Get Transcript File",
  "type": "n8n-nodes-base.googleDrive",
  "position": [
    380,
    580
  ],
  "parameters": {
    "fileId": {
      "__rl": true,
      "mode": "url",
      "value": "={{ $json.docsDestination.document }}"
    },
    "options": {
      "googleFileConversion": {
        "conversion": {
          "docsToFormat": "application/pdf"
        }
      }
    },
    "operation": "download"
  },
  "credentials": {
    "googleDriveOAuth2Api": {
      "id": "yOwz41gMQclOadgu",
      "name": "Google Drive account"
    }
  },
  "typeVersion": 3
}

================ Node #3051 ================
{
  "id": "40d1e969-3a04-4fb0-98c3-59865f317e07",
  "name": "When clicking \"Test workflow\"",
  "type": "n8n-nodes-base.manualTrigger",
  "position": [
    -480,
    540
  ],
  "parameters": {},
  "typeVersion": 1
}

================ Node #3052 ================
{
  "id": "1d277cc0-9f51-43a2-9d17-17d535b4dd53",
  "name": "PDF Loader",
  "type": "n8n-nodes-base.extractFromFile",
  "position": [
    660,
    520
  ],
  "parameters": {
    "options": {},
    "operation": "pdf"
  },
  "typeVersion": 1
}

================ Node #3053 ================
{
  "id": "08b2d0ce-0f59-45d8-b010-53910a1bc746",
  "name": "Get Calendar Event",
  "type": "n8n-nodes-base.googleCalendar",
  "position": [
    -280,
    540
  ],
  "parameters": {
    "eventId": "abc123",
    "options": {},
    "calendar": {
      "__rl": true,
      "mode": "list",
      "value": "c_5792bdf04bc395cbcbc6f7b754268245a33779d36640cc80a357711aa2f09a0a@group.calendar.google.com",
      "cachedResultName": "n8n-events"
    },
    "operation": "get"
  },
  "credentials": {
    "googleCalendarOAuth2Api": {
      "id": "kWMxmDbMDDJoYFVK",
      "name": "Google Calendar account"
    }
  },
  "typeVersion": 1.1
}

================ Node #3054 ================
{
  "id": "35a68444-15da-4b6e-a3c8-d296971b0fc0",
  "name": "Structured Output Parser",
  "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
  "position": [
    1040,
    660
  ],
  "parameters": {
    "jsonSchema": "{\n \"type\": \"object\",\n \"properties\": {\n \"summary\": { \"type\": \"string\" },\n \"highlights\": {\n \"type\": \"array\",\n \"items\": {\n \"type\": \"object\",\n \"properties\": {\n \"attendee\": { \"type\": \"string\" },\n \"message\": { \"type\": \"string\" }\n }\n }\n },\n \"next_steps\": {\n \"type\": \"array\",\n \"items:\": {\n \"type\": \"string\"\n }\n },\n \"meetings_created\": {\n \"type\": \"array\",\n \"items\": {\n \"type\": \"object\",\n \"properties\": {\n \"event_title\": { \"type\": \"string\" },\n \"event_invite_url\": { \"type\" : \"string\" }\n }\n }\n }\n }\n}"
  },
  "typeVersion": 1.1
}

================ Node #3055 ================
{
  "id": "e73ab051-1763-4130-bf44-f1461886e5f4",
  "name": "Execute Workflow Trigger",
  "type": "n8n-nodes-base.executeWorkflowTrigger",
  "position": [
    640,
    1200
  ],
  "parameters": {},
  "typeVersion": 1
}

================ Node #3056 ================
{
  "id": "c940c9e1-8236-45b8-bdb2-39a326004680",
  "name": "Response",
  "type": "n8n-nodes-base.set",
  "position": [
    1780,
    1080
  ],
  "parameters": {
    "options": {},
    "assignments": {
      "assignments": [
        {
          "id": "3c12dc11-0ff3-4c6a-9d67-1454d7b0d16d",
          "name": "response",
          "type": "string",
          "value": "={{ JSON.stringify($('Create Calendar Event1').item.json) }}"
        }
      ]
    }
  },
  "typeVersion": 3.3
}

================ Node #3057 ================
{
  "id": "daa3e96f-bcc1-4f99-a050-c09189041ce5",
  "name": "Edit Fields",
  "type": "n8n-nodes-base.set",
  "position": [
    800,
    1200
  ],
  "parameters": {
    "options": {},
    "assignments": {
      "assignments": [
        {
          "id": "7263764b-8409-4cea-8db3-3278dd7ef9d8",
          "name": "=route",
          "type": "string",
          "value": "={{ $json.route }}"
        },
        {
          "id": "55c3b207-2e98-4137-8413-f72cbff17986",
          "name": "query",
          "type": "object",
          "value": "={{ $json.query.parseJson() }}"
        }
      ]
    }
  },
  "typeVersion": 3.3
}

================ Node #3058 ================
{
  "id": "4e492c9f-6be3-4b7c-a8f7-e18dd94cd158",
  "name": "Fallback Response",
  "type": "n8n-nodes-base.set",
  "position": [
    960,
    1340
  ],
  "parameters": {
    "mode": "raw",
    "options": {},
    "jsonOutput": "{\n \"response\": {\n \"ok\": false,\n \"error\": \"The requested tool was not found or the service may be unavailable. Do not retry.\"\n }\n}\n"
  },
  "typeVersion": 3.3
}

================ Node #3059 ================
{
  "id": "7af68b6d-75ef-4332-8193-eb810179ec90",
  "name": "Actions Router",
  "type": "n8n-nodes-base.switch",
  "position": [
    960,
    1200
  ],
  "parameters": {
    "rules": {
      "values": [
        {
          "outputKey": "meetings.create",
          "conditions": {
            "options": {
              "leftValue": "",
              "caseSensitive": true,
              "typeValidation": "strict"
            },
            "combinator": "and",
            "conditions": [
              {
                "operator": {
                  "type": "string",
                  "operation": "equals"
                },
                "leftValue": "={{ $json.route }}",
                "rightValue": "meetings.create"
              }
            ]
          },
          "renameOutput": true
        }
      ]
    },
    "options": {
      "fallbackOutput": "extra"
    }
  },
  "typeVersion": 3
}

================ Node #3060 ================
{
  "id": "8cc6b737-2867-4fca-93d1-8973f14a9f00",
  "name": "Get Attendees",
  "type": "n8n-nodes-base.set",
  "position": [
    1440,
    1080
  ],
  "parameters": {
    "options": {},
    "assignments": {
      "assignments": [
        {
          "id": "521823f4-cee1-4f69-82e7-cea9be0dbc41",
          "name": "attendees",
          "type": "array",
          "value": "={{ $('Actions Router').item.json.query.attendees }}"
        }
      ]
    }
  },
  "typeVersion": 3.3
}

================ Node #3061 ================
{
  "id": "1b3bb8f7-3775-48be-8b73-5c9f0db37ebf",
  "name": "Attendees List",
  "type": "n8n-nodes-base.splitOut",
  "position": [
    1444,
    1212
  ],
  "parameters": {
    "options": {},
    "fieldToSplitOut": "attendees"
  },
  "typeVersion": 1
}

================ Node #3062 ================
{
  "id": "c285a0fa-4b0b-4775-83bb-5acb597dd9a8",
  "name": "Add Attendee to Invite",
  "type": "n8n-nodes-base.googleCalendar",
  "position": [
    1620,
    1080
  ],
  "parameters": {
    "eventId": "={{ $('Create Calendar Event1').item.json.id }}",
    "calendar": {
      "__rl": true,
      "mode": "list",
      "value": "c_5792bdf04bc395cbcbc6f7b754268245a33779d36640cc80a357711aa2f09a0a@group.calendar.google.com",
      "cachedResultName": "n8n-events"
    },
    "operation": "update",
    "updateFields": {
      "attendees": [
        "={{ $json.name }} <{{ $json.email }}>"
      ]
    }
  },
  "credentials": {
    "googleCalendarOAuth2Api": {
      "id": "kWMxmDbMDDJoYFVK",
      "name": "Google Calendar account"
    }
  },
  "typeVersion": 1.1
}

================ Node #3063 ================
{
  "id": "006c2b05-4526-4e7d-b303-0cd72b36b9e8",
  "name": "Sticky Note",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    1180,
    940
  ],
  "parameters": {
    "color": 7,
    "width": 756.2929032891963,
    "height": 445.79624302689535,
    "content": "## 4. This Tool Creates Calendar Events\nThis tool, given event details and a list of attendees, will create a new Google calendar event and add the attendees to it."
  },
  "typeVersion": 1
}

================ Node #3064 ================
{
  "id": "512dfd7d-ba06-48e5-b97f-3dfbbfb0023f",
  "name": "Sticky Note2",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    -56.39068896608171,
    391.01655789481134
  ],
  "parameters": {
    "color": 7,
    "width": 586.8663941671947,
    "height": 405.6964113279832,
    "content": "## 1. Retrieve Meeting Transcript\n[Read more about working with HTTP node](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.httprequest)\n\nThere's no built-in support for Google Meets transcript API however, we can solve this problem with the HTTP node. Note you may also need to setup a separate Google OAuth API Credential to obtain the required scopes."
  },
  "typeVersion": 1
}

================ Node #3065 ================
{
  "id": "91c5b898-b491-4359-90b4-2b7458cc03c8",
  "name": "Sticky Note3",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    560,
    323.25204909069373
  ],
  "parameters": {
    "color": 7,
    "width": 681.4281346810014,
    "height": 588.2833041602365,
    "content": "## 2. Let AI Agent Carry Out Follow-Up Actions\n[Read more about working with AI Agents](https://docs.n8n.io/integrations/builtin/cluster-nodes/root-nodes/n8n-nodes-langchain.agent)\n\nThe big difference between Basic LLM chains and AI Agents is that AI agents are given the automony to perform actions. Provided the right tool exists, AI Agents can send emails, book flights and even order pizza! Here we're leaving it up to our agent to book any follow-up meetings after the call and invite all interested parties."
  },
  "typeVersion": 1
}

================ Node #3066 ================
{
  "id": "7df4412d-b82b-4623-8ff5-89f3bd9356d8",
  "name": "Sticky Note4",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    560,
    940
  ],
  "parameters": {
    "color": 7,
    "width": 591.4907024073684,
    "height": 579.2725119898125,
    "content": "## 3: Using the Custom Workflow Tool\n[Read more about Workflow Triggers](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.executeworkflowtrigger)\n\nOne common implementation of tool use is to set them up as workflows which are intended triggered via other workflows. With this, we can either build a tool per workflow or for efficiency, take an API approach where multiple tools can exist behind a router (in this case our \"switch\" node).\n\nOur AI agent will therefore only passing through the parameters of the request and won't have to learn/know how to intereact directly with the tools and services."
  },
  "typeVersion": 1
}

================ Node #3067 ================
{
  "id": "06b0b3ae-344a-4150-9fa1-bdbcfe80b000",
  "name": "Create Calendar Event1",
  "type": "n8n-nodes-base.googleCalendar",
  "position": [
    1240,
    1080
  ],
  "parameters": {
    "end": "={{ $json.query.end_date }} {{ $json.query.end_time }}",
    "start": "={{ $json.query.start_date }} {{ $json.query.start_time }}",
    "calendar": {
      "__rl": true,
      "mode": "list",
      "value": "c_5792bdf04bc395cbcbc6f7b754268245a33779d36640cc80a357711aa2f09a0a@group.calendar.google.com",
      "cachedResultName": "n8n-events"
    },
    "additionalFields": {
      "summary": "={{ $json.query.title }}",
      "attendees": [],
      "description": "={{ $json.query.description }}"
    }
  },
  "credentials": {
    "googleCalendarOAuth2Api": {
      "id": "kWMxmDbMDDJoYFVK",
      "name": "Google Calendar account"
    }
  },
  "typeVersion": 1.1
}

================ Node #3068 ================
{
  "id": "2e2eec66-a737-48b9-b1ab-264182163dae",
  "name": "Sticky Note6",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    -940,
    320
  ],
  "parameters": {
    "width": 359.6648027457353,
    "height": 385.336571355038,
    "content": "## Try It Out!\n### This workflow does the following:\n* Retrieves a meeting transcript\n* Sends transcript to an AI Agent to parse and carry out follow up actions if necessary.\n* If transcript mentions a follow up meeting is required, the AI Agent will call a tool to create the meeting.\n* Additionally if able, the AI Agent will also assign attendees it thinks should attend the meeting. \n\n### Need Help?\nJoin the [Discord](https://discord.com/invite/XPKeKXeB7d) or ask in the [Forum](https://community.n8n.io/)!\n\nHappy Hacking!"
  },
  "typeVersion": 1
}

================ Node #3069 ================
{
  "id": "3833bb1c-1145-4abd-a371-bce4c0543fb6",
  "name": "Schedule Meeting",
  "type": "@n8n/n8n-nodes-langchain.toolWorkflow",
  "position": [
    920,
    740
  ],
  "parameters": {
    "name": "create_calendar_event",
    "fields": {
      "values": [
        {
          "name": "route",
          "stringValue": "meetings.create"
        }
      ]
    },
    "workflowId": "={{ $workflow.id }}",
    "description": "Call this tool to create an calendar event. This tool requires the following object request body.\n```\n{\n \"type\": \"object\",\n \"properties\": {\n \"title\": { \"type\": \"string\" },\n \"description\": { \"type\": \"string\" },\n \"start_date\": { \"type\": \"string\" },\n \"start_time\": { \"type\": \"string\" },\n \"end_date\": { \"type\": \"string\" },\n \"end_time\": { \"type\": \"string\" },\n \"attendees\": {\n \"type\": \"array\",\n \"items\": {\n \"type\": \"object\",\n \"properties\": {\n \"name\": { \"type\": \"string\" },\n \"email\": { \"type\": \"string\" }\n }\n }\n }\n }\n}\n```\nNote that dates are in the format yyyy-MM-dd and times are in the format HH:mm:ss."
  },
  "typeVersion": 1.1
}

================ Node #3070 ================
{
  "id": "ac955f91-9aa1-4ce8-9a5a-740c4d48dd18",
  "name": "AI Agent",
  "type": "@n8n/n8n-nodes-langchain.agent",
  "position": [
    820,
    520
  ],
  "parameters": {
    "text": "=system: your role is to help people get the most out of their meetings. You achieve this by helpfully summarising the meeting transcript to pull out useful information and key points of interest and delivery this in note form. You also help carry out any follow-up actions on behalf of the meeting attendees.\n1. Summarise the meeting and highlight any key goals of the meeting.\n2. Identify and list important points mentioned by each attendee. If non-applicable for an attendee, skip and proceed to the next attendee.\n3. Identify and list all next steps agreed by the attendees. If there are none, make a maximum of 3 suggestions based on the transcript instead. Please list the steps even if they've already been actioned.\n4. identify and perform follow-up actions based on a transcript of a meeting. These actions which are allowed are: creating follow-up calendar events if suggested by the attendees.\n\nThe meeting details were as follows:\n* The creator of the meeting was {{ $('Get Calendar Event').item.json[\"creator\"][\"displayName\"] }} <{{ $('Get Calendar Event').item.json[\"creator\"][\"email\"]}}>\n* The attendees were {{ $('Get Calendar Event').item.json[\"attendees\"].map(attendee => `${attendee.display_name} <${attendee.email}>`).join(', ') }}\n* The meeting was scheduled for {{ $('Get Calendar Event').item.json[\"start\"][\"dateTime\"] }}\n\nThe meeting transcript as follows:\n```\n{{ $json[\"text\"] }}\n```",
    "agent": "openAiFunctionsAgent",
    "options": {},
    "promptType": "define",
    "hasOutputParser": true
  },
  "typeVersion": 1.5
}

================ Node #3071 ================
{
  "id": "b6d24f80-9f47-4c54-b84e-23d5de76f027",
  "name": "Sticky Note5",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    -560,
    303.2560786071914
  ],
  "parameters": {
    "color": 7,
    "width": 464.50696860436165,
    "height": 446.9122178333584,
    "content": "## 1. Get Calendar Event\n[Read more about working with Google Calendar](https://docs.n8n.io/integrations/builtin/app-nodes/n8n-nodes-base.googlecalendar)\n\nIn this demo, we've decided to go with google meet as transcripts are stored in the user google drive. First, we'll need to get the calendar event of which the google meet was attached.\nIf the meet was not arranged through Google calendar, you may need to skip this step and just reference the transcripts in google drive directly."
  },
  "typeVersion": 1
}

================ Node #3072 ================
{
  "id": "b28e2c8f-7a4e-4ae8-b298-9a78747b81e5",
  "name": "Sticky Note1",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    -320,
    520
  ],
  "parameters": {
    "width": 184.0677386144551,
    "height": 299.3566512487305,
    "content": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ud83d\udea8**Required**\n* Set your calendar event ID here."
  },
  "typeVersion": 1
}

================ Node #3073 ================
{
  "id": "5ffb49d4-6bfd-420e-9c0f-ed73a955bd46",
  "name": "Sticky Note7",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    180,
    820
  ],
  "parameters": {
    "color": 5,
    "width": 349.91944442094535,
    "height": 80,
    "content": "### \ud83d\udca1 Can't find your transcript?\nOnly meetings which own and were recorded and had transcription enabled will be available.\n"
  },
  "typeVersion": 1
}

================ Node #3074 ================
{
  "id": "241ccec3-d8a0-4ca6-9267-31fe6f27aed6",
  "name": "Sticky Note8",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    1200,
    1060
  ],
  "parameters": {
    "width": 184.0677386144551,
    "height": 299.3566512487305,
    "content": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ud83d\udea8**Required**\n* Set your calendar ID here."
  },
  "typeVersion": 1
}

================ Node #3075 ================
{
  "id": "7076854e-c7e8-45b5-9e5e-16678bffa254",
  "name": "OpenAI Model",
  "type": "@n8n/n8n-nodes-langchain.lmOpenAi",
  "position": [
    2420,
    480
  ],
  "parameters": {
    "model": {
      "__rl": true,
      "mode": "list",
      "value": "gpt-3.5-turbo-1106",
      "cachedResultName": "gpt-3.5-turbo-1106"
    },
    "options": {
      "temperature": 0
    }
  },
  "credentials": {
    "openAiApi": {
      "id": "8gccIjcuf3gvaoEr",
      "name": "OpenAi account"
    }
  },
  "typeVersion": 1
}

================ Node #3076 ================
{
  "id": "00819f1c-2c60-4b7c-b395-445ec05fd898",
  "name": "Structured Output Parser",
  "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
  "position": [
    2600,
    480
  ],
  "parameters": {
    "jsonSchema": "{\n \"Invoice date\": { \"type\": \"date\" },\n \"invoice number\": { \"type\": \"string\" },\n \"Purchase order number\": { \"type\": \"string\" },\n \"Supplier name\": { \"type\": \"string\" },\n \"Supplier address\": {\n \"type\": \"object\",\n \"properties\": {\n \"address 1\": { \"type\": \"string\" },\n \"address 2\": { \"type\": \"string\" },\n \"city\": { \"type\": \"string\" },\n \"postcode\": { \"type\": \"string\" }\n }\n },\n \"Supplier VAT identification number\": { \"type\": \"string\" },\n \"Customer name\": { \"type\": \"string\" },\n \"Customer address\": {\n \"type\": \"object\",\n \"properties\": {\n \"address 1\": { \"type\": \"string\" },\n \"address 2\": { \"type\": \"string\" },\n \"city\": { \"type\": \"string\" },\n \"postcode\": { \"type\": \"string\" }\n }\n },\n \"Customer VAT identification number\": { \"type\": \"string\" }, \n \"Shipping addresses\": {\n \"type\": \"array\",\n \"items\": {\n \"type\": \"object\",\n \"properties\": {\n \"address 1\": { \"type\": \"string\" },\n \"address 2\": { \"type\": \"string\" },\n \"city\": { \"type\": \"string\" },\n \"postcode\": { \"type\": \"string\" }\n }\n }\n },\n \"Line items\": {\n \"type\": \"array\",\n \"items\": {\n \"name\": \"string\",\n \"description\": \"string\",\n \"price\": \"number\",\n \"discount\": \"number\"\n }\n },\n \"Subtotal without VAT\": { \"type\": \"number\" },\n \"Subtotal with VAT\": { \"type\": \"number\" },\n \"Total price\": { \"type\": \"number\" }\n}"
  },
  "typeVersion": 1.1
}

================ Node #3077 ================
{
  "id": "3b40d506-aabc-4105-853a-a318375cea73",
  "name": "Upload to LlamaParse",
  "type": "n8n-nodes-base.httpRequest",
  "position": [
    1620,
    420
  ],
  "parameters": {
    "url": "https://api.cloud.llamaindex.ai/api/parsing/upload",
    "method": "POST",
    "options": {},
    "sendBody": true,
    "contentType": "multipart-form-data",
    "sendHeaders": true,
    "authentication": "genericCredentialType",
    "bodyParameters": {
      "parameters": [
        {
          "name": "file",
          "parameterType": "formBinaryData",
          "inputDataFieldName": "=attachment_0"
        }
      ]
    },
    "genericAuthType": "httpHeaderAuth",
    "headerParameters": {
      "parameters": [
        {
          "name": "accept",
          "value": "application/json"
        }
      ]
    }
  },
  "credentials": {
    "httpHeaderAuth": {
      "id": "pZ4YmwFIkyGnbUC7",
      "name": "LlamaIndex API"
    }
  },
  "typeVersion": 4.2
}

================ Node #3078 ================
{
  "id": "57a5d331-8838-4d44-8fac-a44dba35fcc4",
  "name": "Sticky Note",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    1540,
    140
  ],
  "parameters": {
    "color": 7,
    "width": 785.9525375246163,
    "height": 623.4951418211454,
    "content": "## 2. Advanced PDF Processing with LlamaParse\n[Read more about using HTTP Requests](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.httprequest/)\n\nLlamaIndex's LlamaCloud is a cloud-based service that allows you to upload,\nparse, and index document. LlamaParse is a tool offered by LlamaCloud\nto parse for complex PDFs with embedded objects ie PDF Tables and figures.\n\nAt time of writing, you can parse 1000 pdfs/day with LlamaCloud's free plan\nby signing up at [https://cloud.llamaindex.ai/](https://cloud.llamaindex.ai/?ref=n8n.io)."
  },
  "typeVersion": 1
}

================ Node #3079 ================
{
  "id": "a4504d83-da3b-41bc-891f-f8f9314a6af5",
  "name": "Receiving Invoices",
  "type": "n8n-nodes-base.gmailTrigger",
  "position": [
    780,
    400
  ],
  "parameters": {
    "simple": false,
    "filters": {
      "q": "has:attachment",
      "sender": "invoices@paypal.com"
    },
    "options": {
      "downloadAttachments": true
    },
    "pollTimes": {
      "item": [
        {
          "mode": "everyMinute"
        }
      ]
    }
  },
  "credentials": {
    "gmailOAuth2": {
      "id": "Sf5Gfl9NiFTNXFWb",
      "name": "Gmail account"
    }
  },
  "typeVersion": 1
}

================ Node #3080 ================
{
  "id": "02bd4636-f35b-4a3a-8a5f-9ae7aeed2bf4",
  "name": "Append to Reconciliation Sheet",
  "type": "n8n-nodes-base.googleSheets",
  "position": [
    2960,
    320
  ],
  "parameters": {
    "columns": {
      "value": {},
      "schema": [
        {
          "id": "Invoice date",
          "type": "string",
          "display": true,
          "removed": false,
          "required": false,
          "displayName": "Invoice date",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "invoice number",
          "type": "string",
          "display": true,
          "removed": false,
          "required": false,
          "displayName": "invoice number",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "Purchase order number",
          "type": "string",
          "display": true,
          "removed": false,
          "required": false,
          "displayName": "Purchase order number",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "Supplier name",
          "type": "string",
          "display": true,
          "removed": false,
          "required": false,
          "displayName": "Supplier name",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "Supplier address",
          "type": "string",
          "display": true,
          "removed": false,
          "required": false,
          "displayName": "Supplier address",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "Supplier VAT identification number",
          "type": "string",
          "display": true,
          "removed": false,
          "required": false,
          "displayName": "Supplier VAT identification number",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "Customer name",
          "type": "string",
          "display": true,
          "removed": false,
          "required": false,
          "displayName": "Customer name",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "Customer address",
          "type": "string",
          "display": true,
          "removed": false,
          "required": false,
          "displayName": "Customer address",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "Customer VAT identification number",
          "type": "string",
          "display": true,
          "removed": false,
          "required": false,
          "displayName": "Customer VAT identification number",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "Shipping addresses",
          "type": "string",
          "display": true,
          "removed": false,
          "required": false,
          "displayName": "Shipping addresses",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "Line items",
          "type": "string",
          "display": true,
          "removed": false,
          "required": false,
          "displayName": "Line items",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "Subtotal without VAT",
          "type": "string",
          "display": true,
          "removed": false,
          "required": false,
          "displayName": "Subtotal without VAT",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "Subtotal with VAT",
          "type": "string",
          "display": true,
          "removed": false,
          "required": false,
          "displayName": "Subtotal with VAT",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "Total price",
          "type": "string",
          "display": true,
          "removed": false,
          "required": false,
          "displayName": "Total price",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        }
      ],
      "mappingMode": "autoMapInputData",
      "matchingColumns": [
        "output"
      ]
    },
    "options": {},
    "operation": "append",
    "sheetName": {
      "__rl": true,
      "mode": "id",
      "value": "gid=0"
    },
    "documentId": {
      "__rl": true,
      "mode": "list",
      "value": "1omHDl1jpjHyrtga2ZHBddUkbkdatEr1ga9vHc4fQ1pI",
      "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1omHDl1jpjHyrtga2ZHBddUkbkdatEr1ga9vHc4fQ1pI/edit?usp=drivesdk",
      "cachedResultName": "Invoice Reconciliation"
    }
  },
  "credentials": {
    "googleSheetsOAuth2Api": {
      "id": "XHvC7jIRR8A2TlUl",
      "name": "Google Sheets account"
    }
  },
  "typeVersion": 4.3
}

================ Node #3081 ================
{
  "id": "cdb0a7ee-068d-465a-b4ae-d5221d5e7400",
  "name": "Get Processing Status",
  "type": "n8n-nodes-base.httpRequest",
  "position": [
    1800,
    420
  ],
  "parameters": {
    "url": "=https://api.cloud.llamaindex.ai/api/parsing/job/{{ $json.id }}",
    "options": {},
    "sendHeaders": true,
    "authentication": "genericCredentialType",
    "genericAuthType": "httpHeaderAuth",
    "headerParameters": {
      "parameters": [
        {
          "name": "accept",
          "value": "application/json"
        }
      ]
    }
  },
  "credentials": {
    "httpHeaderAuth": {
      "id": "pZ4YmwFIkyGnbUC7",
      "name": "LlamaIndex API"
    }
  },
  "typeVersion": 4.2
}

================ Node #3082 ================
{
  "id": "b68a01ab-d8e6-42f4-ab1d-81e746695eef",
  "name": "Wait to stay within service limits",
  "type": "n8n-nodes-base.wait",
  "position": [
    2120,
    560
  ],
  "webhookId": "17a96ed6-b5ff-47bb-a8a2-39c1eb40185a",
  "parameters": {
    "amount": 1
  },
  "typeVersion": 1.1
}

================ Node #3083 ================
{
  "id": "41bd28d2-665a-4f71-a456-98eeb26b6655",
  "name": "Is Job Ready?",
  "type": "n8n-nodes-base.switch",
  "position": [
    1960,
    420
  ],
  "parameters": {
    "rules": {
      "values": [
        {
          "outputKey": "SUCCESS",
          "conditions": {
            "options": {
              "leftValue": "",
              "caseSensitive": true,
              "typeValidation": "strict"
            },
            "combinator": "and",
            "conditions": [
              {
                "id": "300fce8c-b19a-4d0c-86e8-f62853c70ce2",
                "operator": {
                  "name": "filter.operator.equals",
                  "type": "string",
                  "operation": "equals"
                },
                "leftValue": "={{ $json.status }}",
                "rightValue": "SUCCESS"
              }
            ]
          },
          "renameOutput": true
        },
        {
          "outputKey": "ERROR",
          "conditions": {
            "options": {
              "leftValue": "",
              "caseSensitive": true,
              "typeValidation": "strict"
            },
            "combinator": "and",
            "conditions": [
              {
                "id": "e6058aa0-a3e2-4ce3-9bed-6ff41a5be052",
                "operator": {
                  "name": "filter.operator.equals",
                  "type": "string",
                  "operation": "equals"
                },
                "leftValue": "={{ $json.status }}",
                "rightValue": "ERROR"
              }
            ]
          },
          "renameOutput": true
        },
        {
          "outputKey": "CANCELED",
          "conditions": {
            "options": {
              "leftValue": "",
              "caseSensitive": true,
              "typeValidation": "strict"
            },
            "combinator": "and",
            "conditions": [
              {
                "id": "ceb6338f-4261-40ac-be11-91f61c7302ba",
                "operator": {
                  "name": "filter.operator.equals",
                  "type": "string",
                  "operation": "equals"
                },
                "leftValue": "={{ $json.status }}",
                "rightValue": "CANCELED"
              }
            ]
          },
          "renameOutput": true
        },
        {
          "outputKey": "PENDING",
          "conditions": {
            "options": {
              "leftValue": "",
              "caseSensitive": true,
              "typeValidation": "strict"
            },
            "combinator": "and",
            "conditions": [
              {
                "id": "0fa97d86-432a-409a-917e-5f1a002b1ab9",
                "operator": {
                  "name": "filter.operator.equals",
                  "type": "string",
                  "operation": "equals"
                },
                "leftValue": "={{ $json.status }}",
                "rightValue": "PENDING"
              }
            ]
          },
          "renameOutput": true
        }
      ]
    },
    "options": {
      "allMatchingOutputs": true
    }
  },
  "typeVersion": 3
}

================ Node #3084 ================
{
  "id": "f7157abe-b1ee-46b3-adb2-1be056d9d75d",
  "name": "Sticky Note1",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    694.0259411218055,
    139.97202236910687
  ],
  "parameters": {
    "color": 7,
    "width": 808.8727491350096,
    "height": 709.5781339256318,
    "content": "## 1. Watch for Invoice Emails\n[Read more about Gmail Triggers](https://docs.n8n.io/integrations/builtin/trigger-nodes/n8n-nodes-base.gmailtrigger)\n\nThe Gmail node can watch for all incoming messages and filter based on a condition. We'll set our Gmail node to wait for:\n* a message from particular email address.\n* having an attachment which should be the invoice PDF\n* not having a label \"invoice synced\", which is what we use to avoid duplicate processing."
  },
  "typeVersion": 1
}

================ Node #3085 ================
{
  "id": "ff7cb6e4-5a60-4f12-b15e-74e7a4a302ce",
  "name": "Sticky Note2",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    2360,
    70.48792658995046
  ],
  "parameters": {
    "color": 7,
    "width": 805.0578351924228,
    "height": 656.5014186128178,
    "content": "## 3. Use LLMs to Extract Values from Data\n[Read more about Basic LLM Chain](https://docs.n8n.io/integrations/builtin/cluster-nodes/root-nodes/n8n-nodes-langchain.chainllm/)\n\nLarge language models are perfect for data extraction tasks as they can work across a range of document layouts without human intervention. The extracted data can then be sent to a variety of datastores such as spreadsheets, accounting systems and/or CRMs.\n\n**Tip:** The \"Structured Output Parser\" ensures the AI output can be\ninserted to our spreadsheet without additional clean up and/or formatting. "
  },
  "typeVersion": 1
}

================ Node #3086 ================
{
  "id": "0d510631-440b-41f5-b1aa-9b7279e9c8e3",
  "name": "Sticky Note3",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    1934,
    774
  ],
  "parameters": {
    "color": 5,
    "width": 394.15089838126653,
    "height": 154.49585536070904,
    "content": "### \ud83d\ude4b\u200d\u2642\ufe0f Why not just use the built-in PDF convertor?\nA common issue with PDF-to-text convertors are that they ignore important data structures like tables. These structures can be important for data extraction. For example, being able to distinguish between seperate line items in an invoice."
  },
  "typeVersion": 1
}

================ Node #3087 ================
{
  "id": "fe7fdb90-3c85-4f29-a7d3-16f927f48682",
  "name": "Sticky Note4",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    3200,
    157.65172434465347
  ],
  "parameters": {
    "color": 7,
    "width": 362.3535748101346,
    "height": 440.3435768155051,
    "content": "## 4. Add Label to Avoid Duplication\n[Read more about working with Gmail](https://docs.n8n.io/integrations/builtin/app-nodes/n8n-nodes-base.gmail/)\n\nTo finish off the workflow, we'll add the \"invoice synced\" label to the original invoice email to flag that the extraction was successful. This can be useful if working with a shared inbox and for quality control purposes later."
  },
  "typeVersion": 1
}

================ Node #3088 ================
{
  "id": "1acf2c60-c2b9-4f78-94a4-0711c8bd71ab",
  "name": "Sticky Note5",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    300,
    140
  ],
  "parameters": {
    "width": 360.0244620907562,
    "height": 573.2443601155958,
    "content": "## Try Me Out!\n\n**This workflow does the following:**\n* Waits for email invoices with PDF attachments.\n* Uses the LlamaParse service to convert the invoice PDF into a markdown file.\n* Uses a LLM to extract invoice data from the Markdown file.\n* Exports the extracted data to a Google Sheet.\n\n### Follow along with the blog here\nhttps://blog.n8n.io/how-to-extract-data-from-pdf-to-excel-spreadsheet-advance-parsing-with-n8n-io-and-llamaparse/\n\n### Good to know\n* You'll need to create the label \"invoice synced\" in gmail before using this workflow.\n\n### Need Help?\nJoin the [Discord](https://discord.com/invite/XPKeKXeB7d) or ask in the [Forum](https://community.n8n.io/)!\n\nHappy Hacking!"
  },
  "typeVersion": 1
}

================ Node #3089 ================
{
  "id": "3802c538-acf9-48d8-b011-bfe2fb817350",
  "name": "Add \"invoice synced\" Label",
  "type": "n8n-nodes-base.gmail",
  "position": [
    3320,
    400
  ],
  "parameters": {
    "labelIds": [
      "Label_5511644430826409825"
    ],
    "messageId": "={{ $('Receiving Invoices').item.json.id }}",
    "operation": "addLabels"
  },
  "credentials": {
    "gmailOAuth2": {
      "id": "Sf5Gfl9NiFTNXFWb",
      "name": "Gmail account"
    }
  },
  "typeVersion": 2.1
}

================ Node #3090 ================
{
  "id": "ffabd8c5-c440-4473-8e44-b849426c70cf",
  "name": "Get Parsed Invoice Data",
  "type": "n8n-nodes-base.httpRequest",
  "position": [
    2160,
    280
  ],
  "parameters": {
    "url": "=https://api.cloud.llamaindex.ai/api/parsing/job/{{ $json.id }}/result/markdown",
    "options": {
      "redirect": {
        "redirect": {}
      }
    },
    "authentication": "genericCredentialType",
    "genericAuthType": "httpHeaderAuth"
  },
  "credentials": {
    "httpHeaderAuth": {
      "id": "pZ4YmwFIkyGnbUC7",
      "name": "LlamaIndex API"
    }
  },
  "typeVersion": 4.2
}

================ Node #3091 ================
{
  "id": "5f9b507f-4dc1-4853-bf71-a64f2f4b55c1",
  "name": "Map Output",
  "type": "n8n-nodes-base.set",
  "position": [
    2760,
    320
  ],
  "parameters": {
    "mode": "raw",
    "options": {},
    "jsonOutput": "={{ $json.output }}"
  },
  "typeVersion": 3.3
}

================ Node #3092 ================
{
  "id": "d22744cd-151d-4b92-b4f2-4a5b9ceb4ee7",
  "name": "Apply Data Extraction Rules",
  "type": "@n8n/n8n-nodes-langchain.chainLlm",
  "position": [
    2420,
    320
  ],
  "parameters": {
    "text": "=Given the following invoice in the <invoice> xml tags, extract the following information as listed below.\nIf you cannot the information for a specific item, then leave blank and skip to the next. \n\n* Invoice date\n* invoice number\n* Purchase order number\n* Supplier name\n* Supplier address\n* Supplier VAT identification number\n* Customer name\n* Customer address\n* Customer VAT identification number\n* Shipping addresses\n* Line items, including a description of the goods or services rendered\n* Price with and without VAT\n* Total price\n\n<invoice>{{ $json.markdown }}</invoice>",
    "promptType": "define",
    "hasOutputParser": true
  },
  "typeVersion": 1.4
}

================ Node #3093 ================
{
  "id": "3735a124-9fab-4400-8b94-8b5aa9f951fe",
  "name": "Should Process Email?",
  "type": "n8n-nodes-base.if",
  "position": [
    1340,
    400
  ],
  "parameters": {
    "options": {},
    "conditions": {
      "options": {
        "leftValue": "",
        "caseSensitive": true,
        "typeValidation": "strict"
      },
      "combinator": "and",
      "conditions": [
        {
          "id": "e5649a2b-6e12-4cc4-8001-4639cc9cc2c2",
          "operator": {
            "name": "filter.operator.equals",
            "type": "string",
            "operation": "equals"
          },
          "leftValue": "={{ $input.item.binary.attachment_0.mimeType }}",
          "rightValue": "application/pdf"
        },
        {
          "id": "4c57ab9b-b11c-455a-a63d-daf48418b06e",
          "operator": {
            "type": "array",
            "operation": "notContains",
            "rightType": "any"
          },
          "leftValue": "={{ $json.labels }}",
          "rightValue": "invoice synced"
        }
      ]
    }
  },
  "typeVersion": 2
}

================ Node #3094 ================
{
  "id": "12a23527-39f3-4f72-8691-3d5cf59f9909",
  "name": "Split Out Labels",
  "type": "n8n-nodes-base.splitOut",
  "position": [
    980,
    400
  ],
  "parameters": {
    "options": {},
    "fieldToSplitOut": "labelIds"
  },
  "typeVersion": 1
}

================ Node #3095 ================
{
  "id": "88ff6e22-d3d3-403d-b0b2-2674487140a7",
  "name": "Get Labels Names",
  "type": "n8n-nodes-base.gmail",
  "position": [
    980,
    540
  ],
  "parameters": {
    "labelId": "={{ $json.labelIds }}",
    "resource": "label",
    "operation": "get"
  },
  "credentials": {
    "gmailOAuth2": {
      "id": "Sf5Gfl9NiFTNXFWb",
      "name": "Gmail account"
    }
  },
  "typeVersion": 2.1
}

================ Node #3096 ================
{
  "id": "88accb8e-6531-40be-8d35-1bba594149af",
  "name": "Combine Label Names",
  "type": "n8n-nodes-base.aggregate",
  "position": [
    980,
    680
  ],
  "parameters": {
    "options": {},
    "fieldsToAggregate": {
      "fieldToAggregate": [
        {
          "renameField": true,
          "outputFieldName": "labels",
          "fieldToAggregate": "name"
        }
      ]
    }
  },
  "typeVersion": 1
}

================ Node #3097 ================
{
  "id": "d233ff33-cabf-434e-876d-879693ecaf58",
  "name": "Email with Label Names",
  "type": "n8n-nodes-base.merge",
  "position": [
    1160,
    400
  ],
  "parameters": {
    "mode": "combine",
    "options": {},
    "combinationMode": "multiplex"
  },
  "typeVersion": 2.1
}

================ Node #3098 ================
{
  "id": "733fc285-e069-4e4e-b13e-dfc1c259ac12",
  "name": "Sticky Note6",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    2540,
    460
  ],
  "parameters": {
    "width": 192.26896179623753,
    "height": 213.73043662572252,
    "content": "\n\n\n\n\n\n\n\n\n\n\n\n**Need more attributes?**\nChange it here!"
  },
  "typeVersion": 1
}

================ Node #3099 ================
{
  "id": "83aa6ed0-ce3b-48d7-aded-475c337ae86e",
  "name": "Sticky Note7",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    2880,
    300
  ],
  "parameters": {
    "width": 258.29345180972877,
    "height": 397.0641952938746,
    "content": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ud83d\udea8**Required**\n* Set Your Google Sheet URL here\n* Set the Name of your Sheet\n\n\n**Don't use GSheets?**\nSwap this for Excel, Airtable or a Database!"
  },
  "typeVersion": 1
}

================ Node #3100 ================
{
  "id": "720070f6-2d6c-45ef-80c2-e950862a002b",
  "name": "Sticky Note8",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    740,
    380
  ],
  "parameters": {
    "width": 174.50671517518518,
    "height": 274.6295678979021,
    "content": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ud83d\udea8**Required**\n* Change the email filters here!"
  },
  "typeVersion": 1
}

================ Node #3101 ================
{
  "id": "2a9ff08f-919a-41a8-980b-8c2bca3059e4",
  "name": "Gmail Trigger",
  "type": "n8n-nodes-base.gmailTrigger",
  "position": [
    -332.809175564116,
    566.0845437534399
  ],
  "parameters": {
    "simple": false,
    "filters": {
      "q": "-from:me"
    },
    "options": {},
    "pollTimes": {
      "item": [
        {
          "mode": "everyMinute"
        }
      ]
    }
  },
  "credentials": {
    "gmailOAuth2": {
      "id": "ofvBTX8A0aWfQb2O",
      "name": "Gmail account"
    }
  },
  "typeVersion": 1
}

================ Node #3102 ================
{
  "id": "3ef14615-0045-404f-a21b-2c65a52f4be8",
  "name": "If Needs Reply",
  "type": "n8n-nodes-base.if",
  "position": [
    240,
    560
  ],
  "parameters": {
    "options": {},
    "conditions": {
      "options": {
        "leftValue": "",
        "caseSensitive": true,
        "typeValidation": "strict"
      },
      "combinator": "and",
      "conditions": [
        {
          "id": "53849246-ad32-4845-9976-9f9688f5a6f2",
          "operator": {
            "type": "boolean",
            "operation": "true",
            "singleValue": true
          },
          "leftValue": "={{ $json.needsReply }}",
          "rightValue": "true"
        }
      ]
    }
  },
  "typeVersion": 2
}

================ Node #3103 ================
{
  "id": "36968dd5-8d51-4184-a05a-587b6c95aa82",
  "name": "JSON Parser",
  "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
  "position": [
    100,
    720
  ],
  "parameters": {
    "jsonSchema": "{\n \"type\": \"object\",\n \"properties\": {\n \"needsReply\": {\n \"type\": \"boolean\"\n }\n },\n \"required\": [\"needsReply\"]\n}\n"
  },
  "typeVersion": 1
}

================ Node #3104 ================
{
  "id": "2a64dce8-e2f0-475e-a366-a02084293aad",
  "name": "OpenAI Chat",
  "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
  "position": [
    -92.809175564116,
    726.0845437534399
  ],
  "parameters": {
    "model": "gpt-4o",
    "options": {
      "temperature": 0,
      "responseFormat": "json_object"
    }
  },
  "credentials": {
    "openAiApi": {
      "id": "13ffkrNMlQMfvbZy",
      "name": "OpenAi account"
    }
  },
  "typeVersion": 1
}

================ Node #3105 ================
{
  "id": "be892ff8-0981-4b34-9c93-7674ddd90360",
  "name": "Sticky Note",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    -429.809175564116,
    461.08454375343996
  ],
  "parameters": {
    "width": 304.10628068244364,
    "height": 394.42512272977456,
    "content": "## When I receive an Email\n"
  },
  "typeVersion": 1
}

================ Node #3106 ================
{
  "id": "9d92839a-9ff2-436c-8abb-2f43e07c1ace",
  "name": "Sticky Note1",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    -112.809175564116,
    460.08454375343996
  ],
  "parameters": {
    "width": 556,
    "height": 397,
    "content": "## ... that Needs a Reply\n"
  },
  "typeVersion": 1
}

================ Node #3107 ================
{
  "id": "3cd77609-684c-44e2-9cdc-9479cfd836bd",
  "name": "Sticky Note2",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    460,
    460
  ],
  "parameters": {
    "width": 333.19082443588354,
    "height": 400.08454375343996,
    "content": "## Generate a Reply"
  },
  "typeVersion": 1
}

================ Node #3108 ================
{
  "id": "b123cf31-767d-48bb-a0ba-79a69f6da585",
  "name": "Sticky Note3",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    807.190824435884,
    461.08454375343996
  ],
  "parameters": {
    "width": 326,
    "height": 395,
    "content": "## ...as a Draft in the conversation"
  },
  "typeVersion": 1
}

================ Node #3109 ================
{
  "id": "1a87c416-6b1c-4526-a2b6-20468c95ea0e",
  "name": "OpenAI Chat Model",
  "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
  "position": [
    480,
    680
  ],
  "parameters": {
    "model": "gpt-4-turbo",
    "options": {}
  },
  "credentials": {
    "openAiApi": {
      "id": "13ffkrNMlQMfvbZy",
      "name": "OpenAi account"
    }
  },
  "typeVersion": 1
}

================ Node #3110 ================
{
  "id": "84b4d516-252e-444e-b998-2d4aa0f89653",
  "name": "Gmail - Create Draft",
  "type": "n8n-nodes-base.gmail",
  "position": [
    900,
    560
  ],
  "parameters": {
    "message": "={{ $json.text.replace(/\\n/g, \"<br />\\n\") }}",
    "options": {
      "sendTo": "={{ $('Gmail Trigger').item.json.headers.from }}",
      "threadId": "={{ $('Gmail Trigger').item.json.threadId }}"
    },
    "subject": "=Re: {{ $('Gmail Trigger').item.json.headers.subject }}",
    "resource": "draft",
    "emailType": "html"
  },
  "credentials": {
    "gmailOAuth2": {
      "id": "ofvBTX8A0aWfQb2O",
      "name": "Gmail account"
    }
  },
  "typeVersion": 2.1
}

================ Node #3111 ================
{
  "id": "86017ff4-9c57-4b2a-9cd9-f62571a05ffd",
  "name": "Assess if message needs a reply",
  "type": "@n8n/n8n-nodes-langchain.chainLlm",
  "position": [
    -92.809175564116,
    566.0845437534399
  ],
  "parameters": {
    "prompt": "=Subject: {{ $json.subject }}\nMessage:\n{{ $json.textAsHtml }} ",
    "messages": {
      "messageValues": [
        {
          "message": "Your task is to assess if the message requires a response. Return in JSON format true if it does, false otherwise.\nMarketing emails don't require a response."
        }
      ]
    }
  },
  "typeVersion": 1.3
}

================ Node #3112 ================
{
  "id": "cab1e7e5-93dc-4850-a471-e285cdbe2058",
  "name": "Generate email reply",
  "type": "@n8n/n8n-nodes-langchain.chainLlm",
  "position": [
    500,
    520
  ],
  "parameters": {
    "text": "=Subject: {{ $('Gmail Trigger').item.json.subject }}\nMessage: {{ $('Gmail Trigger').item.json.textAsHtml }}",
    "messages": {
      "messageValues": [
        {
          "message": "You're a helpful personal assistant and your task is to draft replies on my behalf to my incoming emails. Whenever I provide some text from an email, return an appropriate draft reply for it and nothing else.\nEnsure that the reply is suitable for a professional email setting and addresses the topic in a clear, structured, and detailed manner.\nDo not make things up.\n\nDetailed instructions:\n- Be concise and maintain a business casual tone.\n- Start with \"Hello,\", and end with \"Best,\"\n- When replying to yes-no questions, draft 2 responses: one affirmative and one negative separated by \" - - - - - - - OR - - - - - - - \"\n- If you don't know an answer, you can leave placeholders like \"[YOUR_ANSWER_HERE]\".\n- Don't use any special formatting, only plain text.\n- Reply in the same language as the inbound email."
        }
      ]
    },
    "promptType": "define"
  },
  "typeVersion": 1.4
}

================ Node #3113 ================
{
  "id": "a4f19a81-6101-48c2-9560-9cf231bc240b",
  "name": "Form",
  "type": "n8n-nodes-base.formTrigger",
  "position": [
    -580,
    320
  ],
  "webhookId": "4b937814-e829-4df7-aaba-31192babf7e1",
  "parameters": {
    "path": "create-wordpress-post",
    "formTitle": "Create a WordPress post with AI",
    "formFields": {
      "values": [
        {
          "fieldLabel": "Keywords (comma-separated)",
          "requiredField": true
        },
        {
          "fieldType": "dropdown",
          "fieldLabel": "Number of chapters",
          "fieldOptions": {
            "values": [
              {
                "option": "1"
              },
              {
                "option": "2"
              },
              {
                "option": "3"
              },
              {
                "option": "4"
              },
              {
                "option": "5"
              },
              {
                "option": "6"
              },
              {
                "option": "7"
              },
              {
                "option": "8"
              },
              {
                "option": "9"
              },
              {
                "option": "10"
              }
            ]
          },
          "requiredField": true
        },
        {
          "fieldType": "number",
          "fieldLabel": "Max words count",
          "requiredField": true
        }
      ]
    },
    "responseMode": "responseNode",
    "formDescription": "Fill this form with the required information to create a draft post on WordPress"
  },
  "typeVersion": 2
}

================ Node #3114 ================
{
  "id": "e4cf75f7-00e7-473a-a944-af635581715f",
  "name": "Sticky Note2",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    209.98769233621147,
    140
  ],
  "parameters": {
    "color": 4,
    "width": 301.3874093724939,
    "height": 371.765663140765,
    "content": "## Data check"
  },
  "typeVersion": 1
}

================ Node #3115 ================
{
  "id": "e949a487-6701-4650-b9be-08146b4e93ad",
  "name": "Sticky Note3",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    225.20535922952297,
    200
  ],
  "parameters": {
    "color": 7,
    "width": 272.8190508599808,
    "height": 80,
    "content": "Checks that the data returned by OpenAI is correct"
  },
  "typeVersion": 1
}

================ Node #3116 ================
{
  "id": "662fe28b-c0b7-4aef-b99c-a8c4c641251c",
  "name": "Sticky Note5",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    1580,
    140
  ],
  "parameters": {
    "color": 5,
    "width": 282.3398199598652,
    "height": 371.7656631407652,
    "content": "## Draft on WordPress"
  },
  "typeVersion": 1
}

================ Node #3117 ================
{
  "id": "85996d51-ab98-41f5-b525-d926f04f50a8",
  "name": "Sticky Note9",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    1595,
    200
  ],
  "parameters": {
    "color": 7,
    "width": 254.77269221373095,
    "height": 80,
    "content": "The article is posted as a draft on WordPress"
  },
  "typeVersion": 1
}

================ Node #3118 ================
{
  "id": "46f67505-f2dc-4110-b1d4-a27d7814cb52",
  "name": "Sticky Note10",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    1881,
    140
  ],
  "parameters": {
    "color": 3,
    "width": 557.7592769264069,
    "height": 369.2595606183891,
    "content": "## Featured image"
  },
  "typeVersion": 1
}

================ Node #3119 ================
{
  "id": "a1beeb4f-f171-4c6a-ac19-7086b09757ab",
  "name": "Sticky Note11",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    1900,
    200
  ],
  "parameters": {
    "color": 7,
    "width": 517.9195082760601,
    "height": 80,
    "content": "The image is generated with Dall-E, uploaded to WordPress, and then connected to the post as its featured image"
  },
  "typeVersion": 1
}

================ Node #3120 ================
{
  "id": "d1fd737b-7f14-4371-8720-7742f708e641",
  "name": "Sticky Note12",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    -117.99507693448459,
    200
  ],
  "parameters": {
    "color": 7,
    "width": 287.370178643191,
    "height": 80,
    "content": "Starting from the given keywords, generates the article title, subtitle, chapters, and image prompt"
  },
  "typeVersion": 1
}

================ Node #3121 ================
{
  "id": "ccaaf851-613b-4d0c-8b3d-99a35ec9cdad",
  "name": "Sticky Note",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    -129.93405171072595,
    142
  ],
  "parameters": {
    "color": 6,
    "width": 319.697690939268,
    "height": 370.512611879577,
    "content": "## Article structure"
  },
  "typeVersion": 1
}

================ Node #3122 ================
{
  "id": "69bebd7b-8ad5-4b0d-a8df-1b2e6d4be96e",
  "name": "Sticky Note1",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    -640,
    140
  ],
  "parameters": {
    "color": 7,
    "width": 239.97343293577688,
    "height": 370.512611879577,
    "content": "## User form"
  },
  "typeVersion": 1
}

================ Node #3123 ================
{
  "id": "2037f81b-189c-4dc4-a4dc-179e4283544c",
  "name": "Sticky Note13",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    -623,
    200
  ],
  "parameters": {
    "color": 7,
    "width": 199.7721486302032,
    "height": 80,
    "content": "The user triggers the post creation"
  },
  "typeVersion": 1
}

================ Node #3124 ================
{
  "id": "e8d7f711-185d-499b-ba58-de52ac6a4e58",
  "name": "Sticky Note4",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    2461,
    140
  ],
  "parameters": {
    "color": 7,
    "width": 219.70753707029849,
    "height": 370.512611879577,
    "content": "## User feedback"
  },
  "typeVersion": 1
}

================ Node #3125 ================
{
  "id": "d89bebca-3607-4c66-a13d-07c32262e01a",
  "name": "Sticky Note14",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    2481,
    200
  ],
  "parameters": {
    "color": 7,
    "width": 183.38125554060056,
    "height": 80,
    "content": "Final confirmation to the user"
  },
  "typeVersion": 1
}

================ Node #3126 ================
{
  "id": "7df452e2-52f3-4efe-94a4-7d4eab0670c8",
  "name": "Sticky Note6",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    534.9876923362115,
    530.9889231025903
  ],
  "parameters": {
    "color": 7,
    "width": 281.2716777103785,
    "height": 288.4116890365125,
    "content": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nUser is notified to try again since some data is missing"
  },
  "typeVersion": 1
}

================ Node #3127 ================
{
  "id": "f881bcd9-c7d2-4a1c-bc1a-beb515d52ade",
  "name": "Sticky Note7",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    -128.98646156983267,
    532.991384635348
  ],
  "parameters": {
    "color": 7,
    "width": 319.8306137081817,
    "height": 275.3956890735875,
    "content": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWikipedia is used to write the article"
  },
  "typeVersion": 1
}

================ Node #3128 ================
{
  "id": "1b788b37-b8b5-47f6-8198-547dac8c76d6",
  "name": "Settings",
  "type": "n8n-nodes-base.set",
  "position": [
    -320,
    320
  ],
  "parameters": {
    "options": {},
    "assignments": {
      "assignments": [
        {
          "id": "3a433b0f-9957-4b64-ad81-359ab5e521d5",
          "name": "wordpress_url",
          "type": "string",
          "value": "https://you-wordpress-url-here.com/"
        },
        {
          "id": "ec5430e3-92c5-46e4-8c2c-c87291680892",
          "name": "keywords",
          "type": "string",
          "value": "={{ $json['Keywords (comma-separated)'] }}"
        },
        {
          "id": "5defb0a2-d921-4909-b10d-da59e1768496",
          "name": "chapters",
          "type": "number",
          "value": "={{ $json['Number of chapters'] }}"
        },
        {
          "id": "230ebd0b-73c2-4265-9b3c-57af7fbc48c8",
          "name": "words",
          "type": "number",
          "value": "={{ $json['Max words count'] }}"
        }
      ]
    }
  },
  "typeVersion": 3.3
}

================ Node #3129 ================
{
  "id": "af29ed91-84b5-43f8-b1ce-1c8dc35c2c1b",
  "name": "Sticky Note8",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    -377,
    140
  ],
  "parameters": {
    "color": 2,
    "width": 226.71615243495023,
    "height": 370.512611879577,
    "content": "## Settings"
  },
  "typeVersion": 1
}

================ Node #3130 ================
{
  "id": "a6fe2238-22ba-4c54-adef-663bd3955dcc",
  "name": "Sticky Note15",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    -360,
    200
  ],
  "parameters": {
    "color": 7,
    "width": 179.37633247508526,
    "height": 80,
    "content": "Set the URL of your WordPress here"
  },
  "typeVersion": 1
}

================ Node #3131 ================
{
  "id": "358ac79f-be7d-44eb-a353-b2ad4ac8d582",
  "name": "Check data consistency",
  "type": "n8n-nodes-base.if",
  "position": [
    300,
    320
  ],
  "parameters": {
    "options": {},
    "conditions": {
      "options": {
        "leftValue": "",
        "caseSensitive": true,
        "typeValidation": "strict"
      },
      "combinator": "and",
      "conditions": [
        {
          "id": "9c8c53ea-6079-48da-9d6e-dd527167b123",
          "operator": {
            "type": "string",
            "operation": "notEmpty",
            "singleValue": true
          },
          "leftValue": "={{ $json.message.content.title }}",
          "rightValue": ""
        },
        {
          "id": "a7fabfe1-3539-453a-93d9-8d6d395c3de4",
          "operator": {
            "type": "array",
            "operation": "lengthGte",
            "rightType": "number"
          },
          "leftValue": "={{ $json.message.content.chapters }}",
          "rightValue": "={{ 1 }}"
        },
        {
          "id": "a687081e-24e2-423c-a2da-b7c18baf0715",
          "operator": {
            "type": "string",
            "operation": "notEmpty",
            "singleValue": true
          },
          "leftValue": "={{ $json.message.content.subtitle }}",
          "rightValue": ""
        },
        {
          "id": "0a435a69-3699-4b98-b46f-40954c7a7816",
          "operator": {
            "type": "string",
            "operation": "notEmpty",
            "singleValue": true
          },
          "leftValue": "={{ $json.message.content.introduction }}",
          "rightValue": ""
        },
        {
          "id": "1a440144-21f3-42bd-9222-774bd564f3ef",
          "operator": {
            "type": "string",
            "operation": "notEmpty",
            "singleValue": true
          },
          "leftValue": "={{ $json.message.content.conclusions }}",
          "rightValue": ""
        },
        {
          "id": "834ce92d-b1e9-48ef-ae63-1d0841c900b5",
          "operator": {
            "type": "string",
            "operation": "notEmpty",
            "singleValue": true
          },
          "leftValue": "={{ $json.message.content.imagePrompt }}",
          "rightValue": ""
        }
      ]
    }
  },
  "typeVersion": 2
}

================ Node #3132 ================
{
  "id": "479f474a-1687-4588-8485-d793afc6757d",
  "name": "Split out chapters",
  "type": "n8n-nodes-base.splitOut",
  "position": [
    600,
    320
  ],
  "parameters": {
    "options": {},
    "fieldToSplitOut": "message.content.chapters"
  },
  "typeVersion": 1
}

================ Node #3133 ================
{
  "id": "bde7b7db-45c6-4ab3-a705-358000cefbec",
  "name": "Merge chapters title and text",
  "type": "n8n-nodes-base.merge",
  "position": [
    1220,
    460
  ],
  "parameters": {
    "mode": "combine",
    "options": {},
    "combinationMode": "mergeByPosition"
  },
  "typeVersion": 2.1
}

================ Node #3134 ================
{
  "id": "0079022b-eaa2-481b-8c78-f8623a63645b",
  "name": "Final article text",
  "type": "n8n-nodes-base.code",
  "position": [
    1400,
    320
  ],
  "parameters": {
    "jsCode": "let article = \"\";\n\n// Introduction\narticle += $('Create post title and structure').first().json.message.content.introduction;\narticle += \"<br><br>\";\n\nfor (const item of $input.all()) {\n article += \"<strong>\" + item.json.title + \"</strong>\";\n article += \"<br><br>\";\n article += item.json.message.content;\n article += \"<br><br>\";\n}\n\n// Conclusions\narticle += \"<strong>Conclusions</strong>\";\narticle += \"<br><br>\";\narticle += $('Create post title and structure').first().json.message.content.conclusions;\n\n\nreturn [\n {\n \"article\": article\n }\n];"
  },
  "typeVersion": 1
}

================ Node #3135 ================
{
  "id": "d892f00a-90fd-4bbb-bac6-4684d7d0c638",
  "name": "Post on Wordpress",
  "type": "n8n-nodes-base.wordpress",
  "position": [
    1680,
    320
  ],
  "parameters": {
    "title": "={{ $('Create post title and structure').all()[0].json.message.content.title }}",
    "additionalFields": {
      "status": "draft",
      "content": "={{ $json.article }}"
    }
  },
  "credentials": {
    "wordpressApi": {
      "id": "xxxxxxxxxxx",
      "name": "WordPress Credentials"
    }
  },
  "typeVersion": 1
}

================ Node #3136 ================
{
  "id": "a609d80d-f586-4e5f-a72d-01257f676574",
  "name": "Upload media",
  "type": "n8n-nodes-base.httpRequest",
  "position": [
    2120,
    320
  ],
  "parameters": {
    "url": "https://wp-demo.mondo.surf/wp-json/wp/v2/media",
    "method": "POST",
    "options": {},
    "sendBody": true,
    "contentType": "binaryData",
    "sendHeaders": true,
    "authentication": "predefinedCredentialType",
    "headerParameters": {
      "parameters": [
        {
          "name": "Content-Disposition",
          "value": "attachment; filename=\"example.jpg\""
        }
      ]
    },
    "inputDataFieldName": "data",
    "nodeCredentialType": "wordpressApi"
  },
  "credentials": {
    "wordpressApi": {
      "id": "xxxxxxxxxxx",
      "name": "WordPress Credentials"
    }
  },
  "typeVersion": 4.1
}

================ Node #3137 ================
{
  "id": "bdb2ef52-0201-4fe1-a7a6-59e34e21bf5e",
  "name": "Set image ID for the post",
  "type": "n8n-nodes-base.httpRequest",
  "position": [
    2280,
    320
  ],
  "parameters": {
    "url": "=https://wp-demo.mondo.surf/wp-json/wp/v2/posts/{{ $('Post on Wordpress').item.json.id }}",
    "method": "POST",
    "options": {},
    "sendQuery": true,
    "authentication": "predefinedCredentialType",
    "queryParameters": {
      "parameters": [
        {
          "name": "featured_media",
          "value": "={{ $json.id }}"
        }
      ]
    },
    "nodeCredentialType": "wordpressApi"
  },
  "credentials": {
    "wordpressApi": {
      "id": "xxxxxxxxxxx",
      "name": "WordPress Credentials"
    }
  },
  "typeVersion": 4.1
}

================ Node #3138 ================
{
  "id": "a721762f-168d-4c87-ab6d-0d31deecd9a5",
  "name": "Respond: Success",
  "type": "n8n-nodes-base.respondToWebhook",
  "position": [
    2520,
    320
  ],
  "parameters": {
    "options": {},
    "respondWith": "json",
    "responseBody": "={\n \"formSubmittedText\": \"The article {{ $json.title.rendered }} was correctly created as a draft on WordPress!\"\n}"
  },
  "typeVersion": 1
}

================ Node #3139 ================
{
  "id": "51b79bc2-035d-4db8-87bb-db6c889b164e",
  "name": "Respond: Error",
  "type": "n8n-nodes-base.respondToWebhook",
  "position": [
    620,
    580
  ],
  "parameters": {
    "options": {},
    "respondWith": "json",
    "responseBody": "={\n 'formSubmittedText': 'There was a problem creating the article, please refresh the form and try again!'\n}\n\n"
  },
  "typeVersion": 1
}

================ Node #3140 ================
{
  "id": "d8748498-0800-4208-b993-f233d14da7b6",
  "name": "Sticky Note16",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    533.7711864406776,
    140
  ],
  "parameters": {
    "color": 2,
    "width": 225.47038972308582,
    "height": 370.512611879577,
    "content": "## Chapters split"
  },
  "typeVersion": 1
}

================ Node #3141 ================
{
  "id": "4115de31-d4e9-4d77-a055-3dead31c4dc5",
  "name": "Sticky Note17",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    550.7711864406779,
    200
  ],
  "parameters": {
    "color": 7,
    "width": 185.6051460344073,
    "height": 80,
    "content": "Splits out chapter contents from the previous node"
  },
  "typeVersion": 1
}

================ Node #3142 ================
{
  "id": "aff8edf6-4e1e-4522-86f7-f0ce88cd0cd4",
  "name": "Sticky Note18",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    792,
    198
  ],
  "parameters": {
    "color": 7,
    "width": 287.370178643191,
    "height": 80,
    "content": "Writes the text for each chapter"
  },
  "typeVersion": 1
}

================ Node #3143 ================
{
  "id": "e45715a8-b1ca-4499-a16a-854f8bd4f370",
  "name": "Sticky Note19",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    780,
    140
  ],
  "parameters": {
    "color": 6,
    "width": 333.40108076977657,
    "height": 370.512611879577,
    "content": "## Chapters text"
  },
  "typeVersion": 1
}

================ Node #3144 ================
{
  "id": "5c4cd7a1-7dc9-4159-9bd2-dbe5f8feb663",
  "name": "Sticky Note21",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    1138.423429009716,
    140
  ],
  "parameters": {
    "color": 4,
    "width": 420.4253447940705,
    "height": 514.2177254645992,
    "content": "## Content preparation"
  },
  "typeVersion": 1
}

================ Node #3145 ================
{
  "id": "7a6d3f7d-0436-4844-b09a-37e805b95a2f",
  "name": "Sticky Note22",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    1160,
    200
  ],
  "parameters": {
    "color": 7,
    "width": 368.1523541074699,
    "height": 80,
    "content": "Merges the content and prepare it before sending it to WordPress"
  },
  "typeVersion": 1
}

================ Node #3146 ================
{
  "id": "903b695d-015a-4956-9c63-45802dfb9fdb",
  "name": "Generate featured image",
  "type": "@n8n/n8n-nodes-langchain.openAi",
  "position": [
    1940,
    320
  ],
  "parameters": {
    "prompt": "=Generate a photographic image to be used as the cover image for the article titled: {{ $('Create post title and structure').all()[0].json.message.content.title }}. This is the prompt for the image: {{ $('Create post title and structure').all()[0].json.message.content.imagePrompt }}, photography, realistic, sigma 85mm f/1.4",
    "options": {
      "size": "1792x1024",
      "style": "natural",
      "quality": "hd"
    },
    "resource": "image"
  },
  "credentials": {
    "openAiApi": {
      "id": "xxxxxxxxxxx",
      "name": "OpenAI Credentials"
    }
  },
  "typeVersion": 1
}

================ Node #3147 ================
{
  "id": "faa847cb-9702-4207-aa1e-6d9f62493527",
  "name": "Wikipedia",
  "type": "@n8n/n8n-nodes-langchain.toolWikipedia",
  "position": [
    -20,
    620
  ],
  "parameters": {},
  "typeVersion": 1
}

================ Node #3148 ================
{
  "id": "9d09c92e-11c0-4ea9-81d6-13bc9266741a",
  "name": "Create post title and structure",
  "type": "@n8n/n8n-nodes-langchain.openAi",
  "position": [
    -100,
    320
  ],
  "parameters": {
    "modelId": {
      "__rl": true,
      "mode": "list",
      "value": "gpt-4-1106-preview",
      "cachedResultName": "GPT-4-1106-PREVIEW"
    },
    "options": {
      "maxTokens": 2048
    },
    "messages": {
      "values": [
        {
          "content": "=Write the title, the subtitle, the chapters details, the introduction, the conclusions, and an image prompt for a SEO-friendly article about these topics:\n{{ $json.keywords }}.\n\nInstructions:\n- Place the article title in a JSON field called `title`\n- Place the subtitle in a JSON field called `subtitle`\n- Place the introduction in a JSON field called `introduction`\n- In the introduction introduce the topic that is then explored in depth in the rest of the text\n- The introduction should be around 60 words\n- Place the conclusions in a JSON field called `conclusions`\n- The conclusions should be around 60 words\n- Use the conclusions to sum all said in the article and offer a conclusion to the reader\n- The image prompt will be used to produce a photographic cover image for the article and should depict the topics discussed in the article\n- Place the image prompt in a JSON field called `imagePrompt`\n- There should be {{ $json.chapters.toString() }} chapters.\n- For each chapter provide a title and an exaustive prompt that will be used to write the chapter text.\n- Place the chapters in an array field called `chapters`\n- For each chapter provide the fields `title` and `prompt`\n- The chapters should follow a logical flow and not repeat the same concepts.\n- The chapters should be one related to the other and not isolated blocks of text. The text should be fluent and folow a linear logic.\n- Don't start the chapters with \"Chapter 1\", \"Chapter 2\", \"Chapter 3\"... just write the title of the chapter\n- For the title and the capthers' titles don't use colons (`:`)\n- For the text, use HTML for formatting, but limited to bold, italic and lists.\n- Don't use markdown for formatting.\n- Always search on Wikipedia for useful information or verify the accuracy of what you write.\n- Never mention it if you don't find information on Wikipedia or the web\n- Go deep in the topic you treat, don't just throw some superficial info"
        }
      ]
    },
    "jsonOutput": true
  },
  "credentials": {
    "openAiApi": {
      "id": "xxxxxxxxxxx",
      "name": "OpenAI Credentials"
    }
  },
  "typeVersion": 1
}

================ Node #3149 ================
{
  "id": "2ecd3a50-a34f-4ab9-ad31-e4e6608708fb",
  "name": "Create chapters text",
  "type": "@n8n/n8n-nodes-langchain.openAi",
  "position": [
    820,
    320
  ],
  "parameters": {
    "modelId": {
      "__rl": true,
      "mode": "list",
      "value": "gpt-4-0125-preview",
      "cachedResultName": "GPT-4-0125-PREVIEW"
    },
    "options": {
      "maxTokens": 2048
    },
    "messages": {
      "values": [
        {
          "content": "=Write a chapter for the article: {{ $('Create post title and structure').item.json.message.content.title }}, {{ $('Create post title and structure').item.json.message.content.subtitle }}, that talks about {{ $('Settings').item.json[\"keywords\"] }}\n\nThis is the prompt for the chapter titled {{ $json.title }}: {{ $json.prompt }}.\n\nGuidelines:\n- Just return the plain text for each chapter (no JSON structure).\n- Don't use markdown for formatting.\n- Use HTML for formatting, but limited to bold, italic and lists.\n- Don't add internal titles or headings.\n- The length of each chapther should be around {{ Math.round(($('Settings').item.json.words - 120)/ $('Settings').item.json.chapters) }} words long\n- Go deep in the topic you treat, don't just throw some superficial info\n{{ $itemIndex > 0 ? \"- The previous chapter talks about \" + $input.all()[$itemIndex-1].json.title : \"\" }}\n{{ $itemIndex > 0 ? \"- The promt for the previous chapter is \" + $input.all()[$itemIndex-1].json.prompt : \"\" }}\n{{ $itemIndex < $input.all().length ? \"- The following chapter will talk about \" + $input.all()[$itemIndex+1].json.title: \"\" }}\n{{ $itemIndex < $input.all().length ? \"- The prompt for the following chapter is \" + $input.all()[$itemIndex+1].json.prompt : \"\" }}\n- Consider the previous and following chapters what writing the text for this chapter. The text must be coherent with the previous and following chapters.\n- This chapter should not repeat the concepts already exposed in the previous chapter.\n- This chapter is a part of a larger article so don't include an introduction or conclusions. This chapter should merge with the rest of the article.\n"
        }
      ]
    }
  },
  "credentials": {
    "openAiApi": {
      "id": "xxxxxxxxxxx",
      "name": "OpenAI Credentials"
    }
  },
  "typeVersion": 1
}

================ Node #3150 ================
{
  "id": "296a935f-bd02-44bc-9e1e-3e4d6a307e38",
  "name": "When clicking \"Execute Workflow\"",
  "type": "n8n-nodes-base.manualTrigger",
  "position": [
    260,
    240
  ],
  "parameters": {},
  "typeVersion": 1
}

================ Node #3151 ================
{
  "id": "61a38c00-f196-4b01-9274-c5e0f4c511bc",
  "name": "Embeddings OpenAI",
  "type": "@n8n/n8n-nodes-langchain.embeddingsOpenAi",
  "position": [
    1060,
    460
  ],
  "parameters": {
    "options": {}
  },
  "credentials": {
    "openAiApi": {
      "id": "VQtv7frm7eLiEDnd",
      "name": "OpenAi account 7"
    }
  },
  "typeVersion": 1
}

================ Node #3152 ================
{
  "id": "816066bd-02e8-4de2-bcee-ab81d890435a",
  "name": "Sticky Note",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    426.9261940355327,
    60.389291053299075
  ],
  "parameters": {
    "color": 7,
    "width": 1086.039382705461,
    "height": 728.4168721167887,
    "content": "## 1. Setup: Fetch file from Google Drive, split it into chunks and insert into a vector database\nNote that running this part multiple times will insert multiple copies into your DB"
  },
  "typeVersion": 1
}

================ Node #3153 ================
{
  "id": "30cd81ad-d658-4c33-9a38-68e33b74cdae",
  "name": "Default Data Loader",
  "type": "@n8n/n8n-nodes-langchain.documentDefaultDataLoader",
  "position": [
    1240,
    460
  ],
  "parameters": {
    "options": {
      "metadata": {
        "metadataValues": [
          {
            "name": "file_url",
            "value": "={{ $json.file_url }}"
          },
          {
            "name": "file_name",
            "value": "={{ $('Add in metadata').item.json.file_name }}"
          }
        ]
      }
    },
    "dataType": "binary"
  },
  "typeVersion": 1
}

================ Node #3154 ================
{
  "id": "718f09e0-67be-41a6-a90d-f58e64ffee4d",
  "name": "Set file URL in Google Drive",
  "type": "n8n-nodes-base.set",
  "position": [
    480,
    240
  ],
  "parameters": {
    "options": {},
    "assignments": {
      "assignments": [
        {
          "id": "50025ff5-1b53-475f-b150-2aafef1c4c21",
          "name": "file_url",
          "type": "string",
          "value": " https://drive.google.com/file/d/11Koq9q53nkk0F5Y8eZgaWJUVR03I4-MM/view"
        }
      ]
    }
  },
  "typeVersion": 3.3
}

================ Node #3155 ================
{
  "id": "8f536a96-a6b1-4291-9cac-765759c396a8",
  "name": "Sticky Note2",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    -40,
    140
  ],
  "parameters": {
    "height": 350.7942096493649,
    "content": "# Try me out\n1. In Pinecone, create an index with 1536 dimensions and select it in the two vector store nodes\n2. Populate Pinecone by clicking the 'test workflow' button below\n3. Click the 'chat' button below and enter the following:\n\n_Which email provider does the creator of Bitcoin use?_"
  },
  "typeVersion": 1
}

================ Node #3156 ================
{
  "id": "ec7c9407-93c3-47a6-90f2-6e6056f5af84",
  "name": "Add in metadata",
  "type": "n8n-nodes-base.code",
  "position": [
    900,
    240
  ],
  "parameters": {
    "mode": "runOnceForEachItem",
    "jsCode": "// Add a new field called 'myNewField' to the JSON of the item\n$input.item.json.file_name = $input.item.binary.data.fileName;\n$input.item.json.file_ext = $input.item.binary.data.fileExtension;\n$input.item.json.file_url = $('Set file URL in Google Drive').item.json.file_url\n\nreturn $input.item;"
  },
  "typeVersion": 2
}

================ Node #3157 ================
{
  "id": "ab3131d5-4b04-48b4-b5d5-787e3ed18917",
  "name": "Download file",
  "type": "n8n-nodes-base.googleDrive",
  "position": [
    680,
    240
  ],
  "parameters": {
    "fileId": {
      "__rl": true,
      "mode": "url",
      "value": "={{ $json.file_url }}"
    },
    "options": {},
    "operation": "download"
  },
  "credentials": {
    "googleDriveOAuth2Api": {
      "id": "176",
      "name": "Google Drive account (David)"
    }
  },
  "typeVersion": 3
}

================ Node #3158 ================
{
  "id": "764a865c-7efe-4eec-a34c-cc87c5f085b1",
  "name": "Chat Trigger",
  "type": "@n8n/n8n-nodes-langchain.chatTrigger",
  "position": [
    260,
    960
  ],
  "webhookId": "1727c687-aed0-49cf-96af-e7796819fbb3",
  "parameters": {},
  "typeVersion": 1
}

================ Node #3159 ================
{
  "id": "36cd9a8d-7d89-49b3-8a81-baa278201a21",
  "name": "Prepare chunks",
  "type": "n8n-nodes-base.code",
  "position": [
    1080,
    960
  ],
  "parameters": {
    "jsCode": "let out = \"\"\nfor (const i in $input.all()) {\n let itemText = \"--- CHUNK \" + i + \" ---\\n\"\n itemText += $input.all()[i].json.document.pageContent + \"\\n\"\n itemText += \"\\n\"\n out += itemText\n}\n\nreturn {\n 'context': out\n};"
  },
  "typeVersion": 2
}

================ Node #3160 ================
{
  "id": "6356bce2-9aae-43ed-97ce-a27cbfb80df9",
  "name": "Embeddings OpenAI2",
  "type": "@n8n/n8n-nodes-langchain.embeddingsOpenAi",
  "position": [
    700,
    1180
  ],
  "parameters": {
    "options": {}
  },
  "credentials": {
    "openAiApi": {
      "id": "VQtv7frm7eLiEDnd",
      "name": "OpenAi account 7"
    }
  },
  "typeVersion": 1
}

================ Node #3161 ================
{
  "id": "8fb697ea-f2e5-4105-b6c8-ab869c2e5ab2",
  "name": "OpenAI Chat Model",
  "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
  "position": [
    1320,
    1180
  ],
  "parameters": {
    "options": {}
  },
  "credentials": {
    "openAiApi": {
      "id": "VQtv7frm7eLiEDnd",
      "name": "OpenAi account 7"
    }
  },
  "typeVersion": 1
}

================ Node #3162 ================
{
  "id": "9a2b0152-d008-42cb-bc10-495135d5ef45",
  "name": "Set max chunks to send to model",
  "type": "n8n-nodes-base.set",
  "position": [
    480,
    960
  ],
  "parameters": {
    "options": {},
    "assignments": {
      "assignments": [
        {
          "id": "236047ff-75a2-47fd-b338-1e9763c4015e",
          "name": "chunks",
          "type": "number",
          "value": 4
        }
      ]
    },
    "includeOtherFields": true
  },
  "typeVersion": 3.3
}

================ Node #3163 ================
{
  "id": "f2ab813f-0f0c-4d3a-a1de-7896ad736698",
  "name": "Structured Output Parser",
  "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
  "position": [
    1500,
    1180
  ],
  "parameters": {
    "jsonSchema": "{\n \"type\": \"object\",\n \"properties\": {\n \"answer\": {\n \"type\": \"string\"\n },\n \"citations\": {\n \"type\": \"array\",\n \"items\": {\n \"type\": \"number\"\n }\n }\n }\n}"
  },
  "typeVersion": 1
}

================ Node #3164 ================
{
  "id": "ada2a38b-0f6e-4115-97c0-000e97a5e62e",
  "name": "Compose citations",
  "type": "n8n-nodes-base.set",
  "position": [
    1680,
    960
  ],
  "parameters": {
    "options": {},
    "assignments": {
      "assignments": [
        {
          "id": "67ecefcf-a30c-4cc4-89ca-b9b23edd6585",
          "name": "citations",
          "type": "array",
          "value": "={{ $json.citations.map(i => '[' + $('Get top chunks matching query').all()[$json.citations].json.document.metadata.file_name + ', lines ' + $('Get top chunks matching query').all()[$json.citations].json.document.metadata['loc.lines.from'] + '-' + $('Get top chunks matching query').all()[$json.citations].json.document.metadata['loc.lines.to'] + ']') }}"
        }
      ]
    },
    "includeOtherFields": true
  },
  "typeVersion": 3.3
}

================ Node #3165 ================
{
  "id": "8e115308-532e-4afd-b766-78e54c861f33",
  "name": "Generate response",
  "type": "n8n-nodes-base.set",
  "position": [
    1900,
    960
  ],
  "parameters": {
    "options": {},
    "assignments": {
      "assignments": [
        {
          "id": "d77956c4-0ff4-4c64-80c2-9da9d4c8ad34",
          "name": "text",
          "type": "string",
          "value": "={{ $json.answer }} {{ $if(!$json.citations.isEmpty(), \"\\n\" + $json.citations.join(\"\"), '') }}"
        }
      ]
    }
  },
  "typeVersion": 3.3
}

================ Node #3166 ================
{
  "id": "40c5f9d8-38da-41ac-ab99-98f6010ba8bf",
  "name": "Sticky Note1",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    428.71587064297796,
    840
  ],
  "parameters": {
    "color": 7,
    "width": 1693.989843925635,
    "height": 548.5086735412393,
    "content": "## 2. Chat with file, getting citations in reponse"
  },
  "typeVersion": 1
}

================ Node #3167 ================
{
  "id": "ef357a2b-bc8d-43f7-982f-73c3a85a60be",
  "name": "Answer the query based on chunks",
  "type": "@n8n/n8n-nodes-langchain.chainLlm",
  "position": [
    1300,
    960
  ],
  "parameters": {
    "text": "=Use the following pieces of context to answer the question at the end. If you don't know the answer, just say that you don't know, don't try to make up an answer. Important: In your response, also include the the indexes of the chunks you used to generate the answer.\n\n{{ $json.context }}\n\nQuestion: {{ $(\"Chat Trigger\").first().json.chatInput }}\nHelpful Answer:",
    "promptType": "define",
    "hasOutputParser": true
  },
  "typeVersion": 1.4
}

================ Node #3168 ================
{
  "id": "cbb1b60c-b396-4f0e-8dc6-dfa41dbb178e",
  "name": "Sticky Note4",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    442.5682587140436,
    150.50554725042372
  ],
  "parameters": {
    "color": 7,
    "width": 179.58883583572606,
    "height": 257.75985739596473,
    "content": "Will fetch the Bitcoin whitepaper, but you can change this"
  },
  "typeVersion": 1
}

================ Node #3169 ================
{
  "id": "1a5511b9-5a24-40d5-a5b1-830376226e4e",
  "name": "Get top chunks matching query",
  "type": "@n8n/n8n-nodes-langchain.vectorStorePinecone",
  "position": [
    700,
    960
  ],
  "parameters": {
    "mode": "load",
    "topK": "={{ $json.chunks }}",
    "prompt": "={{ $json.chatInput }}",
    "options": {},
    "pineconeIndex": {
      "__rl": true,
      "mode": "list",
      "value": "test-index",
      "cachedResultName": "test-index"
    }
  },
  "credentials": {
    "pineconeApi": {
      "id": "eDN8BmzFKMhUNsia",
      "name": "PineconeApi account (David)"
    }
  },
  "typeVersion": 1
}

================ Node #3170 ================
{
  "id": "d8d210cf-f12e-4e82-9b28-f531d2ff14a6",
  "name": "Add to Pinecone vector store",
  "type": "@n8n/n8n-nodes-langchain.vectorStorePinecone",
  "position": [
    1120,
    240
  ],
  "parameters": {
    "mode": "insert",
    "options": {},
    "pineconeIndex": {
      "__rl": true,
      "mode": "list",
      "value": "test-index",
      "cachedResultName": "test-index"
    }
  },
  "credentials": {
    "pineconeApi": {
      "id": "eDN8BmzFKMhUNsia",
      "name": "PineconeApi account (David)"
    }
  },
  "typeVersion": 1
}

================ Node #3171 ================
{
  "id": "c501568b-fb49-487d-bced-757e3d7ed13c",
  "name": "Recursive Character Text Splitter",
  "type": "@n8n/n8n-nodes-langchain.textSplitterRecursiveCharacterTextSplitter",
  "position": [
    1240,
    620
  ],
  "parameters": {
    "chunkSize": 3000,
    "chunkOverlap": 200
  },
  "typeVersion": 1
}

================ Node #3172 ================
{
  "id": "e01bafec-eb24-44c7-b3c4-a60f91666350",
  "name": "Sticky Note1",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    -1200,
    180
  ],
  "parameters": {
    "color": 6,
    "width": 400,
    "height": 740,
    "content": "We are working here with crops dataset: \nExisting (so not anomalies) crops images in dataset are:\n- 'pearl_millet(bajra)',\n- 'tobacco-plant',\n- 'cherry',\n- 'cotton',\n- 'banana',\n- 'cucumber',\n- 'maize',\n- 'wheat',\n- 'clove',\n- 'jowar',\n- 'olive-tree',\n- 'soyabean',\n- 'coffee-plant',\n- 'rice',\n- 'lemon',\n- 'mustard-oil',\n- 'vigna-radiati(mung)',\n- 'coconut',\n- 'gram',\n- 'pineapple',\n- 'sugarcane',\n- 'sunflower',\n- 'chilli',\n- 'fox_nut(makhana)',\n- 'jute',\n- 'papaya',\n- 'tea',\n- 'cardamom',\n- 'almond'\n"
  },
  "typeVersion": 1
}

================ Node #3173 ================
{
  "id": "b9943781-de1f-4129-9b81-ed836e9ebb11",
  "name": "Embed image",
  "type": "n8n-nodes-base.httpRequest",
  "position": [
    680,
    60
  ],
  "parameters": {
    "url": "https://api.voyageai.com/v1/multimodalembeddings",
    "method": "POST",
    "options": {},
    "jsonBody": "={{\n{\n \"inputs\": [\n {\n \"content\": [\n {\n \"type\": \"image_url\",\n \"image_url\": $('Image URL hardcode').first().json.imageURL\n }\n ]\n }\n ],\n \"model\": \"voyage-multimodal-3\",\n \"input_type\": \"document\"\n}\n}}",
    "sendBody": true,
    "specifyBody": "json",
    "authentication": "genericCredentialType",
    "genericAuthType": "httpHeaderAuth"
  },
  "credentials": {
    "httpHeaderAuth": {
      "id": "Vb0RNVDnIHmgnZOP",
      "name": "Voyage API"
    }
  },
  "typeVersion": 4.2
}

================ Node #3174 ================
{
  "id": "47b72bc2-4817-48c6-b517-c1328e402468",
  "name": "Get similarity of medoids",
  "type": "n8n-nodes-base.httpRequest",
  "position": [
    940,
    60
  ],
  "parameters": {
    "url": "={{ $('Variables for medoids').first().json.qdrantCloudURL }}/collections/{{ $('Variables for medoids').first().json.collectionName }}/points/query",
    "method": "POST",
    "options": {},
    "jsonBody": "={{\n{\n \"query\": $json.data[0].embedding,\n \"using\": \"voyage\",\n \"limit\": $('Info About Crop Labeled Clusters').first().json.cropsNumber,\n \"with_payload\": true,\n \"filter\": {\n \"must\": [\n { \n \"key\": $('Variables for medoids').first().json.clusterCenterType,\n \"match\": {\n \"value\": true\n }\n }\n ]\n }\n}\n}}",
    "sendBody": true,
    "specifyBody": "json",
    "authentication": "predefinedCredentialType",
    "nodeCredentialType": "qdrantApi"
  },
  "credentials": {
    "qdrantApi": {
      "id": "it3j3hP9FICqhgX6",
      "name": "QdrantApi account"
    }
  },
  "typeVersion": 4.2
}

================ Node #3175 ================
{
  "id": "42d7eb27-ec38-4406-b5c4-27eb45358e93",
  "name": "Compare scores",
  "type": "n8n-nodes-base.code",
  "position": [
    1140,
    60
  ],
  "parameters": {
    "language": "python",
    "pythonCode": "points = _input.first()['json']['result']['points']\nthreshold_type = _('Variables for medoids').first()['json']['clusterThresholdCenterType']\n\nmax_score = -1\ncrop_with_max_score = None\nundefined = True\n\nfor center in points:\n if center['score'] >= center['payload'][threshold_type]:\n undefined = False\n if center['score'] > max_score:\n max_score = center['score']\n crop_with_max_score = center['payload']['crop_name']\n\nif undefined:\n result_message = \"ALERT, we might have a new undefined crop!\"\nelse:\n result_message = f\"Looks similar to {crop_with_max_score}\"\n\nreturn [{\n \"json\": {\n \"result\": result_message\n }\n}]\n"
  },
  "typeVersion": 2
}

================ Node #3176 ================
{
  "id": "23aa604a-ff0b-4948-bcd5-af39300198c0",
  "name": "Sticky Note4",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    -1200,
    -220
  ],
  "parameters": {
    "width": 400,
    "height": 380,
    "content": "## Crop Anomaly Detection Tool\n### This is the tool that can be used directly for anomalous crops detection. \nIt takes as input (any) **image URL** and returns a **text message** telling if whatever this image depicts is anomalous to the crop dataset stored in Qdrant. \n\n* An Image URL is received via the Execute Workflow Trigger which is used to generate embedding vectors via the Voyage.ai Embeddings API.\n* The returned vectors are used to query the Qdrant collection to determine if the given crop is known by comparing it to **threshold scores** of each image class (crop type).\n* If the image scores lower than all thresholds, then the image is considered an anomaly for the dataset."
  },
  "typeVersion": 1
}

================ Node #3177 ================
{
  "id": "3a79eca2-44f9-4aee-8a0d-9c7ca2f9149d",
  "name": "Variables for medoids",
  "type": "n8n-nodes-base.set",
  "position": [
    -200,
    60
  ],
  "parameters": {
    "options": {},
    "assignments": {
      "assignments": [
        {
          "id": "dbbc1e7b-c63e-4ff1-9524-8ef3e9f6cd48",
          "name": "clusterCenterType",
          "type": "string",
          "value": "is_medoid"
        },
        {
          "id": "a994ce37-2530-4030-acfb-ec777a7ddb05",
          "name": "qdrantCloudURL",
          "type": "string",
          "value": "https://152bc6e2-832a-415c-a1aa-fb529f8baf8d.eu-central-1-0.aws.cloud.qdrant.io"
        },
        {
          "id": "12f0a9e6-686d-416e-a61b-72d034ec21ba",
          "name": "collectionName",
          "type": "string",
          "value": "=agricultural-crops"
        },
        {
          "id": "4c88a617-d44f-4776-b457-8a1dffb1d03c",
          "name": "clusterThresholdCenterType",
          "type": "string",
          "value": "is_medoid_cluster_threshold"
        }
      ]
    }
  },
  "typeVersion": 3.4
}

================ Node #3178 ================
{
  "id": "13b25434-bd66-4293-93f1-26c67b9ec7dd",
  "name": "Sticky Note3",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    -340,
    260
  ],
  "parameters": {
    "color": 6,
    "width": 360,
    "height": 200,
    "content": "**clusterCenterType** - either\n* \"is_text_anchor_medoid\" or\n* \"is_medoid\"\n\n\n**clusterThresholdCenterType** - either\n* \"is_text_anchor_medoid_cluster_threshold\" or\n* \"is_medoid_cluster_threshold\""
  },
  "typeVersion": 1
}

================ Node #3179 ================
{
  "id": "869b0962-6cae-487d-8230-539a0cc4c14c",
  "name": "Info About Crop Labeled Clusters",
  "type": "n8n-nodes-base.set",
  "position": [
    440,
    60
  ],
  "parameters": {
    "options": {},
    "assignments": {
      "assignments": [
        {
          "id": "5327b254-b703-4a34-a398-f82edb1d6d6b",
          "name": "=cropsNumber",
          "type": "number",
          "value": "={{ $json.result.hits.length }}"
        }
      ]
    }
  },
  "typeVersion": 3.4
}

================ Node #3180 ================
{
  "id": "5d3956f8-f43b-439e-b176-a594a21d8011",
  "name": "Total Points in Collection",
  "type": "n8n-nodes-base.httpRequest",
  "position": [
    40,
    60
  ],
  "parameters": {
    "url": "={{ $json.qdrantCloudURL }}/collections/{{ $json.collectionName }}/points/count",
    "method": "POST",
    "options": {},
    "jsonBody": "={\n \"exact\": true\n}",
    "sendBody": true,
    "specifyBody": "json",
    "authentication": "predefinedCredentialType",
    "nodeCredentialType": "qdrantApi"
  },
  "credentials": {
    "qdrantApi": {
      "id": "it3j3hP9FICqhgX6",
      "name": "QdrantApi account"
    }
  },
  "typeVersion": 4.2
}

================ Node #3181 ================
{
  "id": "14ba3db9-3965-4b20-b333-145616d45c3a",
  "name": "Each Crop Counts",
  "type": "n8n-nodes-base.httpRequest",
  "position": [
    240,
    60
  ],
  "parameters": {
    "url": "={{ $('Variables for medoids').first().json.qdrantCloudURL }}/collections/{{ $('Variables for medoids').first().json.collectionName }}/facet",
    "method": "POST",
    "options": {},
    "jsonBody": "={{\n{\n \"key\": \"crop_name\",\n \"limit\": $json.result.count,\n \"exact\": true\n}\n}}",
    "sendBody": true,
    "specifyBody": "json",
    "authentication": "predefinedCredentialType",
    "nodeCredentialType": "qdrantApi"
  },
  "credentials": {
    "qdrantApi": {
      "id": "it3j3hP9FICqhgX6",
      "name": "QdrantApi account"
    }
  },
  "typeVersion": 4.2
}

================ Node #3182 ================
{
  "id": "e37c6758-0556-4a56-ab14-d4df663cb53a",
  "name": "Image URL hardcode",
  "type": "n8n-nodes-base.set",
  "position": [
    -480,
    60
  ],
  "parameters": {
    "options": {},
    "assignments": {
      "assignments": [
        {
          "id": "46ceba40-fb25-450c-8550-d43d8b8aa94c",
          "name": "imageURL",
          "type": "string",
          "value": "={{ $json.query.imageURL }}"
        }
      ]
    }
  },
  "typeVersion": 3.4
}

================ Node #3183 ================
{
  "id": "b24ad1a7-0cf8-4acc-9c18-6fe9d58b10f2",
  "name": "Execute Workflow Trigger",
  "type": "n8n-nodes-base.executeWorkflowTrigger",
  "position": [
    -720,
    60
  ],
  "parameters": {},
  "typeVersion": 1
}

================ Node #3184 ================
{
  "id": "50424f2b-6831-41bf-8de4-81f69d901ce1",
  "name": "Sticky Note2",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    -240,
    -80
  ],
  "parameters": {
    "width": 180,
    "height": 120,
    "content": "Variables to access Qdrant's collection we uploaded & prepared for anomaly detection in 2 previous pipelines\n"
  },
  "typeVersion": 1
}

================ Node #3185 ================
{
  "id": "2e8ed3ca-1bba-4214-b34b-376a237842ff",
  "name": "Sticky Note5",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    40,
    -120
  ],
  "parameters": {
    "width": 560,
    "height": 140,
    "content": "These three nodes are needed just to figure out how many different classes (crops) we have in our Qdrant collection: **cropsNumber** (needed in *\"Get similarity of medoids\"* node. \n[Note] *\"Total Points in Collection\"* -> *\"Each Crop Counts\"* were used&explained already in *\"[2/4] Set up medoids (2 types) for anomaly detection (crops dataset)\"* pipeline.\n"
  },
  "typeVersion": 1
}

================ Node #3186 ================
{
  "id": "e2fa5763-6e97-4ff5-8919-1cb85a3c6968",
  "name": "Sticky Note6",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    620,
    240
  ],
  "parameters": {
    "height": 120,
    "content": "Here, we're embedding the image passed to this workflow tool with the Voyage embedding model to compare the image to all crop images in the database."
  },
  "typeVersion": 1
}

================ Node #3187 ================
{
  "id": "cdb6b8d3-f7f4-4d66-850f-ce16c8ed98b9",
  "name": "Sticky Note7",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    920,
    220
  ],
  "parameters": {
    "width": 400,
    "height": 180,
    "content": "Checking how similar the image is to all the centres of clusters (crops).\nIf it's more similar to the thresholds we set up and stored in centres in the previous workflow, the image probably belongs to this crop class; otherwise, it's anomalous to the class. \nIf image is anomalous to all the classes, it's an anomaly."
  },
  "typeVersion": 1
}

================ Node #3188 ================
{
  "id": "03b4699f-ba43-4f5f-ad69-6f81deea2641",
  "name": "Sticky Note22",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    -620,
    580
  ],
  "parameters": {
    "color": 4,
    "width": 540,
    "height": 300,
    "content": "### For anomaly detection\n1. The first pipeline is uploading (crops) dataset to Qdrant's collection.\n2. The second pipeline sets up cluster (class) centres in this Qdrant collection & cluster (class) threshold scores.\n3. **This is the anomaly detection tool, which takes any image as input and uses all preparatory work done with Qdrant (crops) collection.**\n\n### To recreate it\nYou'll have to upload [crops](https://www.kaggle.com/datasets/mdwaquarazam/agricultural-crops-image-classification) dataset from Kaggle to your own Google Storage bucket, and re-create APIs/connections to [Qdrant Cloud](https://qdrant.tech/documentation/quickstart-cloud/) (you can use **Free Tier** cluster), Voyage AI API & Google Cloud Storage\n\n**In general, pipelines are adaptable to any dataset of images**\n"
  },
  "typeVersion": 1
}

================ Node #3189 ================
{
  "id": "53831410-b4f3-4374-8bdd-c2a33cd873cb",
  "name": "When clicking \u2018Test workflow\u2019",
  "type": "n8n-nodes-base.manualTrigger",
  "position": [
    -640,
    0
  ],
  "parameters": {},
  "typeVersion": 1
}

================ Node #3190 ================
{
  "id": "e303ccea-c0e0-4fe5-bd31-48380a0e438f",
  "name": "Google Cloud Storage",
  "type": "n8n-nodes-base.googleCloudStorage",
  "position": [
    820,
    160
  ],
  "parameters": {
    "resource": "object",
    "returnAll": true,
    "bucketName": "n8n-qdrant-demo",
    "listFilters": {
      "prefix": "agricultural-crops"
    },
    "requestOptions": {}
  },
  "credentials": {
    "googleCloudStorageOAuth2Api": {
      "id": "fn0sr7grtfprVQvL",
      "name": "Google Cloud Storage account"
    }
  },
  "typeVersion": 1
}

================ Node #3191 ================
{
  "id": "737bdb15-61cf-48eb-96af-569eb5986ee8",
  "name": "Get fields for Qdrant",
  "type": "n8n-nodes-base.set",
  "position": [
    1080,
    160
  ],
  "parameters": {
    "options": {},
    "assignments": {
      "assignments": [
        {
          "id": "10d9147f-1c0c-4357-8413-3130829c2e24",
          "name": "=publicLink",
          "type": "string",
          "value": "=https://storage.googleapis.com/{{ $json.bucket }}/{{ $json.selfLink.split('/').splice(-1) }}"
        },
        {
          "id": "ff9e6a0b-e47a-4550-a13b-465507c75f8f",
          "name": "cropName",
          "type": "string",
          "value": "={{ $json.id.split('/').slice(-3, -2)[0].toLowerCase()}}"
        }
      ]
    }
  },
  "typeVersion": 3.4
}

================ Node #3192 ================
{
  "id": "2b18ed0c-38d3-49e9-be3d-4f7b35f4d9e5",
  "name": "Qdrant cluster variables",
  "type": "n8n-nodes-base.set",
  "position": [
    -360,
    0
  ],
  "parameters": {
    "options": {},
    "assignments": {
      "assignments": [
        {
          "id": "58b7384d-fd0c-44aa-9f8e-0306a99be431",
          "name": "qdrantCloudURL",
          "type": "string",
          "value": "=https://152bc6e2-832a-415c-a1aa-fb529f8baf8d.eu-central-1-0.aws.cloud.qdrant.io"
        },
        {
          "id": "e34c4d88-b102-43cc-a09e-e0553f2da23a",
          "name": "collectionName",
          "type": "string",
          "value": "=agricultural-crops"
        },
        {
          "id": "33581e0a-307f-4380-9533-615791096de7",
          "name": "VoyageEmbeddingsDim",
          "type": "number",
          "value": 1024
        },
        {
          "id": "6e390343-2cd2-4559-aba9-82b13acb7f52",
          "name": "batchSize",
          "type": "number",
          "value": 4
        }
      ]
    }
  },
  "typeVersion": 3.4
}

================ Node #3193 ================
{
  "id": "f88d290e-3311-4322-b2a5-1350fc1f8768",
  "name": "Embed crop image",
  "type": "n8n-nodes-base.httpRequest",
  "position": [
    2120,
    160
  ],
  "parameters": {
    "url": "https://api.voyageai.com/v1/multimodalembeddings",
    "method": "POST",
    "options": {},
    "jsonBody": "={{\n{\n \"inputs\": $json.batchVoyage,\n \"model\": \"voyage-multimodal-3\",\n \"input_type\": \"document\"\n}\n}}",
    "sendBody": true,
    "specifyBody": "json",
    "authentication": "genericCredentialType",
    "genericAuthType": "httpHeaderAuth"
  },
  "credentials": {
    "httpHeaderAuth": {
      "id": "Vb0RNVDnIHmgnZOP",
      "name": "Voyage API"
    }
  },
  "typeVersion": 4.2
}

================ Node #3194 ================
{
  "id": "250c6a8d-f545-4037-8069-c834437bbe15",
  "name": "Create Qdrant Collection",
  "type": "n8n-nodes-base.httpRequest",
  "position": [
    320,
    160
  ],
  "parameters": {
    "url": "={{ $('Qdrant cluster variables').first().json.qdrantCloudURL }}/collections/{{ $('Qdrant cluster variables').first().json.collectionName }}",
    "method": "PUT",
    "options": {},
    "jsonBody": "={{\n{\n \"vectors\": {\n \"voyage\": { \n \"size\": $('Qdrant cluster variables').first().json.VoyageEmbeddingsDim, \n \"distance\": \"Cosine\" \n } \n }\n}\n}}",
    "sendBody": true,
    "specifyBody": "json",
    "authentication": "predefinedCredentialType",
    "nodeCredentialType": "qdrantApi"
  },
  "credentials": {
    "qdrantApi": {
      "id": "it3j3hP9FICqhgX6",
      "name": "QdrantApi account"
    }
  },
  "typeVersion": 4.2
}

================ Node #3195 ================
{
  "id": "20b612ff-4794-43ef-bf45-008a16a2f30f",
  "name": "Check Qdrant Collection Existence",
  "type": "n8n-nodes-base.httpRequest",
  "position": [
    -100,
    0
  ],
  "parameters": {
    "url": "={{ $json.qdrantCloudURL }}/collections/{{ $json.collectionName }}/exists",
    "options": {},
    "authentication": "predefinedCredentialType",
    "nodeCredentialType": "qdrantApi"
  },
  "credentials": {
    "qdrantApi": {
      "id": "it3j3hP9FICqhgX6",
      "name": "QdrantApi account"
    }
  },
  "typeVersion": 4.2
}

================ Node #3196 ================
{
  "id": "c067740b-5de3-452e-a614-bf14985a73a0",
  "name": "Batches in the API's format",
  "type": "n8n-nodes-base.set",
  "position": [
    1860,
    160
  ],
  "parameters": {
    "options": {},
    "assignments": {
      "assignments": [
        {
          "id": "f14db112-6f15-4405-aa47-8cb56bb8ae7a",
          "name": "=batchVoyage",
          "type": "array",
          "value": "={{ $json.batch.map(item => ({ \"content\": ([{\"type\": \"image_url\", \"image_url\": item[\"publicLink\"]}])}))}}"
        },
        {
          "id": "3885fd69-66f5-4435-86a4-b80eaa568ac1",
          "name": "=batchPayloadQdrant",
          "type": "array",
          "value": "={{ $json.batch.map(item => ({\"crop_name\":item[\"cropName\"], \"image_path\":item[\"publicLink\"]})) }}"
        },
        {
          "id": "8ea7a91e-af27-49cb-9a29-41dae15c4e33",
          "name": "uuids",
          "type": "array",
          "value": "={{ $json.uuids }}"
        }
      ]
    }
  },
  "typeVersion": 3.4
}

================ Node #3197 ================
{
  "id": "bf9a9532-db64-4c02-b91d-47e708ded4d3",
  "name": "Batch Upload to Qdrant",
  "type": "n8n-nodes-base.httpRequest",
  "position": [
    2320,
    160
  ],
  "parameters": {
    "url": "={{ $('Qdrant cluster variables').first().json.qdrantCloudURL }}/collections/{{ $('Qdrant cluster variables').first().json.collectionName }}/points",
    "method": "PUT",
    "options": {},
    "jsonBody": "={{\n{\n \"batch\": {\n \"ids\" : $('Batches in the API\\'s format').item.json.uuids,\n \"vectors\": {\"voyage\": $json.data.map(item => item[\"embedding\"]) },\n \"payloads\": $('Batches in the API\\'s format').item.json.batchPayloadQdrant\n }\n}\n}}",
    "sendBody": true,
    "specifyBody": "json",
    "authentication": "predefinedCredentialType",
    "nodeCredentialType": "qdrantApi"
  },
  "credentials": {
    "qdrantApi": {
      "id": "it3j3hP9FICqhgX6",
      "name": "QdrantApi account"
    }
  },
  "typeVersion": 4.2
}

================ Node #3198 ================
{
  "id": "3c30373f-c84c-405f-bb84-ec8b4c7419f4",
  "name": "Split in batches, generate uuids for Qdrant points",
  "type": "n8n-nodes-base.code",
  "position": [
    1600,
    160
  ],
  "parameters": {
    "language": "python",
    "pythonCode": "import uuid\n\ncrops = [item.json for item in _input.all()]\nbatch_size = int(_('Qdrant cluster variables').first()['json']['batchSize'])\n\ndef split_into_batches_add_uuids(array, batch_size):\n return [\n {\n \"batch\": array[i:i + batch_size],\n \"uuids\": [str(uuid.uuid4()) for j in range(len(array[i:i + batch_size]))]\n }\n for i in range(0, len(array), batch_size)\n ]\n\n# Split crops into batches\nbatched_crops = split_into_batches_add_uuids(crops, batch_size)\n\nreturn batched_crops"
  },
  "typeVersion": 2
}

================ Node #3199 ================
{
  "id": "2b028f8c-0a4c-4a3a-9e2b-14b1c2401c6d",
  "name": "If collection exists",
  "type": "n8n-nodes-base.if",
  "position": [
    120,
    0
  ],
  "parameters": {
    "options": {},
    "conditions": {
      "options": {
        "version": 2,
        "leftValue": "",
        "caseSensitive": true,
        "typeValidation": "strict"
      },
      "combinator": "and",
      "conditions": [
        {
          "id": "2104b862-667c-4a34-8888-9cb81a2e10f8",
          "operator": {
            "type": "boolean",
            "operation": "true",
            "singleValue": true
          },
          "leftValue": "={{ $json.result.exists }}",
          "rightValue": "true"
        }
      ]
    }
  },
  "typeVersion": 2.2
}

================ Node #3200 ================
{
  "id": "768793f6-391e-4cc9-b637-f32ee2f77156",
  "name": "Sticky Note",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    500,
    340
  ],
  "parameters": {
    "width": 280,
    "height": 200,
    "content": "In the next workflow, we're going to use Qdrant to get the number of images belonging to each crop type defined by `crop_name` (for example, *\"cucumber\"*). \nTo get this information about counts in payload fields, we need to create an index on that field to optimise the resources (it needs to be done once). That's what is happening here"
  },
  "typeVersion": 1
}

================ Node #3201 ================
{
  "id": "0c8896f7-8c57-4add-bc4d-03c4a774bdf1",
  "name": "Payload index on crop_name",
  "type": "n8n-nodes-base.httpRequest",
  "position": [
    500,
    160
  ],
  "parameters": {
    "url": "={{ $('Qdrant cluster variables').first().json.qdrantCloudURL }}/collections/{{ $('Qdrant cluster variables').first().json.collectionName }}/index",
    "method": "PUT",
    "options": {},
    "jsonBody": "={\n \"field_name\": \"crop_name\",\n \"field_schema\": \"keyword\"\n}",
    "sendBody": true,
    "specifyBody": "json",
    "authentication": "predefinedCredentialType",
    "nodeCredentialType": "qdrantApi"
  },
  "credentials": {
    "qdrantApi": {
      "id": "it3j3hP9FICqhgX6",
      "name": "QdrantApi account"
    }
  },
  "typeVersion": 4.2
}

================ Node #3202 ================
{
  "id": "342186f6-41bf-46be-9be8-a9b1ca290d55",
  "name": "Sticky Note1",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    -360,
    -360
  ],
  "parameters": {
    "height": 300,
    "content": "Setting up variables\n1) Cloud URL - to connect to Qdrant Cloud (your personal cluster URL)\n2) Collection name in Qdrant\n3) Size of Voyage embeddings (needed for collection creation in Qdrant) <this one should not be changed unless the embedding model is changed>\n4) Batch size for batch embedding/batch uploading to Qdrant "
  },
  "typeVersion": 1
}

================ Node #3203 ================
{
  "id": "fae9248c-dbcc-4b6d-b977-0047f120a587",
  "name": "Sticky Note2",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    -100,
    -220
  ],
  "parameters": {
    "content": "In Qdrant, you can create a collection once; if you try to create it two times with the same name, you'll get an error, so I am adding here a check if a collection with this name exists already"
  },
  "typeVersion": 1
}

================ Node #3204 ================
{
  "id": "f7aea242-3d98-4a1c-a98a-986ac2b4928b",
  "name": "Sticky Note3",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    180,
    340
  ],
  "parameters": {
    "height": 280,
    "content": "If a collection with the name set up in variables doesn't exist yet, I create an empty one; \n\nCollection will contain [named vectors](https://qdrant.tech/documentation/concepts/vectors/#named-vectors), with a name *\"voyage\"*\nFor these named vectors, I define two parameters:\n1) Vectors size (in our case, Voyage embeddings size)\n2) Similarity metric to compare embeddings: in our case, **\"Cosine\"**.\n"
  },
  "typeVersion": 1
}

================ Node #3205 ================
{
  "id": "b84045c1-f66a-4543-8d42-1e76de0b6e91",
  "name": "Sticky Note4",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    800,
    -280
  ],
  "parameters": {
    "height": 400,
    "content": "Now it's time to embed & upload to Qdrant our image datasets;\nBoth of them, [crops](https://www.kaggle.com/datasets/mdwaquarazam/agricultural-crops-image-classification) and [lands](https://www.kaggle.com/datasets/apollo2506/landuse-scene-classification) were uploaded to our Google Cloud Storage bucket, and in this workflow we're fetching **the crops dataset** (for lands it will be a nearly identical workflow, up to variable names)\n(you should replace it with your image datasets)\n\nDatasets consist of **image URLs**; images are grouped by folders based on their class. For example, we have a system of subfolders like *\"tomato\"* and *\"cucumber\"* for the crops dataset with image URLs of the respective class.\n"
  },
  "typeVersion": 1
}

================ Node #3206 ================
{
  "id": "255dfad8-c545-4d75-bc9c-529aa50447a9",
  "name": "Sticky Note5",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    1080,
    -140
  ],
  "parameters": {
    "height": 240,
    "content": "Google Storage node returns **mediaLink**, which can be used directly for downloading images; however, we just need a public image URL so that Voyage API can process it; so here we construct this public link and extract a crop name from the folder in which image was stored (for example, *\"cucumber\"*)\n"
  },
  "typeVersion": 1
}

================ Node #3207 ================
{
  "id": "a6acce75-cce0-4de3-bc64-37592c97359b",
  "name": "Sticky Note6",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    1600,
    -80
  ],
  "parameters": {
    "height": 180,
    "content": "I regroup images into batches of `batchSize` size and, to make batch upload to Qdrant possible, generate UUIDs to use them as batch [point IDs](https://qdrant.tech/documentation/concepts/points/#point-ids) (Qdrant doesn't set up id's for the user; users have to choose them themselves)"
  },
  "typeVersion": 1
}

================ Node #3208 ================
{
  "id": "cab3cc83-b50c-41f4-8d51-59e04bba5556",
  "name": "Sticky Note7",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    1340,
    -60
  ],
  "parameters": {
    "content": "Since we build anomaly detection based on the crops dataset, to test it properly, I didn't upload to Qdrant pictures of tomatoes at all; I filter them out here"
  },
  "typeVersion": 1
}

================ Node #3209 ================
{
  "id": "e5cdcce5-efdc-41f2-9796-656bd345f783",
  "name": "Sticky Note9",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    1860,
    -100
  ],
  "parameters": {
    "height": 200,
    "content": "Since Voyage API requires a [specific json structure](https://docs.voyageai.com/reference/multimodal-embeddings-api) for batch embeddings, as does [Qdrant's API for uploading points in batches](https://api.qdrant.tech/api-reference/points/upsert-points), I am adapting the structure of jsons\n\n[NB] - [payload = meta data in Qdrant]"
  },
  "typeVersion": 1
}

================ Node #3210 ================
{
  "id": "a7f15c44-3d5c-4b43-bfb2-94fe27a32071",
  "name": "Sticky Note11",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    2120,
    20
  ],
  "parameters": {
    "width": 180,
    "height": 80,
    "content": "Embedding images with Voyage model (mind `input_type`)"
  },
  "typeVersion": 1
}

================ Node #3211 ================
{
  "id": "01b92e7e-d954-4d58-85b1-109c336546c4",
  "name": "Filtering out tomato to test anomalies",
  "type": "n8n-nodes-base.filter",
  "position": [
    1340,
    160
  ],
  "parameters": {
    "options": {},
    "conditions": {
      "options": {
        "version": 2,
        "leftValue": "",
        "caseSensitive": true,
        "typeValidation": "strict"
      },
      "combinator": "and",
      "conditions": [
        {
          "id": "f7953ae2-5333-4805-abe5-abf6da645c5e",
          "operator": {
            "type": "string",
            "operation": "notEquals"
          },
          "leftValue": "={{ $json.cropName }}",
          "rightValue": "tomato"
        }
      ]
    }
  },
  "typeVersion": 2.2
}

================ Node #3212 ================
{
  "id": "8d564817-885e-453a-a087-900b34b84d9c",
  "name": "Sticky Note8",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    -1160,
    -280
  ],
  "parameters": {
    "width": 440,
    "height": 460,
    "content": "## Batch Uploading Dataset to Qdrant \n### This template imports dataset images from storage, creates embeddings for them in batches, and uploads them to Qdrant in batches. In this particular template, we work with [crops dataset](https://www.kaggle.com/datasets/mdwaquarazam/agricultural-crops-image-classification). However, it's analogous to [lands dataset](https://www.kaggle.com/datasets/apollo2506/landuse-scene-classification), and in general, it's adaptable to any dataset consisting of image URLs (as the following pipelines are).\n\n* First, check for an existing Qdrant collection to use; otherwise, create it here. Additionally, when creating the collection, we'll create a [payload index](https://qdrant.tech/documentation/concepts/indexing/#payload-index), which is required for a particular type of Qdrant requests we will use later.\n* Next, import all (dataset) images from Google Storage but keep only non-tomato-related ones (for anomaly detection testing).\n* Create (per batch) embeddings for all imported images using the Voyage AI multimodal embeddings API.\n* Finally, upload the resulting embeddings and image descriptors to Qdrant via batch uploading."
  },
  "typeVersion": 1
}

================ Node #3213 ================
{
  "id": "0233d3d0-bbdf-4d5b-a366-53cbfa4b6f9c",
  "name": "Sticky Note10",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    -860,
    360
  ],
  "parameters": {
    "color": 4,
    "width": 540,
    "height": 420,
    "content": "### For anomaly detection\n**1. This is the first pipeline to upload (crops) dataset to Qdrant's collection.**\n2. The second pipeline is to set up cluster (class) centres in this Qdrant collection & cluster (class) threshold scores.\n3. The third is the anomaly detection tool, which takes any image as input and uses all preparatory work done with Qdrant (crops) collection.\n\n### For KNN (k nearest neighbours) classification\n**1. This is the first pipeline to upload (lands) dataset to Qdrant's collection.**\n2. The second is the KNN classifier tool, which takes any image as input and classifies it based on queries to the Qdrant (lands) collection.\n\n### To recreate both\nYou'll have to upload [crops](https://www.kaggle.com/datasets/mdwaquarazam/agricultural-crops-image-classification) and [lands](https://www.kaggle.com/datasets/apollo2506/landuse-scene-classification) datasets from Kaggle to your own Google Storage bucket, and re-create APIs/connections to [Qdrant Cloud](https://qdrant.tech/documentation/quickstart-cloud/) (you can use **Free Tier** cluster), Voyage AI API & Google Cloud Storage\n\n**In general, pipelines are adaptable to any dataset of images**\n"
  },
  "typeVersion": 1
}

================ Node #3214 ================
{
  "id": "bae5d407-9210-4bd0-99a3-3637ee893065",
  "name": "When clicking \u2018Test workflow\u2019",
  "type": "n8n-nodes-base.manualTrigger",
  "position": [
    -1440,
    -280
  ],
  "parameters": {},
  "typeVersion": 1
}

================ Node #3215 ================
{
  "id": "c5a14c8e-4aeb-4a4e-b202-f88e837b6efb",
  "name": "Get Variables",
  "type": "n8n-nodes-base.set",
  "position": [
    -200,
    -180
  ],
  "parameters": {
    "options": {},
    "assignments": {
      "assignments": [
        {
          "id": "b455afe0-2311-4d3f-8751-269624d76cf1",
          "name": "coords",
          "type": "array",
          "value": "={{ $json.candidates[0].content.parts[0].text.parseJson() }}"
        },
        {
          "id": "92f09465-9a0b-443c-aa72-6d208e4df39c",
          "name": "width",
          "type": "string",
          "value": "={{ $('Get Image Info').item.json.size.width }}"
        },
        {
          "id": "da98ce2a-4600-46a6-b4cb-159ea515cb50",
          "name": "height",
          "type": "string",
          "value": "={{ $('Get Image Info').item.json.size.height }}"
        }
      ]
    }
  },
  "typeVersion": 3.4
}

================ Node #3216 ================
{
  "id": "f24017c9-05bc-4f75-a18c-29efe99bfe0e",
  "name": "Get Test Image",
  "type": "n8n-nodes-base.httpRequest",
  "position": [
    -1260,
    -280
  ],
  "parameters": {
    "url": "https://www.stonhambarns.co.uk/wp-content/uploads/jennys-ark-petting-zoo-for-website-6.jpg",
    "options": {}
  },
  "typeVersion": 4.2
}

================ Node #3217 ================
{
  "id": "c0f6a9f7-ba65-48a3-8752-ce5d80fe33cf",
  "name": "Gemini 2.0 Object Detection",
  "type": "n8n-nodes-base.httpRequest",
  "position": [
    -680,
    -180
  ],
  "parameters": {
    "url": "https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash-exp:generateContent",
    "method": "POST",
    "options": {},
    "jsonBody": "={{\n{\n \"contents\": [{\n \"parts\":[\n {\"text\": \"I want to see all bounding boxes of rabbits in this image.\"},\n {\n \"inline_data\": {\n \"mime_type\":\"image/jpeg\",\n \"data\": $input.item.binary.data.data\n }\n }\n ]\n }],\n \"generationConfig\": {\n \"response_mime_type\": \"application/json\",\n \"response_schema\": {\n \"type\": \"ARRAY\",\n \"items\": {\n \"type\": \"OBJECT\",\n \"properties\": {\n \"box_2d\": {\"type\":\"ARRAY\", \"items\": { \"type\": \"NUMBER\" } },\n \"label\": { \"type\": \"STRING\"}\n }\n }\n }\n }\n}\n}}",
    "sendBody": true,
    "specifyBody": "json",
    "authentication": "predefinedCredentialType",
    "nodeCredentialType": "googlePalmApi"
  },
  "credentials": {
    "googlePalmApi": {
      "id": "dSxo6ns5wn658r8N",
      "name": "Google Gemini(PaLM) Api account"
    }
  },
  "typeVersion": 4.2
}

================ Node #3218 ================
{
  "id": "edbc1152-4642-4656-9a3a-308dae42bac6",
  "name": "Scale Normalised Coords",
  "type": "n8n-nodes-base.code",
  "position": [
    -20,
    -180
  ],
  "parameters": {
    "jsCode": "const { coords, width, height } = $input.first().json;\n\nconst scale = 1000;\nconst scaleCoordX = (val) => (val * width) / scale;\nconst scaleCoordY = (val) => (val * height) / scale;\n \nconst normalisedOutput = coords\n .filter(coord => coord.box_2d.length === 4)\n .map(coord => {\n return {\n xmin: coord.box_2d[1] ? scaleCoordX(coord.box_2d[1]) : coord.box_2d[1],\n xmax: coord.box_2d[3] ? scaleCoordX(coord.box_2d[3]) : coord.box_2d[3],\n ymin: coord.box_2d[0] ? scaleCoordY(coord.box_2d[0]) : coord.box_2d[0],\n ymax: coord.box_2d[2] ? scaleCoordY(coord.box_2d[2]) : coord.box_2d[2],\n }\n });\n\nreturn {\n json: {\n coords: normalisedOutput\n },\n binary: $('Get Test Image').first().binary\n}"
  },
  "typeVersion": 2
}

================ Node #3219 ================
{
  "id": "e0380611-ac7d-48d8-8eeb-35de35dbe56a",
  "name": "Draw Bounding Boxes",
  "type": "n8n-nodes-base.editImage",
  "position": [
    400,
    -180
  ],
  "parameters": {
    "options": {},
    "operation": "multiStep",
    "operations": {
      "operations": [
        {
          "color": "#ff00f277",
          "operation": "draw",
          "endPositionX": "={{ $json.coords[0].xmax }}",
          "endPositionY": "={{ $json.coords[0].ymax }}",
          "startPositionX": "={{ $json.coords[0].xmin }}",
          "startPositionY": "={{ $json.coords[0].ymin }}"
        },
        {
          "color": "#ff00f277",
          "operation": "draw",
          "endPositionX": "={{ $json.coords[1].xmax }}",
          "endPositionY": "={{ $json.coords[1].ymax }}",
          "startPositionX": "={{ $json.coords[1].xmin }}",
          "startPositionY": "={{ $json.coords[1].ymin }}"
        },
        {
          "color": "#ff00f277",
          "operation": "draw",
          "endPositionX": "={{ $json.coords[2].xmax }}",
          "endPositionY": "={{ $json.coords[2].ymax }}",
          "startPositionX": "={{ $json.coords[2].xmin }}",
          "startPositionY": "={{ $json.coords[2].ymin }}"
        },
        {
          "color": "#ff00f277",
          "operation": "draw",
          "endPositionX": "={{ $json.coords[3].xmax }}",
          "endPositionY": "={{ $json.coords[3].ymax }}",
          "startPositionX": "={{ $json.coords[3].xmin }}",
          "startPositionY": "={{ $json.coords[3].ymin }}"
        },
        {
          "color": "#ff00f277",
          "operation": "draw",
          "endPositionX": "={{ $json.coords[4].xmax }}",
          "endPositionY": "={{ $json.coords[4].ymax }}",
          "startPositionX": "={{ $json.coords[4].xmin }}",
          "startPositionY": "={{ $json.coords[4].ymin }}"
        },
        {
          "color": "#ff00f277",
          "operation": "draw",
          "cornerRadius": "=0",
          "endPositionX": "={{ $json.coords[5].xmax }}",
          "endPositionY": "={{ $json.coords[5].ymax }}",
          "startPositionX": "={{ $json.coords[5].xmin }}",
          "startPositionY": "={{ $json.coords[5].ymin }}"
        }
      ]
    }
  },
  "typeVersion": 1
}

================ Node #3220 ================
{
  "id": "52daac1b-5ba3-4302-b47b-df3f410b40fc",
  "name": "Get Image Info",
  "type": "n8n-nodes-base.editImage",
  "position": [
    -1080,
    -280
  ],
  "parameters": {
    "operation": "information"
  },
  "typeVersion": 1
}

================ Node #3221 ================
{
  "id": "0d2ab96a-3323-472d-82ff-2af5e7d815a1",
  "name": "Sticky Note",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    740,
    -460
  ],
  "parameters": {
    "width": 440,
    "height": 380,
    "content": "Fig 1. Output of Object Detection\n![](https://res.cloudinary.com/daglih2g8/image/upload/f_auto,q_auto/v1/n8n-workflows/download_1_qmqyyo#full-width)"
  },
  "typeVersion": 1
}

================ Node #3222 ================
{
  "id": "c1806400-57da-4ef2-a50d-6ed211d5df29",
  "name": "Sticky Note1",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    -1520,
    -480
  ],
  "parameters": {
    "color": 7,
    "width": 600,
    "height": 420,
    "content": "## 1. Download Test Image\n[Read more about the HTTP node](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.httprequest)\n\nAny compatible image will do ([see docs](https://ai.google.dev/gemini-api/docs/vision?lang=rest#technical-details-image)) but best if it isn't too busy or the subjects too obscure. Most importantly, you are able to retrieve the width and height as this is required for a later step."
  },
  "typeVersion": 1
}

================ Node #3223 ================
{
  "id": "3ae12a7c-a20f-4087-868e-b118cc09fa9a",
  "name": "Sticky Note2",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    -900,
    -480
  ],
  "parameters": {
    "color": 7,
    "width": 560,
    "height": 540,
    "content": "## 2. Use Prompt-Based Object Detection\n[Read more about the HTTP node](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.httprequest)\n\nWe've had generalised object detection before ([see my other template using ResNet](https://n8n.io/workflows/2331-build-your-own-image-search-using-ai-object-detection-cdn-and-elasticsearch/)) but being able to prompt for what you're looking for is a very exciting proposition! Not only could this reduce the effort in post-detection filtering but also introduce contextual use-cases such as searching by \"emotion\", \"locality\", \"anomolies\" and many more!\n\nI found the the output json schema of `{ \"box_2d\": { \"type\": \"array\", ... } }` works best for Gemini to return coordinates. "
  },
  "typeVersion": 1
}

================ Node #3224 ================
{
  "id": "35673272-7207-41d1-985e-08032355846e",
  "name": "Sticky Note3",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    -320,
    -400
  ],
  "parameters": {
    "color": 7,
    "width": 520,
    "height": 440,
    "content": "## 3. Scale Coords to Fit Original Image\n[Read more about the Code node](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.code/)\n\nAccording to the Gemini 2.0 overview on [how it calculates bounding boxes](https://ai.google.dev/gemini-api/docs/models/gemini-v2?_gl=1*187cb6v*_up*MQ..*_ga*MTU1ODkzMDc0Mi4xNzM0NDM0NDg2*_ga_P1DBVKWT6V*MTczNDQzNDQ4Ni4xLjAuMTczNDQzNDQ4Ni4wLjAuMjEzNzc5MjU0Ng..#bounding-box), we'll have to rescale the coordinate values as they are normalised to a 0-1000 range. Nothing a little code node can't help with!"
  },
  "typeVersion": 1
}

================ Node #3225 ================
{
  "id": "d3d4470d-0fe1-47fd-a892-10a19b6a6ecc",
  "name": "Sticky Note4",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    -660,
    80
  ],
  "parameters": {
    "color": 5,
    "width": 340,
    "height": 100,
    "content": "### Q. Why not use the Basic LLM node?\nAt time of writing, Langchain version does not recognise Gemini 2.0 to be a multimodal model."
  },
  "typeVersion": 1
}

================ Node #3226 ================
{
  "id": "5b2c1eff-6329-4d9a-9d3d-3a48fb3bd753",
  "name": "Sticky Note5",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    220,
    -400
  ],
  "parameters": {
    "color": 7,
    "width": 500,
    "height": 440,
    "content": "## 4. Draw!\n[Read more about the Edit Image node](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.editimage/)\n\nFinally for this demonstration, we can use the \"Edit Image\" node to draw the bounding boxes on top of the original image. In my test run, I can see Gemini did miss out one of the bunnies but seeing how this is the experimental version we're playing with, it's pretty good to see it doesn't do too bad of a job."
  },
  "typeVersion": 1
}

================ Node #3227 ================
{
  "id": "965d791b-a183-46b0-b2a6-dd961d630c13",
  "name": "Sticky Note6",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    -1960,
    -740
  ],
  "parameters": {
    "width": 420,
    "height": 680,
    "content": "## Try it out!\n### This n8n template demonstrates how to use Gemini 2.0's new Bounding Box detection capabilities your workflows.\n\nThe key difference being this enables prompt-based object detection for images which is pretty powerful for things like contextual search over an image. eg. \"Put a bounding box around all adults with children in this image\" or \"Put a bounding box around cars parked out of bounds of a parking space\".\n\n## How it works\n* An image is downloaded via the HTTP node and an \"Edit Image\" node is used to extract the file's width and height.\n* The image is then given to the Gemini 2.0 API to parse and return coordinates of the bounding box of the requested subjects. In this demo, we've asked for the AI to identify all bunnies.\n* The coordinates are then rescaled with the original image's width and height to correctl align them.\n* Finally to measure the accuracy of the object detection, we use the \"Edit Image\" node to draw the bounding boxes onto the original image.\n\n\n### Need Help?\nJoin the [Discord](https://discord.com/invite/XPKeKXeB7d) or ask in the [Forum](https://community.n8n.io/)!\n\nHappy Hacking!"
  },
  "typeVersion": 1
}

================ Node #3228 ================
{
  "id": "b1d9659f-4cd0-4f87-844d-32b2af1dcf13",
  "name": "Respond to Webhook",
  "type": "n8n-nodes-base.respondToWebhook",
  "position": [
    2160,
    380
  ],
  "parameters": {
    "options": {
      "responseHeaders": {
        "entries": [
          {
            "name": "Content-Type",
            "value": "text/html; charset=UTF-8"
          }
        ]
      }
    },
    "respondWith": "text",
    "responseBody": "={{ $json.html }}"
  },
  "typeVersion": 1.1
}

================ Node #3229 ================
{
  "id": "5ca8ad3e-7702-4f07-af24-d38e94fdc4ec",
  "name": "Open AI - Using Structured Output",
  "type": "n8n-nodes-base.httpRequest",
  "position": [
    1240,
    380
  ],
  "parameters": {
    "url": "https://api.openai.com/v1/chat/completions",
    "method": "POST",
    "options": {},
    "jsonBody": "={\n \"model\": \"gpt-4o-2024-08-06\",\n \"messages\": [\n {\n \"role\": \"system\",\n \"content\": \"You are a user interface designer and copy writter. Your job is to help users visualize their website ideas. You design elegant and simple webs, with professional text. You use Tailwind framework\"\n },\n {\n \"role\": \"user\",\n \"content\": \"{{ $json.query.query }}\"\n }\n ],\n \"response_format\":\n{\n \"type\": \"json_schema\",\n \"json_schema\": {\n \"name\": \"ui\",\n \"description\": \"Dynamically generated UI\",\n \"strict\": true,\n \"schema\": {\n \"type\": \"object\",\n \"properties\": {\n \"type\": {\n \"type\": \"string\",\n \"description\": \"The type of the UI component\",\n \"enum\": [\n \"div\",\n \"span\",\n \"a\",\n \"p\",\n \"h1\",\n \"h2\",\n \"h3\",\n \"h4\",\n \"h5\",\n \"h6\",\n \"ul\",\n \"ol\",\n \"li\",\n \"img\",\n \"button\",\n \"input\",\n \"textarea\",\n \"select\",\n \"option\",\n \"label\",\n \"form\",\n \"table\",\n \"thead\",\n \"tbody\",\n \"tr\",\n \"th\",\n \"td\",\n \"nav\",\n \"header\",\n \"footer\",\n \"section\",\n \"article\",\n \"aside\",\n \"main\",\n \"figure\",\n \"figcaption\",\n \"blockquote\",\n \"q\",\n \"hr\",\n \"code\",\n \"pre\",\n \"iframe\",\n \"video\",\n \"audio\",\n \"canvas\",\n \"svg\",\n \"path\",\n \"circle\",\n \"rect\",\n \"line\",\n \"polyline\",\n \"polygon\",\n \"g\",\n \"use\",\n \"symbol\"\n]\n },\n \"label\": {\n \"type\": \"string\",\n \"description\": \"The label of the UI component, used for buttons or form fields\"\n },\n \"children\": {\n \"type\": \"array\",\n \"description\": \"Nested UI components\",\n \"items\": {\n \"$ref\": \"#\"\n }\n },\n \"attributes\": {\n \"type\": \"array\",\n \"description\": \"Arbitrary attributes for the UI component, suitable for any element using Tailwind framework\",\n \"items\": {\n \"type\": \"object\",\n \"properties\": {\n \"name\": {\n \"type\": \"string\",\n \"description\": \"The name of the attribute, for example onClick or className\"\n },\n \"value\": {\n \"type\": \"string\",\n \"description\": \"The value of the attribute using the Tailwind framework classes\"\n }\n },\n \"additionalProperties\": false,\n \"required\": [\"name\", \"value\"]\n }\n }\n },\n \"required\": [\"type\", \"label\", \"children\", \"attributes\"],\n \"additionalProperties\": false\n }\n }\n}\n}",
    "sendBody": true,
    "sendHeaders": true,
    "specifyBody": "json",
    "authentication": "predefinedCredentialType",
    "headerParameters": {
      "parameters": [
        {
          "name": "Content-Type",
          "value": "application/json"
        }
      ]
    },
    "nodeCredentialType": "openAiApi"
  },
  "credentials": {
    "openAiApi": {
      "id": "WqzqjezKh8VtxdqA",
      "name": "OpenAi account - Baptiste"
    }
  },
  "typeVersion": 4.2
}

================ Node #3230 ================
{
  "id": "24e5ca73-a3b3-4096-8c66-d84838d89b0c",
  "name": "OpenAI - JSON to HTML",
  "type": "@n8n/n8n-nodes-langchain.openAi",
  "position": [
    1420,
    380
  ],
  "parameters": {
    "modelId": {
      "__rl": true,
      "mode": "list",
      "value": "gpt-4o-mini",
      "cachedResultName": "GPT-4O-MINI"
    },
    "options": {
      "temperature": 0.2
    },
    "messages": {
      "values": [
        {
          "role": "system",
          "content": "You convert a JSON to HTML. \nThe JSON output has the following fields:\n- html: the page HTML\n- title: the page title"
        },
        {
          "content": "={{ $json.choices[0].message.content }}"
        }
      ]
    },
    "jsonOutput": true
  },
  "credentials": {
    "openAiApi": {
      "id": "WqzqjezKh8VtxdqA",
      "name": "OpenAi account - Baptiste"
    }
  },
  "typeVersion": 1.3
}

================ Node #3231 ================
{
  "id": "c50bdc84-ba59-4f30-acf7-496cee25068d",
  "name": "Format the HTML result",
  "type": "n8n-nodes-base.html",
  "position": [
    1940,
    380
  ],
  "parameters": {
    "html": "<!DOCTYPE html>\n\n<html>\n<head>\n <meta charset=\"UTF-8\" />\n <script src=\"https://cdn.tailwindcss.com\"></script>\n <title>{{ $json.message.content.title }}</title>\n</head>\n<body>\n{{ $json.message.content.html }}\n</body>\n</html>"
  },
  "typeVersion": 1.2
}

================ Node #3232 ================
{
  "id": "193093f4-b1ce-4964-ab10-c3208e343c69",
  "name": "Sticky Note",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    1134,
    62
  ],
  "parameters": {
    "color": 7,
    "width": 638,
    "height": 503,
    "content": "## Generate HTML from user query\n\n**HTTP Request node**\n- Send the user query to OpenAI, with a defined JSON response format - *using HTTP Request node as it has not yet been implemented in the OpenAI nodes*\n- The response format is inspired by the [Structured Output defined in OpenAI Introduction post](https://openai.com/index/introducing-structured-outputs-in-the-api)\n- The output is a JSON containing HTML components and attributed\n\n\n**OpenAI node**\n- Format the response from the previous node from JSON format to HTML format"
  },
  "typeVersion": 1
}

================ Node #3233 ================
{
  "id": "0371156a-211f-4d92-82b1-f14fe60d4b6b",
  "name": "Sticky Note1",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    0,
    60
  ],
  "parameters": {
    "color": 7,
    "width": 768,
    "height": 503,
    "content": "## Workflow: Dynamically generate an HTML page from a user request using OpenAI Structured Output\n\n**Overview**\n- This workflow is a experiment to build HTML pages from a user input using the new Structured Output from OpenAI.\n- The Structured Output could be used in a variety of cases. Essentially, it guarantees the output from the GPT will follow a defined structure (JSON object).\n- It uses Tailwind CSS to make it slightly nicer, but any\n\n**How it works**\n- Once active, go to the production URL and add what you'd like to build as the parameter \"query\"\n- Example: https://production_url.com?query=a%20signup%20form\n- OpenAI nodes will first output the UI as a JSON then convert it to HTML\n- Finally, the response is integrated in a HTML container and rendered to the user\n\n**Further thoughts**\n- Results are not yet amazing, it is hard to see the direct value of such an experiment\n- But it showcase the potential of the Structured Output. Being able to guarantee the output format is key to build robust AI applications."
  },
  "typeVersion": 1
}

================ Node #3234 ================
{
  "id": "06380781-5189-4d99-9ecd-d8913ce40fd5",
  "name": "Webhook",
  "type": "n8n-nodes-base.webhook",
  "position": [
    820,
    380
  ],
  "webhookId": "d962c916-6369-431a-9d80-af6e6a50fdf5",
  "parameters": {
    "path": "d962c916-6369-431a-9d80-af6e6a50fdf5",
    "options": {
      "allowedOrigins": "*"
    },
    "responseMode": "responseNode"
  },
  "typeVersion": 2
}

================ Node #3235 ================
{
  "id": "087ae6e2-b333-4a30-9010-c78050203961",
  "name": "OpenAI Assistant",
  "type": "@n8n/n8n-nodes-langchain.openAiAssistant",
  "position": [
    1340,
    460
  ],
  "parameters": {
    "text": "=## Our Previous Conversation:\n{{ $json[\"messages\"].map(m => `\nHuman: ${m.human}\nAI Assistant: ${m.ai}\n`) }}\n## Current message:\n{{ $('Chat Trigger').item.json.chatInput }}",
    "options": {},
    "assistantId": "asst_HDSAnzsp4WqY4UC1iI9auH5z"
  },
  "credentials": {
    "openAiApi": {
      "id": "VQtv7frm7eLiEDnd",
      "name": "OpenAi account 7"
    }
  },
  "typeVersion": 1
}

================ Node #3236 ================
{
  "id": "3793b10a-ebb7-42ec-8b9b-7fa3a353d9a3",
  "name": "Calculator",
  "type": "@n8n/n8n-nodes-langchain.toolCalculator",
  "position": [
    1500,
    640
  ],
  "parameters": {},
  "typeVersion": 1
}

================ Node #3237 ================
{
  "id": "7bee2882-bb9e-402e-ba42-9b1ed0e1264b",
  "name": "Chat Memory Manager",
  "type": "@n8n/n8n-nodes-langchain.memoryManager",
  "position": [
    760,
    460
  ],
  "parameters": {},
  "typeVersion": 1,
  "alwaysOutputData": true
}

================ Node #3238 ================
{
  "id": "5c66e482-819e-47e7-90be-779e92364e2a",
  "name": "Chat Memory Manager1",
  "type": "@n8n/n8n-nodes-langchain.memoryManager",
  "position": [
    1720,
    460
  ],
  "parameters": {
    "mode": "insert",
    "messages": {
      "messageValues": [
        {
          "type": "user",
          "message": "={{ $('Chat Trigger').item.json.chatInput }}"
        },
        {
          "type": "ai",
          "message": "={{ $json.output }}"
        }
      ]
    }
  },
  "typeVersion": 1,
  "alwaysOutputData": true
}

================ Node #3239 ================
{
  "id": "b96bf629-bd21-4528-8988-e63c5af89fd7",
  "name": "Aggregate",
  "type": "n8n-nodes-base.aggregate",
  "position": [
    1140,
    460
  ],
  "parameters": {
    "options": {},
    "aggregate": "aggregateAllItemData",
    "destinationFieldName": "messages"
  },
  "typeVersion": 1,
  "alwaysOutputData": true
}

================ Node #3240 ================
{
  "id": "95001be1-f046-47e3-a58c-25bff170ba06",
  "name": "Edit Fields",
  "type": "n8n-nodes-base.set",
  "position": [
    2320,
    460
  ],
  "parameters": {
    "fields": {
      "values": [
        {
          "name": "output",
          "stringValue": "={{ $('OpenAI Assistant').item.json.output }}"
        }
      ]
    },
    "options": {}
  },
  "typeVersion": 3.2
}

================ Node #3241 ================
{
  "id": "4ea04793-c7fb-4b81-abf7-49590aa76ca7",
  "name": "Limit",
  "type": "n8n-nodes-base.limit",
  "position": [
    2100,
    460
  ],
  "parameters": {},
  "typeVersion": 1
}

================ Node #3242 ================
{
  "id": "16921f74-d420-445a-9e09-19a6116a3267",
  "name": "Chat Trigger",
  "type": "@n8n/n8n-nodes-langchain.chatTrigger",
  "position": [
    460,
    460
  ],
  "webhookId": "1f83e8ac-d465-454a-8327-cef7f0149cb1",
  "parameters": {
    "public": true,
    "options": {
      "loadPreviousSession": "memory"
    }
  },
  "typeVersion": 1
}

================ Node #3243 ================
{
  "id": "c0826494-779a-4c2d-93c9-746150ac9482",
  "name": "Sticky Note",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    740,
    400
  ],
  "parameters": {
    "color": 7,
    "width": 514.8706020514577,
    "height": 196.64941360686112,
    "content": "Read contents of the chat from memory"
  },
  "typeVersion": 1
}

================ Node #3244 ================
{
  "id": "4ce4594d-070a-4985-9c5d-fcd4ebc4a627",
  "name": "Sticky Note1",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    1320,
    400
  ],
  "parameters": {
    "color": 7,
    "width": 298.02823821086326,
    "height": 196.64941360686112,
    "content": "Call the assistant, passing in the previous chat messages"
  },
  "typeVersion": 1
}

================ Node #3245 ================
{
  "id": "49885b3b-de77-4c02-a35e-d188fee38831",
  "name": "Sticky Note2",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    1700,
    400
  ],
  "parameters": {
    "color": 7,
    "width": 298.02823821086326,
    "height": 196.64941360686112,
    "content": "Add the latest chat messages to the memory"
  },
  "typeVersion": 1
}

================ Node #3246 ================
{
  "id": "f45e8589-d61b-440a-ae89-31ded2738ef7",
  "name": "Sticky Note3",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    2080,
    400
  ],
  "parameters": {
    "color": 7,
    "width": 356.0564764217267,
    "height": 196.64941360686112,
    "content": "Return the model output"
  },
  "typeVersion": 1
}

================ Node #3247 ================
{
  "id": "3b72a676-aaa2-472a-b055-1fed03f52101",
  "name": "Sticky Note4",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    360,
    640
  ],
  "parameters": {
    "height": 300.48941882630095,
    "content": "## Try me out\n1. In the OpenAI Assistant node, make sure your OpenAI credentials are set and choose an assistant to use (you'll need to create one if you don't have one already)\n2. Click the 'Chat' button below\n\n - In the first message, tell the AI what your name is\n - In a second message, ask the AI what your name is"
  },
  "typeVersion": 1
}

================ Node #3248 ================
{
  "id": "a2250328-e4ce-4ac6-b4fe-658ab173bc28",
  "name": "Window Buffer Memory",
  "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
  "position": [
    1280,
    880
  ],
  "parameters": {
    "sessionKey": "={{ $('Chat Trigger').item.json.sessionId }}123",
    "contextWindowLength": 20
  },
  "typeVersion": 1.1
}

================ Node #3249 ================
{
  "id": "33373ccb-164e-431c-8a9a-d68668fc70be",
  "name": "Embed image",
  "type": "n8n-nodes-base.httpRequest",
  "position": [
    -140,
    -240
  ],
  "parameters": {
    "url": "https://api.voyageai.com/v1/multimodalembeddings",
    "method": "POST",
    "options": {},
    "jsonBody": "={{\n{\n \"inputs\": [\n {\n \"content\": [\n {\n \"type\": \"image_url\",\n \"image_url\": $json.imageURL\n }\n ]\n }\n ],\n \"model\": \"voyage-multimodal-3\",\n \"input_type\": \"document\"\n}\n}}",
    "sendBody": true,
    "specifyBody": "json",
    "authentication": "genericCredentialType",
    "genericAuthType": "httpHeaderAuth"
  },
  "credentials": {
    "httpHeaderAuth": {
      "id": "Vb0RNVDnIHmgnZOP",
      "name": "Voyage API"
    }
  },
  "typeVersion": 4.2
}

================ Node #3250 ================
{
  "id": "58adecfa-45c7-4928-b850-053ea6f3b1c5",
  "name": "Query Qdrant",
  "type": "n8n-nodes-base.httpRequest",
  "position": [
    440,
    -240
  ],
  "parameters": {
    "url": "={{ $json.qdrantCloudURL }}/collections/{{ $json.collectionName }}/points/query",
    "method": "POST",
    "options": {},
    "jsonBody": "={{\n{\n \"query\": $json.ImageEmbedding,\n \"using\": \"voyage\",\n \"limit\": $json.limitKNN,\n \"with_payload\": true\n}\n}}",
    "sendBody": true,
    "specifyBody": "json",
    "authentication": "predefinedCredentialType",
    "nodeCredentialType": "qdrantApi"
  },
  "credentials": {
    "qdrantApi": {
      "id": "it3j3hP9FICqhgX6",
      "name": "QdrantApi account"
    }
  },
  "typeVersion": 4.2
}

================ Node #3251 ================
{
  "id": "258026b7-2dda-4165-bfe1-c4163b9caf78",
  "name": "Majority Vote",
  "type": "n8n-nodes-base.code",
  "position": [
    840,
    -240
  ],
  "parameters": {
    "language": "python",
    "pythonCode": "from collections import Counter\n\ninput_json = _input.all()[0]\npoints = input_json['json']['result']['points']\nmajority_vote_two_most_common = Counter([point[\"payload\"][\"landscape_name\"] for point in points]).most_common(2)\n\nreturn [{\n \"json\": {\n \"result\": majority_vote_two_most_common \n }\n}]\n"
  },
  "typeVersion": 2
}

================ Node #3252 ================
{
  "id": "e83e7a0c-cb36-46d0-8908-86ee1bddf638",
  "name": "Increase limitKNN",
  "type": "n8n-nodes-base.set",
  "position": [
    1240,
    -240
  ],
  "parameters": {
    "options": {},
    "assignments": {
      "assignments": [
        {
          "id": "0b5d257b-1b27-48bc-bec2-78649bc844cc",
          "name": "limitKNN",
          "type": "number",
          "value": "={{ $('Propagate loop variables').item.json.limitKNN + 5}}"
        },
        {
          "id": "afee4bb3-f78b-4355-945d-3776e33337a4",
          "name": "ImageEmbedding",
          "type": "array",
          "value": "={{ $('Qdrant variables + embedding + KNN neigbours').first().json.ImageEmbedding }}"
        },
        {
          "id": "701ed7ba-d112-4699-a611-c0c134757a6c",
          "name": "qdrantCloudURL",
          "type": "string",
          "value": "={{ $('Qdrant variables + embedding + KNN neigbours').first().json.qdrantCloudURL }}"
        },
        {
          "id": "f5612f78-e7d8-4124-9c3a-27bd5870c9bf",
          "name": "collectionName",
          "type": "string",
          "value": "={{ $('Qdrant variables + embedding + KNN neigbours').first().json.collectionName }}"
        }
      ]
    }
  },
  "typeVersion": 3.4
}

================ Node #3253 ================
{
  "id": "8edbff53-cba6-4491-9d5e-bac7ad6db418",
  "name": "Propagate loop variables",
  "type": "n8n-nodes-base.set",
  "position": [
    640,
    -240
  ],
  "parameters": {
    "options": {},
    "assignments": {
      "assignments": [
        {
          "id": "880838bf-2be2-4f5f-9417-974b3cbee163",
          "name": "=limitKNN",
          "type": "number",
          "value": "={{ $json.result.points.length}}"
        },
        {
          "id": "5fff2bea-f644-4fd9-ad04-afbecd19a5bc",
          "name": "result",
          "type": "object",
          "value": "={{ $json.result }}"
        }
      ]
    }
  },
  "typeVersion": 3.4
}

================ Node #3254 ================
{
  "id": "6fad4cc0-f02c-429d-aa4e-0d69ebab9d65",
  "name": "Image Test URL",
  "type": "n8n-nodes-base.set",
  "position": [
    -320,
    -240
  ],
  "parameters": {
    "options": {},
    "assignments": {
      "assignments": [
        {
          "id": "46ceba40-fb25-450c-8550-d43d8b8aa94c",
          "name": "imageURL",
          "type": "string",
          "value": "={{ $json.query.imageURL }}"
        }
      ]
    }
  },
  "typeVersion": 3.4
}

================ Node #3255 ================
{
  "id": "f02e79e2-32c8-4af0-8bf9-281119b23cc0",
  "name": "Return class",
  "type": "n8n-nodes-base.set",
  "position": [
    1240,
    0
  ],
  "parameters": {
    "options": {},
    "assignments": {
      "assignments": [
        {
          "id": "bd8ca541-8758-4551-b667-1de373231364",
          "name": "class",
          "type": "string",
          "value": "={{ $json.result[0][0] }}"
        }
      ]
    }
  },
  "typeVersion": 3.4
}

================ Node #3256 ================
{
  "id": "83ca90fb-d5d5-45f4-8957-4363a4baf8ed",
  "name": "Check tie",
  "type": "n8n-nodes-base.if",
  "position": [
    1040,
    -240
  ],
  "parameters": {
    "options": {},
    "conditions": {
      "options": {
        "version": 2,
        "leftValue": "",
        "caseSensitive": true,
        "typeValidation": "strict"
      },
      "combinator": "and",
      "conditions": [
        {
          "id": "980663f6-9d7d-4e88-87b9-02030882472c",
          "operator": {
            "type": "number",
            "operation": "gt"
          },
          "leftValue": "={{ $json.result.length }}",
          "rightValue": 1
        },
        {
          "id": "9f46fdeb-0f89-4010-99af-624c1c429d6a",
          "operator": {
            "type": "number",
            "operation": "equals"
          },
          "leftValue": "={{ $json.result[0][1] }}",
          "rightValue": "={{ $json.result[1][1] }}"
        },
        {
          "id": "c59bc4fe-6821-4639-8595-fdaf4194c1e1",
          "operator": {
            "type": "number",
            "operation": "lte"
          },
          "leftValue": "={{ $('Propagate loop variables').item.json.limitKNN }}",
          "rightValue": 100
        }
      ]
    }
  },
  "typeVersion": 2.2
}

================ Node #3257 ================
{
  "id": "847ced21-4cfd-45d8-98fa-b578adc054d6",
  "name": "Qdrant variables + embedding + KNN neigbours",
  "type": "n8n-nodes-base.set",
  "position": [
    120,
    -240
  ],
  "parameters": {
    "options": {},
    "assignments": {
      "assignments": [
        {
          "id": "de66070d-5e74-414e-8af7-d094cbc26f62",
          "name": "ImageEmbedding",
          "type": "array",
          "value": "={{ $json.data[0].embedding }}"
        },
        {
          "id": "58b7384d-fd0c-44aa-9f8e-0306a99be431",
          "name": "qdrantCloudURL",
          "type": "string",
          "value": "=https://152bc6e2-832a-415c-a1aa-fb529f8baf8d.eu-central-1-0.aws.cloud.qdrant.io"
        },
        {
          "id": "e34c4d88-b102-43cc-a09e-e0553f2da23a",
          "name": "collectionName",
          "type": "string",
          "value": "=land-use"
        },
        {
          "id": "db37e18d-340b-4624-84f6-df993af866d6",
          "name": "limitKNN",
          "type": "number",
          "value": "=10"
        }
      ]
    }
  },
  "typeVersion": 3.4
}

================ Node #3258 ================
{
  "id": "d1bc4edc-37d2-43ac-8d8b-560453e68d1f",
  "name": "Sticky Note",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    -940,
    -120
  ],
  "parameters": {
    "color": 6,
    "width": 320,
    "height": 540,
    "content": "Here we're classifying existing types of satellite imagery of land types:\n- 'agricultural',\n- 'airplane',\n- 'baseballdiamond',\n- 'beach',\n- 'buildings',\n- 'chaparral',\n- 'denseresidential',\n- 'forest',\n- 'freeway',\n- 'golfcourse',\n- 'harbor',\n- 'intersection',\n- 'mediumresidential',\n- 'mobilehomepark',\n- 'overpass',\n- 'parkinglot',\n- 'river',\n- 'runway',\n- 'sparseresidential',\n- 'storagetanks',\n- 'tenniscourt'\n"
  },
  "typeVersion": 1
}

================ Node #3259 ================
{
  "id": "13560a31-3c72-43b8-9635-3f9ca11f23c9",
  "name": "Sticky Note1",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    -520,
    -460
  ],
  "parameters": {
    "color": 6,
    "content": "I tested this KNN classifier on a whole `test` set of a dataset (it's not a part of the collection, only `validation` + `train` parts). Accuracy of classification on `test` is **93.24%**, no fine-tuning, no metric learning."
  },
  "typeVersion": 1
}

================ Node #3260 ================
{
  "id": "8c9dcbcb-a1ad-430f-b7dd-e19b5645b0f6",
  "name": "Execute Workflow Trigger",
  "type": "n8n-nodes-base.executeWorkflowTrigger",
  "position": [
    -520,
    -240
  ],
  "parameters": {},
  "typeVersion": 1
}

================ Node #3261 ================
{
  "id": "b36fb270-2101-45e9-bb5c-06c4e07b769c",
  "name": "Sticky Note2",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    -1080,
    -520
  ],
  "parameters": {
    "width": 460,
    "height": 380,
    "content": "## KNN classification workflow-tool\n### This n8n template takes an image URL (as anomaly detection tool does), and as output, it returns a class of the object on the image (out of land types list)\n\n* An image URL is received via the Execute Workflow Trigger, which is then sent to the Voyage.ai Multimodal Embeddings API to fetch its embedding.\n* The image's embedding vector is then used to query Qdrant, returning a set of X similar images with pre-labeled classes.\n* Majority voting is done for classes of neighbouring images.\n* A loop is used to resolve scenarios where there is a tie in Majority Voting (for example, we have 5 \"forest\" and 5 \"beach\"), and we increase the number of neighbours to retrieve.\n* When the loop finally resolves, the identified class is returned to the calling workflow."
  },
  "typeVersion": 1
}

================ Node #3262 ================
{
  "id": "51ece7fc-fd85-4d20-ae26-4df2d3893251",
  "name": "Sticky Note3",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    120,
    -40
  ],
  "parameters": {
    "height": 200,
    "content": "Variables define another Qdrant's collection with landscapes (uploaded similarly as the crops collection, don't forget to switch it with your data) + amount of neighbours **limitKNN** in the database we'll use for an input image classification."
  },
  "typeVersion": 1
}

================ Node #3263 ================
{
  "id": "7aad5904-eb0b-4389-9d47-cc91780737ba",
  "name": "Sticky Note4",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    -180,
    -60
  ],
  "parameters": {
    "height": 80,
    "content": "Similarly to anomaly detection tool, we're embedding input image with the Voyage model"
  },
  "typeVersion": 1
}

================ Node #3264 ================
{
  "id": "d3702707-ee4a-481f-82ca-d9386f5b7c8a",
  "name": "Sticky Note5",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    440,
    -500
  ],
  "parameters": {
    "width": 740,
    "height": 200,
    "content": "## Tie loop\nHere we're [querying](https://api.qdrant.tech/api-reference/search/query-points) Qdrant, getting **limitKNN** nearest neighbours to our image <*Query Qdrant node*>, parsing their classes from payloads (images were pre-labeled & uploaded with their labels to Qdrant) & calculating the most frequent class name <*Majority Vote node*>. If there is a tie <*check tie node*> in 2 most common classes, for example, we have 5 \"forest\" and 5 \"harbor\", we repeat the procedure with the number of neighbours increased by 5 <*propagate loop variables node* and *increase limitKNN node*>.\nIf there is no tie, or we have already checked 100 neighbours, we exit the loop <*check tie node*> and return the class-answer."
  },
  "typeVersion": 1
}

================ Node #3265 ================
{
  "id": "d26911bb-0442-4adc-8511-7cec2d232393",
  "name": "Sticky Note6",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    1240,
    160
  ],
  "parameters": {
    "height": 80,
    "content": "Here, we extract the name of the input image class decided by the Majority Vote\n"
  },
  "typeVersion": 1
}

================ Node #3266 ================
{
  "id": "84ffc859-1d5c-4063-9051-3587f30a0017",
  "name": "Sticky Note10",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    -520,
    80
  ],
  "parameters": {
    "color": 4,
    "width": 540,
    "height": 260,
    "content": "### KNN (k nearest neighbours) classification\n1. The first pipeline is uploading (lands) dataset to Qdrant's collection.\n2. **This is the KNN classifier tool, which takes any image as input and classifies it based on queries to the Qdrant (lands) collection.**\n\n### To recreate it\nYou'll have to upload [lands](https://www.kaggle.com/datasets/apollo2506/landuse-scene-classification) dataset from Kaggle to your own Google Storage bucket, and re-create APIs/connections to [Qdrant Cloud](https://qdrant.tech/documentation/quickstart-cloud/) (you can use **Free Tier** cluster), Voyage AI API & Google Cloud Storage\n\n**In general, pipelines are adaptable to any dataset of images**\n"
  },
  "typeVersion": 1
}

================ Node #3267 ================
{
  "id": "edaa871e-2b79-400e-8328-333d250bfdd2",
  "name": "When clicking \u2018Test workflow\u2019",
  "type": "n8n-nodes-base.manualTrigger",
  "position": [
    -660,
    -220
  ],
  "parameters": {},
  "typeVersion": 1
}

================ Node #3268 ================
{
  "id": "ebd964de-faa4-4dc0-9245-cc9154b9ce02",
  "name": "Total Points in Collection",
  "type": "n8n-nodes-base.httpRequest",
  "position": [
    180,
    -220
  ],
  "parameters": {
    "url": "={{ $('Qdrant cluster variables').item.json.qdrantCloudURL }}/collections/{{ $('Qdrant cluster variables').item.json.collectionName }}/points/count",
    "method": "POST",
    "options": {},
    "jsonBody": "={\n \"exact\": true\n}",
    "sendBody": true,
    "specifyBody": "json",
    "authentication": "predefinedCredentialType",
    "nodeCredentialType": "qdrantApi"
  },
  "credentials": {
    "qdrantApi": {
      "id": "it3j3hP9FICqhgX6",
      "name": "QdrantApi account"
    }
  },
  "typeVersion": 4.2
}

================ Node #3269 ================
{
  "id": "b51f6344-d090-4341-a908-581b78664b07",
  "name": "Cluster Distance Matrix",
  "type": "n8n-nodes-base.httpRequest",
  "position": [
    1200,
    -360
  ],
  "parameters": {
    "url": "={{ $('Qdrant cluster variables').first().json.qdrantCloudURL }}/collections/{{ $('Qdrant cluster variables').first().json.collectionName }}/points/search/matrix/offsets",
    "method": "POST",
    "options": {},
    "jsonBody": "={{\n{\n \"sample\": $json.maxClusterSize,\n \"limit\": $json.maxClusterSize,\n \"using\": \"voyage\",\n \"filter\": {\n \"must\": {\n \"key\": \"crop_name\",\n \"match\": { \"value\": $json.cropName }\n }\n }\n}\n}}",
    "sendBody": true,
    "specifyBody": "json",
    "authentication": "predefinedCredentialType",
    "nodeCredentialType": "qdrantApi"
  },
  "credentials": {
    "qdrantApi": {
      "id": "it3j3hP9FICqhgX6",
      "name": "QdrantApi account"
    }
  },
  "typeVersion": 4.2
}

================ Node #3270 ================
{
  "id": "bebe5249-b138-4d7a-84b8-51eaed4331b8",
  "name": "Scipy Sparse Matrix",
  "type": "n8n-nodes-base.code",
  "position": [
    1460,
    -360
  ],
  "parameters": {
    "mode": "runOnceForEachItem",
    "language": "python",
    "pythonCode": "from scipy.sparse import coo_array\n\ncluster = _input.item.json['result']\n\nscores = list(cluster['scores'])\noffsets_row = list(cluster['offsets_row'])\noffsets_col = list(cluster['offsets_col'])\n\ncluster_matrix = coo_array((scores, (offsets_row, offsets_col)))\nthe_most_similar_to_others = cluster_matrix.sum(axis=1).argmax()\n\nreturn {\n \"json\": {\n \"medoid_id\": cluster[\"ids\"][the_most_similar_to_others]\n }\n}\n"
  },
  "typeVersion": 2
}

================ Node #3271 ================
{
  "id": "006c38bb-a271-40e1-9c5b-5a0a29ea96de",
  "name": "Set medoid id",
  "type": "n8n-nodes-base.httpRequest",
  "position": [
    2000,
    -680
  ],
  "parameters": {
    "url": "={{ $('Qdrant cluster variables').first().json.qdrantCloudURL }}/collections/{{ $('Qdrant cluster variables').first().json.collectionName }}/points/payload",
    "method": "POST",
    "options": {},
    "jsonBody": "={{\n{\n \"payload\": {\"is_medoid\": true},\n \"points\": [$json.medoid_id]\n}\n}}",
    "sendBody": true,
    "specifyBody": "json",
    "authentication": "predefinedCredentialType",
    "nodeCredentialType": "qdrantApi"
  },
  "credentials": {
    "qdrantApi": {
      "id": "it3j3hP9FICqhgX6",
      "name": "QdrantApi account"
    }
  },
  "typeVersion": 4.2
}

================ Node #3272 ================
{
  "id": "aeeccfc5-67bf-4047-8a5a-8830e4fc87e8",
  "name": "Get Medoid Vector",
  "type": "n8n-nodes-base.httpRequest",
  "position": [
    2000,
    -360
  ],
  "parameters": {
    "url": "={{ $('Qdrant cluster variables').first().json.qdrantCloudURL }}/collections/{{ $('Qdrant cluster variables').first().json.collectionName }}/points",
    "method": "POST",
    "options": {},
    "jsonBody": "={{\n{\n \"ids\": [$json.medoid_id],\n \"with_vector\": true,\n \"with_payload\": true\n}\n}}",
    "sendBody": true,
    "specifyBody": "json",
    "authentication": "predefinedCredentialType",
    "nodeCredentialType": "qdrantApi"
  },
  "credentials": {
    "qdrantApi": {
      "id": "it3j3hP9FICqhgX6",
      "name": "QdrantApi account"
    }
  },
  "typeVersion": 4.2
}

================ Node #3273 ================
{
  "id": "11fe54d5-9dc8-49ce-9e3f-1103ace0a3d5",
  "name": "Prepare for Searching Threshold",
  "type": "n8n-nodes-base.set",
  "position": [
    2240,
    -360
  ],
  "parameters": {
    "options": {},
    "assignments": {
      "assignments": [
        {
          "id": "6faa5949-968c-42bf-8ce8-cf2403566eba",
          "name": "oppositeOfCenterVector",
          "type": "array",
          "value": "={{ $json.result[0].vector.voyage.map(value => value * -1)}}"
        },
        {
          "id": "84eb42be-2ea5-4a76-9c76-f21a962360a3",
          "name": "cropName",
          "type": "string",
          "value": "={{ $json.result[0].payload.crop_name }}"
        },
        {
          "id": "b68d2e42-0dde-4875-bb59-056f29b6ac0a",
          "name": "centerId",
          "type": "string",
          "value": "={{ $json.result[0].id }}"
        }
      ]
    }
  },
  "typeVersion": 3.4
}

================ Node #3274 ================
{
  "id": "4051b488-2e2e-4d33-9cc9-e1403c9173ed",
  "name": "Searching Score",
  "type": "n8n-nodes-base.httpRequest",
  "position": [
    2500,
    -360
  ],
  "parameters": {
    "url": "={{ $('Qdrant cluster variables').first().json.qdrantCloudURL }}/collections/{{ $('Qdrant cluster variables').first().json.collectionName }}/points/query",
    "method": "POST",
    "options": {},
    "jsonBody": "={{\n{\n \"query\": $json.oppositeOfCenterVector,\n \"using\": \"voyage\",\n \"exact\": true,\n \"filter\": {\n \"must\": [\n {\n \"key\": \"crop_name\",\n \"match\": {\"value\": $json.cropName }\n }\n ]\n },\n \"limit\": $('Medoids Variables').first().json.furthestFromCenter,\n \"with_payload\": true\n}\n}}",
    "sendBody": true,
    "specifyBody": "json",
    "authentication": "predefinedCredentialType",
    "nodeCredentialType": "qdrantApi"
  },
  "credentials": {
    "qdrantApi": {
      "id": "it3j3hP9FICqhgX6",
      "name": "QdrantApi account"
    }
  },
  "typeVersion": 4.2
}

================ Node #3275 ================
{
  "id": "1c6cb6ee-ce3a-4d1a-b1b4-1e59e9a8f5b6",
  "name": "Threshold Score",
  "type": "n8n-nodes-base.set",
  "position": [
    2760,
    -360
  ],
  "parameters": {
    "options": {},
    "assignments": {
      "assignments": [
        {
          "id": "579a2ee4-0ab2-4fde-909a-01166624c9d8",
          "name": "thresholdScore",
          "type": "number",
          "value": "={{ $json.result.points.last().score * -1 }}"
        },
        {
          "id": "11eab775-f709-40a9-b0fe-d1059b67de05",
          "name": "centerId",
          "type": "string",
          "value": "={{ $('Prepare for Searching Threshold').item.json.centerId }}"
        }
      ]
    }
  },
  "typeVersion": 3.4
}

================ Node #3276 ================
{
  "id": "1bab1b9e-7b80-4ef3-8e3d-be4874792e58",
  "name": "Set medoid threshold score",
  "type": "n8n-nodes-base.httpRequest",
  "position": [
    2940,
    -360
  ],
  "parameters": {
    "url": "={{ $('Qdrant cluster variables').first().json.qdrantCloudURL }}/collections/{{ $('Qdrant cluster variables').first().json.collectionName }}/points/payload",
    "method": "POST",
    "options": {},
    "jsonBody": "={{\n{\n \"payload\": {\"is_medoid_cluster_threshold\": $json.thresholdScore },\n \"points\": [$json.centerId]\n}\n}}",
    "sendBody": true,
    "specifyBody": "json",
    "authentication": "predefinedCredentialType",
    "nodeCredentialType": "qdrantApi"
  },
  "credentials": {
    "qdrantApi": {
      "id": "it3j3hP9FICqhgX6",
      "name": "QdrantApi account"
    }
  },
  "typeVersion": 4.2
}

================ Node #3277 ================
{
  "id": "cd5af197-4d79-49c2-aba6-a20571bd5c2e",
  "name": "Split Out1",
  "type": "n8n-nodes-base.splitOut",
  "position": [
    860,
    80
  ],
  "parameters": {
    "options": {
      "destinationFieldName": ""
    },
    "fieldToSplitOut": "['text anchors']"
  },
  "typeVersion": 1
}

================ Node #3278 ================
{
  "id": "956c126c-8bd6-4390-8704-3f0a5a2ce479",
  "name": "Merge",
  "type": "n8n-nodes-base.merge",
  "position": [
    1200,
    -80
  ],
  "parameters": {
    "mode": "combine",
    "options": {},
    "fieldsToMatchString": "cropName"
  },
  "typeVersion": 3
}

================ Node #3279 ================
{
  "id": "54a5d467-4985-49b5-9f13-e6563acf08b3",
  "name": "Textual (visual) crop descriptions",
  "type": "n8n-nodes-base.set",
  "position": [
    380,
    80
  ],
  "parameters": {
    "mode": "raw",
    "options": {},
    "jsonOutput": "{\"text anchors\": [{\"cropName\": \"pearl_millet(bajra)\", \"cropDescription\": \"pearl_millet(bajra) - Tall stalks with cylindrical, spiked green grain heads.\"},\n{\"cropName\": \"tobacco-plant\", \"cropDescription\": \"tobacco-plant - Broad, oval leaves and small tubular flowers, typically pink or white.\"},\n{\"cropName\": \"cherry\", \"cropDescription\": \"cherry - Small, glossy red fruits on a medium-sized tree with slender branches and serrated leaves.\"},\n{\"cropName\": \"cotton\", \"cropDescription\": \"cotton - Bushy plant with fluffy white fiber-filled pods and lobed green leaves.\"},\n{\"cropName\": \"banana\", \"cropDescription\": \"banana - Tall herbaceous plant with broad, elongated green leaves and hanging bunches of yellow fruits.\"},\n{\"cropName\": \"cucumber\", \"cropDescription\": \"cucumber - Creeping vine with yellow flowers and elongated green cylindrical fruits.\"},\n{\"cropName\": \"maize\", \"cropDescription\": \"maize - Tall stalks with broad leaves, tassels at the top, and ears of corn sheathed in husks.\"},\n{\"cropName\": \"wheat\", \"cropDescription\": \"wheat - Slender, upright stalks with narrow green leaves and golden, spiky grain heads.\"},\n{\"cropName\": \"clove\", \"cropDescription\": \"clove - Small tree with oval green leaves and clusters of unopened reddish flower buds.\"},\n{\"cropName\": \"jowar\", \"cropDescription\": \"jowar - Tall grass-like plant with broad leaves and round, compact grain clusters at the top.\"},\n{\"cropName\": \"olive-tree\", \"cropDescription\": \"olive-tree - Medium-sized tree with silvery-green leaves and small oval green or black fruits.\"},\n{\"cropName\": \"soyabean\", \"cropDescription\": \"soyabean - Bushy plant with trifoliate green leaves and small pods containing rounded beans.\"},\n{\"cropName\": \"coffee-plant\", \"cropDescription\": \"coffee-plant - Shrub with shiny dark green leaves and clusters of small white flowers, followed by red berries.\"},\n{\"cropName\": \"rice\", \"cropDescription\": \"rice - Short, water-loving grass with narrow green leaves and drooping golden grain heads.\"},\n{\"cropName\": \"lemon\", \"cropDescription\": \"lemon - Small tree with glossy green leaves and oval yellow fruits.\"},\n{\"cropName\": \"mustard-oil\", \"cropDescription\": \"mustard-oil - Small herbaceous plant with yellow flowers and slender seed pods.\"},\n{\"cropName\": \"vigna-radiati(mung)\", \"cropDescription\": \"vigna-radiati(mung) - Low-growing plant with trifoliate leaves and small green pods containing mung beans.\"},\n{\"cropName\": \"coconut\", \"cropDescription\": \"coconut - Tall palm tree with feathery leaves and large round fibrous fruits.\"},\n{\"cropName\": \"gram\", \"cropDescription\": \"gram - Low bushy plant with feathery leaves and small pods containing round seeds.\"},\n{\"cropName\": \"pineapple\", \"cropDescription\": \"pineapple - Low plant with spiky, sword-shaped leaves and large, spiky golden fruits.\"},\n{\"cropName\": \"sugarcane\", \"cropDescription\": \"sugarcane - Tall, jointed stalks with long narrow leaves and a sweet interior.\"},\n{\"cropName\": \"sunflower\", \"cropDescription\": \"sunflower - Tall plant with rough green leaves and large bright yellow flower heads.\"},\n{\"cropName\": \"chilli\", \"cropDescription\": \"chilli - Small bushy plant with slender green or red elongated fruits.\"},\n{\"cropName\": \"fox_nut(makhana)\", \"cropDescription\": \"fox_nut(makhana) - Aquatic plant with floating round leaves and spiny white seeds.\"},\n{\"cropName\": \"jute\", \"cropDescription\": \"jute - Tall plant with long, straight stalks and narrow green leaves.\"},\n{\"cropName\": \"papaya\", \"cropDescription\": \"papaya - Medium-sized tree with hollow trunk, large lobed leaves, and yellow-orange pear-shaped fruits.\"},\n{\"cropName\": \"tea\", \"cropDescription\": \"tea - Small shrub with glossy dark green leaves and small white flowers.\"},\n{\"cropName\": \"cardamom\", \"cropDescription\": \"cardamom - Low tropical plant with broad leaves and clusters of small, light green pods.\"},\n{\"cropName\": \"almond\", \"cropDescription\": \"almond - Medium-sized tree with serrated leaves and oval green pods containing edible nuts.\"}]}\n"
  },
  "typeVersion": 3.4
}

================ Node #3280 ================
{
  "id": "14c25e76-8a2c-4df8-98ea-b2f31b15fd1f",
  "name": "Embed text",
  "type": "n8n-nodes-base.httpRequest",
  "position": [
    1460,
    -80
  ],
  "parameters": {
    "url": "https://api.voyageai.com/v1/multimodalembeddings",
    "method": "POST",
    "options": {},
    "jsonBody": "={{\n{\n \"inputs\": [\n {\n \"content\": [\n {\n \"type\": \"text\",\n \"text\": $json.cropDescription\n }\n ]\n }\n ],\n \"model\": \"voyage-multimodal-3\",\n \"input_type\": \"query\"\n}\n}}",
    "sendBody": true,
    "specifyBody": "json",
    "authentication": "genericCredentialType",
    "genericAuthType": "httpHeaderAuth"
  },
  "credentials": {
    "httpHeaderAuth": {
      "id": "Vb0RNVDnIHmgnZOP",
      "name": "Voyage API"
    }
  },
  "typeVersion": 4.2
}

================ Node #3281 ================
{
  "id": "8763db0a-9a92-4ffd-8a40-c7db614b735f",
  "name": "Get Medoid by Text",
  "type": "n8n-nodes-base.httpRequest",
  "position": [
    1640,
    -80
  ],
  "parameters": {
    "url": "={{ $('Qdrant cluster variables').first().json.qdrantCloudURL }}/collections/{{ $('Qdrant cluster variables').first().json.collectionName }}/points/query",
    "method": "POST",
    "options": {},
    "jsonBody": "={{\n{\n \"query\": $json.data[0].embedding,\n \"using\": \"voyage\",\n \"exact\": true,\n \"filter\": {\n \"must\": [\n {\n \"key\": \"crop_name\",\n \"match\": {\"value\": $('Merge').item.json.cropName }\n }\n ]\n },\n \"limit\": 1,\n \"with_payload\": true,\n \"with_vector\": true\n}\n}}",
    "sendBody": true,
    "specifyBody": "json",
    "authentication": "predefinedCredentialType",
    "nodeCredentialType": "qdrantApi"
  },
  "credentials": {
    "qdrantApi": {
      "id": "it3j3hP9FICqhgX6",
      "name": "QdrantApi account"
    }
  },
  "typeVersion": 4.2
}

================ Node #3282 ================
{
  "id": "5c770ca2-6e1a-4c4b-80e0-dcbeeda43a0f",
  "name": "Set text medoid id",
  "type": "n8n-nodes-base.httpRequest",
  "position": [
    2000,
    160
  ],
  "parameters": {
    "url": "={{ $('Qdrant cluster variables').first().json.qdrantCloudURL }}/collections/{{ $('Qdrant cluster variables').first().json.collectionName }}/points/payload",
    "method": "POST",
    "options": {},
    "jsonBody": "={{\n{\n \"payload\": {\"is_text_anchor_medoid\": true},\n \"points\": [$json.result.points[0].id]\n}\n}}",
    "sendBody": true,
    "specifyBody": "json",
    "authentication": "predefinedCredentialType",
    "nodeCredentialType": "qdrantApi"
  },
  "credentials": {
    "qdrantApi": {
      "id": "it3j3hP9FICqhgX6",
      "name": "QdrantApi account"
    }
  },
  "typeVersion": 4.2
}

================ Node #3283 ================
{
  "id": "c08ff472-51ab-4c3d-b9c0-2170fda2ccef",
  "name": "Prepare for Searching Threshold1",
  "type": "n8n-nodes-base.set",
  "position": [
    2300,
    80
  ],
  "parameters": {
    "options": {},
    "assignments": {
      "assignments": [
        {
          "id": "6faa5949-968c-42bf-8ce8-cf2403566eba",
          "name": "oppositeOfCenterVector",
          "type": "array",
          "value": "={{ $json.result.points[0].vector.voyage.map(value => value * -1)}}"
        },
        {
          "id": "84eb42be-2ea5-4a76-9c76-f21a962360a3",
          "name": "cropName",
          "type": "string",
          "value": "={{ $json.result.points[0].payload.crop_name }}"
        },
        {
          "id": "b68d2e42-0dde-4875-bb59-056f29b6ac0a",
          "name": "centerId",
          "type": "string",
          "value": "={{ $json.result.points[0].id }}"
        }
      ]
    }
  },
  "typeVersion": 3.4
}

================ Node #3284 ================
{
  "id": "84ba4de5-aa9b-43fb-89cb-70db0b3ca334",
  "name": "Threshold Score1",
  "type": "n8n-nodes-base.set",
  "position": [
    2820,
    80
  ],
  "parameters": {
    "options": {},
    "assignments": {
      "assignments": [
        {
          "id": "579a2ee4-0ab2-4fde-909a-01166624c9d8",
          "name": "thresholdScore",
          "type": "number",
          "value": "={{ $json.result.points.last().score * -1 }}"
        },
        {
          "id": "11eab775-f709-40a9-b0fe-d1059b67de05",
          "name": "centerId",
          "type": "string",
          "value": "={{ $('Prepare for Searching Threshold1').item.json.centerId }}"
        }
      ]
    }
  },
  "typeVersion": 3.4
}

================ Node #3285 ================
{
  "id": "f490d224-38a8-4087-889d-1addb4472471",
  "name": "Searching Text Medoid Score",
  "type": "n8n-nodes-base.httpRequest",
  "position": [
    2560,
    80
  ],
  "parameters": {
    "url": "={{ $('Qdrant cluster variables').first().json.qdrantCloudURL }}/collections/{{ $('Qdrant cluster variables').first().json.collectionName }}/points/query",
    "method": "POST",
    "options": {},
    "jsonBody": "={{\n{\n \"query\": $json.oppositeOfCenterVector,\n \"using\": \"voyage\",\n \"exact\": true,\n \"filter\": {\n \"must\": [\n {\n \"key\": \"crop_name\",\n \"match\": {\"value\": $json.cropName }\n }\n ]\n },\n \"limit\": $('Text Medoids Variables').first().json.furthestFromCenter,\n \"with_payload\": true\n}\n}}",
    "sendBody": true,
    "specifyBody": "json",
    "authentication": "predefinedCredentialType",
    "nodeCredentialType": "qdrantApi"
  },
  "credentials": {
    "qdrantApi": {
      "id": "it3j3hP9FICqhgX6",
      "name": "QdrantApi account"
    }
  },
  "typeVersion": 4.2
}

================ Node #3286 ================
{
  "id": "f5035aca-1706-4c8d-bd26-49b3451ae04b",
  "name": "Medoids Variables",
  "type": "n8n-nodes-base.set",
  "position": [
    -140,
    -220
  ],
  "parameters": {
    "options": {},
    "assignments": {
      "assignments": [
        {
          "id": "5eb23ad2-aacd-468f-9a27-ef2b63e6bd08",
          "name": "furthestFromCenter",
          "type": "number",
          "value": 5
        }
      ]
    }
  },
  "typeVersion": 3.4
}

================ Node #3287 ================
{
  "id": "c9cad66d-4a76-4092-bfd6-4860493f942a",
  "name": "Text Medoids Variables",
  "type": "n8n-nodes-base.set",
  "position": [
    -140,
    80
  ],
  "parameters": {
    "options": {},
    "assignments": {
      "assignments": [
        {
          "id": "5eb23ad2-aacd-468f-9a27-ef2b63e6bd08",
          "name": "furthestFromCenter",
          "type": "number",
          "value": 1
        }
      ]
    }
  },
  "typeVersion": 3.4
}

================ Node #3288 ================
{
  "id": "ecab63f7-7a72-425a-8f5a-0c707e7f77bc",
  "name": "Qdrant cluster variables",
  "type": "n8n-nodes-base.set",
  "position": [
    -420,
    -220
  ],
  "parameters": {
    "options": {},
    "assignments": {
      "assignments": [
        {
          "id": "58b7384d-fd0c-44aa-9f8e-0306a99be431",
          "name": "qdrantCloudURL",
          "type": "string",
          "value": "=https://152bc6e2-832a-415c-a1aa-fb529f8baf8d.eu-central-1-0.aws.cloud.qdrant.io"
        },
        {
          "id": "e34c4d88-b102-43cc-a09e-e0553f2da23a",
          "name": "collectionName",
          "type": "string",
          "value": "=agricultural-crops"
        }
      ]
    }
  },
  "typeVersion": 3.4
}

================ Node #3289 ================
{
  "id": "6e81f0b0-3843-467e-9c93-40026e57fa91",
  "name": "Info About Crop Clusters",
  "type": "n8n-nodes-base.set",
  "position": [
    600,
    -220
  ],
  "parameters": {
    "options": {},
    "assignments": {
      "assignments": [
        {
          "id": "5327b254-b703-4a34-a398-f82edb1d6d6b",
          "name": "=cropsNumber",
          "type": "number",
          "value": "={{ $json.result.hits.length }}"
        },
        {
          "id": "79168efa-11b8-4a7b-8851-da9c8cbd700b",
          "name": "maxClusterSize",
          "type": "number",
          "value": "={{ Math.max(...$json.result.hits.map(item => item.count)) }}"
        },
        {
          "id": "e1367cec-9629-4c69-a8d7-3eeae3ac94d3",
          "name": "cropNames",
          "type": "array",
          "value": "={{ $json.result.hits.map(item => item.value)}}"
        }
      ]
    }
  },
  "typeVersion": 3.4
}

================ Node #3290 ================
{
  "id": "20191c0a-5310-48f2-8be4-1d160f237db2",
  "name": "Crop Counts",
  "type": "n8n-nodes-base.httpRequest",
  "position": [
    380,
    -220
  ],
  "parameters": {
    "url": "={{ $('Qdrant cluster variables').first().json.qdrantCloudURL }}/collections/{{ $('Qdrant cluster variables').first().json.collectionName }}/facet",
    "method": "POST",
    "options": {},
    "jsonBody": "={{\n{\n \"key\": \"crop_name\",\n \"limit\": $json.result.count,\n \"exact\": true\n}\n}}",
    "sendBody": true,
    "specifyBody": "json",
    "authentication": "predefinedCredentialType",
    "nodeCredentialType": "qdrantApi"
  },
  "credentials": {
    "qdrantApi": {
      "id": "it3j3hP9FICqhgX6",
      "name": "QdrantApi account"
    }
  },
  "typeVersion": 4.2
}

================ Node #3291 ================
{
  "id": "a81103bb-6522-49a2-8102-83c7e004b9b3",
  "name": "Sticky Note",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    -1260,
    -340
  ],
  "parameters": {
    "width": 520,
    "height": 240,
    "content": "## Setting Up Medoids for Anomaly Detection\n### Preparatory workflow to set cluster centres and cluster threshold scores, so anomalies can be detected based on these thresholds\nHere, we're using two approaches to set up these centres: the upper branch is the *\"distance matrix approach\"*, and the lower is the *\"multimodal embedding model approach\"*."
  },
  "typeVersion": 1
}

================ Node #3292 ================
{
  "id": "38fc8252-7e27-450d-b09e-59ceaebc5378",
  "name": "Sticky Note1",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    -420,
    -340
  ],
  "parameters": {
    "height": 80,
    "content": "Once again, variables for Qdrant: cluster URL and a collection we're working with"
  },
  "typeVersion": 1
}

================ Node #3293 ================
{
  "id": "2d0e3b52-d382-428c-9b37-870f4c53b8e7",
  "name": "Sticky Note2",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    -140,
    -360
  ],
  "parameters": {
    "height": 100,
    "content": "Which point in the cluster we're using to draw threshold on: the furthest one from center, or the 2nd, ... Xth furthest one;"
  },
  "typeVersion": 1
}

================ Node #3294 ================
{
  "id": "b0b300f3-e2c9-4c36-8a1d-6705932c296c",
  "name": "Sticky Note3",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    380,
    -500
  ],
  "parameters": {
    "width": 180,
    "height": 240,
    "content": "Here we are getting [facet counts](https://qdrant.tech/documentation/concepts/payload/?q=facet#facet-counts): information which unique values are there behind *\"crop_name\"* payload and how many points have these values (for example, we have 31 *\"cucumber\"* and 29 *\"cotton\"*)"
  },
  "typeVersion": 1
}

================ Node #3295 ================
{
  "id": "0d2584da-5fd0-4830-b329-c78b0debf584",
  "name": "Sticky Note4",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    -140,
    260
  ],
  "parameters": {
    "height": 120,
    "content": "Which point in the cluster we're using to draw threshold on: the furthest one from center, or the 2nd, ... Xth furthest one;\n<this is the 2nd approach>"
  },
  "typeVersion": 1
}

================ Node #3296 ================
{
  "id": "f4c98469-d426-415c-916d-1bc442cf6a21",
  "name": "Sticky Note5",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    120,
    -400
  ],
  "parameters": {
    "height": 140,
    "content": "We need to get the [total amount of points](https://qdrant.tech/documentation/concepts/points/?q=count#counting-points) in Qdrant collection to use it as a `limit` in the *\"Crop Counts\"* node, so we won't lose any information;\n<not the best practice per se>"
  },
  "typeVersion": 1
}

================ Node #3297 ================
{
  "id": "037af9df-34c4-488d-8c89-561ac25247c4",
  "name": "Sticky Note6",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    600,
    -640
  ],
  "parameters": {
    "width": 220,
    "height": 380,
    "content": "Here we're extracting and gathering all the information about crop clusters, so we can call [Qdrant distance matrix API](https://qdrant.tech/documentation/concepts/explore/?q=distance+#distance-matrix) for each cluster.\nWe're propagating **the biggest cluster size** (of labeled data, in our case all data is labeled; for real use cases don't call distance matrix API if your labeled data is more than a couple of hundreds), **the number of unique crop values** and **unique crop values** themselves. We will run the algorithm once per unique crop cluster (to find it's center and threshold)."
  },
  "typeVersion": 1
}

================ Node #3298 ================
{
  "id": "b4e635e3-233d-4358-ad11-250a2b14a2f7",
  "name": "Sticky Note8",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    380,
    260
  ],
  "parameters": {
    "height": 200,
    "content": "Hardcoded descriptions on how each crop usually looks; They were generated with chatGPT, and that can be technically done directly in n8n based on the crop name or a crop picture (we need a good description of how the most normal specimen of a crop looks like)"
  },
  "typeVersion": 1
}

================ Node #3299 ================
{
  "id": "4fda1841-e7e3-4bd2-acf2-ee7338598184",
  "name": "Sticky Note9",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    1200,
    -800
  ],
  "parameters": {
    "height": 400,
    "content": "Calling [distance matrix API](https://qdrant.tech/documentation/concepts/explore/?q=distance+#distance-matrix) once per cluster. \n\n`sample` - how many points we are sampling (here filtered by `crop_name` field, so we are sampling within each cluster, and since we are passing the biggest cluster size to `sample`, we will get all points from each cluster.\n\n`limit` is the number of neighbours distance to which we will see calculated. Since we want all pairwise distances between the points within a cluster, here we're once again setting an upper limit equal to the biggest cluster size; "
  },
  "typeVersion": 1
}

================ Node #3300 ================
{
  "id": "19c4bb6d-abcb-423b-b883-48c779d0307d",
  "name": "Split Out",
  "type": "n8n-nodes-base.splitOut",
  "position": [
    860,
    -220
  ],
  "parameters": {
    "include": "allOtherFields",
    "options": {
      "destinationFieldName": "cropName"
    },
    "fieldToSplitOut": "cropNames"
  },
  "typeVersion": 1
}

================ Node #3301 ================
{
  "id": "f6d74ced-1998-4dbd-ab04-ca1b6ea409a5",
  "name": "Sticky Note10",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    840,
    -60
  ],
  "parameters": {
    "width": 150,
    "height": 80,
    "content": "Splitting out into each unique crop cluster"
  },
  "typeVersion": 1
}

================ Node #3302 ================
{
  "id": "b3adb2bc-61f5-42ff-bb5d-11faa12189b7",
  "name": "Sticky Note11",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    1460,
    -640
  ],
  "parameters": {
    "width": 180,
    "height": 240,
    "content": "Using distance matrix generated by Qdrant and `coo_array` from `scipy`, we're finding a **representative** for each cluster (point which is the most similar to all other points within a cluster, based on the **Cosine** distance)"
  },
  "typeVersion": 1
}

================ Node #3303 ================
{
  "id": "d9d3953e-8b69-4b6a-86f2-b2d2db28d4ad",
  "name": "Sticky Note12",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    1200,
    100
  ],
  "parameters": {
    "height": 280,
    "content": "To find a **representative** with this approach, we:\n1) Embed descriptions of crops with the same Voyage model we used for images (we can do so, since model is multimodal)\n2) For each (crop) cluster, find an image the closest by **Cosine** similarity metric to this embedded description. We will consider it a perfect representative of the cluster"
  },
  "typeVersion": 1
}

================ Node #3304 ================
{
  "id": "8751efd4-d85e-4dc8-86ef-90073d49b6df",
  "name": "Sticky Note13",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    1460,
    100
  ],
  "parameters": {
    "width": 160,
    "height": 140,
    "content": "Embedding descriptions with Voyage model \n[Note] mind `input_type`, it's *\"query\"*"
  },
  "typeVersion": 1
}

================ Node #3305 ================
{
  "id": "652bc70a-4e6f-416a-977b-5d29ae9cb4f0",
  "name": "Sticky Note14",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    1640,
    100
  ],
  "parameters": {
    "height": 260,
    "content": "Find the closest image to the description embeddings (done per cluster)\n[Note] Mind `exact` parameter\n[Note] `limit` is 1 because vector database always returns points sorted by distance from the most similar one to the least\n[Note] `using` parameter is here because our vectors uploaded in the previous pipeline are named *\"voyage\"*."
  },
  "typeVersion": 1
}

================ Node #3306 ================
{
  "id": "a5836982-0de0-4692-883c-267602468ed2",
  "name": "Set text medoid threshold score",
  "type": "n8n-nodes-base.httpRequest",
  "position": [
    3000,
    80
  ],
  "parameters": {
    "url": "={{ $('Qdrant cluster variables').first().json.qdrantCloudURL }}/collections/{{ $('Qdrant cluster variables').first().json.collectionName }}/points/payload",
    "method": "POST",
    "options": {},
    "jsonBody": "={{\n{\n \"payload\": {\"is_text_anchor_medoid_cluster_threshold\": $json.thresholdScore },\n \"points\": [$json.centerId]\n}\n}}",
    "sendBody": true,
    "specifyBody": "json",
    "authentication": "predefinedCredentialType",
    "nodeCredentialType": "qdrantApi"
  },
  "credentials": {
    "qdrantApi": {
      "id": "it3j3hP9FICqhgX6",
      "name": "QdrantApi account"
    }
  },
  "typeVersion": 4.2
}

================ Node #3307 ================
{
  "id": "5354d197-be5e-4add-b721-9e5e3943e53d",
  "name": "Sticky Note15",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    1960,
    -460
  ],
  "parameters": {
    "width": 200,
    "height": 80,
    "content": "Fetching vectors of centres by their IDs"
  },
  "typeVersion": 1
}

================ Node #3308 ================
{
  "id": "93043602-92bc-40ac-b967-ddb7289e5d22",
  "name": "Sticky Note16",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    2000,
    -820
  ],
  "parameters": {
    "height": 100,
    "content": "Set in Qdrant *\"is_medoid\"* [payloads](https://qdrant.tech/documentation/concepts/payload/) for points which were defined as centres by *\"distance matrix approach\"*"
  },
  "typeVersion": 1
}

================ Node #3309 ================
{
  "id": "cb1364ad-e21c-4336-9a5b-15e80c2ed2f2",
  "name": "Sticky Note17",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    2280,
    260
  ],
  "parameters": {
    "height": 180,
    "content": "Here, we don't have to fetch a vector by point id as in the *\"distance matrix approach\"*, since [an API call in the previous node](https://api.qdrant.tech/api-reference/search/query-points) is able to return vectors stored in Qdrant as a response, while the distance matrix API returns only points IDs."
  },
  "typeVersion": 1
}

================ Node #3310 ================
{
  "id": "6d735a28-a93e-41f1-9889-2557a1dd7aec",
  "name": "Sticky Note18",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    1980,
    320
  ],
  "parameters": {
    "height": 140,
    "content": "Set in Qdrant *\"is_text_anchor_medoid\"* [payloads](https://qdrant.tech/documentation/concepts/payload/) for points which were defined as centres by *\"multimodal embedding model approach\"*."
  },
  "typeVersion": 1
}

================ Node #3311 ================
{
  "id": "7c6796a9-260b-41c0-9ac7-feb5d4d95c19",
  "name": "Sticky Note19",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    2240,
    -500
  ],
  "parameters": {
    "width": 440,
    "height": 100,
    "content": "Starting from here, this and the three following nodes are analogous for both methods, with a difference only in variable names. The goal is to find a **class (cluster) threshold score** so we can use it for anomaly detection (for each class).\n"
  },
  "typeVersion": 1
}

================ Node #3312 ================
{
  "id": "5025936d-d49c-4cc1-a675-3bde71627c40",
  "name": "Sticky Note20",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    2280,
    -180
  ],
  "parameters": {
    "height": 220,
    "content": "Finding the most dissimilar point to a centre vector (within each class) is equivalent to finding the most similar point to the [opposite](https://mathinsight.org/image/vector_opposite) of a centre vector, aka the centre vector with all coordinates multiplied by -1. It is always true with **Cosine** vector similarity metric (that we're using)."
  },
  "typeVersion": 1
}

================ Node #3313 ================
{
  "id": "fa9026e4-0c92-4755-92a0-5e400b5f04c9",
  "name": "Sticky Note21",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    2580,
    -140
  ],
  "parameters": {
    "width": 520,
    "height": 140,
    "content": "So here, we found the most dissimilar point within the crop class to the class centre (or the Xth dissimilar point, depending on a variable set in the beginning of this pipeline). Our **threshold score** is the similarity score between this point and the class centre. Now we're saving it as meta information of each class centre point. All preparatory work for anomaly detection is done."
  },
  "typeVersion": 1
}

================ Node #3314 ================
{
  "id": "8e172a7c-6865-4daf-9d9c-86e0dba2c0a2",
  "name": "Sticky Note22",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    -900,
    -820
  ],
  "parameters": {
    "color": 4,
    "width": 540,
    "height": 300,
    "content": "### For anomaly detection\n1. The first pipeline is uploading (crops) dataset to Qdrant's collection.\n2. **This is the second pipeline, to set up cluster (class) centres in this Qdrant collection & cluster (class) threshold scores.**\n3. The third one is the anomaly detection tool, which takes any image as input and uses all preparatory work done with Qdrant (crops) collection.\n\n### To recreate it\nYou'll have to upload [crops](https://www.kaggle.com/datasets/mdwaquarazam/agricultural-crops-image-classification) dataset from Kaggle to your own Google Storage bucket, and re-create APIs/connections to [Qdrant Cloud](https://qdrant.tech/documentation/quickstart-cloud/) (you can use **Free Tier** cluster), Voyage AI API & Google Cloud Storage\n\n**In general, pipelines are adaptable to any dataset of images**\n"
  },
  "typeVersion": 1
}

================ Node #3315 ================
{
  "id": "82fd6023-2cc3-416e-83b7-fda24d07d77a",
  "name": "Issues to List",
  "type": "n8n-nodes-base.splitOut",
  "position": [
    40,
    -100
  ],
  "parameters": {
    "options": {},
    "fieldToSplitOut": "data.issues.nodes"
  },
  "typeVersion": 1
}

================ Node #3316 ================
{
  "id": "9cc77786-e14f-47c6-a3cf-60c2830612e6",
  "name": "OpenAI Chat Model",
  "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
  "position": [
    360,
    80
  ],
  "parameters": {
    "options": {}
  },
  "credentials": {
    "openAiApi": {
      "id": "8gccIjcuf3gvaoEr",
      "name": "OpenAi account"
    }
  },
  "typeVersion": 1
}

================ Node #3317 ================
{
  "id": "821d4a60-81a4-4915-9c13-3d978cc0114b",
  "name": "Combine Sentiment Analysis",
  "type": "n8n-nodes-base.set",
  "position": [
    700,
    -80
  ],
  "parameters": {
    "mode": "raw",
    "options": {},
    "jsonOutput": "={{\n{\n ...$('Issues to List').item.json,\n ...$json.output\n}\n}}"
  },
  "typeVersion": 3.4
}

================ Node #3318 ================
{
  "id": "fe6560f6-2e1b-4442-a2af-bd5a1623f213",
  "name": "Sentiment over Issue Comments",
  "type": "@n8n/n8n-nodes-langchain.informationExtractor",
  "position": [
    360,
    -80
  ],
  "parameters": {
    "text": "={{\n$json.comments.nodes.map(node => [\n `${node.user.displayName} commented on ${node.createdAt}:`,\n node.body\n].join('\\n')).join('---\\n')\n}}",
    "options": {},
    "attributes": {
      "attributes": [
        {
          "name": "sentiment",
          "required": true,
          "description": "One of positive, negative or neutral"
        },
        {
          "name": "sentimentSummary",
          "description": "Describe the sentiment of the conversation"
        }
      ]
    }
  },
  "typeVersion": 1
}

================ Node #3319 ================
{
  "id": "4fd0345d-e5bf-426d-8403-e2217e19bbea",
  "name": "Copy of Issue",
  "type": "n8n-nodes-base.set",
  "position": [
    1200,
    -60
  ],
  "parameters": {
    "mode": "raw",
    "options": {},
    "jsonOutput": "={{ $json }}"
  },
  "typeVersion": 3.4
}

================ Node #3320 ================
{
  "id": "6d103d67-451e-4780-8f52-f4dba4b42860",
  "name": "For Each Issue...",
  "type": "n8n-nodes-base.splitInBatches",
  "position": [
    1020,
    -60
  ],
  "parameters": {
    "options": {}
  },
  "typeVersion": 3
}

================ Node #3321 ================
{
  "id": "032702d9-27d8-4735-b978-20b55bc1a74f",
  "name": "Get Existing Sentiment",
  "type": "n8n-nodes-base.airtable",
  "position": [
    1380,
    -60
  ],
  "parameters": {
    "base": {
      "__rl": true,
      "mode": "list",
      "value": "appViDaeaFw4qv9La",
      "cachedResultUrl": "https://airtable.com/appViDaeaFw4qv9La",
      "cachedResultName": "Sentiment Analysis over Issue Comments"
    },
    "table": {
      "__rl": true,
      "mode": "list",
      "value": "tblhO0sfRhKP6ibS8",
      "cachedResultUrl": "https://airtable.com/appViDaeaFw4qv9La/tblhO0sfRhKP6ibS8",
      "cachedResultName": "Table 1"
    },
    "options": {
      "fields": [
        "Issue ID",
        "Current Sentiment"
      ]
    },
    "operation": "search",
    "filterByFormula": "={Issue ID} = '{{ $json.identifier || 'XYZ' }}'"
  },
  "credentials": {
    "airtableTokenApi": {
      "id": "Und0frCQ6SNVX3VV",
      "name": "Airtable Personal Access Token account"
    }
  },
  "typeVersion": 2.1,
  "alwaysOutputData": true
}

================ Node #3322 ================
{
  "id": "f2ded6fa-8b0f-4a34-868c-13c19f725c98",
  "name": "Update Row",
  "type": "n8n-nodes-base.airtable",
  "position": [
    1560,
    -60
  ],
  "parameters": {
    "base": {
      "__rl": true,
      "mode": "list",
      "value": "appViDaeaFw4qv9La",
      "cachedResultUrl": "https://airtable.com/appViDaeaFw4qv9La",
      "cachedResultName": "Sentiment Analysis over Issue Comments"
    },
    "table": {
      "__rl": true,
      "mode": "list",
      "value": "tblhO0sfRhKP6ibS8",
      "cachedResultUrl": "https://airtable.com/appViDaeaFw4qv9La/tblhO0sfRhKP6ibS8",
      "cachedResultName": "Table 1"
    },
    "columns": {
      "value": {
        "Summary": "={{ $('Copy of Issue').item.json.sentimentSummary || '' }}",
        "Assigned": "={{ $('Copy of Issue').item.json.assignee.name }}",
        "Issue ID": "={{ $('Copy of Issue').item.json.identifier }}",
        "Issue Title": "={{ $('Copy of Issue').item.json.title }}",
        "Issue Created": "={{ $('Copy of Issue').item.json.createdAt }}",
        "Issue Updated": "={{ $('Copy of Issue').item.json.updatedAt }}",
        "Current Sentiment": "={{ $('Copy of Issue').item.json.sentiment.toSentenceCase() }}",
        "Previous Sentiment": "={{ !$json.isEmpty() ? $json['Current Sentiment'] : 'N/A' }}"
      },
      "schema": [
        {
          "id": "id",
          "type": "string",
          "display": true,
          "removed": true,
          "readOnly": true,
          "required": false,
          "displayName": "id",
          "defaultMatch": true
        },
        {
          "id": "Issue ID",
          "type": "string",
          "display": true,
          "removed": false,
          "readOnly": false,
          "required": false,
          "displayName": "Issue ID",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "Previous Sentiment",
          "type": "options",
          "display": true,
          "options": [
            {
              "name": "Positive",
              "value": "Positive"
            },
            {
              "name": "Negative",
              "value": "Negative"
            },
            {
              "name": "Neutral",
              "value": "Neutral"
            },
            {
              "name": "N/A",
              "value": "N/A"
            }
          ],
          "removed": false,
          "readOnly": false,
          "required": false,
          "displayName": "Previous Sentiment",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "Current Sentiment",
          "type": "options",
          "display": true,
          "options": [
            {
              "name": "Positive",
              "value": "Positive"
            },
            {
              "name": "Negative",
              "value": "Negative"
            },
            {
              "name": "Neutral",
              "value": "Neutral"
            },
            {
              "name": "N/A",
              "value": "N/A"
            }
          ],
          "removed": false,
          "readOnly": false,
          "required": false,
          "displayName": "Current Sentiment",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "Summary",
          "type": "string",
          "display": true,
          "removed": false,
          "readOnly": false,
          "required": false,
          "displayName": "Summary",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "Issue Title",
          "type": "string",
          "display": true,
          "removed": false,
          "readOnly": false,
          "required": false,
          "displayName": "Issue Title",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "Issue Created",
          "type": "dateTime",
          "display": true,
          "removed": false,
          "readOnly": false,
          "required": false,
          "displayName": "Issue Created",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "Issue Updated",
          "type": "dateTime",
          "display": true,
          "removed": false,
          "readOnly": false,
          "required": false,
          "displayName": "Issue Updated",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "Assigned",
          "type": "string",
          "display": true,
          "removed": false,
          "readOnly": false,
          "required": false,
          "displayName": "Assigned",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "Created",
          "type": "string",
          "display": true,
          "removed": true,
          "readOnly": true,
          "required": false,
          "displayName": "Created",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "Last Modified",
          "type": "string",
          "display": true,
          "removed": true,
          "readOnly": true,
          "required": false,
          "displayName": "Last Modified",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        }
      ],
      "mappingMode": "defineBelow",
      "matchingColumns": [
        "Issue ID"
      ]
    },
    "options": {},
    "operation": "upsert"
  },
  "credentials": {
    "airtableTokenApi": {
      "id": "Und0frCQ6SNVX3VV",
      "name": "Airtable Personal Access Token account"
    }
  },
  "typeVersion": 2.1
}

================ Node #3323 ================
{
  "id": "e6fb0b8f-2469-4b66-b9e2-f4f3c0a613af",
  "name": "Airtable Trigger",
  "type": "n8n-nodes-base.airtableTrigger",
  "position": [
    1900,
    -40
  ],
  "parameters": {
    "baseId": {
      "__rl": true,
      "mode": "id",
      "value": "appViDaeaFw4qv9La"
    },
    "tableId": {
      "__rl": true,
      "mode": "id",
      "value": "tblhO0sfRhKP6ibS8"
    },
    "pollTimes": {
      "item": [
        {
          "mode": "everyHour"
        }
      ]
    },
    "triggerField": "Current Sentiment",
    "authentication": "airtableTokenApi",
    "additionalFields": {}
  },
  "credentials": {
    "airtableTokenApi": {
      "id": "Und0frCQ6SNVX3VV",
      "name": "Airtable Personal Access Token account"
    }
  },
  "typeVersion": 1
}

================ Node #3324 ================
{
  "id": "669762c4-860b-43ad-b677-72d4564e1c29",
  "name": "Sentiment Transition",
  "type": "n8n-nodes-base.switch",
  "position": [
    2080,
    -40
  ],
  "parameters": {
    "rules": {
      "values": [
        {
          "outputKey": "NON-NEGATIVE to NEGATIVE",
          "conditions": {
            "options": {
              "version": 2,
              "leftValue": "",
              "caseSensitive": true,
              "typeValidation": "strict"
            },
            "combinator": "and",
            "conditions": [
              {
                "operator": {
                  "type": "boolean",
                  "operation": "true",
                  "singleValue": true
                },
                "leftValue": "={{ $json.fields[\"Previous Sentiment\"] !== 'Negative' && $json.fields[\"Current Sentiment\"] === 'Negative' }}",
                "rightValue": ""
              }
            ]
          },
          "renameOutput": true
        }
      ]
    },
    "options": {
      "fallbackOutput": "none"
    }
  },
  "typeVersion": 3.2
}

================ Node #3325 ================
{
  "id": "2fbcfbea-3989-459b-8ca7-b65c130a479b",
  "name": "Fetch Active Linear Issues",
  "type": "n8n-nodes-base.graphql",
  "position": [
    -140,
    -100
  ],
  "parameters": {
    "query": "=query (\n $filter: IssueFilter\n) {\n issues(\n filter: $filter\n ) {\n nodes {\n id\n identifier\n title\n description\n url\n createdAt\n updatedAt\n assignee {\n name\n }\n comments {\n nodes {\n id\n createdAt\n user {\n displayName\n }\n body\n }\n }\n }\n }\n}",
    "endpoint": "https://api.linear.app/graphql",
    "variables": "={{\n{\n \"filter\": {\n updatedAt: { gte: $now.minus(30, 'minutes').toISO() }\n }\n}\n}}",
    "requestFormat": "json",
    "authentication": "headerAuth"
  },
  "credentials": {
    "httpHeaderAuth": {
      "id": "XME2Ubkuy9hpPEM5",
      "name": "Linear.app (heightio)"
    }
  },
  "typeVersion": 1
}

================ Node #3326 ================
{
  "id": "aaf1c25e-c398-4715-88bf-bd98daafc10f",
  "name": "Schedule Trigger",
  "type": "n8n-nodes-base.scheduleTrigger",
  "position": [
    -340,
    -100
  ],
  "parameters": {
    "rule": {
      "interval": [
        {
          "field": "minutes",
          "minutesInterval": 30
        }
      ]
    }
  },
  "typeVersion": 1.2
}

================ Node #3327 ================
{
  "id": "b3e2df39-90ce-4ebf-aa68-05499965ec30",
  "name": "Deduplicate Notifications",
  "type": "n8n-nodes-base.removeDuplicates",
  "position": [
    2280,
    -40
  ],
  "parameters": {
    "options": {},
    "operation": "removeItemsSeenInPreviousExecutions",
    "dedupeValue": "={{ $json.fields[\"Issue ID\"] }}:{{ $json.fields['Last Modified'] }}"
  },
  "typeVersion": 2
}

================ Node #3328 ================
{
  "id": "2a116475-32cd-4c9d-bfc1-3bd494f79a49",
  "name": "Report Issue Negative Transition",
  "type": "n8n-nodes-base.slack",
  "position": [
    2480,
    -40
  ],
  "webhookId": "612f1001-3fcc-480b-a835-05f9e2d56a5f",
  "parameters": {
    "text": "={{ $('Deduplicate Notifications').all().length }} Issues have transitions to Negative Sentiment",
    "select": "channel",
    "blocksUi": "={{\n{\n \"blocks\": [\n {\n \"type\": \"section\",\n \"text\": {\n \"type\": \"mrkdwn\",\n \"text\": \":rotating_light: The following Issues transitioned to Negative Sentiment\"\n }\n },\n {\n \"type\": \"divider\"\n },\n ...($('Deduplicate Notifications').all().map(item => (\n {\n \"type\": \"section\",\n \"text\": {\n \"type\": \"mrkdwn\",\n \"text\": `*<https://linear.app/myOrg/issue/${$json.fields['Issue ID']}|${$json.fields['Issue ID']} ${$json.fields['Issue Title']}>*\\n${$json.fields.Summary}`\n }\n }\n )))\n ]\n}\n}}",
    "channelId": {
      "__rl": true,
      "mode": "list",
      "value": "C0749JVFERK",
      "cachedResultName": "n8n-tickets"
    },
    "messageType": "block",
    "otherOptions": {}
  },
  "credentials": {
    "slackApi": {
      "id": "VfK3js0YdqBdQLGP",
      "name": "Slack account"
    }
  },
  "executeOnce": true,
  "typeVersion": 2.3
}

================ Node #3329 ================
{
  "id": "1f3d30b6-de31-45a8-a872-554c339f112f",
  "name": "Sticky Note",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    -420,
    -320
  ],
  "parameters": {
    "color": 7,
    "width": 660,
    "height": 440,
    "content": "## 1. Continuously Monitor Active Linear Issues\n[Learn more about the GraphQL node](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.graphql)\n\nTo keep up with the latest changes in our active Linear tickets, we'll need to use Linear's GraphQL endpoint because filtering is currently unavailable in the official Linear.app node.\n\nFor this demonstration, we'll check for updated tickets every 30mins."
  },
  "typeVersion": 1
}

================ Node #3330 ================
{
  "id": "9024512d-5cb9-4e9f-b6e1-495d1a32118a",
  "name": "Sticky Note1",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    260,
    -320
  ],
  "parameters": {
    "color": 7,
    "width": 640,
    "height": 560,
    "content": "## 2. Sentiment Analysis on Current Issue Activity\n[Learn more about the Information Extractor node](https://docs.n8n.io/integrations/builtin/cluster-nodes/root-nodes/n8n-nodes-langchain.information-extractor)\n\nWith our recently updated posts, we can use our AI to perform a quick sentiment analysis on the ongoing conversation to check the overall mood of the support issue. This is a great way to check how things are generally going in the support queue; positive should be normal but negative could indicate some uncomfortableness or even frustration."
  },
  "typeVersion": 1
}

================ Node #3331 ================
{
  "id": "233ebd6d-38cb-4f2d-84b5-29c97d30d77b",
  "name": "Sticky Note2",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    920,
    -320
  ],
  "parameters": {
    "color": 7,
    "width": 840,
    "height": 560,
    "content": "## 3. Capture and Track Results in Airtable\n[Learn more about the Airtable node](https://docs.n8n.io/integrations/builtin/app-nodes/n8n-nodes-base.airtable)\n\nNext, we can capture this analysis in our insights database as means for human review. When the issue is new, we can create a new row but if the issue exists, we will update it's existing row instead.\n\nWhen updating an existing row, we move its previous \"current sentiment\" value into the \"previous sentiment\" column and replace with our new current sentiment. This gives us a \"sentiment transition\" which will be useful in the next step.\n\nCheck out the Airtable here: https://airtable.com/appViDaeaFw4qv9La/shrq6HgeYzpW6uwXL"
  },
  "typeVersion": 1
}

================ Node #3332 ================
{
  "id": "a2229225-b580-43cb-b234-4f69cb5924fd",
  "name": "Sticky Note3",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    1800,
    -320
  ],
  "parameters": {
    "color": 7,
    "width": 920,
    "height": 560,
    "content": "## 4. Get Notified when Sentiment becomes Negative\n[Learn more about the Slack node](https://docs.n8n.io/integrations/builtin/app-nodes/n8n-nodes-base.slack/)\n\nA good use-case for tracking sentiment transitions could be to be alerted if ever an issue moves from a non-negative sentiment to a negative one. This could be a signal of issue handling troubles which may require attention before it escalates.\n\nIn this demonstration, we use the Airtable trigger to catch rows which have their sentiment column updated and check for the non-negative-to-negative sentiment transition using the switch node. For those matching rows, we combine add send a notification via slack. A cool trick is to use the \"remove duplication\" node to prevent repeat notifications for the same updates - here we combine the Linear issue key and the row's last modified date."
  },
  "typeVersion": 1
}

================ Node #3333 ================
{
  "id": "6f26769e-ec5d-46d0-ae0a-34148b24e6a2",
  "name": "Sticky Note4",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    -940,
    -720
  ],
  "parameters": {
    "width": 480,
    "height": 840,
    "content": "## Try It Out!\n### This n8n template performs continous monitoring on Linear Issue conversations performing sentiment analysis and alerting when the sentiment becomes negative.\nThis is helpful to quickly identify difficult customer support situations early and prioritising them before they get out of hand.\n\n## How it works\n* A scheduled trigger is used to fetch recently updated issues in Linear using the GraphQL node.\n* Each issue's comments thread is passed into a simple Information Extractor node to identify the overall sentiment.\n* The resulting sentiment analysis combined with the some issue details are uploaded to Airtable for review.\n* When the template is re-run at a later date, each issue is re-analysed for sentiment\n* Each issue's new sentiment state is saved to the airtable whilst its previous state is moved to the \"previous sentiment\" column.\n* An Airtable trigger is used to watch for recently updated rows\n* Each matching Airtable row is filtered to check if it has a previous non-negative state but now has a negative state in its current sentiment.\n* The results are sent via notification to a team slack channel for priority.\n\n**Check out the sample Airtable here**: https://airtable.com/appViDaeaFw4qv9La/shrq6HgeYzpW6uwXL\n\n## How to use\n* Modify the GraphQL filter to fetch issues to a relevant issue type, team or person.\n* Update the Slack channel to ensure messages are sent to the correct location.\n\n### Need Help?\nJoin the [Discord](https://discord.com/invite/XPKeKXeB7d) or ask in the [Forum](https://community.n8n.io/)!\n\nHappy Hacking!"
  },
  "typeVersion": 1
}

================ Node #3334 ================
{
  "id": "4dd52c72-9a9b-4db4-8de5-5b12b1e5c4be",
  "name": "Schedule Trigger",
  "type": "n8n-nodes-base.scheduleTrigger",
  "position": [
    180,
    1480
  ],
  "parameters": {
    "rule": {
      "interval": [
        {
          "triggerAtHour": 9
        }
      ]
    }
  },
  "typeVersion": 1.2
}

================ Node #3335 ================
{
  "id": "9226181c-b84c-4ea1-a5b4-eedb6c62037b",
  "name": "Search daily",
  "type": "n8n-nodes-base.airtable",
  "position": [
    440,
    1480
  ],
  "parameters": {
    "base": {
      "__rl": true,
      "mode": "list",
      "value": "appL3dptT6ZTSzY9v",
      "cachedResultUrl": "https://airtable.com/appL3dptT6ZTSzY9v",
      "cachedResultName": "Scheduled Emails"
    },
    "table": {
      "__rl": true,
      "mode": "list",
      "value": "tblzR9vSuFUzlQNMI",
      "cachedResultUrl": "https://airtable.com/appL3dptT6ZTSzY9v/tblzR9vSuFUzlQNMI",
      "cachedResultName": "Table 1"
    },
    "options": {},
    "operation": "search",
    "filterByFormula": "AND({Status} = 'active', {Interval} = 'daily')"
  },
  "credentials": {
    "airtableTokenApi": {
      "id": "Und0frCQ6SNVX3VV",
      "name": "Airtable Personal Access Token account"
    }
  },
  "typeVersion": 2.1
}

================ Node #3336 ================
{
  "id": "1a3b6224-2f66-41c6-8b3d-be286cf16370",
  "name": "Search weekly",
  "type": "n8n-nodes-base.airtable",
  "position": [
    440,
    1660
  ],
  "parameters": {
    "base": {
      "__rl": true,
      "mode": "list",
      "value": "appL3dptT6ZTSzY9v",
      "cachedResultUrl": "https://airtable.com/appL3dptT6ZTSzY9v",
      "cachedResultName": "Scheduled Emails"
    },
    "table": {
      "__rl": true,
      "mode": "list",
      "value": "tblzR9vSuFUzlQNMI",
      "cachedResultUrl": "https://airtable.com/appL3dptT6ZTSzY9v/tblzR9vSuFUzlQNMI",
      "cachedResultName": "Table 1"
    },
    "options": {},
    "operation": "search",
    "filterByFormula": "=AND(\n {Status} = 'active', \n {Interval} = 'weekly', \n {Last Sent} <= DATEADD(TODAY(), -7, 'days')\n)"
  },
  "credentials": {
    "airtableTokenApi": {
      "id": "Und0frCQ6SNVX3VV",
      "name": "Airtable Personal Access Token account"
    }
  },
  "typeVersion": 2.1
}

================ Node #3337 ================
{
  "id": "1ea47e14-0a28-4780-95c7-31e24eb724d5",
  "name": "confirmation email1",
  "type": "n8n-nodes-base.gmail",
  "position": [
    620,
    820
  ],
  "webhookId": "dd8bd6df-2013-4f8d-a2cc-cd9b3913e3d2",
  "parameters": {
    "sendTo": "={{ $('Subscribe Form').item.json.email }}",
    "message": "=This is to confirm your request to subscribe to \"Learn something every day!\" - a free service to send you facts about your favourite topics.\n\nTopic: {{ $('Subscribe Form').item.json.topic }}\nSchedule: {{ $('Subscribe Form').item.json.frequency }}",
    "options": {
      "appendAttribution": false
    },
    "subject": "Learn something every day confirmation"
  },
  "credentials": {
    "gmailOAuth2": {
      "id": "Sf5Gfl9NiFTNXFWb",
      "name": "Gmail account"
    }
  },
  "typeVersion": 2.1
}

================ Node #3338 ================
{
  "id": "d95262af-1b52-4f9c-8346-183b4eee8544",
  "name": "Execute Workflow",
  "type": "n8n-nodes-base.executeWorkflow",
  "position": [
    1140,
    1480
  ],
  "parameters": {
    "mode": "each",
    "options": {
      "waitForSubWorkflow": false
    },
    "workflowId": {
      "__rl": true,
      "mode": "id",
      "value": "={{ $workflow.id }}"
    }
  },
  "typeVersion": 1.1
}

================ Node #3339 ================
{
  "id": "075292af-7a66-4275-ac2d-3c392189a10c",
  "name": "Create Event",
  "type": "n8n-nodes-base.set",
  "position": [
    980,
    1480
  ],
  "parameters": {
    "options": {},
    "assignments": {
      "assignments": [
        {
          "id": "b28a0142-a028-471a-8180-9883e930feea",
          "name": "email",
          "type": "string",
          "value": "={{ $json.Email }}"
        },
        {
          "id": "970f5495-05df-42b6-a422-b2ac27f8eb95",
          "name": "topic",
          "type": "string",
          "value": "={{ $json.Topic }}"
        },
        {
          "id": "e871c431-948f-4b80-aa17-1e4266674663",
          "name": "interval",
          "type": "string",
          "value": "={{ $json.Interval }}"
        },
        {
          "id": "9b72597d-1446-4ef3-86e5-0a071c69155b",
          "name": "id",
          "type": "string",
          "value": "={{ $json.id }}"
        },
        {
          "id": "b17039c2-14a2-4811-9528-88ae963e44f7",
          "name": "created_at",
          "type": "string",
          "value": "={{ $json.Created }}"
        }
      ]
    }
  },
  "typeVersion": 3.4
}

================ Node #3340 ================
{
  "id": "28776aaf-6bd9-4f9f-bcf0-3d4401a74219",
  "name": "Execute Workflow Trigger",
  "type": "n8n-nodes-base.executeWorkflowTrigger",
  "position": [
    1360,
    1480
  ],
  "parameters": {},
  "typeVersion": 1
}

================ Node #3341 ================
{
  "id": "0eb62e75-228b-452b-80ab-f9ef3ad33204",
  "name": "Unsubscribe Form",
  "type": "n8n-nodes-base.formTrigger",
  "position": [
    180,
    1160
  ],
  "webhookId": "e64db96d-5e61-40d5-88fb-761621a829ab",
  "parameters": {
    "options": {
      "path": "free-factoids-unsubscribe"
    },
    "formTitle": "Unsubscribe from Learn Something Every Day",
    "formFields": {
      "values": [
        {
          "fieldLabel": "ID",
          "requiredField": true
        },
        {
          "fieldType": "dropdown",
          "fieldLabel": "Reason For Unsubscribe",
          "multiselect": true,
          "fieldOptions": {
            "values": [
              {
                "option": "Emails not relevant"
              },
              {
                "option": "Too many Emails"
              },
              {
                "option": "I did not sign up to this service"
              }
            ]
          }
        }
      ]
    },
    "formDescription": "We're sorry to see you go! Please take a moment to help us improve the service."
  },
  "typeVersion": 2.2
}

================ Node #3342 ================
{
  "id": "f889efe9-dc3c-428b-ad8e-4f7d17f23e75",
  "name": "Set Email Vars",
  "type": "n8n-nodes-base.set",
  "position": [
    2500,
    1480
  ],
  "parameters": {
    "options": {},
    "assignments": {
      "assignments": [
        {
          "id": "62a684fb-16f9-4326-8eeb-777d604b305a",
          "name": "to",
          "type": "string",
          "value": "={{ $('Execute Workflow Trigger').first().json.email }},jim@height.io"
        },
        {
          "id": "4270849e-c805-4580-9088-e8d1c3ef2fb4",
          "name": "subject",
          "type": "string",
          "value": "=Your {{ $('Execute Workflow Trigger').first().json.interval }} factoid"
        },
        {
          "id": "81d0e897-2496-4a3c-b16c-9319338f899f",
          "name": "message",
          "type": "string",
          "value": "=<p>\n<strong>You asked about \"{{ $('Execution Data').first().json.topic.replace('\"','') }}\"</strong>\n</p>\n<p>\n<i>{{ $('Content Generation Agent').first().json.output }}</i>\n</p>"
        },
        {
          "id": "ee05de7b-5342-4deb-8118-edaf235d92cc",
          "name": "unsubscribe_link",
          "type": "string",
          "value": "=https://<MY_HOST>/form/inspiration-unsubscribe?ID={{ $('Execute Workflow Trigger').first().json.id }}"
        }
      ]
    },
    "includeOtherFields": true
  },
  "typeVersion": 3.4
}

================ Node #3343 ================
{
  "id": "84741e6d-f5be-440d-8633-4eb30ccce170",
  "name": "Log Last Sent",
  "type": "n8n-nodes-base.airtable",
  "position": [
    2860,
    1480
  ],
  "parameters": {
    "base": {
      "__rl": true,
      "mode": "list",
      "value": "appL3dptT6ZTSzY9v",
      "cachedResultUrl": "https://airtable.com/appL3dptT6ZTSzY9v",
      "cachedResultName": "Scheduled Emails"
    },
    "table": {
      "__rl": true,
      "mode": "list",
      "value": "tblzR9vSuFUzlQNMI",
      "cachedResultUrl": "https://airtable.com/appL3dptT6ZTSzY9v/tblzR9vSuFUzlQNMI",
      "cachedResultName": "Table 1"
    },
    "columns": {
      "value": {
        "id": "={{ $('Execute Workflow Trigger').first().json.id }}",
        "Last Sent": "2024-11-29T13:34:11"
      },
      "schema": [
        {
          "id": "id",
          "type": "string",
          "display": true,
          "removed": false,
          "readOnly": true,
          "required": false,
          "displayName": "id",
          "defaultMatch": true
        },
        {
          "id": "Name",
          "type": "string",
          "display": true,
          "removed": true,
          "readOnly": false,
          "required": false,
          "displayName": "Name",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "Email",
          "type": "string",
          "display": true,
          "removed": true,
          "readOnly": false,
          "required": false,
          "displayName": "Email",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "Status",
          "type": "options",
          "display": true,
          "options": [
            {
              "name": "inactive",
              "value": "inactive"
            },
            {
              "name": "active",
              "value": "active"
            }
          ],
          "removed": true,
          "readOnly": false,
          "required": false,
          "displayName": "Status",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "Interval",
          "type": "options",
          "display": true,
          "options": [
            {
              "name": "daily",
              "value": "daily"
            },
            {
              "name": "weekly",
              "value": "weekly"
            },
            {
              "name": "surprise",
              "value": "surprise"
            }
          ],
          "removed": true,
          "readOnly": false,
          "required": false,
          "displayName": "Interval",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "Start Day",
          "type": "options",
          "display": true,
          "options": [
            {
              "name": "Mon",
              "value": "Mon"
            },
            {
              "name": "Tue",
              "value": "Tue"
            },
            {
              "name": "Wed",
              "value": "Wed"
            },
            {
              "name": "Thu",
              "value": "Thu"
            },
            {
              "name": "Fri",
              "value": "Fri"
            },
            {
              "name": "Sat",
              "value": "Sat"
            },
            {
              "name": "Sun",
              "value": "Sun"
            }
          ],
          "removed": true,
          "readOnly": false,
          "required": false,
          "displayName": "Start Day",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "Topic",
          "type": "string",
          "display": true,
          "removed": true,
          "readOnly": false,
          "required": false,
          "displayName": "Topic",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "Created",
          "type": "string",
          "display": true,
          "removed": true,
          "readOnly": true,
          "required": false,
          "displayName": "Created",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "Last Modified",
          "type": "string",
          "display": true,
          "removed": true,
          "readOnly": true,
          "required": false,
          "displayName": "Last Modified",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "Last Sent",
          "type": "dateTime",
          "display": true,
          "removed": false,
          "readOnly": false,
          "required": false,
          "displayName": "Last Sent",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        }
      ],
      "mappingMode": "defineBelow",
      "matchingColumns": [
        "id"
      ]
    },
    "options": {},
    "operation": "update"
  },
  "credentials": {
    "airtableTokenApi": {
      "id": "Und0frCQ6SNVX3VV",
      "name": "Airtable Personal Access Token account"
    }
  },
  "typeVersion": 2.1
}

================ Node #3344 ================
{
  "id": "88f864d6-13fb-4f09-b22d-030d016678e1",
  "name": "Search surprise",
  "type": "n8n-nodes-base.airtable",
  "position": [
    440,
    1840
  ],
  "parameters": {
    "base": {
      "__rl": true,
      "mode": "list",
      "value": "appL3dptT6ZTSzY9v",
      "cachedResultUrl": "https://airtable.com/appL3dptT6ZTSzY9v",
      "cachedResultName": "Scheduled Emails"
    },
    "table": {
      "__rl": true,
      "mode": "list",
      "value": "tblzR9vSuFUzlQNMI",
      "cachedResultUrl": "https://airtable.com/appL3dptT6ZTSzY9v/tblzR9vSuFUzlQNMI",
      "cachedResultName": "Table 1"
    },
    "options": {},
    "operation": "search",
    "filterByFormula": "=AND(\n {Status} = 'active', \n {Interval} = 'surprise'\n)"
  },
  "credentials": {
    "airtableTokenApi": {
      "id": "Und0frCQ6SNVX3VV",
      "name": "Airtable Personal Access Token account"
    }
  },
  "typeVersion": 2.1
}

================ Node #3345 ================
{
  "id": "28238d9a-7bc0-4a22-bb4e-a7a2827e4da3",
  "name": "Should Send = True",
  "type": "n8n-nodes-base.filter",
  "position": [
    800,
    1840
  ],
  "parameters": {
    "options": {},
    "conditions": {
      "options": {
        "version": 2,
        "leftValue": "",
        "caseSensitive": true,
        "typeValidation": "strict"
      },
      "combinator": "and",
      "conditions": [
        {
          "id": "9aaf9ae2-8f96-443a-8294-c04270296b22",
          "operator": {
            "type": "boolean",
            "operation": "true",
            "singleValue": true
          },
          "leftValue": "={{ $json.should_send }}",
          "rightValue": ""
        }
      ]
    }
  },
  "typeVersion": 2.2
}

================ Node #3346 ================
{
  "id": "3a46dd3d-48a6-40ca-8823-0516aa9f73a4",
  "name": "Should Send?",
  "type": "n8n-nodes-base.code",
  "position": [
    620,
    1840
  ],
  "parameters": {
    "mode": "runOnceForEachItem",
    "jsCode": "const luckyPick = Math.floor(Math.random() * 10) + 1;\n$input.item.json.should_send = luckyPick == 8;\nreturn $input.item;"
  },
  "typeVersion": 2
}

================ Node #3347 ================
{
  "id": "3611da19-920b-48e6-84a4-f7be0b3a78fc",
  "name": "Create Subscriber",
  "type": "n8n-nodes-base.airtable",
  "position": [
    440,
    820
  ],
  "parameters": {
    "base": {
      "__rl": true,
      "mode": "list",
      "value": "appL3dptT6ZTSzY9v",
      "cachedResultUrl": "https://airtable.com/appL3dptT6ZTSzY9v",
      "cachedResultName": "Scheduled Emails"
    },
    "table": {
      "__rl": true,
      "mode": "list",
      "value": "tblzR9vSuFUzlQNMI",
      "cachedResultUrl": "https://airtable.com/appL3dptT6ZTSzY9v/tblzR9vSuFUzlQNMI",
      "cachedResultName": "Table 1"
    },
    "columns": {
      "value": {
        "Email": "={{ $json.email }}",
        "Topic": "={{ $json.topic }}",
        "Status": "active",
        "Interval": "={{ $json.frequency }}",
        "Start Day": "={{ $json.submittedAt.toDateTime().format('EEE') }}"
      },
      "schema": [
        {
          "id": "Name",
          "type": "string",
          "display": true,
          "removed": true,
          "readOnly": false,
          "required": false,
          "displayName": "Name",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "Email",
          "type": "string",
          "display": true,
          "removed": false,
          "readOnly": false,
          "required": false,
          "displayName": "Email",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "Status",
          "type": "options",
          "display": true,
          "options": [
            {
              "name": "inactive",
              "value": "inactive"
            },
            {
              "name": "active",
              "value": "active"
            }
          ],
          "removed": false,
          "readOnly": false,
          "required": false,
          "displayName": "Status",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "Interval",
          "type": "options",
          "display": true,
          "options": [
            {
              "name": "daily",
              "value": "daily"
            },
            {
              "name": "weekly",
              "value": "weekly"
            },
            {
              "name": "surprise",
              "value": "surprise"
            }
          ],
          "removed": false,
          "readOnly": false,
          "required": false,
          "displayName": "Interval",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "Start Day",
          "type": "options",
          "display": true,
          "options": [
            {
              "name": "Mon",
              "value": "Mon"
            },
            {
              "name": "Tue",
              "value": "Tue"
            },
            {
              "name": "Wed",
              "value": "Wed"
            },
            {
              "name": "Thu",
              "value": "Thu"
            },
            {
              "name": "Fri",
              "value": "Fri"
            },
            {
              "name": "Sat",
              "value": "Sat"
            },
            {
              "name": "Sun",
              "value": "Sun"
            }
          ],
          "removed": false,
          "readOnly": false,
          "required": false,
          "displayName": "Start Day",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "Topic",
          "type": "string",
          "display": true,
          "removed": false,
          "readOnly": false,
          "required": false,
          "displayName": "Topic",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "Created",
          "type": "string",
          "display": true,
          "removed": true,
          "readOnly": true,
          "required": false,
          "displayName": "Created",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "Last Modified",
          "type": "string",
          "display": true,
          "removed": true,
          "readOnly": true,
          "required": false,
          "displayName": "Last Modified",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "Last Sent",
          "type": "dateTime",
          "display": true,
          "removed": true,
          "readOnly": false,
          "required": false,
          "displayName": "Last Sent",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        }
      ],
      "mappingMode": "defineBelow",
      "matchingColumns": [
        "Email"
      ]
    },
    "options": {},
    "operation": "upsert"
  },
  "credentials": {
    "airtableTokenApi": {
      "id": "Und0frCQ6SNVX3VV",
      "name": "Airtable Personal Access Token account"
    }
  },
  "typeVersion": 2.1
}

================ Node #3348 ================
{
  "id": "2213a81f-53a9-4142-9586-e87b88710eec",
  "name": "Update Subscriber",
  "type": "n8n-nodes-base.airtable",
  "position": [
    440,
    1160
  ],
  "parameters": {
    "base": {
      "__rl": true,
      "mode": "list",
      "value": "appL3dptT6ZTSzY9v",
      "cachedResultUrl": "https://airtable.com/appL3dptT6ZTSzY9v",
      "cachedResultName": "Scheduled Emails"
    },
    "table": {
      "__rl": true,
      "mode": "list",
      "value": "tblzR9vSuFUzlQNMI",
      "cachedResultUrl": "https://airtable.com/appL3dptT6ZTSzY9v/tblzR9vSuFUzlQNMI",
      "cachedResultName": "Table 1"
    },
    "columns": {
      "value": {
        "id": "={{ $json.ID }}",
        "Status": "inactive"
      },
      "schema": [
        {
          "id": "id",
          "type": "string",
          "display": true,
          "removed": false,
          "readOnly": true,
          "required": false,
          "displayName": "id",
          "defaultMatch": true
        },
        {
          "id": "Name",
          "type": "string",
          "display": true,
          "removed": true,
          "readOnly": false,
          "required": false,
          "displayName": "Name",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "Email",
          "type": "string",
          "display": true,
          "removed": true,
          "readOnly": false,
          "required": false,
          "displayName": "Email",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "Status",
          "type": "options",
          "display": true,
          "options": [
            {
              "name": "inactive",
              "value": "inactive"
            },
            {
              "name": "active",
              "value": "active"
            }
          ],
          "removed": false,
          "readOnly": false,
          "required": false,
          "displayName": "Status",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "Interval",
          "type": "options",
          "display": true,
          "options": [
            {
              "name": "daily",
              "value": "daily"
            },
            {
              "name": "weekly",
              "value": "weekly"
            }
          ],
          "removed": true,
          "readOnly": false,
          "required": false,
          "displayName": "Interval",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "Start Day",
          "type": "options",
          "display": true,
          "options": [
            {
              "name": "Mon",
              "value": "Mon"
            },
            {
              "name": "Tue",
              "value": "Tue"
            },
            {
              "name": "Wed",
              "value": "Wed"
            },
            {
              "name": "Thu",
              "value": "Thu"
            },
            {
              "name": "Fri",
              "value": "Fri"
            },
            {
              "name": "Sat",
              "value": "Sat"
            },
            {
              "name": "Sun",
              "value": "Sun"
            }
          ],
          "removed": true,
          "readOnly": false,
          "required": false,
          "displayName": "Start Day",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "Topic",
          "type": "string",
          "display": true,
          "removed": true,
          "readOnly": false,
          "required": false,
          "displayName": "Topic",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "Created",
          "type": "string",
          "display": true,
          "removed": true,
          "readOnly": true,
          "required": false,
          "displayName": "Created",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "Last Modified",
          "type": "string",
          "display": true,
          "removed": true,
          "readOnly": true,
          "required": false,
          "displayName": "Last Modified",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        }
      ],
      "mappingMode": "defineBelow",
      "matchingColumns": [
        "id"
      ]
    },
    "options": {},
    "operation": "update"
  },
  "credentials": {
    "airtableTokenApi": {
      "id": "Und0frCQ6SNVX3VV",
      "name": "Airtable Personal Access Token account"
    }
  },
  "typeVersion": 2.1
}

================ Node #3349 ================
{
  "id": "c94ec18b-e0cf-4859-8b89-23abdd63739c",
  "name": "Sticky Note",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    900,
    1280
  ],
  "parameters": {
    "color": 7,
    "width": 335,
    "height": 173,
    "content": "### 4. Using Subworkflows to run executions concurrently\nThis configuration is desired when sequential execution is slow and unnecessary. Also if one email fails, it doesn't fail the execution for everyone else."
  },
  "typeVersion": 1
}

================ Node #3350 ================
{
  "id": "c14cab28-13eb-4d91-8578-8187a95a8909",
  "name": "Sticky Note1",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    180,
    700
  ],
  "parameters": {
    "color": 7,
    "width": 380,
    "height": 80,
    "content": "### 1. Subscribe flow\nUse a form to allow users to subscribe to the service."
  },
  "typeVersion": 1
}

================ Node #3351 ================
{
  "id": "0e44ada0-f8a7-440e-aded-33b446190a08",
  "name": "Sticky Note2",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    180,
    1020
  ],
  "parameters": {
    "color": 7,
    "width": 355,
    "height": 115,
    "content": "### 2. Unsubscribe flow\n* Uses Form's pre-fill field feature to identify user\n* Doesn't use \"email\" as identifier so you can't unsubscribe others"
  },
  "typeVersion": 1
}

================ Node #3352 ================
{
  "id": "e67bdffe-ccfc-4818-990d-b2a5ab613035",
  "name": "Sticky Note3",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    180,
    1340
  ],
  "parameters": {
    "color": 7,
    "width": 347,
    "height": 114,
    "content": "### 3. Scheduled Trigger\n* Runs every day at 9am\n* Handles all 3 frequency types\n* Send emails concurrently"
  },
  "typeVersion": 1
}

================ Node #3353 ================
{
  "id": "ce7d5310-7170-46d3-b8d8-3f97407f9dfd",
  "name": "Subscribe Form",
  "type": "n8n-nodes-base.formTrigger",
  "position": [
    180,
    820
  ],
  "webhookId": "c6abe3e3-ba87-4124-a227-84e253581b58",
  "parameters": {
    "options": {
      "path": "free-factoids-subscribe",
      "appendAttribution": false,
      "respondWithOptions": {
        "values": {
          "formSubmittedText": "Thanks! Your factoid is on its way!"
        }
      }
    },
    "formTitle": "Learn something every day!",
    "formFields": {
      "values": [
        {
          "fieldType": "textarea",
          "fieldLabel": "topic",
          "placeholder": "What topic(s) would you like to learn about?",
          "requiredField": true
        },
        {
          "fieldType": "email",
          "fieldLabel": "email",
          "placeholder": "eg. jim@example.com",
          "requiredField": true
        },
        {
          "fieldType": "dropdown",
          "fieldLabel": "frequency",
          "fieldOptions": {
            "values": [
              {
                "option": "daily"
              },
              {
                "option": "weekly"
              },
              {
                "option": "surprise me"
              }
            ]
          },
          "requiredField": true
        }
      ]
    },
    "formDescription": "Get a fact a day (or week) about any subject sent to your inbox."
  },
  "typeVersion": 2.2
}

================ Node #3354 ================
{
  "id": "a5d50886-7d6b-4bf8-b376-b23c12a60608",
  "name": "Execution Data",
  "type": "n8n-nodes-base.executionData",
  "position": [
    1560,
    1480
  ],
  "parameters": {
    "dataToSave": {
      "values": [
        {
          "key": "email",
          "value": "={{ $json.email }}"
        }
      ]
    }
  },
  "typeVersion": 1
}

================ Node #3355 ================
{
  "id": "69b40d8d-7734-47f1-89fe-9ea0378424b7",
  "name": "Window Buffer Memory",
  "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
  "position": [
    1860,
    1680
  ],
  "parameters": {
    "sessionKey": "=scheduled_send_{{ $json.email }}",
    "sessionIdType": "customKey"
  },
  "typeVersion": 1.3
}

================ Node #3356 ================
{
  "id": "f83cff18-f41f-4a63-9d43-7e3947aae386",
  "name": "Wikipedia",
  "type": "@n8n/n8n-nodes-langchain.toolWikipedia",
  "position": [
    2020,
    1680
  ],
  "parameters": {},
  "typeVersion": 1
}

================ Node #3357 ================
{
  "id": "77457037-e3ab-42f1-948b-b994d42f2f6e",
  "name": "Content Generation Agent",
  "type": "@n8n/n8n-nodes-langchain.agent",
  "position": [
    1780,
    1460
  ],
  "parameters": {
    "text": "=Generate an new factoid on the following topic: \"{{ $json.topic.replace('\"','') }}\"\nEnsure it is unique and not one generated previously.",
    "options": {},
    "promptType": "define"
  },
  "typeVersion": 1.7
}

================ Node #3358 ================
{
  "id": "cdfdd870-48b6-4c7d-a7d1-a22d70423e37",
  "name": "Groq Chat Model",
  "type": "@n8n/n8n-nodes-langchain.lmChatGroq",
  "position": [
    1720,
    1680
  ],
  "parameters": {
    "model": "llama-3.3-70b-versatile",
    "options": {}
  },
  "credentials": {
    "groqApi": {
      "id": "02xZ4o87lUMUFmbT",
      "name": "Groq account"
    }
  },
  "typeVersion": 1
}

================ Node #3359 ================
{
  "id": "87df322d-a544-476f-b2ff-83feb619fe7f",
  "name": "Generate Image",
  "type": "@n8n/n8n-nodes-langchain.openAi",
  "position": [
    2120,
    1460
  ],
  "parameters": {
    "prompt": "=Generate a child-friendly illustration which compliments the following paragraph:\n{{ $json.output }}",
    "options": {},
    "resource": "image"
  },
  "credentials": {
    "openAiApi": {
      "id": "8gccIjcuf3gvaoEr",
      "name": "OpenAi account"
    }
  },
  "typeVersion": 1.7
}

================ Node #3360 ================
{
  "id": "5c8d9e72-4015-44da-b5d5-829864d33672",
  "name": "Resize Image",
  "type": "n8n-nodes-base.editImage",
  "position": [
    2280,
    1460
  ],
  "parameters": {
    "width": 480,
    "height": 360,
    "options": {},
    "operation": "resize"
  },
  "typeVersion": 1
}

================ Node #3361 ================
{
  "id": "a9939fad-98b3-4894-aae0-c11fa40d09da",
  "name": "Send Message",
  "type": "n8n-nodes-base.gmail",
  "position": [
    2680,
    1480
  ],
  "webhookId": "dd8bd6df-2013-4f8d-a2cc-cd9b3913e3d2",
  "parameters": {
    "sendTo": "={{ $json.to }}",
    "message": "=<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n <meta charset=\"UTF-8\">\n <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n <title>{{ $json.subject }}</title>\n</head>\n<body>\n {{ $json.message }}\n<p>\n<a href=\"{{ $json.unsubscribe_link }}\">Unsubscribe</a>\n</p>\n</body>\n</html>\n",
    "options": {
      "attachmentsUi": {
        "attachmentsBinary": [
          {}
        ]
      },
      "appendAttribution": false
    },
    "subject": "={{ $json.subject }}"
  },
  "credentials": {
    "gmailOAuth2": {
      "id": "Sf5Gfl9NiFTNXFWb",
      "name": "Gmail account"
    }
  },
  "typeVersion": 2.1
}

================ Node #3362 ================
{
  "id": "10b6ad35-fc1c-47a2-b234-5de3557d1164",
  "name": "Sticky Note4",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    1320,
    1660
  ],
  "parameters": {
    "color": 7,
    "width": 335,
    "height": 113,
    "content": "### 5. Use Execution Data to Filter Logs\nIf you've registered for community+ or are on n8n cloud, best practice is to use execution node to allow filtering of execution logs."
  },
  "typeVersion": 1
}

================ Node #3363 ================
{
  "id": "e3563fae-ff35-457b-9fb1-784eda637518",
  "name": "Sticky Note5",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    1780,
    1280
  ],
  "parameters": {
    "color": 7,
    "width": 340,
    "height": 140,
    "content": "### 6. Use AI to Generate Factoid and Image\nUse an AI agent to automate the generation of factoids as requested by the user. This is a simple example but we recommend a adding a unique touch to stand out from the crowd!"
  },
  "typeVersion": 1
}

================ Node #3364 ================
{
  "id": "d1016c5d-c855-44c5-8ad3-a534bedaa8cf",
  "name": "Sticky Note6",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    2500,
    1040
  ],
  "parameters": {
    "color": 7,
    "width": 460,
    "height": 400,
    "content": "### 7. Send Email to User\nFinally, send a message to the user with both text and image.\nLog the event in the Airtable for later analysis if required.\n\n![Screenshot of email result](https://res.cloudinary.com/daglih2g8/image/upload/f_auto,q_auto/v1/n8n-workflows/dbpctdhohj3vlewy6oyc)"
  },
  "typeVersion": 1
}

================ Node #3365 ================
{
  "id": "773075fa-e5a2-4d4f-8527-eb07c7038b00",
  "name": "Sticky Note7",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    -420,
    680
  ],
  "parameters": {
    "width": 480,
    "height": 900,
    "content": "## Try It Out!\n\n### This n8n templates demonstrates how to build a simple subscriber service entirely in n8n using n8n forms as a frontend, n8n generally as the backend and Airtable as the storage layer.\n\nThis template in particular shows a fully automated service to send automated messages containing facts about a topic the user requested for.\n\n### How it works\n* An n8n form is setup up to allow users to subscribe with a desired topic and interval of which to recieve messages via n8n forms which is then added to the Airtable.\n* A scheduled trigger is executed every morning and searches for subscribers to send messages for based on their desired intervals.\n* Once found, Subscribers are sent to a subworkflow which performs the text content generation via an AI agent and also uses a vision model to generate an image.\n* Both are attached to an email which is sent to the subscriber. This email also includes an unsubscribe link.\n* The unsubscribe flow works similarly via n8n form interface which when submitted disables further scheduled emails to the user.\n\n## How to use\n* Make a copy of sample Airtable here: https://airtable.com/appL3dptT6ZTSzY9v/shrLukHafy5bwDRfD\n* Make sure the workflow is \"activated\" and the forms are available and reachable by your audience.\n\n\n### Need Help?\nJoin the [Discord](https://discord.com/invite/XPKeKXeB7d) or ask in the [Forum](https://community.n8n.io/)!\n\nHappy Hacking!"
  },
  "typeVersion": 1
}

================ Node #3366 ================
{
  "id": "6a9fc442-d0a3-48be-8dff-94f8d9cd5cf1",
  "name": "Schedule Trigger",
  "type": "n8n-nodes-base.scheduleTrigger",
  "position": [
    460,
    460
  ],
  "parameters": {
    "rule": {
      "interval": [
        {
          "field": "weeks"
        }
      ]
    }
  },
  "typeVersion": 1.2
}

================ Node #3367 ================
{
  "id": "484cbc41-f57d-4c3d-a458-e439d480d290",
  "name": "When clicking \u2018Test workflow\u2019",
  "type": "n8n-nodes-base.manualTrigger",
  "position": [
    460,
    640
  ],
  "parameters": {},
  "typeVersion": 1
}

================ Node #3368 ================
{
  "id": "b1b66e9b-5fea-407b-9c1e-39bd2a9d4a90",
  "name": "Sticky Note",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    460,
    100
  ],
  "parameters": {
    "width": 714.172987012987,
    "content": "## Send Google analytics to A.I. and save results to baserow\n\nThis workflow will check for country views, page engagement and google search console results. It will take this week's data and compare it to last week's data.\n\n[You can read more about this workflow here](https://rumjahn.com/how-i-used-a-i-to-be-an-seo-expert-and-analyzed-my-google-analytics-data-in-n8n-and-make-com/)"
  },
  "typeVersion": 1
}

================ Node #3369 ================
{
  "id": "adde29fc-ddb5-4b50-aa78-313ac9ede879",
  "name": "Sticky Note1",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    633.6540259740264,
    320
  ],
  "parameters": {
    "color": 4,
    "width": 2097.92831168831,
    "height": 342.6576623376624,
    "content": "## Property ID\n\n1. Create your [Google Analytics Credentials](https://docs.n8n.io/integrations/builtin/credentials/google/oauth-single-service/?utm_source=n8n_app&utm_medium=credential_settings&utm_campaign=create_new_credentials_modal)\n2. Enter your [property ID](https://developers.google.com/analytics/devguides/reporting/data/v1/property-id)."
  },
  "typeVersion": 1
}

================ Node #3370 ================
{
  "id": "f2fb8535-e81e-4ca1-80df-ee68edba6386",
  "name": "Get Page Engagement Stats for this week",
  "type": "n8n-nodes-base.googleAnalytics",
  "position": [
    700,
    460
  ],
  "parameters": {
    "simple": false,
    "returnAll": true,
    "metricsGA4": {
      "metricValues": [
        {
          "name": "screenPageViews",
          "listName": "other"
        },
        {
          "name": "activeUsers",
          "listName": "other"
        },
        {
          "name": "screenPageViewsPerUser",
          "listName": "other"
        },
        {
          "name": "eventCount",
          "listName": "other"
        }
      ]
    },
    "propertyId": {
      "__rl": true,
      "mode": "id",
      "value": "460520224"
    },
    "dimensionsGA4": {
      "dimensionValues": [
        {
          "name": "unifiedScreenName",
          "listName": "other"
        }
      ]
    },
    "additionalFields": {}
  },
  "credentials": {
    "googleAnalyticsOAuth2": {
      "id": "b1GX8VBMKCUNweV1",
      "name": "Google Analytics account"
    }
  },
  "typeVersion": 2
}

================ Node #3371 ================
{
  "id": "1d761425-cebf-4787-b286-b723a0851485",
  "name": "Get Page Engagement Stats for prior week",
  "type": "n8n-nodes-base.googleAnalytics",
  "position": [
    1060,
    460
  ],
  "parameters": {
    "simple": false,
    "endDate": "2024-10-23T00:00:00",
    "dateRange": "custom",
    "returnAll": true,
    "startDate": "={{$today.minus({days: 14})}}",
    "metricsGA4": {
      "metricValues": [
        {
          "name": "screenPageViews",
          "listName": "other"
        },
        {
          "name": "activeUsers",
          "listName": "other"
        },
        {
          "name": "screenPageViewsPerUser",
          "listName": "other"
        },
        {
          "name": "eventCount",
          "listName": "other"
        }
      ]
    },
    "propertyId": {
      "__rl": true,
      "mode": "id",
      "value": "460520224"
    },
    "dimensionsGA4": {
      "dimensionValues": [
        {
          "name": "unifiedScreenName",
          "listName": "other"
        }
      ]
    },
    "additionalFields": {}
  },
  "typeVersion": 2
}

================ Node #3372 ================
{
  "id": "f8dac36b-9e8a-407f-b923-b4cea368f1bc",
  "name": "Parse data from Google Analytics",
  "type": "n8n-nodes-base.code",
  "position": [
    880,
    460
  ],
  "parameters": {
    "jsCode": "function transformToUrlString(items) {\n // Debug logging\n console.log('Input items:', JSON.stringify(items, null, 2));\n \n // Check if items is an array and has content\n if (!Array.isArray(items) || items.length === 0) {\n console.log('Items is not an array or is empty');\n throw new Error('Invalid data structure');\n }\n\n // Check if first item exists and has json property\n if (!items[0] || !items[0].json) {\n console.log('First item is missing or has no json property');\n throw new Error('Invalid data structure');\n }\n\n // Get the analytics data\n const analyticsData = items[0].json;\n \n // Check if analyticsData has rows\n if (!analyticsData || !Array.isArray(analyticsData.rows)) {\n console.log('Analytics data is missing or has no rows array');\n throw new Error('Invalid data structure');\n }\n \n // Map each row to a simplified object\n const simplified = analyticsData.rows.map(row => {\n if (!row.dimensionValues?.[0]?.value || !row.metricValues?.length) {\n console.log('Invalid row structure:', row);\n throw new Error('Invalid row structure');\n }\n \n return {\n page: row.dimensionValues[0].value,\n pageViews: parseInt(row.metricValues[0].value) || 0,\n activeUsers: parseInt(row.metricValues[1].value) || 0,\n viewsPerUser: parseFloat(row.metricValues[2].value) || 0,\n eventCount: parseInt(row.metricValues[3].value) || 0\n };\n });\n \n // Convert to JSON string and encode for URL\n return encodeURIComponent(JSON.stringify(simplified));\n}\n\n// Get input data and transform it\nconst urlString = transformToUrlString($input.all());\n\n// Return the result\nreturn { json: { urlString } };"
  },
  "typeVersion": 2
}

================ Node #3373 ================
{
  "id": "ed880442-c92e-4347-b277-e8794aea6fbc",
  "name": "Parse GA data",
  "type": "n8n-nodes-base.code",
  "position": [
    1240,
    460
  ],
  "parameters": {
    "jsCode": "function transformToUrlString(items) {\n // Debug logging\n console.log('Input items:', JSON.stringify(items, null, 2));\n \n // Check if items is an array and has content\n if (!Array.isArray(items) || items.length === 0) {\n console.log('Items is not an array or is empty');\n throw new Error('Invalid data structure');\n }\n\n // Check if first item exists and has json property\n if (!items[0] || !items[0].json) {\n console.log('First item is missing or has no json property');\n throw new Error('Invalid data structure');\n }\n\n // Get the analytics data\n const analyticsData = items[0].json;\n \n // Check if analyticsData has rows\n if (!analyticsData || !Array.isArray(analyticsData.rows)) {\n console.log('Analytics data is missing or has no rows array');\n throw new Error('Invalid data structure');\n }\n \n // Map each row to a simplified object\n const simplified = analyticsData.rows.map(row => {\n if (!row.dimensionValues?.[0]?.value || !row.metricValues?.length) {\n console.log('Invalid row structure:', row);\n throw new Error('Invalid row structure');\n }\n \n return {\n page: row.dimensionValues[0].value,\n pageViews: parseInt(row.metricValues[0].value) || 0,\n activeUsers: parseInt(row.metricValues[1].value) || 0,\n viewsPerUser: parseFloat(row.metricValues[2].value) || 0,\n eventCount: parseInt(row.metricValues[3].value) || 0\n };\n });\n \n // Convert to JSON string and encode for URL\n return encodeURIComponent(JSON.stringify(simplified));\n}\n\n// Get input data and transform it\nconst urlString = transformToUrlString($input.all());\n\n// Return the result\nreturn { json: { urlString } };"
  },
  "typeVersion": 2
}

================ Node #3374 ================
{
  "id": "46e092cc-af94-4e64-aa92-931c56345eff",
  "name": "Get Google Search Results for this week",
  "type": "n8n-nodes-base.googleAnalytics",
  "position": [
    1420,
    460
  ],
  "parameters": {
    "simple": false,
    "returnAll": true,
    "metricsGA4": {
      "metricValues": [
        {
          "name": "activeUsers",
          "listName": "other"
        },
        {
          "name": "engagedSessions",
          "listName": "other"
        },
        {
          "name": "engagementRate",
          "listName": "other"
        },
        {
          "name": "eventCount",
          "listName": "other"
        },
        {
          "name": "organicGoogleSearchAveragePosition",
          "listName": "other"
        },
        {
          "name": "organicGoogleSearchClickThroughRate",
          "listName": "other"
        },
        {
          "name": "organicGoogleSearchClicks",
          "listName": "other"
        },
        {
          "name": "organicGoogleSearchImpressions",
          "listName": "other"
        }
      ]
    },
    "propertyId": {
      "__rl": true,
      "mode": "id",
      "value": "460520224"
    },
    "dimensionsGA4": {
      "dimensionValues": [
        {
          "name": "landingPagePlusQueryString",
          "listName": "other"
        }
      ]
    },
    "additionalFields": {}
  },
  "credentials": {
    "googleAnalyticsOAuth2": {
      "id": "b1GX8VBMKCUNweV1",
      "name": "Google Analytics account"
    }
  },
  "typeVersion": 2
}

================ Node #3375 ================
{
  "id": "709d0aaf-bd3d-4d83-9e66-b7df495855bd",
  "name": "Get Google Search Results for last week",
  "type": "n8n-nodes-base.googleAnalytics",
  "position": [
    1780,
    460
  ],
  "parameters": {
    "simple": false,
    "endDate": "={{$today.minus({days: 7})}}",
    "dateRange": "custom",
    "returnAll": true,
    "startDate": "={{$today.minus({days: 14})}}",
    "metricsGA4": {
      "metricValues": [
        {
          "name": "activeUsers",
          "listName": "other"
        },
        {
          "name": "engagedSessions",
          "listName": "other"
        },
        {
          "name": "engagementRate",
          "listName": "other"
        },
        {
          "name": "eventCount",
          "listName": "other"
        },
        {
          "name": "organicGoogleSearchAveragePosition",
          "listName": "other"
        },
        {
          "name": "organicGoogleSearchClickThroughRate",
          "listName": "other"
        },
        {
          "name": "organicGoogleSearchClicks",
          "listName": "other"
        },
        {
          "name": "organicGoogleSearchImpressions",
          "listName": "other"
        }
      ]
    },
    "propertyId": {
      "__rl": true,
      "mode": "id",
      "value": "460520224"
    },
    "dimensionsGA4": {
      "dimensionValues": [
        {
          "name": "landingPagePlusQueryString",
          "listName": "other"
        }
      ]
    },
    "additionalFields": {}
  },
  "credentials": {
    "googleAnalyticsOAuth2": {
      "id": "b1GX8VBMKCUNweV1",
      "name": "Google Analytics account"
    }
  },
  "typeVersion": 2
}

================ Node #3376 ================
{
  "id": "7d3835d6-d1f5-4159-8e34-871871e63989",
  "name": "Parse Google Analytics Data",
  "type": "n8n-nodes-base.code",
  "position": [
    1600,
    460
  ],
  "parameters": {
    "jsCode": "function transformToUrlString(items) {\n // In n8n, we need to check if items is an array and get the json property\n const data = items[0].json;\n \n if (!data || !data.rows) {\n console.log('No valid data found');\n return encodeURIComponent(JSON.stringify([]));\n }\n \n try {\n // Process each row\n const simplified = data.rows.map(row => ({\n page: row.dimensionValues[0].value,\n activeUsers: parseInt(row.metricValues[0].value) || 0,\n engagedSessions: parseInt(row.metricValues[1].value) || 0,\n engagementRate: parseFloat(row.metricValues[2].value) || 0,\n eventCount: parseInt(row.metricValues[3].value) || 0,\n avgPosition: parseFloat(row.metricValues[4].value) || 0,\n ctr: parseFloat(row.metricValues[5].value) || 0,\n clicks: parseInt(row.metricValues[6].value) || 0,\n impressions: parseInt(row.metricValues[7].value) || 0\n }));\n \n return encodeURIComponent(JSON.stringify(simplified));\n } catch (error) {\n console.log('Error processing data:', error);\n throw new Error('Invalid data structure');\n }\n}\n\n// Get the input data\nconst items = $input.all();\n\n// Process the data\nconst result = transformToUrlString(items);\n\n// Return the result\nreturn { json: { urlString: result } };"
  },
  "typeVersion": 2
}

================ Node #3377 ================
{
  "id": "c018fda4-a2e6-48f4-aabb-039c66374dc7",
  "name": "Parse Google Analytics Data1",
  "type": "n8n-nodes-base.code",
  "position": [
    1940,
    460
  ],
  "parameters": {
    "jsCode": "function transformToUrlString(items) {\n // In n8n, we need to check if items is an array and get the json property\n const data = items[0].json;\n \n if (!data || !data.rows) {\n console.log('No valid data found');\n return encodeURIComponent(JSON.stringify([]));\n }\n \n try {\n // Process each row\n const simplified = data.rows.map(row => ({\n page: row.dimensionValues[0].value,\n activeUsers: parseInt(row.metricValues[0].value) || 0,\n engagedSessions: parseInt(row.metricValues[1].value) || 0,\n engagementRate: parseFloat(row.metricValues[2].value) || 0,\n eventCount: parseInt(row.metricValues[3].value) || 0,\n avgPosition: parseFloat(row.metricValues[4].value) || 0,\n ctr: parseFloat(row.metricValues[5].value) || 0,\n clicks: parseInt(row.metricValues[6].value) || 0,\n impressions: parseInt(row.metricValues[7].value) || 0\n }));\n \n return encodeURIComponent(JSON.stringify(simplified));\n } catch (error) {\n console.log('Error processing data:', error);\n throw new Error('Invalid data structure');\n }\n}\n\n// Get the input data\nconst items = $input.all();\n\n// Process the data\nconst result = transformToUrlString(items);\n\n// Return the result\nreturn { json: { urlString: result } };"
  },
  "typeVersion": 2
}

================ Node #3378 ================
{
  "id": "d8f775cd-daf9-42de-a527-d932be46d945",
  "name": "Get Country views data for this week",
  "type": "n8n-nodes-base.googleAnalytics",
  "position": [
    2120,
    460
  ],
  "parameters": {
    "simple": false,
    "returnAll": true,
    "metricsGA4": {
      "metricValues": [
        {
          "name": "activeUsers",
          "listName": "other"
        },
        {
          "name": "newUsers",
          "listName": "other"
        },
        {
          "name": "engagementRate",
          "listName": "other"
        },
        {
          "name": "engagedSessions",
          "listName": "other"
        },
        {
          "name": "eventCount",
          "listName": "other"
        },
        {
          "listName": "other"
        },
        {
          "name": "sessions",
          "listName": "other"
        }
      ]
    },
    "propertyId": {
      "__rl": true,
      "mode": "id",
      "value": "460520224"
    },
    "dimensionsGA4": {
      "dimensionValues": [
        {
          "name": "country",
          "listName": "other"
        }
      ]
    },
    "additionalFields": {}
  },
  "credentials": {
    "googleAnalyticsOAuth2": {
      "id": "b1GX8VBMKCUNweV1",
      "name": "Google Analytics account"
    }
  },
  "typeVersion": 2
}

================ Node #3379 ================
{
  "id": "7119e57c-cbf4-49a9-b0c9-1f3da1fd2af3",
  "name": "Get Country views data for last week",
  "type": "n8n-nodes-base.googleAnalytics",
  "position": [
    2440,
    460
  ],
  "parameters": {
    "simple": false,
    "endDate": "={{$today.minus({days: 7})}}",
    "dateRange": "custom",
    "returnAll": true,
    "startDate": "={{$today.minus({days: 14})}}",
    "metricsGA4": {
      "metricValues": [
        {
          "name": "activeUsers",
          "listName": "other"
        },
        {
          "name": "newUsers",
          "listName": "other"
        },
        {
          "name": "engagementRate",
          "listName": "other"
        },
        {
          "name": "engagedSessions",
          "listName": "other"
        },
        {
          "name": "eventCount",
          "listName": "other"
        },
        {
          "listName": "other"
        },
        {
          "name": "sessions",
          "listName": "other"
        }
      ]
    },
    "propertyId": {
      "__rl": true,
      "mode": "id",
      "value": "460520224"
    },
    "dimensionsGA4": {
      "dimensionValues": [
        {
          "name": "country",
          "listName": "other"
        }
      ]
    },
    "additionalFields": {}
  },
  "typeVersion": 2
}

================ Node #3380 ================
{
  "id": "546d6cd2-6db6-4276-be35-abbe5a7e9b6a",
  "name": "Parse Google analytics data",
  "type": "n8n-nodes-base.code",
  "position": [
    2280,
    460
  ],
  "parameters": {
    "jsCode": "function transformToUrlString(items) {\n // In n8n, we need to check if items is an array and get the json property\n const data = items[0].json;\n \n if (!data || !data.rows) {\n console.log('No valid data found');\n return encodeURIComponent(JSON.stringify([]));\n }\n \n try {\n // Process each row\n const simplified = data.rows.map(row => ({\n country: row.dimensionValues[0].value,\n activeUsers: parseInt(row.metricValues[0].value) || 0,\n newUsers: parseInt(row.metricValues[1].value) || 0,\n engagementRate: parseFloat(row.metricValues[2].value) || 0,\n engagedSessions: parseInt(row.metricValues[3].value) || 0,\n eventCount: parseInt(row.metricValues[4].value) || 0,\n totalUsers: parseInt(row.metricValues[5].value) || 0,\n sessions: parseInt(row.metricValues[6].value) || 0\n }));\n \n return encodeURIComponent(JSON.stringify(simplified));\n } catch (error) {\n console.log('Error processing data:', error);\n throw new Error('Invalid data structure');\n }\n}\n\n// Get the input data\nconst items = $input.all();\n\n// Process the data\nconst result = transformToUrlString(items);\n\n// Return the result\nreturn { json: { urlString: result } };"
  },
  "typeVersion": 2
}

================ Node #3381 ================
{
  "id": "87cb137c-686d-49a5-8657-06ed0c5f5c27",
  "name": "Parse Google analytics data1",
  "type": "n8n-nodes-base.code",
  "position": [
    2600,
    460
  ],
  "parameters": {
    "jsCode": "function transformToUrlString(items) {\n // In n8n, we need to check if items is an array and get the json property\n const data = items[0].json;\n \n if (!data || !data.rows) {\n console.log('No valid data found');\n return encodeURIComponent(JSON.stringify([]));\n }\n \n try {\n // Process each row\n const simplified = data.rows.map(row => ({\n country: row.dimensionValues[0].value,\n activeUsers: parseInt(row.metricValues[0].value) || 0,\n newUsers: parseInt(row.metricValues[1].value) || 0,\n engagementRate: parseFloat(row.metricValues[2].value) || 0,\n engagedSessions: parseInt(row.metricValues[3].value) || 0,\n eventCount: parseInt(row.metricValues[4].value) || 0,\n totalUsers: parseInt(row.metricValues[5].value) || 0,\n sessions: parseInt(row.metricValues[6].value) || 0\n }));\n \n return encodeURIComponent(JSON.stringify(simplified));\n } catch (error) {\n console.log('Error processing data:', error);\n throw new Error('Invalid data structure');\n }\n}\n\n// Get the input data\nconst items = $input.all();\n\n// Process the data\nconst result = transformToUrlString(items);\n\n// Return the result\nreturn { json: { urlString: result } };"
  },
  "typeVersion": 2
}

================ Node #3382 ================
{
  "id": "06c4478d-a13a-4587-9f1f-451a68798a9f",
  "name": "Send page data to A.I.",
  "type": "n8n-nodes-base.httpRequest",
  "position": [
    2760,
    460
  ],
  "parameters": {
    "url": "https://openrouter.ai/api/v1/chat/completions",
    "method": "POST",
    "options": {},
    "jsonBody": "={\n \"model\": \"meta-llama/llama-3.1-70b-instruct:free\",\n \"messages\": [\n {\n \"role\": \"user\",\n \"content\": \"You are an SEO expert. Compare the data from past 2 weeks, give me a table in markdown. Then give me 5 suggestions to improve my SEO. Output the data so that it works with markdown editors. Data from 2 weeks ago:{{ $json.urlString }} Data from last week: {{ $('Parse data from Google Analytics').item.json.urlString }}\"\n }\n ]\n}",
    "sendBody": true,
    "specifyBody": "json",
    "authentication": "genericCredentialType",
    "genericAuthType": "httpHeaderAuth"
  },
  "typeVersion": 4.2,
  "alwaysOutputData": false
}

================ Node #3383 ================
{
  "id": "4ad522b0-afe4-4eff-aa16-b86cc892ead8",
  "name": "Send page Search data to A.I.",
  "type": "n8n-nodes-base.httpRequest",
  "position": [
    2920,
    460
  ],
  "parameters": {
    "url": "https://openrouter.ai/api/v1/chat/completions",
    "method": "POST",
    "options": {},
    "jsonBody": "={\n \"model\": \"meta-llama/llama-3.1-70b-instruct:free\",\n \"messages\": [\n {\n \"role\": \"user\",\n \"content\": \"You are an SEO expert. Compare the data from past 2 weeks, give me a table in markdown. Then give me 5 suggestions to improve my SEO. Output the data so that it works with markdown editors. Data from 2 weeks ago:{{ $('Parse Google Analytics Data1').item.json.urlString }} Data from last week:{{ $('Parse Google Analytics Data').item.json.urlString }}\"\n }\n ]\n}",
    "sendBody": true,
    "specifyBody": "json",
    "authentication": "genericCredentialType",
    "genericAuthType": "httpHeaderAuth"
  },
  "typeVersion": 4.2,
  "alwaysOutputData": false
}

================ Node #3384 ================
{
  "id": "07e1eebf-f16a-44c0-83b5-76bf65a3d3fc",
  "name": "Send country view data to A.I.",
  "type": "n8n-nodes-base.httpRequest",
  "position": [
    3080,
    460
  ],
  "parameters": {
    "url": "https://openrouter.ai/api/v1/chat/completions",
    "method": "POST",
    "options": {},
    "jsonBody": "={\n \"model\": \"meta-llama/llama-3.1-70b-instruct:free\",\n \"messages\": [\n {\n \"role\": \"user\",\n \"content\": \"You are an SEO expert. Compare the data from past 2 weeks, give me a table in markdown. Then give me 5 suggestions to improve my SEO. Output the data so that it works with markdown editors. Data from 2 weeks ago:{{ $('Parse Google analytics data1').item.json.urlString }} Data from last week:{{ $('Parse Google analytics data').item.json.urlString }}\"\n }\n ]\n}",
    "sendBody": true,
    "specifyBody": "json",
    "authentication": "genericCredentialType",
    "genericAuthType": "httpHeaderAuth"
  },
  "typeVersion": 4.2,
  "alwaysOutputData": false
}

================ Node #3385 ================
{
  "id": "c4648ad8-2377-42a0-a431-931b53631c9d",
  "name": "Save A.I. output to Baserow",
  "type": "n8n-nodes-base.baserow",
  "position": [
    3240,
    460
  ],
  "parameters": {
    "tableId": 601,
    "fieldsUi": {
      "fieldValues": [
        {
          "fieldId": 5833,
          "fieldValue": "Name of your blog"
        },
        {
          "fieldId": 5831,
          "fieldValue": "={{ $('Send page data to A.I.').item.json.choices[0].message.content }}"
        },
        {
          "fieldId": 5830,
          "fieldValue": "={{ $('Send page Search data to A.I.').item.json.choices[0].message.content }}"
        },
        {
          "fieldId": 5832,
          "fieldValue": "={{ $json.choices[0].message.content }}"
        },
        {
          "fieldId": 5829,
          "fieldValue": "={{ DateTime.now() }}"
        }
      ]
    },
    "operation": "create",
    "databaseId": 121
  },
  "typeVersion": 1
}

================ Node #3386 ================
{
  "id": "e185c836-c12f-4452-92bd-0daaf33b653a",
  "name": "Sticky Note2",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    2760,
    180
  ],
  "parameters": {
    "color": 5,
    "width": 441.7412987012988,
    "height": 508.95792207792226,
    "content": "## Send data to A.I.\n\nFill in your Openrouter A.I. credentials. Use Header Auth.\n- Username: Authorization\n- Password: Bearer {insert your API key}\n\nRemember to add a space after bearer. Also, feel free to modify the prompt to A.1."
  },
  "typeVersion": 1
}

================ Node #3387 ================
{
  "id": "a1de2d16-d09e-4c74-8be1-f6bab8c34246",
  "name": "Sticky Note3",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    3220,
    180
  ],
  "parameters": {
    "color": 6,
    "width": 331.32883116883124,
    "height": 474.88,
    "content": "## Send data to Baserow\n\nCreate a table first with the following columns:\n- Name\n- Country Views\n- Page Views\n- Search Report\n- Blog \n\nEnter the name of your website under \"Blog\" field."
  },
  "typeVersion": 1
}

================ Node #3388 ================
{
  "id": "50e12e63-df28-45ac-9208-48cbf5116d09",
  "name": "Read emails (IMAP)",
  "type": "n8n-nodes-base.emailReadImap",
  "position": [
    340,
    260
  ],
  "parameters": {
    "options": {},
    "postProcessAction": "nothing"
  },
  "credentials": {
    "imap": {
      "id": "gXtdakU9M02LBQc3",
      "name": "IMAP account"
    }
  },
  "typeVersion": 2
}

================ Node #3389 ================
{
  "id": "6565350b-2269-44e3-8f36-8797f32d3e09",
  "name": "Send email to A.I. to summarize",
  "type": "n8n-nodes-base.httpRequest",
  "position": [
    700,
    260
  ],
  "parameters": {
    "url": "https://openrouter.ai/api/v1/chat/completions",
    "method": "POST",
    "options": {},
    "jsonBody": "={\n \"model\": \"meta-llama/llama-3.1-70b-instruct:free\",\n \"messages\": [\n {\n \"role\": \"user\",\n \"content\": \"I want you to read and summarize all the emails. If it's not rimportant, just give me a short summary with less than 10 words.\\n\\nHighlight as important if it is, add an emoji to indicate it is urgent:\\nFor the relevant content, find any action items and deadlines. Sometimes I need to sign up before a certain date or pay before a certain date, please highlight that in the summary for me.\\n\\nPut the deadline in BOLD at the top. If the email is not important, keep the summary short to 1 sentence only.\\n\\nHere's the email content for you to read:\\nSender email address: {{ encodeURIComponent($json.from) }}\\nSubject: {{ encodeURIComponent($json.subject) }}\\n{{ encodeURIComponent($json.textHtml) }}\"\n }\n ]\n}",
    "sendBody": true,
    "specifyBody": "json",
    "authentication": "genericCredentialType",
    "genericAuthType": "httpHeaderAuth"
  },
  "credentials": {
    "httpHeaderAuth": {
      "id": "WY7UkF14ksPKq3S8",
      "name": "Header Auth account 2"
    }
  },
  "typeVersion": 4.2,
  "alwaysOutputData": false
}

================ Node #3390 ================
{
  "id": "d04c422a-c000-4e48-82d0-0bf44bcd9fff",
  "name": "Send summarized content to messenger",
  "type": "n8n-nodes-base.httpRequest",
  "position": [
    1100,
    260
  ],
  "parameters": {
    "url": "https://api.line.me/v2/bot/message/push",
    "method": "POST",
    "options": {},
    "jsonBody": "={\n \"to\": \"U3ec262c49811f30cdc2d2f2b0a0df99a\",\n \"messages\": [\n {\n \"type\": \"text\",\n \"text\": \"{{ $json.choices[0].message.content.replace(/\\n/g, \"\\\\n\") }}\"\n }\n ]\n}\n\n\n ",
    "sendBody": true,
    "specifyBody": "json",
    "authentication": "genericCredentialType",
    "genericAuthType": "httpHeaderAuth"
  },
  "credentials": {
    "httpHeaderAuth": {
      "id": "SzcKjO9Nn9vZPL2H",
      "name": "Header Auth account 5"
    }
  },
  "typeVersion": 4.2
}

================ Node #3391 ================
{
  "id": "57a1219c-4f40-407c-855b-86c4c7c468bb",
  "name": "Sticky Note",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    180,
    0
  ],
  "parameters": {
    "width": 361,
    "height": 90,
    "content": "## Summarize emails with A.I.\nYou can find out more about the [use case](https://rumjahn.com/how-a-i-saved-my-kids-school-life-and-my-marriage/)"
  },
  "typeVersion": 1
}

================ Node #3392 ================
{
  "id": "17686264-56ac-419e-a32b-dc5c75f15f1f",
  "name": "Sticky Note1",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    283,
    141
  ],
  "parameters": {
    "color": 5,
    "width": 229,
    "height": 280,
    "content": "Find your email server's IMAP Settings. \n- Link for [gmail](https://www.getmailspring.com/setup/access-gmail-via-imap-smtp)"
  },
  "typeVersion": 1
}

================ Node #3393 ================
{
  "id": "1862abd6-7dca-4c66-90d6-110d4fcf4d99",
  "name": "Sticky Note2",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    580,
    0
  ],
  "parameters": {
    "color": 6,
    "width": 365,
    "height": 442,
    "content": "For the A.I. you can use Openrouter.ai. \n- Set up a free account\n- The A.I. model selected is FREE to use.\n## Credentials\n- Use header auth\n- Username: Authorization\n- Password: Bearer {insert your API key}.\n- The password is \"Bearer\" space plus your API key."
  },
  "typeVersion": 1
}

================ Node #3394 ================
{
  "id": "c4a3a76f-539d-4bbf-8f95-d7aaebf39a55",
  "name": "Sticky Note3",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    1000,
    0
  ],
  "parameters": {
    "color": 4,
    "width": 307,
    "height": 439,
    "content": "Don't use the official Line node. It's outdated.\n## Credentials\n- Use header auth\n- Username: Authorization\n- Password: Bearer {channel access token}\n\nYou can find your channel access token at the [Line API console](https://developers.line.biz/console/). Go to Messaging API and scroll to the bottom."
  },
  "typeVersion": 1
}

================ Node #3395 ================
{
  "id": "b165115d-5505-4e03-bf41-c21320cb8b09",
  "name": "Sticky Note1",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    80,
    40
  ],
  "parameters": {
    "color": 7,
    "width": 681.8337349708484,
    "height": 843.1482165886073,
    "content": "## Workflow: Text automations using Apple Shortcuts\n\n**Overview**\n- This workflow answers user requests sent via Apple Shortcuts\n- Several Shortcuts call the same webhook, with a query and a type of query\n- Types of query are:\n - translate to english\n - translate to spanish\n - correct grammar (without changing the actual content)\n - make content shorter\n - make content longer\n\n\n**How it works**\n- Select a text you are writing\n- Launch the shortcut\n- The text is sent to the webhook\n- Depending on the type of request, a different prompt is used\n- Each request is sent to an OpenAI node\n- The workflow responds to the request with the response from GPT\n- Shortcut replace the selected text with the new one\n\n**How to use it**\n- Activate the workflow\n- Download [this Shortcut template](https://drive.usercontent.google.com/u/0/uc?id=16zs5iJX7KeX_4e0SoV49_KfbU7-EF0NE&export=download)\n- Install the shortcut\n- In step 2 of the shortcut, change the url of the Webhook\n- In Shortcut details, \"add Keyboard Shortcut\" with the key you want to use to launch the shortcut\n- Go to settings, advanced, check \"Allow running scripts\"\n- You are ready to use the shortcut. Select a text and hit the keyboard shortcut you just defined\n\n\n**Notes**\n- If you use rich formatting, you'll have to test multiple ways to replace characters in the output. For example, you might use `{{ $json.message.content.output.replaceAll('\\n', \"<br/>\") }}` in the \"Respond to Shortcut\" node depending on the app you use most.\n- This is a basic example that you can extend and modify at your will\n- You can duplicate and modify the example shortcut based on your need, as well as making new automations in this workflow."
  },
  "typeVersion": 1
}

================ Node #3396 ================
{
  "id": "c45400b8-d3b8-47f7-81c6-d791bce4c266",
  "name": "Switch",
  "type": "n8n-nodes-base.switch",
  "position": [
    1020,
    380
  ],
  "parameters": {
    "rules": {
      "values": [
        {
          "outputKey": "spanish",
          "conditions": {
            "options": {
              "version": 2,
              "leftValue": "",
              "caseSensitive": true,
              "typeValidation": "strict"
            },
            "combinator": "and",
            "conditions": [
              {
                "operator": {
                  "type": "string",
                  "operation": "equals"
                },
                "leftValue": "={{ $json.body.type }}",
                "rightValue": "spanish"
              }
            ]
          },
          "renameOutput": true
        },
        {
          "outputKey": "english",
          "conditions": {
            "options": {
              "version": 2,
              "leftValue": "",
              "caseSensitive": true,
              "typeValidation": "strict"
            },
            "combinator": "and",
            "conditions": [
              {
                "id": "bedb302f-646c-4dcd-8246-1fcfecfe3f2e",
                "operator": {
                  "name": "filter.operator.equals",
                  "type": "string",
                  "operation": "equals"
                },
                "leftValue": "={{ $json.body.type }}",
                "rightValue": "english"
              }
            ]
          },
          "renameOutput": true
        },
        {
          "outputKey": "grammar",
          "conditions": {
            "options": {
              "version": 2,
              "leftValue": "",
              "caseSensitive": true,
              "typeValidation": "strict"
            },
            "combinator": "and",
            "conditions": [
              {
                "id": "94e6cf7d-576d-4ad9-85b0-c6b945eb41b7",
                "operator": {
                  "name": "filter.operator.equals",
                  "type": "string",
                  "operation": "equals"
                },
                "leftValue": "={{ $json.body.type }}",
                "rightValue": "grammar"
              }
            ]
          },
          "renameOutput": true
        },
        {
          "outputKey": "shorter",
          "conditions": {
            "options": {
              "version": 2,
              "leftValue": "",
              "caseSensitive": true,
              "typeValidation": "strict"
            },
            "combinator": "and",
            "conditions": [
              {
                "id": "1ed0d1e1-2df0-4f8d-b102-4004a25919ed",
                "operator": {
                  "name": "filter.operator.equals",
                  "type": "string",
                  "operation": "equals"
                },
                "leftValue": "={{ $json.body.type }}",
                "rightValue": "shorter"
              }
            ]
          },
          "renameOutput": true
        },
        {
          "outputKey": "longer",
          "conditions": {
            "options": {
              "version": 2,
              "leftValue": "",
              "caseSensitive": true,
              "typeValidation": "strict"
            },
            "combinator": "and",
            "conditions": [
              {
                "id": "4756df03-7e7c-4e28-9b37-14684326b083",
                "operator": {
                  "name": "filter.operator.equals",
                  "type": "string",
                  "operation": "equals"
                },
                "leftValue": "={{ $json.body.type }}",
                "rightValue": "longer"
              }
            ]
          },
          "renameOutput": true
        }
      ]
    },
    "options": {}
  },
  "typeVersion": 3.2
}

================ Node #3397 ================
{
  "id": "48e0e58e-6293-4e11-a488-ca9943b53484",
  "name": "Respond to Shortcut",
  "type": "n8n-nodes-base.respondToWebhook",
  "position": [
    1840,
    400
  ],
  "parameters": {
    "options": {},
    "respondWith": "text",
    "responseBody": "={{ $json.message.content.output.replaceAll('\\n', '<br/>') }}"
  },
  "typeVersion": 1.1
}

================ Node #3398 ================
{
  "id": "2655b782-9538-416c-ae65-35f8c77889c7",
  "name": "Webhook from Shortcut",
  "type": "n8n-nodes-base.webhook",
  "position": [
    840,
    400
  ],
  "webhookId": "e4ddadd2-a127-4690-98ca-e9ee75c1bdd6",
  "parameters": {
    "path": "shortcut-global-as",
    "options": {},
    "httpMethod": "POST",
    "responseMode": "responseNode"
  },
  "typeVersion": 2
}

================ Node #3399 ================
{
  "id": "880ed4a2-0756-4943-a51f-368678e22273",
  "name": "OpenAI - Make Shorter",
  "type": "@n8n/n8n-nodes-langchain.openAi",
  "position": [
    1300,
    540
  ],
  "parameters": {
    "modelId": {
      "__rl": true,
      "mode": "list",
      "value": "gpt-4o-mini",
      "cachedResultName": "GPT-4O-MINI"
    },
    "options": {},
    "messages": {
      "values": [
        {
          "role": "system",
          "content": "Summarize this content a little bit (5% shorter)\nOutput a JSON with a single field: output"
        },
        {
          "content": "={{ $json.body.content }}"
        }
      ]
    },
    "jsonOutput": true
  },
  "credentials": {
    "openAiApi": {
      "id": "WqzqjezKh8VtxdqA",
      "name": "OpenAi account - Baptiste"
    }
  },
  "typeVersion": 1.4
}

================ Node #3400 ================
{
  "id": "c6c6d988-7aab-4677-af1f-880d05691ec3",
  "name": "OpenAI - Make Longer",
  "type": "@n8n/n8n-nodes-langchain.openAi",
  "position": [
    1300,
    680
  ],
  "parameters": {
    "modelId": {
      "__rl": true,
      "mode": "list",
      "value": "gpt-4o-mini",
      "cachedResultName": "GPT-4O-MINI"
    },
    "options": {},
    "messages": {
      "values": [
        {
          "role": "system",
          "content": "Make this content a little longer (5% longer)\nOutput a JSON with a single field: output"
        },
        {
          "content": "={{ $json.body.content }}"
        }
      ]
    },
    "jsonOutput": true
  },
  "credentials": {
    "openAiApi": {
      "id": "WqzqjezKh8VtxdqA",
      "name": "OpenAi account - Baptiste"
    }
  },
  "typeVersion": 1.4
}

================ Node #3401 ================
{
  "id": "8e6de4b7-22c3-45c9-a8d7-d498cf829b6f",
  "name": "OpenAI - Correct Grammar",
  "type": "@n8n/n8n-nodes-langchain.openAi",
  "position": [
    1300,
    400
  ],
  "parameters": {
    "modelId": {
      "__rl": true,
      "mode": "list",
      "value": "gpt-4o-mini",
      "cachedResultName": "GPT-4O-MINI"
    },
    "options": {},
    "messages": {
      "values": [
        {
          "role": "system",
          "content": "Correct grammar only, don't change the actual contents.\nOutput a JSON with a single field: output"
        },
        {
          "content": "={{ $json.body.content }}"
        }
      ]
    },
    "jsonOutput": true
  },
  "credentials": {
    "openAiApi": {
      "id": "WqzqjezKh8VtxdqA",
      "name": "OpenAi account - Baptiste"
    }
  },
  "typeVersion": 1.4
}

================ Node #3402 ================
{
  "id": "bc006b36-5a96-4c3a-9a28-2778a6c49f10",
  "name": "OpenAI - To Spanish",
  "type": "@n8n/n8n-nodes-langchain.openAi",
  "position": [
    1300,
    120
  ],
  "parameters": {
    "modelId": {
      "__rl": true,
      "mode": "list",
      "value": "gpt-4o-mini",
      "cachedResultName": "GPT-4O-MINI"
    },
    "options": {},
    "messages": {
      "values": [
        {
          "role": "system",
          "content": "Translate this message to Spanish.\nOutput a JSON with a single field: output"
        },
        {
          "content": "={{ $json.body.content }}"
        }
      ]
    },
    "jsonOutput": true
  },
  "credentials": {
    "openAiApi": {
      "id": "WqzqjezKh8VtxdqA",
      "name": "OpenAi account - Baptiste"
    }
  },
  "typeVersion": 1.4
}

================ Node #3403 ================
{
  "id": "330d2e40-1e52-4517-94e0-ce96226697fa",
  "name": "OpenAI - To English",
  "type": "@n8n/n8n-nodes-langchain.openAi",
  "position": [
    1300,
    260
  ],
  "parameters": {
    "modelId": {
      "__rl": true,
      "mode": "list",
      "value": "gpt-4o-mini",
      "cachedResultName": "GPT-4O-MINI"
    },
    "options": {},
    "messages": {
      "values": [
        {
          "role": "system",
          "content": "Translate this message to English.\nOutput a JSON with a single field: output"
        },
        {
          "content": "={{ $json.body.content }}"
        }
      ]
    },
    "jsonOutput": true
  },
  "credentials": {
    "openAiApi": {
      "id": "WqzqjezKh8VtxdqA",
      "name": "OpenAi account - Baptiste"
    }
  },
  "typeVersion": 1.4
}

================ Node #3404 ================
{
  "id": "925e4b55-ac26-4c16-941f-66d17b6794ab",
  "name": "Sticky Note",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    80,
    900
  ],
  "parameters": {
    "color": 7,
    "width": 469.15174499329123,
    "height": 341.88919758842485,
    "content": "### Check these explanations [< 3 min]\n\n[![Check the explanations](https://cdn.loom.com/sessions/thumbnails/c5b657568af64bb1b50fa8e8a91c45d1-1db3990a618986c9-full-play.gif)](https://www.loom.com/share/c5b657568af64bb1b50fa8e8a91c45d1?sid=a406be73-55eb-4754-9f51-9ddf49b22d69)"
  },
  "typeVersion": 1
}

================ Node #3405 ================
{
  "id": "96ef3bfe-a493-4377-b090-6b2d02d87480",
  "name": "Verify Webhook",
  "type": "n8n-nodes-base.respondToWebhook",
  "position": [
    1420,
    800
  ],
  "parameters": {
    "options": {
      "responseCode": 200,
      "responseHeaders": {
        "entries": [
          {
            "name": "Content-type",
            "value": "application/json"
          }
        ]
      }
    },
    "respondWith": "json",
    "responseBody": "={\"challenge\":\"{{ $json.body.challenge }}\"}"
  },
  "typeVersion": 1
}

================ Node #3406 ================
{
  "id": "38db6da6-13bf-47a1-b5cb-f06403b309ac",
  "name": "OpenAI Chat Model",
  "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
  "position": [
    2120,
    1220
  ],
  "parameters": {
    "model": "gpt-4o",
    "options": {}
  },
  "credentials": {
    "openAiApi": {
      "id": "QpFZ2EiM3WGl6Zr3",
      "name": "Marketing OpenAI"
    }
  },
  "typeVersion": 1
}

================ Node #3407 ================
{
  "id": "139b606d-29ae-480d-bde7-458ef45dba01",
  "name": "No Operation, do nothing",
  "type": "n8n-nodes-base.noOp",
  "position": [
    1840,
    700
  ],
  "parameters": {},
  "typeVersion": 1
}

================ Node #3408 ================
{
  "id": "64acd4c6-cd53-46e5-a29e-40884044b186",
  "name": "Window Buffer Memory",
  "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
  "position": [
    2800,
    1220
  ],
  "parameters": {
    "sessionKey": "={{ $('Receive DMs').item.json[\"body\"][\"event\"][\"channel\"] }}",
    "sessionIdType": "customKey",
    "contextWindowLength": 10
  },
  "typeVersion": 1.2
}

================ Node #3409 ================
{
  "id": "e605864f-198e-4358-8333-50ed962d4e50",
  "name": "Check if Bot",
  "type": "n8n-nodes-base.if",
  "position": [
    1640,
    800
  ],
  "parameters": {
    "options": {},
    "conditions": {
      "options": {
        "leftValue": "",
        "caseSensitive": true,
        "typeValidation": "strict"
      },
      "combinator": "and",
      "conditions": [
        {
          "id": "89ed1b2a-5e42-4196-989d-f7f81df04b6d",
          "operator": {
            "type": "string",
            "operation": "notExists",
            "singleValue": true
          },
          "leftValue": "={{ $json.body.event.user }}",
          "rightValue": ""
        }
      ]
    }
  },
  "typeVersion": 2
}

================ Node #3410 ================
{
  "id": "8479c41e-b251-4f32-8daa-421969c4c8b3",
  "name": "Send Initial Message",
  "type": "n8n-nodes-base.slack",
  "position": [
    2140,
    820
  ],
  "parameters": {
    "text": "On it! Let me check Confluence to see if there are any relevant links to answer your question. ",
    "select": "channel",
    "channelId": {
      "__rl": true,
      "mode": "id",
      "value": "={{ $('Receive DMs').item.json[\"body\"][\"event\"][\"channel\"] }}"
    },
    "otherOptions": {
      "botProfile": {
        "imageValues": {
          "icon_url": "https://avatars.slack-edge.com/2024-08-30/7671440019297_d6ce97ff3ab5a3abf9c1_72.jpg",
          "profilePhotoType": "image"
        }
      },
      "includeLinkToWorkflow": false
    }
  },
  "credentials": {
    "slackApi": {
      "id": "OfRxDxHFIqk1q44a",
      "name": "helphub n8n labs auth"
    }
  },
  "typeVersion": 2.1
}

================ Node #3411 ================
{
  "id": "dcd325b1-1ee8-4133-9a6e-8b37bf20d056",
  "name": "Delete Initial Message",
  "type": "n8n-nodes-base.slack",
  "position": [
    2960,
    760
  ],
  "parameters": {
    "select": "channel",
    "channelId": {
      "__rl": true,
      "mode": "id",
      "value": "={{ $('Receive DMs').item.json[\"body\"][\"event\"][\"channel\"] }}"
    },
    "operation": "delete",
    "timestamp": "={{ $('Send Initial Message').item.json[\"message_timestamp\"] }}"
  },
  "credentials": {
    "slackApi": {
      "id": "OfRxDxHFIqk1q44a",
      "name": "helphub n8n labs auth"
    }
  },
  "typeVersion": 2.1
}

================ Node #3412 ================
{
  "id": "8d3ac15c-b0bc-459c-9523-685b7f498efb",
  "name": "Send Message",
  "type": "n8n-nodes-base.slack",
  "position": [
    3160,
    760
  ],
  "parameters": {
    "text": "={{ $('AI Agent').item.json.output.replace(/\\[(.+?)\\]\\((.+?)\\)/g, '<$2|$1>').replace(/\\*\\*(.+?)\\*\\*/g, '*$1*') }}",
    "select": "channel",
    "channelId": {
      "__rl": true,
      "mode": "id",
      "value": "={{ $('Receive DMs').item.json[\"body\"][\"event\"][\"channel\"] }}"
    },
    "otherOptions": {
      "botProfile": {
        "imageValues": {
          "icon_url": "https://avatars.slack-edge.com/2024-08-30/7671440019297_d6ce97ff3ab5a3abf9c1_72.jpg",
          "profilePhotoType": "image"
        }
      },
      "includeLinkToWorkflow": false
    }
  },
  "credentials": {
    "slackApi": {
      "id": "OfRxDxHFIqk1q44a",
      "name": "helphub n8n labs auth"
    }
  },
  "typeVersion": 2.1
}

================ Node #3413 ================
{
  "id": "02afa6b3-c528-4925-8b92-7b708b10e7ca",
  "name": "Sticky Note",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    1160,
    460
  ],
  "parameters": {
    "color": 7,
    "width": 414.5626477541374,
    "height": 516.5011820330969,
    "content": "![Imgur](https://i.imgur.com/iKyMV0N.png)\n## Webhook Trigger\nThe first node receives all messages from Slack API via Subscription Events API. You can find more information about setting up the subscription events API by [clicking here](https://api.slack.com/apis/connections/events-api). The second node responds to the periodic security challenges that Slack sends to ensure the N8n webhook is still active. "
  },
  "typeVersion": 1
}

================ Node #3414 ================
{
  "id": "a8caa088-80dd-44a8-8c61-7a03a37de386",
  "name": "Sticky Note1",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    1600,
    460
  ],
  "parameters": {
    "color": 7,
    "width": 403.49881796690335,
    "height": 517.6832151300242,
    "content": "![n8n](https://i.imgur.com/lKnBNnH.png)\n## Check for Bot Responses\nIf the message received is from a Bot instead of a real user, it will ignore the message."
  },
  "typeVersion": 1
}

================ Node #3415 ================
{
  "id": "17b51014-4f9d-4650-963b-8d8d944869ea",
  "name": "Sticky Note2",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    2900,
    460
  ],
  "parameters": {
    "color": 7,
    "width": 430.54373522458616,
    "height": 451.3947990543734,
    "content": "![Slack](https://i.imgur.com/iKyMV0N.png)\n## Delete Receipt and Send Response \nOnce the AI response is generated in response to the slack message, n8n delete's it's original *Message Received* message to avoid cluttering up the user's DMs, and then sends the final Slack message back to the user. "
  },
  "typeVersion": 1
}

================ Node #3416 ================
{
  "id": "494a9ada-18e9-48a6-86a9-5e72cc797ddf",
  "name": "Sticky Note3",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    2394.7517730496443,
    460
  ],
  "parameters": {
    "color": 7,
    "width": 488.1796690307332,
    "height": 723.5460992907797,
    "content": "![OpenAI](https://i.imgur.com/o89G0If.png)\n## Parse Response with AI Model \nThis workflow currently uses OpenAI to power it's responses, but you can open the AI Agent node below and set your own AI LLM using the n8n options offered. "
  },
  "typeVersion": 1
}

================ Node #3417 ================
{
  "id": "31bc923f-c981-45fd-827d-cede2ec3f3c3",
  "name": "Sticky Note4",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    2020,
    460
  ],
  "parameters": {
    "color": 7,
    "width": 356.5484633569741,
    "height": 516.5011820330968,
    "content": "![Slack](https://i.imgur.com/iKyMV0N.png)\n## Response Received\nOnce N8n sees that the messaged received is from a user, it will respond right away to acknowledge a message was received. You can edit the message by opening the node below. "
  },
  "typeVersion": 1
}

================ Node #3418 ================
{
  "id": "e81d6b07-9ac0-4848-ab7f-57a588103ce5",
  "name": "Sticky Note5",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    2980,
    1200
  ],
  "parameters": {
    "color": 7,
    "width": 951.1571908442271,
    "height": 467.66775526888296,
    "content": "![n8n](https://i.imgur.com/FWJX4km.png)\n## Build n8n workflow to query Knowledge Base\nBuilding your own tools for an AI Agent to use is simple and straightforward, but requires that you build a second workflow and then connect it to this one by inputting the workflow ID from the workflow URL in the *Custom n8n KB Tool* sub node. \n\nThis gives you the freedom to work with any tool, whether n8n has support for it or not. In this sample build, we have connected the AI agent to Confluence, which does not have a native built in n8n node. For this we use the HTTP request node and pointed it to Confluence's search api. It then returns a response that the AI agent uses to generate a final slack message response to the user. "
  },
  "typeVersion": 1
}

================ Node #3419 ================
{
  "id": "890aeb96-1721-4cb4-a609-5409b30d5f6c",
  "name": "Sticky Note6",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    2320,
    1200
  ],
  "parameters": {
    "color": 7,
    "width": 644.582152697438,
    "height": 318.6662788502134,
    "content": "![n8n](https://i.imgur.com/lKnBNnH.png)\n\n## Remembers the last 5 messages that a user sent\nBecause we are passing the channel ID of the user to the memory module, n8n is storing the last 5 slack messages sent to it per slack channel. This means that it will remember all your users conversations separately from one another and not get confused by different requests from different users. You can increase the memory storage by using a different storage medium and increase the number of prompts and responses it should remember. "
  },
  "typeVersion": 1
}

================ Node #3420 ================
{
  "id": "1fa61c12-70d1-4d7e-8564-a2a574804243",
  "name": "Sticky Note7",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    1660,
    1200
  ],
  "parameters": {
    "color": 7,
    "width": 644.582152697438,
    "height": 318.6662788502134,
    "content": "![OpenAI](https://i.imgur.com/o89G0If.png)\n\n## Change the AI Agents LLM\nTo change the model used, simply delete the ChatGPT model and replace with a different supported model by hitting the plus sign under model in the AI Agent."
  },
  "typeVersion": 1
}

================ Node #3421 ================
{
  "id": "fecd81da-4723-4886-8d6f-9729623028a9",
  "name": "Sticky Note8",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    460,
    460
  ],
  "parameters": {
    "width": 675.1724774900403,
    "height": 994.2389415638766,
    "content": "![n8n](https://i.imgur.com/lKnBNnH.png)\n# Streamline IT Inquiries with n8n & AI!\n\n## Introducing the IT Ops AI SlackBot Workflow---a sophisticated solution designed to automate and optimize the management of IT-related inquiries via Slack.\n\nWhen an employee messages the IT department slack app, the workflow kicks off with the \"Receive DMs\" node, which captures incoming messages and ensures a secure and active communication line by responding to Slack's webhook challenges.\n\n**How It Works:**\n\n- Verify Webhook: Responds to slacks challenge and respond requests to ensure is still active.\n- Check if bot: Checks whether the message sender is a bot to prevent unnecessary processing.\n- Send Initial Message: Sends a quick confirmation, like \"On it!\", to let the user know their query is being handled.\n- AI-Driven Responses: Employs the \"AI Agent\" node with OpenAI to craft relevant replies based on the conversation history maintained by the \"Window Buffer Memory\" node.\n- Knowledge Integration tool: Uses a custom Knowledge Base tool to fetch pertinent information from confluence, enhancing the quality of responses.\n- Cleanup and Reply: Deletes the initial acknowledgment to tidy up before sending the final detailed response back to the user.\n\n\n**Get Started:**\n- Ensure your [Slack](https://docs.n8n.io/integrations/builtin/app-nodes/n8n-nodes-base.slack/?utm_source=n8n_app&utm_medium=node_settings_modal-credential_link&utm_campaign=n8n-nodes-base.slack) and [OpenAI](https://docs.n8n.io/integrations/builtin/cluster-nodes/sub-nodes/n8n-nodes-langchain.lmchatopenai/?utm_source=n8n_app&utm_medium=node_settings_modal-credential_link&utm_campaign=@n8n/n8n-nodes-langchain.lmChatOpenAi) integrations are properly set up.\n- Customize the workflow to align with your IT department's protocols.\n\n\n**Need Help?**\n- Join the discussion on our Forum or check out resources on Discord!\n\n\nDeploy this workflow to improve response times and enhance the efficiency of your IT support services."
  },
  "typeVersion": 1
}

================ Node #3422 ================
{
  "id": "16b79887-8218-4056-8add-39ebee6166bd",
  "name": "Receive DMs",
  "type": "n8n-nodes-base.webhook",
  "position": [
    1200,
    800
  ],
  "webhookId": "44c26a10-d54a-46ce-a522-5d83e8a854be",
  "parameters": {
    "path": "44c26a10-d54a-46ce-a522-5d83e8a854be",
    "options": {},
    "httpMethod": "POST",
    "responseMode": "responseNode"
  },
  "typeVersion": 2
}

================ Node #3423 ================
{
  "id": "201b5399-6fff-48ca-81f0-a5cfc02c46d5",
  "name": "Call Confluence Workflow Tool",
  "type": "@n8n/n8n-nodes-langchain.toolWorkflow",
  "position": [
    3380,
    1280
  ],
  "parameters": {
    "name": "confluence_kb_search",
    "workflowId": {
      "__rl": true,
      "mode": "list",
      "value": "Pxzc65WaCPn2yB5I",
      "cachedResultName": "KB Tool - Confluence KB"
    },
    "description": "Call this tool to search n8n-labs confluence knowledge base. The input should be the user prompt reduced into 1 to 3 keywords to use for a KB search. These words should be words that are most likely to be contained in the text of a KB article that is helpful based on the user prompt. The words should be the only response and they should just be separated by a space."
  },
  "typeVersion": 1.2
}

================ Node #3424 ================
{
  "id": "41026e03-5844-4e57-86bf-fc7e586265a4",
  "name": "AI Agent",
  "type": "@n8n/n8n-nodes-langchain.agent",
  "position": [
    2500,
    820
  ],
  "parameters": {
    "text": "={{ $('Receive DMs').item.json.body.event.text }}",
    "options": {
      "humanMessage": "TOOLS\n------\nAssistant can ask the user to use tools to look up information that may be helpful in answering the users original question. The tools the human can use are:\n\n{tools}\n\nIf no response is given for a given tool or the response is an error, then do not reference the tool results and instead ask for more context. \n\nThe tools currently search Notion and returns back a list of results. Please try to respond using the most relevant result URL to guide the user to the right answer. \n\nIf you are not sure, let the user know you were unable to find a notion page for them to help, but give them the top results that are relevant to their request.\n\nPlease summarize the results and return all the URLs exactly as you get them from the tool. Please format all links you send in this format: <url|name of url> \nAdditionally, here are other formatting layouts to use: \n_italic_ will produce italicized text\n*bold* will produce bold text\n~strike~ will produce strikethrough text\n\n{format_instructions}\n\nUSER'S INPUT\n--------------------\nHere is the user's input (remember to respond with a slack flavored (see above for more details) code snippet of a json blob with a single action, and NOTHING else):\n\n{{input}}\n",
      "maxIterations": 2,
      "systemMessage": "You are Knowledge Ninja, a specialized IT support tool developed to streamline interactions between employees and the IT department and the company knowledge base. \n\nDesigned with efficiency in mind, Knowledge Ninja is equipped to handle a variety of IT-related queries, from sales competition analysis to troubleshooting to more complex technical guidance.\n\nAs a dynamic knowledge tool, Knowledge Ninja utilizes a comprehensive internal knowledge base that can be tailored to your organization's specific IT infrastructure and policies. \n\nThis allows it to deliver precise and contextually relevant information swiftly, enhancing the support process.\n\nKnowledge Ninja is continuously updated to reflect the latest IT standards and practices, ensuring that the guidance it provides is both accurate and up-to-date. \n\nIts capabilities include understanding detailed queries, providing step-by-step troubleshooting instructions, and clarifying IT policies.\n\nPlease format all links you send in this format: <url|name of url> \nAdditionally, here are other formatting layouts to use: \n_italic_ will produce italicized text\n*bold* will produce bold text\n~strike~ will produce strikethrough text"
    },
    "promptType": "define"
  },
  "typeVersion": 1.5
}

================ Node #3425 ================
{
  "id": "9c3c06eb-8b48-4229-9b16-7fe7c4f886c3",
  "name": "When clicking \u2018Test workflow\u2019",
  "type": "n8n-nodes-base.manualTrigger",
  "position": [
    78.44447107090468,
    520
  ],
  "parameters": {},
  "typeVersion": 1
}

================ Node #3426 ================
{
  "id": "2a8d8297-18de-4e1f-b44b-93842f7c1709",
  "name": "OpenAI Chat Model",
  "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
  "position": [
    1678.4444710709047,
    2020
  ],
  "parameters": {
    "model": "gpt-4o-mini",
    "options": {}
  },
  "typeVersion": 1
}

================ Node #3427 ================
{
  "id": "a6c24857-ad3b-4561-b40b-8520064e861b",
  "name": "Format QA Pair1",
  "type": "n8n-nodes-base.set",
  "position": [
    2018.4444710709047,
    1880
  ],
  "parameters": {
    "options": {},
    "assignments": {
      "assignments": [
        {
          "id": "2c1bd408-29f0-487b-9a33-7513d5bbfe23",
          "name": "question",
          "type": "string",
          "value": "={{ $('Needs AI Completion?1').item.json.question }}"
        },
        {
          "id": "02ffc3b7-3d77-4dfe-ba3f-2052f5cc9e83",
          "name": "answer",
          "type": "string",
          "value": "={{\n[\n $('Needs AI Completion?1').item.json.answer,\n $json.text\n ? $json.text[0].toLowerCase() + $json.text.substring(1, $json.text.length)\n : '',\n $('Needs AI Completion?1').item.json.append || '',\n].join(' ').trim()\n}}"
        }
      ]
    }
  },
  "typeVersion": 3.4
}

================ Node #3428 ================
{
  "id": "2b4712cb-371c-45bc-a024-363ae951b0ac",
  "name": "For Each Question...1",
  "type": "n8n-nodes-base.splitInBatches",
  "position": [
    1238.4444710709047,
    1400
  ],
  "parameters": {
    "options": {}
  },
  "typeVersion": 3
}

================ Node #3429 ================
{
  "id": "8f7cefc1-9fc0-474b-a81e-bf573068258b",
  "name": "Question to List1",
  "type": "n8n-nodes-base.splitOut",
  "position": [
    1038.4444710709047,
    1400
  ],
  "parameters": {
    "options": {},
    "fieldToSplitOut": "data"
  },
  "typeVersion": 1
}

================ Node #3430 ================
{
  "id": "9aeb5858-d6d4-4541-8a0d-851740d948ae",
  "name": "Questions to Object...1",
  "type": "n8n-nodes-base.aggregate",
  "position": [
    1978.4444710709047,
    1380
  ],
  "parameters": {
    "options": {},
    "aggregate": "aggregateAllItemData"
  },
  "typeVersion": 1
}

================ Node #3431 ================
{
  "id": "2c1d56c5-20f2-4691-ab89-87edf9902a5f",
  "name": "Format DisplayName + Questions1",
  "type": "n8n-nodes-base.set",
  "position": [
    2198.444471070905,
    1380
  ],
  "parameters": {
    "options": {},
    "assignments": {
      "assignments": [
        {
          "id": "66318f17-a3bd-4bcf-b326-50208b503143",
          "name": "name",
          "type": "string",
          "value": "={{ $('Execute Workflow Trigger').first().json.data.displayName || $('Execute Workflow Trigger').first().json.data['Category name'] }}"
        },
        {
          "id": "a83abac5-ddc6-4316-a916-7eab338f97cf",
          "name": "questions",
          "type": "array",
          "value": "={{ $json.data }}"
        }
      ]
    }
  },
  "typeVersion": 3.4
}

================ Node #3432 ================
{
  "id": "5147d5ef-f56d-49b0-9be8-0af7ccb8cdae",
  "name": "Create From Text",
  "type": "n8n-nodes-base.googleDrive",
  "position": [
    2380,
    1380
  ],
  "parameters": {
    "name": "={{ $json.name + '-' + $now.format('yyyyMMdd') }}",
    "content": "={{ JSON.stringify($json, null, 4) }}",
    "driveId": {
      "__rl": true,
      "mode": "list",
      "value": ""
    },
    "options": {},
    "folderId": {
      "__rl": true,
      "mode": "id",
      "value": "={{ $('Execute Workflow Trigger').first().json.outdir }}"
    },
    "operation": "createFromText"
  },
  "typeVersion": 3
}

================ Node #3433 ================
{
  "id": "9abc3871-8103-4659-9afa-93142dabec01",
  "name": "Define Sheets",
  "type": "n8n-nodes-base.set",
  "position": [
    518.4444710709047,
    520
  ],
  "parameters": {
    "mode": "raw",
    "options": {},
    "jsonOutput": "{\n \"data\": [\n \"Single Integration Native\",\n \"Single Integration Cred-only\",\n \"Single Integration Non-native\",\n \"Categories\"\n ]\n}\n"
  },
  "typeVersion": 3.4
}

================ Node #3434 ================
{
  "id": "417b1c53-ec19-4f59-9580-b6080d3bc103",
  "name": "Sheets To List...",
  "type": "n8n-nodes-base.splitOut",
  "position": [
    698.4444710709047,
    520
  ],
  "parameters": {
    "options": {},
    "fieldToSplitOut": "data"
  },
  "typeVersion": 1
}

================ Node #3435 ================
{
  "id": "d8495ac2-7f45-4dd5-8eb5-d95c9e572dd3",
  "name": "Get Services",
  "type": "n8n-nodes-base.googleSheets",
  "position": [
    1098.4444710709047,
    660
  ],
  "parameters": {
    "options": {
      "returnAllMatches": "returnAllMatches"
    },
    "filtersUI": {
      "values": [
        {
          "lookupColumn": "=status"
        }
      ]
    },
    "sheetName": {
      "__rl": true,
      "mode": "name",
      "value": "={{ $json.data }}"
    },
    "documentId": {
      "__rl": true,
      "mode": "list",
      "value": ""
    }
  },
  "typeVersion": 4.3,
  "alwaysOutputData": true
}

================ Node #3436 ================
{
  "id": "e5b7ebe7-0e0f-4f61-8a14-afc51eb37270",
  "name": "Single Integration Cred-only",
  "type": "n8n-nodes-base.set",
  "position": [
    778.4444710709047,
    1400
  ],
  "parameters": {
    "mode": "raw",
    "options": {},
    "jsonOutput": "={\n \"data\": [\n {\n \"question\": \"How can I set up {{ $json.data.displayName }} integration in n8n?\",\n \"answer\": \"To use {{ $json.data.displayName }} integration in n8n, start by adding the HTTP Request node to your workflow canvas and authenticate it using a predefined credential type. This allows you to perform custom operations, without additional authentication setup. Once connected, you can make custom API calls to {{ $json.data.displayName }} to query the data you need using the URLs you provide, for example:\",\n \"ai_example\": \"Assume useris advanced in n8n integration and sending HTTP requests, focus instead on examples operations and/or use-cases such as creating records, updating records, or retrieving data.\",\n \"ai_completion\": {{ true }}\n },\n {\n \"question\": \"Do I need any special permissions or API keys to integrate {{ $json.data.displayName }} with n8n?\",\n \"answer\": \"Yes, you need an API key with the necessary permissions to integrate {{ $json.data.displayName }} with n8n. You will typically need to use the {{ $json.data.displayName }} API docs to construct your request via the HTTP Request node. Ensure the API key has the appropriate access rights for the data and actions you want to automate within your workflows.\",\n \"ai_completion\": {{ false }}\n },\n {\n \"question\": \"Can I combine {{ $json.data.displayName }} with other apps in n8n workflows?\",\n \"answer\": \"Definitely! n8n enables you to create workflows that combine {{ $json.data.displayName }} with other apps and services. For instance,\",\n \"ai_completion\": {{ true }}\n },\n {\n \"question\": \"What are some common use cases for {{ $json.data.displayName }} integrations with n8n?\",\n \"answer\": \"Common use cases for {{ $json.data.displayName }} automation include\",\n \"append\": \"With n8n, you can customize these workflows to fit your specific needs and extend them by adding other 400+ integrations or incorporating advanced AI logic.\",\n \"ai_completion\": {{ true }}\n },\n {\n \"question\": \"How does n8n\u2019s pricing model benefit me when integrating {{ $json.data.displayName }}?\",\n \"answer\": \"n8n\u2019s pricing model is designed to be both affordable and scalable, which is particularly beneficial when integrating with {{ $json.data.displayName }}. Unlike other platforms that charge per operation or task, n8n charges only for full workflow executions. This means you can create complex workflows with {{ $json.data.displayName }}, involving thousands of tasks or steps, without worrying about escalating costs. For example, if your {{ $json.data.displayName }} workflows perform around 100k tasks, you could be paying $500+/month on other platforms, but with n8n's pro plan, you start at around $50. This approach allows you to scale your {{ $json.data.displayName }} integrations efficiently while maintaining predictable costs.\",\n \"ai_completion\": {{ false }}\n }\n ]\n}"
  },
  "typeVersion": 3.4
}

================ Node #3437 ================
{
  "id": "e2cc607b-8502-4beb-ace5-8670af845134",
  "name": "Single Integration Native",
  "type": "n8n-nodes-base.set",
  "position": [
    778.4444710709047,
    1240
  ],
  "parameters": {
    "mode": "raw",
    "options": {},
    "jsonOutput": "={\n \"data\": [\n {\n \"question\": \"How can I set up {{ $json.data.displayName }} integration in n8n?\",\n \"answer\": \"To use {{ $json.data.displayName }} integration in n8n, start by adding the {{ $json.data.displayName }} node to your workflow. You'll need to authenticate your {{ $json.data.displayName }} account using supported authentication methods. Once connected, you can choose from the list of supported actions or make custom API calls via the HTTP Request node, for example:\",\n \"ai_completion\": {{ true }}\n },\n {\n \"question\": \"Do I need any special permissions or API keys to integrate {{ $json.data.displayName }} with n8n?\",\n \"answer\": \"Yes, you will typically need an API key, token, or similar credentials to add {{ $json.data.displayName }} integration to n8n. These can usually be found in your account settings for the service. Ensure that your credentials have the necessary permissions to access and manage the data or actions you want to automate within your workflows.\",\n \"ai_completion\": {{ false }}\n },\n {\n \"question\": \"Can I combine {{ $json.data.displayName }} with other apps in n8n workflows?\",\n \"answer\": \"Definitely! n8n enables you to create workflows that combine {{ $json.data.displayName }} with other apps and services. For instance,\",\n \"ai_completion\": {{ true }}\n },\n {\n \"question\": \"What are some common use cases for {{ $json.data.displayName }} integrations with n8n?\",\n \"answer\": \"Common use cases for {{ $json.data.displayName }} automation include\",\n \"append\": \"With n8n, you can customize these workflows to fit your specific needs and extend them by adding other 400+ integrations or incorporating advanced AI logic.\",\n \"ai_completion\": {{ true }}\n },\n {\n \"question\": \"How does n8n\u2019s pricing model benefit me when integrating {{ $json.data.displayName }}?\",\n \"answer\": \"n8n\u2019s pricing model is designed to be both affordable and scalable, which is particularly beneficial when integrating with {{ $json.data.displayName }}. Unlike other platforms that charge per operation or task, n8n charges only for full workflow executions. This means you can create complex workflows with {{ $json.data.displayName }}, involving thousands of tasks or steps, without worrying about escalating costs. For example, if your {{ $json.data.displayName }} workflows perform around 100k tasks, you could be paying $500+/month on other platforms, but with n8n's pro plan, you start at around $50. This approach allows you to scale your {{ $json.data.displayName }} integrations efficiently while maintaining predictable costs.\",\n \"ai_completion\": {{ false }}\n }\n ]\n}"
  },
  "typeVersion": 3.4
}

================ Node #3438 ================
{
  "id": "ce1905c2-f41a-4dea-bd03-a9ae1e893326",
  "name": "Categories",
  "type": "n8n-nodes-base.set",
  "position": [
    778.4444710709047,
    1760
  ],
  "parameters": {
    "mode": "raw",
    "options": {},
    "jsonOutput": "={{\n{\n \"data\": [\n {\n \"question\": `What types of ${$json.data['Category name']} tools can I integrate with n8n?`,\n \"answer\": `n8n offers integrations with a wide range of ${$json.data['Category name']} tools, including`,\n \"append\": `These integrations allow you to streamline your ${$json.data['Category name']} workflows, automate repetitive tasks, and improve collaboration across your team.`,\n \"ai_completion\": true\n },\n {\n \"question\": `Are there any specific requirements or limitations for using ${$json.data['Category name']} integrations?`,\n \"answer\": `Yes, each ${$json.data['Category name']} integration may have specific requirements. For example,`,\n \"append\": `n8n offers a significant number of pre-built ${$json.data['Category name']} integrations (called nodes). If n8n doesn't support the integration you need, use the HTTP Request node or custom code to connect to the service's API. Be sure to review the integration documentation for any app-specific prerequisites. Additionally, consider any API rate limits or usage constraints that might affect your workflows.`,\n \"ai_completion\": true\n },\n {\n \"question\": `What are some popular use cases for ${$json.data['Category name']} integrations in n8n?`,\n \"answer\": `${$json.data['Category name']} integrations with n8n offer a variety of practical use cases. For example:`,\n \"ai_completion\": true,\n \"ai_completion_format\": \"list\"\n },\n {\n \"question\": `How does n8n\u2019s pricing model benefit ${$json.data['Category name']} workflows?`,\n \"answer\": `n8n's pricing model, which charges only for full workflow executions rather than individual tasks or steps, is particularly advantageous for ${$json.data['Category name']} workflows. This means you can build complex, multi-step workflows involving various ${$json.data['Category name']} tools without worrying about cost increases due to the number of operations. For example, if your ${$json.data['Category name']} workflows perform around 100k tasks, you could be paying $500+/month on other platforms, but with n8n's pro plan, you start at around $50. This approach allows you to scale your ${$json.data['Category name']} integrations efficiently while maintaining predictable costs.`,\n \"ai_completion\": false\n },\n {\n \"question\": `How can I leverage n8n's AI capabilities in my ${$json.data['Category name']} workflows?`,\n \"answer\": `n8n offers powerful AI capabilities that can enhance your ${$json.data['Category name']} workflows. For example, you can integrate AI tools like OpenAI with n8n to`,\n \"append\": `To add AI capabilities, navigate to the AI category in n8n's integrations directory and set up the integration with your chosen AI service. This combination of AI and ${$json.data['Category name']} integrations can significantly boost your development efficiency and innovation.`,\n \"ai_completion\": true\n }\n ]\n}\n}}"
  },
  "typeVersion": 3.4
}

================ Node #3439 ================
{
  "id": "344c93e6-3ed9-4dd0-8a38-c2f853ef3cc1",
  "name": "For Each Sheet...",
  "type": "n8n-nodes-base.splitInBatches",
  "position": [
    918.4444710709047,
    520
  ],
  "parameters": {
    "options": {}
  },
  "typeVersion": 3
}

================ Node #3440 ================
{
  "id": "e5776c79-51e4-4469-8cf7-dff009ee0ffd",
  "name": "Execute Workflow Trigger",
  "type": "n8n-nodes-base.executeWorkflowTrigger",
  "position": [
    298.4444710709047,
    1400
  ],
  "parameters": {},
  "typeVersion": 1
}

================ Node #3441 ================
{
  "id": "76aca3a6-c3ff-41fa-9fdf-30839df85669",
  "name": "Execute Workflow",
  "type": "n8n-nodes-base.executeWorkflow",
  "position": [
    1898.4444710709047,
    660
  ],
  "parameters": {
    "mode": "each",
    "options": {},
    "workflowId": "={{ $workflow.id }}"
  },
  "typeVersion": 1,
  "alwaysOutputData": true
}

================ Node #3442 ================
{
  "id": "663b1ce2-ccb5-43d1-8871-c5fa7412151c",
  "name": "Prepare Job",
  "type": "n8n-nodes-base.set",
  "position": [
    1278.4444710709047,
    660
  ],
  "parameters": {
    "options": {},
    "assignments": {
      "assignments": [
        {
          "id": "2755153b-d38c-4aba-be8f-f72c3bf91cf2",
          "name": "sheet",
          "type": "string",
          "value": "={{ $('For Each Sheet...').item.json.data }}"
        },
        {
          "id": "eed4a03a-451b-4b74-b591-ce970d84f990",
          "name": "data",
          "type": "object",
          "value": "={{ $json }}"
        },
        {
          "id": "ee73316c-0316-4389-aa13-4bb145637262",
          "name": "outdir",
          "type": "string",
          "value": "={{\n{\n \"Single Integration Native\": \"Insert the corresponding Google Drive folder ID here\",\n \"Single Integration Cred-only\": \"Insert the corresponding Google Drive folder ID here\",\n \"Single Integration Non-native\": \"Insert the corresponding Google Drive folder ID here\",\n \"Categories\": \"Insert the corresponding Google Drive folder ID here\",\n}[$('For Each Sheet...').item.json.data]\n}}"
        }
      ]
    }
  },
  "typeVersion": 3.4
}

================ Node #3443 ================
{
  "id": "087249d0-d001-49c3-8695-e0e3f02b66e2",
  "name": "For Each Service...",
  "type": "n8n-nodes-base.splitInBatches",
  "position": [
    1498.4444710709047,
    520
  ],
  "parameters": {
    "options": {
      "reset": false
    }
  },
  "typeVersion": 3
}

================ Node #3444 ================
{
  "id": "edd9e2c7-9477-4145-bb1f-1424ccb2080f",
  "name": "Update Row Status",
  "type": "n8n-nodes-base.googleSheets",
  "position": [
    2558.444471070905,
    1380
  ],
  "parameters": {
    "columns": {
      "value": {
        "status": "done",
        "row_number": "={{ $('Execute Workflow Trigger').first().json.data.row_number }}"
      },
      "schema": [
        {
          "id": "displayName",
          "type": "string",
          "display": true,
          "required": false,
          "displayName": "displayName",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "status",
          "type": "string",
          "display": true,
          "required": false,
          "displayName": "status",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "row_number",
          "type": "string",
          "display": true,
          "removed": false,
          "readOnly": true,
          "required": false,
          "displayName": "row_number",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        }
      ],
      "mappingMode": "defineBelow",
      "matchingColumns": [
        "row_number"
      ]
    },
    "options": {},
    "operation": "update",
    "sheetName": {
      "__rl": true,
      "mode": "name",
      "value": "={{ $('Execute Workflow Trigger').first().json.sheet }}"
    },
    "documentId": {
      "__rl": true,
      "mode": "list",
      "value": ""
    }
  },
  "typeVersion": 4.4
}

================ Node #3445 ================
{
  "id": "454ccacd-104c-4cad-b52e-72447a49fb04",
  "name": "Single Integration Non-native",
  "type": "n8n-nodes-base.set",
  "position": [
    778.4444710709047,
    1580
  ],
  "parameters": {
    "mode": "raw",
    "options": {},
    "jsonOutput": "={{\n{\n \"data\": [\n {\n \"question\": `How can I set up ${$json.data.displayName} integration in n8n?`,\n \"answer\": `To use ${$json.data.displayName} integration in n8n, start by adding the HTTP Request node to your workflow canvas and authenticate it using a generic authentication method. Once connected, you can make custom API calls to ${$json.data.displayName} to query the data you need using the URLs you provide, for example:`,\n \"ai_example\": \"Assume useris advanced in n8n integration and sending HTTP requests, focus instead on examples operations and/or use-cases such as creating records, updating records, or retrieving data.\",\n \"ai_completion\": true\n },\n{\n \"question\": `Do I need any special permissions or API keys to integrate ${$json.data.displayName} with n8n?`,\n \"answer\": `Yes, with generic authentication, you'll typically need to provide endpoint URLs, headers, parameters, and any other authentication details specific to **${$json.data.displayName}**: - Find the&nbsp;**${$json.data.displayName}** API documentation and see if the API supports HTTP requests; - Most APIs require some form of authentication and you can configure this in the HTTP Request mode (Basic Auth, Custom Auth, Digest Auth, Header Auth, OAuth1 API, OAuth2 API, Query Auth).`,\n \"ai_completion\": false\n },\n{\n \"question\": `Can I combine ${$json.data.displayName} with other apps in n8n workflows?`,\n \"answer\": `Definitely! n8n enables you to create workflows that combine ${$json.data.displayName} with other apps and services. For instance,`,\n \"ai_completion\": true\n },\n {\n \"question\": `What are some common use cases for ${$json.data.displayName} integrations with n8n?`,\n \"answer\": `Common use cases for ${$json.data.displayName} automation include`,\n \"append\": `With n8n, you can customize these workflows to fit your specific needs and extend them by adding other 400+ integrations or incorporating advanced AI logic.`,\n \"ai_completion\": true\n },\n {\n \"question\": `How does n8n\u2019s pricing model benefit me when integrating ${$json.data.displayName}?`,\n \"answer\": `n8n's pricing model is designed to be both affordable and scalable, which is particularly beneficial when integrating with ${ $json.data.displayName}. Unlike other platforms that charge per operation or task, n8n charges only for full workflow executions. This means you can create complex workflows with ${ $json.data.displayName}, involving thousands of tasks or steps, without worrying about escalating costs. For example, if your ${ $json.data.displayName} workflows perform around 100k tasks, you could be paying $500+/month on other platforms, but with n8n's pro plan, you start at around $50. This approach allows you to scale your ${ $json.data.displayName} integrations efficiently while maintaining predictable costs.`,\n \"ai_completion\": false\n }\n ]\n}\n}}"
  },
  "typeVersion": 3.4
}

================ Node #3446 ================
{
  "id": "660fda59-4222-489a-a19a-b3ae0ed7c66f",
  "name": "If has Data",
  "type": "n8n-nodes-base.if",
  "position": [
    1678.4444710709047,
    640
  ],
  "parameters": {
    "options": {},
    "conditions": {
      "options": {
        "leftValue": "",
        "caseSensitive": true,
        "typeValidation": "strict"
      },
      "combinator": "and",
      "conditions": [
        {
          "id": "aea0bac0-4d4a-4359-8df0-1309c3126376",
          "operator": {
            "type": "object",
            "operation": "notEmpty",
            "singleValue": true
          },
          "leftValue": "={{ $json.data }}",
          "rightValue": ""
        }
      ]
    }
  },
  "typeVersion": 2
}

================ Node #3447 ================
{
  "id": "911aece8-1137-48d4-85f6-ee15ebfdc299",
  "name": "Sticky Note",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    1238.4444710709047,
    620
  ],
  "parameters": {
    "width": 193.4545454545455,
    "height": 317.09090909090907,
    "content": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n### \ud83d\udea8 Set Destination Folders Here"
  },
  "typeVersion": 1
}

================ Node #3448 ================
{
  "id": "44d206a7-049c-4721-8934-2308a4b67821",
  "name": "Needs AI Completion?1",
  "type": "n8n-nodes-base.switch",
  "position": [
    1458.4444710709047,
    1780
  ],
  "parameters": {
    "rules": {
      "values": [
        {
          "outputKey": "TEXT_REPLACE",
          "conditions": {
            "options": {
              "leftValue": "",
              "caseSensitive": true,
              "typeValidation": "strict"
            },
            "combinator": "and",
            "conditions": [
              {
                "operator": {
                  "type": "boolean",
                  "operation": "false",
                  "singleValue": true
                },
                "leftValue": "={{ $json.ai_completion }}",
                "rightValue": ""
              }
            ]
          },
          "renameOutput": true
        },
        {
          "outputKey": "AI_COMPLETE",
          "conditions": {
            "options": {
              "leftValue": "",
              "caseSensitive": true,
              "typeValidation": "strict"
            },
            "combinator": "and",
            "conditions": [
              {
                "id": "f3fcd8ea-6cfa-4658-86c3-3ace9b81d3f2",
                "operator": {
                  "type": "boolean",
                  "operation": "true",
                  "singleValue": true
                },
                "leftValue": "={{ $json.ai_completion }}",
                "rightValue": ""
              }
            ]
          },
          "renameOutput": true
        }
      ]
    },
    "options": {}
  },
  "typeVersion": 3
}

================ Node #3449 ================
{
  "id": "14999c7a-2497-46db-b3b5-ede6a9c89dcb",
  "name": "Sticky Note1",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    -20,
    320
  ],
  "parameters": {
    "color": 7,
    "width": 322.9750655002858,
    "height": 374.7055783044638,
    "content": "## Trigger event\nThis could be changed to whatever trigger event you need: an app event, a schedule, a webhook call, another workflow or an AI chat. Sometimes, the HTTP Request node might already serve as your starting point."
  },
  "typeVersion": 1
}

================ Node #3450 ================
{
  "id": "99a4ca3b-3ad0-48a7-84d7-eb83b61e938b",
  "name": "Switch",
  "type": "n8n-nodes-base.switch",
  "position": [
    538.4444710709047,
    1400
  ],
  "parameters": {
    "rules": {
      "values": [
        {
          "outputKey": "Single - Native",
          "conditions": {
            "options": {
              "leftValue": "",
              "caseSensitive": true,
              "typeValidation": "strict"
            },
            "combinator": "and",
            "conditions": [
              {
                "operator": {
                  "type": "string",
                  "operation": "equals"
                },
                "leftValue": "={{ $json.sheet }}",
                "rightValue": "Single Integration Native"
              }
            ]
          },
          "renameOutput": true
        },
        {
          "outputKey": "Single - Cred Only",
          "conditions": {
            "options": {
              "leftValue": "",
              "caseSensitive": true,
              "typeValidation": "strict"
            },
            "combinator": "and",
            "conditions": [
              {
                "id": "6dcb9e09-5eb6-4527-9c22-7eb8867643f4",
                "operator": {
                  "name": "filter.operator.equals",
                  "type": "string",
                  "operation": "equals"
                },
                "leftValue": "={{ $json.sheet }}",
                "rightValue": "Single Integration Cred-only"
              }
            ]
          },
          "renameOutput": true
        },
        {
          "outputKey": "Single - Non Native",
          "conditions": {
            "options": {
              "leftValue": "",
              "caseSensitive": true,
              "typeValidation": "strict"
            },
            "combinator": "and",
            "conditions": [
              {
                "id": "04ee4ccd-9efc-46a9-9521-fe50fb0c3087",
                "operator": {
                  "name": "filter.operator.equals",
                  "type": "string",
                  "operation": "equals"
                },
                "leftValue": "={{ $json.sheet }}",
                "rightValue": "Single Integration Non-native"
              }
            ]
          },
          "renameOutput": true
        },
        {
          "outputKey": "Categories",
          "conditions": {
            "options": {
              "leftValue": "",
              "caseSensitive": true,
              "typeValidation": "strict"
            },
            "combinator": "and",
            "conditions": [
              {
                "id": "21579253-15c5-4cb4-869b-5760322ae5b5",
                "operator": {
                  "name": "filter.operator.equals",
                  "type": "string",
                  "operation": "equals"
                },
                "leftValue": "={{ $json.sheet }}",
                "rightValue": "Categories"
              }
            ]
          },
          "renameOutput": true
        }
      ]
    },
    "options": {}
  },
  "typeVersion": 3
}

================ Node #3451 ================
{
  "id": "7fe047c7-716c-4ac3-8b7c-c07949c579a4",
  "name": "Sticky Note2",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    459.1561069271204,
    320
  ],
  "parameters": {
    "color": 7,
    "width": 1627.0681704544622,
    "height": 636.4009080766225,
    "content": "## Prepare data in Google Sheets\nThis part of the workflow prepares the data for reading from a Google Sheets document containing information about different services or categories. Here's an example of Google Sheet: https://docs.google.com/spreadsheets/d/1DCf-phfLWvuTwu02bumx-qykVQeFANnacTTAkRj5tZk/edit?usp=sharing"
  },
  "typeVersion": 1
}

================ Node #3452 ================
{
  "id": "cb3dc532-40db-437d-97ec-f522e6087b7c",
  "name": "Sticky Note3",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    498.4444710709047,
    1080
  ],
  "parameters": {
    "color": 7,
    "width": 513.3200522929088,
    "height": 840.0651105548446,
    "content": "## Create your Q&A templates\nFor each service or category, this part of the workflow generates a set of standard questions and answers covering setup, permissions, integrations, use cases, and pricing benefits. You can modify here the input that you will feed to AI."
  },
  "typeVersion": 1
}

================ Node #3453 ================
{
  "id": "b4095a1b-91aa-4abc-8ed5-d6ca7271ee6c",
  "name": "Sticky Note4",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    1238.4444710709047,
    1640
  ],
  "parameters": {
    "color": 7,
    "width": 989.1782467385665,
    "height": 523.7514972875132,
    "content": "## Complete your Q&A templates with AI\n* An AI model (OpenAI's GPT) is used to enhance or complete some of the answers, making the content more comprehensive and natural-sounding.\n* The workflow formats the Q&A pairs, combining AI-generated content with predefined answers where applicable."
  },
  "typeVersion": 1
}

================ Node #3454 ================
{
  "id": "d944dfd9-4bfc-4fb0-8655-3269f6caa8ef",
  "name": "Sticky Note5",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    1858.4444710709047,
    1200
  ],
  "parameters": {
    "color": 7,
    "width": 907.1258470912726,
    "height": 396.4865508957922,
    "content": "## Generate JSON schemas and upload to Google Drive\n* The generated files are saved to specific folders in Google Drive, organized by the type of integration (native, credential-only, non-native) or category.\n* After processing each service or category, it updates the status in the original Google Sheets document to mark it as completed."
  },
  "typeVersion": 1
}

================ Node #3455 ================
{
  "id": "e21d2a42-021f-4f8e-889d-68a851e9e688",
  "name": "Strapi",
  "type": "n8n-nodes-base.strapi",
  "position": [
    2978.444471070905,
    1380
  ],
  "parameters": {
    "operation": "create"
  },
  "typeVersion": 1
}

================ Node #3456 ================
{
  "id": "92ba57a7-a37a-4d67-9db9-7fa2fe72eec5",
  "name": "Sticky Note6",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    2918.444471070905,
    1100
  ],
  "parameters": {
    "color": 7,
    "width": 437.8755022115163,
    "height": 1073.2774375197612,
    "content": "## Send the JSON schemas to your CMS\nThis step is up to you to finish: you can choose either pre-built n8n nodes to connect with your CMS or use the HTTP Request node if you CMS is not supported directly in n8n."
  },
  "typeVersion": 1
}

================ Node #3457 ================
{
  "id": "a42de52f-292b-4b60-ba6d-ff1a672a9758",
  "name": "Wordpress",
  "type": "n8n-nodes-base.wordpress",
  "position": [
    2978.444471070905,
    1580
  ],
  "parameters": {
    "additionalFields": {}
  },
  "credentials": {
    "wordpressApi": {
      "id": "dk1CzqTOkihXrjym",
      "name": "Wordpress account"
    }
  },
  "typeVersion": 1
}

================ Node #3458 ================
{
  "id": "abcad9f3-9f05-40e7-8925-32c59b1a6355",
  "name": "Webflow",
  "type": "n8n-nodes-base.webflow",
  "position": [
    2978.444471070905,
    1780
  ],
  "parameters": {
    "operation": "create"
  },
  "typeVersion": 2
}

================ Node #3459 ================
{
  "id": "60942673-646f-43df-8c0c-c78975ea38c4",
  "name": "HTTP Request",
  "type": "n8n-nodes-base.httpRequest",
  "position": [
    2978.444471070905,
    1980
  ],
  "parameters": {
    "options": {}
  },
  "typeVersion": 4.2
}

================ Node #3460 ================
{
  "id": "d0a97b0c-1271-48e7-8587-5aae565b9d95",
  "name": "AI Completion1",
  "type": "@n8n/n8n-nodes-langchain.chainLlm",
  "position": [
    1678.4444710709047,
    1880
  ],
  "parameters": {
    "text": "=### The question\n{{ $json.question }}\n### Prefered answer format\n{{ $json.ai_completion_format ? 'markdown bullet list' : 'markdown' }}\n### User's answer\n{{ $json.answer }}\n{{\n$json.ai_example\n ? `### Guidance\\nWhen giving answer, follow this blueprint: ${$json.ai_example}`\n : ''\n}}",
    "messages": {
      "messageValues": [
        {
          "message": "=You are assisting with writing a FAQ for the service, {{ $('Execute Workflow Trigger').first().json.data.displayName || $('Execute Workflow Trigger').first().json.data['Category name'] }}. Complete the user's answer in regards to the given question. Ensure the answer is consistent by assuming the tone and style of the user's answer. Give your answer as succinctly as you can with no more than 3 sentences. Do not mention the user or use markdown, return plain text only as this output will be directly appended."
        }
      ]
    },
    "promptType": "define"
  },
  "executeOnce": false,
  "typeVersion": 1.4
}

================ Node #3461 ================
{
  "id": "0b64edf1-57e0-4704-b78c-c8ab2b91f74d",
  "name": "When clicking \u2018Test workflow\u2019",
  "type": "n8n-nodes-base.manualTrigger",
  "position": [
    480,
    300
  ],
  "parameters": {},
  "typeVersion": 1
}

================ Node #3462 ================
{
  "id": "a875d1c5-ccfe-4bbf-b429-56a42b0ca778",
  "name": "Google Gemini Chat Model",
  "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
  "position": [
    1280,
    720
  ],
  "parameters": {
    "options": {},
    "modelName": "models/gemini-1.5-flash"
  },
  "credentials": {
    "googlePalmApi": {
      "id": "dSxo6ns5wn658r8N",
      "name": "Google Gemini(PaLM) Api account"
    }
  },
  "typeVersion": 1
}

================ Node #3463 ================
{
  "id": "a5e00543-dbaa-4e62-afb0-825ebefae3f3",
  "name": "Structured Output Parser",
  "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
  "position": [
    1480,
    720
  ],
  "parameters": {
    "jsonSchemaExample": "{\n\t\"caption_title\": \"\",\n\t\"caption_text\": \"\"\n}"
  },
  "typeVersion": 1.2
}

================ Node #3464 ================
{
  "id": "bb9af9c6-6c81-4e92-a29f-18ab3afbe327",
  "name": "Get Info",
  "type": "n8n-nodes-base.editImage",
  "position": [
    1100,
    400
  ],
  "parameters": {
    "operation": "information"
  },
  "typeVersion": 1
}

================ Node #3465 ================
{
  "id": "8a0dbd5d-5886-484a-80a0-486f349a9856",
  "name": "Resize For AI",
  "type": "n8n-nodes-base.editImage",
  "position": [
    1100,
    560
  ],
  "parameters": {
    "width": 512,
    "height": 512,
    "options": {},
    "operation": "resize"
  },
  "typeVersion": 1
}

================ Node #3466 ================
{
  "id": "d29f254a-5fa3-46fa-b153-19dfd8e8c6a7",
  "name": "Calculate Positioning",
  "type": "n8n-nodes-base.code",
  "position": [
    2020,
    720
  ],
  "parameters": {
    "mode": "runOnceForEachItem",
    "jsCode": "const { size, output } = $input.item.json;\n\nconst lineHeight = 35;\nconst fontSize = Math.round(size.height / lineHeight);\nconst maxLineLength = Math.round(size.width/fontSize) * 2;\nconst text = `\"${output.caption_title}\". ${output.caption_text}`;\nconst numLinesOccupied = Math.round(text.length / maxLineLength);\n\nconst verticalPadding = size.height * 0.02;\nconst horizontalPadding = size.width * 0.02;\nconst rectPosX = 0;\nconst rectPosY = size.height - (verticalPadding * 2.5) - (numLinesOccupied * fontSize);\nconst textPosX = horizontalPadding;\nconst textPosY = size.height - (numLinesOccupied * fontSize) - (verticalPadding/2);\n\nreturn {\n caption: {\n fontSize,\n maxLineLength,\n numLinesOccupied,\n rectPosX,\n rectPosY,\n textPosX,\n textPosY,\n verticalPadding,\n horizontalPadding,\n }\n}\n"
  },
  "typeVersion": 2
}

================ Node #3467 ================
{
  "id": "12a7f2d6-8684-48a5-aa41-40a8a4f98c79",
  "name": "Apply Caption to Image",
  "type": "n8n-nodes-base.editImage",
  "position": [
    2380,
    560
  ],
  "parameters": {
    "options": {},
    "operation": "multiStep",
    "operations": {
      "operations": [
        {
          "color": "=#0000008c",
          "operation": "draw",
          "endPositionX": "={{ $json.size.width }}",
          "endPositionY": "={{ $json.size.height }}",
          "startPositionX": "={{ $json.caption.rectPosX }}",
          "startPositionY": "={{ $json.caption.rectPosY }}"
        },
        {
          "font": "/usr/share/fonts/truetype/msttcorefonts/Arial.ttf",
          "text": "=\"{{ $json.output.caption_title }}\". {{ $json.output.caption_text }}",
          "fontSize": "={{ $json.caption.fontSize }}",
          "fontColor": "#FFFFFF",
          "operation": "text",
          "positionX": "={{ $json.caption.textPosX }}",
          "positionY": "={{ $json.caption.textPosY }}",
          "lineLength": "={{ $json.caption.maxLineLength }}"
        }
      ]
    }
  },
  "typeVersion": 1
}

================ Node #3468 ================
{
  "id": "4d569ec8-04c2-4d21-96e1-86543b26892d",
  "name": "Sticky Note",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    -120,
    80
  ],
  "parameters": {
    "width": 423.75,
    "height": 431.76353488372104,
    "content": "## Try it out!\n\n### This workflow takes an image and generates a caption for it using AI. The OpenAI node has been able to do this for a while but this workflow demonstrates how to achieve the same with other multimodal vision models such as Google's Gemini.\n\nAdditional, we'll use the Edit Image node to overlay the generated caption onto the image. This can be useful for publications or can be repurposed for copyrights and/or watermarks.\n\n### Need Help?\nJoin the [Discord](https://discord.com/invite/XPKeKXeB7d) or ask in the [Forum](https://community.n8n.io/)!\n"
  },
  "typeVersion": 1
}

================ Node #3469 ================
{
  "id": "45d37945-5a7a-42eb-8c8c-5940ea276072",
  "name": "Merge Image & Caption",
  "type": "n8n-nodes-base.merge",
  "position": [
    1620,
    400
  ],
  "parameters": {
    "mode": "combine",
    "options": {},
    "combineBy": "combineByPosition"
  },
  "typeVersion": 3
}

================ Node #3470 ================
{
  "id": "53a26842-ad56-4c8d-a59d-4f6d3f9e2407",
  "name": "Merge Caption & Positions",
  "type": "n8n-nodes-base.merge",
  "position": [
    2200,
    560
  ],
  "parameters": {
    "mode": "combine",
    "options": {},
    "combineBy": "combineByPosition"
  },
  "typeVersion": 3
}

================ Node #3471 ================
{
  "id": "b6c28913-b16a-4c59-aa49-47e9bb97f86d",
  "name": "Get Image",
  "type": "n8n-nodes-base.httpRequest",
  "position": [
    680,
    300
  ],
  "parameters": {
    "url": "https://images.pexels.com/photos/1267338/pexels-photo-1267338.jpeg?auto=compress&cs=tinysrgb&w=600",
    "options": {}
  },
  "typeVersion": 4.2
}

================ Node #3472 ================
{
  "id": "6c25054d-8103-4be9-bea7-6c3dd47f49a3",
  "name": "Sticky Note1",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    340,
    80
  ],
  "parameters": {
    "color": 7,
    "width": 586.25,
    "height": 486.25,
    "content": "## 1. Import an Image \n[Read more about the HTTP request node](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.httprequest)\n\nFor this demonstration, we'll grab an image off Pexels.com - a popular free stock photography site - by using the HTTP request node to download.\n\nIn your own workflows, this can be replaces by other triggers such as webhooks."
  },
  "typeVersion": 1
}

================ Node #3473 ================
{
  "id": "d1b708e2-31c3-4cd1-a353-678bc33d4022",
  "name": "Sticky Note2",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    960,
    140
  ],
  "parameters": {
    "color": 7,
    "width": 888.75,
    "height": 783.75,
    "content": "## 2. Using Vision Model to Generate Caption\n[Learn more about the Basic LLM Chain](https://docs.n8n.io/integrations/builtin/cluster-nodes/root-nodes/n8n-nodes-langchain.chainllm)\n\nn8n's basic LLM node supports multimodal input by allowing you to specify either a binary or an image url to send to a compatible LLM. This makes it easy to start utilising this powerful feature for visual classification or OCR tasks which have previously depended on more dedicated OCR models.\n\nHere, we've simply passed our image binary as a \"user message\" option, asking the LLM to help us generate a caption title and text which is appropriate for the given subject. Once generated, we'll pass this text along with the image to combine them both."
  },
  "typeVersion": 1
}

================ Node #3474 ================
{
  "id": "36a39871-340f-4c44-90e6-74393b9be324",
  "name": "Sticky Note3",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    1880,
    280
  ],
  "parameters": {
    "color": 7,
    "width": 753.75,
    "height": 635,
    "content": "## 3. Overlay Caption on Image \n[Read more about the Edit Image node](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.editimage)\n\nFinally, we\u2019ll perform some basic calculations to place the generated caption onto the image. With n8n's user-friendly image editing features, this can be done entirely within the workflow!\n\nThe Code node tool is ideal for these types of calculations and is used here to position the caption at the bottom of the image. To create the overlay, the Edit Image node enables us to insert text onto the image, which we\u2019ll use to add the generated caption."
  },
  "typeVersion": 1
}

================ Node #3475 ================
{
  "id": "d175fe97-064e-41da-95fd-b15668c330c4",
  "name": "Sticky Note4",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    2660,
    280
  ],
  "parameters": {
    "width": 563.75,
    "height": 411.25,
    "content": "**FIG 1.** Example input image with AI generated caption\n![Example Output](https://res.cloudinary.com/daglih2g8/image/upload/f_auto,q_auto/v1/n8n-workflows/l5xbb4ze4wyxwwefqmnc#full-width)"
  },
  "typeVersion": 1
}

================ Node #3476 ================
{
  "id": "23db0c90-45b6-4b85-b017-a52ad5a9ad5b",
  "name": "Image Captioning Agent",
  "type": "@n8n/n8n-nodes-langchain.chainLlm",
  "position": [
    1280,
    560
  ],
  "parameters": {
    "text": "Generate a caption for this image.",
    "messages": {
      "messageValues": [
        {
          "message": "=You role is to provide an appropriate image caption for user provided images.\n\nThe individual components of a caption are as follows: who, when, where, context and miscellaneous. For a really good caption, follow this template: who + when + where + context + miscellaneous\n\nGive the caption a punny title."
        },
        {
          "type": "HumanMessagePromptTemplate",
          "messageType": "imageBinary"
        }
      ]
    },
    "promptType": "define",
    "hasOutputParser": true
  },
  "typeVersion": 1.4
}

================ Node #3477 ================
{
  "id": "c40966a4-1709-4998-ae95-b067ce3496c9",
  "name": "Respond to Webhook",
  "type": "n8n-nodes-base.respondToWebhook",
  "position": [
    1320,
    200
  ],
  "parameters": {
    "options": {},
    "respondWith": "binary"
  },
  "typeVersion": 1.1
}

================ Node #3478 ================
{
  "id": "c4e57bb6-79a4-4b26-a179-73e30d681521",
  "name": "Sticky Note",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    280,
    -140
  ],
  "parameters": {
    "width": 501.55,
    "height": 493.060000000001,
    "content": "This `Webhook` node triggers the workflow when it receives a POST request.\n\n### 1. Test Mode:\n* Use the test webhook URL\n* Click the `Test workflow` button on the canvas. (In test mode, the webhook only works for one call after you click this button)\n\n### 1. Production Mode:\n* The workflow must be active for a **Production URL** to run successfully.\n* You can activate the workflow using the toggle in the top-right of the editor.\n* Note that unlike test URL calls, production URL calls aren't shown on the canvas (only in the executions list)."
  },
  "typeVersion": 1
}

================ Node #3479 ================
{
  "id": "1364a4b6-2651-4b38-b335-c36783a25f12",
  "name": "Sticky Note1",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    825,
    60
  ],
  "parameters": {
    "color": 4,
    "width": 388.35000000000025,
    "height": 292.71000000000043,
    "content": "### Configure the OpenAI node with your API key:\nIf you haven't connected your OpenAI credentials in n8n yet, log in to your OpenAI account to get your API Key. Then, open the OpenAI node, click `Create New Credentials` and connect with the **OpenAI API**.\n"
  },
  "typeVersion": 1
}

================ Node #3480 ================
{
  "id": "ba755814-75e6-4e16-b3a6-50cf4fc06350",
  "name": "Webhook",
  "type": "n8n-nodes-base.webhook",
  "position": [
    480,
    200
  ],
  "webhookId": "28feeb38-ef2d-4a2e-bd7c-25a524068e25",
  "parameters": {
    "path": "generate_audio",
    "options": {},
    "httpMethod": "POST",
    "responseMode": "responseNode"
  },
  "typeVersion": 2
}

================ Node #3481 ================
{
  "id": "ac46df50-cb1f-484c-8edf-8131192ba464",
  "name": "OpenAI",
  "type": "@n8n/n8n-nodes-langchain.openAi",
  "position": [
    960,
    200
  ],
  "parameters": {
    "input": "={{ $json.body.text_to_convert }}",
    "voice": "fable",
    "options": {},
    "resource": "audio"
  },
  "credentials": {
    "openAiApi": {
      "id": "2Cije3KX7OIVwn9B",
      "name": "n8n OpenAI"
    }
  },
  "typeVersion": 1.3
}

================ Node #3482 ================
{
  "id": "3f649e97-e568-47ff-b175-bf63d859d95f",
  "name": "OpenAI Chat Model",
  "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
  "position": [
    2560,
    240
  ],
  "parameters": {
    "model": "gpt-4o",
    "options": {
      "temperature": 0,
      "responseFormat": "json_object"
    }
  },
  "credentials": {
    "openAiApi": {
      "id": "mrgqM64cM1L88xC6",
      "name": "octionicsolutions@gmail.com"
    }
  },
  "typeVersion": 1
}

================ Node #3483 ================
{
  "id": "bd60c65f-ba6c-4dcb-8d09-b29f5dd475b7",
  "name": "Calculator",
  "type": "@n8n/n8n-nodes-langchain.toolCalculator",
  "disabled": true,
  "position": [
    2700,
    240
  ],
  "parameters": {},
  "typeVersion": 1
}

================ Node #3484 ================
{
  "id": "d052786a-92a0-4f9b-9867-2dd64ada8034",
  "name": "Structured Output Parser",
  "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
  "position": [
    2820,
    240
  ],
  "parameters": {
    "jsonSchemaExample": "{\n \"summary\": \"Text\",\n \"meta\": {\n \"sender\": \"Text\",\n \"subject\": \"Text\",\n \"date\": \"Text\"\n }\n}"
  },
  "typeVersion": 1.2
}

================ Node #3485 ================
{
  "id": "50d396fd-d3b0-4fea-99d7-18bd4773cb20",
  "name": "Add Label \"Processed\"",
  "type": "n8n-nodes-base.gmail",
  "position": [
    3860,
    20
  ],
  "parameters": {
    "labelIds": "={{ $('Globals').item.json.processedLabelID }}",
    "messageId": "={{ $('Gmail Trigger').item.json.id }}",
    "operation": "addLabels"
  },
  "credentials": {
    "gmailOAuth2": {
      "id": "9LLNsPzyDJlQFgdw",
      "name": "Gmail (mails2notion)"
    }
  },
  "typeVersion": 2.1
}

================ Node #3486 ================
{
  "id": "8a4c49f9-0c14-46ea-a475-a0d83eb9d688",
  "name": "Active Routes Only",
  "type": "n8n-nodes-base.filter",
  "position": [
    2000,
    20
  ],
  "parameters": {
    "options": {},
    "conditions": {
      "options": {
        "leftValue": "",
        "caseSensitive": true,
        "typeValidation": "strict"
      },
      "combinator": "and",
      "conditions": [
        {
          "id": "02b11920-e737-46cc-b1b9-22ffaf7f3f64",
          "operator": {
            "type": "boolean",
            "operation": "true",
            "singleValue": true
          },
          "leftValue": "={{ $json.Active }}",
          "rightValue": ""
        }
      ]
    }
  },
  "typeVersion": 2
}

================ Node #3487 ================
{
  "id": "fd0f902f-4d16-4bad-8ed0-7fe02e8e879b",
  "name": "Extract Route ID",
  "type": "n8n-nodes-base.set",
  "position": [
    1560,
    220
  ],
  "parameters": {
    "options": {},
    "assignments": {
      "assignments": [
        {
          "id": "acfaf63a-74de-4018-ae30-671f209878ba",
          "name": "route",
          "type": "string",
          "value": "={{ $('Gmail Trigger').item.json.to.text.match(/\\+([^@]+)@/)[1] }}"
        }
      ]
    }
  },
  "typeVersion": 3.4
}

================ Node #3488 ================
{
  "id": "81d1dec6-aacc-480d-8cb4-1832ff27de92",
  "name": "Deactivate Route",
  "type": "n8n-nodes-base.airtable",
  "position": [
    3420,
    220
  ],
  "parameters": {
    "base": {
      "__rl": true,
      "mode": "list",
      "value": "appuqZhHVVGAcMwoA",
      "cachedResultUrl": "https://airtable.com/appuqZhHVVGAcMwoA",
      "cachedResultName": "mails2notion"
    },
    "table": {
      "__rl": true,
      "mode": "list",
      "value": "tblWL6FqfLkLHmLEo",
      "cachedResultUrl": "https://airtable.com/appuqZhHVVGAcMwoA/tblWL6FqfLkLHmLEo",
      "cachedResultName": "Routes"
    },
    "columns": {
      "value": {
        "id": "={{ $('Get Route by ID').item.json.id }}",
        "Active": false
      },
      "schema": [
        {
          "id": "id",
          "type": "string",
          "display": true,
          "removed": false,
          "readOnly": true,
          "required": false,
          "displayName": "id",
          "defaultMatch": true
        },
        {
          "id": "Name",
          "type": "string",
          "display": true,
          "removed": true,
          "readOnly": false,
          "required": false,
          "displayName": "Name",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "Token",
          "type": "string",
          "display": true,
          "removed": true,
          "readOnly": false,
          "required": false,
          "displayName": "Token",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "NotionDatabase",
          "type": "string",
          "display": true,
          "removed": true,
          "readOnly": false,
          "required": false,
          "displayName": "NotionDatabase",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "Email Alias",
          "type": "string",
          "display": true,
          "removed": true,
          "readOnly": true,
          "required": false,
          "displayName": "Email Alias",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "User",
          "type": "array",
          "display": true,
          "removed": true,
          "readOnly": false,
          "required": false,
          "displayName": "User",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "Active",
          "type": "boolean",
          "display": true,
          "removed": false,
          "readOnly": false,
          "required": false,
          "displayName": "Active",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "Status",
          "type": "string",
          "display": true,
          "removed": true,
          "readOnly": true,
          "required": false,
          "displayName": "Status",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        }
      ],
      "mappingMode": "defineBelow",
      "matchingColumns": [
        "id"
      ]
    },
    "options": {},
    "operation": "update"
  },
  "credentials": {
    "airtableTokenApi": {
      "id": "kHzLZhbAFQ1CQnQz",
      "name": "Airtable (octionicsolutions)"
    }
  },
  "typeVersion": 2.1
}

================ Node #3489 ================
{
  "id": "20242505-c57e-424c-a215-2b2effac1d94",
  "name": "Add Label \"Error\"",
  "type": "n8n-nodes-base.gmail",
  "position": [
    3860,
    220
  ],
  "parameters": {
    "labelIds": "={{ $('Globals').item.json.errorLabelID }}",
    "messageId": "={{ $('Gmail Trigger').item.json.id }}",
    "operation": "addLabels"
  },
  "credentials": {
    "gmailOAuth2": {
      "id": "9LLNsPzyDJlQFgdw",
      "name": "Gmail (mails2notion)"
    }
  },
  "typeVersion": 2.1
}

================ Node #3490 ================
{
  "id": "7a788a4f-f0a8-4fe8-b21d-b114a65313b1",
  "name": "Send notification about deactivated route",
  "type": "n8n-nodes-base.gmail",
  "position": [
    3640,
    220
  ],
  "parameters": {
    "sendTo": "={{ $('Gmail Trigger').item.json.from.value[0].address }}",
    "message": "=An error happened while trying to create a Notion Page. It can have various reasons, including a temporary outage of the Notion API, missing permissions to the Notion Database or a wrong Notion Database URL.\n\nThe route has been deaktivated to prevent future errors.\n\nPlease double check your configuration and enable the route again.",
    "options": {
      "appendAttribution": false
    },
    "subject": "A route has been deactivated",
    "emailType": "text"
  },
  "credentials": {
    "gmailOAuth2": {
      "id": "9LLNsPzyDJlQFgdw",
      "name": "Gmail (mails2notion)"
    }
  },
  "typeVersion": 2.1
}

================ Node #3491 ================
{
  "id": "5e7cc69c-8f58-4ac8-9263-1ad206609295",
  "name": "Send notification about missing route",
  "type": "n8n-nodes-base.gmail",
  "position": [
    3640,
    420
  ],
  "parameters": {
    "sendTo": "={{ $('Gmail Trigger').item.json.from.value[0].address }}",
    "message": "=There seems to be no active route anymore which connects this Alias to a Notion Database.\n\nPlease try again later or double check your configuration.",
    "options": {
      "appendAttribution": false
    },
    "subject": "Your Message could not be processed",
    "emailType": "text"
  },
  "credentials": {
    "gmailOAuth2": {
      "id": "9LLNsPzyDJlQFgdw",
      "name": "Gmail (mails2notion)"
    }
  },
  "typeVersion": 2.1
}

================ Node #3492 ================
{
  "id": "7dd9646c-3172-4b53-82c8-4df7fd5f53ea",
  "name": "Get Route by ID",
  "type": "n8n-nodes-base.airtable",
  "onError": "continueErrorOutput",
  "position": [
    1780,
    220
  ],
  "parameters": {
    "id": "={{ $json.route }}",
    "base": {
      "__rl": true,
      "mode": "list",
      "value": "appuqZhHVVGAcMwoA",
      "cachedResultUrl": "https://airtable.com/appuqZhHVVGAcMwoA",
      "cachedResultName": "mails2notion"
    },
    "table": {
      "__rl": true,
      "mode": "list",
      "value": "tblWL6FqfLkLHmLEo",
      "cachedResultUrl": "https://airtable.com/appuqZhHVVGAcMwoA/tblWL6FqfLkLHmLEo",
      "cachedResultName": "Routes"
    },
    "options": {},
    "operation": "get"
  },
  "credentials": {
    "airtableTokenApi": {
      "id": "kHzLZhbAFQ1CQnQz",
      "name": "Airtable (octionicsolutions)"
    }
  },
  "retryOnFail": true,
  "typeVersion": 2.1,
  "waitBetweenTries": 5000
}

================ Node #3493 ================
{
  "id": "8ddfe273-3fda-4b71-a972-5001d4fa71c1",
  "name": "Create Notion Page",
  "type": "n8n-nodes-base.httpRequest",
  "onError": "continueErrorOutput",
  "position": [
    3200,
    20
  ],
  "parameters": {
    "url": "https://api.notion.com/v1/pages",
    "method": "POST",
    "options": {},
    "jsonBody": "={{ $json.toJsonString() }}",
    "sendBody": true,
    "sendHeaders": true,
    "specifyBody": "json",
    "headerParameters": {
      "parameters": [
        {
          "name": "Authorization",
          "value": "=Bearer {{ $('Get Route by ID').item.json.Token }}"
        },
        {
          "name": "Notion-Version",
          "value": "2022-06-28"
        }
      ]
    }
  },
  "retryOnFail": true,
  "typeVersion": 4.2,
  "waitBetweenTries": 5000
}

================ Node #3494 ================
{
  "id": "f773e41f-13b7-483a-9886-90a4425a7f6a",
  "name": "Gmail Trigger",
  "type": "n8n-nodes-base.gmailTrigger",
  "position": [
    900,
    220
  ],
  "parameters": {
    "simple": false,
    "filters": {
      "labelIds": "=INBOX"
    },
    "options": {},
    "pollTimes": {
      "item": [
        {
          "mode": "everyMinute"
        }
      ]
    }
  },
  "credentials": {
    "gmailOAuth2": {
      "id": "9LLNsPzyDJlQFgdw",
      "name": "Gmail (mails2notion)"
    }
  },
  "typeVersion": 1.1
}

================ Node #3495 ================
{
  "id": "918ce27c-2886-4793-81f5-e459f3299bb1",
  "name": "Filter for unprocessed mails",
  "type": "n8n-nodes-base.filter",
  "position": [
    1340,
    220
  ],
  "parameters": {
    "options": {},
    "conditions": {
      "options": {
        "leftValue": "",
        "caseSensitive": true,
        "typeValidation": "strict"
      },
      "combinator": "and",
      "conditions": [
        {
          "id": "28879541-2e66-4a31-b25f-f0419ae45f47",
          "operator": {
            "type": "array",
            "operation": "notContains",
            "rightType": "any"
          },
          "leftValue": "={{ $('Gmail Trigger').item.json.labelIds }}",
          "rightValue": "={{ $json.errorLabelID }}"
        },
        {
          "id": "259a783f-5954-467b-ad52-c1e0072c2239",
          "operator": {
            "type": "array",
            "operation": "notContains",
            "rightType": "any"
          },
          "leftValue": "={{ $('Gmail Trigger').item.json.labelIds }}",
          "rightValue": "={{ $json.processedLabelID }}"
        },
        {
          "id": "81ef1ac2-449e-44c2-a94b-2fc9b08ec934",
          "operator": {
            "type": "string",
            "operation": "exists",
            "singleValue": true
          },
          "leftValue": "={{ $('Gmail Trigger').item.json.to.text.match(/\\+([^@]+)@/)[1] }}",
          "rightValue": ""
        }
      ]
    }
  },
  "typeVersion": 2
}

================ Node #3496 ================
{
  "id": "14764527-ca40-4937-baa2-368b716c6f58",
  "name": "When clicking \u2018Test workflow\u2019",
  "type": "n8n-nodes-base.manualTrigger",
  "disabled": true,
  "position": [
    920,
    600
  ],
  "parameters": {},
  "typeVersion": 1
}

================ Node #3497 ================
{
  "id": "5f955606-4063-4683-b242-2fc0a4fbf34a",
  "name": "Required labels",
  "type": "n8n-nodes-base.filter",
  "position": [
    1360,
    600
  ],
  "parameters": {
    "options": {},
    "conditions": {
      "options": {
        "leftValue": "",
        "caseSensitive": true,
        "typeValidation": "strict"
      },
      "combinator": "or",
      "conditions": [
        {
          "id": "9bb51a86-76d3-42f7-8362-1931244f8cd9",
          "operator": {
            "type": "string",
            "operation": "contains"
          },
          "leftValue": "={{ $json.name }}",
          "rightValue": "Error"
        },
        {
          "id": "28b3afb4-d727-4306-9e45-321c9bd688e3",
          "operator": {
            "type": "string",
            "operation": "contains"
          },
          "leftValue": "={{ $json.name }}",
          "rightValue": "Processed"
        }
      ]
    }
  },
  "typeVersion": 2
}

================ Node #3498 ================
{
  "id": "697198d3-2fc2-4665-86a8-4bc16dbc3d43",
  "name": "Globals",
  "type": "n8n-nodes-base.set",
  "position": [
    1120,
    220
  ],
  "parameters": {
    "options": {},
    "assignments": {
      "assignments": [
        {
          "id": "0dcfba61-ddb5-425d-a803-f88cf36d81d9",
          "name": "errorLabelID",
          "type": "string",
          "value": "Label_4248329647975725750"
        },
        {
          "id": "b1505eaa-1d7e-49d7-be2e-cd71f5ec2632",
          "name": "processedLabelID",
          "type": "string",
          "value": "Label_6498950601707174088"
        }
      ]
    }
  },
  "typeVersion": 3.4
}

================ Node #3499 ================
{
  "id": "b7efe665-97d8-4a82-a3f5-e15bffd68752",
  "name": "Sticky Note",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    840,
    420
  ],
  "parameters": {
    "color": 5,
    "width": 742.4418604651174,
    "height": 361.9189248985609,
    "content": "## Setup\n- Disable the Gmail Trigger and enable the manual trigger here\n- Execute the workflow once\n- Copy the Gmail Label IDs from the output of the \"Required labels\" node to the \"Globals\" node\n- Disable the manual trigger here and and enable the Gmail Trigger again\n- Activate the workflow, so it runs automatically in the background\n"
  },
  "typeVersion": 1
}

================ Node #3500 ================
{
  "id": "3d035d35-3760-4393-8796-cb713338c9d7",
  "name": "Sticky Note1",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    1060,
    60
  ],
  "parameters": {
    "width": 215.20930232558143,
    "height": 323.99999999999943,
    "content": "## Set Globals\nUse the setup instructions below to retrieve the values for both `errorLabelID` and `processedLabelID`"
  },
  "typeVersion": 1
}