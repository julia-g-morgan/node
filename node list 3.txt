================ Node #1001 ================
{
  "id": "d7ac7121-8da7-4e45-9b74-daf07fbf15fb",
  "name": "Visit GH Page",
  "type": "n8n-nodes-base.httpRequest",
  "position": [
    -420,
    1420
  ],
  "parameters": {
    "url": "={{ $json.url }}",
    "options": {}
  },
  "typeVersion": 4.2
}

================ Node #1002 ================
{
  "id": "f156ca8e-7963-42b9-9612-9ab5efc53be4",
  "name": "Convert HTML To Markdown",
  "type": "n8n-nodes-base.markdown",
  "position": [
    -240,
    1700
  ],
  "parameters": {
    "html": "={{ $json.data }}",
    "options": {}
  },
  "typeVersion": 1,
  "alwaysOutputData": true
}

================ Node #1003 ================
{
  "id": "86221ed0-29fa-4775-ba36-8ffdf614977c",
  "name": "Filter Errored",
  "type": "n8n-nodes-base.filter",
  "position": [
    380,
    1440
  ],
  "parameters": {
    "options": {},
    "conditions": {
      "options": {
        "version": 2,
        "leftValue": "",
        "caseSensitive": true,
        "typeValidation": "strict"
      },
      "combinator": "and",
      "conditions": [
        {
          "id": "7776cb97-e02d-418e-a168-612bf92d4160",
          "operator": {
            "type": "string",
            "operation": "empty",
            "singleValue": true
          },
          "leftValue": "={{ $json.error }}",
          "rightValue": ""
        }
      ]
    }
  },
  "typeVersion": 2.2
}

================ Node #1004 ================
{
  "id": "f08c4f61-17a5-4899-ab3d-4e3ff5d1b8b7",
  "name": "No Operation, do nothing",
  "type": "n8n-nodes-base.noOp",
  "position": [
    1760,
    1540
  ],
  "parameters": {},
  "typeVersion": 1
}

================ Node #1005 ================
{
  "id": "48856b3b-a951-4e7f-a0b8-410a71e9b0a7",
  "name": "Update X Status",
  "type": "n8n-nodes-base.airtable",
  "position": [
    1500,
    1400
  ],
  "parameters": {
    "base": {
      "__rl": true,
      "mode": "list",
      "value": "app7fh2kmMzPKS4RZ",
      "cachedResultUrl": "https://airtable.com/app7fh2kmMzPKS4RZ",
      "cachedResultName": "Twitter Agent"
    },
    "table": {
      "__rl": true,
      "mode": "list",
      "value": "tblf0cODJFdvDj7vU",
      "cachedResultUrl": "https://airtable.com/app7fh2kmMzPKS4RZ/tblf0cODJFdvDj7vU",
      "cachedResultName": "My Tweets"
    },
    "columns": {
      "value": {
        "id": "={{ $('Create Item').item.json.id }}",
        "TDone": true
      },
      "schema": [
        {
          "id": "id",
          "type": "string",
          "display": true,
          "removed": false,
          "readOnly": true,
          "required": false,
          "displayName": "id",
          "defaultMatch": true
        },
        {
          "id": "Post",
          "type": "string",
          "display": true,
          "removed": true,
          "readOnly": false,
          "required": false,
          "displayName": "Post",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "Title",
          "type": "string",
          "display": true,
          "removed": true,
          "readOnly": false,
          "required": false,
          "displayName": "Title",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "Url",
          "type": "string",
          "display": true,
          "removed": true,
          "readOnly": false,
          "required": false,
          "displayName": "Url",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "Tweet",
          "type": "string",
          "display": true,
          "removed": true,
          "readOnly": false,
          "required": false,
          "displayName": "Tweet",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "LinkedIn",
          "type": "string",
          "display": true,
          "removed": true,
          "readOnly": false,
          "required": false,
          "displayName": "LinkedIn",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "Date",
          "type": "string",
          "display": true,
          "removed": true,
          "readOnly": true,
          "required": false,
          "displayName": "Date",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "Last Modified",
          "type": "string",
          "display": true,
          "removed": true,
          "readOnly": true,
          "required": false,
          "displayName": "Last Modified",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "TDone",
          "type": "boolean",
          "display": true,
          "removed": false,
          "readOnly": false,
          "required": false,
          "displayName": "TDone",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "LDone",
          "type": "boolean",
          "display": true,
          "removed": true,
          "readOnly": false,
          "required": false,
          "displayName": "LDone",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        }
      ],
      "mappingMode": "defineBelow",
      "matchingColumns": [
        "id"
      ]
    },
    "options": {
      "typecast": true
    },
    "operation": "update"
  },
  "credentials": {
    "airtableTokenApi": {
      "id": "BxLldDZTAZvuWVbr",
      "name": "Airtable Personal Access Token account"
    }
  },
  "typeVersion": 2.1
}

================ Node #1006 ================
{
  "id": "c31bb906-2a0d-406a-a7cd-6fc4adfcb67b",
  "name": "LinkedIn",
  "type": "n8n-nodes-base.linkedIn",
  "position": [
    1200,
    1820
  ],
  "parameters": {
    "text": "={{ $('Filter Errored').item.json.message.content.linkedin }}",
    "person": "afi4Hy9wlI",
    "additionalFields": {}
  },
  "credentials": {
    "linkedInOAuth2Api": {
      "id": "S7G2oyLAmzhWuYFQ",
      "name": "LinkedIn account"
    }
  },
  "typeVersion": 1
}

================ Node #1007 ================
{
  "id": "4aab4cc2-4a51-432a-aa21-ba469c027ac6",
  "name": "Update L Status",
  "type": "n8n-nodes-base.airtable",
  "position": [
    1520,
    1680
  ],
  "parameters": {
    "base": {
      "__rl": true,
      "mode": "list",
      "value": "app7fh2kmMzPKS4RZ",
      "cachedResultUrl": "https://airtable.com/app7fh2kmMzPKS4RZ",
      "cachedResultName": "Twitter Agent"
    },
    "table": {
      "__rl": true,
      "mode": "list",
      "value": "tblf0cODJFdvDj7vU",
      "cachedResultUrl": "https://airtable.com/app7fh2kmMzPKS4RZ/tblf0cODJFdvDj7vU",
      "cachedResultName": "My Tweets"
    },
    "columns": {
      "value": {
        "id": "={{ $('Create Item').item.json.id }}",
        "LDone": true
      },
      "schema": [
        {
          "id": "id",
          "type": "string",
          "display": true,
          "removed": false,
          "readOnly": true,
          "required": false,
          "displayName": "id",
          "defaultMatch": true
        },
        {
          "id": "Post",
          "type": "string",
          "display": true,
          "removed": true,
          "readOnly": false,
          "required": false,
          "displayName": "Post",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "Title",
          "type": "string",
          "display": true,
          "removed": true,
          "readOnly": false,
          "required": false,
          "displayName": "Title",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "Url",
          "type": "string",
          "display": true,
          "removed": true,
          "readOnly": false,
          "required": false,
          "displayName": "Url",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "Tweet",
          "type": "string",
          "display": true,
          "removed": true,
          "readOnly": false,
          "required": false,
          "displayName": "Tweet",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "LinkedIn",
          "type": "string",
          "display": true,
          "removed": true,
          "readOnly": false,
          "required": false,
          "displayName": "LinkedIn",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "Date",
          "type": "string",
          "display": true,
          "removed": true,
          "readOnly": true,
          "required": false,
          "displayName": "Date",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "Last Modified",
          "type": "string",
          "display": true,
          "removed": true,
          "readOnly": true,
          "required": false,
          "displayName": "Last Modified",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "TDone",
          "type": "boolean",
          "display": true,
          "removed": true,
          "readOnly": false,
          "required": false,
          "displayName": "TDone",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "LDone",
          "type": "boolean",
          "display": true,
          "removed": false,
          "readOnly": false,
          "required": false,
          "displayName": "LDone",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        }
      ],
      "mappingMode": "defineBelow",
      "matchingColumns": [
        "id"
      ]
    },
    "options": {
      "typecast": true
    },
    "operation": "update"
  },
  "credentials": {
    "airtableTokenApi": {
      "id": "BxLldDZTAZvuWVbr",
      "name": "Airtable Personal Access Token account"
    }
  },
  "typeVersion": 2.1
}

================ Node #1008 ================
{
  "id": "72dd9714-c11d-4417-8710-89e416ac44c9",
  "name": "Search Item",
  "type": "n8n-nodes-base.airtable",
  "position": [
    -1100,
    1240
  ],
  "parameters": {
    "base": {
      "__rl": true,
      "mode": "list",
      "value": "app7fh2kmMzPKS4RZ",
      "cachedResultUrl": "https://airtable.com/app7fh2kmMzPKS4RZ",
      "cachedResultName": "Twitter Agent"
    },
    "table": {
      "__rl": true,
      "mode": "list",
      "value": "tblf0cODJFdvDj7vU",
      "cachedResultUrl": "https://airtable.com/app7fh2kmMzPKS4RZ/tblf0cODJFdvDj7vU",
      "cachedResultName": "My Tweets"
    },
    "options": {
      "fields": [
        "Title",
        "Url",
        "Tweet",
        "Date",
        "Post"
      ]
    },
    "operation": "search",
    "filterByFormula": "={Post}= {{ $json.Post }}"
  },
  "credentials": {
    "airtableTokenApi": {
      "id": "BxLldDZTAZvuWVbr",
      "name": "Airtable Personal Access Token account"
    }
  },
  "typeVersion": 2.1,
  "alwaysOutputData": true
}

================ Node #1009 ================
{
  "id": "f89fbada-0e53-44f0-a09b-119869fabd10",
  "name": "Create Item",
  "type": "n8n-nodes-base.airtable",
  "position": [
    580,
    1660
  ],
  "parameters": {
    "base": {
      "__rl": true,
      "mode": "list",
      "value": "app7fh2kmMzPKS4RZ",
      "cachedResultUrl": "https://airtable.com/app7fh2kmMzPKS4RZ",
      "cachedResultName": "Twitter Agent"
    },
    "table": {
      "__rl": true,
      "mode": "list",
      "value": "tblf0cODJFdvDj7vU",
      "cachedResultUrl": "https://airtable.com/app7fh2kmMzPKS4RZ/tblf0cODJFdvDj7vU",
      "cachedResultName": "My Tweets"
    },
    "columns": {
      "value": {
        "Url": "={{ $('Filter Unposted Items').item.json.url }}",
        "Post": "={{ $('Filter Unposted Items').item.json.Post }}",
        "Title": "={{ $('Filter Unposted Items').item.json.title }}",
        "Tweet": "={{ $json.message.content.twitter }}",
        "LinkedIn": "={{ $json.message.content.linkedin }}"
      },
      "schema": [
        {
          "id": "Post",
          "type": "string",
          "display": true,
          "removed": false,
          "readOnly": false,
          "required": false,
          "displayName": "Post",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "Title",
          "type": "string",
          "display": true,
          "removed": false,
          "readOnly": false,
          "required": false,
          "displayName": "Title",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "Url",
          "type": "string",
          "display": true,
          "removed": false,
          "readOnly": false,
          "required": false,
          "displayName": "Url",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "Tweet",
          "type": "string",
          "display": true,
          "removed": false,
          "readOnly": false,
          "required": false,
          "displayName": "Tweet",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "LinkedIn",
          "type": "string",
          "display": true,
          "removed": false,
          "readOnly": false,
          "required": false,
          "displayName": "LinkedIn",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "Date",
          "type": "string",
          "display": true,
          "removed": false,
          "readOnly": true,
          "required": false,
          "displayName": "Date",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        }
      ],
      "mappingMode": "defineBelow",
      "matchingColumns": []
    },
    "options": {},
    "operation": "create"
  },
  "credentials": {
    "airtableTokenApi": {
      "id": "BxLldDZTAZvuWVbr",
      "name": "Airtable Personal Access Token account"
    }
  },
  "typeVersion": 2.1
}

================ Node #1010 ================
{
  "id": "51a2c3d3-3e75-4375-b2b6-4bb86fa71855",
  "name": "X",
  "type": "n8n-nodes-base.twitter",
  "onError": "continueRegularOutput",
  "position": [
    1180,
    1380
  ],
  "parameters": {
    "text": "={{ $('Filter Errored').item.json.message.content.twitter }}",
    "additionalFields": {}
  },
  "credentials": {
    "twitterOAuth2Api": {
      "id": "YQyS9lQTpZtZkefS",
      "name": "X account"
    }
  },
  "executeOnce": false,
  "typeVersion": 2
}

================ Node #1011 ================
{
  "id": "58869c5b-9fb2-4f76-8788-68056cda45b0",
  "name": "Validate Generate Content",
  "type": "n8n-nodes-base.code",
  "onError": "continueRegularOutput",
  "position": [
    180,
    1680
  ],
  "parameters": {
    "mode": "runOnceForEachItem",
    "jsCode": "if ($json.message.content.twitter && $json.message.content.linkedin) {\n \n return $json;\n} else {\n\n const parsedContent = JSON.parse($json.message.content);\n if ($json.message.content.twitter && $json.message.content.linkedin) {\n return parsedContent;\n }\n\n console.log(\"Invalid formatting\")\n return {}\n}"
  },
  "typeVersion": 2
}

================ Node #1012 ================
{
  "id": "527fd640-8bc8-4043-92a6-52fbea8de63f",
  "name": "Schedule Trigger",
  "type": "n8n-nodes-base.scheduleTrigger",
  "position": [
    -1780,
    1640
  ],
  "parameters": {
    "rule": {
      "interval": [
        {
          "field": "hours",
          "hoursInterval": 6
        }
      ]
    }
  },
  "typeVersion": 1.2
}

================ Node #1013 ================
{
  "id": "f00c1de5-d5bd-4d78-8717-d26dd739adc7",
  "name": "Merge",
  "type": "n8n-nodes-base.merge",
  "position": [
    -840,
    1420
  ],
  "parameters": {},
  "typeVersion": 3,
  "alwaysOutputData": true
}

================ Node #1014 ================
{
  "id": "3529fba4-173c-4378-ae69-43a3bae0813f",
  "name": "Generate Content",
  "type": "@n8n/n8n-nodes-langchain.openAi",
  "position": [
    -120,
    1440
  ],
  "parameters": {
    "modelId": {
      "__rl": true,
      "mode": "list",
      "value": "gpt-4o-mini",
      "cachedResultName": "GPT-4O-MINI"
    },
    "options": {},
    "messages": {
      "values": [
        {
          "role": "system",
          "content": "You are an AI-powered social media assistant specialized in crafting short-form, engaging posts for Twitter and LinkedIn. Your tone should blend the enthusiasm of a Tech Evangelist with the narrative depth of a Storyteller. The goal is to highlight technological and open-source projects in a friendly, forward-thinking manner, connecting them to real-world use cases. \n\nGuidelines:\n1. Output must be in JSON with separate fields for \u201ctwitter\u201d and \u201clinkedin.\u201d\n2. Do not include emojis or marketing buzzwords (\u201ccutting-edge,\u201d \u201cdisruptive,\u201d etc.).\n3. Write naturally and concisely. Avoid overly formal or robotic language.\n4. Twitter posts must be under 280 characters (including spaces and URL).\n5. LinkedIn posts should be slightly longer, yet still succinct, and focus on storytelling and real-world applications.\n6. Provide a single call-to-action in each post.\n7. Do not imply ownership of the project unless explicitly stated.\n8. Maintain a professional yet approachable tone in both outputs.\n"
        },
        {
          "content": "=Using the following details, generate two posts\u2014one for Twitter and one for LinkedIn\u2014incorporating an enthusiastic yet narrative-driven style:\n\nTitle: {{ $('Filter Unposted Items').item.json.title }}\nDetails in markdown: {{ $json.data }}\nRepository Link: {{ $('Filter Unposted Items').item.json.url }} (this is the actual link you want to be inserted)\n\nConstraints:\n- No emojis.\n- Keep the Twitter post under 280 characters (including the link).\n- Use a friendly, forward-thinking tone that weaves in a short narrative where possible.\n- Highlight how the project solves a real problem or benefits the user.\n- End each post with one clear CTA (e.g., \u201cCheck it out!\u201d or \u201cLearn more.\u201d).\n- **Ensure the tone is neutral and does not imply personal involvement** (e.g., avoid phrases like \"my journey\" or \"I found it fascinating\").\n- **LinkedIn post should be more detailed**: Provide context, explain the key features, highlight how it can be useful to different audiences, and elaborate on the problem it solves or the impact it can have.\n- Output your response in JSON with the structure:\n```json\n{\n \"twitter\": \"Your Twitter post here\",\n \"linkedin\": \"Your LinkedIn post here\"\n}\n"
        }
      ]
    },
    "jsonOutput": true
  },
  "credentials": {
    "openAiApi": {
      "id": "IfJo4dG8AUORk6f0",
      "name": "OpenAi account"
    }
  },
  "typeVersion": 1.7,
  "alwaysOutputData": true
}

================ Node #1015 ================
{
  "id": "2dfd7849-877c-4bd3-b248-94140a1fe209",
  "name": "Sticky Note",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    -320,
    960
  ],
  "parameters": {
    "width": 619.8433261701165,
    "height": 97.20332107671479,
    "content": "Automate the curation and sharing of trending GitHub discussions from Hacker News to Twitter and LinkedIn. This workflow leverages AI to generate engaging posts, streamlining your social media content creation and distribution.\n\n"
  },
  "typeVersion": 1
}

================ Node #1016 ================
{
  "id": "20704a99-1234-46dc-b8c8-860b051b3b85",
  "name": "Sticky Note1",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    -1620,
    1520
  ],
  "parameters": {
    "color": 5,
    "width": 524.8824946275869,
    "height": 420.37647358435385,
    "content": "I crawl Hacker News and extract Github links."
  },
  "typeVersion": 1
}

================ Node #1017 ================
{
  "id": "5cfa2c30-6c88-429a-8b5f-0034d2352cc2",
  "name": "Sticky Note2",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    -480,
    1280
  ],
  "parameters": {
    "color": 5,
    "width": 828.144505037599,
    "height": 670.031562962293,
    "content": "This is where the magic happens. I use the Github url extracted earlier and visit Github page to get more insights in the project being shared. Then I ask Chat GPT very nicely to help me get a Tweet and a LinkedIn post"
  },
  "typeVersion": 1
}

================ Node #1018 ================
{
  "id": "caec3df6-ddcc-4959-94e1-18163cf3128f",
  "name": "Sticky Note3",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    1100,
    1280
  ],
  "parameters": {
    "color": 5,
    "width": 285.9487894560623,
    "height": 751.2077576680031,
    "content": "One last magic trick, Send the generated Tweet and the post to the respective platforms."
  },
  "typeVersion": 1
}

================ Node #1019 ================
{
  "id": "89c8472d-3329-4f94-a656-2539e061eeb0",
  "name": "Ping Me",
  "type": "n8n-nodes-base.telegram",
  "position": [
    720,
    1420
  ],
  "parameters": {
    "text": "=Hi There, here is your readymade tweet - \n\n {{ $json.fields.Tweet }}\n\nAnd your readymade LinkedIn post -\n\n {{ $json.fields.LinkedIn }}\n\n",
    "chatId": "1297549992",
    "additionalFields": {}
  },
  "credentials": {
    "telegramApi": {
      "id": "1RZApQ3BwJxFn9jp",
      "name": "Telegram account"
    }
  },
  "typeVersion": 1.2
}

================ Node #1020 ================
{
  "id": "b1444e6d-0cab-4082-af42-a8decc97d9b4",
  "name": "Sticky Note4",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    640,
    1300
  ],
  "parameters": {
    "color": 5,
    "width": 264.5060210432334,
    "height": 307.03612625939974,
    "content": "Just pinging the owner that something is about to be posted and wait for 5 mins before final posting."
  },
  "typeVersion": 1
}

================ Node #1021 ================
{
  "id": "01c2f7ff-ff6c-4a60-9581-f8c5f3985792",
  "name": "Wait for 5 mins before posting",
  "type": "n8n-nodes-base.wait",
  "position": [
    880,
    1660
  ],
  "webhookId": "0c7ee388-30cf-4a99-9bb0-0fd85171c794",
  "parameters": {
    "unit": "minutes"
  },
  "typeVersion": 1.1
}

================ Node #1022 ================
{
  "id": "909c7e7d-ea84-4612-a322-b1fa889b2efb",
  "name": "Sticky Note5",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    -920,
    1380
  ],
  "parameters": {
    "width": 400.8207630962184,
    "height": 392.80719991071624,
    "content": "CHORE"
  },
  "typeVersion": 1
}

================ Node #1023 ================
{
  "id": "04ab5b63-8def-4d49-9360-596261eb051c",
  "name": "Sticky Note6",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    -1140,
    1140
  ],
  "parameters": {
    "color": 5,
    "width": 195.58283685913963,
    "height": 285.5933578465706,
    "content": "Make sure we don't post the same content again."
  },
  "typeVersion": 1
}

================ Node #1024 ================
{
  "id": "5efbd956-51b6-4f94-aebc-07e3e691f7eb",
  "name": "OpenAI Chat Model1",
  "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
  "position": [
    -180,
    480
  ],
  "parameters": {
    "model": {
      "__rl": true,
      "mode": "list",
      "value": "gpt-4o-mini"
    },
    "options": {}
  },
  "credentials": {
    "openAiApi": {
      "id": "95QGJD3XSz0piaNU",
      "name": "OpenAi account"
    }
  },
  "typeVersion": 1.2
}

================ Node #1025 ================
{
  "id": "a1acd323-ed07-41b4-a51e-614afe361893",
  "name": "Window Buffer Memory",
  "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
  "position": [
    0,
    480
  ],
  "parameters": {
    "sessionKey": "={{ $json.timestamp }}",
    "sessionIdType": "customKey",
    "contextWindowLength": 200
  },
  "typeVersion": 1.3
}

================ Node #1026 ================
{
  "id": "c3c2b5fa-c294-4306-a050-dccd592477fa",
  "name": "Google Analytics",
  "type": "n8n-nodes-base.googleAnalyticsTool",
  "position": [
    160,
    480
  ],
  "parameters": {
    "metricsGA4": {
      "metricValues": [
        {
          "listName": "sessions"
        }
      ]
    },
    "propertyId": {
      "__rl": true,
      "mode": "list",
      "value": "404306108",
      "cachedResultUrl": "https://analytics.google.com/analytics/web/#/p404306108/",
      "cachedResultName": "East Coast Concrete Coating"
    },
    "dimensionsGA4": {
      "dimensionValues": [
        {},
        {
          "listName": "sourceMedium"
        }
      ]
    },
    "additionalFields": {}
  },
  "credentials": {
    "googleAnalyticsOAuth2": {
      "id": "sVZ61SpNfC2D1Z7V",
      "name": "Google Analytics account"
    }
  },
  "typeVersion": 2
}

================ Node #1027 ================
{
  "id": "cbc7b539-2fa6-493b-a66c-13db8d8d420c",
  "name": "Create UTM Link & Send To Database",
  "type": "n8n-nodes-base.manualTrigger",
  "position": [
    -440,
    -80
  ],
  "parameters": {},
  "typeVersion": 1
}

================ Node #1028 ================
{
  "id": "5358f2cc-bdb0-4e9b-a6b9-93418f83db02",
  "name": "Set UTM Parameters For Link",
  "type": "n8n-nodes-base.set",
  "position": [
    -220,
    -80
  ],
  "parameters": {
    "options": {},
    "assignments": {
      "assignments": [
        {
          "id": "28d0a36d-5b03-4b74-9941-ef0e1aab86bf",
          "name": "website_url",
          "type": "string",
          "value": "https://ecconcretecoating.com/"
        },
        {
          "id": "1a2ee174-4684-4246-813f-b67285af48b8",
          "name": "campaign_id",
          "type": "string",
          "value": "12246"
        },
        {
          "id": "e15a846d-6e37-4fbf-a9f4-b3fce3441295",
          "name": "campaign_source",
          "type": "string",
          "value": "google"
        },
        {
          "id": "f15e2bb1-08a6-48c4-8458-b753864e9364",
          "name": "campaign_medium",
          "type": "string",
          "value": "display"
        },
        {
          "id": "548900ab-aa2c-498f-bbd9-a787306e72db",
          "name": "campaign_name",
          "type": "string",
          "value": "summerfun"
        },
        {
          "id": "fd8d1bd4-a75d-4c49-b795-8fda7c377b66",
          "name": "campaign_term",
          "type": "string",
          "value": "conretecoating"
        }
      ]
    }
  },
  "typeVersion": 3.4
}

================ Node #1029 ================
{
  "id": "45daf73a-01c2-40ab-8546-7fdd489e2a1c",
  "name": "Create UTM Link With Parameters",
  "type": "n8n-nodes-base.code",
  "position": [
    40,
    -140
  ],
  "parameters": {
    "jsCode": "const items = $input.all();\nconst updatedItems = items.map((item) => {\n const utmUrl = `${item?.json?.website_url}?utm_source=${item?.json?.campaign_source}&utm_medium=${item?.json?.campaign_medium}&utm_campaign=${item?.json?.campaign_name}&utm_term=${item?.json?.campaign_term}&utm_content=${item?.json?.campaign_id}`;\n item.json.utmUrl = utmUrl;\n return item;\n});\nreturn updatedItems;\n"
  },
  "typeVersion": 2
}

================ Node #1030 ================
{
  "id": "a621984d-eea5-464d-9be3-e620e779abd5",
  "name": "Submit UTM Link To Database",
  "type": "n8n-nodes-base.airtable",
  "position": [
    280,
    -200
  ],
  "parameters": {
    "base": {
      "__rl": true,
      "mode": "list",
      "value": "appIXd8a8JeB9bPaL",
      "cachedResultUrl": "https://airtable.com/appIXd8a8JeB9bPaL",
      "cachedResultName": "Untitled Base"
    },
    "table": {
      "__rl": true,
      "mode": "list",
      "value": "tblXyFxXMHraieGCa",
      "cachedResultUrl": "https://airtable.com/appIXd8a8JeB9bPaL/tblXyFxXMHraieGCa",
      "cachedResultName": "UTM_URL"
    },
    "columns": {
      "value": {
        "URL": "={{ $json.utmUrl }}"
      },
      "schema": [
        {
          "id": "id",
          "type": "string",
          "display": true,
          "removed": false,
          "readOnly": true,
          "required": false,
          "displayName": "id",
          "defaultMatch": true
        },
        {
          "id": "URL",
          "type": "string",
          "display": true,
          "removed": false,
          "readOnly": false,
          "required": false,
          "displayName": "URL",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        }
      ],
      "mappingMode": "defineBelow",
      "matchingColumns": [
        "id"
      ],
      "attemptToConvertTypes": false,
      "convertFieldsToString": false
    },
    "options": {},
    "operation": "upsert"
  },
  "credentials": {
    "airtableTokenApi": {
      "id": "0ApVmNsLu7aFzQD6",
      "name": "Airtable Personal Access Token account"
    }
  },
  "typeVersion": 2.1
}

================ Node #1031 ================
{
  "id": "19074462-d719-4fdf-bc59-d6b2ecd1ce20",
  "name": "Create QR Code With Submitted QR Link",
  "type": "n8n-nodes-base.httpRequest",
  "position": [
    280,
    -20
  ],
  "parameters": {
    "url": "=https://quickchart.io/qr?text={{ $json.utmUrl }}&size=300&margin=10&ecLevel=H&dark=000000&light=FFFFFF\n",
    "options": {}
  },
  "typeVersion": 4.2
}

================ Node #1032 ================
{
  "id": "a8c22bb2-f8eb-4e5f-b288-9c25e0aeb648",
  "name": "Schedule Google Analytics Report To Marketing Manager",
  "type": "n8n-nodes-base.scheduleTrigger",
  "position": [
    -460,
    280
  ],
  "parameters": {
    "rule": {
      "interval": [
        {}
      ]
    }
  },
  "typeVersion": 1.2
}

================ Node #1033 ================
{
  "id": "268c110c-2b7c-4450-b5b0-5d5326eac17f",
  "name": "Google Analytics Data Analysis Agent",
  "type": "@n8n/n8n-nodes-langchain.agent",
  "position": [
    -100,
    280
  ],
  "parameters": {
    "text": "={{ $json.timestamp }}",
    "options": {
      "systemMessage": "\"You are an advanced data analytics AI specializing in executive reporting. Your task is to analyze the provided dataset and generate a structured executive summary that highlights key insights, trends, and actionable takeaways. Structure your summary in the following format:\n\nOverview \u2013 Briefly describe the dataset and its significance.\nKey Performance Indicators (KPIs) \u2013 Highlight the most important metrics and compare them to previous periods if applicable.\nTrends & Insights \u2013 Identify patterns, growth areas, declines, and anomalies.\nOpportunities & Recommendations \u2013 Provide strategic recommendations based on the insights.\nConclusion \u2013 Summarize the key takeaways concisely.\n*Ensure the tone is professional, clear, and tailored for executives who require quick, data-driven insights without unnecessary details.\""
    },
    "promptType": "define"
  },
  "typeVersion": 1.7
}

================ Node #1034 ================
{
  "id": "1b012731-e67b-4e0d-95b7-a7f587754a05",
  "name": "Send Summary Report To Marketing Manager",
  "type": "n8n-nodes-base.gmail",
  "position": [
    300,
    280
  ],
  "webhookId": "a9b88615-c7e2-4b56-891a-98f4d6b34220",
  "parameters": {
    "sendTo": "john@marketingcanopy.com",
    "message": "={{ $json.output }}",
    "options": {},
    "subject": "Google Analytics Metrics Summary Report"
  },
  "credentials": {
    "gmailOAuth2": {
      "id": "pIXP1ZseBP4Z5CCp",
      "name": "Gmail account"
    }
  },
  "typeVersion": 2.1
}

================ Node #1035 ================
{
  "id": "9da758e1-8aed-446b-a074-8fee5405583f",
  "name": "Sticky Note",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    -540,
    -280
  ],
  "parameters": {
    "width": 500,
    "height": 400,
    "content": "Create a marketing link with UTM parameters. Easily store in database and have QR code created and ready as well.\n\nType in requirements:\nwebsite URL\ncampaign id\ncampaign source\ncampaign medium\ncampaign name\ncampaign term\n\n"
  },
  "typeVersion": 1
}

================ Node #1036 ================
{
  "id": "92f5df8d-88ca-4b58-b544-c0b2d3578a73",
  "name": "Sticky Note1",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    0,
    -380
  ],
  "parameters": {
    "color": 4,
    "width": 580,
    "height": 540,
    "content": "Code node creates the URL with UTM parameters. \n\nIt then sends to your Airtable database to store for records. It also creates a QR code with the embedded link to be used for materials. \n\nSample Airtable Setup:\n-Website Link UTM column"
  },
  "typeVersion": 1
}

================ Node #1037 ================
{
  "id": "408af10c-4b0e-4d94-b02d-5d887fb150c3",
  "name": "Sticky Note2",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    -540,
    180
  ],
  "parameters": {
    "color": 5,
    "width": 1340,
    "height": 460,
    "content": "Schedule a Google Analytics Reports with Medium/Source to track UTM link performance. Update the reporting fields to fit your business needs. You can track traffic, conversions and other engagement metrics.\n\n*Sample Google Report Metrics: Sessions. Update metrics as needed."
  },
  "typeVersion": 1
}

================ Node #1038 ================
{
  "id": "0f38fe62-36d9-43da-a992-a3981377e89e",
  "name": "Webhook",
  "type": "n8n-nodes-base.webhook",
  "position": [
    -220,
    -20
  ],
  "webhookId": "e9a97dd5-f1e7-4d5b-a6f1-be5f0c9eb96c",
  "parameters": {
    "path": "e9a97dd5-f1e7-4d5b-a6f1-be5f0c9eb96c",
    "options": {},
    "httpMethod": "POST",
    "responseMode": "responseNode"
  },
  "typeVersion": 2
}

================ Node #1039 ================
{
  "id": "83959562-edf5-4d37-bd11-47186c6a31c7",
  "name": "OpenAI",
  "type": "@n8n/n8n-nodes-langchain.openAi",
  "position": [
    -40,
    -20
  ],
  "parameters": {
    "text": "You are an expert financial analyst tasked with providing an advanced technical analyses of a stock or crypto currency chart provided. Your analysis will be based on various technical indicators and will provide simple insights for novice traders. Just explain to traders were you expect the market is moving. Also warn them this is not a binding advice. Make sure to explain everything in infant language.",
    "modelId": {
      "__rl": true,
      "mode": "list",
      "value": "gpt-4o-mini",
      "cachedResultName": "GPT-4O-MINI"
    },
    "options": {},
    "resource": "image",
    "inputType": "base64",
    "operation": "analyze"
  },
  "credentials": {
    "openAiApi": {
      "id": "8MS1muoK4z86fxUs",
      "name": "OpenAi account"
    }
  },
  "typeVersion": 1.7
}

================ Node #1040 ================
{
  "id": "c6f1f833-7ba3-49c5-86df-f586e6bb5975",
  "name": "Respond to Webhook",
  "type": "n8n-nodes-base.respondToWebhook",
  "position": [
    140,
    -20
  ],
  "parameters": {
    "options": {},
    "respondWith": "text",
    "responseBody": "={{ $json.content }}"
  },
  "typeVersion": 1.1
}

================ Node #1041 ================
{
  "id": "e3a38a76-283b-4567-a8da-315ef1e2bc4f",
  "name": "Sticky Note",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    -260,
    -140
  ],
  "parameters": {
    "width": 620,
    "height": 300,
    "content": "## N8N en OpenAI image analyser"
  },
  "typeVersion": 1
}

================ Node #1042 ================
{
  "id": "8e7e26db-8767-4727-ab0c-900b50a73411",
  "name": "Sticky Note1",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    -80,
    180
  ],
  "parameters": {
    "color": 5,
    "height": 340,
    "content": "## AI prompt\nYou are an expert financial analyst tasked with providing an advanced technical analyses of a stock or crypto currency chart provided. Your analysis will be based on various technical indicators and will provide simple insights for novice traders. Just explain to traders were you expect the market is moving. Also warn them this is not a binding advice. Make sure to explain everything in infant language."
  },
  "typeVersion": 1
}

================ Node #1043 ================
{
  "id": "832e4a1d-320f-4793-be3c-8829776a3ce6",
  "name": "When clicking \u2018Test workflow\u2019",
  "type": "n8n-nodes-base.manualTrigger",
  "position": [
    760,
    560
  ],
  "parameters": {},
  "typeVersion": 1
}

================ Node #1044 ================
{
  "id": "63be0638-d7df-4af8-ba56-555593a6de0c",
  "name": "Default Data Loader",
  "type": "@n8n/n8n-nodes-langchain.documentDefaultDataLoader",
  "position": [
    2080,
    740
  ],
  "parameters": {
    "options": {},
    "dataType": "binary"
  },
  "typeVersion": 1
}

================ Node #1045 ================
{
  "id": "ffe33bb2-efd0-4b6e-a146-aaded7c28304",
  "name": "Embeddings OpenAI",
  "type": "@n8n/n8n-nodes-langchain.embeddingsOpenAi",
  "position": [
    1860,
    740
  ],
  "parameters": {
    "options": {}
  },
  "credentials": {
    "openAiApi": {
      "id": "XXXXXX",
      "name": "OpenAi account"
    }
  },
  "typeVersion": 1.1
}

================ Node #1046 ================
{
  "id": "32de5318-ea5d-4951-b81c-3c96167bc320",
  "name": "Recursive Character Text Splitter",
  "type": "@n8n/n8n-nodes-langchain.textSplitterRecursiveCharacterTextSplitter",
  "position": [
    2060,
    880
  ],
  "parameters": {
    "options": {},
    "chunkOverlap": 100
  },
  "typeVersion": 1
}

================ Node #1047 ================
{
  "id": "6306d263-16c1-4a68-9318-c58fea1e3e62",
  "name": "Window Buffer Memory",
  "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
  "position": [
    1000,
    1340
  ],
  "parameters": {},
  "typeVersion": 1.2
}

================ Node #1048 ================
{
  "id": "364cf0ce-524c-4b61-89f3-40b2801bc7e3",
  "name": "OpenAI Chat Model",
  "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
  "position": [
    840,
    1340
  ],
  "parameters": {
    "options": {}
  },
  "credentials": {
    "openAiApi": {
      "id": "XXXXXX",
      "name": "OpenAi account"
    }
  },
  "typeVersion": 1
}

================ Node #1049 ================
{
  "id": "901163a1-1e66-42ee-bfd0-9ed815a7c83d",
  "name": "Vector Store Tool",
  "type": "@n8n/n8n-nodes-langchain.toolVectorStore",
  "position": [
    1120,
    1380
  ],
  "parameters": {
    "name": "company_files",
    "topK": 5,
    "description": "Retrieves information from the company handbook, 401k policies, benefits overview, and expense policies available to all employees."
  },
  "typeVersion": 1
}

================ Node #1050 ================
{
  "id": "b87fa113-6a32-48fc-8e06-049345c66f38",
  "name": "OpenAI Chat Model1",
  "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
  "position": [
    1220,
    1600
  ],
  "parameters": {
    "options": {}
  },
  "credentials": {
    "openAiApi": {
      "id": "XXXXXX",
      "name": "OpenAi account"
    }
  },
  "typeVersion": 1
}

================ Node #1051 ================
{
  "id": "9dc1a896-c8a5-4d22-b029-14eae0717bd8",
  "name": "Embeddings OpenAI1",
  "type": "@n8n/n8n-nodes-langchain.embeddingsOpenAi",
  "position": [
    940,
    1700
  ],
  "parameters": {
    "options": {}
  },
  "credentials": {
    "openAiApi": {
      "id": "XXXXXX",
      "name": "OpenAi account"
    }
  },
  "typeVersion": 1.1
}

================ Node #1052 ================
{
  "id": "20cda474-ef6f-48af-b299-04f1fe980d3d",
  "name": "Employee Lookup Tool",
  "type": "@n8n/n8n-nodes-langchain.toolWorkflow",
  "position": [
    1440,
    1360
  ],
  "parameters": {
    "name": "employee_lookup_tool",
    "workflowId": {
      "__rl": true,
      "mode": "id",
      "value": "={{ $workflow.id }}"
    },
    "description": "Call this tool with the full name of an employee to retrieve their details from our HRIS, including their job title, department, and supervisor. If an employee name is not provided, you may call this tool with a department name to retrieve the most senior person in that department. This tool requires an exact match on employee names but can infer the senior-most person for a department query.",
    "jsonSchemaExample": "{\n\t\"name\": \"The name of an employee or department\"\n}",
    "specifyInputSchema": true
  },
  "typeVersion": 1.2
}

================ Node #1053 ================
{
  "id": "55718295-459b-4a4b-8c57-fd6b31e3d963",
  "name": "OpenAI Chat Model2",
  "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
  "position": [
    1960,
    1500
  ],
  "parameters": {
    "options": {}
  },
  "credentials": {
    "openAiApi": {
      "id": "XXXXXX",
      "name": "OpenAi account"
    }
  },
  "typeVersion": 1
}

================ Node #1054 ================
{
  "id": "e574d63d-7e38-4d90-9533-64a4ddbe2e36",
  "name": "OpenAI Chat Model3",
  "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
  "position": [
    2980,
    1600
  ],
  "parameters": {
    "options": {}
  },
  "credentials": {
    "openAiApi": {
      "id": "XXXXXX",
      "name": "OpenAi account"
    }
  },
  "typeVersion": 1
}

================ Node #1055 ================
{
  "id": "04d53430-b8d9-43ff-b2c4-ef0da2d799c0",
  "name": "OpenAI Chat Model4",
  "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
  "position": [
    3700,
    1620
  ],
  "parameters": {
    "options": {}
  },
  "credentials": {
    "openAiApi": {
      "id": "XXXXXX",
      "name": "OpenAi account"
    }
  },
  "typeVersion": 1
}

================ Node #1056 ================
{
  "id": "9759fe08-3c81-4472-8d62-2c5d26156984",
  "name": "Auto-fixing Output Parser",
  "type": "@n8n/n8n-nodes-langchain.outputParserAutofixing",
  "position": [
    3880,
    1600
  ],
  "parameters": {},
  "typeVersion": 1
}

================ Node #1057 ================
{
  "id": "d8830fd8-f238-4e5d-8c5f-bf83c9450dbe",
  "name": "OpenAI Chat Model5",
  "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
  "position": [
    3780,
    1700
  ],
  "parameters": {
    "options": {}
  },
  "credentials": {
    "openAiApi": {
      "id": "XXXXXX",
      "name": "OpenAi account"
    }
  },
  "typeVersion": 1
}

================ Node #1058 ================
{
  "id": "da580308-e4ed-400b-99e2-31baf27b039d",
  "name": "Structured Output Parser",
  "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
  "position": [
    4080,
    1700
  ],
  "parameters": {
    "jsonSchemaExample": "{\n\t\"name\": \"The name of an employee\"\n}"
  },
  "typeVersion": 1.2
}

================ Node #1059 ================
{
  "id": "e81dbe81-5f6b-4b2c-a4bc-afa0136e33ac",
  "name": "Sticky Note",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    680,
    460
  ],
  "parameters": {
    "color": 7,
    "width": 1695.17727595829,
    "height": 582.7965199011514,
    "content": "## STEP #1: Retrieve company policies and load them into a vector store"
  },
  "typeVersion": 1
}

================ Node #1060 ================
{
  "id": "629872ed-2f99-424d-96da-feee6df96d3d",
  "name": "Sticky Note1",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    680,
    1080
  ],
  "parameters": {
    "color": 4,
    "width": 873.5637402697844,
    "height": 780.6181567295652,
    "content": "## BambooHR AI-Powered HR Benefits and Company Policies Chatbot"
  },
  "typeVersion": 1
}

================ Node #1061 ================
{
  "id": "8888281b-5701-4c62-b76b-a0b6a80d8463",
  "name": "Sticky Note2",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    1580,
    1075.4375994898523
  ],
  "parameters": {
    "color": 7,
    "width": 2783.3549952823255,
    "height": 781.525845027296,
    "content": "## (Optional) STEP #2: Set up employee lookup tool"
  },
  "typeVersion": 1
}

================ Node #1062 ================
{
  "id": "17044553-d081-4c17-8108-d0327709f352",
  "name": "GET all files",
  "type": "n8n-nodes-base.bambooHr",
  "position": [
    960,
    560
  ],
  "parameters": {
    "resource": "file",
    "operation": "getAll",
    "returnAll": true,
    "simplifyOutput": false
  },
  "credentials": {
    "bambooHrApi": {
      "id": "XXXXXX",
      "name": "BambooHR account"
    }
  },
  "typeVersion": 1
}

================ Node #1063 ================
{
  "id": "939881b1-eb18-4ab7-ac4a-9edcc218356f",
  "name": "Sticky Note3",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    920,
    720
  ],
  "parameters": {
    "color": 5,
    "width": 177.89252000024067,
    "height": 99.24268260893132,
    "content": "Toggle **off** the _simplify_ option to ensure categories are retrieved as well"
  },
  "typeVersion": 1
}

================ Node #1064 ================
{
  "id": "0907a1d3-97e2-4219-bfbc-524186f6d889",
  "name": "Filter out files from undesired categories",
  "type": "n8n-nodes-base.filter",
  "position": [
    1160,
    560
  ],
  "parameters": {
    "options": {},
    "conditions": {
      "options": {
        "version": 2,
        "leftValue": "",
        "caseSensitive": true,
        "typeValidation": "strict"
      },
      "combinator": "and",
      "conditions": [
        {
          "id": "b85b86cd-0b54-4348-a538-8ff4ae625b9a",
          "operator": {
            "name": "filter.operator.equals",
            "type": "string",
            "operation": "equals"
          },
          "leftValue": "={{ $json.name }}",
          "rightValue": "=Company Files"
        }
      ]
    }
  },
  "typeVersion": 2.2
}

================ Node #1065 ================
{
  "id": "43069219-7cd9-4515-846d-ed6a0f9bbb61",
  "name": "Split out individual files",
  "type": "n8n-nodes-base.splitOut",
  "position": [
    1360,
    560
  ],
  "parameters": {
    "options": {},
    "fieldToSplitOut": "files"
  },
  "typeVersion": 1
}

================ Node #1066 ================
{
  "id": "8412af5f-f07f-4a98-a174-e363ba04f902",
  "name": "Filter out non-pdf files",
  "type": "n8n-nodes-base.filter",
  "position": [
    1560,
    560
  ],
  "parameters": {
    "options": {},
    "conditions": {
      "options": {
        "version": 2,
        "leftValue": "",
        "caseSensitive": true,
        "typeValidation": "strict"
      },
      "combinator": "and",
      "conditions": [
        {
          "id": "73cc2cb9-04fa-43e7-a459-de0bf26ffb18",
          "operator": {
            "type": "boolean",
            "operation": "true",
            "singleValue": true
          },
          "leftValue": "={{ $json.originalFileName.endsWith(\".pdf\") }}",
          "rightValue": ""
        }
      ]
    }
  },
  "typeVersion": 2.2
}

================ Node #1067 ================
{
  "id": "7e007a29-c902-41d3-ab22-f6a93bc43f7d",
  "name": "Download file from BambooHR",
  "type": "n8n-nodes-base.bambooHr",
  "position": [
    1760,
    560
  ],
  "parameters": {
    "fileId": "={{ $json.id }}",
    "resource": "file",
    "operation": "download"
  },
  "credentials": {
    "bambooHrApi": {
      "id": "XXXXXX",
      "name": "BambooHR account"
    }
  },
  "typeVersion": 1
}

================ Node #1068 ================
{
  "id": "cec7ce3a-77df-4400-8683-fb5cf87004b6",
  "name": "Supabase Vector Store",
  "type": "@n8n/n8n-nodes-langchain.vectorStoreSupabase",
  "position": [
    1960,
    560
  ],
  "parameters": {
    "mode": "insert",
    "options": {
      "queryName": "match_files"
    },
    "tableName": {
      "__rl": true,
      "mode": "list",
      "value": "company_files",
      "cachedResultName": "company_files"
    }
  },
  "credentials": {
    "supabaseApi": {
      "id": "XXXXXX",
      "name": "Supabase account"
    }
  },
  "typeVersion": 1
}

================ Node #1069 ================
{
  "id": "5e070dc3-5f6d-44bb-a655-b769aac14890",
  "name": "Sticky Note4",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    1600,
    1140
  ],
  "parameters": {
    "color": 5,
    "width": 530.9221622705562,
    "height": 91.00370621080086,
    "content": "This employee lookup tool gives the AI Benefits and Company Policies chatbot additional superpowers by allowing it to **search for an individual or a department to retrieve contact information from BambooHR**."
  },
  "typeVersion": 1
}

================ Node #1070 ================
{
  "id": "8f3cd44e-d1e5-4806-9d89-78c8728ea0e4",
  "name": "Employee initiates a conversation",
  "type": "@n8n/n8n-nodes-langchain.chatTrigger",
  "position": [
    760,
    1140
  ],
  "webhookId": "27ec9df7-5007-4642-81c7-7fcf7e834c43",
  "parameters": {
    "options": {}
  },
  "typeVersion": 1.1
}

================ Node #1071 ================
{
  "id": "3d56dc6a-13e2-404b-ad38-6370b9610f61",
  "name": "Supabase Vector Store Retrieval",
  "type": "@n8n/n8n-nodes-langchain.vectorStoreSupabase",
  "position": [
    940,
    1540
  ],
  "parameters": {
    "options": {
      "queryName": "match_files"
    },
    "tableName": {
      "__rl": true,
      "mode": "list",
      "value": "company_files",
      "cachedResultName": "company_files"
    }
  },
  "credentials": {
    "supabaseApi": {
      "id": "XXXXXX",
      "name": "Supabase account"
    }
  },
  "typeVersion": 1
}

================ Node #1072 ================
{
  "id": "1e6f5d4a-5897-42b7-bfcf-e69b7880b6c4",
  "name": "Sticky Note5",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    680,
    1880
  ],
  "parameters": {
    "width": 865.771928038017,
    "height": 281.07009330339326,
    "content": "### AI Chatbot Operating Guidelines \n- When an employee asks for a contact person, first attempt to find the relevant contact in company_files. \n- If a contact person is found but their details (e.g., email or phone number) are missing, use the `employee_lookup_tool` to retrieve their contact details. \n- If no contact person is found: \n 1. Use the `employee_lookup_tool` with \"HR\" (or another relevant department) to retrieve the most senior person in that department. \n 2. If no senior contact is found, ask the employee for their name. \n 3. Use the `employee_lookup_tool` to retrieve their supervisor\u2019s name. \n 4. Use the `employee_lookup_tool` to retrieve their supervisor\u2019s details. \n 5. Provide the supervisor's contact information and recommend them as the best next point of contact. "
  },
  "typeVersion": 1
}

================ Node #1073 ================
{
  "id": "ba8c82cb-4972-46cc-8594-dfe71149a41c",
  "name": "AI-Powered HR Benefits and Company Policies Chatbot",
  "type": "n8n-nodes-base.executeWorkflowTrigger",
  "position": [
    1640,
    1340
  ],
  "parameters": {},
  "typeVersion": 1
}

================ Node #1074 ================
{
  "id": "aaf611fd-1779-4826-8f9c-4e9a7a538af0",
  "name": "Text Classifier",
  "type": "@n8n/n8n-nodes-langchain.textClassifier",
  "position": [
    1840,
    1340
  ],
  "parameters": {
    "options": {},
    "inputText": "={{ $json.query.name }}",
    "categories": {
      "categories": [
        {
          "category": "person",
          "description": "This is the name of a person."
        },
        {
          "category": "department",
          "description": "This is the name of a department within the company."
        }
      ]
    }
  },
  "typeVersion": 1
}

================ Node #1075 ================
{
  "id": "4a1e0d47-87f8-4301-9aee-2227003a40e6",
  "name": "GET all employees",
  "type": "n8n-nodes-base.bambooHr",
  "position": [
    2260,
    1240
  ],
  "parameters": {
    "operation": "getAll",
    "returnAll": true
  },
  "credentials": {
    "bambooHrApi": {
      "id": "XXXXXX",
      "name": "BambooHR account"
    }
  },
  "typeVersion": 1
}

================ Node #1076 ================
{
  "id": "93e1017a-07c6-4b97-be90-659a91fdc065",
  "name": "Filter out other employees",
  "type": "n8n-nodes-base.filter",
  "position": [
    2460,
    1240
  ],
  "parameters": {
    "options": {},
    "conditions": {
      "options": {
        "version": 2,
        "leftValue": "",
        "caseSensitive": true,
        "typeValidation": "strict"
      },
      "combinator": "and",
      "conditions": [
        {
          "id": "e80c892e-21dc-4d6e-8ef6-c2ffaea6d43e",
          "operator": {
            "name": "filter.operator.equals",
            "type": "string",
            "operation": "equals"
          },
          "leftValue": "={{ $json.displayName }}",
          "rightValue": "={{ $('AI-Powered HR Benefits and Company Policies Chatbot').item.json.query.name }}"
        }
      ]
    }
  },
  "typeVersion": 2.2
}

================ Node #1077 ================
{
  "id": "c45eec9a-05ca-4b35-b595-42f2251a01ec",
  "name": "Stringify employee record for response",
  "type": "n8n-nodes-base.set",
  "position": [
    2660,
    1240
  ],
  "parameters": {
    "options": {},
    "assignments": {
      "assignments": [
        {
          "id": "73ae7ef0-339a-4e32-bbc9-c40cefd37757",
          "name": "response",
          "type": "string",
          "value": "={{ $json.toJsonString() }}"
        }
      ]
    }
  },
  "typeVersion": 3.4
}

================ Node #1078 ================
{
  "id": "aa30062a-2476-4fc2-8380-6d2106885ae2",
  "name": "GET all employees (second path)",
  "type": "n8n-nodes-base.bambooHr",
  "position": [
    2260,
    1440
  ],
  "parameters": {
    "operation": "getAll",
    "returnAll": true
  },
  "credentials": {
    "bambooHrApi": {
      "id": "XXXXXX",
      "name": "BambooHR account"
    }
  },
  "typeVersion": 1
}

================ Node #1079 ================
{
  "id": "f44cb9ab-00aa-4ebc-bb1a-6ba1da2e2aaa",
  "name": "Extract departments",
  "type": "n8n-nodes-base.aggregate",
  "position": [
    2460,
    1440
  ],
  "parameters": {
    "options": {},
    "fieldsToAggregate": {
      "fieldToAggregate": [
        {
          "renameField": true,
          "outputFieldName": "departments",
          "fieldToAggregate": "department"
        }
      ]
    }
  },
  "typeVersion": 1
}

================ Node #1080 ================
{
  "id": "855a6968-d919-4071-96d8-04cbc4b6ec39",
  "name": "Ensure uniqueness in department list",
  "type": "n8n-nodes-base.set",
  "position": [
    2660,
    1440
  ],
  "parameters": {
    "options": {},
    "assignments": {
      "assignments": [
        {
          "id": "34f456ff-d2c5-431f-ade3-ace48abd0c6a",
          "name": "departments",
          "type": "array",
          "value": "={{ $json.departments.unique() }}"
        },
        {
          "id": "cf31288a-65fc-45c6-8b6f-6680020dce09",
          "name": "query",
          "type": "string",
          "value": "={{ $('Text Classifier').item.json.query.name }}"
        }
      ]
    }
  },
  "typeVersion": 3.4
}

================ Node #1081 ================
{
  "id": "0dca5763-33c6-4444-b4e0-f26127bb91d5",
  "name": "Extract department",
  "type": "@n8n/n8n-nodes-langchain.informationExtractor",
  "position": [
    2860,
    1440
  ],
  "parameters": {
    "text": "={{ $json.query }}",
    "options": {},
    "attributes": {
      "attributes": [
        {
          "name": "department",
          "description": "=The department from the following list that would be most applicable:\n{{ $json.departments }}"
        }
      ]
    }
  },
  "typeVersion": 1
}

================ Node #1082 ================
{
  "id": "833b43e8-7ed5-4431-b362-b5d11bb9f787",
  "name": "Retrieve all employees",
  "type": "n8n-nodes-base.bambooHr",
  "position": [
    3220,
    1440
  ],
  "parameters": {
    "operation": "getAll",
    "returnAll": true
  },
  "credentials": {
    "bambooHrApi": {
      "id": "XXXXXX",
      "name": "BambooHR account"
    }
  },
  "typeVersion": 1
}

================ Node #1083 ================
{
  "id": "adcaafb5-700f-4e93-a7f4-c393967fb4f0",
  "name": "Filter out other departments",
  "type": "n8n-nodes-base.filter",
  "position": [
    3420,
    1440
  ],
  "parameters": {
    "options": {},
    "conditions": {
      "options": {
        "version": 2,
        "leftValue": "",
        "caseSensitive": true,
        "typeValidation": "strict"
      },
      "combinator": "and",
      "conditions": [
        {
          "id": "a88bf53c-ecfd-49a7-8180-1e8b8eaeb6fd",
          "operator": {
            "name": "filter.operator.equals",
            "type": "string",
            "operation": "equals"
          },
          "leftValue": "={{ $json.department }}",
          "rightValue": "={{ $('Extract department').item.json.output.department }}"
        }
      ]
    }
  },
  "typeVersion": 2.2
}

================ Node #1084 ================
{
  "id": "fe928eb9-2b70-4ab9-a5a6-a4c141467ad7",
  "name": "Extract relevant employee fields",
  "type": "n8n-nodes-base.aggregate",
  "position": [
    3620,
    1440
  ],
  "parameters": {
    "include": "specifiedFields",
    "options": {},
    "aggregate": "aggregateAllItemData",
    "fieldsToInclude": "id, displayName, jobTitle, workEmail",
    "destinationFieldName": "department_employees"
  },
  "typeVersion": 1
}

================ Node #1085 ================
{
  "id": "0632ae1b-280e-486e-9cdd-c6c9fd2a1b6e",
  "name": "Identify most senior employee",
  "type": "@n8n/n8n-nodes-langchain.chainLlm",
  "position": [
    3800,
    1440
  ],
  "parameters": {
    "text": "=Who is the most senior employee from this list:\n{{ $json.department_employees.toJsonString() }}",
    "promptType": "define",
    "hasOutputParser": true
  },
  "typeVersion": 1.4
}

================ Node #1086 ================
{
  "id": "0e6c8d0a-d84f-468b-993b-c5a14d7d458f",
  "name": "Format name for response",
  "type": "n8n-nodes-base.set",
  "position": [
    4160,
    1440
  ],
  "parameters": {
    "options": {},
    "assignments": {
      "assignments": [
        {
          "id": "2b4412bf-142b-4ba0-a6b2-654e97c263e5",
          "name": "response",
          "type": "string",
          "value": "={{ $json.output.name }}"
        }
      ]
    }
  },
  "typeVersion": 3.4
}

================ Node #1087 ================
{
  "id": "e865d8bf-ab6d-4d23-9d7c-a76f96ba75a1",
  "name": "HR AI Agent",
  "type": "@n8n/n8n-nodes-langchain.agent",
  "position": [
    1040,
    1140
  ],
  "parameters": {
    "options": {
      "systemMessage": "You are a helpful HR assistant accessible by employees at our company.\n\nObjective: \nAssist employees with questions regarding company policies, documents, and escalation procedures.\n\nTools: \n1. A vector store database (company_files) containing the company handbook, 401k policy, expense policy, and employee benefits. \n2. An employee lookup tool (employee_lookup_tool) that retrieves details about an employee when provided with their name. It can also retrieve the most senior person in a department if given a department name. \n\nGuidelines: \n- When an employee asks for a contact person, first attempt to find the relevant contact in company_files. \n- If a contact person is found but their details (e.g., email or phone number) are missing, use the `employee_lookup_tool` to retrieve their contact details. \n- If no contact person is found: \n 1. Use the `employee_lookup_tool` with \"HR\" (or another relevant department) to retrieve the most senior person in that department. \n 2. If no senior contact is found, ask the employee for their name. \n 3. Use the `employee_lookup_tool` to retrieve their supervisor\u2019s name. \n 4. Use the `employee_lookup_tool` to retrieve their supervisor\u2019s details. \n 5. Provide the supervisor's contact information and recommend them as the best next point of contact. \n"
    }
  },
  "typeVersion": 1.7
}

================ Node #1088 ================
{
  "id": "3aa42dcf-a411-4bd8-87b3-9ab9d0043303",
  "name": "Sticky Note6",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    1600,
    1660
  ],
  "parameters": {
    "color": 3,
    "width": 340.93489445096634,
    "height": 180.79319430657273,
    "content": "### GetAll employees from BambooHR\nBambooHR does not offer search by {field} functionality for its `/employees` endpoint, so filtering must be done after data retrieval. This can be inefficient for very large organizations where there may be multiple employees with the same name or simply a large number of employees."
  },
  "typeVersion": 1
}

================ Node #1089 ================
{
  "id": "3b3b400c-9c7e-4fd0-91f3-1c6bcf05617f",
  "name": "Sticky Note7",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    2240,
    1140
  ],
  "parameters": {
    "color": 5,
    "width": 542.9452105095002,
    "height": 89.69037140899545,
    "content": "### GET singular employee by name path\nThis path may be used multiple times by the HR AI Agent to look up the employee's details, and then to look up their supervisor's details."
  },
  "typeVersion": 1
}

================ Node #1090 ================
{
  "id": "6ad78a36-e68d-4b0d-b532-ca67bcd0738d",
  "name": "Sticky Note8",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    2240,
    1620
  ],
  "parameters": {
    "color": 5,
    "width": 542.9452105095002,
    "height": 121.0648445295759,
    "content": "### GET senior leader of department path\nThis path would normally only be used when no other contacts can be identified from the company_files. The employee can retrieve the contact details for the most senior leader of a department should they request it."
  },
  "typeVersion": 1
}

================ Node #1091 ================
{
  "id": "25d1e603-cce0-4cd1-9293-810880c65584",
  "name": "Sticky Note9",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    4020,
    1320
  ],
  "parameters": {
    "color": 5,
    "width": 300.8019702746294,
    "height": 97.8161667645835,
    "content": "### Final node returns employee name\nThe AI Agent can then call the employee lookup path to retrieve details, if requested."
  },
  "typeVersion": 1
}

================ Node #1092 ================
{
  "id": "e7076eaa-a67e-4b02-9aec-553c405f3bb9",
  "name": "Sticky Note10",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    700,
    940
  ],
  "parameters": {
    "color": 4,
    "width": 244.3952545193282,
    "height": 87.34661077350344,
    "content": "## About the maker\n**[Find Ludwig Gerdes on LinkedIn](https://www.linkedin.com/in/ludwiggerdes)**"
  },
  "typeVersion": 1
}

================ Node #1093 ================
{
  "id": "fd74706b-609b-4723-b4a4-067e1b064194",
  "name": "AI Agent",
  "type": "@n8n/n8n-nodes-langchain.agent",
  "position": [
    300,
    60
  ],
  "parameters": {
    "options": {
      "systemMessage": "=You help youtube creators find trending videos based on a specific niche.\n\nVerify if the user informed a niche before doing anything. If not, then ask him for one by giving him suggestions for him to select from.\n\nAfter you know what type of content the user might produce, use the \"youtube_search\" tool up to 3 times with different search terms based on the user's content type and niche.\n\nThe tool will answer with a list of videos from the last 2 days that had the most amount of relevancy. It returns a list of json's covering each video's id, view count, like count, comment count, description, channel title, tags and channel id. Each video is separated by \"### NEXT VIDEO FOUND: ###\".\n\nYou should then proceed to understand the data received then provide the user with insightful data of what could be trending from the past 2 days. Provide the user links to the trending videos which should be in this structure:\n\nhttps://www.youtube.com/watch?v={video_id}\n\nto reach the channel's link you should use:\n\nhttps://www.youtube.com/channel/{channel_id}\n\nFind patterns in the tags, titles and especially in the related content for the videos found.\n\nYour mission isn't to find the trending videos. It's to provide the user with valuable information of what is trending in that niche in terms of content news. Remember to provide the user with the numbers of views, likes and comments while commenting about any video. So you should not talk about any particular video, focus rather in explaining the overall senario of all that was found.\n\nExample of response:\n\n\"It seems like what is trending in digital marketing right now is talking about mental triggers, since 3 of the most trending videos in the last 2 days were about...\""
    }
  },
  "typeVersion": 1.6
}

================ Node #1094 ================
{
  "id": "ced4b937-b590-4727-b1f2-a5e88b96091a",
  "name": "chat_message_received",
  "type": "@n8n/n8n-nodes-langchain.chatTrigger",
  "position": [
    80,
    60
  ],
  "webhookId": "ff9622a4-a6ec-4396-b9de-c95bd834c23c",
  "parameters": {
    "options": {}
  },
  "typeVersion": 1.1
}

================ Node #1095 ================
{
  "id": "35a91359-5007-407d-a750-d6642e595690",
  "name": "youtube_search",
  "type": "@n8n/n8n-nodes-langchain.toolWorkflow",
  "position": [
    540,
    180
  ],
  "parameters": {
    "name": "youtube_search",
    "workflowId": {
      "__rl": true,
      "mode": "list",
      "value": "N9DveO781xbNf8qs",
      "cachedResultName": "Youtube Search Workflow"
    },
    "description": "Call this tool to search for trending videos based on a query.",
    "jsonSchemaExample": "{\n\t\"search_term\": \"some_value\"\n}",
    "specifyInputSchema": true
  },
  "typeVersion": 1.2
}

================ Node #1096 ================
{
  "id": "42f41096-531d-4587-833a-6f659ef78dd0",
  "name": "openai_llm",
  "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
  "position": [
    260,
    180
  ],
  "parameters": {
    "options": {}
  },
  "typeVersion": 1
}

================ Node #1097 ================
{
  "id": "e4bda5b9-abd4-4cd6-8c95-126a01aa6e21",
  "name": "window_buffer_memory",
  "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
  "position": [
    400,
    180
  ],
  "parameters": {},
  "typeVersion": 1.2
}

================ Node #1098 ================
{
  "id": "f6d86c5a-393a-4bcf-bdaf-3b06c79fa51d",
  "name": "Sticky Note1",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    0,
    0
  ],
  "parameters": {
    "color": 7,
    "width": 693.2572054941234,
    "height": 354.53098948245656,
    "content": "Main Workflow"
  },
  "typeVersion": 1
}

================ Node #1099 ================
{
  "id": "4ddbc3f0-e3d7-4ce4-a732-d731c05024d2",
  "name": "find_video_data1",
  "type": "n8n-nodes-base.httpRequest",
  "position": [
    700,
    720
  ],
  "parameters": {
    "url": "https://www.googleapis.com/youtube/v3/videos?",
    "options": {},
    "sendQuery": true,
    "queryParameters": {
      "parameters": [
        {
          "name": "key",
          "value": "={{ $env[\"GOOGLE_API_KEY\"] }}"
        },
        {
          "name": "id",
          "value": "={{ $json.id.videoId }}"
        },
        {
          "name": "part",
          "value": "contentDetails, snippet, statistics"
        }
      ]
    }
  },
  "typeVersion": 4.2
}

================ Node #1100 ================
{
  "id": "fdb28635-801d-4ce0-8919-11446c6a7a82",
  "name": "get_videos1",
  "type": "n8n-nodes-base.youTube",
  "position": [
    280,
    560
  ],
  "parameters": {
    "limit": 3,
    "filters": {
      "q": "={{ $json.query.search_term }}",
      "regionCode": "US",
      "publishedAfter": "={{ new Date(Date.now() - 2 * 24 * 60 * 60 * 1000).toISOString() }}"
    },
    "options": {
      "order": "relevance",
      "safeSearch": "moderate"
    },
    "resource": "video"
  },
  "credentials": {
    "youTubeOAuth2Api": {
      "id": "dCyrga3t1tlgQQy0",
      "name": "YouTube account"
    }
  },
  "typeVersion": 1
}

================ Node #1101 ================
{
  "id": "60e9e61d-0e5e-4212-8b55-71299aeec4d5",
  "name": "response1",
  "type": "n8n-nodes-base.set",
  "position": [
    1100,
    500
  ],
  "parameters": {
    "options": {},
    "assignments": {
      "assignments": [
        {
          "id": "b9b9117b-ea14-482e-a13b-e68b8e6b441d",
          "name": "response",
          "type": "string",
          "value": "={{ $input.all() }}"
        }
      ]
    }
  },
  "typeVersion": 3.4
}

================ Node #1102 ================
{
  "id": "254a6740-8b25-4898-9795-4c3f0009471f",
  "name": "group_data1",
  "type": "n8n-nodes-base.set",
  "position": [
    1160,
    700
  ],
  "parameters": {
    "options": {},
    "assignments": {
      "assignments": [
        {
          "id": "47c172ad-90c8-4cf6-a9f5-50607e04cc90",
          "name": "id",
          "type": "string",
          "value": "={{ $json.items[0].id }}"
        },
        {
          "id": "9e639efa-0714-4b06-9847-f7b4b2fbef59",
          "name": "viewCount",
          "type": "string",
          "value": "={{ $json.items[0].statistics.viewCount }}"
        },
        {
          "id": "93328f00-91b8-425b-ad0f-a330b2f95242",
          "name": "likeCount",
          "type": "string",
          "value": "={{ $json.items[0].statistics.likeCount }}"
        },
        {
          "id": "015b0fb2-2a98-464c-a21b-51100616f26a",
          "name": "commentCount",
          "type": "string",
          "value": "={{ $json.items[0].statistics.commentCount }}"
        },
        {
          "id": "cf1e1ec3-a138-42b8-8747-d249afa58dd3",
          "name": "description",
          "type": "string",
          "value": "={{ $json.items[0].snippet.description }}"
        },
        {
          "id": "c5c9a3a2-b820-4932-a38a-e21102992215",
          "name": "title",
          "type": "string",
          "value": "={{ $json.items[0].snippet.title }}"
        },
        {
          "id": "38216ead-1f8d-4f93-b6ad-5ef709a1ad2a",
          "name": "channelTitle",
          "type": "string",
          "value": "={{ $json.items[0].snippet.channelTitle }}"
        },
        {
          "id": "ff34194d-3d46-43a8-9127-84708987f536",
          "name": "tags",
          "type": "string",
          "value": "={{ $json.items[0].snippet.tags.join(', ') }}"
        },
        {
          "id": "e50b0f7b-3e37-4557-8863-d68d4fa505c8",
          "name": "channelId",
          "type": "string",
          "value": "={{ $json.items[0].snippet.channelId }}"
        }
      ]
    }
  },
  "typeVersion": 3.4
}

================ Node #1103 ================
{
  "id": "124c19a9-cbbd-4010-be37-50523c05f64b",
  "name": "save_data_to_memory1",
  "type": "n8n-nodes-base.code",
  "position": [
    1360,
    700
  ],
  "parameters": {
    "mode": "runOnceForEachItem",
    "jsCode": "const workflowStaticData = $getWorkflowStaticData('global');\n\nif (typeof workflowStaticData.lastExecution !== 'object') {\n workflowStaticData.lastExecution = {\n response: \"\"\n };\n}\n\nfunction removeEmojis(text) {\n return text.replace(/[\\u{1F600}-\\u{1F64F}|\\u{1F300}-\\u{1F5FF}|\\u{1F680}-\\u{1F6FF}|\\u{2600}-\\u{26FF}|\\u{2700}-\\u{27BF}]/gu, '');\n}\n\nfunction cleanDescription(description) {\n return description\n .replace(/https?:\\/\\/\\S+/g, '')\n .replace(/www\\.\\S+/g, '')\n .replace(/ +/g, ' ')\n .trim();\n}\n\nconst currentItem = { ...$input.item };\n\nif (currentItem.description) {\n currentItem.description = cleanDescription(currentItem.description);\n}\n\nlet sanitizedItem = JSON.stringify(currentItem)\n .replace(/\\\\r/g, ' ')\n .replace(/https?:\\/\\/\\S+/g, '')\n .replace(/www\\.\\S+/g, '')\n .replace(/\\\\n/g, ' ')\n .replace(/\\n/g, ' ')\n .replace(/\\\\/g, '')\n .replace(/ +/g, ' ')\n .trim();\n\nif (workflowStaticData.lastExecution.response) {\n workflowStaticData.lastExecution.response += ' ### NEXT VIDEO FOUND: ### ';\n}\n\nworkflowStaticData.lastExecution.response += removeEmojis(sanitizedItem);\n\nreturn workflowStaticData.lastExecution;\n"
  },
  "typeVersion": 2
}

================ Node #1104 ================
{
  "id": "67f92ec4-71c0-49df-a0ea-11d2e3cf0f94",
  "name": "retrieve_data_from_memory1",
  "type": "n8n-nodes-base.code",
  "position": [
    780,
    500
  ],
  "parameters": {
    "jsCode": "const workflowStaticData = $getWorkflowStaticData('global');\n\nconst lastExecution = workflowStaticData.lastExecution;\n\nreturn lastExecution;"
  },
  "typeVersion": 2
}

================ Node #1105 ================
{
  "id": "685820ba-b089-4cdc-984d-52f134754b5c",
  "name": "loop_over_items1",
  "type": "n8n-nodes-base.splitInBatches",
  "position": [
    500,
    560
  ],
  "parameters": {
    "options": {}
  },
  "typeVersion": 3
}

================ Node #1106 ================
{
  "id": "3d4d5a4b-d06b-41db-bb78-a64a266d5308",
  "name": "if_longer_than_3_",
  "type": "n8n-nodes-base.if",
  "position": [
    880,
    720
  ],
  "parameters": {
    "options": {},
    "conditions": {
      "options": {
        "version": 2,
        "leftValue": "",
        "caseSensitive": true,
        "typeValidation": "strict"
      },
      "combinator": "and",
      "conditions": [
        {
          "id": "08ba3db9-6bcf-47f8-a74d-9e26f28cb08f",
          "operator": {
            "type": "boolean",
            "operation": "true",
            "singleValue": true
          },
          "leftValue": "={{ \n (() => {\n const duration = $json.items[0].contentDetails.duration;\n\n // Helper function to convert ISO 8601 duration to seconds\n const iso8601ToSeconds = iso8601 => {\n const match = iso8601.match(/PT(?:(\\d+)H)?(?:(\\d+)M)?(?:(\\d+)S)?/);\n const hours = parseInt(match[1] || 0, 10);\n const minutes = parseInt(match[2] || 0, 10);\n const seconds = parseInt(match[3] || 0, 10);\n return hours * 3600 + minutes * 60 + seconds;\n };\n\n // Convert duration to seconds\n const durationInSeconds = iso8601ToSeconds(duration);\n\n // Check if greater than 210 seconds (3 minutes 30 seconds)\n return durationInSeconds > 210;\n })() \n}}",
          "rightValue": ""
        }
      ]
    }
  },
  "typeVersion": 2.2
}

================ Node #1107 ================
{
  "id": "7c6b8b82-fd6c-4f44-bccf-88c5a76f0319",
  "name": "Sticky Note2",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    0,
    420
  ],
  "parameters": {
    "color": 5,
    "width": 1607,
    "height": 520,
    "content": "This part should be abstracted to another workflow and called inside the \"youtube_search\" tool of the main AI Agent."
  },
  "typeVersion": 1
}

================ Node #1108 ================
{
  "id": "12d0470e-1030-47c4-8bd0-890d5b3a5976",
  "name": "AI Agent",
  "type": "@n8n/n8n-nodes-langchain.agent",
  "position": [
    120,
    -120
  ],
  "parameters": {
    "text": "={{ $json['Briefing'] }}",
    "options": {
      "systemMessage": "=<system_prompt> \nYOU ARE AN EXPERT CAPTION CREATOR AGENT FOR INSTAGRAM, DESIGNED FOR USE IN N8N WORKFLOWS. YOUR TASK IS TO CREATE A CREATIVE, TARGET AUDIENCE-ORIENTED, AND MEMORABLE CAPTION BASED ON THE BRIEFING: `{{ $json['Briefing'] }}`. YOU SHOULD RETRIEVE ADDITIONAL INFORMATION ABOUT THE TARGET AUDIENCE AND PREFERRED WORDING USING THE TOOL \"BACKGROUND INFO\" TO MAXIMIZE THE QUALITY AND RELEVANCE OF THE CAPTION. \n\n###INSTRUCTIONS### \n\n- YOU MUST: \n 1. READ AND UNDERSTAND THE BRIEFING CAREFULLY. \n 2. RETRIEVE ADDITIONAL DATA ABOUT THE TARGET AUDIENCE AND COMMUNICATION STYLE USING THE \"BACKGROUND INFO\" TOOL. \n 3. CREATE A CAPTION THAT IS CREATIVE, ENGAGING, AND TAILORED TO THE TARGET AUDIENCE. \n 4. ENSURE THAT THE CAPTION INCLUDES A CLEAR CALL-TO-ACTION (CTA) THAT ENCOURAGES USERS TO TAKE ACTION (E.G., LIKE, COMMENT, OR CLICK). \n 5. OUTPUT ONLY THE FINAL CAPTION WITHOUT ANY ACCOMPANYING EXPLANATIONS, FEEDBACK, OR COMMENTS. \n\n###CHAIN OF THOUGHTS### \n\n1. **UNDERSTANDING THE BRIEFING**: \n - THOROUGHLY READ THE BRIEFING PROVIDED UNDER `{{ $json['Briefing/Notizen'] }}`. \n - IDENTIFY THE MAIN FOCUS OF THE POST (E.G., PRODUCT PROMOTION, INSPIRATION, INFORMATION). \n - NOTE THE KEY THEMES, MOOD, AND DESIRED IMPACT. \n\n2. **TARGET AUDIENCE ANALYSIS**: \n - USE THE \"BACKGROUND INFO\" TOOL TO: \n - RETRIEVE THE TARGET AUDIENCE'S AGE, INTERESTS, AND NEEDS. \n - DEFINE THE APPROPRIATE TONE (FRIENDLY, PROFESSIONAL, INSPIRATIONAL, ETC.). \n\n3. **CREATIVE CAPTION DEVELOPMENT**: \n - DEVELOP AN OPENING SENTENCE THAT GRABS THE TARGET AUDIENCE'S ATTENTION. \n - WRITE A BODY THAT CONVEYS THE CORE MESSAGE OF THE POST AND RESONATES WITH THE TARGET AUDIENCE. \n - ADD AN INVITING CTA (E.G., \"What do you think? Share your thoughts in the comments!\" OR \"Click the link in our bio!\"). \n\n4. **FINALIZATION**: \n - CHECK THE CAPTION FOR CLARITY, CONSISTENCY, AND GRAMMAR. \n - ENSURE THAT IT ALIGNS WITH THE TARGET AUDIENCE AND THE IDENTIFIED TONE. \n - MAXIMIZE CREATIVITY AND ENTERTAINMENT VALUE WITHOUT LOSING THE ESSENTIAL MESSAGE. \n\n5. **OUTPUT**: \n - OUTPUT ONLY THE FINAL CAPTION WITHOUT ANY ACCOMPANYING COMMENTS, FEEDBACK, OR EXPLANATIONS. \n\n###WHAT NOT TO DO### \n\n- **DO NOT OUTPUT ANY ACCOMPANYING TEXTS, EXPLANATIONS, OR FEEDBACK** ABOUT THE CAPTION. \n- **DO NOT WORK WITHOUT PRIOR TARGET AUDIENCE ANALYSIS**. \n- **DO NOT USE CLICH\u00c9 PHRASES** THAT HAVE NO RELEVANCE TO THE TARGET AUDIENCE. \n- **DO NOT ALLOW ANY SPELLING OR GRAMMATICAL ERRORS**. \n\n</system_prompt>\n"
    },
    "promptType": "define"
  },
  "typeVersion": 1.7
}

================ Node #1109 ================
{
  "id": "3a6fcc4e-46ed-4f80-a9ce-f955e3d47222",
  "name": "OpenAI Chat Model",
  "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
  "position": [
    80,
    100
  ],
  "parameters": {
    "model": "gpt-4o",
    "options": {}
  },
  "credentials": {
    "openAiApi": {
      "id": "EjchNb5GBqYh0Cqn",
      "name": "OpenAi account"
    }
  },
  "typeVersion": 1.1
}

================ Node #1110 ================
{
  "id": "1a8b6f44-b9cf-4c80-ac5d-358d7cf61404",
  "name": "Window Buffer Memory",
  "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
  "position": [
    220,
    100
  ],
  "parameters": {
    "sessionKey": "={{ $json.id }}",
    "sessionIdType": "customKey"
  },
  "typeVersion": 1.3
}

================ Node #1111 ================
{
  "id": "a4972690-5fa5-48bd-b5fd-b1899076b6c0",
  "name": "Get Airtable Record Data",
  "type": "n8n-nodes-base.airtable",
  "position": [
    -40,
    -120
  ],
  "parameters": {
    "id": "={{ $json.id }}",
    "base": {
      "__rl": true,
      "mode": "list",
      "value": "appXvZviYORVbPEaS",
      "cachedResultUrl": "https://airtable.com/appXvZviYORVbPEaS",
      "cachedResultName": "Redaktionsplan 2025 - E&P Reisen"
    },
    "table": {
      "__rl": true,
      "mode": "list",
      "value": "tbllbO3DyTNie9Pga",
      "cachedResultUrl": "https://airtable.com/appLe3fQHeaRN7kWG/tbllbO3DyTNie9Pga",
      "cachedResultName": "Redaktionsplanung"
    },
    "options": {}
  },
  "credentials": {
    "airtableTokenApi": {
      "id": "pMphGrxsDsELetHZ",
      "name": "Airtable account"
    }
  },
  "typeVersion": 2.1
}

================ Node #1112 ================
{
  "id": "27519b09-7ce7-4a8b-abe7-dc630eea24b0",
  "name": "Wait 1 Minute",
  "type": "n8n-nodes-base.wait",
  "position": [
    -200,
    -120
  ],
  "webhookId": "757986ac-2e3f-4a5b-993d-b53b8ae12258",
  "parameters": {
    "unit": "minutes",
    "amount": 1
  },
  "typeVersion": 1.1
}

================ Node #1113 ================
{
  "id": "b9e7c19a-e468-4f83-b1a4-2013af36caa0",
  "name": "Format Fields",
  "type": "n8n-nodes-base.set",
  "position": [
    440,
    -120
  ],
  "parameters": {
    "options": {},
    "assignments": {
      "assignments": [
        {
          "id": "c7243724-463f-4732-8866-efdf19837f17",
          "name": "SoMe Text",
          "type": "string",
          "value": "={{ $json.output }}"
        }
      ]
    }
  },
  "typeVersion": 3.4
}

================ Node #1114 ================
{
  "id": "5d4e6149-20a5-42bf-be6b-6ebaa31c517e",
  "name": "Post Caption into Airtable Record",
  "type": "n8n-nodes-base.airtable",
  "position": [
    600,
    -120
  ],
  "parameters": {
    "base": {
      "__rl": true,
      "mode": "list",
      "value": "appXvZviYORVbPEaS",
      "cachedResultUrl": "https://airtable.com/appXvZviYORVbPEaS",
      "cachedResultName": "Redaktionsplan 2025 - E&P Reisen"
    },
    "table": {
      "__rl": true,
      "mode": "list",
      "value": "tblxsKj5PtumCR9um",
      "cachedResultUrl": "https://airtable.com/appXvZviYORVbPEaS/tblxsKj5PtumCR9um",
      "cachedResultName": "Redaktionsplanung"
    },
    "columns": {
      "value": {
        "id": "={{ $('Get Airtable Record Data').item.json.id }}",
        "Posten": false,
        "SoMe_Text_KI": "={{ $json['SoMe Text'] }}",
        "Werbeanzeige": false
      },
      "schema": [
        {
          "id": "id",
          "type": "string",
          "display": true,
          "removed": false,
          "readOnly": true,
          "required": false,
          "displayName": "id",
          "defaultMatch": true
        },
        {
          "id": "Beitragsname",
          "type": "string",
          "display": true,
          "removed": false,
          "readOnly": false,
          "required": false,
          "displayName": "Beitragsname",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "Marke",
          "type": "options",
          "display": true,
          "options": [
            {
              "name": "E&P",
              "value": "E&P"
            },
            {
              "name": "SER",
              "value": "SER"
            },
            {
              "name": "SBW",
              "value": "SBW"
            },
            {
              "name": "SZO",
              "value": "SZO"
            },
            {
              "name": "UCH",
              "value": "UCH"
            }
          ],
          "removed": false,
          "readOnly": false,
          "required": false,
          "displayName": "Marke",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "Netzwerk",
          "type": "array",
          "display": true,
          "options": [
            {
              "name": "Facebook",
              "value": "Facebook"
            },
            {
              "name": "Instagram",
              "value": "Instagram"
            },
            {
              "name": "Threads",
              "value": "Threads"
            },
            {
              "name": "TikTok",
              "value": "TikTok"
            },
            {
              "name": "YouTube Shorts",
              "value": "YouTube Shorts"
            },
            {
              "name": "MyBusiness",
              "value": "MyBusiness"
            },
            {
              "name": "Push",
              "value": "Push"
            },
            {
              "name": "WhatsApp",
              "value": "WhatsApp"
            },
            {
              "name": "LinkedIn",
              "value": "LinkedIn"
            },
            {
              "name": "CleverPush",
              "value": "CleverPush"
            },
            {
              "name": "SBW",
              "value": "SBW"
            }
          ],
          "removed": false,
          "readOnly": false,
          "required": false,
          "displayName": "Netzwerk",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "Status",
          "type": "options",
          "display": true,
          "options": [
            {
              "name": "Brainstorming",
              "value": "Brainstorming"
            },
            {
              "name": "Bitte formulieren",
              "value": "Bitte formulieren"
            },
            {
              "name": "Bitte checken/freigeben",
              "value": "Bitte checken/freigeben"
            },
            {
              "name": "Bitte \u00e4ndern",
              "value": "Bitte \u00e4ndern"
            },
            {
              "name": "Warten auf externe R\u00fcckmeldung",
              "value": "Warten auf externe R\u00fcckmeldung"
            },
            {
              "name": "Freigabe erteilt/Bitte einplanen",
              "value": "Freigabe erteilt/Bitte einplanen"
            },
            {
              "name": "Geplant/Ver\u00f6ffentlicht",
              "value": "Geplant/Ver\u00f6ffentlicht"
            }
          ],
          "removed": false,
          "readOnly": false,
          "required": false,
          "displayName": "Status",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "Zust\u00e4ndigkeit",
          "type": "string",
          "display": true,
          "removed": false,
          "readOnly": false,
          "required": false,
          "displayName": "Zust\u00e4ndigkeit",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "KW",
          "type": "options",
          "display": true,
          "options": [
            {
              "name": "KW 1",
              "value": "KW 1"
            },
            {
              "name": "KW 2",
              "value": "KW 2"
            },
            {
              "name": "KW 3",
              "value": "KW 3"
            },
            {
              "name": "KW 4",
              "value": "KW 4"
            },
            {
              "name": "KW 5",
              "value": "KW 5"
            },
            {
              "name": "KW 6",
              "value": "KW 6"
            },
            {
              "name": "KW 7",
              "value": "KW 7"
            },
            {
              "name": "KW 8",
              "value": "KW 8"
            },
            {
              "name": "KW 9",
              "value": "KW 9"
            },
            {
              "name": "KW 10",
              "value": "KW 10"
            },
            {
              "name": "KW 11",
              "value": "KW 11"
            },
            {
              "name": "KW 12",
              "value": "KW 12"
            },
            {
              "name": "KW 13",
              "value": "KW 13"
            },
            {
              "name": "KW 14",
              "value": "KW 14"
            },
            {
              "name": "KW 15",
              "value": "KW 15"
            },
            {
              "name": "KW 16",
              "value": "KW 16"
            },
            {
              "name": "KW 17",
              "value": "KW 17"
            },
            {
              "name": "KW 18",
              "value": "KW 18"
            },
            {
              "name": "KW 19",
              "value": "KW 19"
            },
            {
              "name": "KW 20",
              "value": "KW 20"
            },
            {
              "name": "KW 21",
              "value": "KW 21"
            },
            {
              "name": "KW 22",
              "value": "KW 22"
            },
            {
              "name": "KW 23",
              "value": "KW 23"
            },
            {
              "name": "KW 24",
              "value": "KW 24"
            },
            {
              "name": "KW 25",
              "value": "KW 25"
            },
            {
              "name": "KW 26",
              "value": "KW 26"
            },
            {
              "name": "KW 27",
              "value": "KW 27"
            },
            {
              "name": "KW 28",
              "value": "KW 28"
            },
            {
              "name": "KW 29",
              "value": "KW 29"
            },
            {
              "name": "KW 30",
              "value": "KW 30"
            },
            {
              "name": "KW 31",
              "value": "KW 31"
            },
            {
              "name": "KW 32",
              "value": "KW 32"
            },
            {
              "name": "KW 33",
              "value": "KW 33"
            },
            {
              "name": "KW 34",
              "value": "KW 34"
            },
            {
              "name": "KW 35",
              "value": "KW 35"
            },
            {
              "name": "KW 36",
              "value": "KW 36"
            },
            {
              "name": "KW 37",
              "value": "KW 37"
            },
            {
              "name": "KW 38",
              "value": "KW 38"
            },
            {
              "name": "KW 39",
              "value": "KW 39"
            },
            {
              "name": "KW 40",
              "value": "KW 40"
            },
            {
              "name": "KW 41",
              "value": "KW 41"
            },
            {
              "name": "KW 42",
              "value": "KW 42"
            },
            {
              "name": "KW 43",
              "value": "KW 43"
            },
            {
              "name": "KW 44",
              "value": "KW 44"
            },
            {
              "name": "KW 45",
              "value": "KW 45"
            },
            {
              "name": "KW 46",
              "value": "KW 46"
            },
            {
              "name": "KW 47",
              "value": "KW 47"
            },
            {
              "name": "KW 48",
              "value": "KW 48"
            },
            {
              "name": "KW 49",
              "value": "KW 49"
            },
            {
              "name": "KW 50",
              "value": "KW 50"
            },
            {
              "name": "KW 51",
              "value": "KW 51"
            },
            {
              "name": "KW 52",
              "value": "KW 52"
            },
            {
              "name": "47",
              "value": "47"
            }
          ],
          "removed": false,
          "readOnly": false,
          "required": false,
          "displayName": "KW",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "Ver\u00f6ffentlichungsdatum SoMe",
          "type": "dateTime",
          "display": true,
          "removed": false,
          "readOnly": false,
          "required": false,
          "displayName": "Ver\u00f6ffentlichungsdatum SoMe",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "Destination/Haus",
          "type": "array",
          "display": true,
          "options": [
            {
              "name": "1: Allgemein",
              "value": "1: Allgemein"
            },
            {
              "name": "Ahrntal - Bruggerhof",
              "value": "Ahrntal - Bruggerhof"
            },
            {
              "name": "Ahrntal - Christiler",
              "value": "Ahrntal - Christiler"
            },
            {
              "name": "Ahrntal - Griesfeld",
              "value": "Ahrntal - Griesfeld"
            },
            {
              "name": "Davos - Allgemein",
              "value": "Davos - Allgemein"
            },
            {
              "name": "Davos - Schweizerhaus",
              "value": "Davos - Schweizerhaus"
            },
            {
              "name": "Davos - Schwendi",
              "value": "Davos - Schwendi"
            },
            {
              "name": "Davos - Waldschl\u00f6ssli",
              "value": "Davos - Waldschl\u00f6ssli"
            },
            {
              "name": "Kleinwalsertal - Heuberghaus",
              "value": "Kleinwalsertal - Heuberghaus"
            },
            {
              "name": "L2A - SZO",
              "value": "L2A - SZO"
            },
            {
              "name": "L2A - UCH",
              "value": "L2A - UCH"
            },
            {
              "name": "Lenzerheide - Jenatsch",
              "value": "Lenzerheide - Jenatsch"
            },
            {
              "name": "Montafon - Josefsheim",
              "value": "Montafon - Josefsheim"
            },
            {
              "name": "Montafon - Klein Tirol",
              "value": "Montafon - Klein Tirol"
            },
            {
              "name": "PdS - Jolimont",
              "value": "PdS - Jolimont"
            },
            {
              "name": "PdS - Victoria",
              "value": "PdS - Victoria"
            },
            {
              "name": "Saalbach - Allgemein",
              "value": "Saalbach - Allgemein"
            },
            {
              "name": "Saalbach - Steinachhof",
              "value": "Saalbach - Steinachhof"
            },
            {
              "name": "Schweiz - Allgemein",
              "value": "Schweiz - Allgemein"
            },
            {
              "name": "Stubaital - Ranalt",
              "value": "Stubaital - Ranalt"
            },
            {
              "name": "Team",
              "value": "Team"
            },
            {
              "name": "VT - SBW",
              "value": "VT - SBW"
            },
            {
              "name": "SurfZone",
              "value": "SurfZone"
            },
            {
              "name": "lenzerheide - allgemein",
              "value": "lenzerheide - allgemein"
            },
            {
              "name": "Family",
              "value": "Family"
            },
            {
              "name": "Jobs",
              "value": "Jobs"
            },
            {
              "name": "L2A",
              "value": "L2A"
            },
            {
              "name": "Davos - Spinabad",
              "value": "Davos - Spinabad"
            }
          ],
          "removed": false,
          "readOnly": false,
          "required": false,
          "displayName": "Destination/Haus",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "Content Art",
          "type": "options",
          "display": true,
          "options": [
            {
              "name": "Bild(er)",
              "value": "Bild(er)"
            },
            {
              "name": "Video",
              "value": "Video"
            },
            {
              "name": "Carousel",
              "value": "Carousel"
            },
            {
              "name": "Story",
              "value": "Story"
            },
            {
              "name": "Reel",
              "value": "Reel"
            },
            {
              "name": "Link",
              "value": "Link"
            },
            {
              "name": "Bilderalbum",
              "value": "Bilderalbum"
            },
            {
              "name": "Text",
              "value": "Text"
            },
            {
              "name": "Push",
              "value": "Push"
            }
          ],
          "removed": false,
          "readOnly": false,
          "required": false,
          "displayName": "Content Art",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "Briefing/Notizen",
          "type": "string",
          "display": true,
          "removed": false,
          "readOnly": false,
          "required": false,
          "displayName": "Briefing/Notizen",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "Linkmanager-Link",
          "type": "string",
          "display": true,
          "removed": false,
          "readOnly": false,
          "required": false,
          "displayName": "Linkmanager-Link",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "Short Link",
          "type": "string",
          "display": true,
          "removed": false,
          "readOnly": false,
          "required": false,
          "displayName": "Short Link",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "Story",
          "type": "string",
          "display": true,
          "removed": false,
          "readOnly": false,
          "required": false,
          "displayName": "Story",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "MyBusiness Link",
          "type": "string",
          "display": true,
          "removed": false,
          "readOnly": false,
          "required": false,
          "displayName": "MyBusiness Link",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "SoMe Text",
          "type": "string",
          "display": true,
          "removed": false,
          "readOnly": false,
          "required": false,
          "displayName": "SoMe Text",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "Anzahl Hashtags",
          "type": "string",
          "display": true,
          "removed": true,
          "readOnly": true,
          "required": false,
          "displayName": "Anzahl Hashtags",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "Anzahl Zeichen",
          "type": "string",
          "display": true,
          "removed": true,
          "readOnly": true,
          "required": false,
          "displayName": "Anzahl Zeichen",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "SoMe Media",
          "type": "array",
          "display": true,
          "removed": false,
          "readOnly": false,
          "required": false,
          "displayName": "SoMe Media",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "Link zum Canva Layout",
          "type": "string",
          "display": true,
          "removed": false,
          "readOnly": false,
          "required": false,
          "displayName": "Link zum Canva Layout",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "Storylink Canva",
          "type": "string",
          "display": true,
          "removed": false,
          "readOnly": false,
          "required": false,
          "displayName": "Storylink Canva",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "MyBusiness Layout",
          "type": "string",
          "display": true,
          "removed": false,
          "readOnly": false,
          "required": false,
          "displayName": "MyBusiness Layout",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "Posten",
          "type": "boolean",
          "display": true,
          "removed": false,
          "readOnly": false,
          "required": false,
          "displayName": "Posten",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "created_at",
          "type": "string",
          "display": true,
          "removed": true,
          "readOnly": true,
          "required": false,
          "displayName": "created_at",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "SoMe_Text_KI",
          "type": "string",
          "display": true,
          "removed": false,
          "readOnly": false,
          "required": false,
          "displayName": "SoMe_Text_KI",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "Werbeanzeige",
          "type": "boolean",
          "display": true,
          "removed": false,
          "readOnly": false,
          "required": false,
          "displayName": "Werbeanzeige",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        }
      ],
      "mappingMode": "defineBelow",
      "matchingColumns": [
        "id",
        "SoMe_Text_KI"
      ],
      "attemptToConvertTypes": false,
      "convertFieldsToString": false
    },
    "options": {},
    "operation": "update"
  },
  "credentials": {
    "airtableTokenApi": {
      "id": "pMphGrxsDsELetHZ",
      "name": "Airtable account"
    }
  },
  "typeVersion": 2.1
}

================ Node #1115 ================
{
  "id": "ddc9159e-0da7-4844-84c5-eca981b9d52f",
  "name": "Airtable Trigger: New Record",
  "type": "n8n-nodes-base.airtableTrigger",
  "position": [
    -360,
    -120
  ],
  "parameters": {
    "baseId": {
      "__rl": true,
      "mode": "id",
      "value": "appXvZviYORVbPEaS"
    },
    "tableId": {
      "__rl": true,
      "mode": "id",
      "value": "tblxsKj5PtumCR9um"
    },
    "pollTimes": {
      "item": [
        {
          "mode": "everyMinute"
        }
      ]
    },
    "triggerField": "created_at",
    "authentication": "airtableTokenApi",
    "additionalFields": {}
  },
  "credentials": {
    "airtableTokenApi": {
      "id": "pMphGrxsDsELetHZ",
      "name": "Airtable account"
    }
  },
  "typeVersion": 1
}

================ Node #1116 ================
{
  "id": "a71626b0-43ba-430b-bd2f-8cc121676e46",
  "name": "Background Info",
  "type": "n8n-nodes-base.airtableTool",
  "position": [
    360,
    100
  ],
  "parameters": {
    "id": "reckd97lgylz93Ht5",
    "base": {
      "__rl": true,
      "mode": "list",
      "value": "appXvZviYORVbPEaS",
      "cachedResultUrl": "https://airtable.com/appXvZviYORVbPEaS",
      "cachedResultName": "Redaktionsplan 2025 - E&P Reisen"
    },
    "table": {
      "__rl": true,
      "mode": "list",
      "value": "tblMmE9cjgNZCoIO1",
      "cachedResultUrl": "https://airtable.com/appLe3fQHeaRN7kWG/tblMmE9cjgNZCoIO1",
      "cachedResultName": "Good to know"
    },
    "options": {},
    "descriptionType": "manual",
    "toolDescription": "Read data from Airtable"
  },
  "credentials": {
    "airtableTokenApi": {
      "id": "pMphGrxsDsELetHZ",
      "name": "Airtable account"
    }
  },
  "typeVersion": 2.1
}

================ Node #1117 ================
{
  "id": "9c422e74-155c-4714-87aa-16b31bd73e5b",
  "name": "Sticky Note1",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    -680,
    80
  ],
  "parameters": {
    "width": 660,
    "height": 680,
    "content": "# Welcome to my AI Social Media Caption Creator Workflow!\n\nThis workflow automatically creates a social media post caption in an editorial plan in Airtable. It also uses background information on the target group, tonality, etc. stored in Airtable.\n\n## This workflow has the following sequence:\n\n1. Airtable trigger (scan for new records every minute)\n2. Wait 1 Minute so the Airtable record creator has time to write the Briefing field\n3. retrieval of Airtable record data\n4. AI Agent to write a caption for a social media post. The agent is instructed to use background information stored in Airtable (such as target group, tonality, etc.) to create the post.\n5. Format the output and assign it to the correct field in Airtable.\n6. Post the caption into Airtable record.\n\n## The following accesses are required for the workflow:\n- Airtable Database: [Documentation](https://docs.n8n.io/integrations/builtin/credentials/airtable)\n- AI API access (e.g. via OpenAI, Anthropic, Google or Ollama)\n\n### Example of an editorial plan in Airtable: https://airtable.com/appIXeIkDPjQefHXN/shrwcY45g48RpcvvC\nFor this workflow you need the Airtable fields \"created_at\", \"Briefing\" and \"SoMe_Text_AI\"\n\nYou can contact me via LinkedIn, if you have any questions: https://www.linkedin.com/in/friedemann-schuetz"
  },
  "typeVersion": 1
}

================ Node #1118 ================
{
  "id": "9f051c89-0243-48fb-baa4-666af3fe54b3",
  "name": "Merge",
  "type": "n8n-nodes-base.merge",
  "position": [
    940,
    120
  ],
  "parameters": {
    "mode": "combine",
    "options": {},
    "combineBy": "combineByPosition"
  },
  "typeVersion": 3
}

================ Node #1119 ================
{
  "id": "5da963f7-4320-4359-aefa-bf8f6d6ef815",
  "name": "Respond to Webhook",
  "type": "n8n-nodes-base.respondToWebhook",
  "position": [
    1520,
    120
  ],
  "parameters": {
    "options": {},
    "respondWith": "text",
    "responseBody": "={{ $json.html }}"
  },
  "typeVersion": 1.1
}

================ Node #1120 ================
{
  "id": "05d877bc-b591-478c-b112-32b7efe1ca3f",
  "name": "Wait 3 sec",
  "type": "n8n-nodes-base.wait",
  "position": [
    920,
    680
  ],
  "webhookId": "90f31c1f-6707-4f2f-b525-d3961432cd81",
  "parameters": {
    "amount": 3
  },
  "typeVersion": 1.1
}

================ Node #1121 ================
{
  "id": "a3cc4a50-4218-4a01-ab20-151fd707dd66",
  "name": "Is Ready?",
  "type": "n8n-nodes-base.if",
  "position": [
    1340,
    680
  ],
  "parameters": {
    "options": {},
    "conditions": {
      "options": {
        "version": 2,
        "leftValue": "",
        "caseSensitive": true,
        "typeValidation": "strict"
      },
      "combinator": "and",
      "conditions": [
        {
          "id": "3cf5b451-9ff5-4c2a-864f-9aa7d286871a",
          "operator": {
            "name": "filter.operator.equals",
            "type": "string",
            "operation": "equals"
          },
          "leftValue": "={{ $json.status }}",
          "rightValue": "Ready"
        }
      ]
    }
  },
  "typeVersion": 2.2
}

================ Node #1122 ================
{
  "id": "76a2dcd4-0e57-461d-a8b9-8f52baa3f86a",
  "name": "Sticky Note",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    520,
    -100
  ],
  "parameters": {
    "width": 1193,
    "height": 479,
    "content": "# Deliver the editor with links to the images"
  },
  "typeVersion": 1
}

================ Node #1123 ================
{
  "id": "b32e8e0b-a449-47d9-8de4-c0062235ff99",
  "name": "FLUX Fill",
  "type": "n8n-nodes-base.httpRequest",
  "position": [
    660,
    680
  ],
  "parameters": {
    "url": "https://api.bfl.ml/v1/flux-pro-1.0-fill",
    "method": "POST",
    "options": {},
    "sendBody": true,
    "authentication": "genericCredentialType",
    "bodyParameters": {
      "parameters": [
        {
          "name": "prompt",
          "value": "={{ $json.body.prompt }}"
        },
        {
          "name": "steps",
          "value": "={{ $json.body.steps }}"
        },
        {
          "name": "prompt_upsampling",
          "value": "={{ $json.body.prompt_upsampling }}"
        },
        {
          "name": "guidance",
          "value": "={{ $json.body.guidance }}"
        },
        {
          "name": "output_format",
          "value": "png"
        },
        {
          "name": "safety_tolerance",
          "value": "6"
        },
        {
          "name": "image",
          "value": "={{ $json.body.image.split(',')[1] }}"
        },
        {
          "name": "mask",
          "value": "={{ $json.body.mask.split(',')[1] }}"
        }
      ]
    },
    "genericAuthType": "httpHeaderAuth"
  },
  "credentials": {
    "httpHeaderAuth": {
      "id": "4eQN9wBw8SniKcPw",
      "name": "bfl-FLUX"
    }
  },
  "typeVersion": 4.2
}

================ Node #1124 ================
{
  "id": "d7d70191-5316-4f20-b570-b8f138b77762",
  "name": "Check FLUX status",
  "type": "n8n-nodes-base.httpRequest",
  "position": [
    1120,
    680
  ],
  "parameters": {
    "url": "https://api.bfl.ml/v1/get_result",
    "options": {},
    "sendQuery": true,
    "authentication": "genericCredentialType",
    "genericAuthType": "httpHeaderAuth",
    "queryParameters": {
      "parameters": [
        {
          "name": "id",
          "value": "={{ $json.id }}"
        }
      ]
    }
  },
  "credentials": {
    "httpHeaderAuth": {
      "id": "4eQN9wBw8SniKcPw",
      "name": "bfl-FLUX"
    }
  },
  "typeVersion": 4.2
}

================ Node #1125 ================
{
  "id": "dafc2712-114f-4723-b587-08ff853513f5",
  "name": "Get Fill Image",
  "type": "n8n-nodes-base.httpRequest",
  "position": [
    1560,
    780
  ],
  "parameters": {
    "url": "={{ $json.result.sample }}",
    "options": {}
  },
  "typeVersion": 4.2
}

================ Node #1126 ================
{
  "id": "68672890-62c3-4020-a09c-9ea691cba361",
  "name": "Show the image to user",
  "type": "n8n-nodes-base.respondToWebhook",
  "position": [
    1900,
    780
  ],
  "parameters": {
    "options": {
      "responseHeaders": {
        "entries": [
          {
            "name": "Content-Type",
            "value": "={{ $binary.data.mimeType }}"
          }
        ]
      }
    },
    "respondWith": "binary",
    "responseDataSource": "set"
  },
  "typeVersion": 1.1
}

================ Node #1127 ================
{
  "id": "7546ce49-56e9-44fd-96fd-324831f38f32",
  "name": "Sticky Note1",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    560,
    420
  ],
  "parameters": {
    "color": 4,
    "width": 1142,
    "height": 502,
    "content": "# Image processing part"
  },
  "typeVersion": 1
}

================ Node #1128 ================
{
  "id": "cee89c8c-7b88-4cc5-84e4-eb7b404e5042",
  "name": "Sticky Note2",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    1720,
    660
  ],
  "parameters": {
    "width": 506,
    "height": 272,
    "content": "# Send back edited image\n## Add extra steps to save an edited image"
  },
  "typeVersion": 1
}

================ Node #1129 ================
{
  "id": "a340cd78-56dd-4ac8-a1c1-f3fc03771ae6",
  "name": "Mockups",
  "type": "n8n-nodes-base.set",
  "position": [
    660,
    220
  ],
  "parameters": {
    "options": {},
    "assignments": {
      "assignments": [
        {
          "id": "20c39c67-3cf8-4e29-b871-3202f2e20a3c",
          "name": "Images",
          "type": "array",
          "value": "={{\n[\n{\"url\":\"https://byuroscope.fra1.digitaloceanspaces.com/nc/uploads/noco/fluxtest/creative-arrangement-minimalist-podium_23-2148959328.jpg\",\n \"title\":\"Stage\" },\n{\"url\":\"https://byuroscope.fra1.digitaloceanspaces.com/nc/uploads/noco/fluxtest/Standing-Big-Paper-Bag-Mockup.jpg\",\n \"title\":\"Paper Bag\" },\n{\"url\":\"https://byuroscope.fra1.digitaloceanspaces.com/nc/uploads/noco/fluxtest/Ceramic-Mug-on-Table-Mockup.jpg\",\n \"title\":\"Big Mug\" },\n{\"url\":\"https://byuroscope.fra1.digitaloceanspaces.com/nc/uploads/noco/fluxtest/Transparent-Bottle-on-Sunny-Beach-Mockup-D.jpg\",\n \"title\":\"Transparent-Bottle\" },\n{\"url\":\"https://byuroscope.fra1.digitaloceanspaces.com/nc/uploads/noco/fluxtest/skin-products-arrangement-wooden-blocks_23-2148761445.jpg\",\n \"title\":\"Cosmetics\" }\n]\n}}"
        }
      ]
    }
  },
  "typeVersion": 3.4
}

================ Node #1130 ================
{
  "id": "da82cb73-af4a-4042-bf4e-17894155fb87",
  "name": "Webhook",
  "type": "n8n-nodes-base.webhook",
  "position": [
    260,
    120
  ],
  "webhookId": "9c864ee6-e4d3-46e7-98d4-bea43739963e",
  "parameters": {
    "path": "flux-fill",
    "options": {},
    "responseMode": "responseNode",
    "multipleMethods": true
  },
  "typeVersion": 2
}

================ Node #1131 ================
{
  "id": "0f35da2f-112c-45f9-9cbe-d64eb8bdc6d8",
  "name": "Editor page",
  "type": "n8n-nodes-base.html",
  "position": [
    1240,
    120
  ],
  "parameters": {
    "html": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n <meta charset=\"UTF-8\">\n <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n <title>Konva Image Editor</title>\n <script src=\"https://unpkg.com/konva@9/konva.min.js\"></script>\n <script defer src=\"https://unpkg.com/img-comparison-slider@8/dist/index.js\"></script>\n <link rel=\"stylesheet\" href=\"https://unpkg.com/img-comparison-slider@8/dist/styles.css\" />\n <link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/gh/ed-parsadanyan/n8n-flux-fill-demo/flux-fill-style.css\" />\n <script src=\"https://cdn.jsdelivr.net/gh/ed-parsadanyan/n8n-flux-fill-demo/flux-fill-canvas.js\"></script>\n</head>\n<body>\n <div class=\"controls-wrapper\">\n <div class=\"left-panel\">\n <div class=\"image-controls\">\n <select id=\"imageSelector\">\n <option value=\"\">Select an image...</option>\n <option value=\"local\">Load from PC...</option>\n </select>\n <input type=\"file\" id=\"fileInput\" style=\"display: none\" accept=\"image/*\">\n <button id=\"clearButton\">Clear All</button>\n </div>\n \n <div class=\"brush-controls\">\n <label for=\"brushSize\" title=\"Use mouse wheel to adjust brush size\">Brush Size:</label>\n <div class=\"slider-container\">\n <input type=\"range\" id=\"brushSize\" min=\"5\" max=\"40\" value=\"20\">\n <span class=\"slider-value\" id=\"brushSizeValue\">20px</span>\n </div>\n </div>\n </div>\n\n <div class=\"right-panel\">\n <div class=\"prompt-row\">\n <input type=\"text\" id=\"promptInput\" placeholder=\"Enter your prompt (optional)\">\n </div>\n \n <div class=\"main-controls\">\n <label class=\"checkbox-container\">\n <input type=\"checkbox\" id=\"improvePrompt\" checked>\n <span>Improve prompt</span>\n </label>\n \n <div>\n <button id=\"sendButton\">Generate</button>\n <span class=\"loading\" id=\"loadingIndicator\">Processing...</span>\n </div>\n </div>\n \n <div class=\"parameters\">\n <div class=\"slider-container\">\n <label for=\"stepsSlider\">Steps:</label>\n <input type=\"range\" id=\"stepsSlider\" min=\"15\" max=\"50\" value=\"40\">\n <span class=\"slider-value\" id=\"stepsValue\">40</span>\n </div>\n \n <div class=\"slider-container\">\n <label for=\"guidanceSlider\">Guidance:</label>\n <input type=\"range\" id=\"guidanceSlider\" min=\"1.5\" max=\"100\" value=\"60\" step=\"0.1\">\n <span class=\"slider-value\" id=\"guidanceValue\">60.0</span>\n </div>\n </div>\n </div>\n </div>\n\n <div class=\"info\" id=\"imageInfo\"></div>\n <div id=\"container\"></div>\n <div id=\"cursor\"></div>\n\n <div id=\"resultModal\" class=\"modal\">\n <div class=\"modal-content\">\n <div class=\"modal-image-container\">\n <div class=\"comparison-container\">\n <div class=\"image-container\">\n <img class=\"image-before\" id=\"originalImage\" src=\"\" alt=\"Original\">\n <img class=\"image-after\" id=\"resultImage\" src=\"\" alt=\"Generated\">\n </div>\n <input type=\"range\" min=\"0\" max=\"100\" value=\"10\" class=\"slider\">\n <div class=\"slider-line\"></div>\n <div class=\"slider-button\" aria-hidden=\"true\">\n &lt; &gt;\n </div>\n <div class=\"labels\">\n <div class=\"label-before\">Original</div>\n <div class=\"label-after\">Generated</div>\n </div>\n </div>\n </div>\n <div class=\"modal-buttons\">\n <button id=\"reuseButton\">Use Generated</button>\n <button id=\"saveButton\">Save Image</button>\n <button id=\"closeButton\">Close</button>\n </div>\n </div>\n </div>\n\n<script>\n const urlParams = new URLSearchParams(window.location.search);\n const pageId = urlParams.get('id');\n\n // Image data will be populated by n8n\n const imageData = {{ JSON.stringify($json.Images,'',2) }};\n const webhookUrl = '{{ $json.webhookUrl }}';\n\n // Initialize the editor when the page loads\n document.addEventListener('DOMContentLoaded', function() {\n initializeEditor({\n images: imageData,\n webhookUrl: webhookUrl,\n pageId: pageId\n });\n });\n</script>\n</body>\n</html>\n"
  },
  "typeVersion": 1.2
}

================ Node #1132 ================
{
  "id": "2ff87261-8a7f-451e-b8ae-b4274776ce28",
  "name": "Sticky Note3",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    540,
    20
  ],
  "parameters": {
    "color": 5,
    "width": 360,
    "height": 340,
    "content": "## Image array\n* Load from PC\n* Select one of the default images\n\n### Change this node to\n### get image URLs from your data source"
  },
  "typeVersion": 1
}

================ Node #1133 ================
{
  "id": "08bb17fd-1440-4194-8c4f-e18222a68bf2",
  "name": "Sticky Note4",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    1080,
    -20
  ],
  "parameters": {
    "color": 5,
    "width": 400,
    "height": 300,
    "content": "## HTML code of the editor\n* Konva.js\n* img-comparison-slider to compare edits vs original file\n* Additional css + js files for the editor logic"
  },
  "typeVersion": 1
}

================ Node #1134 ================
{
  "id": "13a820d0-e83b-4d1e-81d1-738ef8ca4d47",
  "name": "Sticky Note5",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    580,
    500
  ],
  "parameters": {
    "color": 5,
    "width": 280,
    "height": 340,
    "content": "## Call FLUX-Fill Tool\nPass the following data:\n* original image\n* alpha mask from the editor\n* text prompt\n* additional settings"
  },
  "typeVersion": 1
}

================ Node #1135 ================
{
  "id": "f4ab042c-d4da-4f1e-aa05-fdd2cca62d66",
  "name": "NO OP",
  "type": "n8n-nodes-base.noOp",
  "position": [
    420,
    680
  ],
  "parameters": {},
  "typeVersion": 1
}

================ Node #1136 ================
{
  "id": "36816ae7-414a-482e-8a50-021885237273",
  "name": "Event Type",
  "type": "n8n-nodes-base.switch",
  "position": [
    -220,
    -140
  ],
  "parameters": {
    "rules": {
      "values": [
        {
          "outputKey": "row.updated",
          "conditions": {
            "options": {
              "version": 2,
              "leftValue": "",
              "caseSensitive": true,
              "typeValidation": "strict"
            },
            "combinator": "and",
            "conditions": [
              {
                "id": "2162daf8-d23d-4b8f-8257-bdfc5400a3a8",
                "operator": {
                  "name": "filter.operator.equals",
                  "type": "string",
                  "operation": "equals"
                },
                "leftValue": "={{ $json.event_type }}",
                "rightValue": "row.updated"
              }
            ]
          },
          "renameOutput": true
        },
        {
          "outputKey": "field.created",
          "conditions": {
            "options": {
              "version": 2,
              "leftValue": "",
              "caseSensitive": true,
              "typeValidation": "strict"
            },
            "combinator": "and",
            "conditions": [
              {
                "id": "48e112f6-afe8-40bf-b673-b37446934a62",
                "operator": {
                  "name": "filter.operator.equals",
                  "type": "string",
                  "operation": "equals"
                },
                "leftValue": "={{ $json.event_type }}",
                "rightValue": "field.created"
              }
            ]
          },
          "renameOutput": true
        },
        {
          "outputKey": "field.updated",
          "conditions": {
            "options": {
              "version": 2,
              "leftValue": "",
              "caseSensitive": true,
              "typeValidation": "strict"
            },
            "combinator": "and",
            "conditions": [
              {
                "id": "5aa258cd-15c2-4156-a32d-afeed662a38e",
                "operator": {
                  "name": "filter.operator.equals",
                  "type": "string",
                  "operation": "equals"
                },
                "leftValue": "={{ $json.event_type }}",
                "rightValue": "field.updated"
              }
            ]
          },
          "renameOutput": true
        }
      ]
    },
    "options": {}
  },
  "typeVersion": 3.2
}

================ Node #1137 ================
{
  "id": "920ca6d8-7a6e-4482-b003-fa643f550a85",
  "name": "Get Prompt Fields",
  "type": "n8n-nodes-base.code",
  "position": [
    -900,
    -140
  ],
  "parameters": {
    "jsCode": "const fields = $input.first().json.fields\n .filter(item => item.description)\n .map((item, idx) => ({\n id: item.id,\n order: idx,\n name: item.name,\n type: item.type,\n description: item.description,\n }));\n\nreturn { json: { fields } };"
  },
  "typeVersion": 2
}

================ Node #1138 ================
{
  "id": "3b73b2f5-9081-4633-911f-ef3041600a00",
  "name": "Get File Data",
  "type": "n8n-nodes-base.httpRequest",
  "position": [
    1220,
    320
  ],
  "parameters": {
    "url": "={{ $json.File[0].url }}",
    "options": {}
  },
  "typeVersion": 4.2
}

================ Node #1139 ================
{
  "id": "e96edca8-9e8b-4ca4-bef9-dae673d3aba4",
  "name": "Extract from File",
  "type": "n8n-nodes-base.extractFromFile",
  "position": [
    1380,
    320
  ],
  "parameters": {
    "options": {},
    "operation": "pdf"
  },
  "typeVersion": 1
}

================ Node #1140 ================
{
  "id": "b5c2b87b-5756-4810-84c9-34ea420bdcef",
  "name": "Get Result",
  "type": "n8n-nodes-base.set",
  "position": [
    2000,
    380
  ],
  "parameters": {
    "options": {},
    "assignments": {
      "assignments": [
        {
          "id": "63d7c52e-d5bf-4f4c-9e37-1d5feaea20f4",
          "name": "id",
          "type": "string",
          "value": "={{ $('Row Reference').item.json.id }}"
        },
        {
          "id": "3ad72567-1d17-4910-b916-4c34a43b1060",
          "name": "={{ $('Event Ref').first().json.field.name }}",
          "type": "string",
          "value": "={{ $json.text.trim() }}"
        }
      ]
    }
  },
  "typeVersion": 3.4
}

================ Node #1141 ================
{
  "id": "a5cb0510-620b-469d-bf66-26ab64d6f88f",
  "name": "Loop Over Items",
  "type": "n8n-nodes-base.splitInBatches",
  "position": [
    800,
    220
  ],
  "parameters": {
    "options": {}
  },
  "typeVersion": 3
}

================ Node #1142 ================
{
  "id": "20e24946-59d8-4b19-bfab-eebb02f7e46d",
  "name": "Row Reference",
  "type": "n8n-nodes-base.noOp",
  "position": [
    980,
    320
  ],
  "parameters": {},
  "typeVersion": 1
}

================ Node #1143 ================
{
  "id": "4090c53e-e635-4421-ab2b-475bfc62cea4",
  "name": "Generate Field Value",
  "type": "@n8n/n8n-nodes-langchain.chainLlm",
  "position": [
    1540,
    320
  ],
  "parameters": {
    "text": "=<file>\n{{ $json.text }}\n</file>\n\nData to extract: {{ $('Event Ref').first().json.field.description }}\noutput format is: {{ $('Event Ref').first().json.field.type }}",
    "messages": {
      "messageValues": [
        {
          "message": "=You assist the user in extracting the required data from the given file.\n* Keep you answer short.\n* If you cannot extract the requested data, give you response as \"n/a\"."
        }
      ]
    },
    "promptType": "define"
  },
  "typeVersion": 1.5
}

================ Node #1144 ================
{
  "id": "582d4008-4871-4798-bc24-abf774ad29b5",
  "name": "Fields to Update",
  "type": "n8n-nodes-base.code",
  "position": [
    1560,
    -300
  ],
  "parameters": {
    "jsCode": "const row = $('Row Ref').first().json;\nconst fields = $('Get Prompt Fields').first().json.fields;\nconst missingFields = fields\n .filter(field => field.description && !row[field.name]);\n\nreturn missingFields;"
  },
  "typeVersion": 2
}

================ Node #1145 ================
{
  "id": "051c6a99-cec3-42df-9de7-47cb69b51682",
  "name": "Loop Over Items1",
  "type": "n8n-nodes-base.splitInBatches",
  "position": [
    820,
    -420
  ],
  "parameters": {
    "options": {}
  },
  "typeVersion": 3
}

================ Node #1146 ================
{
  "id": "f559c8ff-2ee5-478d-84ee-6b0ca2fe2050",
  "name": "Row Ref",
  "type": "n8n-nodes-base.noOp",
  "position": [
    1000,
    -300
  ],
  "parameters": {},
  "typeVersion": 1
}

================ Node #1147 ================
{
  "id": "7b82cc73-67cb-46d7-a1d4-19712c86890a",
  "name": "Get File Data1",
  "type": "n8n-nodes-base.httpRequest",
  "position": [
    1240,
    -300
  ],
  "parameters": {
    "url": "={{ $('Row Ref').item.json.File[0].url }}",
    "options": {}
  },
  "typeVersion": 4.2
}

================ Node #1148 ================
{
  "id": "7ef1556c-96a3-4988-982d-ec8c5fba4601",
  "name": "Extract from File1",
  "type": "n8n-nodes-base.extractFromFile",
  "position": [
    1400,
    -300
  ],
  "parameters": {
    "options": {},
    "operation": "pdf"
  },
  "typeVersion": 1
}

================ Node #1149 ================
{
  "id": "9916f1c1-f413-4996-ad45-380a899b4a88",
  "name": "Get Result1",
  "type": "n8n-nodes-base.set",
  "position": [
    2120,
    -260
  ],
  "parameters": {
    "options": {},
    "assignments": {
      "assignments": [
        {
          "id": "e376ba60-8692-4962-9af7-466b6a3f44a2",
          "name": "={{ $('Fields to Update').item.json.name }}",
          "type": "string",
          "value": "={{ $json.text.trim() }}"
        }
      ]
    }
  },
  "typeVersion": 3.4
}

================ Node #1150 ================
{
  "id": "f62f612d-c288-4062-ab3c-dbc24c9b4b38",
  "name": "Generate Field Value1",
  "type": "@n8n/n8n-nodes-langchain.chainLlm",
  "position": [
    1720,
    -300
  ],
  "parameters": {
    "text": "=<file>\n{{ $('Extract from File1').first().json.text }}\n</file>\n\nData to extract: {{ $json.description }}\noutput format is: {{ $json.type }}",
    "messages": {
      "messageValues": [
        {
          "message": "=You assist the user in extracting the required data from the given file.\n* Keep you answer short.\n* If you cannot extract the requested data, give you response as \"n/a\" followed by \"(reason)\" where reason is replaced with reason why data could not be extracted."
        }
      ]
    },
    "promptType": "define"
  },
  "typeVersion": 1.5
}

================ Node #1151 ================
{
  "id": "615f7436-f280-4033-8ec8-a34f1bd78075",
  "name": "Filter Valid Rows",
  "type": "n8n-nodes-base.filter",
  "position": [
    520,
    -420
  ],
  "parameters": {
    "options": {},
    "conditions": {
      "options": {
        "version": 2,
        "leftValue": "",
        "caseSensitive": true,
        "typeValidation": "strict"
      },
      "combinator": "and",
      "conditions": [
        {
          "id": "7ad58f0b-0354-49a9-ab2f-557652d7b416",
          "operator": {
            "type": "string",
            "operation": "notEmpty",
            "singleValue": true
          },
          "leftValue": "={{ $json.File[0].url }}",
          "rightValue": ""
        }
      ]
    }
  },
  "typeVersion": 2.2
}

================ Node #1152 ================
{
  "id": "281b9fb0-305c-4a0c-b73b-82b6ba876d12",
  "name": "Filter Valid Fields",
  "type": "n8n-nodes-base.filter",
  "position": [
    340,
    220
  ],
  "parameters": {
    "options": {},
    "conditions": {
      "options": {
        "version": 2,
        "leftValue": "",
        "caseSensitive": true,
        "typeValidation": "strict"
      },
      "combinator": "and",
      "conditions": [
        {
          "id": "5b4a7393-788c-42dc-ac1f-e76f833f8534",
          "operator": {
            "type": "string",
            "operation": "notEmpty",
            "singleValue": true
          },
          "leftValue": "={{ $json.field.description }}",
          "rightValue": ""
        }
      ]
    }
  },
  "typeVersion": 2.2
}

================ Node #1153 ================
{
  "id": "dd0fa792-791f-4d31-a7e8-9b72a25b6a07",
  "name": "Event Ref",
  "type": "n8n-nodes-base.noOp",
  "position": [
    160,
    220
  ],
  "parameters": {},
  "typeVersion": 1
}

================ Node #1154 ================
{
  "id": "ca1174b3-da18-4d3c-86ef-3028cd5b12a7",
  "name": "Event Ref1",
  "type": "n8n-nodes-base.noOp",
  "position": [
    160,
    -420
  ],
  "parameters": {},
  "typeVersion": 1
}

================ Node #1155 ================
{
  "id": "8800b355-0fa8-4297-b13b-d3da8a01c3b7",
  "name": "Sticky Note",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    -1180,
    -340
  ],
  "parameters": {
    "color": 7,
    "width": 480,
    "height": 440,
    "content": "### 1. Get Table Schema\n[Learn more about the Airtable node](https://docs.n8n.io/integrations/builtin/app-nodes/n8n-nodes-base.airtable/)\n\nFor this operation, we'll use the handy Airtable node. I recommend getting familiar with this node for all your Airtable needs!\n"
  },
  "typeVersion": 1
}

================ Node #1156 ================
{
  "id": "a90876d3-8a93-4d90-9e2a-f23de452259d",
  "name": "Sticky Note1",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    -260,
    -440
  ],
  "parameters": {
    "color": 5,
    "width": 330,
    "height": 80,
    "content": "### 2a. Updates Minimal Number of Rows\nThis branch updates only the rows impacted."
  },
  "typeVersion": 1
}

================ Node #1157 ================
{
  "id": "319adf97-8b14-4069-b4cc-594a6ea479c1",
  "name": "Sticky Note2",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    -320,
    140
  ],
  "parameters": {
    "color": 5,
    "width": 390,
    "height": 120,
    "content": "### 2b. Update Every Row under the Field\nThis branch updates all applicable rows under field when the field/column is created or changed. Watch out - if you have 1000s of rows, this could take a while!"
  },
  "typeVersion": 1
}

================ Node #1158 ================
{
  "id": "42a60c8c-476f-4930-bac5-4d36a7185f4f",
  "name": "Sticky Note3",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    -2240,
    -1000
  ],
  "parameters": {
    "width": 520,
    "height": 1120,
    "content": "## Try It Out!\n### This n8n template powers a \"dynamic\" or \"user-defined\" prompts with PDF workflow pattern for a [Airtable](https://airtable.com/invite/r/cKzxFYVc) table. Simply put, it allows users to populate a spreadsheet using prompts without touching the underlying template.\n\n**Check out the video demo I did for n8n Studio**: https://www.youtube.com/watch?v=_fNAD1u8BZw\n\n**Check out the example Airtable here:** https://airtable.com/appAyH3GCBJ56cfXl/shrXzR1Tj99kuQbyL\n\nThis template is intended to be used as a webhook source for Airtable. **Looking for a Baserow version? [Click here](https://n8n.io/workflows/2780-ai-data-extraction-with-dynamic-prompts-and-baserow)**\n\n## How it works\n* Each Airtable.io tables offers integration feature whereby changes to the table can be sent as events to any accessible webhook. This allows for a reactive trigger pattern which makes this type of workflow possible. For our usecase, we capture the vents of `row_updated`, `field_created` and `field_updated`.\n* Next, we'll need an \"input\" column in our Airtable.io table. This column will be where our context lives for evaluating the prompts against. In this example, our \"input\" column name is \"file\" and it's where we'll upload our PDFs. Note, this \"input\" field is human-controlled and never updated from this template.\n* Now for the columns (aka \"fields\" in Airtable). Each field allows us to define a name, type and description and together form the schema. The first 2 are self-explaintory but the \"description\" will be for users to provide their prompts ie. what data should the field to contain.\n* In this template, a webhook trigger waits for when a row or column is updated. The incoming event comes with lots of details such as the table, row and/or column Ids that were impacted.\n* We use this information to fetch the table's schema in order to get the column's descriptions (aka dynamic prompts).\n* For each triggered event, we download our input ie. the PDF and ready it for our AI/LLM. By iterating through the available columns and feeding the dynamic prompts, our LLM can run those prompts against the PDF and thus generating a value response for each cell.\n* These values are then collected and used to update the Airtable Record.\n\n## How to use\n* You'll need to publish this workflow and make it accessible to our Airtable instance.\n* you must run the \"Create Airtable Webhooks\" mini-flow to link it to your Airtable.\n* This template is reusable for other Airtables but the webhooks need to be created each time for each table.\n\n### Need Help?\nJoin the [Discord](https://discord.com/invite/XPKeKXeB7d) or ask in the [Forum](https://community.n8n.io/)!\n\nHappy Flowgramming!"
  },
  "typeVersion": 1
}

================ Node #1159 ================
{
  "id": "c6d037e9-1bf7-47a7-9c46-940220e0786b",
  "name": "Sticky Note4",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    -680,
    -340
  ],
  "parameters": {
    "color": 7,
    "width": 760,
    "height": 440,
    "content": "### 2. Event Router Pattern\n[Learn more about the Switch node](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.switch/)\n\nA simple switch node can be used to determine which event to handle. The difference between our row and field events is that row event affect a single row whereas field events affect all rows. \n"
  },
  "typeVersion": 1
}

================ Node #1160 ================
{
  "id": "897cec32-3a4c-4a76-bffe-b1456c287b44",
  "name": "Sticky Note5",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    100,
    -620
  ],
  "parameters": {
    "color": 7,
    "width": 620,
    "height": 400,
    "content": "### 3. Filter Only Rows with Valid Input\n[Learn more about the Split Out node](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.splitout/)\n\nThis step handles one or more updated rows where \"updated\" means the \"input\" column (ie. \"file\" in our example) for these rows were changed. For each affected row, we'll get the full row to figure out only the columns we need to update - this is an optimisation to avoid redundant work ie. generating values for columns which already have a value."
  },
  "typeVersion": 1
}

================ Node #1161 ================
{
  "id": "a5999ca3-4418-42c5-aa1c-fbdfb1c04fef",
  "name": "Sticky Note7",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    2060,
    -480
  ],
  "parameters": {
    "color": 7,
    "width": 600,
    "height": 440,
    "content": "### 6. Update the Airtable Record\n[Learn more about the Edit Fields node](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.set/)\n\nFinally, we can collect the LLM responses and combine them to build an API request to update our Airtable record - the Id of which we got from initial webhook. After this is done, we can move onto the next row and repeat the process.\n"
  },
  "typeVersion": 1
}

================ Node #1162 ================
{
  "id": "38192929-a387-4240-8373-290499b40e5a",
  "name": "Sticky Note8",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    1180,
    -580
  ],
  "parameters": {
    "color": 7,
    "width": 860,
    "height": 580,
    "content": "### 5. PDFs, LLMs and Dynamic Prompts? Oh My!\n[Learn more about the Basic LLM node](https://docs.n8n.io/integrations/builtin/cluster-nodes/root-nodes/n8n-nodes-langchain.chainllm/)\n\nThis step is where it all comes together! In short, we give our LLM the PDF contents as the context and loop through our dynamic prompts (from the schema we pulled earlier) for our row. At the end, our LLM should have produced a value for each column requested.\n\n**Note**: There's definitely a optimisation which could be done for caching PDFs but it beyond the scope of this demonstration.\n"
  },
  "typeVersion": 1
}

================ Node #1163 ================
{
  "id": "19a9b93a-d18f-4ffd-ae93-ed41cf398e90",
  "name": "Sticky Note9",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    740,
    -580
  ],
  "parameters": {
    "color": 7,
    "width": 420,
    "height": 460,
    "content": "### 4. Using an Items Loop\n[Learn more about the Split in Batches node](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.splitinbatches/)\n\nA split in batches node is used here to update a row at a time however, this is a preference for user experience - changes are seen in the Airtable quicker.\n"
  },
  "typeVersion": 1
}

================ Node #1164 ================
{
  "id": "5407fead-ee7c-47c8-94ed-5b89e74e50e8",
  "name": "Sticky Note10",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    100,
    40
  ],
  "parameters": {
    "color": 7,
    "width": 600,
    "height": 360,
    "content": "### 7. Listing All Applicable Rows Under The Column\n[Learn more about the Filter node](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.filter)\n\nTo keep things performant, we can decide to get only rows with inputfield populated as this is required to perform the extraction. This can easily be achieved with Airtable filters."
  },
  "typeVersion": 1
}

================ Node #1165 ================
{
  "id": "43b0e330-b79a-4577-b4fc-314e8b790cf7",
  "name": "Sticky Note11",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    1160,
    140
  ],
  "parameters": {
    "color": 7,
    "width": 700,
    "height": 500,
    "content": "### 9. Generating Value using LLM\n[Learn more about the Extract From File node](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.extractfromfile/)\n\nPretty much identical to Step 5 but instead of updating every field/column, we only need to generate a value for one. \n"
  },
  "typeVersion": 1
}

================ Node #1166 ================
{
  "id": "0665fe56-48d2-4215-8d95-d4c01f9266ed",
  "name": "OpenAI Chat Model",
  "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
  "position": [
    1720,
    -140
  ],
  "parameters": {
    "options": {}
  },
  "credentials": {
    "openAiApi": {
      "id": "8gccIjcuf3gvaoEr",
      "name": "OpenAi account"
    }
  },
  "typeVersion": 1.1
}

================ Node #1167 ================
{
  "id": "1997fb8b-73eb-4016-bab6-eb8f02fee368",
  "name": "Sticky Note12",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    720,
    40
  ],
  "parameters": {
    "color": 7,
    "width": 420,
    "height": 460,
    "content": "### 8. Using an Items Loop\n[Learn more about the Split in Batches node](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.splitinbatches/)\n\nSimilar to Step 4, the Split in Batches node is a preference for user experience - changes are seen in the Airtable quicker.\n"
  },
  "typeVersion": 1
}

================ Node #1168 ================
{
  "id": "c2799ded-b742-43a2-80ce-7a0c8f1df96e",
  "name": "OpenAI Chat Model1",
  "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
  "position": [
    1540,
    500
  ],
  "parameters": {
    "options": {}
  },
  "credentials": {
    "openAiApi": {
      "id": "8gccIjcuf3gvaoEr",
      "name": "OpenAi account"
    }
  },
  "typeVersion": 1.1
}

================ Node #1169 ================
{
  "id": "e5b42790-fc86-4134-9d04-e6bcad4a5f20",
  "name": "Sticky Note13",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    1880,
    140
  ],
  "parameters": {
    "color": 7,
    "width": 500,
    "height": 440,
    "content": "### 10. Update the Airtable Record\n[Learn more about the Edit Fields node](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.set/)\n\nAs with Step 6, the LLM response is used to update the row however only under the field that was created/changed. Once complete, the loop continues and the next row is processed.\n"
  },
  "typeVersion": 1
}

================ Node #1170 ================
{
  "id": "b1e98631-a440-4c66-b2d2-8236f6889b65",
  "name": "Sticky Note6",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    -2240,
    -1140
  ],
  "parameters": {
    "color": 7,
    "width": 300,
    "height": 120,
    "content": "[![airtable.io](https://res.cloudinary.com/daglih2g8/image/upload/f_auto,q_auto/v1/n8n-workflows/airtable_logo)](https://airtable.com/invite/r/cKzxFYVc)"
  },
  "typeVersion": 1
}

================ Node #1171 ================
{
  "id": "9d293b3a-954d-4e3b-8773-b6c3dded9520",
  "name": "Get Webhook Payload",
  "type": "n8n-nodes-base.httpRequest",
  "position": [
    -580,
    -140
  ],
  "parameters": {
    "url": "=https://api.airtable.com/v0/bases/{{ $('Airtable Webhook').first().json.body.base.id }}/webhooks/{{ $('Airtable Webhook').first().json.body.webhook.id }}/payloads",
    "options": {},
    "authentication": "predefinedCredentialType",
    "nodeCredentialType": "airtableTokenApi"
  },
  "credentials": {
    "airtableTokenApi": {
      "id": "Und0frCQ6SNVX3VV",
      "name": "Airtable Personal Access Token account"
    }
  },
  "typeVersion": 4.2
}

================ Node #1172 ================
{
  "id": "5f8d919b-14cd-4cb4-8604-731e56cc9402",
  "name": "Parse Event",
  "type": "n8n-nodes-base.code",
  "position": [
    -400,
    -140
  ],
  "parameters": {
    "jsCode": "const webhook = $('Airtable Webhook').first().json;\nconst schema = $('Get Prompt Fields').first().json;\nconst { payloads } = $input.first().json;\nif (!payloads.length) return [];\n\nconst event = payloads[payloads.length - 1];\nconst baseId = webhook.body.base.id;\nconst tableId = Object.keys(event.changedTablesById)[0];\nconst table = event.changedTablesById[tableId];\n\nreturn {\n baseId,\n tableId,\n event_type: getEventType(table),\n fieldId: getFieldId(table),\n field: getField(getFieldId(table)),\n rowId: getRecordId(table),\n}\n\nfunction getEventType(changedTableByIdObject) {\n if (changedTableByIdObject['createdFieldsById']) return 'field.created';\n if (changedTableByIdObject['changedFieldsById']) return 'field.updated'\n if (changedTableByIdObject['changedRecordsById']) return 'row.updated';\n return 'unknown';\n}\n\nfunction getFieldId(changedTableByIdObject) {\n const field = changedTableByIdObject.createdFieldsById\n || changedTableByIdObject.changedFieldsById\n || null;\n\n return field ? Object.keys(field)[0] : null;\n}\n\nfunction getField(id) {\n return schema.fields.find(field => field.id === id);\n}\n\nfunction getRecordId(changedTableByIdObject) {\n const record = changedTableByIdObject.changedRecordsById\n || null;\n\n return record ? Object.keys(record)[0] : null;\n}"
  },
  "typeVersion": 2
}

================ Node #1173 ================
{
  "id": "9b99d939-94d6-4fef-8b73-58c702503221",
  "name": "Get Table Schema",
  "type": "n8n-nodes-base.airtable",
  "position": [
    -1080,
    -140
  ],
  "parameters": {
    "base": {
      "__rl": true,
      "mode": "id",
      "value": "={{ $('Airtable Webhook').item.json.body.base.id }}"
    },
    "resource": "base",
    "operation": "getSchema"
  },
  "credentials": {
    "airtableTokenApi": {
      "id": "Und0frCQ6SNVX3VV",
      "name": "Airtable Personal Access Token account"
    }
  },
  "typeVersion": 2.1
}

================ Node #1174 ================
{
  "id": "c29fc911-a852-46f2-bbb1-5092cc1aaa9d",
  "name": "Fetch Records",
  "type": "n8n-nodes-base.airtable",
  "position": [
    520,
    220
  ],
  "parameters": {
    "base": {
      "__rl": true,
      "mode": "id",
      "value": "={{ $json.baseId }}"
    },
    "table": {
      "__rl": true,
      "mode": "id",
      "value": "={{ $json.tableId }}"
    },
    "options": {},
    "operation": "search",
    "filterByFormula": "NOT({File} = \"\")"
  },
  "credentials": {
    "airtableTokenApi": {
      "id": "Und0frCQ6SNVX3VV",
      "name": "Airtable Personal Access Token account"
    }
  },
  "typeVersion": 2.1
}

================ Node #1175 ================
{
  "id": "86d3c8d8-709f-4d9d-99bc-5d1b4aeb8603",
  "name": "Update Row",
  "type": "n8n-nodes-base.airtable",
  "position": [
    2180,
    380
  ],
  "parameters": {
    "base": {
      "__rl": true,
      "mode": "id",
      "value": "={{ $('Event Ref').first().json.baseId }}"
    },
    "table": {
      "__rl": true,
      "mode": "id",
      "value": "={{ $('Event Ref').first().json.tableId }}"
    },
    "columns": {
      "value": {},
      "schema": [
        {
          "id": "id",
          "type": "string",
          "display": true,
          "removed": false,
          "readOnly": true,
          "required": false,
          "displayName": "id",
          "defaultMatch": true
        },
        {
          "id": "Name",
          "type": "string",
          "display": true,
          "removed": false,
          "readOnly": false,
          "required": false,
          "displayName": "Name",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "File",
          "type": "array",
          "display": true,
          "removed": false,
          "readOnly": false,
          "required": false,
          "displayName": "File",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "Full Name",
          "type": "string",
          "display": true,
          "removed": false,
          "readOnly": false,
          "required": false,
          "displayName": "Full Name",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "Created",
          "type": "string",
          "display": true,
          "removed": false,
          "readOnly": true,
          "required": false,
          "displayName": "Created",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "Last Modified",
          "type": "string",
          "display": true,
          "removed": false,
          "readOnly": true,
          "required": false,
          "displayName": "Last Modified",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "Address",
          "type": "string",
          "display": true,
          "removed": false,
          "readOnly": false,
          "required": false,
          "displayName": "Address",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        }
      ],
      "mappingMode": "autoMapInputData",
      "matchingColumns": [
        "id"
      ]
    },
    "options": {},
    "operation": "update"
  },
  "credentials": {
    "airtableTokenApi": {
      "id": "Und0frCQ6SNVX3VV",
      "name": "Airtable Personal Access Token account"
    }
  },
  "typeVersion": 2.1
}

================ Node #1176 ================
{
  "id": "95d08439-59a2-4e74-bd5a-b71cf079b621",
  "name": "Get Row",
  "type": "n8n-nodes-base.airtable",
  "position": [
    340,
    -420
  ],
  "parameters": {
    "id": "={{ $json.rowId }}",
    "base": {
      "__rl": true,
      "mode": "id",
      "value": "={{ $json.baseId }}"
    },
    "table": {
      "__rl": true,
      "mode": "id",
      "value": "={{ $json.tableId }}"
    },
    "options": {}
  },
  "credentials": {
    "airtableTokenApi": {
      "id": "Und0frCQ6SNVX3VV",
      "name": "Airtable Personal Access Token account"
    }
  },
  "typeVersion": 2.1
}

================ Node #1177 ================
{
  "id": "50888ac5-30c9-4036-aade-6ccfdf605c3b",
  "name": "Add Row ID to Payload",
  "type": "n8n-nodes-base.set",
  "position": [
    2300,
    -260
  ],
  "parameters": {
    "mode": "raw",
    "options": {},
    "jsonOutput": "={{\n{\n id: $('Row Ref').item.json.id,\n ...$input.all()\n .map(item => item.json)\n .reduce((acc, item) => ({\n ...acc,\n ...item,\n }), {})\n}\n}}"
  },
  "executeOnce": true,
  "typeVersion": 3.4
}

================ Node #1178 ================
{
  "id": "e3ebeb45-45d9-44a4-a2e6-bde89f5da125",
  "name": "Update Record",
  "type": "n8n-nodes-base.airtable",
  "position": [
    2480,
    -260
  ],
  "parameters": {
    "base": {
      "__rl": true,
      "mode": "id",
      "value": "={{ $('Event Ref1').first().json.baseId }}"
    },
    "table": {
      "__rl": true,
      "mode": "id",
      "value": "={{ $('Event Ref1').first().json.tableId }}"
    },
    "columns": {
      "value": {},
      "schema": [
        {
          "id": "id",
          "type": "string",
          "display": true,
          "removed": false,
          "readOnly": true,
          "required": false,
          "displayName": "id",
          "defaultMatch": true
        },
        {
          "id": "Name",
          "type": "string",
          "display": true,
          "removed": false,
          "readOnly": false,
          "required": false,
          "displayName": "Name",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "File",
          "type": "array",
          "display": true,
          "removed": false,
          "readOnly": false,
          "required": false,
          "displayName": "File",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "Full Name",
          "type": "string",
          "display": true,
          "removed": false,
          "readOnly": false,
          "required": false,
          "displayName": "Full Name",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "Address",
          "type": "string",
          "display": true,
          "removed": false,
          "readOnly": false,
          "required": false,
          "displayName": "Address",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "Created",
          "type": "string",
          "display": true,
          "removed": false,
          "readOnly": true,
          "required": false,
          "displayName": "Created",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "Last Modified",
          "type": "string",
          "display": true,
          "removed": false,
          "readOnly": true,
          "required": false,
          "displayName": "Last Modified",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        }
      ],
      "mappingMode": "autoMapInputData",
      "matchingColumns": [
        "id"
      ]
    },
    "options": {},
    "operation": "update"
  },
  "credentials": {
    "airtableTokenApi": {
      "id": "Und0frCQ6SNVX3VV",
      "name": "Airtable Personal Access Token account"
    }
  },
  "typeVersion": 2.1
}

================ Node #1179 ================
{
  "id": "ac01ec4b-e030-4608-af38-64558408832f",
  "name": "Airtable Webhook",
  "type": "n8n-nodes-base.webhook",
  "position": [
    -1400,
    -140
  ],
  "webhookId": "a82f0ae7-678e-49d9-8219-7281e8a2a1b2",
  "parameters": {
    "path": "a82f0ae7-678e-49d9-8219-7281e8a2a1b2",
    "options": {},
    "httpMethod": "POST"
  },
  "typeVersion": 2
}

================ Node #1180 ================
{
  "id": "90178da9-2000-474e-ba93-a02d03ec6a1d",
  "name": "When clicking \u2018Test workflow\u2019",
  "type": "n8n-nodes-base.manualTrigger",
  "position": [
    -1600,
    -640
  ],
  "parameters": {},
  "typeVersion": 1
}

================ Node #1181 ================
{
  "id": "b8b887ce-f891-4a3c-993b-0aaccadf1b52",
  "name": "Set Airtable Vars",
  "type": "n8n-nodes-base.set",
  "position": [
    -1420,
    -640
  ],
  "parameters": {
    "options": {},
    "assignments": {
      "assignments": [
        {
          "id": "012cb420-1455-4796-a2ac-a31e6abf59ba",
          "name": "appId",
          "type": "string",
          "value": "<MY_BASE_ID>"
        },
        {
          "id": "e863b66c-420f-43c6-aee2-43aa5087a0a5",
          "name": "tableId",
          "type": "string",
          "value": "<MY_TABLE_ID>"
        },
        {
          "id": "e470be1a-5833-47ed-9e2f-988ef5479738",
          "name": "notificationUrl",
          "type": "string",
          "value": "<MY_WEBHOOK_URL>"
        },
        {
          "id": "e4b3213b-e3bd-479b-99ec-d1aa31eaa4c8",
          "name": "inputField",
          "type": "string",
          "value": "File"
        }
      ]
    }
  },
  "typeVersion": 3.4
}

================ Node #1182 ================
{
  "id": "a3ef1a4a-fd22-4a37-8edb-48037f44fa4b",
  "name": "Get Table Schema1",
  "type": "n8n-nodes-base.airtable",
  "position": [
    -1240,
    -820
  ],
  "parameters": {
    "base": {
      "__rl": true,
      "mode": "id",
      "value": "={{ $json.appId }}"
    },
    "resource": "base",
    "operation": "getSchema"
  },
  "credentials": {
    "airtableTokenApi": {
      "id": "Und0frCQ6SNVX3VV",
      "name": "Airtable Personal Access Token account"
    }
  },
  "typeVersion": 2.1
}

================ Node #1183 ================
{
  "id": "2490bbc6-2ea1-4146-b0b8-5a406e89ea2c",
  "name": "Get \"Input\" Field",
  "type": "n8n-nodes-base.set",
  "position": [
    -1060,
    -820
  ],
  "parameters": {
    "mode": "raw",
    "options": {},
    "jsonOutput": "={{\n$input.all()\n .map(item => item.json)\n .find(item => item.id === $('Set Airtable Vars').first().json.tableId)\n .fields\n .find(field => field.name === $('Set Airtable Vars').first().json.inputField)\n}}"
  },
  "executeOnce": true,
  "typeVersion": 3.4
}

================ Node #1184 ================
{
  "id": "a3de141f-0ce8-4f8e-ae8e-f10f635d14ec",
  "name": "RecordsChanged Webhook",
  "type": "n8n-nodes-base.httpRequest",
  "position": [
    -880,
    -820
  ],
  "parameters": {
    "url": "=https://api.airtable.com/v0/bases/{{ $('Set Airtable Vars').first().json.appId }}/webhooks",
    "method": "POST",
    "options": {},
    "jsonBody": "={{\n{\n \"notificationUrl\": $('Set Airtable Vars').first().json.notificationUrl,\n \"specification\": {\n \"options\": {\n \"filters\": {\n \"fromSources\": [ \"client\" ],\n \"dataTypes\": [ \"tableData\" ],\n \"changeTypes\": [ \"update\" ],\n \"recordChangeScope\": $('Set Airtable Vars').first().json.tableId,\n \"watchDataInFieldIds\": [$json.id]\n }\n }\n }\n}\n}}",
    "sendBody": true,
    "specifyBody": "json",
    "authentication": "predefinedCredentialType",
    "nodeCredentialType": "airtableTokenApi"
  },
  "credentials": {
    "airtableTokenApi": {
      "id": "Und0frCQ6SNVX3VV",
      "name": "Airtable Personal Access Token account"
    }
  },
  "typeVersion": 4.2
}

================ Node #1185 ================
{
  "id": "21b0fae8-2046-4647-83c4-132d1d63503a",
  "name": "FieldsChanged Webhook",
  "type": "n8n-nodes-base.httpRequest",
  "position": [
    -880,
    -640
  ],
  "parameters": {
    "url": "=https://api.airtable.com/v0/bases/{{ $('Set Airtable Vars').first().json.appId }}/webhooks",
    "method": "POST",
    "options": {},
    "jsonBody": "={{\n{\n \"notificationUrl\": $('Set Airtable Vars').first().json.notificationUrl,\n \"specification\": {\n \"options\": {\n \"filters\": {\n \"fromSources\": [ \"client\" ],\n \"dataTypes\": [ \"tableFields\" ],\n \"changeTypes\": [ \"add\", \"update\" ],\n \"recordChangeScope\": $('Set Airtable Vars').first().json.tableId\n }\n }\n }\n}\n}}",
    "sendBody": true,
    "specifyBody": "json",
    "authentication": "predefinedCredentialType",
    "nodeCredentialType": "airtableTokenApi"
  },
  "credentials": {
    "airtableTokenApi": {
      "id": "Und0frCQ6SNVX3VV",
      "name": "Airtable Personal Access Token account"
    }
  },
  "typeVersion": 4.2
}

================ Node #1186 ================
{
  "id": "f31c36cb-98da-4688-a83a-f06e46d2b8a2",
  "name": "Sticky Note14",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    -1680,
    -1000
  ],
  "parameters": {
    "color": 5,
    "width": 1020,
    "height": 580,
    "content": "## \u2b50\ufe0f Creating Airtable Webhooks\nTo link this workflow with Airtable, you'll have to create webhooks for the Base.\nYou'll only really need to do this this once but if these webhooks are inactive after 7 days, you'll need to create them again.\n\nCheck out the Airtable Developer documentation for more info: [https://airtable.com/developers/web/api/webhooks-overview](https://airtable.com/developers/web/api/webhooks-overview)"
  },
  "typeVersion": 1
}

================ Node #1187 ================
{
  "id": "7e67ae65-88aa-4e48-aa63-2d3a4208cf4b",
  "name": "When chat message received",
  "type": "@n8n/n8n-nodes-langchain.chatTrigger",
  "position": [
    -500,
    20
  ],
  "webhookId": "3a7b0ea1-47f3-4a94-8ff2-f5e1f3d9dc32",
  "parameters": {
    "options": {}
  },
  "typeVersion": 1.1
}

================ Node #1188 ================
{
  "id": "e064921c-69e6-4cfe-a86e-4e3aa3a5314a",
  "name": "Ollama Chat Model",
  "type": "@n8n/n8n-nodes-langchain.lmChatOllama",
  "position": [
    -280,
    420
  ],
  "parameters": {
    "model": "mistral-nemo:latest",
    "options": {
      "useMLock": true,
      "keepAlive": "2h",
      "temperature": 0.1
    }
  },
  "credentials": {
    "ollamaApi": {
      "id": "vgKP7LGys9TXZ0KK",
      "name": "Ollama account"
    }
  },
  "typeVersion": 1
}

================ Node #1189 ================
{
  "id": "fe1379da-a12e-4051-af91-9d67a7c9a76b",
  "name": "Auto-fixing Output Parser",
  "type": "@n8n/n8n-nodes-langchain.outputParserAutofixing",
  "position": [
    -200,
    220
  ],
  "parameters": {
    "options": {
      "prompt": "Instructions:\n--------------\n{instructions}\n--------------\nCompletion:\n--------------\n{completion}\n--------------\n\nAbove, the Completion did not satisfy the constraints given in the Instructions.\nError:\n--------------\n{error}\n--------------\n\nPlease try again. Please only respond with an answer that satisfies the constraints laid out in the Instructions:"
    }
  },
  "typeVersion": 1
}

================ Node #1190 ================
{
  "id": "b6633b00-6ebb-43ca-8e5c-664a53548c17",
  "name": "Structured Output Parser",
  "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
  "position": [
    60,
    400
  ],
  "parameters": {
    "schemaType": "manual",
    "inputSchema": "{\n \"type\": \"object\",\n \"properties\": {\n \"name\": {\n \"type\": \"string\",\n \"description\": \"Name of the user\"\n },\n \"surname\": {\n \"type\": \"string\",\n \"description\": \"Surname of the user\"\n },\n \"commtype\": {\n \"type\": \"string\",\n \"enum\": [\"email\", \"phone\", \"other\"],\n \"description\": \"Method of communication\"\n },\n \"contacts\": {\n \"type\": \"string\",\n \"description\": \"Contact details. ONLY IF PROVIDED\"\n },\n \"timestamp\": {\n \"type\": \"string\",\n \"format\": \"date-time\",\n \"description\": \"When the communication occurred\"\n },\n \"subject\": {\n \"type\": \"string\",\n \"description\": \"Brief description of the communication topic\"\n }\n },\n \"required\": [\"name\", \"commtype\"]\n}"
  },
  "typeVersion": 1.2
}

================ Node #1191 ================
{
  "id": "23681a6c-cf62-48cb-86ee-08d5ce39bc0a",
  "name": "Basic LLM Chain",
  "type": "@n8n/n8n-nodes-langchain.chainLlm",
  "onError": "continueErrorOutput",
  "position": [
    -240,
    20
  ],
  "parameters": {
    "messages": {
      "messageValues": [
        {
          "message": "=Please analyse the incoming user request. Extract information according to the JSON schema. Today is: \"{{ $now.toISO() }}\""
        }
      ]
    },
    "hasOutputParser": true
  },
  "typeVersion": 1.5
}

================ Node #1192 ================
{
  "id": "8f4d1b4b-58c0-41ec-9636-ac555e440821",
  "name": "On Error",
  "type": "n8n-nodes-base.noOp",
  "position": [
    200,
    140
  ],
  "parameters": {},
  "typeVersion": 1
}

================ Node #1193 ================
{
  "id": "f4d77736-4470-48b4-8f61-149e09b70e3e",
  "name": "Sticky Note",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    -560,
    -160
  ],
  "parameters": {
    "color": 2,
    "width": 960,
    "height": 500,
    "content": "## Update data source\nWhen you change the data source, remember to update the `Prompt Source (User Message)` setting in the **Basic LLM Chain node**."
  },
  "typeVersion": 1
}

================ Node #1194 ================
{
  "id": "5fd273c8-e61d-452b-8eac-8ac4b7fff6c2",
  "name": "Sticky Note1",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    -560,
    340
  ],
  "parameters": {
    "color": 2,
    "width": 440,
    "height": 220,
    "content": "## Configure local LLM\nOllama offers additional settings \nto optimize model performance\nor memory usage."
  },
  "typeVersion": 1
}

================ Node #1195 ================
{
  "id": "63cbf762-0134-48da-a6cd-0363e870decd",
  "name": "Sticky Note2",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    0,
    340
  ],
  "parameters": {
    "color": 2,
    "width": 400,
    "height": 220,
    "content": "## Define JSON Schema"
  },
  "typeVersion": 1
}

================ Node #1196 ================
{
  "id": "9625294f-3cb4-4465-9dae-9976e0cf5053",
  "name": "Extract JSON Output",
  "type": "n8n-nodes-base.set",
  "position": [
    200,
    -80
  ],
  "parameters": {
    "mode": "raw",
    "options": {},
    "jsonOutput": "={{ $json.output }}\n"
  },
  "typeVersion": 3.4
}

================ Node #1197 ================
{
  "id": "2c6fba3b-0ffe-4112-b904-823f52cc220b",
  "name": "Sticky Note3",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    -560,
    200
  ],
  "parameters": {
    "width": 960,
    "height": 120,
    "content": "If the LLM response does not pass \nthe **Structured Output Parser** checks,\n**Auto-Fixer** will call the model again with a different \nprompt to correct the original response."
  },
  "typeVersion": 1
}

================ Node #1198 ================
{
  "id": "c73ba1ca-d727-4904-a5fd-01dd921a4738",
  "name": "Sticky Note6",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    -560,
    460
  ],
  "parameters": {
    "height": 80,
    "content": "The same LLM connects to both **Basic LLM Chain** and to the **Auto-fixing Output Parser**. \n"
  },
  "typeVersion": 1
}

================ Node #1199 ================
{
  "id": "193dd153-8511-4326-aaae-47b89d0cd049",
  "name": "Sticky Note7",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    200,
    440
  ],
  "parameters": {
    "width": 200,
    "height": 100,
    "content": "When the LLM model responds, the output is checked in the **Structured Output Parser**"
  },
  "typeVersion": 1
}

================ Node #1200 ================
{
  "id": "9098b59a-68b1-48bd-9b52-41a971e689b3",
  "name": "Google Docs",
  "type": "n8n-nodes-base.googleDocs",
  "position": [
    340,
    240
  ],
  "parameters": {
    "operation": "get",
    "documentURL": "={{ $json.id }}",
    "authentication": "serviceAccount"
  },
  "credentials": {
    "googleApi": {
      "id": "Xx4ObVZ3yYoA5XCx",
      "name": "Google Drive account"
    }
  },
  "typeVersion": 2
}

================ Node #1201 ================
{
  "id": "a7f224d4-232b-4201-82a0-d762830b546a",
  "name": "Wikipedia",
  "type": "@n8n/n8n-nodes-langchain.toolWikipedia",
  "position": [
    680,
    180
  ],
  "parameters": {},
  "typeVersion": 1
}

================ Node #1202 ================
{
  "id": "12bb798e-fe7e-4340-846b-5caeb824959b",
  "name": "Calculator",
  "type": "@n8n/n8n-nodes-langchain.toolCalculator",
  "position": [
    940,
    180
  ],
  "parameters": {},
  "typeVersion": 1
}

================ Node #1203 ================
{
  "id": "7d479725-f973-45c5-a798-d1868aefdd82",
  "name": "Google Sheets",
  "type": "n8n-nodes-base.googleSheets",
  "position": [
    1280,
    280
  ],
  "parameters": {
    "columns": {
      "value": {
        "Name": "={{ $('Google Drive ').item.json.lastModifyingUser.displayName }}",
        "Email ": "={{ $('Google Drive ').item.json.lastModifyingUser.emailAddress }}",
        "Summarise Conetent data ": "={{ $json.message.content }}"
      },
      "schema": [
        {
          "id": "Email ",
          "type": "string",
          "display": true,
          "required": false,
          "displayName": "Email ",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "Name",
          "type": "string",
          "display": true,
          "removed": false,
          "required": false,
          "displayName": "Name",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "Summarise Conetent data ",
          "type": "string",
          "display": true,
          "required": false,
          "displayName": "Summarise Conetent data ",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        }
      ],
      "mappingMode": "defineBelow",
      "matchingColumns": []
    },
    "options": {},
    "operation": "append",
    "sheetName": {
      "__rl": true,
      "mode": "list",
      "value": "gid=0",
      "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1s1v58pqGaVha9g_evNX4UEMchzteO7CyLNp87tcKJ1Q/edit#gid=0",
      "cachedResultName": "Sheet1"
    },
    "documentId": {
      "__rl": true,
      "mode": "list",
      "value": "1s1v58pqGaVha9g_evNX4UEMchzteO7CyLNp87tcKJ1Q",
      "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1s1v58pqGaVha9g_evNX4UEMchzteO7CyLNp87tcKJ1Q/edit?usp=drivesdk",
      "cachedResultName": "Docs Summarise Data"
    }
  },
  "credentials": {
    "googleSheetsOAuth2Api": {
      "id": "A2b2I9leWjfYSzSW",
      "name": "Google Sheets account"
    }
  },
  "typeVersion": 4.5
}

================ Node #1204 ================
{
  "id": "35716e44-14e7-4cc3-a273-2ba2e749892f",
  "name": "Sticky Note",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    -80,
    -80
  ],
  "parameters": {
    "color": 5,
    "height": 260,
    "content": "## Get Latest File\n"
  },
  "typeVersion": 1
}

================ Node #1205 ================
{
  "id": "fc3ac84f-887f-4908-a870-e6c3d46f4576",
  "name": "Google Drive ",
  "type": "n8n-nodes-base.googleDriveTrigger",
  "notes": "Received the doc",
  "position": [
    0,
    0
  ],
  "parameters": {
    "event": "fileCreated",
    "options": {},
    "pollTimes": {
      "item": [
        {
          "mode": "everyMinute"
        }
      ]
    },
    "triggerOn": "specificFolder",
    "folderToWatch": {
      "__rl": true,
      "mode": "list",
      "value": "1H8Xe2uIO0sI-QdxFsDH0Yg_w9RaPOoD_",
      "cachedResultUrl": "https://drive.google.com/drive/folders/1H8Xe2uIO0sI-QdxFsDH0Yg_w9RaPOoD_",
      "cachedResultName": "yashdata"
    },
    "authentication": "serviceAccount"
  },
  "credentials": {
    "googleApi": {
      "id": "Xx4ObVZ3yYoA5XCx",
      "name": "Google Drive account"
    }
  },
  "notesInFlow": true,
  "typeVersion": 1
}

================ Node #1206 ================
{
  "id": "14f0c78f-73c7-42c4-8916-284a876659cb",
  "name": "Sticky Note1",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    260,
    140
  ],
  "parameters": {
    "color": 5,
    "width": 260,
    "height": 260,
    "content": "## Get Document Content\n"
  },
  "typeVersion": 1
}

================ Node #1207 ================
{
  "id": "6c87fc48-6b22-46fb-a509-d2037dc302bc",
  "name": "Sticky Note2",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    620,
    -60
  ],
  "parameters": {
    "color": 5,
    "width": 440,
    "height": 380,
    "content": "## AI Summarization\n"
  },
  "typeVersion": 1
}

================ Node #1208 ================
{
  "id": "bcf259bd-df2a-4a16-a679-3a5d3ee68122",
  "name": "Sticky Note3",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    1160,
    160
  ],
  "parameters": {
    "color": 5,
    "width": 300,
    "height": 280,
    "content": "## Store Summary in Sheet\n"
  },
  "typeVersion": 1
}

================ Node #1209 ================
{
  "id": "81f80bd2-aa10-49a8-ae63-3a3322bcac80",
  "name": "Generate Summary AI",
  "type": "@n8n/n8n-nodes-langchain.openAi",
  "position": [
    700,
    20
  ],
  "parameters": {
    "modelId": {
      "__rl": true,
      "mode": "list",
      "value": "gpt-4o-mini",
      "cachedResultName": "GPT-4O-MINI"
    },
    "options": {},
    "messages": {
      "values": [
        {
          "content": "=Summarise the below content\n {{ $json.content }}"
        }
      ]
    }
  },
  "credentials": {
    "openAiApi": {
      "id": "aMNetdb7Sh3K62cJ",
      "name": "OpenAi account"
    }
  },
  "typeVersion": 1.7
}

================ Node #1210 ================
{
  "id": "f7379ef9-9940-4aec-9717-b7df688fd2df",
  "name": "Sticky Note4",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    240,
    -260
  ],
  "parameters": {
    "color": 5,
    "width": 800,
    "height": 80,
    "content": "# Google Doc Summarizer to Google Sheets\n"
  },
  "typeVersion": 1
}

================ Node #1211 ================
{
  "id": "0bf7d344-64ad-4074-8e7c-20055a3bf082",
  "name": "Sticky Note5",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    -20,
    500
  ],
  "parameters": {
    "color": 5,
    "width": 1280,
    "content": "## Description\nThis workflow is created by WeblineIndia, it streamlines and automates the end-to-end process of managing recently added document files in Google Drive. It begins by identifying the most recently uploaded .doc file in a designated folder within Google Drive. The document's content is then directly retrieved and passed through an AI-powered summarization model that condenses the content into a concise and meaningful summary. Finally, the summarized content, along with relevant metadata such as the document's name, upload date, and other details, is systematically stored in a Google Sheet. This ensures easy reference, enhanced organization, and quick access to key information, making it an ideal solution for managing and summarizing large volumes of document data efficiently."
  },
  "typeVersion": 1
}

================ Node #1212 ================
{
  "id": "13b3488e-af72-4d89-bef4-e9b895e3bf76",
  "name": "OpenAI Chat Model",
  "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
  "position": [
    1640,
    580
  ],
  "parameters": {
    "model": "gpt-4o",
    "options": {
      "temperature": 0.7,
      "frequencyPenalty": 0.2
    }
  },
  "credentials": {
    "openAiApi": {
      "id": "rveqdSfp7pCRON1T",
      "name": "Ted's Tech Talks OpenAi"
    }
  },
  "typeVersion": 1
}

================ Node #1213 ================
{
  "id": "864937a1-43f6-4055-bdea-61ab07db9903",
  "name": "Window Buffer Memory",
  "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
  "position": [
    1760,
    580
  ],
  "parameters": {
    "sessionKey": "=chat_with_{{ $('Listen for incoming events').first().json.message.chat.id }}",
    "contextWindowLength": 10
  },
  "typeVersion": 1
}

================ Node #1214 ================
{
  "id": "4ef838d4-feaa-4bd3-b2c7-ccd938be4373",
  "name": "Listen for incoming events",
  "type": "n8n-nodes-base.telegramTrigger",
  "position": [
    1580,
    360
  ],
  "webhookId": "322dce18-f93e-4f86-b9b1-3305519b7834",
  "parameters": {
    "updates": [
      "*"
    ],
    "additionalFields": {}
  },
  "credentials": {
    "telegramApi": {
      "id": "9dexJXnlVPA6wt8K",
      "name": "Chat & Sound"
    }
  },
  "typeVersion": 1
}

================ Node #1215 ================
{
  "id": "fed51c41-2846-4a1a-a5f5-ce121ee7fe88",
  "name": "Sticky Note",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    1460,
    180
  ],
  "parameters": {
    "color": 7,
    "width": 926.3188190787038,
    "height": 553.452795998601,
    "content": "## Generate an image with Dall-E-3 and send it via Telegram"
  },
  "typeVersion": 1
}

================ Node #1216 ================
{
  "id": "1c7a204b-3ed7-47bd-a434-202b05272d18",
  "name": "Send final reply",
  "type": "n8n-nodes-base.telegram",
  "onError": "continueErrorOutput",
  "position": [
    2140,
    360
  ],
  "parameters": {
    "text": "={{ $json.output }}",
    "chatId": "={{ $('Listen for incoming events').first().json.message.from.id }}",
    "additionalFields": {
      "appendAttribution": false
    }
  },
  "credentials": {
    "telegramApi": {
      "id": "9dexJXnlVPA6wt8K",
      "name": "Chat & Sound"
    }
  },
  "typeVersion": 1.1
}

================ Node #1217 ================
{
  "id": "bebbe9d4-47ba-4c13-9e1e-d36bfe6e472e",
  "name": "Send back an image",
  "type": "n8n-nodes-base.telegramTool",
  "position": [
    2020,
    580
  ],
  "parameters": {
    "file": "={{ $fromAI(\"url\", \"a valid url of an image\", \"string\", \" \") }}",
    "chatId": "={{ $('Listen for incoming events').first().json.message.from.id }}",
    "operation": "sendDocument",
    "additionalFields": {}
  },
  "credentials": {
    "telegramApi": {
      "id": "9dexJXnlVPA6wt8K",
      "name": "Chat & Sound"
    }
  },
  "typeVersion": 1.2
}

================ Node #1218 ================
{
  "id": "38f2410d-bd55-4ddf-8aaa-4e28919de78f",
  "name": "Generate image in Dalle",
  "type": "@n8n/n8n-nodes-langchain.toolHttpRequest",
  "position": [
    1880,
    580
  ],
  "parameters": {
    "url": "https://api.openai.com/v1/images/generations",
    "method": "POST",
    "sendBody": true,
    "authentication": "predefinedCredentialType",
    "parametersBody": {
      "values": [
        {
          "name": "model",
          "value": "dall-e-3",
          "valueProvider": "fieldValue"
        },
        {
          "name": "prompt"
        }
      ]
    },
    "toolDescription": "Call this tool to request a Dall-E-3 model, when the user asks to draw something. If you g\u0435t a response from this tool, forward it to the Telegram tool.",
    "nodeCredentialType": "openAiApi"
  },
  "credentials": {
    "openAiApi": {
      "id": "rveqdSfp7pCRON1T",
      "name": "Ted's Tech Talks OpenAi"
    }
  },
  "typeVersion": 1.1
}

================ Node #1219 ================
{
  "id": "34265eab-9f37-475a-a2ae-a6c37c69c595",
  "name": "AI Agent",
  "type": "@n8n/n8n-nodes-langchain.agent",
  "position": [
    1780,
    360
  ],
  "parameters": {
    "text": "={{ $json.message.text }}",
    "options": {
      "systemMessage": "=You are a helpful assistant. You are communicating with a user named {{ $json.message.from.first_name }}. Address the user by name every time. If the user asks for an image, always send the link to the image in the final reply."
    },
    "promptType": "define"
  },
  "typeVersion": 1.7
}

================ Node #1220 ================
{
  "id": "0733b902-6707-4548-9498-44993ed6a16c",
  "name": "When clicking \u2018Test workflow\u2019",
  "type": "n8n-nodes-base.manualTrigger",
  "position": [
    500,
    -780
  ],
  "parameters": {},
  "typeVersion": 1
}

================ Node #1221 ================
{
  "id": "fa1fea27-c44d-4c8b-89ab-e7f84e91048f",
  "name": "Text Classifier",
  "type": "@n8n/n8n-nodes-langchain.textClassifier",
  "position": [
    5520,
    -800
  ],
  "parameters": {
    "options": {
      "systemPromptTemplate": "Analyze the provided text and classify it into one of the following categories: {categories}. \n- If the text contains an 'AI Summary', classify it as \"summarized\".\n- If the text does not contain an 'AI Summary', classify it as \"not_summarized\".\n\nFollow these instructions strictly:\n- Provide the result in JSON format.\n- Do not include any explanations, comments, or additional text.\n"
    },
    "inputText": "={{ $json.data }}",
    "categories": {
      "categories": [
        {
          "category": "not_summarized",
          "description": "Content that does not contain an 'AI Summary'."
        },
        {
          "category": "=summarized",
          "description": "Content that contains an 'AI Summary'."
        }
      ]
    }
  },
  "typeVersion": 1
}

================ Node #1222 ================
{
  "id": "258d93f8-50db-4c95-8315-b7284100a426",
  "name": "OpenAI Chat Model",
  "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
  "position": [
    5540,
    -600
  ],
  "parameters": {
    "options": {}
  },
  "credentials": {
    "openAiApi": {
      "id": "",
      "name": "OpenAi Connection"
    }
  },
  "typeVersion": 1.1
}

================ Node #1223 ================
{
  "id": "7634cffa-0df8-4c11-84f4-c24cff652432",
  "name": "Loop Over Items",
  "type": "n8n-nodes-base.splitInBatches",
  "position": [
    2060,
    -780
  ],
  "parameters": {
    "options": {}
  },
  "typeVersion": 3
}

================ Node #1224 ================
{
  "id": "1742dc9a-89b7-44f4-8ddb-5658fd34cadf",
  "name": "If",
  "type": "n8n-nodes-base.if",
  "position": [
    3660,
    -820
  ],
  "parameters": {
    "options": {},
    "conditions": {
      "options": {
        "version": 2,
        "leftValue": "",
        "caseSensitive": true,
        "typeValidation": "strict"
      },
      "combinator": "and",
      "conditions": [
        {
          "id": "44a27f03-4285-4771-a507-c55f029256e9",
          "operator": {
            "type": "number",
            "operation": "exists",
            "singleValue": true
          },
          "leftValue": "={{ $json.post_id }}",
          "rightValue": ""
        }
      ]
    }
  },
  "typeVersion": 2.2
}

================ Node #1225 ================
{
  "id": "",
  "name": "Webhook",
  "type": "n8n-nodes-base.webhook",
  "disabled": true,
  "position": [
    500,
    -360
  ],
  "webhookId": "",
  "parameters": {
    "path": "4946fc26-bea4-4244-b37c-203c39537246",
    "options": {},
    "httpMethod": "POST",
    "authentication": "headerAuth"
  },
  "credentials": {
    "httpHeaderAuth": {
      "id": "",
      "name": "wp-webhook"
    }
  },
  "typeVersion": 2
}

================ Node #1226 ================
{
  "id": "4c77eb08-e855-4a07-b76a-d5cea322fbca",
  "name": "Schedule Trigger",
  "type": "n8n-nodes-base.scheduleTrigger",
  "disabled": true,
  "position": [
    500,
    -600
  ],
  "parameters": {
    "rule": {
      "interval": [
        {
          "field": "seconds"
        }
      ]
    }
  },
  "typeVersion": 1.2
}

================ Node #1227 ================
{
  "id": "cb1dce7c-6dfb-4435-aca8-013fdac58d43",
  "name": "Wordpress - Update Post",
  "type": "n8n-nodes-base.httpRequest",
  "position": [
    7920,
    -820
  ],
  "parameters": {
    "url": "=https://<your-domain.com>/wp-json/wp/v2/posts/{{ $('Loop Over Items').item.json.id }}",
    "method": "POST",
    "options": {},
    "sendBody": true,
    "authentication": "predefinedCredentialType",
    "bodyParameters": {
      "parameters": [
        {
          "name": "=content",
          "value": "={{ `${$json.message.content} ${$('Text Classifier').item.json.content.raw}` }}"
        },
        {
          "name": "excerpt",
          "value": "={{ $('Text Classifier').item.json.excerpt.rendered }}"
        }
      ]
    },
    "nodeCredentialType": "wordpressApi"
  },
  "credentials": {
    "wordpressApi": {
      "id": "",
      "name": ""
    }
  },
  "typeVersion": 4.2
}

================ Node #1228 ================
{
  "id": "4aa026fd-29c3-4848-bfd1-98efba165b68",
  "name": "Google Sheets - Get rows",
  "type": "n8n-nodes-base.googleSheets",
  "position": [
    2920,
    -820
  ],
  "parameters": {
    "options": {},
    "filtersUI": {
      "values": [
        {
          "lookupValue": "={{ $json.id }}",
          "lookupColumn": "post_id"
        }
      ]
    },
    "sheetName": {
      "__rl": true,
      "mode": "list",
      "value": "gid=0",
      "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1uO0zaNc5UrLhtdcvETFcZGln_qij-nqpYP06n9GxJUk/edit#gid=0",
      "cachedResultName": "AI-Summarized Posts"
    },
    "documentId": {
      "__rl": true,
      "mode": "list",
      "value": "1uO0zaNc5UrLhtdcvETFcZGln_qij-nqpYP06n9GxJUk",
      "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1uO0zaNc5UrLhtdcvETFcZGln_qij-nqpYP06n9GxJUk/edit?usp=drivesdk",
      "cachedResultName": "Template - AI Summary WordPress Posts"
    },
    "authentication": "serviceAccount"
  },
  "credentials": {
    "googleApi": {
      "id": "",
      "name": "Google Sheets account"
    }
  },
  "typeVersion": 4.5,
  "alwaysOutputData": true
}

================ Node #1229 ================
{
  "id": "0139af9a-5afc-4ac5-9631-4d217cdbc967",
  "name": "HTML to Markdown",
  "type": "n8n-nodes-base.markdown",
  "position": [
    4700,
    -800
  ],
  "parameters": {
    "html": "={{ $json.content.rendered }}",
    "options": {}
  },
  "typeVersion": 1
}

================ Node #1230 ================
{
  "id": "3272ff54-9c8f-4003-bdf6-c16e8f4ba972",
  "name": "OpenAI",
  "type": "@n8n/n8n-nodes-langchain.openAi",
  "onError": "continueRegularOutput",
  "position": [
    7060,
    -820
  ],
  "parameters": {
    "modelId": {
      "__rl": true,
      "mode": "list",
      "value": "gpt-4o-mini",
      "cachedResultName": "GPT-4O-MINI"
    },
    "options": {},
    "messages": {
      "values": [
        {
          "content": "={{ $json.data }}"
        },
        {
          "role": "system",
          "content": "=You are an expert in content summarization and web-optimized writing. \nYour mission is to analyze the HTML content of an article from a website focused on electric vehicles and green mobility and extract the key information. \n\nGenerate only an HTML block containing a concise summary in bullet point format, strictly following this structure:\n\n\n<!-- wp:html -->\n<div class=\"wp-block-group has-background\" style=\"background-color:#f8faff; border-radius:4px; padding:10px;\">\n <p style=\"font-style:normal; font-weight:1000; font-size:1.1em; margin:0 0 10px 0;\">\n <strong>\u2728 AI Summary</strong> :\n </p>\n\n <li>[Key point 1]</li>\n <li>[Key point 2]</li>\n <li>[Key point 3]</li>\n <li>[Key point 4]</li>\n\n</div>\n<!-- /wp:html -->\n\n<!-- wp:separator -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity\"/>\n<!-- /wp:separator -->\n\n## Important: Strict Guidelines to Follow\n\n- Ensure the summary is **clear, concise, and informative**, focusing only on key points. \n- **Avoid unnecessary introductions**, such as \"This article presents\" or similar phrases. \n- **Output only the required HTML block**, without any additional explanations or commentary. \n- The output must **start with** the `<!-- wp:html -->` tag and **end with** the closing separator tag. \n- The summary must be **in the user's language**, including the phrase `\"\u2728 AI Summary\"`, which should also be translated accordingly. \n- **Do not add** any extra text, comments, or formatting outside the specified HTML block. \n\n\n## Example of a GOOD output:\n\n<!-- wp:html -->\n<div class=\"wp-block-group has-background\" style=\"background-color:#f8faff; border-radius:4px; padding:10px;\">\n <p style=\"font-style:normal; font-weight:1000; font-size:1.1em; margin:0 0 10px 0;\">\n <strong>\u2728 AI Summary</strong> :\n </p>\n\n <li>In March 2022, France had 43,700 public charging points for electric vehicles.</li>\n <li>Half of the highway service areas are equipped with ultra-fast charging stations.</li>\n <li>France is among the most equipped European countries, with 20% of the charging points in Europe.</li>\n <li>The goal is to reach 100,000 charging stations to support future demand for electric vehicles.</li>\n\n</div>\n<!-- /wp:html -->\n\n<!-- wp:separator -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity\"/>\n<!-- /wp:separator -->\n\n## Example of a BAD output:\n```html\n<!-- wp:html -->\n<div class=\"wp-block-group has-background\" style=\"background-color:#f8faff; border-radius:4px; padding:10px;\">\n <p style=\"font-style:normal; font-weight:1000; font-size:1.1em; margin:0 0 10px 0;\">\n <strong>\u2728 AI Summary</strong> :\n </p>\n\n <li>In March 2022, France had 43,700 public charging points for electric vehicles.</li>\n <li>Half of the highway service areas are equipped with ultra-fast charging stations.</li>\n <li>France is among the most equipped European countries, with 20% of the charging points in Europe.</li>\n <li>The goal is to reach 100,000 charging stations to support future demand for electric vehicles.</li>\n\n</div>\n<!-- /wp:html -->\n```"
        }
      ]
    }
  },
  "credentials": {
    "openAiApi": {
      "id": "",
      "name": "OpenAi Connection"
    }
  },
  "retryOnFail": true,
  "typeVersion": 1.8
}

================ Node #1231 ================
{
  "id": "f35a0520-9b88-4840-bdff-970a15a8d691",
  "name": "Google Sheets - Add Row",
  "type": "n8n-nodes-base.googleSheets",
  "position": [
    9680,
    -820
  ],
  "parameters": {
    "columns": {
      "value": {
        "post_id": "={{ $json.id }}",
        "summary": "={{$json.ai_summary}}",
        "edit_link": "={{ $json.edit_link }}",
        "post_link": "={{ $json.link }}",
        "summarized_date": "={{$now}}"
      },
      "schema": [
        {
          "id": "post_id",
          "type": "string",
          "display": true,
          "removed": false,
          "required": false,
          "displayName": "post_id",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "summary",
          "type": "string",
          "display": true,
          "removed": false,
          "required": false,
          "displayName": "summary",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "post_link",
          "type": "string",
          "display": true,
          "removed": false,
          "required": false,
          "displayName": "post_link",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "edit_link",
          "type": "string",
          "display": true,
          "removed": false,
          "required": false,
          "displayName": "edit_link",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "summarized_date",
          "type": "string",
          "display": true,
          "removed": false,
          "required": false,
          "displayName": "summarized_date",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        }
      ],
      "mappingMode": "autoMapInputData",
      "matchingColumns": [
        "post_id"
      ],
      "attemptToConvertTypes": false,
      "convertFieldsToString": false
    },
    "options": {},
    "operation": "append",
    "sheetName": {
      "__rl": true,
      "mode": "list",
      "value": "gid=0",
      "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1uO0zaNc5UrLhtdcvETFcZGln_qij-nqpYP06n9GxJUk/edit#gid=0",
      "cachedResultName": "AI-Summarized Posts"
    },
    "documentId": {
      "__rl": true,
      "mode": "list",
      "value": "1uO0zaNc5UrLhtdcvETFcZGln_qij-nqpYP06n9GxJUk",
      "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1uO0zaNc5UrLhtdcvETFcZGln_qij-nqpYP06n9GxJUk/edit?usp=drivesdk",
      "cachedResultName": "Template - AI Summary WordPress Posts"
    },
    "authentication": "serviceAccount"
  },
  "credentials": {
    "googleApi": {
      "id": "",
      "name": "Google Sheets account"
    }
  },
  "typeVersion": 4.5
}

================ Node #1232 ================
{
  "id": "57fd5aaf-4a43-458b-8842-72e3289c7dca",
  "name": "Slack - Notify Channel",
  "type": "n8n-nodes-base.slack",
  "position": [
    9700,
    -540
  ],
  "webhookId": "ab3305f2-3cb8-44f4-b2e6-fb628baf1d6d",
  "parameters": {
    "text": "=\ud83d\udcc4\ud83d\udd14 *New WordPress Post Updated with AI Summary*\n\nThe post *{{ $('Set fields - Prepare data for Gsheets & Slack').item.json.title }}* has been updated with an AI-generated summary at the top of the article. \nYou can view it here: {{ $('Set fields - Prepare data for Gsheets & Slack').item.json.post_link }}\n\n\u2022 *Post ID*: {{ $('Set fields - Prepare data for Gsheets & Slack').item.json.post_id }}\n\u2022 *Edit Link*: {{ $('Set fields - Prepare data for Gsheets & Slack').item.json.edit_link }}\n",
    "select": "channel",
    "channelId": {
      "__rl": true,
      "mode": "list",
      "value": "C08AN5DJLCT",
      "cachedResultName": "wp-posts-ai"
    },
    "otherOptions": {
      "mrkdwn": true
    },
    "authentication": "oAuth2"
  },
  "credentials": {
    "slackOAuth2Api": {
      "id": "",
      "name": "slack-topic-monitoring-dtk"
    }
  },
  "typeVersion": 2.3
}

================ Node #1233 ================
{
  "id": "29669a57-4104-4328-a834-0b07724fe245",
  "name": "Set fields - From Webhook input",
  "type": "n8n-nodes-base.set",
  "position": [
    700,
    -360
  ],
  "parameters": {
    "options": {},
    "assignments": {
      "assignments": [
        {
          "id": "eae4bb6e-0215-4338-9590-f4b6de6f57a4",
          "name": "post_id",
          "type": "string",
          "value": "={{ $json.body.post_id }}"
        }
      ]
    }
  },
  "typeVersion": 3.4
}

================ Node #1234 ================
{
  "id": "937d0f8b-a71e-47f0-95de-cdbb9599c524",
  "name": "Sticky Note",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    400,
    -1720
  ],
  "parameters": {
    "color": 7,
    "width": 680,
    "height": 1560,
    "content": "## Trigger - Two Options\nTo use this workflow, you have two trigger options.\n\nThe default trigger is **\"When clicking 'Test workflow'\"**, allowing you to manually test the scenario.\n\nIf you want to use this workflow in production, you can choose one of the following triggers. You'll need to **select the one you prefer and enable it**.:\n\n### Schedule Trigger \nThis trigger checks at regular intervals (e.g., every 5 minutes) if a new post has been published on your WordPress blog and triggers the workflow accordingly. \n\n\u2705 **Easy to set up** \n\u2705 **Automates AI summaries without manual intervention** \n\n\u26a0\ufe0f If you run the workflow manually once, the AI-generated summaries will be added to Google Sheets and processed in later steps to prevent duplication. \n\n\ud83d\udca1 **Recommended follow-up nodes:** If you choose this trigger, the following nodes are suggested in the template: \n- **`Date & Time - Subtract`**: Subtracts the scheduled interval from the current execution timestamp. For example, if the workflow runs every 5 minutes, it subtracts 5 minutes from the execution time. \n- **`WordPress - Get Posts`**: Uses the output of the `Date & Time - Subtract` node as a filter to retrieve only posts published after the last execution. \n\n### Webhook Trigger \nIf you're familiar with webhooks, you can set up a webhook that triggers when a new post is published. \n\n\u2705 **Faster than scheduled triggers** \n\u2705 **More event-driven** \n\nYou can implement this using either: \n- A **Webhook plugin** on WordPress (not recommended due to plugin dependency). \n- A **PHP function** that triggers the webhook with authentication for security. \n\n\u26a0\ufe0f **Be cautious** with how the webhook is triggered\u2014you may not want it to fire on every post edit. \n\n\ud83d\udca1 **Recommended follow-up nodes for this option:** \n- **`Set Fields - From Webhook Input`**: Configures the fields based on the data sent to the webhook. \n- **`WordPress - Get Post`**: Retrieves the post using the `post_id` received from the webhook, ensuring higher accuracy than the schedule trigger approach. \n"
  },
  "typeVersion": 1
}

================ Node #1235 ================
{
  "id": "b42aa922-bf5d-4b09-8a05-ab88ec304dca",
  "name": "Date & Time - Substract",
  "type": "n8n-nodes-base.dateTime",
  "position": [
    720,
    -600
  ],
  "parameters": {
    "options": {},
    "duration": 30,
    "timeUnit": "seconds",
    "magnitude": "={{ $json.timestamp }}",
    "operation": "subtractFromDate",
    "outputFieldName": "last_execution_date"
  },
  "typeVersion": 2
}

================ Node #1236 ================
{
  "id": "0f6ada76-9195-4d2e-95be-86ea1c4f368a",
  "name": "Sticky Note1",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    1220,
    -1240
  ],
  "parameters": {
    "color": 7,
    "width": 600,
    "height": 1080,
    "content": "## WordPress - Get All Posts \n\nThis node is used for the **initial/test run**. In production, you should use the WordPress node that follows the **Scheduled Trigger** or **Webhook Trigger** instead. \n\nIt retrieves all existing WordPress posts to generate an AI Summary. \n\n### \ud83d\udd39 Considerations: \n- In this template, the query is **limited to 5 posts** to prevent accidental large-scale execution. This makes it easier to fix any issues. \n- You can **add filters** (category, tag, date, etc.) to target only the posts for which you want an AI Summary. \n- You can enable the **\"Get All Posts\"** option in the node if you want summaries for all posts\u2014**but make sure this is intentional**. \n- The **more posts** you process, the **higher the cost** in OpenAI API usage. \n"
  },
  "typeVersion": 1
}

================ Node #1237 ================
{
  "id": "e806547f-6bd5-4251-9dad-ffb36b435d15",
  "name": "Sticky Note2",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    1960,
    -1240
  ],
  "parameters": {
    "color": 7,
    "width": 620,
    "height": 1080,
    "content": "## Loop Over Items \n\nSince multiple posts may be retrieved from the previous step, a **\"Loop Over Items\"** node is used to process each post individually, optimizing the execution of subsequent nodes. \n\n### \ud83d\udd39 In Production - Using the \"Schedule Trigger\" \nYou can continue using the **\"Loop Over Items\"** approach in production. Depending on your **publication frequency** and the **schedule interval** you've chosen, multiple posts could be retrieved in a single execution. This ensures each post is processed sequentially. \n\n### \ud83d\udd39 In Production - Using the \"Webhook Trigger\" \nWith a **Webhook Trigger**, the workflow typically runs for **one post at a time**, meaning the **\"Loop Over Items\"** node is not strictly necessary. \n\n- **You can remove it** for a slightly more efficient workflow. \n- **However, keeping it won\u2019t cause any issues**\u2014it will simply loop over one item instead of multiple. \n"
  },
  "typeVersion": 1
}

================ Node #1238 ================
{
  "id": "1370d44f-3aaa-4b8d-96d8-94269cb084b4",
  "name": "Sticky Note3",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    2660,
    -1240
  ],
  "parameters": {
    "color": 7,
    "width": 1240,
    "height": 1080,
    "content": "## Google Sheets - Get Rows & IF Nodes \n\nThis step is used to **check whether a post already has an AI Summary**. \n\nFor the Google Sheets node, you can **[make a copy of this Google Sheets template](https://docs.google.com/spreadsheets/d/1uO0zaNc5UrLhtdcvETFcZGln_qij-nqpYP06n9GxJUk/)** by going to **File \u2192 Make a copy**.\n\n\n### \ud83d\udd39 How It Works: \n1. **On the first execution**, posts retrieved from WordPress and processed for AI summarization are added to a **Google Sheet**. \n2. **On subsequent executions**, when the workflow retrieves new posts, it checks if the `post_id` is already recorded in Google Sheets. \n\n### \ud83d\udd39 IF Node Logic: \n- \u2705 **If a row exists for the `post_id`** \u2192 The post already has an AI Summary. The workflow **skips processing** and moves to the `\"Loop Over Items\"` node. \n- \u274c **If no row exists for the `post_id`** \u2192 The post **does not have an AI Summary**, so the workflow continues along the execution path that leads to AI Summary generation. \n"
  },
  "typeVersion": 1
}

================ Node #1239 ================
{
  "id": "b500e31d-7bd6-4c4d-ba54-60a034d218e3",
  "name": "Sticky Note4",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    4000,
    -1240
  ],
  "parameters": {
    "color": 7,
    "width": 1140,
    "height": 1080,
    "content": "## WordPress - Get Post & HTML to Markdown Nodes \n\nThis step retrieves the WordPress post data using the `post_id` and converts the HTML content to Markdown. This ensures that the text is formatted in a **clean and structured way** before being sent to the **Text Classifier** node (which works with AI). More details about this step are provided in the next sticky note. \n\n### \ud83d\udd39 WordPress - Get Post \n- The **`context=edit`** option is enabled to retrieve the **raw** post data. \n- This is necessary because the post content will be **updated later in the workflow**. \n\n### \ud83d\udd39 HTML to Markdown \n- Converts the retrieved HTML content into **Markdown** format. \n- This makes the text **easier to process** for the LLM (Large Language Model) in the next step. \n- Markdown ensures that the AI better understands the structure and formatting of the content. \n"
  },
  "typeVersion": 1
}

================ Node #1240 ================
{
  "id": "249feb0b-6503-4eb1-88d8-c93764a77f33",
  "name": "Sticky Note5",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    5240,
    -1240
  ],
  "parameters": {
    "color": 7,
    "width": 1140,
    "height": 1080,
    "content": "## Text Classifier \n\nThis step **classifies posts into categories**: \n\n- **`not_summarized`** \u2192 If the post **does not** have a summary, the following nodes execute the AI summary generation. \n- **`summarized`** \u2192 If the post **already** has a summary, the workflow **skips processing**: \n - The workflow moves to `\"Loop Over Items\"`. \n - The `\"Done\"` branch goes to the `\"Do Nothing\"` node. \n\nThe LLM model used is **`gpt-4o-mini`**\u2014it's efficient and cost-effective, but you can choose another model if needed. \n\n### \ud83d\udd39 Why Use a Text Classifier? \nThe previous node already filters posts **based on Google Sheets**, but adding this classification step makes the workflow even **more robust**: \n\n- \u2705 **Extra validation**: If a post already has an AI Summary but, for some reason, is **not listed in Google Sheets**, this step **prevents duplicate summaries**. \n- \u2705 **Avoids redundancy**: If a post already contains a **manual or pre-existing summary** at the top (not necessarily AI-generated), this step prevents adding an AI Summary that would be redundant. \n"
  },
  "typeVersion": 1
}

================ Node #1241 ================
{
  "id": "ba3ef8b6-5826-4b2b-9bfc-b8f7c9645192",
  "name": "Sticky Note6",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    6480,
    -1240
  ],
  "parameters": {
    "color": 7,
    "width": 1100,
    "height": 1080,
    "content": "## OpenAI - Message a Model \n\nThis step sends the **Markdown-formatted post** to **GPT-4o-mini**, using a **System Prompt** to instruct the LLM to generate an AI Summary. \nYou can review and modify the **System Prompt** directly within this node. \n\n### \ud83d\udd39 Customization Required \nTo ensure optimal results, you should: \n- **Specify your website's theme** in the system prompt. The default example uses **electric mobility**, but you can replace it with a more relevant theme (e.g., **\"sustainable mobility\"**, \"urban transport,\" etc.). \n- **Modify the \"Good\" and \"Bad\" output examples**\u2014since the template is pre-configured for electric mobility, make sure to adapt the examples to match your content. \n\n### \ud83d\udd39 Output Format \nThe model is instructed to return the summary in **HTML format**, which will be used to update the WordPress post. \n\n\ud83d\udca1 **Customization Tip**: \nYou may want to adjust the **HTML styling** to better match your WordPress theme. \nConsider modifying the following elements: \n- **Background color, text color, and font weight** \n- **Section title** (e.g., rename `\"AI Summary\"`) \n- **Padding, margins, and border styling** \n- **Removing or customizing the separator** \n\n\n\n\n\n\n\n\n\n\n### \ud83d\udd39 Default Generated HTML \n\n***\n\n<!-- wp:html -->\n<div class=\"wp-block-group has-background\" style=\"background-color:#f8faff; border-radius:4px; padding:10px;\">\n <p style=\"font-style:normal; font-weight:1000; font-size:1.1em; margin:0 0 10px 0;\">\n <strong>\u2728 AI Summary</strong> :\n </p>\n\n <li>[Key point 1]</li>\n <li>[Key point 2]</li>\n <li>[Key point 3]</li>\n <li>[Key point 4]</li>\n\n</div>\n<!-- /wp:html -->\n\n<!-- wp:separator -->\n<hr class=\"wp-block-separator has-alpha-channel-opacity\"/>\n<!-- /wp:separator -->\n\n***"
  },
  "typeVersion": 1
}

================ Node #1242 ================
{
  "id": "80f2ccc9-3142-4e0c-9a6c-49b78baedec5",
  "name": "Sticky Note7",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    7660,
    -1240
  ],
  "parameters": {
    "color": 7,
    "width": 640,
    "height": 1080,
    "content": "## WordPress - Update Post \n\nThis API call updates the **WordPress post** and its **excerpt**. \n\n**https://<your-domain.com>/wp-json/wp/v2/posts/{{ $('Loop Over Items').item.json.id }}**\n\n\n### \ud83d\udd39 What It Does \n- **Adds the AI Summary** at the **top** of the post. \n- **Updates the post excerpt** using data retrieved from the `WordPress - Get Post2` node: \n- If a **manual excerpt** exists, it is **preserved**. \n- If the excerpt was simply the **beginning of the article**, it remains unchanged. \n- This prevents the **AI Summary from replacing the excerpt**, ensuring a **better user experience** on your blog\u2019s article listing page. \n"
  },
  "typeVersion": 1
}

================ Node #1243 ================
{
  "id": "45966c07-b20c-485e-96eb-5164165caf27",
  "name": "Sticky Note8",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    8400,
    -1240
  ],
  "parameters": {
    "color": 7,
    "width": 640,
    "height": 1080,
    "content": "## Set Fields - Prepare Data for Google Sheets & Slack \n\nThis node **sets fields** that will be used in **Google Sheets** and **Slack**. \nYou can **add or modify fields** as needed to fit your specific use case. \n### \ud83d\udd39 Default Fields in This Template: \nThe following fields are pre-configured: \n- **`post_id`** \u2192 The WordPress post ID (`{{ $json.id }}`) \n- **`title`** \u2192 The rendered title of the post (`{{ $json.title.rendered }}`) \n- **`post_link`** \u2192 The direct URL to the post (`{{ $json.link }}`) \n- **`edit_link`** \u2192 A direct link to edit the post in WordPress (**https://<your-domain>/wp-admin/post.php?post=`{{ $json.id }}`&action=edit**) \n- **`summary`** \u2192 The AI-generated summary from the OpenAI node (`{{ $('OpenAI').item.json.message.content }}`) \n- **`summary_date`** \u2192 The date and time when the AI Summary was generated and added to the post.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ud83d\udca1 **Customization Tip**: \n- You can **add additional fields** if you want to include more data (e.g., **post category, author name, publication date**). \n- This step ensures that the necessary information is properly structured before sending it to **Google Sheets** and **Slack**. \n"
  },
  "typeVersion": 1
}

================ Node #1244 ================
{
  "id": "5e68e256-d089-4a1d-8967-99215b076a5b",
  "name": "Set fields - Prepare data for Gsheets & Slack",
  "type": "n8n-nodes-base.set",
  "position": [
    8680,
    -820
  ],
  "parameters": {
    "options": {},
    "assignments": {
      "assignments": [
        {
          "id": "d7104604-20f0-4a43-a9bb-6fca50e0cd04",
          "name": "post_id",
          "type": "string",
          "value": "={{ $json.id }}"
        },
        {
          "id": "4fd77b52-80b4-418b-af50-2af563799772",
          "name": "title",
          "type": "string",
          "value": "={{ $json.title.rendered }}"
        },
        {
          "id": "a7c0f1d4-3299-4fdc-8bc2-2ff5a76547d3",
          "name": "post_link",
          "type": "string",
          "value": "={{ $json.link }}"
        },
        {
          "id": "3c0d7efd-5db9-4e3b-8688-7c00f9691391",
          "name": "edit_link",
          "type": "string",
          "value": "=https://<your-domain.com>/wp-admin/post.php?post={{ $json.id }}&action=edit"
        },
        {
          "id": "aef982ed-b470-4690-b585-74d765a4b49f",
          "name": "summary",
          "type": "string",
          "value": "={{ $('OpenAI').item.json.message.content }}"
        },
        {
          "id": "38933eca-dad8-4949-a22b-0e35c9e5c99e",
          "name": "summary_date",
          "type": "string",
          "value": "={{ $now }}"
        }
      ]
    }
  },
  "typeVersion": 3.4
}

================ Node #1245 ================
{
  "id": "7ca77ff2-9e21-4e32-8d23-de3a549b4a6d",
  "name": "Sticky Note9",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    9140,
    -1240
  ],
  "parameters": {
    "color": 7,
    "width": 600,
    "height": 1080,
    "content": "## Google Sheets - Add Row & Slack - Notify \n\nThis step **logs the post with an AI Summary** into **Google Sheets** and **sends a notification** to Slack. \n\nFor the Google Sheets node, you can **[make a copy of this Google Sheets template](https://docs.google.com/spreadsheets/d/1uO0zaNc5UrLhtdcvETFcZGln_qij-nqpYP06n9GxJUk/)** by going to **File \u2192 Make a copy**.\n\n\n---\n\n### \ud83d\udd39 Google Sheets - Add Row \n\nThis node **automatically maps the columns** in Google Sheets, meaning you **don't need to manually define each field**. \n\n#### \ud83d\udee0 **Configuration Details** \n- **Google Sheets Document** \u2192 `AI Summary WordPress` \n- **Sheet Name** \u2192 `AI Summarized Posts` \n- **Mapping Mode** \u2192 **Auto-map columns based on field names** \n- **Automatically added fields** (examples, based on your setup): \n - `post_id` \n - `summary` \n - `post_link` \n - `edit_link` \n - `summary_date` \n\n\ud83d\udca1 **Since columns are mapped automatically, ensure the column names in Google Sheets match the field names in n8n.** \n\n---\n\n### \ud83d\udd39 Slack - Notify \n\nThis node **sends a message to Slack** when a post has been updated with an **AI Summary**. \n\n#### \ud83d\udee0 **Configuration Details** \n- **Channel** \u2192 `wp-posts-ai` (you can choose another channel) \n- **Message Format** \u2192 Simple Text Message \n- **Notification Text** -> *Configured inside the node* (check the \"Message Text\" field)\n\n\n\ud83d\udca1 **Best Practices**: \n- \ud83d\udd15 *On the first execution, consider **deactivating** this node if you have many posts to avoid excessive notifications.* \n- \ud83d\udce2 *Consider **creating a dedicated Slack channel** for this workflow to keep AI summary updates separate from other discussions.* \n\n"
  },
  "typeVersion": 1
}

================ Node #1246 ================
{
  "id": "64199b71-a5b2-46f1-a761-22b053e95640",
  "name": "WordPress - Get Post2",
  "type": "n8n-nodes-base.wordpress",
  "position": [
    4160,
    -800
  ],
  "parameters": {
    "postId": "={{ $('Loop Over Items').item.json.id }}",
    "options": {
      "context": "edit"
    },
    "operation": "get"
  },
  "credentials": {
    "wordpressApi": {
      "id": "",
      "name": ""
    }
  },
  "typeVersion": 1
}

================ Node #1247 ================
{
  "id": "81f22a4b-b016-463c-a4e3-8468cab007a9",
  "name": "No Operation, do nothing",
  "type": "n8n-nodes-base.noOp",
  "position": [
    2900,
    -1480
  ],
  "parameters": {},
  "typeVersion": 1
}

================ Node #1248 ================
{
  "id": "ec397ed4-2ccb-4407-a227-46ad2383e618",
  "name": "Sticky Note10",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    -380,
    -1560
  ],
  "parameters": {
    "width": 660,
    "height": 1100,
    "content": "# \ud83d\udcdd AI-Generated Summary Block for WordPress Posts \n\n## \ud83d\ude80 What is this workflow? \nThis **n8n template** automates the process of adding an **AI-generated summary** at the top of your WordPress posts. \nIt **retrieves, processes, and updates** your posts dynamically, ensuring efficiency and flexibility without relying on a heavy WordPress plugin. \n\n## Example of AI Summary Section\n\n![Example of AI Summary Section](https://i.imgur.com/XkNKJsJ.png) \n\n## \ud83d\udd04 How It Works \n1. **Triggers** \u2192 Runs on a **scheduled interval** or via a **webhook** when a new post is published. \n2. **Retrieves posts** \u2192 Fetches content from WordPress and converts HTML to Markdown for AI processing. \n3. **AI Summary Generation** \u2192 Uses OpenAI to create a concise summary. \n4. **Post Update** \u2192 Inserts the summary at the top of the post while keeping the original excerpt intact. \n5. **Data Logging & Notifications** \u2192 Saves processed posts to **Google Sheets** and notifies a **Slack channel**. \n\n## \ud83c\udfaf Why use this workflow? \n\u2705 **No need for a WordPress plugin** \u2192 Keeps your site lightweight. \n\u2705 **Highly flexible** \u2192 Easily connect with **Google Sheets, Slack, or other services**. \n\u2705 **Customizable** \u2192 Adapt AI prompts, formatting, and integrations to your needs. \n\u2705 **Smart filtering** \u2192 Ensures posts are not reprocessed unnecessarily. \n\n\ud83d\udca1 *Check the detailed sticky notes for setup instructions and customization options!* \n"
  },
  "typeVersion": 1
}

================ Node #1249 ================
{
  "id": "9522e130-608c-4162-ac2e-3f67e216579e",
  "name": "WordPress - Get Last Posts",
  "type": "n8n-nodes-base.wordpress",
  "position": [
    960,
    -600
  ],
  "parameters": {
    "options": {
      "after": "={{ $json.last_execution_date }}",
      "context": "edit"
    },
    "operation": "getAll"
  },
  "credentials": {
    "wordpressApi": {
      "id": "",
      "name": ""
    }
  },
  "typeVersion": 1
}

================ Node #1250 ================
{
  "id": "03e20423-7b5d-43ff-a241-bffa9b4c5172",
  "name": "WordPress - Get Post1",
  "type": "n8n-nodes-base.wordpress",
  "position": [
    960,
    -360
  ],
  "parameters": {
    "postId": "={{ $json.post_id }}",
    "options": {
      "context": "edit"
    },
    "operation": "get"
  },
  "credentials": {
    "wordpressApi": {
      "id": "",
      "name": ""
    }
  },
  "typeVersion": 1
}

================ Node #1251 ================
{
  "id": "43963f56-ba75-4784-aebb-ebf72d075bfc",
  "name": "WordPress - Get All Posts",
  "type": "n8n-nodes-base.wordpress",
  "position": [
    1440,
    -780
  ],
  "parameters": {
    "options": {
      "order": "desc",
      "context": "edit",
      "orderBy": "date"
    },
    "operation": "getAll"
  },
  "credentials": {
    "wordpressApi": {
      "id": "",
      "name": ""
    }
  },
  "typeVersion": 1
}

================ Node #1252 ================
{
  "id": "a923cfb0-64fe-499a-8f0e-13fc848731df",
  "name": "When clicking \u2018Test workflow\u2019",
  "type": "n8n-nodes-base.manualTrigger",
  "position": [
    980,
    540
  ],
  "parameters": {},
  "typeVersion": 1
}

================ Node #1253 ================
{
  "id": "ea865c8e-5c73-4d37-97d1-0349a265b9a4",
  "name": "Sticky Note8",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    2880,
    -600
  ],
  "parameters": {
    "color": 5,
    "width": 675,
    "height": 107,
    "content": "# Microsoft Outlook AI Email Assistant"
  },
  "typeVersion": 1
}

================ Node #1254 ================
{
  "id": "c835042f-421b-44a0-8dc4-686ac638b358",
  "name": "Sticky Note10",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    1300,
    60
  ],
  "parameters": {
    "width": 612,
    "height": 401,
    "content": "## Outlook Business with filters\nFilters:\n```\nflag/flagStatus eq 'notFlagged' and not categories/any()\n```\n\nThese filters ensure we do not process flagged emails or email that already have a category set."
  },
  "typeVersion": 1
}

================ Node #1255 ================
{
  "id": "51ae8a4e-2d37-4118-a538-cd0fd4f427f7",
  "name": "Microsoft Outlook23",
  "type": "n8n-nodes-base.microsoftOutlook",
  "position": [
    1540,
    240
  ],
  "parameters": {
    "limit": 10,
    "fields": [
      "flag",
      "from",
      "importance",
      "replyTo",
      "sender",
      "subject",
      "toRecipients",
      "body",
      "categories",
      "isRead"
    ],
    "output": "fields",
    "options": {},
    "filtersUI": {
      "values": {
        "filters": {
          "custom": "flag/flagStatus eq 'notFlagged' and not categories/any()",
          "foldersToInclude": [
            "AAMkADYyNmQ0YWE1LWQxYjEtNDBhYS1hODI3LTg3MTkyNDAwMzE5NwAuAAAAAAA44w-ZZoU7QLO9GQAyv8UcAQAkfR2JHrRET4CmwDGznLN6AAAAAAEMAAA="
          ]
        }
      }
    },
    "operation": "getAll"
  },
  "credentials": {
    "microsoftOutlookOAuth2Api": {
      "id": "nv0cz3C6VZDzEgtR",
      "name": "Microsoft365 Email Account"
    }
  },
  "typeVersion": 2
}

================ Node #1256 ================
{
  "id": "a144adad-6fef-4f76-a06e-c889e8f16080",
  "name": "Sticky Note11",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    2020,
    60
  ],
  "parameters": {
    "color": 6,
    "width": 459,
    "height": 401,
    "content": "## Sanitise Email \nRemoves HTML and useless information in preparation for the AI Agent"
  },
  "typeVersion": 1
}

================ Node #1257 ================
{
  "id": "92ccac8f-9ce3-4f81-a499-e55835be3fc7",
  "name": "Sticky Note12",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    2020,
    580
  ],
  "parameters": {
    "color": 4,
    "width": 736,
    "height": 558,
    "content": "## Get Rules & Categories\nEdit the airtables to set your own categories, rules, contacts and/or delete rules. "
  },
  "typeVersion": 1
}

================ Node #1258 ================
{
  "id": "5b304e0f-002c-42c6-82a0-9ab1dc858861",
  "name": "OpenAI Chat Model",
  "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
  "position": [
    3860,
    460
  ],
  "parameters": {
    "model": "gpt-4o",
    "options": {
      "temperature": 0.2
    }
  },
  "credentials": {
    "openAiApi": {
      "id": "l2JgpErNc5namHVH",
      "name": "OpenAI account"
    }
  },
  "typeVersion": 1
}

================ Node #1259 ================
{
  "id": "210816e8-6a1f-4e63-a90e-d953e0e87ccd",
  "name": "Set Category",
  "type": "n8n-nodes-base.microsoftOutlook",
  "position": [
    4500,
    240
  ],
  "parameters": {
    "messageId": {
      "__rl": true,
      "mode": "id",
      "value": "={{ $json.output.id }}"
    },
    "operation": "update",
    "updateFields": {
      "categories": "={{ [$json.output.category] }}"
    }
  },
  "credentials": {
    "microsoftOutlookOAuth2Api": {
      "id": "nv0cz3C6VZDzEgtR",
      "name": "Microsoft365 Email Account"
    }
  },
  "typeVersion": 2
}

================ Node #1260 ================
{
  "id": "fe4f8e8f-6a5c-4b7b-b5f7-10f1f374397c",
  "name": "Structured Output Parser",
  "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
  "position": [
    4040,
    460
  ],
  "parameters": {
    "schemaType": "manual",
    "inputSchema": "{\n \"type\": \"object\",\n \"properties\": {\n \"id\": {\n \"type\": \"string\",\n \"description\": \"The email id\"\n },\n \"subject\": {\n \"type\": \"string\",\n \"description\": \"The email subject line\"\n },\n \"category\": {\n \"type\": \"string\",\n \"description\": \"Primary classification of the email\"\n },\n \"subCategory\": {\n \"type\": \"string\",\n \"description\": \"Optional sub-classification if applicable\"\n },\n \"analysis\": {\n \"type\": \"string\",\n \"description\": \"Reasoning behind the categorization\"\n }\n },\n \"required\": [\"id\",\"subject\", \"category\", \"analysis\"]\n}"
  },
  "typeVersion": 1.2
}

================ Node #1261 ================
{
  "id": "489028ca-f265-4ea2-b8dd-64dd6b06c8f6",
  "name": "If",
  "type": "n8n-nodes-base.if",
  "position": [
    4740,
    240
  ],
  "parameters": {
    "options": {},
    "conditions": {
      "options": {
        "version": 2,
        "leftValue": "",
        "caseSensitive": true,
        "typeValidation": "strict"
      },
      "combinator": "and",
      "conditions": [
        {
          "id": "6e4ecd0c-d151-4e5b-8d66-558f9f9ec3b0",
          "operator": {
            "name": "filter.operator.equals",
            "type": "string",
            "operation": "equals"
          },
          "leftValue": "={{ $('AI: Analyse Email').item.json.output.subCategory }}",
          "rightValue": "Action"
        }
      ]
    }
  },
  "typeVersion": 2.2
}

================ Node #1262 ================
{
  "id": "e2a27071-bac6-4a67-94fb-93e7ac218c89",
  "name": "Set Importance",
  "type": "n8n-nodes-base.microsoftOutlook",
  "position": [
    5000,
    220
  ],
  "parameters": {
    "messageId": {
      "__rl": true,
      "mode": "id",
      "value": "={{ $('AI: Analyse Email').item.json.output.id }}"
    },
    "operation": "update",
    "updateFields": {
      "importance": "High"
    }
  },
  "credentials": {
    "microsoftOutlookOAuth2Api": {
      "id": "nv0cz3C6VZDzEgtR",
      "name": "Microsoft365 Email Account"
    }
  },
  "typeVersion": 2
}

================ Node #1263 ================
{
  "id": "61cecccf-589f-4514-b126-cfbfc7d94981",
  "name": "AI: Analyse Email",
  "type": "@n8n/n8n-nodes-langchain.agent",
  "position": [
    3860,
    240
  ],
  "parameters": {
    "text": "=Categorise the following email:\n<email>\n{{ $('Loop Over Items').item.json.toJsonString() }}\n</email>\n\n<Contact>\n{{ $('Contact').all().toJsonString() }}\n</Contact>\n\n<DeleteRules>\n{{ $('Delete Rules').all().toJsonString() }}\n</DeleteRules>\n\n<Categories>\n{{ $('Categories').all().toJsonString() }}\n</Categories>\n\nEnsure your final output is valid JSON with no additional text or token in the following format:\n\n{\n \"subject\": \"SUBJECT_LINE\",1\n \"category\": \"CATEGORY\",\n \"subCategory\": \"SUBCATEGORY\", //use sparingly\n \"analysis\": \"ANALYSIS_REASONING\"\n}\n\nRemember you can only use ONE of the following category 'Name' values from the 'Categories' defined above. No other categories can be used. Use the subcategory for additional context, for example, if a client email requires action or if a supplier email requires action. Do not create any additional subcategories; you can only use ONE of the category 'Name' values from the 'Categories' defined above.",
    "options": {
      "systemMessage": "=Categories: \"\"\"{{ $('Categories').all().toJsonString() }}\"\"\"\n\nYou are an AI email assistant for the *insert role & title*. Your task is to categorize incoming emails using one of the category 'Name' values defined in 'Categories' above.\n\nYou may also use the subcategory:\n- Action\n\nInstructions:\nAnalyse the email subject, body, and sender's email address to determine the appropriate category by referring to the 'Usage', 'Sender Indicators' and 'Subject Indicators' defined in the 'Categories' above.\n\n\nOutput Format:\nProduce output in valid JSON format:\n{\n \"id\": \"{{ $('Loop Over Items').item.json.id }}\",\n \"subject\": \"SUBJECT_LINE\",\n \"category\": \"PRIMARY CATEGORY\",\n \"subCategory\": \"SUBCATEGORY\", // use sparingly\n \"analysis\": \"Brief 1-2 sentence explanation of category choice\"\n}\n- Replace \"SUBJECT_LINE\" with the actual subject of the email.\n- \"PRIMARY CATEGORY\" should be one of the categories listed above.\n- \"SUBCATEGORY\" should be \"Action\" if applicable; otherwise, omit or leave blank.\n- The \"analysis\" should be a brief 1-2 sentence explanation of why the category was chosen. Also, indicate if there was a match for the 'Contact' email and the email sender.\n\nImportant:\nYou may only use the categories and the subcategory listed above; do not create any additional categories or subcategories.\n\nNo additional text or tokens should be included outside the JSON output.\n"
    },
    "promptType": "define",
    "hasOutputParser": true
  },
  "typeVersion": 1.6
}

================ Node #1264 ================
{
  "id": "947eb4d7-9067-4144-819b-f53947ca77f8",
  "name": "Sticky Note",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    1420,
    -620
  ],
  "parameters": {
    "color": 6,
    "width": 760,
    "height": 400,
    "content": "## CRM Contact List Integration \nFor this workflow I am retrieving supplier & client contacts from Monday.com the email assistant has better context to categorise, prioritise and reply to emails.\nThe list is updated daily or you can change the scheduler trigger to update more or less frequently.\nYou could replace this with your own CRM."
  },
  "typeVersion": 1
}

================ Node #1265 ================
{
  "id": "79815a8f-5650-4ec9-97b3-c0201469d048",
  "name": "Sticky Note1",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    3640,
    60
  ],
  "parameters": {
    "width": 700,
    "height": 580,
    "content": "## Categorise & Prioritise Emails Agent \n"
  },
  "typeVersion": 1
}

================ Node #1266 ================
{
  "id": "2e9411a8-30da-4ee5-9597-cb08e34049a5",
  "name": "Sticky Note2",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    4400,
    120
  ],
  "parameters": {
    "color": 4,
    "width": 740,
    "height": 280,
    "content": "## Set the category & importance using the output from the agent\n"
  },
  "typeVersion": 1
}

================ Node #1267 ================
{
  "id": "138a734f-0ac5-4e50-a4af-b7255e11e862",
  "name": "Check Mail Schedule Trigger",
  "type": "n8n-nodes-base.scheduleTrigger",
  "disabled": true,
  "position": [
    980,
    260
  ],
  "parameters": {
    "rule": {
      "interval": [
        {
          "field": "minutes",
          "minutesInterval": 15
        }
      ]
    }
  },
  "typeVersion": 1.2
}

================ Node #1268 ================
{
  "id": "709795fd-68ff-4881-9f30-6270dea83f7c",
  "name": "Update Contacts Schedule Trigger",
  "type": "n8n-nodes-base.scheduleTrigger",
  "position": [
    1080,
    -420
  ],
  "parameters": {
    "rule": {
      "interval": [
        {}
      ]
    }
  },
  "typeVersion": 1.2
}

================ Node #1269 ================
{
  "id": "552803ce-3dae-415d-b14d-a7b990450482",
  "name": "Monday.com - Get Contacts",
  "type": "n8n-nodes-base.mondayCom",
  "position": [
    1520,
    -440
  ],
  "parameters": {
    "boardId": "1840712625",
    "groupId": "topics",
    "resource": "boardItem",
    "operation": "getAll",
    "returnAll": true
  },
  "credentials": {
    "mondayComApi": {
      "id": "wur9UFaP9YKCFZly",
      "name": "Monday.com - API User"
    }
  },
  "typeVersion": 1
}

================ Node #1270 ================
{
  "id": "cf41ebb0-f295-4f1a-a49c-05471a4d9220",
  "name": "Airtable - Contacts",
  "type": "n8n-nodes-base.airtable",
  "position": [
    1920,
    -440
  ],
  "parameters": {
    "base": {
      "__rl": true,
      "mode": "list",
      "value": "appNmgIGA4Fhculsn",
      "cachedResultUrl": "https://airtable.com/appNmgIGA4Fhculsn",
      "cachedResultName": "AI Email Assistant"
    },
    "table": {
      "__rl": true,
      "mode": "list",
      "value": "tbl8gTTEn96uFRDHE",
      "cachedResultUrl": "https://airtable.com/appNmgIGA4Fhculsn/tbl8gTTEn96uFRDHE",
      "cachedResultName": "Contacts"
    },
    "columns": {
      "value": {
        "Type": "={{ $json.column_values[1].text }}",
        "Email": "={{ $json.column_values[6].text }}",
        "Last Name": "={{ $json.name.split(\" \",2).last() }}",
        "First Name": "={{ $json.name.split(\" \",2).first() }}"
      },
      "schema": [
        {
          "id": "id",
          "type": "string",
          "display": true,
          "removed": false,
          "readOnly": true,
          "required": false,
          "displayName": "id",
          "defaultMatch": true
        },
        {
          "id": "Email",
          "type": "string",
          "display": true,
          "removed": false,
          "readOnly": false,
          "required": false,
          "displayName": "Email",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "First Name",
          "type": "string",
          "display": true,
          "removed": false,
          "readOnly": false,
          "required": false,
          "displayName": "First Name",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "Last Name",
          "type": "string",
          "display": true,
          "removed": false,
          "readOnly": false,
          "required": false,
          "displayName": "Last Name",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "Type",
          "type": "string",
          "display": true,
          "removed": false,
          "readOnly": false,
          "required": false,
          "displayName": "Type",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        }
      ],
      "mappingMode": "defineBelow",
      "matchingColumns": [
        "Email"
      ]
    },
    "options": {},
    "operation": "upsert"
  },
  "credentials": {
    "airtableTokenApi": {
      "id": "Bgr0Fi30Oek2jpXT",
      "name": "Airtable Personal Access Token account"
    }
  },
  "typeVersion": 2.1
}

================ Node #1271 ================
{
  "id": "6d698b4d-f18c-4e4a-9c83-8a39208aee8c",
  "name": "Convert to Markdown",
  "type": "n8n-nodes-base.markdown",
  "notes": "Converts the body of the email to markdown",
  "position": [
    2120,
    240
  ],
  "parameters": {
    "html": "={{ $json.body.content }}",
    "options": {}
  },
  "notesInFlow": true,
  "typeVersion": 1
}

================ Node #1272 ================
{
  "id": "012109cc-dcba-464b-b3bc-17201b1ad436",
  "name": "Email Messages",
  "type": "n8n-nodes-base.set",
  "notes": "Set email fields",
  "position": [
    2320,
    240
  ],
  "parameters": {
    "options": {},
    "assignments": {
      "assignments": [
        {
          "id": "edb304e1-3e9f-4a77-918c-25646addbc53",
          "name": "subject",
          "type": "string",
          "value": "={{ $json.subject }}"
        },
        {
          "id": "57a3ef3a-2701-40d9-882f-f43a7219f148",
          "name": "importance",
          "type": "string",
          "value": "={{ $json.importance }}"
        },
        {
          "id": "d8317f4f-aa0e-4196-89af-cb016765490a",
          "name": "sender",
          "type": "object",
          "value": "={{ $json.sender.emailAddress }}"
        },
        {
          "id": "908716c8-9ff7-4bdc-a1a3-64227559635e",
          "name": "from",
          "type": "object",
          "value": "={{ $json.from.emailAddress }}"
        },
        {
          "id": "ce007329-e221-4c5a-8130-2f8e9130160f",
          "name": "body",
          "type": "string",
          "value": "={{ $json.data\n .replace(/<[^>]*>/g, '') // Remove HTML tags\n .replace(/\\[(.*?)\\]\\((.*?)\\)/g, '') // Remove Markdown links like [text](link)\n .replace(/!\\[.*?\\]\\(.*?\\)/g, '') // Remove Markdown images like ![alt](image-link)\n .replace(/\\|/g, '') // Remove table separators \"|\"\n .replace(/-{3,}/g, '') // Remove horizontal rule \"---\"\n .replace(/\\n+/g, ' ') // Remove multiple newlines\n .replace(/([^\\w\\s.,!?@])/g, '') // Remove special characters except essential ones\n .replace(/\\s{2,}/g, ' ') // Replace multiple spaces with a single space\n .trim() // Trim leading/trailing whitespace\n}}\n"
        },
        {
          "id": "6abfcc56-7b0a-469e-82fc-ce294ed5162b",
          "name": "id",
          "type": "string",
          "value": "={{ $json.id }}"
        }
      ]
    }
  },
  "typeVersion": 3.4
}

================ Node #1273 ================
{
  "id": "6d3933f3-3f2e-4268-8979-d6c93c961916",
  "name": "Rules",
  "type": "n8n-nodes-base.airtable",
  "position": [
    2400,
    720
  ],
  "parameters": {
    "base": {
      "__rl": true,
      "mode": "list",
      "value": "appNmgIGA4Fhculsn",
      "cachedResultUrl": "https://airtable.com/appNmgIGA4Fhculsn",
      "cachedResultName": "AI Email Assistant"
    },
    "table": {
      "__rl": true,
      "mode": "list",
      "value": "tblMSXbMFKETNToxV",
      "cachedResultUrl": "https://airtable.com/appNmgIGA4Fhculsn/tblMSXbMFKETNToxV",
      "cachedResultName": "Rules"
    },
    "options": {},
    "operation": "search"
  },
  "credentials": {
    "airtableTokenApi": {
      "id": "Bgr0Fi30Oek2jpXT",
      "name": "Airtable Personal Access Token account"
    }
  },
  "executeOnce": true,
  "typeVersion": 2.1
}

================ Node #1274 ================
{
  "id": "9166d63f-0c16-490f-afb8-e30ef25c49da",
  "name": "Categories",
  "type": "n8n-nodes-base.airtable",
  "position": [
    2300,
    860
  ],
  "parameters": {
    "base": {
      "__rl": true,
      "mode": "list",
      "value": "appNmgIGA4Fhculsn",
      "cachedResultUrl": "https://airtable.com/appNmgIGA4Fhculsn",
      "cachedResultName": "AI Email Assistant"
    },
    "table": {
      "__rl": true,
      "mode": "list",
      "value": "tbliKDp5PoFNF7YI7",
      "cachedResultUrl": "https://airtable.com/appNmgIGA4Fhculsn/tbliKDp5PoFNF7YI7",
      "cachedResultName": "Categories"
    },
    "options": {},
    "operation": "search"
  },
  "credentials": {
    "airtableTokenApi": {
      "id": "Bgr0Fi30Oek2jpXT",
      "name": "Airtable Personal Access Token account"
    }
  },
  "executeOnce": true,
  "typeVersion": 2.1
}

================ Node #1275 ================
{
  "id": "f48e5a29-0eee-4420-80d9-2b9b016fba0d",
  "name": "Delete Rules",
  "type": "n8n-nodes-base.airtable",
  "position": [
    2140,
    960
  ],
  "parameters": {
    "base": {
      "__rl": true,
      "mode": "list",
      "value": "appNmgIGA4Fhculsn",
      "cachedResultUrl": "https://airtable.com/appNmgIGA4Fhculsn",
      "cachedResultName": "AI Email Assistant"
    },
    "table": {
      "__rl": true,
      "mode": "list",
      "value": "tbl84EJr7y65ed4zh",
      "cachedResultUrl": "https://airtable.com/appNmgIGA4Fhculsn/tbl84EJr7y65ed4zh",
      "cachedResultName": "Delete Rules"
    },
    "options": {},
    "operation": "search"
  },
  "credentials": {
    "airtableTokenApi": {
      "id": "Bgr0Fi30Oek2jpXT",
      "name": "Airtable Personal Access Token account"
    }
  },
  "executeOnce": true,
  "typeVersion": 2.1
}

================ Node #1276 ================
{
  "id": "d6ad6091-2c7e-41b9-a9b3-b8715208cec0",
  "name": "Contact",
  "type": "n8n-nodes-base.airtable",
  "position": [
    3080,
    240
  ],
  "parameters": {
    "base": {
      "__rl": true,
      "mode": "list",
      "value": "appNmgIGA4Fhculsn",
      "cachedResultUrl": "https://airtable.com/appNmgIGA4Fhculsn",
      "cachedResultName": "AI Email Assistant"
    },
    "table": {
      "__rl": true,
      "mode": "list",
      "value": "tbl8gTTEn96uFRDHE",
      "cachedResultUrl": "https://airtable.com/appNmgIGA4Fhculsn/tbl8gTTEn96uFRDHE",
      "cachedResultName": "Contacts"
    },
    "options": {},
    "operation": "search",
    "filterByFormula": "={Email}='{{ $('Loop Over Items').item.json.from.address }}'"
  },
  "credentials": {
    "airtableTokenApi": {
      "id": "Bgr0Fi30Oek2jpXT",
      "name": "Airtable Personal Access Token account"
    }
  },
  "executeOnce": false,
  "typeVersion": 2.1,
  "alwaysOutputData": true
}

================ Node #1277 ================
{
  "id": "bc1ede01-fa21-4446-a4e1-1a725a3a4887",
  "name": "Loop Over Items",
  "type": "n8n-nodes-base.splitInBatches",
  "position": [
    2720,
    260
  ],
  "parameters": {
    "options": {}
  },
  "typeVersion": 3
}

================ Node #1278 ================
{
  "id": "fcdd837d-8852-4dcf-924c-aba4f2cddeba",
  "name": "Merge",
  "type": "n8n-nodes-base.merge",
  "position": [
    3420,
    220
  ],
  "parameters": {
    "mode": "chooseBranch",
    "numberInputs": 4
  },
  "typeVersion": 3
}

================ Node #1279 ================
{
  "id": "f790dd9b-19bb-4649-975e-00a511f2dd9f",
  "name": "Sticky Note3",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    3020,
    60
  ],
  "parameters": {
    "color": 4,
    "height": 400,
    "content": "## Match Contact\nCheck if the sender is an existing contact. Note in this workflow the contacts are dynamically loaded from Monday.com"
  },
  "typeVersion": 1
}

================ Node #1280 ================
{
  "id": "90ac8845-342e-4fdb-ae09-cb9d169b4119",
  "name": "When clicking \u2018Test workflow\u2019",
  "type": "n8n-nodes-base.manualTrigger",
  "position": [
    160,
    460
  ],
  "parameters": {},
  "typeVersion": 1
}

================ Node #1281 ================
{
  "id": "7a2bfc41-1527-448d-a52c-794ca4c9e7ee",
  "name": "ScrapingBee- Get page HTML",
  "type": "n8n-nodes-base.httpRequest",
  "position": [
    2280,
    1360
  ],
  "parameters": {
    "url": "https://app.scrapingbee.com/api/v1",
    "options": {},
    "sendQuery": true,
    "queryParameters": {
      "parameters": [
        {
          "name": "api_key",
          "value": "<your_scrapingbee_apikey>"
        },
        {
          "name": "url",
          "value": "={{$json.url}}"
        }
      ]
    }
  },
  "typeVersion": 4.2
}

================ Node #1282 ================
{
  "id": "a0ab6dcb-ffad-40bf-8a22-f2e152e69b00",
  "name": "Structured Output Parser",
  "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
  "position": [
    2480,
    880
  ],
  "parameters": {
    "jsonSchemaExample": "[{\n \"product_title\":\"The title of the product\",\n \"product_price\":\"The price of the product\",\n \"product_brand\": \"The brand of the product\",\n \"promo\":\"true or false\",\n \"promo_percentage\":\"NUM %\"\n}]"
  },
  "typeVersion": 1.2
}

================ Node #1283 ================
{
  "id": "34f50603-a969-425d-8a1a-ec8031a5cdfd",
  "name": "Google Gemini Chat Model",
  "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
  "position": [
    1800,
    900
  ],
  "parameters": {
    "options": {},
    "modelName": "models/gemini-1.5-pro-latest"
  },
  "credentials": {
    "googlePalmApi": {
      "id": "",
      "name": "Google Gemini(PaLM) Api account"
    }
  },
  "typeVersion": 1
}

================ Node #1284 ================
{
  "id": "2054612e-f3e1-4633-9c1a-0644ae07613c",
  "name": "Split Out",
  "type": "n8n-nodes-base.splitOut",
  "position": [
    2880,
    460
  ],
  "parameters": {
    "options": {},
    "fieldToSplitOut": "output"
  },
  "typeVersion": 1
}

================ Node #1285 ================
{
  "id": "1a59a962-f483-4a27-8686-607a7d375584",
  "name": "Google Sheets - Get list of URLs",
  "type": "n8n-nodes-base.googleSheets",
  "position": [
    620,
    460
  ],
  "parameters": {
    "options": {},
    "sheetName": {
      "__rl": true,
      "mode": "list",
      "value": "gid=0",
      "cachedResultUrl": "",
      "cachedResultName": "List of URLs"
    },
    "documentId": {
      "__rl": true,
      "mode": "list",
      "value": "",
      "cachedResultUrl": "",
      "cachedResultName": "Google Sheets - Workflow Vision-Based Scraping"
    },
    "authentication": "serviceAccount"
  },
  "credentials": {
    "googleApi": {
      "id": "",
      "name": "Google Sheets account"
    }
  },
  "typeVersion": 4.5
}

================ Node #1286 ================
{
  "id": "e33defac-e5c4-4bf5-ae31-98cf6f1d2579",
  "name": "Sticky Note",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    76.45348837209309,
    -6.191860465116179
  ],
  "parameters": {
    "color": 7,
    "width": 364.53488372093034,
    "height": 652.6453488372096,
    "content": "## Trigger\nThe default trigger is **When clicking \u2018Test workflow\u2019**, meaning the workflow will **need to be triggered manually**. \n\nYou can replace this by selecting a **trigger of your choice**.\n"
  },
  "typeVersion": 1
}

================ Node #1287 ================
{
  "id": "9f56e57e-8505-4a7a-a531-f7df87a6ea9c",
  "name": "Sticky Note1",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    480,
    -12.906976744186068
  ],
  "parameters": {
    "color": 7,
    "width": 364.53488372093034,
    "height": 664.2441860465121,
    "content": "## Google Sheets - List of URLs\n\nThe Google Sheet will contain two sheets: \n- **List of URLs to** scrape \n- **Results** page, populated with the scraping results and AI-extracted data.\n\nHere is an **[example Google Sheet](https://docs.google.com/spreadsheets/d/10Gc7ooUeTBbOOE6bgdNe5vSKRkkcAamonsFSjFevkOE/)** you can use. The \"Results\" sheet is pre-configured for e-commerce website scraping. You can adapt it to your specific needs, but remember to adjust the `Structured Output Parser` node accordingly.\n"
  },
  "typeVersion": 1
}

================ Node #1288 ================
{
  "id": "e4497a81-6849-4c79-af45-40e518837e2e",
  "name": "Sticky Note2",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    880,
    -15.959302325581348
  ],
  "parameters": {
    "color": 7,
    "width": 364.53488372093034,
    "height": 667.2965116279074,
    "content": "## Set Fields\n\nThis node allows you to **define the fields** that will be sent to the **ScrapingBee HTTP Node** and the AI Agent. \n\nIn this template, **only one field** is pre-configured: **url**. You can customize it by adding additional fields as needed.\n"
  },
  "typeVersion": 1
}

================ Node #1289 ================
{
  "id": "82dcdc23-3d71-4281-a3d0-fdbc27327dd0",
  "name": "Set fields",
  "type": "n8n-nodes-base.set",
  "position": [
    1040,
    460
  ],
  "parameters": {
    "options": {},
    "assignments": {
      "assignments": [
        {
          "id": "c53c5ed2-9c7b-4365-9953-790264c722ab",
          "name": "url",
          "type": "string",
          "value": "={{ $json.url }}"
        }
      ]
    }
  },
  "typeVersion": 3.4
}

================ Node #1290 ================
{
  "id": "ad06f56f-4a02-49d6-9fda-94cdcfadec3b",
  "name": "Sticky Note3",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    1280,
    -20.537790697674154
  ],
  "parameters": {
    "color": 7,
    "width": 364.53488372093034,
    "height": 671.8750000000002,
    "content": "## ScrapingBee - Get Page Screenshot\n\nThis node uses ScrapingBee, a powerful scraping tool, to capture a screenshot of the desired URL. \nYou can [try ScrapingBee](https://www.scrapingbee.com/) and enjoy 1,000 free requests (non-affiliate link). \n\nEnsure the `screenshot_full_page` parameter is set to *`true`* for a full-page screenshot. This is crucial for vision-based scraping with the AI Agent. \n\nAlternatively, you can **choose to screenshot only a specific part of the page**. However, keep in mind that the **AI Agent will extract data only from the visible section\u2014it has vision**, but not a crystal ball \ud83d\udd2e!\n"
  },
  "typeVersion": 1
}

================ Node #1291 ================
{
  "id": "01cbc1eb-2910-49b1-89e6-d32d340e5273",
  "name": "ScrapingBee - Get page screenshot",
  "type": "n8n-nodes-base.httpRequest",
  "position": [
    1440,
    460
  ],
  "parameters": {
    "url": "https://app.scrapingbee.com/api/v1",
    "options": {},
    "sendQuery": true,
    "sendHeaders": true,
    "queryParameters": {
      "parameters": [
        {
          "name": "api_key",
          "value": "<your_scrapingbee_apikey>"
        },
        {
          "name": "url",
          "value": "={{ $json.url }}"
        },
        {
          "name": "screenshot_full_page",
          "value": "true"
        }
      ]
    },
    "headerParameters": {
      "parameters": [
        {
          "name": "User-Agent",
          "value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.36"
        }
      ]
    }
  },
  "typeVersion": 4.2
}

================ Node #1292 ================
{
  "id": "3e61d7cb-c2af-4275-b075-3dc14ed320b7",
  "name": "Sticky Note4",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    1680,
    -26.831395348837077
  ],
  "parameters": {
    "color": 7,
    "width": 1000.334302325581,
    "height": 679.5058139534889,
    "content": "## Vision-Based Scraping AI Agent\n\nThis is the central node of the workflow, powered by an AI Agent with two key prompts:\n\n- **System Prompt**: Instructs the AI on how and what data to extract from the screenshot. You can customize this to suit your needs. It also includes fallback instructions to call a tool for retrieving the HTML page if data extraction from the screenshot fails. \n- **User Message**: Provides the page URL for context.\n\n### Sub-Nodes\n\n1. **Google Gemini Chat Model** \n Chosen because tests show that **Gemini-1.5-Pro** outperforms GPT-4 and GPT-4-Vision in visual tasks. *Either my prompt wasn\u2019t optimized for GPT models, or GPT might need glasses \ud83d\udc53*. \n**Other multimodal LLMs haven\u2019t been tested yet**.\n\n2. **HTML-Based Scraping Tool** \n A **fallback tool** the agent **uses if it cannot extract data directly from the screenshot**.\n\n3. **Structured Output Parser** \n Formats the **extracted data into an easy-to-use structure**, ready to be added to the **results page in Google Sheets**."
  },
  "typeVersion": 1
}

================ Node #1293 ================
{
  "id": "9fe8ee54-755a-44f2-a2bf-a695e3754b3d",
  "name": "HTML-based Scraping Tool",
  "type": "@n8n/n8n-nodes-langchain.toolWorkflow",
  "position": [
    2160,
    900
  ],
  "parameters": {
    "name": "HTMLScrapingTool",
    "workflowId": {
      "__rl": true,
      "mode": "list",
      "value": "PpFVCrTiYoa35q1m",
      "cachedResultName": "vb-scraping"
    },
    "description": "=Call this tool ONLY when you need to retrieve the HTML content of a webpage.",
    "responsePropertyName": "data"
  },
  "typeVersion": 1.2
}

================ Node #1294 ================
{
  "id": "12c4fd7e-b662-488a-b779-792cff5464e4",
  "name": "Sticky Note5",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    1680,
    720
  ],
  "parameters": {
    "color": 6,
    "width": 305.625,
    "height": 337.03488372093034,
    "content": "### Google Gemini Chat Model\n\nThe **default model is gemini-1.5-pro**. It offers excellent performance for this use case, but **it\u2019s not the most cost-effective option\u2014use it judiciously**.\n\n"
  },
  "typeVersion": 1
}

================ Node #1295 ================
{
  "id": "86cf37d9-a4c1-42f4-a98e-ef2ca4410efd",
  "name": "Sticky Note6",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    2020,
    720
  ],
  "parameters": {
    "color": 6,
    "width": 305.625,
    "height": 337.03488372093034,
    "content": "### HTML-Based Scraping Tool\n\nThis tool is **invoked when the AI Agent requires the HTML** (*converted to Markdown*) to extract data because the **screenshot alone wasn\u2019t sufficient**.\n"
  },
  "typeVersion": 1
}

================ Node #1296 ================
{
  "id": "a3dc3c83-ed18-4a58-bc36-440efe9462a2",
  "name": "Sticky Note7",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    2360,
    720
  ],
  "parameters": {
    "color": 6,
    "width": 305.625,
    "height": 337.03488372093034,
    "content": "### Structured Output Parser\n\nThis node **organizes the extracted data into an easy-to-use JSON format**. \n\nIn this template, the JSON is **designed for an e-commerce webpage**. Customize it to fit your specific needs.\n"
  },
  "typeVersion": 1
}

================ Node #1297 ================
{
  "id": "939f0f2d-19c8-4447-9b25-accfcd5f6a16",
  "name": "Sticky Note8",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    2740,
    -20
  ],
  "parameters": {
    "color": 7,
    "width": 364.53488372093034,
    "height": 671.8750000000002,
    "content": "## Split Out\n\nThis node **splits the array** created by the `Structured Output Parser` into **individual rows**, making them easy to append to the **subsequent Google Sheets node**.\n"
  },
  "typeVersion": 1
}

================ Node #1298 ================
{
  "id": "71404369-d2f6-4ca5-ae87-47a51fabfa4a",
  "name": "Sticky Note9",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    3200,
    -20
  ],
  "parameters": {
    "color": 7,
    "width": 364.53488372093034,
    "height": 671.8750000000002,
    "content": "## Google Sheets - Create Rows\n\nThis node **creates rows** in the **Results** sheet using the extracted data. \n\nYou can use the **[example Google Sheet](https://docs.google.com/spreadsheets/d/10Gc7ooUeTBbOOE6bgdNe5vSKRkkcAamonsFSjFevkOE/)** as a template. However, ensure that the **columns in the Results sheet are aligned with the structure of the output** from the `Structured Output Parser node`.\n"
  },
  "typeVersion": 1
}

================ Node #1299 ================
{
  "id": "226520d1-2edb-4ade-9940-0bae461eb161",
  "name": "Google Sheets - Create Rows",
  "type": "n8n-nodes-base.googleSheets",
  "position": [
    3340,
    460
  ],
  "parameters": {
    "columns": {
      "value": {
        "promo": "={{ $json.promo }}",
        "category": "={{ $('Set fields').item.json.url }}",
        "product_url": "={{ $json.product_title }}",
        "product_brand": "={{ $json.product_brand }}",
        "product_price": "={{ $json.product_price }}",
        "promo_percent": "={{ $json.promo_percentage }}"
      },
      "schema": [
        {
          "id": "category",
          "type": "string",
          "display": true,
          "required": false,
          "displayName": "category",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "product_url",
          "type": "string",
          "display": true,
          "required": false,
          "displayName": "product_url",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "product_price",
          "type": "string",
          "display": true,
          "required": false,
          "displayName": "product_price",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "product_brand",
          "type": "string",
          "display": true,
          "required": false,
          "displayName": "product_brand",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "promo",
          "type": "string",
          "display": true,
          "required": false,
          "displayName": "promo",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "promo_percent",
          "type": "string",
          "display": true,
          "required": false,
          "displayName": "promo_percent",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        }
      ],
      "mappingMode": "defineBelow",
      "matchingColumns": []
    },
    "options": {},
    "operation": "append",
    "sheetName": {
      "__rl": true,
      "mode": "list",
      "value": 648398171,
      "cachedResultUrl": "",
      "cachedResultName": "Results"
    },
    "documentId": {
      "__rl": true,
      "mode": "list",
      "value": "1g81_39MJUlwnInX30ZuBtHUb-Y80WrYyF5lccaRtcu0",
      "cachedResultUrl": "",
      "cachedResultName": "Google Sheets - Workflow Vision-Based Scraping"
    },
    "authentication": "serviceAccount"
  },
  "credentials": {
    "googleApi": {
      "id": "",
      "name": "Google Sheets account"
    }
  },
  "typeVersion": 4.5
}

================ Node #1300 ================
{
  "id": "2c142537-d8fe-4fc1-9758-6a3538c43fc0",
  "name": "Vision-based Scraping Agent",
  "type": "@n8n/n8n-nodes-langchain.agent",
  "position": [
    2040,
    460
  ],
  "parameters": {
    "text": "=Here is the screenshot you need to use to extract data about the page:\n\n{{ $json.url }}",
    "options": {
      "systemMessage": "=Extract the following details from the input screenshot:\n\n- Product Titles\n- Product Prices\n- Brands\n- Promotional Information (e.g., if the product is on promo)\n\nStep 1: Image-Based Extraction\nAnalyze the provided screenshot to identify and extract all the required details: product titles, prices, brands, and promotional information.\nEnsure the extraction is thorough and validate the completeness of the information.\nCross-check all products for missing or unclear details.\nHighlight any limitations (e.g., text is unclear, partially cropped, or missing) in the extraction process.\n\nStep 2: HTML-Based Extraction (If Needed)\nIf you determine that any required information is:\n\nIncomplete or missing (e.g., not all titles, prices, or brands could be retrieved).\nAmbiguous or uncertain (e.g., unclear text or potential errors in OCR).\nUnavailable due to the limitations of image processing (e.g., product links).\n\nThen:\n\nCall the HTML-based tool with the input URL to access the page content.\nExtract the required details from the HTML to supplement or replace the image-based results.\nCombine data from both sources (if applicable) to ensure the final result is comprehensive and accurate.\n\nAdditional Notes\nAvoid redundant HTML tool usage\u2014confirm deficiencies in image-based extraction before proceeding.\nFor products on promotion, explicitly label this status in the output.\nReport extraction errors or potential ambiguities (e.g., text illegibility).\n\nIn your output, include all these fields as shown in the example below. If there is no promotion, set \"promo\" to false and \"promo_percent\" to 0.\n\njson\nCopy code\n[{\n \"product_title\": \"The title of the product\",\n \"product_price\": \"The price of the product\",\n \"product_brand\": \"The brand of the product\",\n \"promo\": true,\n \"promo_percent\": 25\n}]",
      "passthroughBinaryImages": true
    },
    "promptType": "define",
    "hasOutputParser": true
  },
  "typeVersion": 1.7
}

================ Node #1301 ================
{
  "id": "f4acf278-edec-4bb4-a7cb-1e3c32a6ef4a",
  "name": "Sticky Note10",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    1360,
    1160
  ],
  "parameters": {
    "color": 7,
    "width": 364.53488372093034,
    "height": 357.10392441860495,
    "content": "## HTML-Scraping Tool Trigger\n\nThis **node serves as the entry point for the HTML scraping tool. \n\nIt is triggered by the **AI Agent only when it fails to extract data** from the screenshot. The **URL** is sent as a **parameter for the query**."
  },
  "typeVersion": 1
}

================ Node #1302 ================
{
  "id": "79f7b4db-57f1-4004-88b3-51cfcfe9884e",
  "name": "HTML-Scraping Tool",
  "type": "n8n-nodes-base.executeWorkflowTrigger",
  "position": [
    1480,
    1360
  ],
  "parameters": {},
  "typeVersion": 1
}

================ Node #1303 ================
{
  "id": "94aa7169-30b5-49dd-864a-be2eabbf85d3",
  "name": "Sticky Note11",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    1760,
    1160
  ],
  "parameters": {
    "color": 7,
    "width": 364.53488372093034,
    "height": 357.10392441860495,
    "content": "## Set Fields - From AI Agent Query\n\nThis node sets the fields from the AI Agent\u2019s query. \n\nIn this template, the only field configured is **url**.\n"
  },
  "typeVersion": 1
}

================ Node #1304 ================
{
  "id": "f2615921-d060-410b-aef4-cd484edb2897",
  "name": "Set fields - from AI agent query",
  "type": "n8n-nodes-base.set",
  "position": [
    1880,
    1360
  ],
  "parameters": {
    "options": {},
    "assignments": {
      "assignments": [
        {
          "id": "c53c5ed2-9c7b-4365-9953-790264c722ab",
          "name": "url",
          "type": "string",
          "value": "={{ $json.query }}"
        }
      ]
    }
  },
  "typeVersion": 3.4
}

================ Node #1305 ================
{
  "id": "807e263a-97ce-4369-9ad0-8f973fc8dcc9",
  "name": "Sticky Note12",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    2180,
    1160
  ],
  "parameters": {
    "color": 7,
    "width": 364.53488372093034,
    "height": 357.10392441860495,
    "content": "## ScrapingBee - Get Page HTML\n\nThis node utilizes the ScrapingBee API to **retrieve the HTML of the webpage**.\n"
  },
  "typeVersion": 1
}

================ Node #1306 ================
{
  "id": "1cd32b9d-b07e-4dbb-9418-a99019c9deae",
  "name": "Sticky Note13",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    2600,
    1160
  ],
  "parameters": {
    "color": 7,
    "width": 364.53488372093034,
    "height": 357.10392441860495,
    "content": "## HTML to Markdown\n\nThis node **converts the HTML from the previous node** into Markdown format, **helping to save tokens**. \n\nThe converted **Markdown is then automatically sent to the AI Agent** through this node.\n"
  },
  "typeVersion": 1
}

================ Node #1307 ================
{
  "id": "3b9096d1-ab5a-48a8-90ee-465483881d95",
  "name": "HTML to Markdown",
  "type": "n8n-nodes-base.markdown",
  "position": [
    2740,
    1360
  ],
  "parameters": {
    "html": "={{ $json.data }}",
    "options": {}
  },
  "typeVersion": 1
}

================ Node #1308 ================
{
  "id": "966ad92a-ddda-4fb9-86ac-9c62f47dfc37",
  "name": "Sticky Note14",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    -880.9927663601949,
    0
  ],
  "parameters": {
    "width": 829.9937466197946,
    "height": 646.0101744186061,
    "content": "# \u2728 Vision-Based AI Agent Scraper - with Google Sheets, ScrapingBee, and Gemini\n\n## Important notes :\n### Check legal regulations: \nThis workflow involves scraping, so make sure to check the legal regulations around scraping in your country before getting started. Better safe than sorry!\n\n## Workflow description\nThis workflow leverages a **vision-based AI Agent**, integrated with Google Sheets, ScrapingBee, and the Gemini-1.5-Pro model, to **extract structured data from webpages**. The AI Agent primarily **uses screenshots for data extraction** but switches to HTML scraping when necessary, ensuring high accuracy. \n\nKey features include: \n- **Google Sheets Integration**: Manage URLs to scrape and store structured results. \n- **ScrapingBee**: Capture full-page screenshots and retrieve HTML data for fallback extraction. \n- **AI-Powered Data Parsing**: Use Gemini-1.5-Pro for vision-based scraping and a Structured Output Parser to format extracted data into JSON. \n- **Token Efficiency**: HTML is converted to Markdown to optimize processing costs.\n\nThis template is designed for e-commerce scraping but can be customized for various use cases. \n"
  },
  "typeVersion": 1
}

================ Node #1309 ================
{
  "id": "c70236ea-91ab-4e47-b6f6-63a70ede5d3c",
  "name": "Google Calendar",
  "type": "n8n-nodes-base.googleCalendarTool",
  "position": [
    1000,
    680
  ],
  "parameters": {
    "options": {
      "fields": "=items(summary, start(dateTime))",
      "timeMin": "={{$fromAI(\"date\",\"the date after which to fetch the messages in format YYYY-MM-DDTHH:MM:SS\")}}"
    },
    "calendar": {
      "__rl": true,
      "mode": "list",
      "value": "derekcheungsa@gmail.com",
      "cachedResultName": "derekcheungsa@gmail.com"
    },
    "operation": "getAll"
  },
  "credentials": {
    "googleCalendarOAuth2Api": {
      "id": "qx8JdPX4I5Xk9c46",
      "name": "Google Calendar account"
    }
  },
  "typeVersion": 1.1
}

================ Node #1310 ================
{
  "id": "d2287bea-de47-4180-8ee6-55d4ab1a89da",
  "name": "Window Buffer Memory",
  "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
  "position": [
    760,
    680
  ],
  "parameters": {
    "sessionKey": "={{ $('Listen for incoming events').first().json.message.from.id }}",
    "sessionIdType": "customKey"
  },
  "typeVersion": 1.2
}

================ Node #1311 ================
{
  "id": "fa955731-86f6-4e4d-8604-dab5f52dee87",
  "name": "Get Email",
  "type": "n8n-nodes-base.gmailTool",
  "position": [
    880,
    680
  ],
  "parameters": {
    "filters": {
      "labelIds": [
        "INBOX",
        "UNREAD"
      ],
      "readStatus": "unread",
      "receivedAfter": "={{$fromAI(\"date\",\"the date after which to fetch the messages in format YYYY-MM-DDTHH:MM:SS\")}}"
    },
    "operation": "getAll"
  },
  "credentials": {
    "gmailOAuth2": {
      "id": "tojOpzEqFprdxS46",
      "name": "Gmail account"
    }
  },
  "typeVersion": 2.1
}

================ Node #1312 ================
{
  "id": "46511f47-1687-4cbe-ae41-ceb205ed1f11",
  "name": "OpenAI Chat Model",
  "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
  "position": [
    640,
    680
  ],
  "parameters": {
    "model": "gpt-4o-mini",
    "options": {}
  },
  "credentials": {
    "openAiApi": {
      "id": "5oYe8Cxj7liOPAKk",
      "name": "Derek T"
    }
  },
  "typeVersion": 1
}

================ Node #1313 ================
{
  "id": "64fe44db-af19-43eb-9ff1-de0a72a9e645",
  "name": "Listen for incoming events",
  "type": "n8n-nodes-base.telegramTrigger",
  "position": [
    -160,
    360
  ],
  "webhookId": "322dce18-f93e-4f86-b9b1-3305519b7834",
  "parameters": {
    "updates": [
      "message"
    ],
    "additionalFields": {}
  },
  "credentials": {
    "telegramApi": {
      "id": "Ov00cT0t4h4AFtZ0",
      "name": "Telegram account"
    }
  },
  "typeVersion": 1
}

================ Node #1314 ================
{
  "id": "e35c04ff-a050-4564-8c1b-5b22b556872f",
  "name": "Telegram",
  "type": "n8n-nodes-base.telegram",
  "onError": "continueErrorOutput",
  "position": [
    1280,
    360
  ],
  "parameters": {
    "text": "={{ $json.output }}",
    "chatId": "={{ $('Listen for incoming events').first().json.message.from.id }}",
    "additionalFields": {
      "parse_mode": "Markdown",
      "appendAttribution": false
    }
  },
  "credentials": {
    "telegramApi": {
      "id": "Ov00cT0t4h4AFtZ0",
      "name": "Telegram account"
    }
  },
  "typeVersion": 1.1
}

================ Node #1315 ================
{
  "id": "e791d4f8-2c19-4c14-a71e-39a04f22e944",
  "name": "If",
  "type": "n8n-nodes-base.if",
  "position": [
    200,
    360
  ],
  "parameters": {
    "options": {},
    "conditions": {
      "options": {
        "version": 2,
        "leftValue": "",
        "caseSensitive": true,
        "typeValidation": "strict"
      },
      "combinator": "and",
      "conditions": [
        {
          "id": "a0bf9719-4272-46f6-ab3b-eda6f7b44fd8",
          "operator": {
            "type": "string",
            "operation": "empty",
            "singleValue": true
          },
          "leftValue": "={{ $json.message.text }}",
          "rightValue": ""
        }
      ]
    }
  },
  "typeVersion": 2.2
}

================ Node #1316 ================
{
  "id": "5bd1788a-3d08-4eb3-8e03-3ce82f44d2a7",
  "name": "Speech to Text",
  "type": "@n8n/n8n-nodes-langchain.openAi",
  "position": [
    620,
    360
  ],
  "parameters": {
    "options": {},
    "resource": "audio",
    "operation": "transcribe"
  },
  "credentials": {
    "openAiApi": {
      "id": "5oYe8Cxj7liOPAKk",
      "name": "Derek T"
    }
  },
  "typeVersion": 1.3
}

================ Node #1317 ================
{
  "id": "b67a2a93-517b-469e-aaa4-32c422710743",
  "name": "Voice or Text",
  "type": "n8n-nodes-base.set",
  "position": [
    40,
    360
  ],
  "parameters": {
    "fields": {
      "values": [
        {
          "name": "text",
          "stringValue": "={{ $json?.message?.text || \"\" }}"
        }
      ]
    },
    "options": {}
  },
  "typeVersion": 3.2
}

================ Node #1318 ================
{
  "id": "8105c39f-9e87-44c4-9215-b3777f0b4164",
  "name": "Get Voice File",
  "type": "n8n-nodes-base.telegram",
  "position": [
    380,
    360
  ],
  "parameters": {
    "fileId": "={{ $('Listen for incoming events').item.json.message.voice.file_id }}",
    "resource": "file"
  },
  "credentials": {
    "telegramApi": {
      "id": "Ov00cT0t4h4AFtZ0",
      "name": "Telegram account"
    }
  },
  "typeVersion": 1.1
}

================ Node #1319 ================
{
  "id": "759b975f-d17c-4386-a5b3-12413f0361f4",
  "name": "Angie, AI Assistant \ud83d\udc69\ud83c\udffb\u200d\ud83c\udfeb",
  "type": "@n8n/n8n-nodes-langchain.agent",
  "position": [
    780,
    360
  ],
  "parameters": {
    "text": "={{ $json.text }}",
    "options": {
      "systemMessage": "=You are a helpful assistant.\n\nToday's date is {{ $now }}.\n\nGuidelines:\n- When fetching emails, filter out any promotional emails. \n- When summarizing emails, include Sender, Message date, subject, and brief summary of email.\n- if the user did not specify a date in the request assume they are asking for today\n- Use baserow tool to answer questions about tasks\n- When answering questions about calendar events, filter out events that don't apply to the question. For example, the question is about events for today, only reply with events for today. Don't mention future events if it's more than 1 week away"
    },
    "promptType": "define"
  },
  "typeVersion": 1.6
}

================ Node #1320 ================
{
  "id": "5537c777-f003-4673-b48a-4993a0c10520",
  "name": "Sticky Note",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    20,
    260
  ],
  "parameters": {
    "color": 5,
    "width": 496.25,
    "height": 278.75,
    "content": "## Process Telegram Request\n"
  },
  "typeVersion": 1
}

================ Node #1321 ================
{
  "id": "40e92679-b47a-4213-bb23-3f8d086459f2",
  "name": "Tasks",
  "type": "n8n-nodes-base.baserowTool",
  "position": [
    1120,
    680
  ],
  "parameters": {
    "tableId": 372174,
    "databaseId": 146496,
    "additionalOptions": {}
  },
  "credentials": {
    "baserowApi": {
      "id": "jsgACn0VxAPoD0E2",
      "name": "Baserow account"
    }
  },
  "typeVersion": 1
}

================ Node #1322 ================
{
  "id": "570a0647-b571-4ebc-9dfe-40244b5a0b2a",
  "name": "Contacts",
  "type": "n8n-nodes-base.baserowTool",
  "position": [
    1240,
    680
  ],
  "parameters": {
    "tableId": 372177,
    "databaseId": 146496,
    "descriptionType": "manual",
    "toolDescription": "Useful for getting contact information. For example emails or phone numbers.",
    "additionalOptions": {}
  },
  "credentials": {
    "baserowApi": {
      "id": "jsgACn0VxAPoD0E2",
      "name": "Baserow account"
    }
  },
  "typeVersion": 1
}

================ Node #1323 ================
{
  "id": "7fb1d95a-a8d6-4040-9271-5197296be7da",
  "name": "Sticky Note5",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    -620,
    220
  ],
  "parameters": {
    "color": 5,
    "width": 386.9292441979969,
    "height": 389.78268107403096,
    "content": "## Start here: Step-by Step Youtube Tutorial :star:\n\n[![Building an AI Personal Assistant](https://img.youtube.com/vi/pXjowPc6V2s/sddefault.jpg)](https://youtu.be/pXjowPc6V2s)\n"
  },
  "typeVersion": 1
}

================ Node #1324 ================
{
  "id": "6d908a58-8893-48da-8311-8c28ebd8ec62",
  "name": "Sticky Note",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    -520,
    -280
  ],
  "parameters": {
    "color": 7,
    "width": 1160,
    "height": 120,
    "content": "**Summarize YouTube videos**\n\nThis project automates the summarization of YouTube videos, transforming lengthy content into concise, actionable insights. By leveraging AI and workflow automation, it extracts video transcripts, analyzes key points, and generates summaries, saving time for content creators, researchers, and professionals. Perfect for staying informed, conducting research, or repurposing video content efficiently."
  },
  "typeVersion": 1
}

================ Node #1325 ================
{
  "id": "98de613a-1b1e-4b46-915f-7bebcfd6a931",
  "name": "Sticky Note1",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    -540,
    120
  ],
  "parameters": {
    "width": 230,
    "height": 80,
    "content": "Add the full YouTube URL. \u261d\ufe0f\nYou can change this input to a webhook or anything else."
  },
  "typeVersion": 1
}

================ Node #1326 ================
{
  "id": "064208d4-52c3-46a9-9f9f-d37258189d06",
  "name": "Request YouTube Transcript",
  "type": "n8n-nodes-base.httpRequest",
  "position": [
    -200,
    -20
  ],
  "parameters": {
    "url": "Apify API_KEY Here ???",
    "method": "POST",
    "options": {},
    "jsonBody": "={\n \"startUrls\": [\n \"{{ $json['Full URL'] }}\"\n ]\n}",
    "sendBody": true,
    "specifyBody": "json"
  },
  "typeVersion": 4.2
}

================ Node #1327 ================
{
  "id": "ba5e52fd-18b1-4232-961c-b53b01e21202",
  "name": "Sticky Note2",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    -280,
    -140
  ],
  "parameters": {
    "color": 3,
    "width": 280,
    "height": 340,
    "content": "Once you follow the Setup Instructions (mentioned in the template page description), you can insert the full URL endpoint, which includes both the POST Endpoint and API Key. \ud83d\udc47"
  },
  "typeVersion": 1
}

================ Node #1328 ================
{
  "id": "f3caad55-0c7d-4e8e-8649-79cc25b4e6aa",
  "name": "No Operation, do nothing",
  "type": "n8n-nodes-base.noOp",
  "position": [
    380,
    -20
  ],
  "parameters": {},
  "typeVersion": 1
}

================ Node #1329 ================
{
  "id": "8d72e533-a053-4317-9437-9d80d3ed098f",
  "name": "Summarization of a YouTube script",
  "type": "@n8n/n8n-nodes-langchain.chainSummarization",
  "position": [
    40,
    -20
  ],
  "parameters": {
    "options": {}
  },
  "typeVersion": 2
}

================ Node #1330 ================
{
  "id": "8f4e1c7c-286b-48aa-8f50-404e8f1d430b",
  "name": "YouTube video URL",
  "type": "n8n-nodes-base.formTrigger",
  "position": [
    -420,
    -20
  ],
  "webhookId": "3dc17600-3020-40b1-be8f-e65ef45269b6",
  "parameters": {
    "options": {
      "path": "ddd"
    },
    "formTitle": "Summarize YouTube video's",
    "formFields": {
      "values": [
        {
          "fieldLabel": "Full URL"
        }
      ]
    }
  },
  "typeVersion": 2.2
}

================ Node #1331 ================
{
  "id": "fb861e09-d415-4f32-a4de-a6ff84ac7f7b",
  "name": "Sticky Note3",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    380,
    120
  ],
  "parameters": {
    "color": 4,
    "height": 100,
    "content": "\u261d\ufe0f Optional\nIf the workflow ends here, Consider checking with another enrichment service."
  },
  "typeVersion": 1
}

================ Node #1332 ================
{
  "id": "17c0dc77-bee4-4271-b957-e0c793537a03",
  "name": "Summarization Engine",
  "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
  "position": [
    40,
    160
  ],
  "parameters": {
    "options": {}
  },
  "credentials": {
    "openAiApi": {
      "id": "g0eql8rqZWICDd5g",
      "name": "OpenAi"
    }
  },
  "typeVersion": 1.1
}

================ Node #1333 ================
{
  "id": "a8d5362e-459e-4a76-8ee2-b1eb977215a2",
  "name": "Sticky Note4",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    40,
    -140
  ],
  "parameters": {
    "color": 5,
    "width": 280,
    "content": "The summarization node works automatically and professionally, recognizing the input text and processing it directly without requiring any enhancements from your side\ud83d\udc47"
  },
  "typeVersion": 1
}

================ Node #1334 ================
{
  "id": "d3159589-dbb7-4cca-91f5-09e8b2e4cba8",
  "name": "When clicking \u2018Test workflow\u2019",
  "type": "n8n-nodes-base.manualTrigger",
  "position": [
    240,
    500
  ],
  "parameters": {},
  "typeVersion": 1
}

================ Node #1335 ================
{
  "id": "b4b42b3f-ef30-4fc8-829d-59f8974c4168",
  "name": "OpenAI Chat Model",
  "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
  "position": [
    2180,
    700
  ],
  "parameters": {
    "options": {}
  },
  "credentials": {
    "openAiApi": {
      "id": "8gccIjcuf3gvaoEr",
      "name": "OpenAi account"
    }
  },
  "typeVersion": 1
}

================ Node #1336 ================
{
  "id": "032c3012-ed8d-44eb-94f0-35790f4b616f",
  "name": "OpenAI Chat Model1",
  "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
  "position": [
    2980,
    460
  ],
  "parameters": {
    "options": {}
  },
  "credentials": {
    "openAiApi": {
      "id": "8gccIjcuf3gvaoEr",
      "name": "OpenAi account"
    }
  },
  "typeVersion": 1
}

================ Node #1337 ================
{
  "id": "bf922785-7e8f-4f93-bfff-813c16d93278",
  "name": "OpenAI Chat Model2",
  "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
  "position": [
    2020,
    520
  ],
  "parameters": {
    "options": {}
  },
  "credentials": {
    "openAiApi": {
      "id": "8gccIjcuf3gvaoEr",
      "name": "OpenAi account"
    }
  },
  "typeVersion": 1
}

================ Node #1338 ================
{
  "id": "d8d4b26f-270f-4b39-a4cd-a6e4361da591",
  "name": "Extract Voice Characteristics",
  "type": "@n8n/n8n-nodes-langchain.informationExtractor",
  "position": [
    2160,
    540
  ],
  "parameters": {
    "text": "=### Analyse the given content\n\n{{ $json.data.map(item => item.replace(/\\n/g, '')).join('\\n---\\n') }}",
    "options": {
      "systemPromptTemplate": "You help identify and define a company or individual's \"brand voice\". Using the given content belonging to the company or individual, extract all voice characteristics from it along with description and examples demonstrating it."
    },
    "schemaType": "manual",
    "inputSchema": "{\n\t\"type\": \"array\",\n \"items\": {\n \"type\": \"object\",\n \t\"properties\": {\n \"characteristic\": { \"type\": \"string\" },\n \"description\": { \"type\": \"string\" },\n \"examples\": { \"type\": \"array\", \"items\": { \"type\": \"string\" } }\n }\n\t}\n}"
  },
  "typeVersion": 1
}

================ Node #1339 ================
{
  "id": "8cca272c-b912-40f1-ba08-aa7c5ff7599c",
  "name": "Get Blog",
  "type": "n8n-nodes-base.httpRequest",
  "position": [
    480,
    500
  ],
  "parameters": {
    "url": "https://blog.n8n.io",
    "options": {}
  },
  "typeVersion": 4.2
}

================ Node #1340 ================
{
  "id": "aa1e2a02-2e2b-4e8d-aef8-f5f7a54d9562",
  "name": "Get Article",
  "type": "n8n-nodes-base.httpRequest",
  "position": [
    1120,
    500
  ],
  "parameters": {
    "url": "=https://blog.n8n.io{{ $json.article }}",
    "options": {}
  },
  "typeVersion": 4.2
}

================ Node #1341 ================
{
  "id": "78ae3dfc-5afd-452f-a2b6-bdb9dbd728bd",
  "name": "Extract Article URLs",
  "type": "n8n-nodes-base.html",
  "position": [
    640,
    500
  ],
  "parameters": {
    "options": {},
    "operation": "extractHtmlContent",
    "extractionValues": {
      "values": [
        {
          "key": "article",
          "attribute": "href",
          "cssSelector": ".item.post a.global-link",
          "returnArray": true,
          "returnValue": "attribute"
        }
      ]
    }
  },
  "typeVersion": 1.2
}

================ Node #1342 ================
{
  "id": "3b2b6fea-ed2f-43ba-b6d1-e0666b88c65b",
  "name": "Split Out URLs",
  "type": "n8n-nodes-base.splitOut",
  "position": [
    800,
    500
  ],
  "parameters": {
    "options": {},
    "fieldToSplitOut": "article"
  },
  "typeVersion": 1
}

================ Node #1343 ================
{
  "id": "68bb20b1-2177-4c0f-9ada-d1de69bdc2a0",
  "name": "Latest Articles",
  "type": "n8n-nodes-base.limit",
  "position": [
    960,
    500
  ],
  "parameters": {
    "maxItems": 5
  },
  "typeVersion": 1
}

================ Node #1344 ================
{
  "id": "f20d7393-24c9-4a51-872e-0dce391f661c",
  "name": "Extract Article Content",
  "type": "n8n-nodes-base.html",
  "position": [
    1280,
    500
  ],
  "parameters": {
    "options": {},
    "operation": "extractHtmlContent",
    "extractionValues": {
      "values": [
        {
          "key": "data",
          "cssSelector": ".post-section",
          "returnValue": "html"
        }
      ]
    }
  },
  "typeVersion": 1.2
}

================ Node #1345 ================
{
  "id": "299a04be-fe9b-47d9-b2c6-e2e4628f77e0",
  "name": "Combine Articles",
  "type": "n8n-nodes-base.aggregate",
  "position": [
    1780,
    540
  ],
  "parameters": {
    "options": {
      "mergeLists": true
    },
    "fieldsToAggregate": {
      "fieldToAggregate": [
        {
          "fieldToAggregate": "data"
        }
      ]
    }
  },
  "typeVersion": 1
}

================ Node #1346 ================
{
  "id": "8480ece7-0dc1-4682-ba9e-ded2c138d8b8",
  "name": "Article Style & Brand Voice",
  "type": "n8n-nodes-base.merge",
  "position": [
    2560,
    320
  ],
  "parameters": {
    "mode": "combine",
    "options": {},
    "combineBy": "combineByPosition"
  },
  "typeVersion": 3
}

================ Node #1347 ================
{
  "id": "024efee2-5a2f-455c-a150-4b9bdce650b2",
  "name": "Save as Draft",
  "type": "n8n-nodes-base.wordpress",
  "position": [
    3460,
    320
  ],
  "parameters": {
    "title": "={{ $json.output.title }}",
    "additionalFields": {
      "slug": "={{ $json.output.title.toSnakeCase() }}",
      "format": "standard",
      "status": "draft",
      "content": "={{ $json.output.body }}"
    }
  },
  "credentials": {
    "wordpressApi": {
      "id": "YMW8mGrekjfxKJUe",
      "name": "Wordpress account"
    }
  },
  "typeVersion": 1
}

================ Node #1348 ================
{
  "id": "71f4ab1e-ef61-48f3-92e8-70691f7d0750",
  "name": "Sticky Note",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    480,
    180
  ],
  "parameters": {
    "color": 7,
    "width": 606,
    "height": 264,
    "content": "## 1. Import Existing Content\n[Read more about the HTML node](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.html/)\n\nFirst, we'll need to gather existing content for the brand voice we want to replicate. This content can be blogs, social media posts or internal documents - the idea is to use this content to \"train\" our AI to produce content from the provided examples. One call out is that the quality and consistency of the content is important to get the desired results.\n\nIn this demonstration, we'll grab the latest blog posts off a corporate blog to use as an example. Since, the blog articles are likely consistent because of the source and narrower focus of the medium, it'll serve well to showcase this workflow."
  },
  "typeVersion": 1
}

================ Node #1349 ================
{
  "id": "3d3a55a5-4b4a-4ea2-a39c-82b366fb81e6",
  "name": "Sticky Note1",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    1440,
    240
  ],
  "parameters": {
    "color": 7,
    "width": 434,
    "height": 230,
    "content": "## 2. Convert HTML to Markdown\n[Learn more about the Markdown node](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.markdown)\n\nMarkdown is a great way to optimise the article data we're sending to the LLM because it reduces the amount of tokens required but keeps all relevant writing structure information.\n\nAlso useful to get Markdown output as a response because typically it's the format authors will write in."
  },
  "typeVersion": 1
}

================ Node #1350 ================
{
  "id": "08c0b683-ec06-47ce-871c-66265195ca29",
  "name": "Sticky Note2",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    1980,
    80
  ],
  "parameters": {
    "color": 7,
    "width": 446,
    "height": 233,
    "content": "## 3. Using AI to Analyse Article Structure and Writing Styles\n[Read more about the Basic LLM Chain node](https://docs.n8n.io/integrations/builtin/cluster-nodes/root-nodes/n8n-nodes-langchain.chainllm)\n\nOur approach is to first perform a high-level analysis of all available articles in order to replicate their content layout and writing styles. This will act as a guideline to help the AI to structure our future articles."
  },
  "typeVersion": 1
}

================ Node #1351 ================
{
  "id": "515fe69f-061e-4dfc-94ed-4cf2fbe10b7b",
  "name": "Capture Existing Article Structure",
  "type": "@n8n/n8n-nodes-langchain.chainLlm",
  "position": [
    2020,
    380
  ],
  "parameters": {
    "text": "={{ $json.data.join('\\n---\\n') }}",
    "messages": {
      "messageValues": [
        {
          "message": "=Given the following one or more articles (which are separated by ---), describe how best one could replicate the common structure, layout, language and writing styles of all as aggregate."
        }
      ]
    },
    "promptType": "define"
  },
  "typeVersion": 1.4
}

================ Node #1352 ================
{
  "id": "ba4e68fb-eccc-4efa-84be-c42a695dccdb",
  "name": "Markdown",
  "type": "n8n-nodes-base.markdown",
  "position": [
    1600,
    540
  ],
  "parameters": {
    "html": "={{ $json.data }}",
    "options": {}
  },
  "typeVersion": 1
}

================ Node #1353 ================
{
  "id": "d459ff5b-0375-4458-a49f-59700bb57e12",
  "name": "Sticky Note3",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    2340,
    740
  ],
  "parameters": {
    "color": 7,
    "width": 446,
    "height": 253,
    "content": "## 4. Using AI to Extract Voice Characteristics and Traits\n[Read more about the Information Extractor node](https://docs.n8n.io/integrations/builtin/cluster-nodes/root-nodes/n8n-nodes-langchain.information-extractor/)\n\nSecond, we'll use AI to analysis the brand voice characteristics of the previous articles. This picks out the tone, style and choice of language used and identifies them into categories. These categories will be used as guidelines for the AI to keep the future article consistent in tone and voice. "
  },
  "typeVersion": 1
}

================ Node #1354 ================
{
  "id": "71fe32a9-1b8a-446c-a4ff-fb98c6a68e1b",
  "name": "Sticky Note4",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    2720,
    0
  ],
  "parameters": {
    "color": 7,
    "width": 626,
    "height": 633,
    "content": "## 5. Automate On-Brand Articles Using AI\n[Read more about the Information Extractor node](https://docs.n8n.io/integrations/builtin/cluster-nodes/root-nodes/n8n-nodes-langchain.information-extractor)\n\nFinally with this approach, we can feed both content and voice guidelines into our final LLM - our content generation agent - to produce any number of on-brand articles, social media posts etc.\n\nWhen it comes to assessing the output, note the AI does a pretty good job at simulating format and reusing common phrases and wording for the target article. However, this could become repetitive very quickly! Whilst AI can help speed up the process, a human touch may still be required to add a some variety."
  },
  "typeVersion": 1
}

================ Node #1355 ================
{
  "id": "4e6fbe4e-869e-4bef-99ba-7b18740caecf",
  "name": "Content Generation Agent",
  "type": "@n8n/n8n-nodes-langchain.informationExtractor",
  "position": [
    3000,
    320
  ],
  "parameters": {
    "text": "={{ $json.instruction }}",
    "options": {
      "systemPromptTemplate": "=You are a blog content writer who writes using the following article guidelines. Write a content piece as requested by the user. Output the body as Markdown. Do not include the date of the article because the publishing date is not determined yet.\n\n## Brand Article Style\n{{ $('Article Style & Brand Voice').item.json.text }}\n\n##n Brand Voice Characteristics\n\nHere are the brand voice characteristic and examples you must adopt in your piece. Pick only the characteristic which make sense for the user's request. Try to keep it as similar as possible but don't copy word for word.\n\n|characteristic|description|examples|\n|-|-|-|\n{{\n$('Article Style & Brand Voice').item.json.output.map(item => (\n`|${item.characteristic}|${item.description}|${item.examples.map(ex => `\"${ex}\"`).join(', ')}|`\n)).join('\\n')\n}}"
    },
    "attributes": {
      "attributes": [
        {
          "name": "title",
          "required": true,
          "description": "title of article"
        },
        {
          "name": "summary",
          "required": true,
          "description": "summary of article"
        },
        {
          "name": "body",
          "required": true,
          "description": "body of article"
        },
        {
          "name": "characteristics",
          "required": true,
          "description": "comma delimited string of characteristics chosen"
        }
      ]
    }
  },
  "typeVersion": 1
}

================ Node #1356 ================
{
  "id": "022de44c-c06c-41ac-bd50-38173dae9b37",
  "name": "Sticky Note6",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    3460,
    480
  ],
  "parameters": {
    "color": 7,
    "width": 406,
    "height": 173,
    "content": "## 6. Save Draft to Wordpress\n[Learn more about the Wordpress node](https://docs.n8n.io/integrations/builtin/app-nodes/n8n-nodes-base.wordpress/)\n\nTo close out the template, we'll simple save our generated article as a draft which could allow human team members to review and validate the article before publishing."
  },
  "typeVersion": 1
}

================ Node #1357 ================
{
  "id": "fe54c40e-6ddd-45d6-a938-f467e4af3f57",
  "name": "Sticky Note5",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    2900,
    660
  ],
  "parameters": {
    "color": 5,
    "width": 440,
    "height": 120,
    "content": "### Q. Do I need to analyse Brand Voice for every article?\nA. No! I would recommend storing the results of the AI's analysis and re-use for a list of planned articles rather than generate anew every time."
  },
  "typeVersion": 1
}

================ Node #1358 ================
{
  "id": "1832131e-21e8-44fc-9370-907f7b5a6eda",
  "name": "Sticky Note7",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    1000,
    680
  ],
  "parameters": {
    "color": 5,
    "width": 380,
    "height": 120,
    "content": "### Q. Can I use other media than blog articles?\nA. Yes! This approach can use other source materials such as PDFs, as long as they can be produces in a text format to give to the LLM."
  },
  "typeVersion": 1
}

================ Node #1359 ================
{
  "id": "8e8706a3-122d-436b-9206-de7a6b2f3c39",
  "name": "Sticky Note8",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    -220,
    -120
  ],
  "parameters": {
    "width": 400,
    "height": 800,
    "content": "## Try It Out!\n### This n8n template demonstrates how to use AI to generate new on-brand written content by analysing previously published content.\n\nWith such an approach, it's possible to generate a steady stream of blog article drafts quickly with high consistency with your brand and existing content.\n\n### How it works\n* In this demonstration, the n8n.io blog is used as the source of existing published content and 5 of the latest articles are imported via the HTTP node.\n* The HTML node is extract the article bodies which are then converted to markdown for our LLMs.\n* We use LLM nodes to (1) understand the article structure and writing style and (2) identify the brand voice characteristics used in the posts.\n* These are then used as guidelines in our final LLM node when generating new articles.\n* Finally, a draft is saved to Wordpress for human editors to review or use as starting point for their own articles.\n\n### How to use\n* Update Step 1 to fetch data from your desired blog or change to fetch existing content in a different way.\n* Update Step 5 to provide your new article instruction. For optimal output, theme topics relevant to your brand.\n\n\n### Need Help?\nJoin the [Discord](https://discord.com/invite/XPKeKXeB7d) or ask in the [Forum](https://community.n8n.io/)!\n\nHappy Hacking!"
  },
  "typeVersion": 1
}

================ Node #1360 ================
{
  "id": "1510782d-0f88-40ca-99a8-44f984022c8e",
  "name": "New Article Instruction",
  "type": "n8n-nodes-base.set",
  "position": [
    2820,
    320
  ],
  "parameters": {
    "options": {},
    "assignments": {
      "assignments": [
        {
          "id": "2c7e2a28-30f9-4533-a394-a5e967ebf4ec",
          "name": "instruction",
          "type": "string",
          "value": "=Write a comprehensive guide on using AI for document classification and document extraction. Explain the benefits of using vision models over traditional OCR. Close out with a recommendation of using n8n as the preferred way to get started with this AI use-case."
        }
      ]
    }
  },
  "typeVersion": 3.4
}

================ Node #1361 ================
{
  "id": "2498bb93-176f-458c-acee-f541859df770",
  "name": "When clicking \u2018Test workflow\u2019",
  "type": "n8n-nodes-base.manualTrigger",
  "position": [
    2460,
    2820
  ],
  "parameters": {},
  "typeVersion": 1
}

================ Node #1362 ================
{
  "id": "c08bcf84-9336-44f9-b452-0c9469f18f48",
  "name": "Web Search For API Schema",
  "type": "n8n-nodes-base.httpRequest",
  "onError": "continueRegularOutput",
  "position": [
    3100,
    3820
  ],
  "parameters": {
    "url": "https://api.apify.com/v2/acts/serping~fast-google-search-results-scraper/run-sync-get-dataset-items",
    "method": "POST",
    "options": {},
    "sendBody": true,
    "authentication": "genericCredentialType",
    "bodyParameters": {
      "parameters": [
        {
          "name": "searchTerms",
          "value": "={{\n[\n `site:${$json.data.url.replace(/^http[s]:\\/\\//, '').replace(/\\/$/, '').replace('www.', '')} \"${$json.data.service}\" api developer (intext:reference OR intext:resource) (-inurl:support OR -inurl:help) (inurl:api OR intitle:api) -filetype:pdf`\n]\n}}"
        },
        {
          "name": "resultsPerPage",
          "value": "={{ 10 }}"
        }
      ]
    },
    "genericAuthType": "httpHeaderAuth"
  },
  "typeVersion": 4.2
}

================ Node #1363 ================
{
  "id": "d5b19e3a-acd0-4b06-8d77-42de1f797dba",
  "name": "Scrape Webpage Contents",
  "type": "n8n-nodes-base.httpRequest",
  "position": [
    3940,
    3720
  ],
  "parameters": {
    "url": "https://api.apify.com/v2/acts/apify~web-scraper/run-sync-get-dataset-items",
    "options": {
      "batching": {
        "batch": {
          "batchSize": 2,
          "batchInterval": 30000
        }
      }
    },
    "jsonBody": "={\n \"startUrls\": [\n {\n \"url\": \"{{ $json.source.link }}\",\n \"method\": \"GET\"\n }\n ],\n \"breakpointLocation\": \"NONE\",\n \"browserLog\": false,\n \"closeCookieModals\": false,\n \"debugLog\": false,\n \"downloadCss\": false,\n \"downloadMedia\": false,\n \"excludes\": [\n {\n \"glob\": \"/**/*.{png,jpg,jpeg,pdf}\"\n }\n ],\n \"headless\": true,\n \"ignoreCorsAndCsp\": false,\n \"ignoreSslErrors\": false,\n \n \"injectJQuery\": true,\n \"keepUrlFragments\": false,\n \"linkSelector\": \"a[href]\",\n \"maxCrawlingDepth\": 1,\n \"maxPagesPerCrawl\": 1,\n \"maxRequestRetries\": 1,\n \"maxResultsPerCrawl\": 1,\n \"pageFunction\": \"// The function accepts a single argument: the \\\"context\\\" object.\\n// For a complete list of its properties and functions,\\n// see https://apify.com/apify/web-scraper#page-function \\nasync function pageFunction(context) {\\n\\n await new Promise(res => { setTimeout(res, 6000) });\\n // This statement works as a breakpoint when you're trying to debug your code. Works only with Run mode: DEVELOPMENT!\\n // debugger; \\n\\n // jQuery is handy for finding DOM elements and extracting data from them.\\n // To use it, make sure to enable the \\\"Inject jQuery\\\" option.\\n const $ = context.jQuery;\\n const title = $('title').first().text();\\n\\n // Clone the body to avoid modifying the original content\\n const bodyClone = $('body').clone();\\n bodyClone.find('iframe, img, script, style, object, embed, noscript, svg, video, audio').remove();\\n const body = bodyClone.html();\\n\\n // Return an object with the data extracted from the page.\\n // It will be stored to the resulting dataset.\\n return {\\n url: context.request.url,\\n title,\\n body\\n };\\n}\",\n \"postNavigationHooks\": \"// We need to return array of (possibly async) functions here.\\n// The functions accept a single argument: the \\\"crawlingContext\\\" object.\\n[\\n async (crawlingContext) => {\\n // ...\\n },\\n]\",\n \"preNavigationHooks\": \"// We need to return array of (possibly async) functions here.\\n// The functions accept two arguments: the \\\"crawlingContext\\\" object\\n// and \\\"gotoOptions\\\".\\n[\\n async (crawlingContext, gotoOptions) => {\\n // ...\\n },\\n]\\n\",\n \"proxyConfiguration\": {\n \"useApifyProxy\": true\n },\n \"runMode\": \"PRODUCTION\",\n \n \"useChrome\": false,\n \"waitUntil\": [\n \"domcontentloaded\"\n ],\n \"globs\": [],\n \"pseudoUrls\": [],\n \"proxyRotation\": \"RECOMMENDED\",\n \"maxConcurrency\": 50,\n \"pageLoadTimeoutSecs\": 60,\n \"pageFunctionTimeoutSecs\": 60,\n \"maxScrollHeightPixels\": 5000,\n \"customData\": {}\n}",
    "sendBody": true,
    "sendQuery": true,
    "specifyBody": "json",
    "authentication": "genericCredentialType",
    "genericAuthType": "httpQueryAuth",
    "queryParameters": {
      "parameters": [
        {
          "name": "memory",
          "value": "2048"
        }
      ]
    }
  },
  "typeVersion": 4.2
}

================ Node #1364 ================
{
  "id": "5853ba7e-4068-4792-be5c-b8cf81ee89cb",
  "name": "Results to List",
  "type": "n8n-nodes-base.splitOut",
  "position": [
    3460,
    3720
  ],
  "parameters": {
    "options": {},
    "fieldToSplitOut": "origin_search.results"
  },
  "typeVersion": 1
}

================ Node #1365 ================
{
  "id": "8ed2e8ec-b2e3-474b-b19d-f38b518f274b",
  "name": "Recursive Character Text Splitter1",
  "type": "@n8n/n8n-nodes-langchain.textSplitterRecursiveCharacterTextSplitter",
  "position": [
    5800,
    4020
  ],
  "parameters": {
    "options": {},
    "chunkSize": 4000
  },
  "typeVersion": 1
}

================ Node #1366 ================
{
  "id": "e2a8137b-7da3-4032-bca2-c14465356f02",
  "name": "Content Chunking @ 50k Chars",
  "type": "n8n-nodes-base.set",
  "position": [
    5380,
    3740
  ],
  "parameters": {
    "options": {},
    "assignments": {
      "assignments": [
        {
          "id": "7753a4f4-3ec2-4c05-81df-3d5e8979a478",
          "name": "=data",
          "type": "array",
          "value": "={{ new Array(Math.round($json.content.length / Math.min($json.content.length, 50000))).fill('').map((_,idx) => $json.content.substring(idx * 50000, idx * 50000 + 50000)) }}"
        },
        {
          "id": "7973bcb4-f239-4619-85fc-c76e20386375",
          "name": "service",
          "type": "string",
          "value": "={{ $json.service }}"
        },
        {
          "id": "b46e44bc-ad01-4cf0-8b07-25eeb1fb5874",
          "name": "url",
          "type": "string",
          "value": "={{ $json.url }}"
        }
      ]
    }
  },
  "typeVersion": 3.3
}

================ Node #1367 ================
{
  "id": "6ef5866a-d992-4472-9221-27efbec8e7be",
  "name": "Split Out Chunks",
  "type": "n8n-nodes-base.splitOut",
  "position": [
    5540,
    3740
  ],
  "parameters": {
    "include": "allOtherFields",
    "options": {},
    "fieldToSplitOut": "data"
  },
  "typeVersion": 1
}

================ Node #1368 ================
{
  "id": "5e43b4d8-cebf-43ed-866d-0b4cb2997853",
  "name": "Default Data Loader",
  "type": "@n8n/n8n-nodes-langchain.documentDefaultDataLoader",
  "position": [
    5800,
    3900
  ],
  "parameters": {
    "options": {
      "metadata": {
        "metadataValues": [
          {
            "name": "service",
            "value": "={{ $json.service }}"
          },
          {
            "name": "url",
            "value": "={{ $json.url }}"
          }
        ]
      }
    },
    "jsonData": "={{ $json.data }}",
    "jsonMode": "expressionData"
  },
  "typeVersion": 1
}

================ Node #1369 ================
{
  "id": "d4b34767-be50-44ee-b778-18842034c276",
  "name": "Set Embedding Variables",
  "type": "n8n-nodes-base.set",
  "position": [
    4980,
    3580
  ],
  "parameters": {
    "options": {},
    "assignments": {
      "assignments": [
        {
          "id": "4008ae44-7998-4a6f-88c9-686f8b02e92b",
          "name": "content",
          "type": "string",
          "value": "={{ $json.body }}"
        },
        {
          "id": "f7381ac6-ef40-463c-ad2b-df2c31d3e828",
          "name": "service",
          "type": "string",
          "value": "={{ $('EventRouter').first().json.data.service }}"
        },
        {
          "id": "7eae99fd-75c7-4974-a128-641b8ada0cc2",
          "name": "url",
          "type": "string",
          "value": "={{ $json.url }}"
        }
      ]
    }
  },
  "typeVersion": 3.4
}

================ Node #1370 ================
{
  "id": "109b6c3a-9b16-40cc-9186-5045df387b52",
  "name": "Execute Workflow Trigger",
  "type": "n8n-nodes-base.executeWorkflowTrigger",
  "position": [
    2420,
    4200
  ],
  "parameters": {},
  "typeVersion": 1
}

================ Node #1371 ================
{
  "id": "31556ff2-6358-4bd4-8ec4-2797d993256e",
  "name": "Execution Data",
  "type": "n8n-nodes-base.executionData",
  "position": [
    2620,
    4200
  ],
  "parameters": {
    "dataToSave": {
      "values": [
        {
          "key": "eventType",
          "value": "={{ $json.eventType }}"
        },
        {
          "key": "executedById",
          "value": "={{ $json.executedById }}"
        },
        {
          "key": "service",
          "value": "={{ $json.data.service }}"
        }
      ]
    }
  },
  "typeVersion": 1
}

================ Node #1372 ================
{
  "id": "b65b3d4d-f667-4f8f-a06f-847c3d7b83e0",
  "name": "EventRouter",
  "type": "n8n-nodes-base.switch",
  "position": [
    2800,
    4200
  ],
  "parameters": {
    "rules": {
      "values": [
        {
          "outputKey": "research",
          "conditions": {
            "options": {
              "version": 2,
              "leftValue": "",
              "caseSensitive": true,
              "typeValidation": "strict"
            },
            "combinator": "and",
            "conditions": [
              {
                "operator": {
                  "type": "string",
                  "operation": "equals"
                },
                "leftValue": "={{ $json.eventType }}",
                "rightValue": "research"
              }
            ]
          },
          "renameOutput": true
        },
        {
          "outputKey": "extraction",
          "conditions": {
            "options": {
              "version": 2,
              "leftValue": "",
              "caseSensitive": true,
              "typeValidation": "strict"
            },
            "combinator": "and",
            "conditions": [
              {
                "id": "5418515e-ef6a-42e0-aeb9-8d0d35b898ca",
                "operator": {
                  "name": "filter.operator.equals",
                  "type": "string",
                  "operation": "equals"
                },
                "leftValue": "={{ $json.eventType }}",
                "rightValue": "extract"
              }
            ]
          },
          "renameOutput": true
        },
        {
          "outputKey": "generate",
          "conditions": {
            "options": {
              "version": 2,
              "leftValue": "",
              "caseSensitive": true,
              "typeValidation": "strict"
            },
            "combinator": "and",
            "conditions": [
              {
                "id": "0135165e-d211-44f3-92a4-a91858a57d99",
                "operator": {
                  "name": "filter.operator.equals",
                  "type": "string",
                  "operation": "equals"
                },
                "leftValue": "={{ $json.eventType }}",
                "rightValue": "generate"
              }
            ]
          },
          "renameOutput": true
        }
      ]
    },
    "options": {}
  },
  "typeVersion": 3.2
}

================ Node #1373 ================
{
  "id": "541f7d9b-c8ff-44dc-8618-8550dbf0b951",
  "name": "Google Gemini Chat Model",
  "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
  "position": [
    4460,
    3740
  ],
  "parameters": {
    "options": {},
    "modelName": "models/gemini-1.5-flash-latest"
  },
  "typeVersion": 1
}

================ Node #1374 ================
{
  "id": "617d6139-8417-4ecb-8f7c-558cd1c38ac3",
  "name": "Successful Runs",
  "type": "n8n-nodes-base.filter",
  "position": [
    4100,
    3720
  ],
  "parameters": {
    "options": {},
    "conditions": {
      "options": {
        "version": 2,
        "leftValue": "",
        "caseSensitive": true,
        "typeValidation": "strict"
      },
      "combinator": "and",
      "conditions": [
        {
          "id": "cac77cce-0a5c-469e-ba80-9fb026f04b18",
          "operator": {
            "type": "string",
            "operation": "exists",
            "singleValue": true
          },
          "leftValue": "={{ $json.body }}",
          "rightValue": ""
        }
      ]
    }
  },
  "typeVersion": 2.2,
  "alwaysOutputData": true
}

================ Node #1375 ================
{
  "id": "1115db69-b414-46cd-a9a1-565ae98cbd91",
  "name": "For Each Document...",
  "type": "n8n-nodes-base.splitInBatches",
  "position": [
    5180,
    3580
  ],
  "parameters": {
    "options": {}
  },
  "typeVersion": 3
}

================ Node #1376 ================
{
  "id": "3f0e3764-2479-4d74-aca8-c3e830eac423",
  "name": "Embeddings Google Gemini",
  "type": "@n8n/n8n-nodes-langchain.embeddingsGoogleGemini",
  "position": [
    5680,
    3900
  ],
  "parameters": {
    "modelName": "models/text-embedding-004"
  },
  "typeVersion": 1
}

================ Node #1377 ================
{
  "id": "87d42766-d1a2-406d-b01c-044fd2fc8910",
  "name": "Has API Documentation?",
  "type": "@n8n/n8n-nodes-langchain.textClassifier",
  "position": [
    4460,
    3580
  ],
  "parameters": {
    "options": {
      "fallback": "discard"
    },
    "inputText": "={{\n$json.body\n .replaceAll('\\n', '')\n .substring(0, 40000)\n}}",
    "categories": {
      "categories": [
        {
          "category": "contains_api_schema_documentation",
          "description": "True if this document contains REST API schema documentation or definitions"
        }
      ]
    }
  },
  "typeVersion": 1,
  "alwaysOutputData": true
}

================ Node #1378 ================
{
  "id": "55939b49-d91c-42a1-9770-48cbe4008c9a",
  "name": "Store Document Embeddings",
  "type": "@n8n/n8n-nodes-langchain.vectorStoreQdrant",
  "position": [
    5700,
    3740
  ],
  "parameters": {
    "mode": "insert",
    "options": {},
    "qdrantCollection": {
      "__rl": true,
      "mode": "id",
      "value": "={{ $('EventRouter').first().json.data.collection }}"
    }
  },
  "typeVersion": 1
}

================ Node #1379 ================
{
  "id": "3e1da749-b8b9-42cb-818b-eabf4b114abb",
  "name": "Embeddings Google Gemini1",
  "type": "@n8n/n8n-nodes-langchain.embeddingsGoogleGemini",
  "position": [
    3700,
    4520
  ],
  "parameters": {
    "modelName": "models/text-embedding-004"
  },
  "typeVersion": 1
}

================ Node #1380 ================
{
  "id": "be0906d4-351f-4b3b-9f32-8e5ee68083c5",
  "name": "Google Gemini Chat Model1",
  "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
  "position": [
    4600,
    4240
  ],
  "parameters": {
    "options": {},
    "modelName": "models/gemini-1.5-pro-002"
  },
  "typeVersion": 1
}

================ Node #1381 ================
{
  "id": "886415d5-c888-4b97-9fb5-02e6a14df4cc",
  "name": "Extract API Operations",
  "type": "@n8n/n8n-nodes-langchain.informationExtractor",
  "position": [
    4600,
    4100
  ],
  "parameters": {
    "text": "={{ $json.documents }}",
    "options": {
      "systemPromptTemplate": "=You have been given an extract of a webpage which should contain a list of web/REST api operations.\nStep 1. Extract all REST (eg. GET,POST,PUT,DELETE) API operation endpoints from the page content and generate appropriate labels for the resource, operation, description, method for each.\n* \"resource\" refers to the API group, for example: \"/v1/api/indicators/list\" and \"/v1/api/indicators/create\" will both have the resource name of \"indicators\". Use the following template \"<domain>\" eg. \"entities\", \"posts\", \"credentials\".\n* \"operation\" refers to the action performed, use the following template \"<verb> <entity>\" eg. \"List entities\", \"Create post\", \"Update credentials\"\n* only use one HTTP verb for \"method\"\n* \"description\" should be limited to one sentence.\n* Examples of API urls: \"/api/\", \"/api/v1/\", \"/v1/api\". API urls should not end with \"htm\" or html\".\n* Extract a maximum of 15 endpoints.\n* If the page content contains no api operations, return an empty array."
    },
    "schemaType": "manual",
    "inputSchema": "{\n \"type\": \"array\",\n \"items\": {\n \"type\": \"object\",\n \"properties\": {\n \"resource\": { \"type\": \"string\" },\n \"operation\": { \"type\": \"string\" },\n \"description\": { \"type\": \"string\" },\n \"url\": { \"type\": \"string\" },\n \"method\": { \"type\": \"string\" },\n \"documentation_url\": { \"type\": \"string\" }\n }\n }\n}"
  },
  "typeVersion": 1
}

================ Node #1382 ================
{
  "id": "76470e34-7c1f-44ce-81e2-047dcca3fa32",
  "name": "Search in Relevant Docs",
  "type": "@n8n/n8n-nodes-langchain.vectorStoreQdrant",
  "position": [
    3700,
    4380
  ],
  "parameters": {
    "mode": "load",
    "topK": 5,
    "prompt": "={{ $json.query }}",
    "options": {
      "searchFilterJson": "={{\n{\n \"must\": [\n {\n \"key\": \"metadata.service\",\n \"match\": {\n \"value\": $('EventRouter').first().json.data.service\n }\n }\n ]\n}\n}}"
    },
    "qdrantCollection": {
      "__rl": true,
      "mode": "id",
      "value": "={{ $('EventRouter').first().json.data.collection }}"
    }
  },
  "typeVersion": 1
}

================ Node #1383 ================
{
  "id": "49ca6a35-5b89-4ed5-bbab-250e09b4222f",
  "name": "Wait",
  "type": "n8n-nodes-base.wait",
  "position": [
    3780,
    3160
  ],
  "webhookId": "e9ad3ef0-7403-4e65-b0a4-4afdfb0cbc6d",
  "parameters": {
    "amount": 0
  },
  "typeVersion": 1.1
}

================ Node #1384 ================
{
  "id": "800cb05b-f5d1-47c8-869e-921915929f34",
  "name": "Remove Dupes",
  "type": "n8n-nodes-base.removeDuplicates",
  "position": [
    3780,
    3720
  ],
  "parameters": {
    "compare": "selectedFields",
    "options": {},
    "fieldsToCompare": "source.link"
  },
  "typeVersion": 2
}

================ Node #1385 ================
{
  "id": "d8203c40-aa0b-44b9-8dfd-aea250c8d109",
  "name": "Filter Results",
  "type": "n8n-nodes-base.filter",
  "position": [
    3620,
    3720
  ],
  "parameters": {
    "options": {},
    "conditions": {
      "options": {
        "version": 2,
        "leftValue": "",
        "caseSensitive": true,
        "typeValidation": "strict"
      },
      "combinator": "and",
      "conditions": [
        {
          "id": "42872456-411b-4d86-a9dd-b907d001ea1c",
          "operator": {
            "name": "filter.operator.equals",
            "type": "string",
            "operation": "equals"
          },
          "leftValue": "={{ $json.type }}",
          "rightValue": "normal"
        }
      ]
    }
  },
  "typeVersion": 2.2
}

================ Node #1386 ================
{
  "id": "5714dc09-fd67-4285-9434-ac97cd80dec1",
  "name": "Research",
  "type": "n8n-nodes-base.executeWorkflow",
  "onError": "continueErrorOutput",
  "position": [
    3460,
    2980
  ],
  "parameters": {
    "mode": "each",
    "options": {
      "waitForSubWorkflow": true
    },
    "workflowId": {
      "__rl": true,
      "mode": "id",
      "value": "={{ $workflow.id }}"
    }
  },
  "typeVersion": 1.1
}

================ Node #1387 ================
{
  "id": "2a2d3271-b0b6-4a1a-94e1-9b01399ba88f",
  "name": "Has Results?",
  "type": "n8n-nodes-base.if",
  "position": [
    3280,
    3820
  ],
  "parameters": {
    "options": {},
    "conditions": {
      "options": {
        "version": 2,
        "leftValue": "",
        "caseSensitive": true,
        "typeValidation": "strict"
      },
      "combinator": "and",
      "conditions": [
        {
          "id": "1223d607-45a8-44b1-b510-56fdbe013eba",
          "operator": {
            "type": "array",
            "operation": "exists",
            "singleValue": true
          },
          "leftValue": "={{ $jmespath($json, 'origin_search.results') }}",
          "rightValue": ""
        }
      ]
    }
  },
  "typeVersion": 2.2
}

================ Node #1388 ================
{
  "id": "b953082c-2d37-4549-80a7-d60535b8580e",
  "name": "Response Empty",
  "type": "n8n-nodes-base.set",
  "position": [
    3460,
    3900
  ],
  "parameters": {
    "options": {},
    "assignments": {
      "assignments": [
        {
          "id": "5bb23ce9-eb72-4868-9344-9e5d3952cc52",
          "name": "response",
          "type": "string",
          "value": "no web results"
        }
      ]
    }
  },
  "executeOnce": true,
  "typeVersion": 3.4
}

================ Node #1389 ================
{
  "id": "41e9c328-d145-4b71-93bb-e2c448a14be0",
  "name": "Response OK",
  "type": "n8n-nodes-base.set",
  "position": [
    5380,
    3580
  ],
  "parameters": {
    "options": {},
    "assignments": {
      "assignments": [
        {
          "id": "79598789-4468-4565-828f-fedc48be15c3",
          "name": "response",
          "type": "string",
          "value": "ok"
        }
      ]
    }
  },
  "executeOnce": true,
  "typeVersion": 3.4
}

================ Node #1390 ================
{
  "id": "5d0a7556-def9-4c70-8828-40b4d22904de",
  "name": "Combine Docs",
  "type": "n8n-nodes-base.aggregate",
  "position": [
    4020,
    4380
  ],
  "parameters": {
    "options": {},
    "aggregate": "aggregateAllItemData"
  },
  "typeVersion": 1
}

================ Node #1391 ================
{
  "id": "39bd90b4-e0f5-49b0-b4a7-55a3ae8eccb2",
  "name": "Template to List",
  "type": "n8n-nodes-base.splitOut",
  "position": [
    3280,
    4200
  ],
  "parameters": {
    "options": {
      "destinationFieldName": "query"
    },
    "fieldToSplitOut": "queries"
  },
  "typeVersion": 1
}

================ Node #1392 ================
{
  "id": "51a1da10-5ad0-4bac-9bec-55b5af3da702",
  "name": "Query Templates",
  "type": "n8n-nodes-base.set",
  "position": [
    3100,
    4200
  ],
  "parameters": {
    "options": {},
    "assignments": {
      "assignments": [
        {
          "id": "e2a02550-8f53-4f8d-bb83-68ee3606736e",
          "name": "queries",
          "type": "array",
          "value": "=[\n\"What are the core functionalities, essential features, or primary use cases of {{ $json.data.service }}?\",\n\"Is there an API overview or API categories for {{ $json.data.service }}? What main APIs are listed or mentioned?\",\n\"What industry does {{ $json.data.service }} operate in? What is the most important of the services in the industry? Return the important service as the function.\",\n\"What REST apis (GET, POST, DELETE, PATCH) and/or operations can you identify for {{ $json.data.service }}?\",\n\"Does {{ $json.data.service }} have any CURL examples? If you can, identify one such example and explain what it does.\"\n]"
        }
      ]
    }
  },
  "executeOnce": true,
  "typeVersion": 3.3
}

================ Node #1393 ================
{
  "id": "414091b7-114b-4fc3-9755-2f87cfef239e",
  "name": "Google Gemini Chat Model2",
  "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
  "position": [
    3700,
    4240
  ],
  "parameters": {
    "options": {},
    "modelName": "models/gemini-1.5-pro-002"
  },
  "typeVersion": 1
}

================ Node #1394 ================
{
  "id": "1f0f45ff-3bc9-4786-92e1-319244d020c0",
  "name": "For Each Template...",
  "type": "n8n-nodes-base.splitInBatches",
  "position": [
    3460,
    4200
  ],
  "parameters": {
    "options": {}
  },
  "typeVersion": 3
}

================ Node #1395 ================
{
  "id": "2e577e62-7f89-4c99-b540-ce8c44f19a55",
  "name": "Query & Docs",
  "type": "n8n-nodes-base.set",
  "position": [
    4180,
    4380
  ],
  "parameters": {
    "options": {},
    "assignments": {
      "assignments": [
        {
          "id": "fdaea3de-3c9a-4f26-b7dc-769e534006a9",
          "name": "query",
          "type": "string",
          "value": "={{ $('For Each Template...').item.json.query }}"
        },
        {
          "id": "88198374-d2f9-4ae7-b262-d3b2e630e0ac",
          "name": "documents",
          "type": "string",
          "value": "={{ $json.data.map(item => item.document.pageContent.replaceAll('\\n', ' ')).join('\\n---\\n') }}"
        }
      ]
    }
  },
  "typeVersion": 3.4
}

================ Node #1396 ================
{
  "id": "548d51fd-9740-4b4c-9c81-db62d2b31053",
  "name": "Identify Service Products",
  "type": "@n8n/n8n-nodes-langchain.informationExtractor",
  "position": [
    3700,
    4100
  ],
  "parameters": {
    "text": "={{ $json.query }}",
    "options": {
      "systemPromptTemplate": "=Use the following document to answer the user's question:\n```\n{{ $json.documents.replace(/[\\{\\}]/g, '') }}\n```"
    },
    "attributes": {
      "attributes": [
        {
          "name": "product_or_solution",
          "required": true,
          "description": "A product or solution offered by the service"
        },
        {
          "name": "description",
          "required": true,
          "description": "description of what the product or solution of the service does"
        }
      ]
    }
  },
  "typeVersion": 1
}

================ Node #1397 ================
{
  "id": "aa7041e9-4ac8-47f9-b98e-cf57873922bb",
  "name": "Extract API Templates",
  "type": "n8n-nodes-base.set",
  "position": [
    4180,
    4200
  ],
  "parameters": {
    "options": {},
    "assignments": {
      "assignments": [
        {
          "id": "e2a02550-8f53-4f8d-bb83-68ee3606736e",
          "name": "query",
          "type": "string",
          "value": "=I'm interested in {{ $json.output.product_or_solution }} apis which {{ $json.output.description }} What are the GET, POST, PATCH and/or DELETE endpoints of the {{ $json.output.product_or_solution }} api?"
        }
      ]
    }
  },
  "typeVersion": 3.3
}

================ Node #1398 ================
{
  "id": "e2b371c1-52af-4e57-877c-6933ba84e2d5",
  "name": "Embeddings Google Gemini2",
  "type": "@n8n/n8n-nodes-langchain.embeddingsGoogleGemini",
  "position": [
    4600,
    4520
  ],
  "parameters": {
    "modelName": "models/text-embedding-004"
  },
  "typeVersion": 1
}

================ Node #1399 ================
{
  "id": "d808c591-34e2-455f-96b1-3689d950608d",
  "name": "Search in Relevant Docs1",
  "type": "@n8n/n8n-nodes-langchain.vectorStoreQdrant",
  "position": [
    4600,
    4380
  ],
  "parameters": {
    "mode": "load",
    "topK": 20,
    "prompt": "={{ $json.query }}",
    "options": {
      "searchFilterJson": "={{\n{\n \"must\": [\n {\n \"key\": \"metadata.service\",\n \"match\": {\n \"value\": $('EventRouter').first().json.data.service\n }\n }\n ]\n}\n}}"
    },
    "qdrantCollection": {
      "__rl": true,
      "mode": "id",
      "value": "={{ $('EventRouter').first().json.data.collection }}"
    }
  },
  "typeVersion": 1
}

================ Node #1400 ================
{
  "id": "222bde31-57fa-46c4-a23b-ec2d1b3c7e2d",
  "name": "Combine Docs1",
  "type": "n8n-nodes-base.aggregate",
  "position": [
    4920,
    4380
  ],
  "parameters": {
    "options": {},
    "aggregate": "aggregateAllItemData"
  },
  "typeVersion": 1
}

================ Node #1401 ================
{
  "id": "57677d83-a79a-4b71-9977-ee2324f5d593",
  "name": "Query & Docs1",
  "type": "n8n-nodes-base.set",
  "position": [
    5080,
    4380
  ],
  "parameters": {
    "options": {},
    "assignments": {
      "assignments": [
        {
          "id": "fdaea3de-3c9a-4f26-b7dc-769e534006a9",
          "name": "query",
          "type": "string",
          "value": "={{ $('For Each Template...1').item.json.query }}"
        },
        {
          "id": "88198374-d2f9-4ae7-b262-d3b2e630e0ac",
          "name": "documents",
          "type": "string",
          "value": "={{\n$json.data\n .map(item =>\n`url: ${item.document.metadata.url}\ncontent: ${item.document.pageContent}`\n )\n .join('\\n---\\n')\n .replaceAll('\\n\\n', '\\n')\n}}"
        }
      ]
    }
  },
  "typeVersion": 3.4
}

================ Node #1402 ================
{
  "id": "124c3b07-3210-4190-8865-e18017fc9e6c",
  "name": "For Each Template...1",
  "type": "n8n-nodes-base.splitInBatches",
  "position": [
    4380,
    4200
  ],
  "parameters": {
    "options": {}
  },
  "typeVersion": 3
}

================ Node #1403 ================
{
  "id": "8ea4a5da-c471-4201-a08b-9c18ed08ddc7",
  "name": "Merge Lists",
  "type": "n8n-nodes-base.code",
  "position": [
    4920,
    4200
  ],
  "parameters": {
    "jsCode": "return $input.all().flatMap(input => input.json.output) || [];"
  },
  "typeVersion": 2,
  "alwaysOutputData": true
}

================ Node #1404 ================
{
  "id": "0e38cd3c-c843-4f6d-bdb6-901a8c12acbf",
  "name": "Remove Duplicates",
  "type": "n8n-nodes-base.removeDuplicates",
  "position": [
    5280,
    4200
  ],
  "parameters": {
    "compare": "selectedFields",
    "options": {},
    "fieldsToCompare": "method, url"
  },
  "typeVersion": 2
}

================ Node #1405 ================
{
  "id": "8f127f7a-e351-4b30-82dd-1f785be4a765",
  "name": "Append Row",
  "type": "n8n-nodes-base.googleSheets",
  "position": [
    5440,
    4200
  ],
  "parameters": {
    "columns": {
      "value": {
        "url": "={{ $json.url }}",
        "method": "={{ $json.method }}",
        "service": "={{ $('EventRouter').first().json.data.service }}",
        "resource": "={{ $json.resource }}",
        "operation": "={{ $json.operation }}",
        "description": "={{ $json.description }}",
        "documentation_url": "={{ $json.documentation_url }}"
      },
      "schema": [
        {
          "id": "service",
          "type": "string",
          "display": true,
          "required": false,
          "displayName": "service",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "resource",
          "type": "string",
          "display": true,
          "required": false,
          "displayName": "resource",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "operation",
          "type": "string",
          "display": true,
          "required": false,
          "displayName": "operation",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "description",
          "type": "string",
          "display": true,
          "required": false,
          "displayName": "description",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "url",
          "type": "string",
          "display": true,
          "required": false,
          "displayName": "url",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "method",
          "type": "string",
          "display": true,
          "required": false,
          "displayName": "method",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "documentation_url",
          "type": "string",
          "display": true,
          "required": false,
          "displayName": "documentation_url",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        }
      ],
      "mappingMode": "defineBelow",
      "matchingColumns": []
    },
    "options": {
      "useAppend": true
    },
    "operation": "append",
    "sheetName": {
      "__rl": true,
      "mode": "list",
      "value": 1042334767,
      "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1l59ikBvEwPNSWIm2k6KRMFPTNImJPYqs9bzGT5dUiU0/edit#gid=1042334767",
      "cachedResultName": "Extracted API Operations"
    },
    "documentId": {
      "__rl": true,
      "mode": "list",
      "value": "1l59ikBvEwPNSWIm2k6KRMFPTNImJPYqs9bzGT5dUiU0",
      "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1l59ikBvEwPNSWIm2k6KRMFPTNImJPYqs9bzGT5dUiU0/edit?usp=drivesdk",
      "cachedResultName": "API Schema Crawler & Extractor"
    }
  },
  "typeVersion": 4.5
}

================ Node #1406 ================
{
  "id": "d9f490e2-320e-4dc1-af8f-ac7f6a61568d",
  "name": "Response OK1",
  "type": "n8n-nodes-base.set",
  "position": [
    5600,
    4200
  ],
  "parameters": {
    "options": {},
    "assignments": {
      "assignments": [
        {
          "id": "79598789-4468-4565-828f-fedc48be15c3",
          "name": "response",
          "type": "string",
          "value": "ok"
        }
      ]
    }
  },
  "executeOnce": true,
  "typeVersion": 3.4
}

================ Node #1407 ================
{
  "id": "7780b6ee-0fde-40bb-aef6-e67b883645e1",
  "name": "Has Operations?",
  "type": "n8n-nodes-base.if",
  "position": [
    5080,
    4200
  ],
  "parameters": {
    "options": {},
    "conditions": {
      "options": {
        "version": 2,
        "leftValue": "",
        "caseSensitive": true,
        "typeValidation": "strict"
      },
      "combinator": "and",
      "conditions": [
        {
          "id": "a95420a7-6265-4ea3-9c01-82c2d7aeb4f8",
          "operator": {
            "type": "object",
            "operation": "notEmpty",
            "singleValue": true
          },
          "leftValue": "={{ $input.first().json }}",
          "rightValue": ""
        }
      ]
    }
  },
  "typeVersion": 2.2
}

================ Node #1408 ================
{
  "id": "6589673d-984d-4a1e-a655-1bc19d2b154e",
  "name": "Response Empty1",
  "type": "n8n-nodes-base.set",
  "position": [
    5280,
    4380
  ],
  "parameters": {
    "options": {},
    "assignments": {
      "assignments": [
        {
          "id": "5bb23ce9-eb72-4868-9344-9e5d3952cc52",
          "name": "response",
          "type": "string",
          "value": "no api operations found"
        }
      ]
    }
  },
  "executeOnce": true,
  "typeVersion": 3.4
}

================ Node #1409 ================
{
  "id": "c5dc3eac-a3a5-481d-a8bc-8b653d88143d",
  "name": "Research Pending",
  "type": "n8n-nodes-base.googleSheets",
  "position": [
    3180,
    2980
  ],
  "parameters": {
    "columns": {
      "value": {
        "row_number": "={{ $('For Each Research...').item.json.row_number }}",
        "Stage 1 - Research": "=pending"
      },
      "schema": [
        {
          "id": "Service",
          "type": "string",
          "display": true,
          "removed": true,
          "required": false,
          "displayName": "Service",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "Website",
          "type": "string",
          "display": true,
          "removed": true,
          "required": false,
          "displayName": "Website",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "Stage 1 - Research",
          "type": "string",
          "display": true,
          "required": false,
          "displayName": "Stage 1 - Research",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "Stage 2 - Extraction",
          "type": "string",
          "display": true,
          "removed": true,
          "required": false,
          "displayName": "Stage 2 - Extraction",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "Stage 3 - Output File",
          "type": "string",
          "display": true,
          "removed": true,
          "required": false,
          "displayName": "Stage 3 - Output File",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "row_number",
          "type": "string",
          "display": true,
          "removed": false,
          "readOnly": true,
          "required": false,
          "displayName": "row_number",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        }
      ],
      "mappingMode": "defineBelow",
      "matchingColumns": [
        "row_number"
      ]
    },
    "options": {},
    "operation": "update",
    "sheetName": {
      "__rl": true,
      "mode": "list",
      "value": "gid=0",
      "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1l59ikBvEwPNSWIm2k6KRMFPTNImJPYqs9bzGT5dUiU0/edit#gid=0",
      "cachedResultName": "Sheet1"
    },
    "documentId": {
      "__rl": true,
      "mode": "list",
      "value": "1l59ikBvEwPNSWIm2k6KRMFPTNImJPYqs9bzGT5dUiU0",
      "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1l59ikBvEwPNSWIm2k6KRMFPTNImJPYqs9bzGT5dUiU0/edit?usp=drivesdk",
      "cachedResultName": "API Schema Crawler & Extractor"
    }
  },
  "typeVersion": 4.5
}

================ Node #1410 ================
{
  "id": "39bceadb-6c3b-4b52-82b9-bdcecd9a164a",
  "name": "Research Result",
  "type": "n8n-nodes-base.googleSheets",
  "position": [
    3620,
    2980
  ],
  "parameters": {
    "columns": {
      "value": {
        "row_number": "={{ $('For Each Research...').item.json.row_number }}",
        "Stage 1 - Research": "={{ $json.response }}"
      },
      "schema": [
        {
          "id": "Service",
          "type": "string",
          "display": true,
          "removed": true,
          "required": false,
          "displayName": "Service",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "Website",
          "type": "string",
          "display": true,
          "removed": true,
          "required": false,
          "displayName": "Website",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "Stage 1 - Research",
          "type": "string",
          "display": true,
          "required": false,
          "displayName": "Stage 1 - Research",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "Stage 2 - Extraction",
          "type": "string",
          "display": true,
          "removed": true,
          "required": false,
          "displayName": "Stage 2 - Extraction",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "Stage 3 - Output File",
          "type": "string",
          "display": true,
          "removed": true,
          "required": false,
          "displayName": "Stage 3 - Output File",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "row_number",
          "type": "string",
          "display": true,
          "removed": false,
          "readOnly": true,
          "required": false,
          "displayName": "row_number",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        }
      ],
      "mappingMode": "defineBelow",
      "matchingColumns": [
        "row_number"
      ]
    },
    "options": {},
    "operation": "update",
    "sheetName": {
      "__rl": true,
      "mode": "list",
      "value": "gid=0",
      "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1l59ikBvEwPNSWIm2k6KRMFPTNImJPYqs9bzGT5dUiU0/edit#gid=0",
      "cachedResultName": "Sheet1"
    },
    "documentId": {
      "__rl": true,
      "mode": "list",
      "value": "1l59ikBvEwPNSWIm2k6KRMFPTNImJPYqs9bzGT5dUiU0",
      "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1l59ikBvEwPNSWIm2k6KRMFPTNImJPYqs9bzGT5dUiU0/edit?usp=drivesdk",
      "cachedResultName": "API Schema Crawler & Extractor"
    }
  },
  "typeVersion": 4.5
}

================ Node #1411 ================
{
  "id": "0bd07f31-1c51-45aa-8316-b658aa214293",
  "name": "Research Error",
  "type": "n8n-nodes-base.googleSheets",
  "position": [
    3620,
    3160
  ],
  "parameters": {
    "columns": {
      "value": {
        "row_number": "={{ $('For Each Research...').item.json.row_number }}",
        "Stage 1 - Research": "=error"
      },
      "schema": [
        {
          "id": "Service",
          "type": "string",
          "display": true,
          "removed": true,
          "required": false,
          "displayName": "Service",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "Website",
          "type": "string",
          "display": true,
          "removed": true,
          "required": false,
          "displayName": "Website",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "Stage 1 - Research",
          "type": "string",
          "display": true,
          "required": false,
          "displayName": "Stage 1 - Research",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "Stage 2 - Extraction",
          "type": "string",
          "display": true,
          "removed": true,
          "required": false,
          "displayName": "Stage 2 - Extraction",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "Stage 3 - Output File",
          "type": "string",
          "display": true,
          "removed": true,
          "required": false,
          "displayName": "Stage 3 - Output File",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "row_number",
          "type": "string",
          "display": true,
          "removed": false,
          "readOnly": true,
          "required": false,
          "displayName": "row_number",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        }
      ],
      "mappingMode": "defineBelow",
      "matchingColumns": [
        "row_number"
      ]
    },
    "options": {},
    "operation": "update",
    "sheetName": {
      "__rl": true,
      "mode": "list",
      "value": "gid=0",
      "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1l59ikBvEwPNSWIm2k6KRMFPTNImJPYqs9bzGT5dUiU0/edit#gid=0",
      "cachedResultName": "Sheet1"
    },
    "documentId": {
      "__rl": true,
      "mode": "list",
      "value": "1l59ikBvEwPNSWIm2k6KRMFPTNImJPYqs9bzGT5dUiU0",
      "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1l59ikBvEwPNSWIm2k6KRMFPTNImJPYqs9bzGT5dUiU0/edit?usp=drivesdk",
      "cachedResultName": "API Schema Crawler & Extractor"
    }
  },
  "typeVersion": 4.5
}

================ Node #1412 ================
{
  "id": "0385784f-95ef-46c3-82c4-50fcf7146736",
  "name": "Extract Pending",
  "type": "n8n-nodes-base.googleSheets",
  "position": [
    4160,
    2980
  ],
  "parameters": {
    "columns": {
      "value": {
        "row_number": "={{ $('For Each Extract...').item.json.row_number }}",
        "Stage 2 - Extraction": "pending"
      },
      "schema": [
        {
          "id": "Service",
          "type": "string",
          "display": true,
          "removed": true,
          "required": false,
          "displayName": "Service",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "Website",
          "type": "string",
          "display": true,
          "removed": true,
          "required": false,
          "displayName": "Website",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "Stage 1 - Research",
          "type": "string",
          "display": true,
          "removed": true,
          "required": false,
          "displayName": "Stage 1 - Research",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "Stage 2 - Extraction",
          "type": "string",
          "display": true,
          "removed": false,
          "required": false,
          "displayName": "Stage 2 - Extraction",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "Stage 3 - Output File",
          "type": "string",
          "display": true,
          "removed": true,
          "required": false,
          "displayName": "Stage 3 - Output File",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "row_number",
          "type": "string",
          "display": true,
          "removed": false,
          "readOnly": true,
          "required": false,
          "displayName": "row_number",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        }
      ],
      "mappingMode": "defineBelow",
      "matchingColumns": [
        "row_number"
      ]
    },
    "options": {},
    "operation": "update",
    "sheetName": {
      "__rl": true,
      "mode": "list",
      "value": "gid=0",
      "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1l59ikBvEwPNSWIm2k6KRMFPTNImJPYqs9bzGT5dUiU0/edit#gid=0",
      "cachedResultName": "Sheet1"
    },
    "documentId": {
      "__rl": true,
      "mode": "list",
      "value": "1l59ikBvEwPNSWIm2k6KRMFPTNImJPYqs9bzGT5dUiU0",
      "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1l59ikBvEwPNSWIm2k6KRMFPTNImJPYqs9bzGT5dUiU0/edit?usp=drivesdk",
      "cachedResultName": "API Schema Crawler & Extractor"
    }
  },
  "executeOnce": false,
  "typeVersion": 4.5
}

================ Node #1413 ================
{
  "id": "21c1e982-25a6-4a00-b8d3-6c299c452106",
  "name": "Research Event",
  "type": "n8n-nodes-base.set",
  "position": [
    3320,
    2980
  ],
  "parameters": {
    "mode": "raw",
    "options": {},
    "jsonOutput": "={{\n{\n \"eventType\": \"research\",\n \"createdAt\": $now.toISO(),\n \"executedById\": $execution.id,\n \"data\": {\n \"row_number\": $('For Each Research...').item.json.row_number,\n \"service\": $('For Each Research...').item.json.Service,\n \"url\": $('For Each Research...').item.json.Website,\n \"collection\": \"api_schema_crawler_and_extractor\"\n }\n}\n}}"
  },
  "typeVersion": 3.4
}

================ Node #1414 ================
{
  "id": "c83f99f1-e28f-4c15-aff8-da25bb5dfe3b",
  "name": "Extract Event",
  "type": "n8n-nodes-base.set",
  "position": [
    4300,
    2980
  ],
  "parameters": {
    "mode": "raw",
    "options": {},
    "jsonOutput": "={{\n{\n \"eventType\": \"extract\",\n \"createdAt\": $now.toISO(),\n \"executedById\": $execution.id,\n \"data\": {\n \"row_number\": $('For Each Extract...').item.json.row_number,\n \"service\": $('For Each Extract...').item.json.Service,\n \"url\": $('For Each Extract...').item.json.Website,\n \"collection\": \"api_schema_crawler_and_extractor\"\n }\n}\n}}"
  },
  "typeVersion": 3.4
}

================ Node #1415 ================
{
  "id": "88c3caec-75f7-47a1-9b50-1246c457c2b4",
  "name": "Extract",
  "type": "n8n-nodes-base.executeWorkflow",
  "onError": "continueErrorOutput",
  "position": [
    4440,
    2980
  ],
  "parameters": {
    "mode": "each",
    "options": {
      "waitForSubWorkflow": true
    },
    "workflowId": {
      "__rl": true,
      "mode": "id",
      "value": "={{ $workflow.id }}"
    }
  },
  "typeVersion": 1.1
}

================ Node #1416 ================
{
  "id": "2342b7ff-b00d-439a-a859-63fd0a6bac3a",
  "name": "Extract Result",
  "type": "n8n-nodes-base.googleSheets",
  "position": [
    4600,
    2980
  ],
  "parameters": {
    "columns": {
      "value": {
        "row_number": "={{ $('For Each Extract...').item.json.row_number }}",
        "Stage 2 - Extraction": "={{ $json.response }}"
      },
      "schema": [
        {
          "id": "Service",
          "type": "string",
          "display": true,
          "removed": true,
          "required": false,
          "displayName": "Service",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "Website",
          "type": "string",
          "display": true,
          "removed": true,
          "required": false,
          "displayName": "Website",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "Stage 1 - Research",
          "type": "string",
          "display": true,
          "removed": true,
          "required": false,
          "displayName": "Stage 1 - Research",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "Stage 2 - Extraction",
          "type": "string",
          "display": true,
          "removed": false,
          "required": false,
          "displayName": "Stage 2 - Extraction",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "Stage 3 - Output File",
          "type": "string",
          "display": true,
          "removed": true,
          "required": false,
          "displayName": "Stage 3 - Output File",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "row_number",
          "type": "string",
          "display": true,
          "removed": false,
          "readOnly": true,
          "required": false,
          "displayName": "row_number",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        }
      ],
      "mappingMode": "defineBelow",
      "matchingColumns": [
        "row_number"
      ]
    },
    "options": {},
    "operation": "update",
    "sheetName": {
      "__rl": true,
      "mode": "list",
      "value": "gid=0",
      "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1l59ikBvEwPNSWIm2k6KRMFPTNImJPYqs9bzGT5dUiU0/edit#gid=0",
      "cachedResultName": "Sheet1"
    },
    "documentId": {
      "__rl": true,
      "mode": "list",
      "value": "1l59ikBvEwPNSWIm2k6KRMFPTNImJPYqs9bzGT5dUiU0",
      "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1l59ikBvEwPNSWIm2k6KRMFPTNImJPYqs9bzGT5dUiU0/edit?usp=drivesdk",
      "cachedResultName": "API Schema Crawler & Extractor"
    }
  },
  "typeVersion": 4.5
}

================ Node #1417 ================
{
  "id": "d4c423c9-1d6a-4a69-9302-92ec79734d61",
  "name": "Extract Error",
  "type": "n8n-nodes-base.googleSheets",
  "position": [
    4600,
    3160
  ],
  "parameters": {
    "columns": {
      "value": {
        "row_number": "={{ $('For Each Extract...').item.json.row_number }}",
        "Stage 2 - Extraction": "error"
      },
      "schema": [
        {
          "id": "Service",
          "type": "string",
          "display": true,
          "removed": true,
          "required": false,
          "displayName": "Service",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "Website",
          "type": "string",
          "display": true,
          "removed": true,
          "required": false,
          "displayName": "Website",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "Stage 1 - Research",
          "type": "string",
          "display": true,
          "removed": true,
          "required": false,
          "displayName": "Stage 1 - Research",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "Stage 2 - Extraction",
          "type": "string",
          "display": true,
          "removed": false,
          "required": false,
          "displayName": "Stage 2 - Extraction",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "Stage 3 - Output File",
          "type": "string",
          "display": true,
          "removed": true,
          "required": false,
          "displayName": "Stage 3 - Output File",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "row_number",
          "type": "string",
          "display": true,
          "removed": false,
          "readOnly": true,
          "required": false,
          "displayName": "row_number",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        }
      ],
      "mappingMode": "defineBelow",
      "matchingColumns": [
        "row_number"
      ]
    },
    "options": {},
    "operation": "update",
    "sheetName": {
      "__rl": true,
      "mode": "list",
      "value": "gid=0",
      "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1l59ikBvEwPNSWIm2k6KRMFPTNImJPYqs9bzGT5dUiU0/edit#gid=0",
      "cachedResultName": "Sheet1"
    },
    "documentId": {
      "__rl": true,
      "mode": "list",
      "value": "1l59ikBvEwPNSWIm2k6KRMFPTNImJPYqs9bzGT5dUiU0",
      "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1l59ikBvEwPNSWIm2k6KRMFPTNImJPYqs9bzGT5dUiU0/edit?usp=drivesdk",
      "cachedResultName": "API Schema Crawler & Extractor"
    }
  },
  "typeVersion": 4.5
}

================ Node #1418 ================
{
  "id": "f64254d6-4493-4aaf-8160-35e8ff4fdc34",
  "name": "Get API Operations",
  "type": "n8n-nodes-base.googleSheets",
  "position": [
    3100,
    4740
  ],
  "parameters": {
    "options": {},
    "filtersUI": {
      "values": [
        {
          "lookupValue": "={{ $json.data.service }}",
          "lookupColumn": "service"
        }
      ]
    },
    "sheetName": {
      "__rl": true,
      "mode": "list",
      "value": 1042334767,
      "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1l59ikBvEwPNSWIm2k6KRMFPTNImJPYqs9bzGT5dUiU0/edit#gid=1042334767",
      "cachedResultName": "Extracted API Operations"
    },
    "documentId": {
      "__rl": true,
      "mode": "list",
      "value": "1l59ikBvEwPNSWIm2k6KRMFPTNImJPYqs9bzGT5dUiU0",
      "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1l59ikBvEwPNSWIm2k6KRMFPTNImJPYqs9bzGT5dUiU0/edit?usp=drivesdk",
      "cachedResultName": "API Schema Crawler & Extractor"
    }
  },
  "typeVersion": 4.5
}

================ Node #1419 ================
{
  "id": "fa748b63-3d2b-4cf3-b1fb-1bd953e5054b",
  "name": "Contruct JSON Schema",
  "type": "n8n-nodes-base.code",
  "position": [
    3280,
    4740
  ],
  "parameters": {
    "jsCode": "const service = {\n documentation_url: $('EventRouter').first().json.data.url,\n endpoints: [],\n};\n\nconst resources = Array.from(new Set($input.all().map(item => item.json.resource.toLowerCase().trim())));\n\nfor (const resource of resources) {\n const resourceLabel = resource.replace('api', '').trim();\n if (!resourceLabel) continue;\n const endpoint = {\n resource: resourceLabel[0].toUpperCase() + resourceLabel.substring(1, resourceLabel.length)\n };\n const operations = $input.all()\n .filter(item => item.json.resource.toLowerCase().trim() === resource)\n .map(item => item.json);\n endpoint.operations = operations.map(op => ({\n \"operation\": op.operation[0].toUpperCase() + op.operation.substring(1, op.operation.length),\n \"description\": op.description.match(/(^[^\\.]+.)/)[0],\n \"ApiUrl\": op.url,\n \"method\": op.method.toUpperCase(),\n \"method_documentation_url\": op.documentation_url || ''\n }));\n service.endpoints.push(endpoint);\n}\n\nreturn service;"
  },
  "typeVersion": 2
}

================ Node #1420 ================
{
  "id": "e60b7ccb-baa2-4095-8425-0e20bcdbfdd2",
  "name": "Upload to Drive",
  "type": "n8n-nodes-base.googleDrive",
  "position": [
    3640,
    4740
  ],
  "parameters": {
    "name": "={{ $json.filename }}",
    "content": "={{ $json.data }}",
    "driveId": {
      "__rl": true,
      "mode": "list",
      "value": "My Drive"
    },
    "options": {},
    "folderId": {
      "__rl": true,
      "mode": "list",
      "value": "149rBJYv9RKQx-vQO2qKUGfUzxk_J4lfw",
      "cachedResultUrl": "https://drive.google.com/drive/folders/149rBJYv9RKQx-vQO2qKUGfUzxk_J4lfw",
      "cachedResultName": "63. API Schema Extractor Remake"
    },
    "operation": "createFromText"
  },
  "typeVersion": 3
}

================ Node #1421 ================
{
  "id": "f90546e6-3610-4198-87fc-96d7e2b6bc57",
  "name": "Set Upload Fields",
  "type": "n8n-nodes-base.set",
  "position": [
    3460,
    4740
  ],
  "parameters": {
    "options": {},
    "assignments": {
      "assignments": [
        {
          "id": "3c7d4946-c385-4aff-93ec-ae0850964099",
          "name": "filename",
          "type": "string",
          "value": "={{\n $('EventRouter').first().json.data.service\n .replace(/\\W+/, '_')\n .toLowerCase()\n}}_api_operations_{{ $now.format('yyyyMMddhhmmss') }}.json"
        },
        {
          "id": "4a7a9fae-7267-4ef6-ae33-ac4cd9777ee9",
          "name": "data",
          "type": "string",
          "value": "={{ JSON.stringify($json, null, 4) }}"
        }
      ]
    }
  },
  "typeVersion": 3.4
}

================ Node #1422 ================
{
  "id": "c814b48d-2005-4150-a481-956f0b9506a5",
  "name": "Response OK2",
  "type": "n8n-nodes-base.set",
  "position": [
    3820,
    4740
  ],
  "parameters": {
    "options": {},
    "assignments": {
      "assignments": [
        {
          "id": "79598789-4468-4565-828f-fedc48be15c3",
          "name": "response",
          "type": "object",
          "value": "={{\n({\n id: $json.id,\n filename: $('Set Upload Fields').item.json.filename\n}).toJsonString()\n}}"
        }
      ]
    }
  },
  "executeOnce": true,
  "typeVersion": 3.4
}

================ Node #1423 ================
{
  "id": "4b1efa99-e8c8-49f5-8db8-916b8dde838d",
  "name": "Generate Event",
  "type": "n8n-nodes-base.set",
  "position": [
    5300,
    2980
  ],
  "parameters": {
    "mode": "raw",
    "options": {},
    "jsonOutput": "={{\n{\n \"eventType\": \"generate\",\n \"createdAt\": $now.toISO(),\n \"executedById\": $execution.id,\n \"data\": {\n \"row_number\": $('For Each Generate...').item.json.row_number,\n \"service\": $('For Each Generate...').item.json.Service,\n \"url\": $('For Each Generate...').item.json.Website,\n \"collection\": \"api_schema_crawler_and_extractor\"\n }\n}\n}}"
  },
  "typeVersion": 3.4
}

================ Node #1424 ================
{
  "id": "49b82a1a-d51e-4caf-b7ab-8d27d0585b60",
  "name": "Generate Pending",
  "type": "n8n-nodes-base.googleSheets",
  "position": [
    5160,
    2980
  ],
  "parameters": {
    "columns": {
      "value": {
        "row_number": "={{ $('For Each Generate...').item.json.row_number }}",
        "Stage 3 - Output File": "pending"
      },
      "schema": [
        {
          "id": "Service",
          "type": "string",
          "display": true,
          "removed": true,
          "required": false,
          "displayName": "Service",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "Website",
          "type": "string",
          "display": true,
          "removed": true,
          "required": false,
          "displayName": "Website",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "Stage 1 - Research",
          "type": "string",
          "display": true,
          "removed": true,
          "required": false,
          "displayName": "Stage 1 - Research",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "Stage 2 - Extraction",
          "type": "string",
          "display": true,
          "removed": true,
          "required": false,
          "displayName": "Stage 2 - Extraction",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "Stage 3 - Output File",
          "type": "string",
          "display": true,
          "removed": false,
          "required": false,
          "displayName": "Stage 3 - Output File",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "row_number",
          "type": "string",
          "display": true,
          "removed": false,
          "readOnly": true,
          "required": false,
          "displayName": "row_number",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        }
      ],
      "mappingMode": "defineBelow",
      "matchingColumns": [
        "row_number"
      ]
    },
    "options": {},
    "operation": "update",
    "sheetName": {
      "__rl": true,
      "mode": "list",
      "value": "gid=0",
      "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1l59ikBvEwPNSWIm2k6KRMFPTNImJPYqs9bzGT5dUiU0/edit#gid=0",
      "cachedResultName": "Sheet1"
    },
    "documentId": {
      "__rl": true,
      "mode": "list",
      "value": "1l59ikBvEwPNSWIm2k6KRMFPTNImJPYqs9bzGT5dUiU0",
      "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1l59ikBvEwPNSWIm2k6KRMFPTNImJPYqs9bzGT5dUiU0/edit?usp=drivesdk",
      "cachedResultName": "API Schema Crawler & Extractor"
    }
  },
  "executeOnce": false,
  "typeVersion": 4.5
}

================ Node #1425 ================
{
  "id": "7d1a937c-49cc-40d7-b2ca-d315c5efca93",
  "name": "Generate",
  "type": "n8n-nodes-base.executeWorkflow",
  "onError": "continueErrorOutput",
  "position": [
    5440,
    2980
  ],
  "parameters": {
    "mode": "each",
    "options": {
      "waitForSubWorkflow": true
    },
    "workflowId": {
      "__rl": true,
      "mode": "id",
      "value": "={{ $workflow.id }}"
    }
  },
  "typeVersion": 1.1
}

================ Node #1426 ================
{
  "id": "f35d843d-6c40-4725-b73f-8ca1a8e219bb",
  "name": "Generate Error",
  "type": "n8n-nodes-base.googleSheets",
  "position": [
    5600,
    3160
  ],
  "parameters": {
    "columns": {
      "value": {
        "row_number": "={{ $('For Each Generate...').item.json.row_number }}",
        "Stage 3 - Output File": "error"
      },
      "schema": [
        {
          "id": "Service",
          "type": "string",
          "display": true,
          "removed": true,
          "required": false,
          "displayName": "Service",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "Website",
          "type": "string",
          "display": true,
          "removed": true,
          "required": false,
          "displayName": "Website",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "Stage 1 - Research",
          "type": "string",
          "display": true,
          "removed": true,
          "required": false,
          "displayName": "Stage 1 - Research",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "Stage 2 - Extraction",
          "type": "string",
          "display": true,
          "removed": true,
          "required": false,
          "displayName": "Stage 2 - Extraction",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "Stage 3 - Output File",
          "type": "string",
          "display": true,
          "removed": false,
          "required": false,
          "displayName": "Stage 3 - Output File",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "row_number",
          "type": "string",
          "display": true,
          "removed": false,
          "readOnly": true,
          "required": false,
          "displayName": "row_number",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        }
      ],
      "mappingMode": "defineBelow",
      "matchingColumns": [
        "row_number"
      ]
    },
    "options": {},
    "operation": "update",
    "sheetName": {
      "__rl": true,
      "mode": "list",
      "value": "gid=0",
      "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1l59ikBvEwPNSWIm2k6KRMFPTNImJPYqs9bzGT5dUiU0/edit#gid=0",
      "cachedResultName": "Sheet1"
    },
    "documentId": {
      "__rl": true,
      "mode": "list",
      "value": "1l59ikBvEwPNSWIm2k6KRMFPTNImJPYqs9bzGT5dUiU0",
      "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1l59ikBvEwPNSWIm2k6KRMFPTNImJPYqs9bzGT5dUiU0/edit?usp=drivesdk",
      "cachedResultName": "API Schema Crawler & Extractor"
    }
  },
  "typeVersion": 4.5
}

================ Node #1427 ================
{
  "id": "e2f1f8e8-6852-4f19-98ec-85d9bd42729c",
  "name": "Generate Result",
  "type": "n8n-nodes-base.googleSheets",
  "position": [
    5600,
    2980
  ],
  "parameters": {
    "columns": {
      "value": {
        "row_number": "={{ $('For Each Generate...').item.json.row_number }}",
        "Output Destination": "={{ $json.response.filename }}",
        "Stage 3 - Output File": "ok"
      },
      "schema": [
        {
          "id": "Service",
          "type": "string",
          "display": true,
          "removed": true,
          "required": false,
          "displayName": "Service",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "Website",
          "type": "string",
          "display": true,
          "removed": true,
          "required": false,
          "displayName": "Website",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "Stage 1 - Research",
          "type": "string",
          "display": true,
          "removed": true,
          "required": false,
          "displayName": "Stage 1 - Research",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "Stage 2 - Extraction",
          "type": "string",
          "display": true,
          "removed": true,
          "required": false,
          "displayName": "Stage 2 - Extraction",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "Stage 3 - Output File",
          "type": "string",
          "display": true,
          "removed": false,
          "required": false,
          "displayName": "Stage 3 - Output File",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "Output Destination",
          "type": "string",
          "display": true,
          "removed": false,
          "required": false,
          "displayName": "Output Destination",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "row_number",
          "type": "string",
          "display": true,
          "removed": false,
          "readOnly": true,
          "required": false,
          "displayName": "row_number",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        }
      ],
      "mappingMode": "defineBelow",
      "matchingColumns": [
        "row_number"
      ]
    },
    "options": {},
    "operation": "update",
    "sheetName": {
      "__rl": true,
      "mode": "list",
      "value": "gid=0",
      "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1l59ikBvEwPNSWIm2k6KRMFPTNImJPYqs9bzGT5dUiU0/edit#gid=0",
      "cachedResultName": "Sheet1"
    },
    "documentId": {
      "__rl": true,
      "mode": "list",
      "value": "1l59ikBvEwPNSWIm2k6KRMFPTNImJPYqs9bzGT5dUiU0",
      "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1l59ikBvEwPNSWIm2k6KRMFPTNImJPYqs9bzGT5dUiU0/edit?usp=drivesdk",
      "cachedResultName": "API Schema Crawler & Extractor"
    }
  },
  "typeVersion": 4.5
}

================ Node #1428 ================
{
  "id": "00c5b05b-fd70-4d58-8fc6-4e9b8d689a43",
  "name": "Get All Extract",
  "type": "n8n-nodes-base.googleSheets",
  "position": [
    3620,
    2820
  ],
  "parameters": {
    "options": {},
    "filtersUI": {
      "values": [
        {
          "lookupValue": "=ok",
          "lookupColumn": "Stage 1 - Research"
        },
        {
          "lookupValue": "={{ \"\" }}",
          "lookupColumn": "Stage 2 - Extraction"
        }
      ]
    },
    "sheetName": {
      "__rl": true,
      "mode": "list",
      "value": "gid=0",
      "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1l59ikBvEwPNSWIm2k6KRMFPTNImJPYqs9bzGT5dUiU0/edit#gid=0",
      "cachedResultName": "Sheet1"
    },
    "documentId": {
      "__rl": true,
      "mode": "list",
      "value": "1l59ikBvEwPNSWIm2k6KRMFPTNImJPYqs9bzGT5dUiU0",
      "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1l59ikBvEwPNSWIm2k6KRMFPTNImJPYqs9bzGT5dUiU0/edit?usp=drivesdk",
      "cachedResultName": "API Schema Crawler & Extractor"
    }
  },
  "executeOnce": true,
  "typeVersion": 4.5,
  "alwaysOutputData": true
}

================ Node #1429 ================
{
  "id": "c477ea01-028d-4e69-b772-adb8c03d1522",
  "name": "Get All Research",
  "type": "n8n-nodes-base.googleSheets",
  "position": [
    2640,
    2820
  ],
  "parameters": {
    "options": {},
    "filtersUI": {
      "values": [
        {
          "lookupValue": "={{ \"\" }}",
          "lookupColumn": "Stage 1 - Research"
        }
      ]
    },
    "sheetName": {
      "__rl": true,
      "mode": "list",
      "value": "gid=0",
      "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1l59ikBvEwPNSWIm2k6KRMFPTNImJPYqs9bzGT5dUiU0/edit#gid=0",
      "cachedResultName": "Sheet1"
    },
    "documentId": {
      "__rl": true,
      "mode": "list",
      "value": "1l59ikBvEwPNSWIm2k6KRMFPTNImJPYqs9bzGT5dUiU0",
      "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1l59ikBvEwPNSWIm2k6KRMFPTNImJPYqs9bzGT5dUiU0/edit?usp=drivesdk",
      "cachedResultName": "API Schema Crawler & Extractor"
    }
  },
  "credentials": {
    "googleSheetsOAuth2Api": {
      "id": "aALuyzBGGfmdBzrU",
      "name": "Google Sheets account 2"
    }
  },
  "typeVersion": 4.5,
  "alwaysOutputData": true
}

================ Node #1430 ================
{
  "id": "60ba84c1-40cf-492f-bf52-c9edf5925646",
  "name": "For Each Research...",
  "type": "n8n-nodes-base.splitInBatches",
  "position": [
    3020,
    2820
  ],
  "parameters": {
    "options": {}
  },
  "typeVersion": 3
}

================ Node #1431 ================
{
  "id": "5365cd1a-c7f8-40fb-84b3-9e5306ecf462",
  "name": "For Each Extract...",
  "type": "n8n-nodes-base.splitInBatches",
  "position": [
    4000,
    2820
  ],
  "parameters": {
    "options": {}
  },
  "typeVersion": 3
}

================ Node #1432 ================
{
  "id": "d7a0743f-5f83-4c9b-b11c-85e2df3a4ecc",
  "name": "Wait1",
  "type": "n8n-nodes-base.wait",
  "position": [
    4780,
    3160
  ],
  "webhookId": "e9ad3ef0-7403-4e65-b0a4-4afdfb0cbc6d",
  "parameters": {
    "amount": 0
  },
  "typeVersion": 1.1
}

================ Node #1433 ================
{
  "id": "ec09ac70-5e05-463c-9d30-027e691a36b4",
  "name": "All Research Done?",
  "type": "n8n-nodes-base.if",
  "position": [
    2800,
    2820
  ],
  "parameters": {
    "options": {},
    "conditions": {
      "options": {
        "version": 2,
        "leftValue": "",
        "caseSensitive": true,
        "typeValidation": "strict"
      },
      "combinator": "and",
      "conditions": [
        {
          "id": "8d4b0159-af18-445e-a9ee-bd7952d8e0bd",
          "operator": {
            "type": "object",
            "operation": "empty",
            "singleValue": true
          },
          "leftValue": "={{ $input.first().json }}",
          "rightValue": ""
        }
      ]
    }
  },
  "typeVersion": 2.2
}

================ Node #1434 ================
{
  "id": "cd892e11-b4de-42f1-bab9-4bd783494c8a",
  "name": "All Extract Done?",
  "type": "n8n-nodes-base.if",
  "position": [
    3780,
    2820
  ],
  "parameters": {
    "options": {},
    "conditions": {
      "options": {
        "version": 2,
        "leftValue": "",
        "caseSensitive": true,
        "typeValidation": "strict"
      },
      "combinator": "and",
      "conditions": [
        {
          "id": "8d4b0159-af18-445e-a9ee-bd7952d8e0bd",
          "operator": {
            "type": "object",
            "operation": "empty",
            "singleValue": true
          },
          "leftValue": "={{ $input.first().json }}",
          "rightValue": ""
        }
      ]
    }
  },
  "typeVersion": 2.2
}

================ Node #1435 ================
{
  "id": "426091fb-d0eb-4589-8f2f-2bbeb9174cfc",
  "name": "Get All Generate",
  "type": "n8n-nodes-base.googleSheets",
  "position": [
    4600,
    2820
  ],
  "parameters": {
    "options": {},
    "filtersUI": {
      "values": [
        {
          "lookupValue": "=ok",
          "lookupColumn": "Stage 1 - Research"
        },
        {
          "lookupValue": "=ok",
          "lookupColumn": "Stage 2 - Extraction"
        },
        {
          "lookupValue": "={{ \"\" }}",
          "lookupColumn": "Stage 3 - Output File"
        }
      ]
    },
    "sheetName": {
      "__rl": true,
      "mode": "list",
      "value": "gid=0",
      "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1l59ikBvEwPNSWIm2k6KRMFPTNImJPYqs9bzGT5dUiU0/edit#gid=0",
      "cachedResultName": "Sheet1"
    },
    "documentId": {
      "__rl": true,
      "mode": "list",
      "value": "1l59ikBvEwPNSWIm2k6KRMFPTNImJPYqs9bzGT5dUiU0",
      "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1l59ikBvEwPNSWIm2k6KRMFPTNImJPYqs9bzGT5dUiU0/edit?usp=drivesdk",
      "cachedResultName": "API Schema Crawler & Extractor"
    }
  },
  "executeOnce": true,
  "typeVersion": 4.5
}

================ Node #1436 ================
{
  "id": "01e91cf6-5bd5-4891-ba1f-95176e444fe6",
  "name": "All Generate Done?",
  "type": "n8n-nodes-base.if",
  "position": [
    4780,
    2820
  ],
  "parameters": {
    "options": {},
    "conditions": {
      "options": {
        "version": 2,
        "leftValue": "",
        "caseSensitive": true,
        "typeValidation": "strict"
      },
      "combinator": "and",
      "conditions": [
        {
          "id": "8d4b0159-af18-445e-a9ee-bd7952d8e0bd",
          "operator": {
            "type": "object",
            "operation": "empty",
            "singleValue": true
          },
          "leftValue": "={{ $input.first().json }}",
          "rightValue": ""
        }
      ]
    }
  },
  "typeVersion": 2.2
}

================ Node #1437 ================
{
  "id": "08f3505d-aad8-475a-bf08-e3da12798367",
  "name": "For Each Generate...",
  "type": "n8n-nodes-base.splitInBatches",
  "position": [
    5000,
    2820
  ],
  "parameters": {
    "options": {}
  },
  "typeVersion": 3
}

================ Node #1438 ================
{
  "id": "1a1b30bd-91ab-41bd-9ead-39d24fc2643f",
  "name": "Wait2",
  "type": "n8n-nodes-base.wait",
  "position": [
    5780,
    3160
  ],
  "webhookId": "e9ad3ef0-7403-4e65-b0a4-4afdfb0cbc6d",
  "parameters": {
    "amount": 0
  },
  "typeVersion": 1.1
}

================ Node #1439 ================
{
  "id": "8f2be6bb-ab65-4c92-9ca1-d7ffa936a2a3",
  "name": "Has Results?1",
  "type": "n8n-nodes-base.if",
  "position": [
    4260,
    3720
  ],
  "parameters": {
    "options": {},
    "conditions": {
      "options": {
        "version": 2,
        "leftValue": "",
        "caseSensitive": true,
        "typeValidation": "strict"
      },
      "combinator": "and",
      "conditions": [
        {
          "id": "1223d607-45a8-44b1-b510-56fdbe013eba",
          "operator": {
            "type": "array",
            "operation": "notEmpty",
            "singleValue": true
          },
          "leftValue": "={{ $input.all().filter(item => item.json.body) }}",
          "rightValue": ""
        }
      ]
    }
  },
  "typeVersion": 2.2
}

================ Node #1440 ================
{
  "id": "82fe66bf-4348-4673-8c64-3415f642fb4b",
  "name": "Response Scrape Error",
  "type": "n8n-nodes-base.set",
  "position": [
    4460,
    3900
  ],
  "parameters": {
    "options": {},
    "assignments": {
      "assignments": [
        {
          "id": "5bb23ce9-eb72-4868-9344-9e5d3952cc52",
          "name": "response",
          "type": "string",
          "value": "web scraping error"
        }
      ]
    }
  },
  "executeOnce": true,
  "typeVersion": 3.4
}

================ Node #1441 ================
{
  "id": "3625591b-cb48-4131-ae8a-56d1e132bb5a",
  "name": "Has Results?3",
  "type": "n8n-nodes-base.if",
  "position": [
    4780,
    3580
  ],
  "parameters": {
    "options": {},
    "conditions": {
      "options": {
        "version": 2,
        "leftValue": "",
        "caseSensitive": true,
        "typeValidation": "strict"
      },
      "combinator": "and",
      "conditions": [
        {
          "id": "1223d607-45a8-44b1-b510-56fdbe013eba",
          "operator": {
            "type": "array",
            "operation": "notEmpty",
            "singleValue": true
          },
          "leftValue": "={{ $input.all().filter(item => item.json.body) }}",
          "rightValue": ""
        }
      ]
    }
  },
  "typeVersion": 2.2
}

================ Node #1442 ================
{
  "id": "f82a4a25-5f93-4ba4-baae-08283c4ccadd",
  "name": "Response No API Docs",
  "type": "n8n-nodes-base.set",
  "position": [
    4980,
    3740
  ],
  "parameters": {
    "options": {},
    "assignments": {
      "assignments": [
        {
          "id": "5bb23ce9-eb72-4868-9344-9e5d3952cc52",
          "name": "response",
          "type": "string",
          "value": "no api docs in web results"
        }
      ]
    }
  },
  "executeOnce": true,
  "typeVersion": 3.4
}

================ Node #1443 ================
{
  "id": "4c3bb934-966c-445a-893f-0676a59140ee",
  "name": "Sticky Note",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    3020,
    2580
  ],
  "parameters": {
    "width": 620,
    "height": 180,
    "content": "## Stage 1 - Research for API Documentation\n- Fetch a list of services pending research from Database (Google Sheet)\n- Uses a search engine (Google) to find API Documentation for each service\n- Uses Webscraper (Apify) to read the contents of search results to filter irrelevant pages\n- Stores webpage contents and metadata into Vector Store (Qdrant)"
  },
  "typeVersion": 1
}

================ Node #1444 ================
{
  "id": "bc269a57-f353-4cc8-bd2e-43236fa55d39",
  "name": "Sticky Note1",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    4000,
    2580
  ],
  "parameters": {
    "width": 760,
    "height": 180,
    "content": "## Stage 2 - Extract API Operations From Documentation\n- Fetch a list of services pending extraction from Database (Google Sheet)\n- Query Vector store (Qdrant) to figure out service's products, solutions and offerings\n- Query Vector store (Qdrant) again for API documentation relevant to these products, solutions and offerings\n- Extract any API operations found in the API documentation results using LLM (Gemini)\n- Store extracted API operations into Database (Google Sheet)"
  },
  "typeVersion": 1
}

================ Node #1445 ================
{
  "id": "d2dcad47-f655-4a15-ac92-6dab05eea4e1",
  "name": "Sticky Note2",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    5000,
    2580
  ],
  "parameters": {
    "width": 740,
    "height": 180,
    "content": "## Stage 3 - Generate Custom Schema From API Operations\n- Fetch a list of services pending generation from Database (Google Sheet)\n- Fetch all API operations for each service from Database (Google Sheet)\n- Use Code node to combine and group all API operations for a service and convert to a custom schema\n- Upload the resulting custom schema to file storage (Google Drive)"
  },
  "typeVersion": 1
}

================ Node #1446 ================
{
  "id": "d1e1a271-4260-49c3-bda6-2864605c7365",
  "name": "Sticky Note3",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    3100,
    3680
  ],
  "parameters": {
    "color": 5,
    "width": 180,
    "height": 80,
    "content": "## Stage 1 - Subworkflow"
  },
  "typeVersion": 1
}

================ Node #1447 ================
{
  "id": "1e50f04a-94ff-48b4-aa99-cd1d4f1d12be",
  "name": "Sticky Note4",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    3100,
    4080
  ],
  "parameters": {
    "color": 5,
    "width": 180,
    "height": 80,
    "content": "## Stage 2 - Subworkflow"
  },
  "typeVersion": 1
}

================ Node #1448 ================
{
  "id": "f8334dbd-b542-404a-b4fc-6cf7cc07730d",
  "name": "Sticky Note5",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    3100,
    4620
  ],
  "parameters": {
    "color": 5,
    "width": 180,
    "height": 80,
    "content": "## Stage 3 - Subworkflow"
  },
  "typeVersion": 1
}

================ Node #1449 ================
{
  "id": "c3ef40df-084e-435c-9a11-3aa0a2f94f36",
  "name": "When clicking \"Test workflow\"",
  "type": "n8n-nodes-base.manualTrigger",
  "position": [
    740,
    520
  ],
  "parameters": {},
  "typeVersion": 1
}

================ Node #1450 ================
{
  "id": "e0583472-a450-4582-83bc-84a014bea543",
  "name": "Split Out",
  "type": "n8n-nodes-base.splitOut",
  "position": [
    1640,
    520
  ],
  "parameters": {
    "options": {},
    "fieldToSplitOut": "output.results"
  },
  "typeVersion": 1
}

================ Node #1451 ================
{
  "id": "b8aa573d-5b63-4669-900f-bcc915b6ad41",
  "name": "Save to Google Sheets",
  "type": "n8n-nodes-base.googleSheets",
  "position": [
    1900,
    520
  ],
  "parameters": {
    "columns": {
      "value": {},
      "schema": [
        {
          "id": "name",
          "type": "string",
          "display": true,
          "removed": false,
          "required": false,
          "displayName": "name",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "price",
          "type": "string",
          "display": true,
          "removed": false,
          "required": false,
          "displayName": "price",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "availability",
          "type": "string",
          "display": true,
          "removed": false,
          "required": false,
          "displayName": "availability",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "image",
          "type": "string",
          "display": true,
          "removed": false,
          "required": false,
          "displayName": "image",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "link",
          "type": "string",
          "display": true,
          "removed": false,
          "required": false,
          "displayName": "link",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        }
      ],
      "mappingMode": "autoMapInputData",
      "matchingColumns": [
        "Book prices"
      ]
    },
    "options": {},
    "operation": "append",
    "sheetName": {
      "__rl": true,
      "mode": "list",
      "value": 258629074,
      "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1VDbfi2PpeheD2ZlO6feX3RdMeSsm0XukQlNVW8uVcuo/edit#gid=258629074",
      "cachedResultName": "Sheet2"
    },
    "documentId": {
      "__rl": true,
      "mode": "list",
      "value": "1VDbfi2PpeheD2ZlO6feX3RdMeSsm0XukQlNVW8uVcuo",
      "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1VDbfi2PpeheD2ZlO6feX3RdMeSsm0XukQlNVW8uVcuo/edit?usp=drivesdk",
      "cachedResultName": "Book Prices"
    }
  },
  "credentials": {
    "googleSheetsOAuth2Api": {
      "id": "GHRceL2SKjXxz0Dx",
      "name": "Google Sheets account"
    }
  },
  "typeVersion": 4.2
}

================ Node #1452 ================
{
  "id": "a63c3ab3-6aab-43b2-8af6-8b00e24e0ee6",
  "name": "OpenAI Chat Model",
  "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
  "position": [
    1300,
    700
  ],
  "parameters": {
    "options": {}
  },
  "credentials": {
    "openAiApi": {
      "id": "5oYe8Cxj7liOPAKk",
      "name": "Derek T"
    }
  },
  "typeVersion": 1
}

================ Node #1453 ================
{
  "id": "40326966-0c46-4df2-8d80-fa014e05b693",
  "name": "Information Extractor",
  "type": "@n8n/n8n-nodes-langchain.informationExtractor",
  "position": [
    1260,
    520
  ],
  "parameters": {
    "text": "={{ $json.data }}",
    "options": {
      "systemPromptTemplate": "You are an expert extraction algorithm.\nOnly extract relevant information from the text.\nIf you do not know the value of an attribute asked to extract, you may omit the attribute's value.\nAlways output the data in a json array called results. Each book should have a title, price, availability and product_url, image_url"
    },
    "schemaType": "manual",
    "inputSchema": "{\n \"results\": {\n \"type\": \"array\",\n \"items\": {\n \"type\": \"object\",\n \"properties\": {\n \"price\": {\n \"type\": \"string\"\n },\n \"title\": {\n \"type\": \"string\"\n },\n \"image_url\": {\n \"type\": \"string\"\n },\n \"product_url\": {\n \"type\": \"string\"\n },\n \"availability\": {\n \"type\": \"string\"\n } \n }\n }\n }\n}"
  },
  "typeVersion": 1
}

================ Node #1454 ================
{
  "id": "8ddca560-8da7-4090-b865-0523f95ca463",
  "name": "Jina Fetch",
  "type": "n8n-nodes-base.httpRequest",
  "position": [
    1020,
    520
  ],
  "parameters": {
    "url": "https://r.jina.ai/http://books.toscrape.com/catalogue/category/books/historical-fiction_4/index.html",
    "options": {
      "allowUnauthorizedCerts": true
    },
    "authentication": "genericCredentialType",
    "genericAuthType": "httpHeaderAuth"
  },
  "credentials": {
    "httpHeaderAuth": {
      "id": "ALBmOXmADcPmyHr1",
      "name": "jina"
    }
  },
  "typeVersion": 4.1
}

================ Node #1455 ================
{
  "id": "b1745cea-fdbe-4f14-b09c-884549beac7e",
  "name": "Sticky Note5",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    80,
    320
  ],
  "parameters": {
    "color": 5,
    "width": 587,
    "height": 570,
    "content": "## Start here: Step-by Step Youtube Tutorial :star:\n\n[![AI Powered Web Scraping : the EASY way with n8n and Jina.ai (no-code!)](https://img.youtube.com/vi/f3AJYXHirr8/sddefault.jpg)](https://youtu.be/f3AJYXHirr8)\n\n[Google Sheet Example](https://docs.google.com/spreadsheets/d/1VDbfi2PpeheD2ZlO6feX3RdMeSsm0XukQlNVW8uVcuo/edit?usp=sharing)\n\n\n"
  },
  "typeVersion": 1
}

================ Node #1456 ================
{
  "id": "38ffe41a-ecdf-4bb4-bd55-51998abab0f5",
  "name": "WhatsApp Trigger",
  "type": "n8n-nodes-base.whatsAppTrigger",
  "position": [
    220,
    300
  ],
  "webhookId": "0b1b3a9b-2f6a-4f5a-8385-6365d96f4802",
  "parameters": {
    "updates": [
      "messages"
    ]
  },
  "credentials": {
    "whatsAppTriggerApi": {
      "id": "H3uYNtpeczKMqtYm",
      "name": "WhatsApp OAuth account"
    }
  },
  "typeVersion": 1
}

================ Node #1457 ================
{
  "id": "a35ac268-eff0-46cd-ac4e-c9b047a3f893",
  "name": "Get Audio URL",
  "type": "n8n-nodes-base.whatsApp",
  "position": [
    1020,
    -160
  ],
  "parameters": {
    "resource": "media",
    "operation": "mediaUrlGet",
    "mediaGetId": "={{ $json.audio.id }}",
    "requestOptions": {}
  },
  "credentials": {
    "whatsAppApi": {
      "id": "9SFJPeqrpChOkAmw",
      "name": "WhatsApp account"
    }
  },
  "typeVersion": 1
}

================ Node #1458 ================
{
  "id": "a3be543c-949c-4443-bf82-e0d00419ae23",
  "name": "Get Video URL",
  "type": "n8n-nodes-base.whatsApp",
  "position": [
    1020,
    200
  ],
  "parameters": {
    "resource": "media",
    "operation": "mediaUrlGet",
    "mediaGetId": "={{ $json.video.id }}",
    "requestOptions": {}
  },
  "credentials": {
    "whatsAppApi": {
      "id": "9SFJPeqrpChOkAmw",
      "name": "WhatsApp account"
    }
  },
  "typeVersion": 1
}

================ Node #1459 ================
{
  "id": "dd3cd0e7-0d1e-40cf-8120-aba0d1646d6d",
  "name": "Get Image URL",
  "type": "n8n-nodes-base.whatsApp",
  "position": [
    1020,
    540
  ],
  "parameters": {
    "resource": "media",
    "operation": "mediaUrlGet",
    "mediaGetId": "={{ $json.image.id }}",
    "requestOptions": {}
  },
  "credentials": {
    "whatsAppApi": {
      "id": "9SFJPeqrpChOkAmw",
      "name": "WhatsApp account"
    }
  },
  "typeVersion": 1
}

================ Node #1460 ================
{
  "id": "a3505c93-2719-4a11-8813-39844fe0dd1a",
  "name": "Download Video",
  "type": "n8n-nodes-base.httpRequest",
  "position": [
    1180,
    200
  ],
  "parameters": {
    "url": "={{ $json.url }}",
    "options": {},
    "authentication": "predefinedCredentialType",
    "nodeCredentialType": "whatsAppApi"
  },
  "credentials": {
    "whatsAppApi": {
      "id": "9SFJPeqrpChOkAmw",
      "name": "WhatsApp account"
    }
  },
  "typeVersion": 4.2
}

================ Node #1461 ================
{
  "id": "b22e3a7d-5fa1-4b8d-be08-b59f5bb5c417",
  "name": "Download Audio",
  "type": "n8n-nodes-base.httpRequest",
  "position": [
    1180,
    -160
  ],
  "parameters": {
    "url": "={{ $json.url }}",
    "options": {},
    "authentication": "predefinedCredentialType",
    "nodeCredentialType": "whatsAppApi"
  },
  "credentials": {
    "whatsAppApi": {
      "id": "9SFJPeqrpChOkAmw",
      "name": "WhatsApp account"
    }
  },
  "typeVersion": 4.2
}

================ Node #1462 ================
{
  "id": "dcadbd30-598e-443b-a3a7-10d7f9210f49",
  "name": "Download Image",
  "type": "n8n-nodes-base.httpRequest",
  "position": [
    1180,
    540
  ],
  "parameters": {
    "url": "={{ $json.url }}",
    "options": {},
    "authentication": "predefinedCredentialType",
    "nodeCredentialType": "whatsAppApi"
  },
  "credentials": {
    "whatsAppApi": {
      "id": "9SFJPeqrpChOkAmw",
      "name": "WhatsApp account"
    }
  },
  "typeVersion": 4.2
}

================ Node #1463 ================
{
  "id": "d38b6f73-272e-4833-85fc-46ce0db91f6a",
  "name": "Window Buffer Memory",
  "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
  "position": [
    2380,
    560
  ],
  "parameters": {
    "sessionKey": "=whatsapp-tutorial-{{ $json.from }}",
    "sessionIdType": "customKey"
  },
  "typeVersion": 1.2
}

================ Node #1464 ================
{
  "id": "3459f96b-c0de-4514-9d53-53a9b40d534e",
  "name": "Get User's Message",
  "type": "n8n-nodes-base.set",
  "position": [
    2080,
    380
  ],
  "parameters": {
    "options": {},
    "assignments": {
      "assignments": [
        {
          "id": "d990cbd6-a408-4ec4-a889-41be698918d9",
          "name": "message_type",
          "type": "string",
          "value": "={{ $('Split Out Message Parts').item.json.type }}"
        },
        {
          "id": "23b785c3-f38e-4706-80b7-51f333bba3bd",
          "name": "message_text",
          "type": "string",
          "value": "={{ $json.text }}"
        },
        {
          "id": "6e83f9a7-cf75-4182-b2d2-3151e8af76b9",
          "name": "from",
          "type": "string",
          "value": "={{ $('WhatsApp Trigger').item.json.messages[0].from }}"
        },
        {
          "id": "da4b602a-28ca-4b0d-a747-c3d3698c3731",
          "name": "message_caption",
          "type": "string",
          "value": "={{ $('Redirect Message Types').item.json.video && $('Redirect Message Types').item.json.video.caption || '' }}\n{{ $('Redirect Message Types').item.json.image && $('Redirect Message Types').item.json.image.caption || ''}}\n{{ $('Redirect Message Types').item.json.audio && $('Redirect Message Types').item.json.audio.caption || ''}}"
        }
      ]
    }
  },
  "typeVersion": 3.4
}

================ Node #1465 ================
{
  "id": "7a4c9905-37f0-4cfe-a928-91c7e38914b9",
  "name": "Split Out Message Parts",
  "type": "n8n-nodes-base.splitOut",
  "position": [
    460,
    300
  ],
  "parameters": {
    "options": {},
    "fieldToSplitOut": "messages"
  },
  "typeVersion": 1
}

================ Node #1466 ================
{
  "id": "f2ecc9a9-bdd9-475d-be0c-43594d0cb613",
  "name": "Wikipedia",
  "type": "@n8n/n8n-nodes-langchain.toolWikipedia",
  "position": [
    2500,
    560
  ],
  "parameters": {},
  "typeVersion": 1
}

================ Node #1467 ================
{
  "id": "325dac6d-6698-41e0-8d2f-9ac5d84c245e",
  "name": "Redirect Message Types",
  "type": "n8n-nodes-base.switch",
  "position": [
    740,
    380
  ],
  "parameters": {
    "rules": {
      "values": [
        {
          "outputKey": "Audio Message",
          "conditions": {
            "options": {
              "version": 2,
              "leftValue": "",
              "caseSensitive": true,
              "typeValidation": "strict"
            },
            "combinator": "and",
            "conditions": [
              {
                "operator": {
                  "type": "boolean",
                  "operation": "true",
                  "singleValue": true
                },
                "leftValue": "={{ $json.type == 'audio' && Boolean($json.audio) }}",
                "rightValue": "audio"
              }
            ]
          },
          "renameOutput": true
        },
        {
          "outputKey": "Video Message",
          "conditions": {
            "options": {
              "version": 2,
              "leftValue": "",
              "caseSensitive": true,
              "typeValidation": "strict"
            },
            "combinator": "and",
            "conditions": [
              {
                "id": "82aa5ff4-c9b6-4187-a27e-c7c5d9bfdda0",
                "operator": {
                  "type": "boolean",
                  "operation": "true",
                  "singleValue": true
                },
                "leftValue": "={{ $json.type == 'video' && Boolean($json.video) }}",
                "rightValue": ""
              }
            ]
          },
          "renameOutput": true
        },
        {
          "outputKey": "Image Message",
          "conditions": {
            "options": {
              "version": 2,
              "leftValue": "",
              "caseSensitive": true,
              "typeValidation": "strict"
            },
            "combinator": "and",
            "conditions": [
              {
                "id": "05b30af4-967b-4824-abdc-84a8292ac0e5",
                "operator": {
                  "type": "boolean",
                  "operation": "true",
                  "singleValue": true
                },
                "leftValue": "={{ $json.type == 'image' && Boolean($json.image) }}",
                "rightValue": ""
              }
            ]
          },
          "renameOutput": true
        }
      ]
    },
    "options": {
      "fallbackOutput": "extra",
      "renameFallbackOutput": "Text Message"
    }
  },
  "typeVersion": 3.2
}

================ Node #1468 ================
{
  "id": "b25c7d65-b9ea-4f90-8516-1747130501b2",
  "name": "Sticky Note",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    220,
    20
  ],
  "parameters": {
    "color": 7,
    "width": 335.8011507479863,
    "height": 245.72612197928734,
    "content": "## 1. WhatsApp Trigger\n[Learn more about the WhatsApp Trigger](https://docs.n8n.io/integrations/builtin/trigger-nodes/n8n-nodes-base.whatsapptrigger)\n\nTo start receiving WhatsApp messages in your workflow, there are quite a few steps involved so be sure to follow the n8n documentation. When we recieve WhatsApp messages, we'll split out the messages part of the payload and handle them depending on the message type using the Switch node."
  },
  "typeVersion": 1
}

================ Node #1469 ================
{
  "id": "0d3d721e-fefc-4b50-abe1-0dd504c962ff",
  "name": "Sticky Note1",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    1020,
    -280
  ],
  "parameters": {
    "color": 7,
    "width": 356.65822784810103,
    "height": 97.23360184119679,
    "content": "### 2. Transcribe Audio Messages \ud83d\udcac\nFor audio messages or voice notes, we can use GPT4o to transcribe the message for our AI Agent."
  },
  "typeVersion": 1
}

================ Node #1470 ================
{
  "id": "59de051e-f0d4-4c07-9680-03923ab81f57",
  "name": "Sticky Note2",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    1020,
    40
  ],
  "parameters": {
    "color": 7,
    "width": 492.5258918296896,
    "height": 127.13555811277331,
    "content": "### 3. Describe Video Messages \ud83c\udfac\nFor video messages, one approach is to use a Multimodal Model that supports parsing video. Currently, Google Gemini is a well-tested service for this task. We'll need to use the HTTP request node as currrently n8n's LLM node doesn't currently support video binary types."
  },
  "typeVersion": 1
}

================ Node #1471 ================
{
  "id": "e2ca780f-01c0-4a5f-9f0a-e15575d0b803",
  "name": "Sticky Note3",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    1020,
    420
  ],
  "parameters": {
    "color": 7,
    "width": 356.65822784810103,
    "height": 97.23360184119679,
    "content": "### 4. Analyse Image Messages \ud83c\udfde\ufe0f\nFor image messages, we can use GPT4o to explain what is going on in the message for our AI Agent."
  },
  "typeVersion": 1
}

================ Node #1472 ================
{
  "id": "6eea3c0f-4501-4355-b3b7-b752c93d5c48",
  "name": "Sticky Note4",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    1020,
    720
  ],
  "parameters": {
    "color": 7,
    "width": 428.24395857307246,
    "height": 97.23360184119679,
    "content": "### 5. Text summarizer \ud83d\udcd8\nFor text messages, we don't need to do much transformation but it's nice to summarize for easier understanding."
  },
  "typeVersion": 1
}

================ Node #1473 ================
{
  "id": "925a3871-9cdb-49f9-a2b9-890617d09965",
  "name": "Get Text",
  "type": "n8n-nodes-base.wait",
  "position": [
    1020,
    840
  ],
  "webhookId": "99b49c83-d956-46d2-b8d3-d65622121ad9",
  "parameters": {
    "amount": 0
  },
  "typeVersion": 1.1
}

================ Node #1474 ================
{
  "id": "9225a6b9-322a-4a33-86af-6586fcf246b9",
  "name": "Sticky Note5",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    2280,
    60
  ],
  "parameters": {
    "color": 7,
    "width": 500.7797468354428,
    "height": 273.14522439585744,
    "content": "## 6. Generate Response with AI Agent\n[Read more about the AI Agent node](https://docs.n8n.io/integrations/builtin/cluster-nodes/root-nodes/n8n-nodes-langchain.agent)\n\nNow that we'll able to handle all message types from WhatsApp, we could do pretty much anything we want with it by giving it our AI agent. Examples could include handling customer support, helping to book appointments or verifying documents.\n\nIn this demonstration, we'll just create a simple AI Agent which responds to our WhatsApp user's message and returns a simple response."
  },
  "typeVersion": 1
}

================ Node #1475 ================
{
  "id": "5a863e5d-e7fb-4e89-851b-e0936f5937e7",
  "name": "Sticky Note6",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    2740,
    660
  ],
  "parameters": {
    "color": 7,
    "width": 384.12151898734186,
    "height": 211.45776754890682,
    "content": "## 7. Respond to WhatsApp User\n[Read more about the Whatsapp node](https://docs.n8n.io/integrations/builtin/app-nodes/n8n-nodes-base.whatsapp/)\n\nTo close out this demonstration, we'll simple send a simple text message back to the user. Note that this WhatsApp node also allows you to send images, audio, videos, documents as well as location!"
  },
  "typeVersion": 1
}

================ Node #1476 ================
{
  "id": "89df6f6c-2d91-4c14-a51a-4be29b1018ec",
  "name": "Respond to User",
  "type": "n8n-nodes-base.whatsApp",
  "position": [
    2740,
    480
  ],
  "parameters": {
    "textBody": "={{ $json.output }}",
    "operation": "send",
    "phoneNumberId": "477115632141067",
    "requestOptions": {},
    "additionalFields": {},
    "recipientPhoneNumber": "={{ $('WhatsApp Trigger').item.json.messages[0].from }}"
  },
  "credentials": {
    "whatsAppApi": {
      "id": "9SFJPeqrpChOkAmw",
      "name": "WhatsApp account"
    }
  },
  "typeVersion": 1
}

================ Node #1477 ================
{
  "id": "67709b9e-a9b3-456b-9e68-71720b0cd75e",
  "name": "Sticky Note7",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    -340,
    -140
  ],
  "parameters": {
    "width": 470.66513233601853,
    "height": 562.8608514850005,
    "content": "## Try It Out!\n\n### This n8n template demonstrates the beginnings of building your own n8n-powered WhatsApp chatbot! Under the hood, utilise n8n's powerful AI features to handle different message types and use an AI agent to respond to the user. A powerful tool for any use-case!\n\n* Incoming WhatsApp Trigger provides a way to get messages into the workflow.\n* The message received is extracted and sent through 1 of 4 branches for processing.\n* Each processing branch uses AI to analyse, summarize or transcribe the message so that the AI agent can understand it.\n* The AI Agent is used to generate a response generally and uses a wikipedia tool for more complex queries.\n* Finally, the response message is sent back to the WhatsApp user using the WhatsApp node.\n\n### Need Help?\nJoin the [Discord](https://discord.com/invite/XPKeKXeB7d) or ask in the [Forum](https://community.n8n.io/)!"
  },
  "typeVersion": 1
}

================ Node #1478 ================
{
  "id": "10ae1f60-c025-4b63-8e02-4e6353bb67dc",
  "name": "Sticky Note8",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    -340,
    440
  ],
  "parameters": {
    "color": 5,
    "width": 473.28063885246377,
    "height": 96.0144533433243,
    "content": "### Activate workflow to use!\nYou must activate the workflow to use this WhatsApp Chabot. If you are self-hosting, ensure WhatsApp is able to connect to your server."
  },
  "typeVersion": 1
}

================ Node #1479 ================
{
  "id": "2f0fd658-a138-4f50-95a7-7ddc4eb90fab",
  "name": "Image Explainer",
  "type": "@n8n/n8n-nodes-langchain.chainLlm",
  "position": [
    1700,
    540
  ],
  "parameters": {
    "text": "Here is an image sent by the user. Describe the image and transcribe any text visible in the image.",
    "messages": {
      "messageValues": [
        {
          "type": "HumanMessagePromptTemplate",
          "messageType": "imageBinary"
        }
      ]
    },
    "promptType": "define"
  },
  "typeVersion": 1.4
}

================ Node #1480 ================
{
  "id": "d969ce8b-d6c4-4918-985e-3420557ef707",
  "name": "Format Response",
  "type": "n8n-nodes-base.set",
  "position": [
    1860,
    200
  ],
  "parameters": {
    "options": {},
    "assignments": {
      "assignments": [
        {
          "id": "2ec0e573-373b-4692-bfae-86b6d3b9aa9a",
          "name": "text",
          "type": "string",
          "value": "={{ $json.candidates[0].content.parts[0].text }}"
        }
      ]
    }
  },
  "typeVersion": 3.4
}

================ Node #1481 ================
{
  "id": "b67c9c4e-e13f-4ee4-bf01-3fd9055a91be",
  "name": "Sticky Note9",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    1540,
    180
  ],
  "parameters": {
    "width": 260,
    "height": 305.35604142692785,
    "content": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n### \ud83d\udea8 Google Gemini Required!\nNot using Gemini? Feel free to swap this out for any Multimodal Model that supports Video."
  },
  "typeVersion": 1
}

================ Node #1482 ================
{
  "id": "8dd972be-305b-4d26-aa05-1dee17411d8a",
  "name": "Google Gemini Chat Model",
  "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
  "position": [
    2240,
    560
  ],
  "parameters": {
    "options": {},
    "modelName": "models/gemini-1.5-pro-002"
  },
  "credentials": {
    "googlePalmApi": {
      "id": "dSxo6ns5wn658r8N",
      "name": "Google Gemini(PaLM) Api account"
    }
  },
  "typeVersion": 1
}

================ Node #1483 ================
{
  "id": "00a883a6-7688-4e82-926b-c5ba680378b7",
  "name": "Sticky Note10",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    1540,
    -180
  ],
  "parameters": {
    "width": 260,
    "height": 294.22048331415436,
    "content": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n### \ud83d\udea8 Google Gemini Required!\nNot using Gemini? Feel free to swap this out for any Multimodal Model that supports Audio."
  },
  "typeVersion": 1
}

================ Node #1484 ================
{
  "id": "d0c7c2f6-b626-4ec5-86ff-96523749db2c",
  "name": "Google Gemini Audio",
  "type": "n8n-nodes-base.httpRequest",
  "position": [
    1620,
    -160
  ],
  "parameters": {
    "url": "https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-pro-002:generateContent",
    "method": "POST",
    "options": {},
    "jsonBody": "={{\n{\n \"contents\": [{\n \"parts\":[\n {\"text\": \"Transcribe this audio\"},\n {\"inlineData\": {\n \"mimeType\": `audio/${$binary.data.fileExtension}`,\n \"data\": $input.item.binary.data.data }\n }\n ]\n }]\n}\n}}",
    "sendBody": true,
    "sendHeaders": true,
    "specifyBody": "json",
    "authentication": "predefinedCredentialType",
    "headerParameters": {
      "parameters": [
        {
          "name": "Content-Type",
          "value": "application/json"
        }
      ]
    },
    "nodeCredentialType": "googlePalmApi"
  },
  "credentials": {
    "googlePalmApi": {
      "id": "dSxo6ns5wn658r8N",
      "name": "Google Gemini(PaLM) Api account"
    }
  },
  "typeVersion": 4.2
}

================ Node #1485 ================
{
  "id": "27261815-f949-48e8-920d-7bf880ea87ce",
  "name": "Google Gemini Video",
  "type": "n8n-nodes-base.httpRequest",
  "position": [
    1620,
    200
  ],
  "parameters": {
    "url": "https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-pro-002:generateContent",
    "method": "POST",
    "options": {},
    "jsonBody": "={{\n{\n \"contents\": [{\n \"parts\":[\n {\"text\": \"Describe this video\"},\n {\"inlineData\": {\n \"mimeType\": `video/${$binary.data.fileExtension}`,\n \"data\": $input.item.binary.data.data }\n }\n ]\n }]\n}\n}}",
    "sendBody": true,
    "sendHeaders": true,
    "specifyBody": "json",
    "authentication": "predefinedCredentialType",
    "headerParameters": {
      "parameters": [
        {
          "name": "Content-Type",
          "value": "application/json"
        }
      ]
    },
    "nodeCredentialType": "googlePalmApi"
  },
  "credentials": {
    "googlePalmApi": {
      "id": "dSxo6ns5wn658r8N",
      "name": "Google Gemini(PaLM) Api account"
    }
  },
  "typeVersion": 4.2
}

================ Node #1486 ================
{
  "id": "7e28786b-ab19-4969-9915-2432a25b49d3",
  "name": "Google Gemini Chat Model1",
  "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
  "position": [
    1680,
    680
  ],
  "parameters": {
    "options": {},
    "modelName": "models/gemini-1.5-pro-002"
  },
  "credentials": {
    "googlePalmApi": {
      "id": "dSxo6ns5wn658r8N",
      "name": "Google Gemini(PaLM) Api account"
    }
  },
  "typeVersion": 1
}

================ Node #1487 ================
{
  "id": "8832dac3-9433-4dcc-a805-346408042bf2",
  "name": "Google Gemini Chat Model2",
  "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
  "position": [
    1680,
    980
  ],
  "parameters": {
    "options": {},
    "modelName": "models/gemini-1.5-pro-002"
  },
  "credentials": {
    "googlePalmApi": {
      "id": "dSxo6ns5wn658r8N",
      "name": "Google Gemini(PaLM) Api account"
    }
  },
  "typeVersion": 1
}

================ Node #1488 ================
{
  "id": "73d0af9e-d009-4859-b60d-48a2fbeda932",
  "name": "Format Response1",
  "type": "n8n-nodes-base.set",
  "position": [
    1860,
    -160
  ],
  "parameters": {
    "options": {},
    "assignments": {
      "assignments": [
        {
          "id": "2ec0e573-373b-4692-bfae-86b6d3b9aa9a",
          "name": "text",
          "type": "string",
          "value": "={{ $json.candidates[0].content.parts[0].text }}"
        }
      ]
    }
  },
  "typeVersion": 3.4
}

================ Node #1489 ================
{
  "id": "2ad0e104-0924-47ef-ad11-d84351d72083",
  "name": "Text Summarizer",
  "type": "@n8n/n8n-nodes-langchain.chainLlm",
  "position": [
    1700,
    840
  ],
  "parameters": {
    "text": "={{ $json.text.body || $json.text }}",
    "messages": {
      "messageValues": [
        {
          "message": "Summarize the user's message succinctly."
        }
      ]
    },
    "promptType": "define"
  },
  "typeVersion": 1.4
}

================ Node #1490 ================
{
  "id": "85eaad3a-c4d1-4ae7-a37b-0b72be39409d",
  "name": "AI Agent",
  "type": "@n8n/n8n-nodes-langchain.agent",
  "position": [
    2280,
    380
  ],
  "parameters": {
    "text": "=The user sent the following message\nmessage type: {{ $json.message_type }}\nmessage text or description:\n```{{ $json.message_text }}```\n{{ $json.message_caption ? `message caption: ${$json.message_caption.trim()}` : '' }}",
    "options": {
      "systemMessage": "You are a general knowledge assistant made available to the public via whatsapp. Help answer the user's query succiently and factually."
    },
    "promptType": "define"
  },
  "typeVersion": 1.6
}

================ Node #1491 ================
{
  "id": "b508ab50-158a-4cbf-a52e-f53e1804e770",
  "name": "When clicking \u2018Test workflow\u2019",
  "type": "n8n-nodes-base.manualTrigger",
  "position": [
    280,
    380
  ],
  "parameters": {},
  "typeVersion": 1
}

================ Node #1492 ================
{
  "id": "11a1a2d5-a274-44f7-97ca-5666a59fcb31",
  "name": "OpenAI Chat Model1",
  "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
  "position": [
    2220,
    800
  ],
  "parameters": {
    "options": {}
  },
  "credentials": {
    "openAiApi": {
      "id": "XXXXXX",
      "name": "OpenAi account"
    }
  },
  "typeVersion": 1
}

================ Node #1493 ================
{
  "id": "395f7b67-c914-4aae-8727-0573fdbfc6ad",
  "name": "OpenAI Chat Model2",
  "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
  "position": [
    2220,
    380
  ],
  "parameters": {
    "options": {}
  },
  "credentials": {
    "openAiApi": {
      "id": "XXXXXX",
      "name": "OpenAi account"
    }
  },
  "typeVersion": 1
}

================ Node #1494 ================
{
  "id": "6ab194a9-b869-4296-aea9-19afcbffc0d7",
  "name": "Merge",
  "type": "n8n-nodes-base.merge",
  "position": [
    2940,
    600
  ],
  "parameters": {
    "mode": "combine",
    "options": {},
    "combineBy": "combineByPosition"
  },
  "typeVersion": 3
}

================ Node #1495 ================
{
  "id": "1eba1dd7-a164-4c70-8c75-759532bd16a0",
  "name": "OpenAI Chat Model",
  "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
  "position": [
    3840,
    420
  ],
  "parameters": {
    "options": {}
  },
  "credentials": {
    "openAiApi": {
      "id": "XXXXXX",
      "name": "OpenAi account"
    }
  },
  "typeVersion": 1
}

================ Node #1496 ================
{
  "id": "f25f1b07-cded-4ca7-9655-8b8f463089ab",
  "name": "SET company_name",
  "type": "n8n-nodes-base.set",
  "position": [
    540,
    380
  ],
  "parameters": {
    "options": {},
    "assignments": {
      "assignments": [
        {
          "id": "dd256ef7-013c-4769-8580-02c2d902d0b2",
          "name": "company_name",
          "type": "string",
          "value": "=Twilio"
        }
      ]
    }
  },
  "typeVersion": 3.4
}

================ Node #1497 ================
{
  "id": "87264a93-ab97-4e39-8d40-43365189f704",
  "name": "Define dictionary of demographic keys",
  "type": "n8n-nodes-base.set",
  "position": [
    740,
    380
  ],
  "parameters": {
    "options": {},
    "assignments": {
      "assignments": [
        {
          "id": "6ae671be-45d0-4a94-a443-2f1d4772d31b",
          "name": "asian",
          "type": "string",
          "value": "Asian"
        },
        {
          "id": "6c93370c-996c-44a6-a34c-4cd3baeeb846",
          "name": "hispanic",
          "type": "string",
          "value": "Hispanic or Latinx"
        },
        {
          "id": "dee79039-6051-4e9d-98b5-63a07d30f6b0",
          "name": "white",
          "type": "string",
          "value": "White"
        },
        {
          "id": "08d42380-8397-412f-8459-7553e9309b5d",
          "name": "pacific_islander",
          "type": "string",
          "value": "Native Hawaiian or other Pacific Islander"
        },
        {
          "id": "09e8ebc5-e7e7-449a-9036-9b9b54cdc828",
          "name": "black",
          "type": "string",
          "value": "Black or African American"
        },
        {
          "id": "39e910f8-3a8b-4233-a93a-3c5693e808c6",
          "name": "middle_eastern",
          "type": "string",
          "value": "Middle Eastern"
        },
        {
          "id": "169b3471-efa0-476e-aa83-e3f717c568f1",
          "name": "indigenous",
          "type": "string",
          "value": "Indigenous American or Native Alaskan"
        },
        {
          "id": "b6192296-4efa-4af5-ae02-1e31d28aae90",
          "name": "male",
          "type": "string",
          "value": "Men"
        },
        {
          "id": "4b322294-940c-459d-b083-8e91e38193f7",
          "name": "female",
          "type": "string",
          "value": "Women"
        },
        {
          "id": "1940eef0-6b76-4a26-9d8f-7c8536fbcb1b",
          "name": "trans",
          "type": "string",
          "value": "Transgender and/or Non-Binary"
        },
        {
          "id": "3dba3e18-2bb1-4078-bde9-9d187f9628dd",
          "name": "hetero",
          "type": "string",
          "value": "Heterosexual"
        },
        {
          "id": "9b7d10ad-1766-4b18-a230-3bd80142b48c",
          "name": "lgbtqia",
          "type": "string",
          "value": "LGBTQ+"
        },
        {
          "id": "458636f8-99e8-4245-9950-94e4cf68e371",
          "name": "nondisabled",
          "type": "string",
          "value": "Non-Disabled"
        },
        {
          "id": "a466e258-7de1-4453-a126-55f780094236",
          "name": "disabled",
          "type": "string",
          "value": "People with Disabilities"
        },
        {
          "id": "98735266-0451-432f-be7c-efcb09512cb1",
          "name": "caregiver",
          "type": "string",
          "value": "Caregivers"
        },
        {
          "id": "ebe2353c-9ff5-47bc-8c11-b66d3436f5b4",
          "name": "parent",
          "type": "string",
          "value": "Parents/Guardians"
        },
        {
          "id": "ab51c80c-d81d-41ab-94d9-c0a263743c17",
          "name": "nonparent",
          "type": "string",
          "value": "Not a Parent or Caregiver"
        },
        {
          "id": "cb7df429-c600-43f4-aa7e-dbc2382a85a0",
          "name": "nonveteran",
          "type": "string",
          "value": "Non-Veterans"
        },
        {
          "id": "dffbdb13-189a-462d-83d1-c5ec39a17d41",
          "name": "veteran",
          "type": "string",
          "value": "Veterans"
        }
      ]
    },
    "includeOtherFields": true
  },
  "typeVersion": 3.4
}

================ Node #1498 ================
{
  "id": "862f1c77-44a8-4d79-abac-33351ebb731b",
  "name": "ScrapingBee Search Glassdoor",
  "type": "n8n-nodes-base.httpRequest",
  "position": [
    940,
    380
  ],
  "parameters": {
    "url": "https://app.scrapingbee.com/api/v1",
    "options": {},
    "sendQuery": true,
    "authentication": "genericCredentialType",
    "genericAuthType": "httpQueryAuth",
    "queryParameters": {
      "parameters": [
        {
          "name": "url",
          "value": "=https://www.glassdoor.com/Search/results.htm?keyword={{ $json.company_name.toLowerCase().urlEncode() }}"
        },
        {
          "name": "premium_proxy",
          "value": "true"
        },
        {
          "name": "block_resources",
          "value": "false"
        },
        {
          "name": "stealth_proxy",
          "value": "true"
        }
      ]
    }
  },
  "credentials": {
    "httpQueryAuth": {
      "id": "XXXXXX",
      "name": "ScrapingBee Query Auth"
    }
  },
  "typeVersion": 4.2
}

================ Node #1499 ================
{
  "id": "4c9bf05e-9c50-4895-b20b-b7c329104615",
  "name": "Extract company url path",
  "type": "n8n-nodes-base.html",
  "position": [
    1140,
    380
  ],
  "parameters": {
    "options": {},
    "operation": "extractHtmlContent",
    "extractionValues": {
      "values": [
        {
          "key": "url_path",
          "attribute": "href",
          "cssSelector": "body main div a",
          "returnValue": "attribute"
        }
      ]
    }
  },
  "typeVersion": 1.2
}

================ Node #1500 ================
{
  "id": "d20bb0e7-4ca7-41d0-a3e9-41abc811b064",
  "name": "ScrapingBee GET company page contents",
  "type": "n8n-nodes-base.httpRequest",
  "position": [
    1340,
    380
  ],
  "parameters": {
    "url": "https://app.scrapingbee.com/api/v1",
    "options": {},
    "sendQuery": true,
    "authentication": "genericCredentialType",
    "genericAuthType": "httpQueryAuth",
    "queryParameters": {
      "parameters": [
        {
          "name": "url",
          "value": "=https://www.glassdoor.com{{ $json.url_path }}"
        },
        {
          "name": "premium_proxy",
          "value": "true"
        },
        {
          "name": "block_resources",
          "value": "false"
        },
        {
          "name": "stealth_proxy",
          "value": "true"
        }
      ]
    }
  },
  "credentials": {
    "httpQueryAuth": {
      "id": "XXXXXX",
      "name": "ScrapingBee Query Auth"
    }
  },
  "typeVersion": 4.2
}