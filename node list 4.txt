================ Node #1501 ================
{
  "id": "fce70cab-8ce3-4ce2-b040-ce80d66b1e62",
  "name": "Extract reviews page url path",
  "type": "n8n-nodes-base.html",
  "position": [
    1540,
    380
  ],
  "parameters": {
    "options": {},
    "operation": "extractHtmlContent",
    "extractionValues": {
      "values": [
        {
          "key": "url_path",
          "attribute": "href",
          "cssSelector": "#reviews a",
          "returnValue": "attribute"
        }
      ]
    }
  },
  "typeVersion": 1.2
}

================ Node #1502 ================
{
  "id": "d2e7fee9-e3d4-42bf-8be6-38b352371273",
  "name": "ScrapingBee GET Glassdoor Reviews Content",
  "type": "n8n-nodes-base.httpRequest",
  "position": [
    1760,
    380
  ],
  "parameters": {
    "url": "https://app.scrapingbee.com/api/v1",
    "options": {},
    "sendQuery": true,
    "authentication": "genericCredentialType",
    "genericAuthType": "httpQueryAuth",
    "queryParameters": {
      "parameters": [
        {
          "name": "url",
          "value": "=https://www.glassdoor.com{{ $json.url_path }}"
        },
        {
          "name": "premium_proxy",
          "value": "True"
        },
        {
          "name": "block_resources",
          "value": "False"
        },
        {
          "name": "stealth_proxy",
          "value": "true"
        }
      ]
    }
  },
  "credentials": {
    "httpQueryAuth": {
      "id": "XXXXXX",
      "name": "ScrapingBee Query Auth"
    }
  },
  "typeVersion": 4.2
}

================ Node #1503 ================
{
  "id": "0c322823-0569-4bd5-9c4e-af3de0f8d7b4",
  "name": "Extract Overall Review Summary",
  "type": "n8n-nodes-base.html",
  "position": [
    1980,
    260
  ],
  "parameters": {
    "options": {},
    "operation": "extractHtmlContent",
    "extractionValues": {
      "values": [
        {
          "key": "review_summary",
          "cssSelector": "div[data-test=\"review-summary\"]",
          "returnValue": "html"
        }
      ]
    }
  },
  "typeVersion": 1.2
}

================ Node #1504 ================
{
  "id": "851305ba-0837-4be9-943d-7282e8d74aee",
  "name": "Extract Demographics Module",
  "type": "n8n-nodes-base.html",
  "position": [
    1980,
    520
  ],
  "parameters": {
    "options": {},
    "operation": "extractHtmlContent",
    "extractionValues": {
      "values": [
        {
          "key": "demographics_content",
          "cssSelector": "div[data-test=\"demographics-module\"]",
          "returnValue": "html"
        }
      ]
    }
  },
  "typeVersion": 1.2
}

================ Node #1505 ================
{
  "id": "cf9a6ee2-53b5-4fbf-a36c-4b9dab53b795",
  "name": "Extract overall ratings and distribution percentages",
  "type": "@n8n/n8n-nodes-langchain.informationExtractor",
  "position": [
    2200,
    200
  ],
  "parameters": {
    "text": "={{ $json.review_summary }}",
    "options": {},
    "attributes": {
      "attributes": [
        {
          "name": "average_rating",
          "type": "number",
          "required": true,
          "description": "The overall average rating for this company."
        },
        {
          "name": "total_number_of_reviews",
          "type": "number",
          "required": true,
          "description": "The total number of reviews for this company."
        },
        {
          "name": "5_star_distribution_percentage",
          "type": "number",
          "required": true,
          "description": "The percentage distribution of 5 star reviews"
        },
        {
          "name": "4_star_distribution_percentage",
          "type": "number",
          "required": true,
          "description": "The percentage distribution of 4 star reviews"
        },
        {
          "name": "3_star_distribution_percentage",
          "type": "number",
          "required": true,
          "description": "The percentage distribution of 3 star reviews"
        },
        {
          "name": "2_star_distribution_percentage",
          "type": "number",
          "required": true,
          "description": "The percentage distribution of 2 star reviews"
        },
        {
          "name": "1_star_distribution_percentage",
          "type": "number",
          "required": true,
          "description": "The percentage distribution of 1 star reviews"
        }
      ]
    }
  },
  "typeVersion": 1
}

================ Node #1506 ================
{
  "id": "ae164f6e-04e7-4d8b-951e-a17085956f4b",
  "name": "Extract demographic distributions",
  "type": "@n8n/n8n-nodes-langchain.informationExtractor",
  "position": [
    2200,
    620
  ],
  "parameters": {
    "text": "={{ $json.demographics_content }}",
    "options": {
      "systemPromptTemplate": "You are an expert extraction algorithm.\nOnly extract relevant information from the text.\nIf you do not know the value of an attribute asked to extract, you may use 0 for the attribute's value."
    },
    "attributes": {
      "attributes": [
        {
          "name": "asian_average_rating",
          "type": "number",
          "required": true,
          "description": "=The average rating for this company by employees who self identified as asian."
        },
        {
          "name": "asian_total_number_of_reviews",
          "type": "number",
          "required": true,
          "description": "=The number of reviews for this company by employees who self-identified as asian."
        },
        {
          "name": "hispanic_average_rating",
          "type": "number",
          "required": true,
          "description": "=The average rating for this company by employees who self identified as hispanic."
        },
        {
          "name": "hispanic_total_number_of_reviews",
          "type": "number",
          "required": true,
          "description": "=The number of reviews for this company by employees who self-identified as hispanic."
        },
        {
          "name": "white_average_rating",
          "type": "number",
          "required": true,
          "description": "=The average rating for this company by employees who self identified as white."
        },
        {
          "name": "white_total_number_of_reviews",
          "type": "number",
          "required": true,
          "description": "=The number of reviews for this company by employees who self-identified as white."
        },
        {
          "name": "pacific_islander_average_rating",
          "type": "number",
          "required": true,
          "description": "=The average rating for this company by employees who self identified as native hawaiian or pacific islander."
        },
        {
          "name": "pacific_islander_total_number_of_reviews",
          "type": "number",
          "required": true,
          "description": "=The number of reviews for this company by employees who self-identified as native hawaiian or pacific islander."
        },
        {
          "name": "black_average_rating",
          "type": "number",
          "required": true,
          "description": "=The average rating for this company by employees who self identified as black."
        },
        {
          "name": "black_total_number_of_reviews",
          "type": "number",
          "required": true,
          "description": "=The number of reviews for this company by employees who self-identified as black."
        },
        {
          "name": "middle_eastern_average_rating",
          "type": "number",
          "required": true,
          "description": "=The average rating for this company by employees who self identified as middle eastern."
        },
        {
          "name": "middle_eastern_total_number_of_reviews",
          "type": "number",
          "required": true,
          "description": "=The number of reviews for this company by employees who self-identified as middle_eastern."
        },
        {
          "name": "indigenous_average_rating",
          "type": "number",
          "required": true,
          "description": "=The average rating for this company by employees who self identified as indigenous american or native alaskan."
        },
        {
          "name": "indigenous_total_number_of_reviews",
          "type": "number",
          "required": true,
          "description": "=The number of reviews for this company by employees who self-identified as indigenous american or native alaskan."
        },
        {
          "name": "male_average_rating",
          "type": "number",
          "required": true,
          "description": "=The average rating for this company by employees who self identified as men."
        },
        {
          "name": "male_total_number_of_reviews",
          "type": "number",
          "required": true,
          "description": "=The number of reviews for this company by employees who self-identified as men."
        },
        {
          "name": "female_average_rating",
          "type": "number",
          "required": true,
          "description": "=The average rating for this company by employees who self identified as women."
        },
        {
          "name": "female_total_number_of_reviews",
          "type": "number",
          "required": true,
          "description": "=The number of reviews for this company by employees who self-identified as women."
        },
        {
          "name": "trans_average_rating",
          "type": "number",
          "required": true,
          "description": "=The average rating for this company by employees who self identified as transgender and/or non-binary."
        },
        {
          "name": "trans_total_number_of_reviews",
          "type": "number",
          "required": true,
          "description": "=The number of reviews for this company by employees who self-identified as trans and/or non-binary."
        },
        {
          "name": "hetero_average_rating",
          "type": "number",
          "required": true,
          "description": "=The average rating for this company by employees who self identified as heterosexual."
        },
        {
          "name": "hetero_total_number_of_reviews",
          "type": "number",
          "required": true,
          "description": "=The number of reviews for this company by employees who self-identified as heterosexual."
        },
        {
          "name": "lgbtqia_average_rating",
          "type": "number",
          "required": true,
          "description": "=The average rating for this company by employees who self identified as lgbtqia+."
        },
        {
          "name": "lgbtqia_total_number_of_reviews",
          "type": "number",
          "required": true,
          "description": "=The number of reviews for this company by employees who self-identified as lgbtqia+."
        },
        {
          "name": "nondisabled_average_rating",
          "type": "number",
          "required": true,
          "description": "=The average rating for this company by employees who self identified as non-disabled."
        },
        {
          "name": "nondisabled_total_number_of_reviews",
          "type": "number",
          "required": true,
          "description": "=The number of reviews for this company by employees who self-identified as non-disabled."
        },
        {
          "name": "disabled_average_rating",
          "type": "number",
          "required": true,
          "description": "=The average rating for this company by employees who self identified as people with disabilities."
        },
        {
          "name": "disabled_total_number_of_reviews",
          "type": "number",
          "required": true,
          "description": "=The number of reviews for this company by employees who self-identified as people with disabilities."
        },
        {
          "name": "caregiver_average_rating",
          "type": "number",
          "required": true,
          "description": "=The average rating for this company by employees who self identified as caregivers."
        },
        {
          "name": "caregiver_total_number_of_reviews",
          "type": "number",
          "required": true,
          "description": "=The number of reviews for this company by employees who self-identified as caregivers."
        },
        {
          "name": "parent_average_rating",
          "type": "number",
          "required": true,
          "description": "=The average rating for this company by employees who self identified as parents/guardians."
        },
        {
          "name": "parent_total_number_of_reviews",
          "type": "number",
          "required": true,
          "description": "=The number of reviews for this company by employees who self-identified as parents/guardians."
        },
        {
          "name": "nonparent_average_rating",
          "type": "number",
          "required": true,
          "description": "=The average rating for this company by employees who self identified as not a parent or caregiver."
        },
        {
          "name": "nonparent_total_number_of_reviews",
          "type": "number",
          "required": true,
          "description": "=The number of reviews for this company by employees who self-identified as not a parent or guardian."
        },
        {
          "name": "nonveteran_average_rating",
          "type": "number",
          "required": true,
          "description": "=The average rating for this company by employees who self identified as non-veterans."
        },
        {
          "name": "nonveteran_total_number_of_reviews",
          "type": "number",
          "required": true,
          "description": "=The number of reviews for this company by employees who self-identified as non-veterans."
        },
        {
          "name": "veteran_average_rating",
          "type": "number",
          "required": true,
          "description": "=The average rating for this company by employees who self identified as veterans."
        },
        {
          "name": "veteran_total_number_of_reviews",
          "type": "number",
          "required": true,
          "description": "=The number of reviews for this company by employees who self-identified as veterans."
        }
      ]
    }
  },
  "typeVersion": 1
}

================ Node #1507 ================
{
  "id": "c8d9e45c-7d41-47bd-b9a9-0fa70de5d154",
  "name": "Define contributions to variance",
  "type": "n8n-nodes-base.set",
  "position": [
    2560,
    200
  ],
  "parameters": {
    "options": {},
    "assignments": {
      "assignments": [
        {
          "id": "7360b2c2-1e21-45de-8d1a-e72b8abcb56b",
          "name": "contribution_to_variance.5_star",
          "type": "number",
          "value": "={{ ($json.output['5_star_distribution_percentage'] / 100) * Math.pow(5 - $json.output.average_rating,2) }}"
        },
        {
          "id": "acdd308a-fa33-4e33-b71b-36b9441bfa06",
          "name": "contribution_to_variance.4_star",
          "type": "number",
          "value": "={{ ($json.output['4_star_distribution_percentage'] / 100) * Math.pow(4 - $json.output.average_rating,2) }}"
        },
        {
          "id": "376818f3-d429-4abe-8ece-e8e9c5585826",
          "name": "contribution_to_variance.3_star",
          "type": "number",
          "value": "={{ ($json.output['3_star_distribution_percentage'] / 100) * Math.pow(3 - $json.output.average_rating,2) }}"
        },
        {
          "id": "620d5c37-8b93-4d39-9963-b7ce3a7f431e",
          "name": "contribution_to_variance.2_star",
          "type": "number",
          "value": "={{ ($json.output['2_star_distribution_percentage'] / 100) * Math.pow(2 - $json.output.average_rating,2) }}"
        },
        {
          "id": "76357980-4f9b-4b14-be68-6498ba25af67",
          "name": "contribution_to_variance.1_star",
          "type": "number",
          "value": "={{ ($json.output['1_star_distribution_percentage'] / 100) * Math.pow(1 - $json.output.average_rating,2) }}"
        }
      ]
    }
  },
  "typeVersion": 3.4
}

================ Node #1508 ================
{
  "id": "8ea03017-d5d6-46ef-a5f1-dae4372f6256",
  "name": "Set variance and std_dev",
  "type": "n8n-nodes-base.set",
  "position": [
    2740,
    200
  ],
  "parameters": {
    "options": {},
    "assignments": {
      "assignments": [
        {
          "id": "3217d418-f1b0-45ff-9f9a-6e6145cc29ca",
          "name": "variance",
          "type": "number",
          "value": "={{ $json.contribution_to_variance.values().sum() }}"
        },
        {
          "id": "acdb9fea-15ec-46ed-bde9-073e93597f17",
          "name": "average_rating",
          "type": "number",
          "value": "={{ $('Extract overall ratings and distribution percentages').item.json.output.average_rating }}"
        },
        {
          "id": "1f3a8a29-4bd4-4b40-8694-c74a0285eadb",
          "name": "total_number_of_reviews",
          "type": "number",
          "value": "={{ $('Extract overall ratings and distribution percentages').item.json.output.total_number_of_reviews }}"
        },
        {
          "id": "1906c796-1964-446b-8b56-d856269da938",
          "name": "std_dev",
          "type": "number",
          "value": "={{ Math.sqrt($json.contribution_to_variance.values().sum()) }}"
        }
      ]
    }
  },
  "typeVersion": 3.4
}

================ Node #1509 ================
{
  "id": "0570d531-8480-4446-8f02-18640b4b891e",
  "name": "Calculate P-Scores",
  "type": "n8n-nodes-base.code",
  "position": [
    3340,
    440
  ],
  "parameters": {
    "jsCode": "// Approximate CDF for standard normal distribution\nfunction normSDist(z) {\n const t = 1 / (1 + 0.3275911 * Math.abs(z));\n const d = 0.254829592 * t - 0.284496736 * t * t + 1.421413741 * t * t * t - 1.453152027 * t * t * t * t + 1.061405429 * t * t * t * t * t;\n return 0.5 * (1 + Math.sign(z) * d * Math.exp(-z * z / 2));\n}\n\nfor (const item of $input.all()) {\n if (!item.json.population_analysis.p_scores) {\n item.json.population_analysis.p_scores = {};\n }\n\n for (const score of Object.keys(item.json.population_analysis.z_scores)) {\n // Check if review count exists and is greater than zero\n if (item.json.population_analysis.review_count[score] > 0) {\n // Apply the p_score formula: 2 * NORM.S.DIST(-ABS(z_score))\n const p_score = 2 * normSDist(-Math.abs(item.json.population_analysis.z_scores[score]));\n\n // Store the calculated p_score\n item.json.population_analysis.p_scores[score] = p_score;\n } else {\n // Remove z_scores, effect_sizes, and p_scores for groups with no reviews\n delete item.json.population_analysis.z_scores[score];\n delete item.json.population_analysis.effect_sizes[score];\n delete item.json.population_analysis.p_scores[score];\n }\n }\n}\n\nreturn $input.all();"
  },
  "typeVersion": 2
}

================ Node #1510 ================
{
  "id": "0bdb9732-67ef-440d-bdd2-42c4f64ff6b6",
  "name": "Sort Effect Sizes",
  "type": "n8n-nodes-base.set",
  "position": [
    3540,
    440
  ],
  "parameters": {
    "options": {},
    "assignments": {
      "assignments": [
        {
          "id": "61cf92ba-bc4e-40b8-a234-9b993fd24019",
          "name": "population_analysis.effect_sizes",
          "type": "object",
          "value": "={{ Object.fromEntries(Object.entries($json.population_analysis.effect_sizes).sort(([,a],[,b]) => a-b )) }}"
        }
      ]
    },
    "includeOtherFields": true
  },
  "typeVersion": 3.4
}

================ Node #1511 ================
{
  "id": "fd9026ef-e993-410a-87d6-40a3ad10b7a7",
  "name": "Calculate Z-Scores and Effect Sizes",
  "type": "n8n-nodes-base.set",
  "position": [
    3140,
    600
  ],
  "parameters": {
    "options": {},
    "assignments": {
      "assignments": [
        {
          "id": "790a53e8-5599-45d3-880e-ab1ad7d165d2",
          "name": "population_analysis.z_scores.asian",
          "type": "number",
          "value": "={{ ($json.output.asian_average_rating - $json.average_rating) / ($json.std_dev / Math.sqrt($json.output.asian_total_number_of_reviews)) }}"
        },
        {
          "id": "ebd61097-8773-45b9-a8e6-cdd840d73650",
          "name": "population_analysis.effect_sizes.asian",
          "type": "number",
          "value": "={{ ($json.output.asian_average_rating - $json.average_rating) / $json.std_dev }}"
        },
        {
          "id": "627b1293-efdc-485a-83c8-bd332d6dc225",
          "name": "population_analysis.z_scores.hispanic",
          "type": "number",
          "value": "={{ ($json.output.hispanic_average_rating - $json.average_rating) / ($json.std_dev / Math.sqrt($json.output.hispanic_total_number_of_reviews)) }}"
        },
        {
          "id": "822028d0-e94f-4cf7-9e13-8f8cc5c72ec0",
          "name": "population_analysis.z_scores.white",
          "type": "number",
          "value": "={{ ($json.output.white_average_rating - $json.average_rating) / ($json.std_dev / Math.sqrt($json.output.white_total_number_of_reviews)) }}"
        },
        {
          "id": "d32321f9-0fcf-4e54-9059-c3fd5a901ce0",
          "name": "population_analysis.z_scores.pacific_islander",
          "type": "number",
          "value": "={{ ($json.output.pacific_islander_average_rating - $json.average_rating) / ($json.std_dev / Math.sqrt($json.output.pacific_islander_total_number_of_reviews)) }}"
        },
        {
          "id": "e212d683-247f-45c4-9668-c290230a10ed",
          "name": "population_analysis.z_scores.black",
          "type": "number",
          "value": "={{ ($json.output.black_average_rating - $json.average_rating) / ($json.std_dev / Math.sqrt($json.output.black_total_number_of_reviews)) }}"
        },
        {
          "id": "882049c3-eb81-4c09-af0c-5c79b0ef0154",
          "name": "population_analysis.z_scores.middle_eastern",
          "type": "number",
          "value": "={{ ($json.output.middle_eastern_average_rating - $json.average_rating) / ($json.std_dev / Math.sqrt($json.output.middle_eastern_total_number_of_reviews)) }}"
        },
        {
          "id": "9bdc187f-3d8d-4030-9143-479eff441b7e",
          "name": "population_analysis.z_scores.indigenous",
          "type": "number",
          "value": "={{ ($json.output.indigenous_average_rating - $json.average_rating) / ($json.std_dev / Math.sqrt($json.output.indigenous_total_number_of_reviews)) }}"
        },
        {
          "id": "0cf11453-dbae-4250-a01a-c98e35aab224",
          "name": "population_analysis.z_scores.male",
          "type": "number",
          "value": "={{ ($json.output.male_average_rating - $json.average_rating) / ($json.std_dev / Math.sqrt($json.output.male_total_number_of_reviews)) }}"
        },
        {
          "id": "35a18fbc-7c2c-40fe-829d-2fffbdb13bb8",
          "name": "population_analysis.z_scores.female",
          "type": "number",
          "value": "={{ ($json.output.female_average_rating - $json.average_rating) / ($json.std_dev / Math.sqrt($json.output.female_total_number_of_reviews)) }}"
        },
        {
          "id": "a6e17c1b-a89b-4c05-8184-10f7248c159f",
          "name": "population_analysis.z_scores.trans",
          "type": "number",
          "value": "={{ ($json.output.trans_average_rating - $json.average_rating) / ($json.std_dev / Math.sqrt($json.output.trans_total_number_of_reviews)) }}"
        },
        {
          "id": "5e7dbccf-3011-4dba-863c-5390c1ee9e50",
          "name": "population_analysis.z_scores.hetero",
          "type": "number",
          "value": "={{ ($json.output.hetero_average_rating - $json.average_rating) / ($json.std_dev / Math.sqrt($json.output.hetero_total_number_of_reviews)) }}"
        },
        {
          "id": "1872152f-2c7e-4c24-bcd5-e2777616bfe2",
          "name": "population_analysis.z_scores.lgbtqia",
          "type": "number",
          "value": "={{ ($json.output.lgbtqia_average_rating - $json.average_rating) / ($json.std_dev / Math.sqrt($json.output.lgbtqia_total_number_of_reviews)) }}"
        },
        {
          "id": "91b2cb00-173e-421a-929a-51d2a6654767",
          "name": "population_analysis.z_scores.nondisabled",
          "type": "number",
          "value": "={{ ($json.output.nondisabled_average_rating - $json.average_rating) / ($json.std_dev / Math.sqrt($json.output.nondisabled_total_number_of_reviews)) }}"
        },
        {
          "id": "8bb7429e-0500-482c-8e8d-d2c63733ffe1",
          "name": "population_analysis.z_scores.disabled",
          "type": "number",
          "value": "={{ ($json.output.disabled_average_rating - $json.average_rating) / ($json.std_dev / Math.sqrt($json.output.disabled_total_number_of_reviews)) }}"
        },
        {
          "id": "89f00d0f-80db-4ad9-bf60-9385aa3d915b",
          "name": "population_analysis.z_scores.caregiver",
          "type": "number",
          "value": "={{ ($json.output.caregiver_average_rating - $json.average_rating) / ($json.std_dev / Math.sqrt($json.output.caregiver_total_number_of_reviews)) }}"
        },
        {
          "id": "0bb2b96c-d882-4ac1-9432-9fce06b26cf5",
          "name": "population_analysis.z_scores.parent",
          "type": "number",
          "value": "={{ ($json.output.parent_average_rating - $json.average_rating) / ($json.std_dev / Math.sqrt($json.output.parent_total_number_of_reviews)) }}"
        },
        {
          "id": "9aae7169-1a25-4fab-b940-7f2cd7ef39d9",
          "name": "population_analysis.z_scores.nonparent",
          "type": "number",
          "value": "={{ ($json.output.nonparent_average_rating - $json.average_rating) / ($json.std_dev / Math.sqrt($json.output.nonparent_total_number_of_reviews)) }}"
        },
        {
          "id": "aac189a0-d6fc-4581-a15d-3e75a0cb370a",
          "name": "population_analysis.z_scores.nonveteran",
          "type": "number",
          "value": "={{ ($json.output.nonveteran_average_rating - $json.average_rating) / ($json.std_dev / Math.sqrt($json.output.nonveteran_total_number_of_reviews)) }}"
        },
        {
          "id": "d40f014a-9c1d-4aea-88ac-d8a3de143931",
          "name": "population_analysis.z_scores.veteran",
          "type": "number",
          "value": "={{ ($json.output.veteran_average_rating - $json.average_rating) / ($json.std_dev / Math.sqrt($json.output.veteran_total_number_of_reviews)) }}"
        },
        {
          "id": "67e0394f-6d55-4e80-8a7d-814635620b1d",
          "name": "population_analysis.effect_sizes.hispanic",
          "type": "number",
          "value": "={{ ($json.output.hispanic_average_rating - $json.average_rating) / $json.std_dev }}"
        },
        {
          "id": "65cd3a22-2c97-4da1-8fcc-cc1af39118f2",
          "name": "population_analysis.effect_sizes.white",
          "type": "number",
          "value": "={{ ($json.output.white_average_rating - $json.average_rating) / $json.std_dev }}"
        },
        {
          "id": "a03bdf0f-e294-4a01-bb08-ddc16e9997a5",
          "name": "population_analysis.effect_sizes.pacific_islander",
          "type": "number",
          "value": "={{ ($json.output.pacific_islander_average_rating - $json.average_rating) / $json.std_dev }}"
        },
        {
          "id": "b0bdc40e-ed5f-475b-9d8b-8cf5beff7002",
          "name": "population_analysis.effect_sizes.black",
          "type": "number",
          "value": "={{ ($json.output.black_average_rating - $json.average_rating) / $json.std_dev }}"
        },
        {
          "id": "45cac3f0-7270-4fa4-8fc4-94914245a77d",
          "name": "population_analysis.effect_sizes.middle_eastern",
          "type": "number",
          "value": "={{ ($json.output.middle_eastern_average_rating - $json.average_rating) / $json.std_dev }}"
        },
        {
          "id": "cf5b7650-8766-45f6-8241-49aea62bf619",
          "name": "population_analysis.effect_sizes.indigenous",
          "type": "number",
          "value": "={{ ($json.output.indigenous_average_rating - $json.average_rating) / $json.std_dev }}"
        },
        {
          "id": "7c6a8d38-02b7-47a1-af44-5eebfb4140ec",
          "name": "population_analysis.effect_sizes.male",
          "type": "number",
          "value": "={{ ($json.output.male_average_rating - $json.average_rating) / $json.std_dev }}"
        },
        {
          "id": "4bf3dba9-4d07-4315-83ce-5fba288a00c9",
          "name": "population_analysis.effect_sizes.female",
          "type": "number",
          "value": "={{ ($json.output.female_average_rating - $json.average_rating) / $json.std_dev }}"
        },
        {
          "id": "d5e980b8-d7a8-4d4c-bcd9-fd9cbd20c729",
          "name": "population_analysis.effect_sizes.trans",
          "type": "number",
          "value": "={{ ($json.output.trans_average_rating - $json.average_rating) / $json.std_dev }}"
        },
        {
          "id": "2c8271c1-b612-4292-9d48-92c342b83727",
          "name": "population_analysis.effect_sizes.hetero",
          "type": "number",
          "value": "={{ ($json.output.hetero_average_rating - $json.average_rating) / $json.std_dev }}"
        },
        {
          "id": "996f2ea0-2e46-424b-9797-2d58fd56b1d3",
          "name": "population_analysis.effect_sizes.lgbtqia",
          "type": "number",
          "value": "={{ ($json.output.lgbtqia_average_rating - $json.average_rating) / $json.std_dev }}"
        },
        {
          "id": "8c987b6e-764d-422e-82de-00bd89269b22",
          "name": "population_analysis.effect_sizes.nondisabled",
          "type": "number",
          "value": "={{ ($json.output.nondisabled_average_rating - $json.average_rating) / $json.std_dev }}"
        },
        {
          "id": "ab796bb7-06ff-4282-b4b3-eefd129c743e",
          "name": "population_analysis.effect_sizes.disabled",
          "type": "number",
          "value": "={{ ($json.output.disabled_average_rating - $json.average_rating) / $json.std_dev }}"
        },
        {
          "id": "a17bf413-a098-4f24-8162-821a6a0ddb5e",
          "name": "population_analysis.effect_sizes.caregiver",
          "type": "number",
          "value": "={{ ($json.output.caregiver_average_rating - $json.average_rating) / $json.std_dev }}"
        },
        {
          "id": "99911e1e-06e8-4bbd-915d-b92b8b37b374",
          "name": "population_analysis.effect_sizes.parent",
          "type": "number",
          "value": "={{ ($json.output.parent_average_rating - $json.average_rating) / $json.std_dev }}"
        },
        {
          "id": "4ddf729b-361e-4d81-a67c-b6c18509e60b",
          "name": "population_analysis.effect_sizes.nonparent",
          "type": "number",
          "value": "={{ ($json.output.nonparent_average_rating - $json.average_rating) / $json.std_dev }}"
        },
        {
          "id": "725b8abb-7f72-45fc-a0c0-0e0a4f2cb131",
          "name": "population_analysis.effect_sizes.nonveteran",
          "type": "number",
          "value": "={{ ($json.output.nonveteran_average_rating - $json.average_rating) / $json.std_dev }}"
        },
        {
          "id": "20e54fa5-2faa-4134-90e5-81224ec9659e",
          "name": "population_analysis.effect_sizes.veteran",
          "type": "number",
          "value": "={{ ($json.output.veteran_average_rating - $json.average_rating) / $json.std_dev }}"
        },
        {
          "id": "2cc6465a-3a1c-4eb5-9e5a-72d41049d81e",
          "name": "population_analysis.review_count.asian",
          "type": "number",
          "value": "={{ $json.output.asian_total_number_of_reviews }}"
        },
        {
          "id": "0a5f6aae-ba21-47b5-8af8-fec2256e4df6",
          "name": "population_analysis.review_count.hispanic",
          "type": "number",
          "value": "={{ $json.output.hispanic_total_number_of_reviews }}"
        },
        {
          "id": "ae124587-7e24-4c1a-a002-ed801f859c30",
          "name": "population_analysis.review_count.pacific_islander",
          "type": "number",
          "value": "={{ $json.output.pacific_islander_total_number_of_reviews }}"
        },
        {
          "id": "fc790196-ca8e-4069-a093-87a413ebbf3e",
          "name": "population_analysis.review_count.black",
          "type": "number",
          "value": "={{ $json.output.black_total_number_of_reviews }}"
        },
        {
          "id": "7fd72701-781e-4e33-b000-174a853b172b",
          "name": "population_analysis.review_count.middle_eastern",
          "type": "number",
          "value": "={{ $json.output.middle_eastern_total_number_of_reviews }}"
        },
        {
          "id": "3751e7da-11a7-4af3-8aa6-1c6d53bcf27d",
          "name": "population_analysis.review_count.indigenous",
          "type": "number",
          "value": "={{ $json.output.indigenous_total_number_of_reviews }}"
        },
        {
          "id": "9ee0cac9-d2dd-4ba0-90ee-b2cdd22d9b77",
          "name": "population_analysis.review_count.male",
          "type": "number",
          "value": "={{ $json.output.male_total_number_of_reviews }}"
        },
        {
          "id": "ae7fcdc7-d373-4c24-9a65-94bd2b5847a8",
          "name": "population_analysis.review_count.female",
          "type": "number",
          "value": "={{ $json.output.female_total_number_of_reviews }}"
        },
        {
          "id": "3f53d065-269f-425a-b27d-dc5a3dbb6141",
          "name": "population_analysis.review_count.trans",
          "type": "number",
          "value": "={{ $json.output.trans_total_number_of_reviews }}"
        },
        {
          "id": "d15e976e-7599-4df0-9e65-8047b7a4cda8",
          "name": "population_analysis.review_count.hetero",
          "type": "number",
          "value": "={{ $json.output.hetero_total_number_of_reviews }}"
        },
        {
          "id": "c8b786d3-a980-469f-bf0e-de70ad44f0ea",
          "name": "population_analysis.review_count.lgbtqia",
          "type": "number",
          "value": "={{ $json.output.lgbtqia_total_number_of_reviews }}"
        },
        {
          "id": "e9429215-0858-4482-964a-75de7978ecbb",
          "name": "population_analysis.review_count.nondisabled",
          "type": "number",
          "value": "={{ $json.output.nondisabled_total_number_of_reviews }}"
        },
        {
          "id": "2c6e53c4-eab1-42aa-b956-ee882832f569",
          "name": "population_analysis.review_count.disabled",
          "type": "number",
          "value": "={{ $json.output.disabled_total_number_of_reviews }}"
        },
        {
          "id": "b5edfa25-ab11-4b94-9670-4d5589a62498",
          "name": "population_analysis.review_count.caregiver",
          "type": "number",
          "value": "={{ $json.output.caregiver_total_number_of_reviews }}"
        },
        {
          "id": "41084e96-c42f-4bb0-ac1a-883b46537fca",
          "name": "population_analysis.review_count.parent",
          "type": "number",
          "value": "={{ $json.output.parent_total_number_of_reviews }}"
        },
        {
          "id": "96496a38-9311-4ade-bd2f-2943d1d92314",
          "name": "population_analysis.review_count.nonparent",
          "type": "number",
          "value": "={{ $json.output.nonparent_total_number_of_reviews }}"
        },
        {
          "id": "5071771d-5f41-43cb-a8ce-e4e40ed3519b",
          "name": "population_analysis.review_count.nonveteran",
          "type": "number",
          "value": "={{ $json.output.nonveteran_total_number_of_reviews }}"
        },
        {
          "id": "2358e782-70da-4964-b625-5fe1946b5250",
          "name": "population_analysis.review_count.veteran",
          "type": "number",
          "value": "={{ $json.output.veteran_total_number_of_reviews }}"
        }
      ]
    }
  },
  "typeVersion": 3.4
}

================ Node #1512 ================
{
  "id": "85536931-839a-476b-b0dd-fa6d01c6d5c1",
  "name": "Format dataset for scatterplot",
  "type": "n8n-nodes-base.code",
  "position": [
    3340,
    760
  ],
  "parameters": {
    "jsCode": "// Iterate through the input data and format the dataset for QuickChart\nfor (const item of $input.all()) {\n // Ensure the data object exists and initialize datasets\n item.json.data = {\n datasets: []\n };\n\n const z_scores = item.json.population_analysis.z_scores;\n const effect_sizes = item.json.population_analysis.effect_sizes;\n const review_count = item.json.population_analysis.review_count;\n\n // Ensure z_scores, effect_sizes, and review_count are defined and are objects\n if (z_scores && effect_sizes && review_count && typeof z_scores === 'object' && typeof effect_sizes === 'object' && typeof review_count === 'object') {\n // Initialize the dataset object\n const dataset = {\n label: 'Demographics Data',\n data: []\n };\n\n // Iterate through the demographic keys\n for (const key in z_scores) {\n // Check if review count for the demographic is greater than 0\n if (z_scores.hasOwnProperty(key) && effect_sizes.hasOwnProperty(key) && review_count[key] > 0) {\n\n // Add each demographic point to the dataset\n dataset.data.push({\n x: z_scores[key], // x = z_score\n y: effect_sizes[key], // y = effect_size\n label: $('Define dictionary of demographic keys').first().json[key],\n });\n }\n }\n\n // Only add the dataset if it contains data\n if (dataset.data.length > 0) {\n item.json.data.datasets.push(dataset);\n }\n\n delete item.json.population_analysis\n }\n}\n\n// Return the updated input with the data object containing datasets and labels\nreturn $input.all();\n"
  },
  "typeVersion": 2
}

================ Node #1513 ================
{
  "id": "957b9f6c-7cf8-4ec6-aec7-a7d59ed3a4ad",
  "name": "Specify additional parameters for scatterplot",
  "type": "n8n-nodes-base.set",
  "position": [
    3540,
    760
  ],
  "parameters": {
    "options": {
      "ignoreConversionErrors": false
    },
    "assignments": {
      "assignments": [
        {
          "id": "5cd507f6-6835-4d2e-8329-1b5d24a3fc15",
          "name": "type",
          "type": "string",
          "value": "scatter"
        },
        {
          "id": "80b6f981-e3c7-4c6e-a0a1-f30d028fe15e",
          "name": "options",
          "type": "object",
          "value": "={\n \"title\": {\n \"display\": true,\n \"position\": \"top\",\n \"fontSize\": 12,\n \"fontFamily\": \"sans-serif\",\n \"fontColor\": \"#666666\",\n \"fontStyle\": \"bold\",\n \"padding\": 10,\n \"lineHeight\": 1.2,\n \"text\": \"{{ $('SET company_name').item.json.company_name }} Workplace Population Bias\"\n },\n \"legend\": {\n \"display\": false\n },\n \"scales\": {\n \"xAxes\": [\n {\n \"scaleLabel\": {\n \"display\": true,\n \"labelString\": \"Z-Score\",\n \"fontColor\": \"#666666\",\n \"fontSize\": 12,\n \"fontFamily\": \"sans-serif\"\n }\n }\n ],\n \"yAxes\": [\n {\n \"scaleLabel\": {\n \"display\": true,\n \"labelString\": \"Effect Score\",\n \"fontColor\": \"#666666\",\n \"fontSize\": 12,\n \"fontFamily\": \"sans-serif\"\n }\n }\n ]\n },\n \"plugins\": {\n \"datalabels\": {\n \"display\": true,\n \"align\": \"top\",\n \"anchor\": \"center\",\n \"backgroundColor\": \"#eee\",\n \"borderColor\": \"#ddd\",\n \"borderRadius\": 6,\n \"borderWidth\": 1,\n \"padding\": 4,\n \"color\": \"#000\",\n \"font\": {\n \"family\": \"sans-serif\",\n \"size\": 10,\n \"style\": \"normal\"\n }\n }\n }\n }"
        }
      ]
    },
    "includeOtherFields": true
  },
  "typeVersion": 3.4
}

================ Node #1514 ================
{
  "id": "a937132c-43fc-4fa0-ae35-885da89e51d1",
  "name": "Quickchart Scatterplot",
  "type": "n8n-nodes-base.httpRequest",
  "position": [
    3740,
    760
  ],
  "parameters": {
    "url": "https://quickchart.io/chart",
    "options": {},
    "sendQuery": true,
    "queryParameters": {
      "parameters": [
        {
          "name": "c",
          "value": "={{ $json.toJsonString() }}"
        },
        {
          "name": "Content-Type",
          "value": "application/json"
        },
        {
          "name": "encoding",
          "value": "url"
        }
      ]
    }
  },
  "typeVersion": 4.2
}

================ Node #1515 ================
{
  "id": "ede1931e-bac8-4279-b3a7-5980a190e324",
  "name": "QuickChart Bar Chart",
  "type": "n8n-nodes-base.quickChart",
  "position": [
    3740,
    560
  ],
  "parameters": {
    "data": "={{ $json.population_analysis.effect_sizes.values() }}",
    "output": "bar_chart",
    "labelsMode": "array",
    "labelsArray": "={{ $json.population_analysis.effect_sizes.keys() }}",
    "chartOptions": {
      "format": "png"
    },
    "datasetOptions": {
      "label": "={{ $('SET company_name').item.json.company_name }} Effect Size on Employee Experience"
    }
  },
  "typeVersion": 1
}

================ Node #1516 ================
{
  "id": "6122fec0-619c-48d3-ad2c-05ed55ba2275",
  "name": "Sticky Note",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    480,
    40
  ],
  "parameters": {
    "color": 7,
    "width": 3741.593083126444,
    "height": 1044.8111554136713,
    "content": "# Spot Workplace Discrimination Patterns using ScrapingBee, Glassdoor, OpenAI, and QuickChart\n"
  },
  "typeVersion": 1
}

================ Node #1517 ================
{
  "id": "5cda63e8-f31b-46f6-8cb2-41d1856ac537",
  "name": "Sticky Note1",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    900,
    180
  ],
  "parameters": {
    "color": 4,
    "width": 1237.3377621763516,
    "height": 575.9439659309116,
    "content": "## Use ScrapingBee to gather raw data from Glassdoor"
  },
  "typeVersion": 1
}

================ Node #1518 ================
{
  "id": "28d247b2-9020-4280-83d2-d6583622c0b7",
  "name": "Sticky Note2",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    920,
    240
  ],
  "parameters": {
    "color": 7,
    "width": 804.3951263154196,
    "height": 125.73173301324687,
    "content": "### Due to javascript restrictions, a normal HTTP request cannot be used to gather user-reported details from Glassdoor. \n\nInstead, [ScrapingBee](https://www.scrapingbee.com/) offers a great tool with a very generous package of free tokens per month, which works out to roughly 4-5 runs of this workflow."
  },
  "typeVersion": 1
}

================ Node #1519 ================
{
  "id": "d65a239c-06d2-470b-b24a-23ec00a9f148",
  "name": "Sticky Note3",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    2180,
    99.69933502879758
  ],
  "parameters": {
    "color": 5,
    "width": 311.0523273992095,
    "height": 843.8786512173932,
    "content": "## Extract details with AI"
  },
  "typeVersion": 1
}

================ Node #1520 ================
{
  "id": "3cffd188-62a1-43a7-a67f-548e21d2b187",
  "name": "Sticky Note4",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    2516.1138215303854,
    100
  ],
  "parameters": {
    "color": 7,
    "width": 423.41585047129973,
    "height": 309.71740416262054,
    "content": "### Calculate variance and standard deviation from review rating distributions."
  },
  "typeVersion": 1
}

================ Node #1521 ================
{
  "id": "b5015c07-03e3-47d4-9469-e831b2c755c0",
  "name": "Sticky Note6",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    3320,
    706.46982689582
  ],
  "parameters": {
    "color": 5,
    "width": 639.5579220386832,
    "height": 242.80759628871897,
    "content": "## Formatting datasets for Scatterplot"
  },
  "typeVersion": 1
}

================ Node #1522 ================
{
  "id": "e52bb9d9-617a-46f5-b217-a6f670b6714c",
  "name": "Sticky Note7",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    500,
    120
  ],
  "parameters": {
    "width": 356.84794255678776,
    "height": 186.36110628732342,
    "content": "## How this workflow works\n1. Replace ScrapingBee and OpenAI credentials\n2. Replace company_name with company of choice (workflow performs better with larger US-based organizations)\n3. Preview QuickChart data visualizations and AI data analysis"
  },
  "typeVersion": 1
}

================ Node #1523 ================
{
  "id": "d83c07a3-04ed-418f-94f1-e70828cba8b2",
  "name": "Sticky Note8",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    500,
    880
  ],
  "parameters": {
    "color": 6,
    "width": 356.84794255678776,
    "height": 181.54335665904924,
    "content": "### Inspired by [Wes Medford's Medium Post](https://medium.com/@wryanmedford/an-open-letter-to-twilios-leadership-f06f661ecfb4)\n\nWes performed the initial data analysis highlighting problematic behaviors at Twilio. I wanted to try and democratize the data analysis they performed for those less technical.\n\n**Hi, Wes!**"
  },
  "typeVersion": 1
}

================ Node #1524 ================
{
  "id": "ed0c1b4a-99fe-4a27-90bb-ac38dd20810b",
  "name": "Sticky Note9",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    4020,
    880
  ],
  "parameters": {
    "color": 7,
    "width": 847.5931795867759,
    "height": 522.346478008115,
    "content": "![image](https://quickchart.io/chart?c=%7B%0A%20%20%22type%22%3A%20%22scatter%22%2C%0A%20%20%22data%22%3A%20%7B%0A%20%20%20%20%22datasets%22%3A%20%5B%0A%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20%22label%22%3A%20%22Demographics%20Data%22%2C%0A%20%20%20%20%20%20%20%20%22data%22%3A%20%5B%0A%20%20%20%20%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%22x%22%3A%201.1786657494327952%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%22y%22%3A%200.16190219204909295%0A%20%20%20%20%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%22x%22%3A%200.5119796850491362%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%22y%22%3A%200.0809510960245463%0A%20%20%20%20%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%22x%22%3A%20-0.9300572848378476%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%22y%22%3A%20-0.16190219204909329%0A%20%20%20%20%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%22x%22%3A%20-0.42835293687811976%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%22y%22%3A%20-0.16190219204909329%0A%20%20%20%20%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%22x%22%3A%20-1.0890856121128139%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%22y%22%3A%20-0.08095109602454664%0A%20%20%20%20%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%22x%22%3A%20-1.7362075843299012%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%22y%22%3A%20-0.16190219204909329%0A%20%20%20%20%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%22x%22%3A%20-2.9142394568836774%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%22y%22%3A%20-0.971413152294559%0A%20%20%20%20%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%22x%22%3A%20-1.2088576542791578%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%22y%22%3A%20-0.08095109602454664%0A%20%20%20%20%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%22x%22%3A%20-2.5276971632072494%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%22y%22%3A%20-0.4047554801227329%0A%20%20%20%20%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%22x%22%3A%200%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%22y%22%3A%200%0A%20%20%20%20%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%22x%22%3A%20-5.504674529669168%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%22y%22%3A%20-1.376168632417292%0A%20%20%20%20%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%22x%22%3A%20-0.8412684674574105%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%22y%22%3A%20-0.24285328807363996%0A%20%20%20%20%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%22x%22%3A%20-2.896194457023989%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%22y%22%3A%20-0.32380438409818657%0A%20%20%20%20%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%22x%22%3A%20-1.0303392409819254%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%22y%22%3A%20-0.08095109602454664%0A%20%20%20%20%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%22x%22%3A%20-1.2670850749479952%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%22y%22%3A%20-0.08095109602454664%0A%20%20%20%20%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%22x%22%3A%201.535939055147413%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%22y%22%3A%200.4857065761472792%0A%20%20%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20%5D%0A%20%20%20%20%20%20%7D%0A%20%20%20%20%5D%2C%0A%20%20%20%20%22labels%22%3A%20%5B%0A%20%20%20%20%20%20%22asian%22%2C%0A%20%20%20%20%20%20%22hispanic%22%2C%0A%20%20%20%20%20%20%22black%22%2C%0A%20%20%20%20%20%20%22middle_eastern%22%2C%0A%20%20%20%20%20%20%22male%22%2C%0A%20%20%20%20%20%20%22female%22%2C%0A%20%20%20%20%20%20%22trans%22%2C%0A%20%20%20%20%20%20%22hetero%22%2C%0A%20%20%20%20%20%20%22lgbtqia%22%2C%0A%20%20%20%20%20%20%22nondisabled%22%2C%0A%20%20%20%20%20%20%22disabled%22%2C%0A%20%20%20%20%20%20%22caregiver%22%2C%0A%20%20%20%20%20%20%22parent%22%2C%0A%20%20%20%20%20%20%22nonparent%22%2C%0A%20%20%20%20%20%20%22nonveteran%22%2C%0A%20%20%20%20%20%20%22veteran%22%0A%20%20%20%20%5D%0A%20%20%7D%2C%0A%20%20%22options%22%3A%20%7B%0A%20%20%20%20%22title%22%3A%20%7B%0A%20%20%20%20%20%20%22display%22%3A%20true%2C%0A%20%20%20%20%20%20%22position%22%3A%20%22top%22%2C%0A%20%20%20%20%20%20%22fontSize%22%3A%2012%2C%0A%20%20%20%20%20%20%22fontFamily%22%3A%20%22sans-serif%22%2C%0A%20%20%20%20%20%20%22fontColor%22%3A%20%22%23666666%22%2C%0A%20%20%20%20%20%20%22fontStyle%22%3A%20%22bold%22%2C%0A%20%20%20%20%20%20%22padding%22%3A%2010%2C%0A%20%20%20%20%20%20%22lineHeight%22%3A%201.2%2C%0A%20%20%20%20%20%20%22text%22%3A%20%22Twilio%20Workplace%20Population%20Bias%22%0A%20%20%20%20%7D%2C%0A%20%20%20%20%22legend%22%3A%20%7B%0A%20%20%20%20%20%20%22display%22%3A%20false%0A%20%20%20%20%7D%2C%0A%20%20%20%20%22scales%22%3A%20%7B%0A%20%20%20%20%20%20%22xAxes%22%3A%20%5B%0A%20%20%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20%20%20%22scaleLabel%22%3A%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%22display%22%3A%20true%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%22labelString%22%3A%20%22Z-Score%22%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%22fontColor%22%3A%20%22%23666666%22%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%22fontSize%22%3A%2012%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%22fontFamily%22%3A%20%22sans-serif%22%0A%20%20%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%5D%2C%0A%20%20%20%20%20%20%22yAxes%22%3A%20%5B%0A%20%20%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20%20%20%22scaleLabel%22%3A%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%22display%22%3A%20true%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%22labelString%22%3A%20%22Effect%20Score%22%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%22fontColor%22%3A%20%22%23666666%22%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%22fontSize%22%3A%2012%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%22fontFamily%22%3A%20%22sans-serif%22%0A%20%20%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%5D%0A%20%20%20%20%7D%2C%0A%20%20%20%20%22plugins%22%3A%20%7B%0A%20%20%20%20%20%20%22datalabels%22%3A%20%7B%0A%20%20%20%20%20%20%20%20%22display%22%3A%20true%2C%0A%20%20%20%20%20%20%20%20%22align%22%3A%20%22top%22%2C%0A%20%20%20%20%20%20%20%20%22anchor%22%3A%20%22center%22%2C%0A%20%20%20%20%20%20%20%20%22backgroundColor%22%3A%20%22%23eee%22%2C%0A%20%20%20%20%20%20%20%20%22borderColor%22%3A%20%22%23ddd%22%2C%0A%20%20%20%20%20%20%20%20%22borderRadius%22%3A%206%2C%0A%20%20%20%20%20%20%20%20%22borderWidth%22%3A%201%2C%0A%20%20%20%20%20%20%20%20%22padding%22%3A%204%2C%0A%20%20%20%20%20%20%20%20%22color%22%3A%20%22%23000%22%2C%0A%20%20%20%20%20%20%20%20%22font%22%3A%20%7B%0A%20%20%20%20%20%20%20%20%20%20%22family%22%3A%20%22sans-serif%22%2C%0A%20%20%20%20%20%20%20%20%20%20%22size%22%3A%2010%2C%0A%20%20%20%20%20%20%20%20%20%20%22style%22%3A%20%22normal%22%0A%20%20%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%20%20%22formatter%22%3A%20function(value%2C%20context)%20%7B%0A%20%20%20%20%20%20%20%20%20%20var%20idx%20%3D%20context.dataIndex%3B%0A%20%20%20%20%20%20%20%20%20%20return%20context.chart.data.labels%5Bidx%5D%3B%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%7D%0A%20%20%20%20%7D%0A%20%20%7D%0A%7D%0A#full-width)"
  },
  "typeVersion": 1
}

================ Node #1525 ================
{
  "id": "7b92edf8-3a58-4931-abf4-d9c2f57cfa32",
  "name": "Sticky Note10",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    3980,
    800
  ],
  "parameters": {
    "color": 6,
    "width": 989.7621518164046,
    "height": 636.6345107975716,
    "content": "## Example Scatterplot output"
  },
  "typeVersion": 1
}

================ Node #1526 ================
{
  "id": "bd6859b4-096c-401e-9bce-91e970e1afd1",
  "name": "Sticky Note11",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    2540,
    800
  ],
  "parameters": {
    "color": 6,
    "width": 737.6316136259719,
    "height": 444.9087184962878,
    "content": "## Glossary\n**Z-Score** \u2013 A statistical measure that indicates how many standard deviations a data point is from the mean. In this analysis, a negative z-score suggests a group rates their workplace experience lower than the average, while a positive z-score suggests a better-than-average experience.\n\n**Effect Size** \u2013 A measure of the magnitude of difference between groups. Larger negative effect sizes indicate a more substantial disparity in workplace experiences for certain groups, making it useful for identifying meaningful gaps beyond just statistical significance.\n\n**P-Score (P-Value)** \u2013 The probability that the observed differences occurred by chance. A lower p-score (typically below 0.05) suggests the difference is statistically significant and unlikely to be random. In this analysis, high p-scores confirm that the disparities in ratings for marginalized groups are unlikely to be due to chance alone.\n\n### Relevance to This Analysis\nThese metrics help quantify workplace disparities among demographic groups. Z-scores show which groups report better or worse experiences, effect sizes reveal the severity of these differences, and p-scores confirm whether the disparities are statistically meaningful. This data allows for a more informed discussion about workplace equity and areas needing improvement."
  },
  "typeVersion": 1
}

================ Node #1527 ================
{
  "id": "5af3ef87-ed4b-481e-b1ba-d44ffb7551d8",
  "name": "Sticky Note12",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    4140,
    80
  ],
  "parameters": {
    "color": 6,
    "width": 643.5995639515581,
    "height": 646.0030521944287,
    "content": "## Example AI Analysis (Twilio Example)\n\n### Key Takeaways\n1. **Significant Disparity Among Disabled Employees**\nDisabled employees reported the lowest average ratings, with a z-score of -5.50, indicating a far worse experience compared to their non-disabled peers. \n2. **LGBTQIA Community's Challenges**\nMembers of the LGBTQIA community showed significantly lower ratings (z-score of -2.53), suggesting they may experience a workplace environment that is less inclusive or supportive compared to others.\n3. **Transgender Experiences Are Particularly Negative**\nTransgender employees rated their experiences considerably lower (z-score of -2.91), highlighting a critical area for improvement in workplace culture and acceptance.\n4. **Veterans Report Higher Satisfaction**\nIn contrast, veterans had the highest ratings (z-score of 1.54), which could indicate a supportive environment or programs tailored to their needs.\n5. **Overall Gender Discrepancies**\nA noticeable gap exists in average ratings by gender, with female employees scoring below male employees, suggesting potential gender biases or challenges in workplace dynamics.\n\n### Employee Experiences\n#### Perceptions of Workplace Environment\nFor members of groups reporting significantly worse experiences, such as disabled, transgender, and LGBTQIA employees, the workplace may feel alienating or unwelcoming. These individuals might perceive that their contributions are undervalued or overlooked and that necessary support systems are lacking, creating a culture of exclusion rather than one of inclusivity. This feeling of being marginalized can lead to poorer engagement, higher turnover rates, and diminished overall job satisfaction, adversely impacting both employees and the organization."
  },
  "typeVersion": 1
}

================ Node #1528 ================
{
  "id": "a39cdbe7-d6ae-4a84-98c7-52ebf98242f3",
  "name": "Text Analysis of Bias Data",
  "type": "@n8n/n8n-nodes-langchain.chainLlm",
  "position": [
    3720,
    280
  ],
  "parameters": {
    "text": "=This data compares the average rating given by different demographic groups against a baseline (the overall mean rating).\n\nObjective:\n1. Analyze the data and offer between 2 and 5 key takeaways with a title and short (one-sentence) summary.\n2. Below the key takeaways, Include a heading called \"Employee Experiences\". Under this heading, include a subheader and paragraph describing the possible perception of the workplace for members of any groups reporting significantly worse (or better) experiences than others.\n3. Ensure there are between 2-5 key takeaways and employee experiences\n\nData for analysis:\n{{ $json.population_analysis.toJsonString() }}",
    "promptType": "define"
  },
  "typeVersion": 1.4
}

================ Node #1529 ================
{
  "id": "b9033511-3421-467a-9bfa-73af01b99c4f",
  "name": "Aggregate",
  "type": "n8n-nodes-base.aggregate",
  "position": [
    740,
    120
  ],
  "parameters": {
    "options": {},
    "aggregate": "aggregateAllItemData"
  },
  "typeVersion": 1,
  "alwaysOutputData": true
}

================ Node #1530 ================
{
  "id": "a61dd9d3-4faa-4878-a6f3-ba8277279002",
  "name": "Window Buffer Memory",
  "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
  "position": [
    980,
    -320
  ],
  "parameters": {},
  "typeVersion": 1.3
}

================ Node #1531 ================
{
  "id": "2daabca5-37ec-4cad-9157-29926367e1a7",
  "name": "Sticky Note4",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    220,
    320
  ],
  "parameters": {
    "color": 3,
    "width": 840,
    "height": 80,
    "content": "## Within N8N, there will be a chat button to test"
  },
  "typeVersion": 1
}

================ Node #1532 ================
{
  "id": "bf4485b1-cd94-41c8-a183-bf1b785f2761",
  "name": "Sticky Note",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    -440,
    -520
  ],
  "parameters": {
    "color": 5,
    "width": 500,
    "height": 720,
    "content": "## Make OpenAI Citation for File Retrieval RAG\n\n## Use case\n\nIn this example, we will ensure that all texts from the OpenAI assistant search for citations and sources in the vector store files. We can also format the output for Markdown or HTML tags.\n\nThis is necessary because the assistant sometimes generates strange characters, and we can also use dynamic references such as citations 1, 2, 3, for example.\n\n## What this workflow does\n\nIn this workflow, we will use an OpenAI assistant created within their interface, equipped with a vector store containing some files for file retrieval.\n\nThe assistant will perform the file search within the OpenAI infrastructure and will return the content with citations.\n\n- We will make an HTTP request to retrieve all the details we need to format the text output.\n\n## Setup\n\nInsert an OpenAI Key\n\n## How to adjust it to your needs\n\nAt the end of the workflow, we have a block of code that will format the output, and there we can add Markdown tags to create links. Optionally, we can transform the Markdown formatting into HTML.\n\n\nby Davi Saranszky Mesquita\nhttps://www.linkedin.com/in/mesquitadavi/"
  },
  "typeVersion": 1
}

================ Node #1533 ================
{
  "id": "539a4e40-9745-4a26-aba8-2cc2b0dd6364",
  "name": "Create a simple Trigger to have the Chat button within N8N",
  "type": "@n8n/n8n-nodes-langchain.chatTrigger",
  "notes": "https://www.npmjs.com/package/@n8n/chat",
  "position": [
    260,
    -520
  ],
  "webhookId": "8ccaa299-6f99-427b-9356-e783893a3d0c",
  "parameters": {
    "options": {}
  },
  "notesInFlow": true,
  "typeVersion": 1.1
}

================ Node #1534 ================
{
  "id": "aa5b2951-df32-43ac-9939-83b02d818e73",
  "name": "OpenAI Assistant with Vector Store",
  "type": "@n8n/n8n-nodes-langchain.openAi",
  "position": [
    580,
    -520
  ],
  "parameters": {
    "options": {
      "preserveOriginalTools": false
    },
    "resource": "assistant",
    "assistantId": {
      "__rl": true,
      "mode": "list",
      "value": "asst_QAfdobVCVCMJz8LmaEC7nlId",
      "cachedResultName": "Teste"
    }
  },
  "credentials": {
    "openAiApi": {
      "id": "UfNrqPCRlD8FD9mk",
      "name": "OpenAi Lourival"
    }
  },
  "typeVersion": 1.7
}

================ Node #1535 ================
{
  "id": "1817b673-6cb3-49aa-9f38-a5876eb0e6fa",
  "name": "Sticky Note1",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    560,
    -680
  ],
  "parameters": {
    "width": 300,
    "content": "## Setup\n\n- Configure OpenAI Key\n\n### In this step, we will use an assistant created within the OpenAI platform that contains a vector store a.k.a file retrieval"
  },
  "typeVersion": 1
}

================ Node #1536 ================
{
  "id": "16429226-e850-4698-b419-fd9805a03fb7",
  "name": "Get ALL Thread Content",
  "type": "n8n-nodes-base.httpRequest",
  "position": [
    1260,
    -520
  ],
  "parameters": {
    "url": "=https://api.openai.com/v1/threads/{{ $json.threadId }}/messages",
    "options": {},
    "sendHeaders": true,
    "authentication": "predefinedCredentialType",
    "headerParameters": {
      "parameters": [
        {
          "name": "OpenAI-Beta",
          "value": "assistants=v2"
        }
      ]
    },
    "nodeCredentialType": "openAiApi"
  },
  "credentials": {
    "openAiApi": {
      "id": "UfNrqPCRlD8FD9mk",
      "name": "OpenAi Lourival"
    }
  },
  "typeVersion": 4.2,
  "alwaysOutputData": true
}

================ Node #1537 ================
{
  "id": "e8c88b08-5be2-4f7e-8b17-8cf804b3fe9f",
  "name": "Sticky Note2",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    1160,
    -620
  ],
  "parameters": {
    "content": "### Retrieving all thread content is necessary because the OpenAI tool does not retrieve all citations upon request."
  },
  "typeVersion": 1
}

================ Node #1538 ================
{
  "id": "0f51e09f-2782-4e2d-b797-d4d58fcabdaf",
  "name": "Split all message iterations from a thread",
  "type": "n8n-nodes-base.splitOut",
  "position": [
    220,
    -300
  ],
  "parameters": {
    "options": {},
    "fieldToSplitOut": "data"
  },
  "typeVersion": 1,
  "alwaysOutputData": true
}

================ Node #1539 ================
{
  "id": "4d569993-1ce3-4b32-beaf-382feac25da9",
  "name": "Split all content from a single message",
  "type": "n8n-nodes-base.splitOut",
  "position": [
    460,
    -300
  ],
  "parameters": {
    "options": {},
    "fieldToSplitOut": "content"
  },
  "typeVersion": 1,
  "alwaysOutputData": true
}

================ Node #1540 ================
{
  "id": "999e1c2b-1927-4483-aac1-6e8903f7ed25",
  "name": "Split all citations from a single message",
  "type": "n8n-nodes-base.splitOut",
  "position": [
    700,
    -300
  ],
  "parameters": {
    "options": {},
    "fieldToSplitOut": "text.annotations"
  },
  "typeVersion": 1,
  "alwaysOutputData": true
}

================ Node #1541 ================
{
  "id": "98af62f5-adb0-4e07-a146-fc2f13b851ce",
  "name": "Retrieve file name from a file ID",
  "type": "n8n-nodes-base.httpRequest",
  "onError": "continueRegularOutput",
  "position": [
    220,
    120
  ],
  "parameters": {
    "url": "=https://api.openai.com/v1/files/{{ $json.file_citation.file_id }}",
    "options": {},
    "sendQuery": true,
    "authentication": "predefinedCredentialType",
    "queryParameters": {
      "parameters": [
        {
          "name": "limit",
          "value": "1"
        }
      ]
    },
    "nodeCredentialType": "openAiApi"
  },
  "credentials": {
    "openAiApi": {
      "id": "UfNrqPCRlD8FD9mk",
      "name": "OpenAi Lourival"
    }
  },
  "typeVersion": 4.2,
  "alwaysOutputData": true
}

================ Node #1542 ================
{
  "id": "b11f0d3d-bdc4-4845-b14b-d0b0de214f01",
  "name": "Regularize output",
  "type": "n8n-nodes-base.set",
  "position": [
    480,
    120
  ],
  "parameters": {
    "options": {},
    "assignments": {
      "assignments": [
        {
          "id": "2dcaafee-5037-4a97-942a-bcdd02bc2ad9",
          "name": "id",
          "type": "string",
          "value": "={{ $json.id }}"
        },
        {
          "id": "b63f967d-ceea-4aa8-98b9-91f5ab21bfe8",
          "name": "filename",
          "type": "string",
          "value": "={{ $json.filename }}"
        },
        {
          "id": "f611e749-054a-441d-8610-df8ba42de2e1",
          "name": "text",
          "type": "string",
          "value": "={{ $('Split all citations from a single message').item.json.text }}"
        }
      ]
    }
  },
  "typeVersion": 3.4,
  "alwaysOutputData": true
}

================ Node #1543 ================
{
  "id": "0e999a0e-76ed-4897-989b-228f075e9bfb",
  "name": "Sticky Note3",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    440,
    -60
  ],
  "parameters": {
    "width": 200,
    "height": 220,
    "content": "### A file retrieval request contains a lot of information, and we want only the text that will be substituted and the file name.\n\n- id\n- filename\n- text\n"
  },
  "typeVersion": 1
}

================ Node #1544 ================
{
  "id": "53c79a6c-7543-435f-b40e-966dff0904d4",
  "name": "Sticky Note5",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    700,
    -60
  ],
  "parameters": {
    "width": 200,
    "height": 220,
    "content": "### With the last three splits, we may have many citations and texts to substitute. By doing an aggregation, it will be possible to handle everything as a single request."
  },
  "typeVersion": 1
}

================ Node #1545 ================
{
  "id": "381fb6d6-64fc-4668-9d3c-98aaa43a45ca",
  "name": "Sticky Note6",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    960,
    -60
  ],
  "parameters": {
    "height": 220,
    "content": "### This simple code will take all the previous files and citations and alter the original text, formatting the output. In this way, we can use Markdown tags to create links, or if you prefer, we can add an HTML transformation node."
  },
  "typeVersion": 1
}

================ Node #1546 ================
{
  "id": "d0cbb943-57ab-4850-8370-1625610a852a",
  "name": "Optional Markdown to HTML",
  "type": "n8n-nodes-base.markdown",
  "disabled": true,
  "position": [
    1220,
    120
  ],
  "parameters": {
    "html": "={{ $json.output }}",
    "options": {},
    "destinationKey": "output"
  },
  "typeVersion": 1
}

================ Node #1547 ================
{
  "id": "589e2418-5dec-47d0-ba08-420d84f09da7",
  "name": "Finnaly format the output",
  "type": "n8n-nodes-base.code",
  "position": [
    980,
    120
  ],
  "parameters": {
    "mode": "runOnceForEachItem",
    "jsCode": "let saida = $('OpenAI Assistant with Vector Store').item.json.output;\n\nfor (let i of $input.item.json.data) {\n saida = saida.replaceAll(i.text, \" _(\"+ i.filename+\")_ \");\n}\n\n$input.item.json.output = saida;\nreturn $input.item;"
  },
  "typeVersion": 2
}

================ Node #1548 ================
{
  "id": "2f5c6f8b-023a-4fc0-8684-66d7f743af0a",
  "name": "Sticky Note3",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    100,
    380
  ],
  "parameters": {
    "color": 4,
    "width": 217.47708894878716,
    "height": 233,
    "content": "### Gemini Flash model a base"
  },
  "typeVersion": 1
}

================ Node #1549 ================
{
  "id": "8c159251-d78c-4f18-a886-b930194e6459",
  "name": "Sticky Note4",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    600,
    40
  ],
  "parameters": {
    "color": 4,
    "width": 223.7196765498655,
    "height": 236.66152029520293,
    "content": "### Send the response from AI back to slack channel\n"
  },
  "typeVersion": 1
}

================ Node #1550 ================
{
  "id": "ee7164d8-f257-4e47-9867-239440153fd4",
  "name": "Sticky Note1",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    0,
    -20
  ],
  "parameters": {
    "color": 4,
    "width": 561,
    "height": 360,
    "content": "## Trigger the task daily, receive the meetings data, process the data and return response for sending\n\n\n\n\n\n\n\n\n\n\n\nNo memory assigned to the model since the model is running one task and doesn't need a followup, then send the data to the user."
  },
  "typeVersion": 1
}

================ Node #1551 ================
{
  "id": "30ac78b7-08ba-4df9-a67c-e6825a9de380",
  "name": "Send response back to slack channel",
  "type": "n8n-nodes-base.slack",
  "position": [
    660,
    100
  ],
  "webhookId": "636ae330-cc22-408b-b6a5-caf02e48897f",
  "parameters": {
    "text": "=Gemini : {{ $json.output.removeMarkdown() }} ",
    "select": "channel",
    "channelId": {
      "__rl": true,
      "mode": "list",
      "value": "C07QMTJHR0A",
      "cachedResultName": "ai-chat-gemini"
    },
    "otherOptions": {
      "mrkdwn": true,
      "includeLinkToWorkflow": false
    }
  },
  "credentials": {
    "slackApi": {
      "id": "DFQMzAsWKIdZFCR4",
      "name": "Slack account - iKemo"
    }
  },
  "typeVersion": 2.1
}

================ Node #1552 ================
{
  "id": "938738d6-1e2e-4e93-a5bf-70d11fd4fd32",
  "name": "Google Calendar - Get Events",
  "type": "n8n-nodes-base.googleCalendarTool",
  "position": [
    400,
    460
  ],
  "parameters": {
    "options": {
      "timeMax": "={{ $fromAI('end_date') }}",
      "timeMin": "={{ $fromAI('start_date') }}"
    },
    "calendar": {
      "__rl": true,
      "mode": "list",
      "value": "john@iKemo.io",
      "cachedResultName": "john@iKemo.io"
    },
    "operation": "getAll",
    "descriptionType": "manual",
    "toolDescription": "Use this tool when you\u2019re asked to retrieve events data."
  },
  "credentials": {
    "googleCalendarOAuth2Api": {
      "id": "R2W7XHvEyQgyykI0",
      "name": "Google Calendar - John"
    }
  },
  "typeVersion": 1.2
}

================ Node #1553 ================
{
  "id": "2290c30e-9e9f-471a-a882-df6856a1dd9d",
  "name": "Calendar AI Agent",
  "type": "@n8n/n8n-nodes-langchain.agent",
  "position": [
    240,
    100
  ],
  "parameters": {
    "text": "=summarize today's meetings.\nstartdate = {{ $now.format('yyyy-MM-dd 00:00:00') }}\nenddate = {{ $now.format('yyyy-MM-dd 23:59:59') }}",
    "options": {
      "systemMessage": "=You are a Google Calendar assistant.\nYour primary goal is to assist the user in managing their calendar effectively using Event Retrieval tool. \nAlways base your responses on the current date: \n{{ DateTime.local().toFormat('cccc d LLLL yyyy') }}.\nGeneral Guidelines:\nAlways mention all meetings attendees\nTool: Event Retrieval\nFormat the date range:\nstart_date: Start date and time in YYYY-MM-DD HH:mm:ss.\nend_date: End date and time in YYYY-MM-DD HH:mm:ss.\n"
    },
    "promptType": "define"
  },
  "typeVersion": 1.7
}

================ Node #1554 ================
{
  "id": "dd63bab9-0f95-4b84-8bbd-26a1f91fe635",
  "name": "Schedule Trigger",
  "type": "n8n-nodes-base.scheduleTrigger",
  "position": [
    20,
    100
  ],
  "parameters": {
    "rule": {
      "interval": [
        {
          "triggerAtHour": 9
        }
      ]
    }
  },
  "typeVersion": 1.2
}

================ Node #1555 ================
{
  "id": "06b9ecd2-83e0-498f-ad79-fbc89242a6f0",
  "name": "Sticky Note2",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    340,
    380
  ],
  "parameters": {
    "color": 4,
    "width": 221.73584905660368,
    "height": 233,
    "content": "### Access Google Calendar and fetch all the data"
  },
  "typeVersion": 1
}

================ Node #1556 ================
{
  "id": "48679508-2af8-4507-80a9-fc0aad171169",
  "name": "Google Gemini Chat Model",
  "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
  "position": [
    160,
    480
  ],
  "parameters": {
    "options": {},
    "modelName": "models/gemini-1.5-flash-latest"
  },
  "credentials": {
    "googlePalmApi": {
      "id": "3BBJHhMKD8W8VfL4",
      "name": "Google Gemini(PaLM) Api account"
    }
  },
  "typeVersion": 1
}

================ Node #1557 ================
{
  "id": "32d5bfee-97f1-4e92-b62e-d09bdd9c3821",
  "name": "Schedule Trigger",
  "type": "n8n-nodes-base.scheduleTrigger",
  "position": [
    -2640,
    -300
  ],
  "parameters": {
    "rule": {
      "interval": [
        {
          "field": "weeks",
          "triggerAtDay": [
            1,
            2,
            3,
            4,
            5
          ],
          "triggerAtHour": 8
        }
      ]
    }
  },
  "typeVersion": 1.2
}

================ Node #1558 ================
{
  "id": "b1f4078e-ac77-47ec-995c-f52fd98fafef",
  "name": "If",
  "type": "n8n-nodes-base.if",
  "position": [
    -1360,
    -280
  ],
  "parameters": {
    "options": {},
    "conditions": {
      "options": {
        "version": 2,
        "leftValue": "",
        "caseSensitive": true,
        "typeValidation": "strict"
      },
      "combinator": "and",
      "conditions": [
        {
          "id": "7094d6db-1fa7-4b59-91cf-6bbd5b5f067e",
          "operator": {
            "type": "object",
            "operation": "empty",
            "singleValue": true
          },
          "leftValue": "={{ $json }}",
          "rightValue": ""
        }
      ]
    }
  },
  "typeVersion": 2.2
}

================ Node #1559 ================
{
  "id": "afac08e1-b629-4467-86ef-907e4a5e8841",
  "name": "Loop Over Items",
  "type": "n8n-nodes-base.splitInBatches",
  "position": [
    -1760,
    -300
  ],
  "parameters": {
    "options": {
      "reset": false
    }
  },
  "typeVersion": 3
}

================ Node #1560 ================
{
  "id": "807ba450-9c89-4f88-aa84-91f43e3adfc6",
  "name": "Split Out",
  "type": "n8n-nodes-base.splitOut",
  "position": [
    -1960,
    -300
  ],
  "parameters": {
    "options": {},
    "fieldToSplitOut": "url, url"
  },
  "typeVersion": 1
}

================ Node #1561 ================
{
  "id": "08dd3f15-2030-48f2-ab0f-f85f797268e1",
  "name": "Request Hugging Face Paper",
  "type": "n8n-nodes-base.httpRequest",
  "position": [
    -2440,
    -300
  ],
  "parameters": {
    "url": "https://huggingface.co/papers",
    "options": {},
    "sendQuery": true,
    "queryParameters": {
      "parameters": [
        {
          "name": "date",
          "value": "={{ $now.minus(1,'days').format('yyyy-MM-dd') }}"
        }
      ]
    }
  },
  "typeVersion": 4.2
}

================ Node #1562 ================
{
  "id": "f37ba769-d881-4aad-927d-ca1f4a68b9a1",
  "name": "Extract Hugging Face Paper",
  "type": "n8n-nodes-base.html",
  "position": [
    -2200,
    -300
  ],
  "parameters": {
    "options": {},
    "operation": "extractHtmlContent",
    "extractionValues": {
      "values": [
        {
          "key": "url",
          "attribute": "href",
          "cssSelector": ".line-clamp-3",
          "returnArray": true,
          "returnValue": "attribute"
        }
      ]
    }
  },
  "typeVersion": 1.2
}

================ Node #1563 ================
{
  "id": "94ba99bf-a33b-4311-a4e6-86490e1bb9ad",
  "name": "Check Paper URL Existed",
  "type": "n8n-nodes-base.notion",
  "position": [
    -1540,
    -280
  ],
  "parameters": {
    "filters": {
      "conditions": [
        {
          "key": "URL|url",
          "urlValue": "={{ 'https://huggingface.co'+$json.url }}",
          "condition": "equals"
        }
      ]
    },
    "options": {},
    "resource": "databasePage",
    "operation": "getAll",
    "databaseId": {
      "__rl": true,
      "mode": "list",
      "value": "17b67aba-1fcc-80ae-baa1-d88ffda7ae83",
      "cachedResultUrl": "https://www.notion.so/17b67aba1fcc80aebaa1d88ffda7ae83",
      "cachedResultName": "huggingface-abstract"
    },
    "filterType": "manual"
  },
  "credentials": {
    "notionApi": {
      "id": "I5KdUzwhWnphQ862",
      "name": "notion"
    }
  },
  "typeVersion": 2.2,
  "alwaysOutputData": true
}

================ Node #1564 ================
{
  "id": "ece8dee2-e444-4557-aad9-5bdcb5ecd756",
  "name": "Request Hugging Face Paper Detail",
  "type": "n8n-nodes-base.httpRequest",
  "position": [
    -1080,
    -300
  ],
  "parameters": {
    "url": "={{ 'https://huggingface.co'+$('Split Out').item.json.url }}",
    "options": {}
  },
  "typeVersion": 4.2
}

================ Node #1565 ================
{
  "id": "53b266fe-e7c4-4820-92eb-78a6ba7a6430",
  "name": "OpenAI Analysis Abstract",
  "type": "@n8n/n8n-nodes-langchain.openAi",
  "position": [
    -640,
    -300
  ],
  "parameters": {
    "modelId": {
      "__rl": true,
      "mode": "list",
      "value": "gpt-4o-2024-11-20",
      "cachedResultName": "GPT-4O-2024-11-20"
    },
    "options": {},
    "messages": {
      "values": [
        {
          "role": "system",
          "content": "Extract the following key details from the paper abstract:\n\nCore Introduction: Summarize the main contributions and objectives of the paper, highlighting its innovations and significance.\nKeyword Extraction: List 2-5 keywords that best represent the research direction and techniques of the paper.\nKey Data and Results: Extract important performance metrics, comparison results, and the paper's advantages over other studies.\nTechnical Details: Provide a brief overview of the methods, optimization techniques, and datasets mentioned in the paper.\nClassification: Assign an appropriate academic classification based on the content of the paper.\n\n\nOutput as json\uff1a\n{\n \"Core_Introduction\": \"PaSa is an advanced Paper Search agent powered by large language models that can autonomously perform a series of decisions (including invoking search tools, reading papers, and selecting relevant references) to provide comprehensive and accurate results for complex academic queries.\",\n \"Keywords\": [\n \"Paper Search Agent\",\n \"Large Language Models\",\n \"Reinforcement Learning\",\n \"Academic Queries\",\n \"Performance Benchmarking\"\n ],\n \"Data_and_Results\": \"PaSa outperforms existing baselines (such as Google, GPT-4, chatGPT) in tests using AutoScholarQuery (35k academic queries) and RealScholarQuery (real-world academic queries). For example, PaSa-7B exceeds Google with GPT-4o by 37.78% in recall@20 and 39.90% in recall@50.\",\n \"Technical_Details\": \"PaSa is optimized using reinforcement learning with the AutoScholarQuery synthetic dataset, demonstrating superior performance in multiple benchmarks.\",\n \"Classification\": [\n \"Artificial Intelligence (AI)\",\n \"Academic Search and Information Retrieval\",\n \"Natural Language Processing (NLP)\",\n \"Reinforcement Learning\"\n ]\n}\n```"
        },
        {
          "content": "={{ $json.abstract }}"
        }
      ]
    },
    "jsonOutput": true
  },
  "credentials": {
    "openAiApi": {
      "id": "LmLcxHwbzZNWxqY6",
      "name": "Unnamed credential"
    }
  },
  "typeVersion": 1.8
}

================ Node #1566 ================
{
  "id": "f491cd7f-598e-46fd-b80c-04cfa9766dfd",
  "name": "Store Abstract Notion",
  "type": "n8n-nodes-base.notion",
  "position": [
    -300,
    -300
  ],
  "parameters": {
    "options": {},
    "resource": "databasePage",
    "databaseId": {
      "__rl": true,
      "mode": "list",
      "value": "17b67aba-1fcc-80ae-baa1-d88ffda7ae83",
      "cachedResultUrl": "https://www.notion.so/17b67aba1fcc80aebaa1d88ffda7ae83",
      "cachedResultName": "huggingface-abstract"
    },
    "propertiesUi": {
      "propertyValues": [
        {
          "key": "URL|url",
          "urlValue": "={{ 'https://huggingface.co'+$('Split Out').item.json.url }}"
        },
        {
          "key": "title|title",
          "title": "={{ $('Extract Hugging Face Paper Abstract').item.json.title }}"
        },
        {
          "key": "abstract|rich_text",
          "textContent": "={{ $('Extract Hugging Face Paper Abstract').item.json.abstract.substring(0,2000) }}"
        },
        {
          "key": "scrap-date|date",
          "date": "={{ $today.format('yyyy-MM-dd') }}",
          "includeTime": false
        },
        {
          "key": "Classification|rich_text",
          "textContent": "={{ $json.message.content.Classification.join(',') }}"
        },
        {
          "key": "Technical_Details|rich_text",
          "textContent": "={{ $json.message.content.Technical_Details }}"
        },
        {
          "key": "Data_and_Results|rich_text",
          "textContent": "={{ $json.message.content.Data_and_Results }}"
        },
        {
          "key": "keywords|rich_text",
          "textContent": "={{ $json.message.content.Keywords.join(',') }}"
        },
        {
          "key": "Core Introduction|rich_text",
          "textContent": "={{ $json.message.content.Core_Introduction }}"
        }
      ]
    }
  },
  "credentials": {
    "notionApi": {
      "id": "I5KdUzwhWnphQ862",
      "name": "notion"
    }
  },
  "typeVersion": 2.2
}

================ Node #1567 ================
{
  "id": "d5816a1c-d1fa-4be2-8088-57fbf68e6b43",
  "name": "Extract Hugging Face Paper Abstract",
  "type": "n8n-nodes-base.html",
  "position": [
    -840,
    -300
  ],
  "parameters": {
    "options": {},
    "operation": "extractHtmlContent",
    "extractionValues": {
      "values": [
        {
          "key": "abstract",
          "cssSelector": ".text-gray-700"
        },
        {
          "key": "title",
          "cssSelector": ".text-2xl"
        }
      ]
    }
  },
  "typeVersion": 1.2
}

================ Node #1568 ================
{
  "id": "91ba5982-e226-4f0b-af0d-8c9a44b08279",
  "name": "Schedule Trigger",
  "type": "n8n-nodes-base.scheduleTrigger",
  "position": [
    -1740,
    300
  ],
  "parameters": {
    "rule": {
      "interval": [
        {
          "field": "weeks",
          "triggerAtDay": [
            1
          ],
          "triggerAtHour": 7
        }
      ]
    }
  },
  "typeVersion": 1.2
}

================ Node #1569 ================
{
  "id": "62c38eaf-2222-4d22-8589-677f36bce10d",
  "name": "Google Analytics Letzte 7 Tage",
  "type": "n8n-nodes-base.googleAnalytics",
  "position": [
    -1540,
    300
  ],
  "parameters": {
    "metricsGA4": {
      "metricValues": [
        {
          "listName": "screenPageViews"
        },
        {},
        {
          "listName": "sessions"
        },
        {
          "listName": "sessionsPerUser"
        },
        {
          "name": "averageSessionDuration",
          "listName": "other"
        },
        {
          "name": "ecommercePurchases",
          "listName": "other"
        },
        {
          "name": "averagePurchaseRevenue",
          "listName": "other"
        },
        {
          "name": "purchaseRevenue",
          "listName": "other"
        }
      ]
    },
    "propertyId": {
      "__rl": true,
      "mode": "list",
      "value": "345060083",
      "cachedResultUrl": "https://analytics.google.com/analytics/web/#/p345060083/",
      "cachedResultName": "https://www.ep-reisen.de \u00a0\u2013 GA4"
    },
    "dimensionsGA4": {
      "dimensionValues": [
        {}
      ]
    },
    "additionalFields": {}
  },
  "credentials": {
    "googleAnalyticsOAuth2": {
      "id": "onRKXREI8izfGzv0",
      "name": "Google Analytics account"
    }
  },
  "typeVersion": 2
}

================ Node #1570 ================
{
  "id": "0a51c2f3-a487-4226-884f-63d4cb2bf4e4",
  "name": "Send Email",
  "type": "n8n-nodes-base.emailSend",
  "position": [
    420,
    80
  ],
  "parameters": {
    "html": "={{ $json.message.content }}",
    "options": {},
    "subject": "Weekly Report: Google Analytics: Last 7 days",
    "toEmail": "friedemann.schuetz@ep-reisen.de",
    "fromEmail": "friedemann.schuetz@posteo.de"
  },
  "credentials": {
    "smtp": {
      "id": "A71x7hx6lKj7nxp1",
      "name": "SMTP account"
    }
  },
  "typeVersion": 2.1
}

================ Node #1571 ================
{
  "id": "04963783-f455-4983-afea-e94b316d8532",
  "name": "Telegram",
  "type": "n8n-nodes-base.telegram",
  "position": [
    420,
    420
  ],
  "parameters": {
    "text": "={{ $json.message.content }}",
    "chatId": "1810565648",
    "additionalFields": {}
  },
  "credentials": {
    "telegramApi": {
      "id": "0hnyvxyUMN77sBmU",
      "name": "Telegram account"
    }
  },
  "typeVersion": 1.2
}

================ Node #1572 ================
{
  "id": "3b6b4902-15b3-4bbc-8427-c35471a7431b",
  "name": "Processing for Telegram",
  "type": "@n8n/n8n-nodes-langchain.openAi",
  "position": [
    60,
    420
  ],
  "parameters": {
    "modelId": {
      "__rl": true,
      "mode": "list",
      "value": "gpt-4o-mini",
      "cachedResultName": "GPT-4O-MINI"
    },
    "options": {},
    "messages": {
      "values": [
        {
          "content": "=Convert the following text from HTML to normal text:\n\n{{ $json.message.content }}\n\nPlease format the table so that each metric is a separate paragraph!\n\nExample:\n\nTotal views: xx.xxx\nTotal views previous year: xx,xxx\nDifference: x.xx %\n\nTotal users: xx,xxx\nTotal users previous year: xx,xxx\nDifference: -x.xx %"
        }
      ]
    }
  },
  "credentials": {
    "openAiApi": {
      "id": "niikB3HA4fT5WAqt",
      "name": "OpenAi account"
    }
  },
  "typeVersion": 1.7
}

================ Node #1573 ================
{
  "id": "d761980c-0327-4d4e-92aa-d0342b2e249e",
  "name": "Calculator",
  "type": "@n8n/n8n-nodes-langchain.toolCalculator",
  "position": [
    140,
    300
  ],
  "parameters": {},
  "typeVersion": 1
}

================ Node #1574 ================
{
  "id": "ce7ba356-80bb-4b17-9445-fb535267cdf0",
  "name": "Google Analytics: Past 7 days of the previous year",
  "type": "n8n-nodes-base.googleAnalytics",
  "position": [
    -600,
    300
  ],
  "parameters": {
    "endDate": "={{ $json.endDate }}",
    "dateRange": "custom",
    "startDate": "={{ $json.startDate }}",
    "metricsGA4": {
      "metricValues": [
        {
          "listName": "screenPageViews"
        },
        {},
        {
          "listName": "sessions"
        },
        {
          "listName": "sessionsPerUser"
        },
        {
          "name": "averageSessionDuration",
          "listName": "other"
        },
        {
          "name": "ecommercePurchases",
          "listName": "other"
        },
        {
          "name": "averagePurchaseRevenue",
          "listName": "other"
        },
        {
          "name": "purchaseRevenue",
          "listName": "other"
        }
      ]
    },
    "propertyId": {
      "__rl": true,
      "mode": "list",
      "value": "345060083",
      "cachedResultUrl": "https://analytics.google.com/analytics/web/#/p345060083/",
      "cachedResultName": "https://www.ep-reisen.de \u00a0\u2013 GA4"
    },
    "dimensionsGA4": {
      "dimensionValues": [
        {}
      ]
    },
    "additionalFields": {}
  },
  "credentials": {
    "googleAnalyticsOAuth2": {
      "id": "onRKXREI8izfGzv0",
      "name": "Google Analytics account"
    }
  },
  "typeVersion": 2
}

================ Node #1575 ================
{
  "id": "d2062aaa-e41b-4405-8470-9e7b4cd77245",
  "name": "Summarize Data",
  "type": "n8n-nodes-base.summarize",
  "position": [
    -1080,
    300
  ],
  "parameters": {
    "options": {},
    "fieldsToSummarize": {
      "values": [
        {
          "field": "Aufrufe",
          "aggregation": "sum"
        },
        {
          "field": "Nutzer",
          "aggregation": "sum"
        },
        {
          "field": "Sitzungen",
          "aggregation": "sum"
        },
        {
          "field": "Sitzungen pro Nutzer",
          "aggregation": "average"
        },
        {
          "field": "Sitzungsdauer",
          "aggregation": "average"
        },
        {
          "field": "K\u00e4ufe",
          "aggregation": "sum"
        },
        {
          "field": "Revenue pro Kauf",
          "aggregation": "average"
        },
        {
          "field": "Revenue",
          "aggregation": "sum"
        },
        {
          "field": "date"
        }
      ]
    }
  },
  "typeVersion": 1
}

================ Node #1576 ================
{
  "id": "d1f48d36-9f27-4cda-af53-e6d430d1a8db",
  "name": "Summarize Data1",
  "type": "n8n-nodes-base.summarize",
  "position": [
    -220,
    300
  ],
  "parameters": {
    "options": {},
    "fieldsToSummarize": {
      "values": [
        {
          "field": "Aufrufe",
          "aggregation": "sum"
        },
        {
          "field": "Nutzer",
          "aggregation": "sum"
        },
        {
          "field": "Sitzungen",
          "aggregation": "sum"
        },
        {
          "field": "Sitzungen pro Nutzer",
          "aggregation": "average"
        },
        {
          "field": "Sitzungsdauer",
          "aggregation": "average"
        },
        {
          "field": "K\u00e4ufe",
          "aggregation": "sum"
        },
        {
          "field": "Revenue pro Kauf",
          "aggregation": "average"
        },
        {
          "field": "Revenue",
          "aggregation": "sum"
        },
        {
          "field": "date"
        }
      ]
    }
  },
  "typeVersion": 1
}

================ Node #1577 ================
{
  "id": "5b6a0644-3839-4a62-8ff3-bf866aa4568c",
  "name": "Calculation same period previous year",
  "type": "n8n-nodes-base.code",
  "position": [
    -840,
    300
  ],
  "parameters": {
    "jsCode": "return {\n // Berechnung des Startdatums: Vorjahr, gleiche Woche, 7 Tage zur\u00fcck\n startDate: (() => {\n const date = new Date();\n date.setFullYear(date.getFullYear() - 1); // Zur\u00fcck ins Vorjahr\n date.setDate(date.getDate() - 7); // 7 Tage zur\u00fcck\n return date.toISOString().split('T')[0];\n })(),\n \n // Berechnung des Enddatums: Vorjahr, heutiges Datum\n endDate: (() => {\n const date = new Date();\n date.setFullYear(date.getFullYear() - 1); // Zur\u00fcck ins Vorjahr\n return date.toISOString().split('T')[0];\n })(),\n};\n"
  },
  "typeVersion": 2
}

================ Node #1578 ================
{
  "id": "ab813532-cbe6-4c41-b20b-7efaa1ae4389",
  "name": "Assign data",
  "type": "n8n-nodes-base.set",
  "position": [
    -1300,
    300
  ],
  "parameters": {
    "options": {},
    "assignments": {
      "assignments": [
        {
          "id": "9c2f8b9a-e964-49a0-8837-efb0dfd7bcae",
          "name": "Aufrufe",
          "type": "number",
          "value": "={{ $json.screenPageViews }}"
        },
        {
          "id": "8b524518-1268-4971-b5c9-ae7da09d94f9",
          "name": "Nutzer",
          "type": "number",
          "value": "={{ $json.totalUsers }}"
        },
        {
          "id": "ca7279b9-c643-425f-aa99-cb17146e9994",
          "name": "Sitzungen",
          "type": "number",
          "value": "={{ $json.sessions }}"
        },
        {
          "id": "591288f7-e8cf-445e-872a-5b83f997b825",
          "name": "Sitzungen pro Nutzer",
          "type": "number",
          "value": "={{ $json.sessionsPerUser }}"
        },
        {
          "id": "dc1a43da-3f3a-4dca-bbde-904222d7f693",
          "name": "Sitzungsdauer",
          "type": "number",
          "value": "={{ $json.averageSessionDuration }}"
        },
        {
          "id": "eac0b53e-c452-40b8-92bc-8af8ea349984",
          "name": "=K\u00e4ufe",
          "type": "number",
          "value": "={{ $json.ecommercePurchases }}"
        },
        {
          "id": "b96439be-189d-4ebe-b49e-d5c31fefe9f0",
          "name": "Revenue pro Kauf",
          "type": "number",
          "value": "={{ $json.averagePurchaseRevenue }}"
        },
        {
          "id": "94835d43-2fc8-49c0-97f0-6f0f8699337a",
          "name": "Revenue",
          "type": "number",
          "value": "={{ $json.purchaseRevenue }}"
        },
        {
          "id": "d70f8138-3b84-4b88-a98f-eb929e1cc29a",
          "name": "date",
          "type": "string",
          "value": "={{ $json.date }}"
        }
      ]
    }
  },
  "typeVersion": 3.4
}

================ Node #1579 ================
{
  "id": "2454fe8a-005d-46dc-ae22-1044c1b793b7",
  "name": "Assign data1",
  "type": "n8n-nodes-base.set",
  "position": [
    -400,
    300
  ],
  "parameters": {
    "options": {},
    "assignments": {
      "assignments": [
        {
          "id": "9c2f8b9a-e964-49a0-8837-efb0dfd7bcae",
          "name": "Aufrufe",
          "type": "number",
          "value": "={{ $json.screenPageViews }}"
        },
        {
          "id": "8b524518-1268-4971-b5c9-ae7da09d94f9",
          "name": "Nutzer",
          "type": "number",
          "value": "={{ $json.totalUsers }}"
        },
        {
          "id": "ca7279b9-c643-425f-aa99-cb17146e9994",
          "name": "Sitzungen",
          "type": "number",
          "value": "={{ $json.sessions }}"
        },
        {
          "id": "591288f7-e8cf-445e-872a-5b83f997b825",
          "name": "Sitzungen pro Nutzer",
          "type": "number",
          "value": "={{ $json.sessionsPerUser }}"
        },
        {
          "id": "dc1a43da-3f3a-4dca-bbde-904222d7f693",
          "name": "Sitzungsdauer",
          "type": "number",
          "value": "={{ $json.averageSessionDuration }}"
        },
        {
          "id": "eac0b53e-c452-40b8-92bc-8af8ea349984",
          "name": "=K\u00e4ufe",
          "type": "number",
          "value": "={{ $json.ecommercePurchases }}"
        },
        {
          "id": "b96439be-189d-4ebe-b49e-d5c31fefe9f0",
          "name": "Revenue pro Kauf",
          "type": "number",
          "value": "={{ $json.averagePurchaseRevenue }}"
        },
        {
          "id": "94835d43-2fc8-49c0-97f0-6f0f8699337a",
          "name": "Revenue",
          "type": "number",
          "value": "={{ $json.purchaseRevenue }}"
        },
        {
          "id": "dd8255c6-65b1-41ce-b596-70c09108d6e2",
          "name": "=date",
          "type": "string",
          "value": "={{ $json.date }}"
        }
      ]
    }
  },
  "typeVersion": 3.4
}

================ Node #1580 ================
{
  "id": "0a48cbb0-3d4c-4ac8-8dba-08213f7fc430",
  "name": "Sticky Note",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    -2220,
    80
  ],
  "parameters": {
    "width": 440,
    "height": 560,
    "content": "Welcome to my Google Analytics Weekly Report Workflow!\n\nThis workflow has the following sequence:\n\n1. time trigger (e.g. every Monday at 7 a.m.)\n2. retrieval of Google Analytics data from the last 7 days\n3. assignment and summary of the data\n4. retrieval of Google Analytics data from the last 7 days of the previous year\n5. allocation and summary of the data\n6. preparation in tabular form and brief analysis by AI.\n7. sending the report as an email\n8. preparation in short form by AI for Telegram (optional)\n9. sending as Telegram message.\n\nThe following accesses are required for the workflow:\n- Google Analytics (via Google Analytics API): https://docs.n8n.io/integrations/builtin/credentials/google/\n- AI API access (e.g. via OpenAI, Anthropic, Google or Ollama)\n- SMTP access data (for sending the mail)\n- Telegram access data (optional for sending as Telegram message): https://docs.n8n.io/integrations/builtin/credentials/telegram/\n\nYou can contact me via LinkedIn, if you have any questions: https://www.linkedin.com/in/friedemann-schuetz"
  },
  "typeVersion": 1
}

================ Node #1581 ================
{
  "id": "c87bc648-8fe8-4cec-84d4-2742060f9c53",
  "name": "Processing for email",
  "type": "@n8n/n8n-nodes-langchain.openAi",
  "position": [
    60,
    80
  ],
  "parameters": {
    "modelId": {
      "__rl": true,
      "mode": "list",
      "value": "gpt-4o",
      "cachedResultName": "GPT-4O"
    },
    "options": {},
    "messages": {
      "values": [
        {
          "content": "=Please analyze the following data and output the results in tabular form:\n\n| Metrics | Last 7 days | Previous year | Percentage change |\n|-------------------------------|---------------|---------|\n| Total page views | {{ $('Summarize Data').item.json.sum_Aufrufe }} | {{ $('Summarize Data1').item.json.sum_Aufrufe }} | Percentage change |\n| total users | {{ $('Summarize Data').item.json.sum_Nutzer }} | {{ $('Summarize Data1').item.json.sum_Nutzer }} | Percentage change |\n| Total sessions | {{ $('Summarize Data').item.json.sum_Sitzungen }} | {{ $('Summarize Data1').item.json.sum_Sitzungen }} | Percentage change |\n| Average sessions/user | {{ $('Summarize Data').item.json.average_Sitzungen_pro_Nutzer }} | {{ $('Summarize Data1').item.json.average_Sitzungen_pro_Nutzer }} | Percentage change |\n| Average session duration | {{ $('Summarize Data').item.json.average_Sitzungsdauer }} | {{ $('Summarize Data1').item.json.average_Sitzungsdauer }} | Percentage change |\n| Total purchases | {{ $('Summarize Data').item.json['sum_K\u00e4ufe'] }} | {{ $('Summarize Data1').item.json['sum_K\u00e4ufe'] }} | Percentage change |\n| Average revenue/purchase | {{ $('Summarize Data').item.json.average_Revenue_pro_Kauf }} | {{ $('Summarize Data1').item.json.average_Revenue_pro_Kauf }} | Percentage change |\n| Total revenue | {{ $('Summarize Data').item.json.sum_Revenue }} | {{ $('Summarize Data1').item.json.sum_Revenue }} | Percentage change |\n\nFormat for numbers:\n- Dot (.) for numbers in thousands (e.g. 4,000)\n- Comma (,) for decimal numbers (e.g. 3.4)\n- Conversion of average session duration in minutes instead of seconds\n- Average turnover/purchase and total turnover in \u20ac\n\nPlease write a short summary of the analyzed data above the table (in a maximum of 3 sentences!)\n\nPlease format to a sleek and modern HTML format so that the result can be sent as HTML mail!\n\nStructure of the e-mail:\n\n\u201cHello! Here is the Weekly Report: Google Analytics of the last 7 days!\n[Summary]\n[Table]\u201d"
        }
      ]
    }
  },
  "credentials": {
    "openAiApi": {
      "id": "niikB3HA4fT5WAqt",
      "name": "OpenAi account"
    }
  },
  "typeVersion": 1.7
}

================ Node #1582 ================
{
  "id": "f60ef5f9-bc08-4cc9-804e-697ae6f88b9b",
  "name": "Google Gemini Chat Model",
  "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
  "position": [
    980,
    920
  ],
  "parameters": {
    "options": {},
    "modelName": "models/gemini-1.5-pro-latest"
  },
  "credentials": {
    "googlePalmApi": {
      "id": "hmNTKSKfppgtDbM5",
      "name": "Google Gemini(PaLM) Api account"
    }
  },
  "typeVersion": 1
}

================ Node #1583 ================
{
  "id": "81d3f7b8-20cb-4aac-82a9-d4e8e6581105",
  "name": "Get PDF or Images",
  "type": "n8n-nodes-base.googleDriveTrigger",
  "position": [
    220,
    420
  ],
  "parameters": {
    "event": "fileCreated",
    "options": {},
    "pollTimes": {
      "item": [
        {
          "mode": "everyMinute"
        }
      ]
    },
    "triggerOn": "specificFolder",
    "folderToWatch": {
      "__rl": true,
      "mode": "list",
      "value": "1HOeRP5iwccg93UPUYmWYD7DyDmRREkhj",
      "cachedResultUrl": "https://drive.google.com/drive/folders/1HOeRP5iwccg93UPUYmWYD7DyDmRREkhj",
      "cachedResultName": "Actual Budget"
    },
    "authentication": "serviceAccount"
  },
  "credentials": {
    "googleApi": {
      "id": "axkK6IN61bEAT6GM",
      "name": "Google Service Account account"
    }
  },
  "typeVersion": 1
}

================ Node #1584 ================
{
  "id": "fe9a8228-7950-4e2c-8982-328e03725782",
  "name": "Route based on PDF or Image",
  "type": "n8n-nodes-base.switch",
  "position": [
    480,
    420
  ],
  "parameters": {
    "rules": {
      "rules": [
        {
          "value2": "application/pdf",
          "outputKey": "pdf"
        },
        {
          "value2": "image/",
          "operation": "contains",
          "outputKey": "image"
        }
      ]
    },
    "value1": "={{$json.mimeType}}",
    "dataType": "string"
  },
  "typeVersion": 2
}

================ Node #1585 ================
{
  "id": "f62b71e5-af17-4f85-abff-7cee5100affc",
  "name": "Download PDF",
  "type": "n8n-nodes-base.googleDrive",
  "position": [
    740,
    320
  ],
  "parameters": {
    "fileId": {
      "__rl": true,
      "mode": "id",
      "value": "={{ $('Get PDF or Images').item.json.id }}"
    },
    "options": {},
    "operation": "download",
    "authentication": "serviceAccount"
  },
  "credentials": {
    "googleApi": {
      "id": "axkK6IN61bEAT6GM",
      "name": "Google Service Account account"
    }
  },
  "executeOnce": true,
  "typeVersion": 3
}

================ Node #1586 ================
{
  "id": "fa99fbcf-1353-410d-a0db-48cea1178a76",
  "name": "Download Image",
  "type": "n8n-nodes-base.googleDrive",
  "position": [
    740,
    740
  ],
  "parameters": {
    "fileId": {
      "__rl": true,
      "mode": "id",
      "value": "={{ $('Get PDF or Images').item.json.id }}"
    },
    "options": {},
    "operation": "download",
    "authentication": "serviceAccount"
  },
  "credentials": {
    "googleApi": {
      "id": "axkK6IN61bEAT6GM",
      "name": "Google Service Account account"
    }
  },
  "executeOnce": true,
  "retryOnFail": false,
  "typeVersion": 3,
  "alwaysOutputData": true
}

================ Node #1587 ================
{
  "id": "e4979746-44bb-493e-b5eb-f9646b510888",
  "name": "Extract data from PDF",
  "type": "n8n-nodes-base.extractFromFile",
  "position": [
    980,
    320
  ],
  "parameters": {
    "options": {},
    "operation": "pdf"
  },
  "typeVersion": 1
}

================ Node #1588 ================
{
  "id": "6549c335-e749-4b95-b77d-096a5e77af5e",
  "name": "Send data to A.I.",
  "type": "n8n-nodes-base.httpRequest",
  "position": [
    1180,
    320
  ],
  "parameters": {
    "url": "https://openrouter.ai/api/v1/chat/completions",
    "method": "POST",
    "options": {},
    "jsonBody": "={\n \"model\": \"meta-llama/llama-3.1-70b-instruct:free\",\n \"messages\": [\n {\n \"role\": \"user\",\n \"content\": \"You are given a bank statement.{{encodeURIComponent($json.text)}}. Read the PDF and export all the transactions as CSV. Add a column called category and based on the information assign a category name. Return only the CSV data starting with the header row.\"\n }\n ]\n}",
    "sendBody": true,
    "specifyBody": "json",
    "authentication": "genericCredentialType",
    "genericAuthType": "httpHeaderAuth"
  },
  "credentials": {
    "httpHeaderAuth": {
      "id": "WY7UkF14ksPKq3S8",
      "name": "Header Auth account 2"
    }
  },
  "typeVersion": 4.2,
  "alwaysOutputData": false
}

================ Node #1589 ================
{
  "id": "42341f03-c9fc-4290-963e-1a723202a739",
  "name": "Convert to CSV",
  "type": "n8n-nodes-base.convertToFile",
  "position": [
    1400,
    320
  ],
  "parameters": {
    "options": {}
  },
  "typeVersion": 1.1
}

================ Node #1590 ================
{
  "id": "bb446447-3f46-47e7-96a2-3fc720715828",
  "name": "Upload to Google Drive",
  "type": "n8n-nodes-base.googleDrive",
  "position": [
    1640,
    320
  ],
  "parameters": {
    "name": "={{$today}}",
    "driveId": {
      "__rl": true,
      "mode": "list",
      "value": "My Drive",
      "cachedResultUrl": "https://drive.google.com/drive/my-drive",
      "cachedResultName": "My Drive"
    },
    "options": {},
    "folderId": {
      "__rl": true,
      "mode": "list",
      "value": "1Zo4OFCv1qWRX1jo0VL_iqUBf4v0fZEXe",
      "cachedResultUrl": "https://drive.google.com/drive/folders/1Zo4OFCv1qWRX1jo0VL_iqUBf4v0fZEXe",
      "cachedResultName": "CSV Exports"
    },
    "authentication": "serviceAccount"
  },
  "credentials": {
    "googleApi": {
      "id": "axkK6IN61bEAT6GM",
      "name": "Google Service Account account"
    }
  },
  "typeVersion": 3
}

================ Node #1591 ================
{
  "id": "843bc9c1-79a6-4f42-b9ee-fbec5f30b18d",
  "name": "Convert to CSV2",
  "type": "n8n-nodes-base.convertToFile",
  "position": [
    1360,
    740
  ],
  "parameters": {
    "options": {}
  },
  "typeVersion": 1.1
}

================ Node #1592 ================
{
  "id": "6404bf65-3a7e-4be9-9b7f-98a23dca2ffd",
  "name": "Upload to Google Drive1",
  "type": "n8n-nodes-base.googleDrive",
  "position": [
    1640,
    740
  ],
  "parameters": {
    "name": "={{$today}}",
    "driveId": {
      "__rl": true,
      "mode": "list",
      "value": "My Drive",
      "cachedResultUrl": "https://drive.google.com/drive/my-drive",
      "cachedResultName": "My Drive"
    },
    "options": {},
    "folderId": {
      "__rl": true,
      "mode": "list",
      "value": "1Zo4OFCv1qWRX1jo0VL_iqUBf4v0fZEXe",
      "cachedResultUrl": "https://drive.google.com/drive/folders/1Zo4OFCv1qWRX1jo0VL_iqUBf4v0fZEXe",
      "cachedResultName": "CSV Exports"
    },
    "authentication": "serviceAccount"
  },
  "credentials": {
    "googleApi": {
      "id": "axkK6IN61bEAT6GM",
      "name": "Google Service Account account"
    }
  },
  "typeVersion": 3
}

================ Node #1593 ================
{
  "id": "5dd5771f-6ccb-47ab-acbb-d6cbec60d22b",
  "name": "Sticky Note",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    220,
    -40
  ],
  "parameters": {
    "width": 589.0376569037658,
    "height": 163.2468619246862,
    "content": "## How to extract PDF and image text into CSV using n8n (without manual data entry)\n\nThis workflow will extract text data from PDF and images, then store it as CSV.\n\n[\ud83d\udca1 You can read more about this workflow here](https://rumjahn.com/how-to-create-an-a-i-agent-to-analyze-matomo-analytics-using-n8n-for-free/)"
  },
  "typeVersion": 1
}

================ Node #1594 ================
{
  "id": "37416630-9b52-4ce6-98d0-1bdd39ff0d6b",
  "name": "Sticky Note1",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    160,
    160
  ],
  "parameters": {
    "color": 4,
    "width": 248.11715481171547,
    "height": 432.7364016736402,
    "content": "## Get PDF or image\nYou need to create a new folder inside Google Drive for uploading your PDF and images.\n\nOnce you create a folder, you need to add your Google cloud user by going to Share -> Add user. The user email should be like: n8n-server@n8n-server-435232.iam.gserviceaccount.com"
  },
  "typeVersion": 1
}

================ Node #1595 ================
{
  "id": "3ab10f17-de8f-4263-aef8-cc2fb090ffe5",
  "name": "Sticky Note2",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    1120,
    52.864368048917754
  ],
  "parameters": {
    "color": 5,
    "height": 446.3929762816575,
    "content": "## Send to Openrouter\nYou need to set up an Openrouter account to use this. It sends the data to openrouter to extract text.\n\nUse Header Auth. Name is \"Authorization\" and value is \"Bearer {API token}\"."
  },
  "typeVersion": 1
}

================ Node #1596 ================
{
  "id": "e966f95c-c54e-4d11-895d-d5f75c53aca5",
  "name": "Sticky Note3",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    920,
    540
  ],
  "parameters": {
    "color": 6,
    "width": 399.0962343096232,
    "height": 517.154811715481,
    "content": "## Vertex AI for image recogniztion\nWe send the photo to Vertex AI to extract text. You'll need to activate Vertex AI and add the correct rights to your Google cloud credentials. \n- Enable Vertex API\n- Add vertex to user account"
  },
  "typeVersion": 1
}

================ Node #1597 ================
{
  "id": "daa3ab66-fa14-4792-96d0-3bcbeffd5d60",
  "name": "Vertex A.I. extract text",
  "type": "@n8n/n8n-nodes-langchain.chainLlm",
  "position": [
    980,
    740
  ],
  "parameters": {
    "text": "=Extract the transactions from the image",
    "messages": {
      "messageValues": [
        {
          "message": "=You are given a screenshot of payment transactions. Read the image and export all the transactions as CSV. Add a column called category and based on the information assign a category name. Return only the CSV data starting with the header row."
        },
        {
          "type": "HumanMessagePromptTemplate",
          "messageType": "imageBinary"
        }
      ]
    },
    "promptType": "define",
    "hasOutputParser": true
  },
  "typeVersion": 1.4
}

================ Node #1598 ================
{
  "id": "c777c41b-842d-4504-a1a0-ccbb034a0fdd",
  "name": "When clicking \u2018Test workflow\u2019",
  "type": "n8n-nodes-base.manualTrigger",
  "position": [
    -320,
    300
  ],
  "parameters": {},
  "typeVersion": 1
}

================ Node #1599 ================
{
  "id": "74fafd7c-55a4-46ec-b4a8-33d46f2b5b54",
  "name": "Hacker News",
  "type": "n8n-nodes-base.hackerNews",
  "position": [
    -20,
    300
  ],
  "parameters": {
    "resource": "all",
    "additionalFields": {}
  },
  "typeVersion": 1
}

================ Node #1600 ================
{
  "id": "9cd87fd2-6a38-463a-a22e-e0c34910818f",
  "name": "Loop Over Items",
  "type": "n8n-nodes-base.splitInBatches",
  "position": [
    440,
    300
  ],
  "parameters": {
    "options": {}
  },
  "typeVersion": 3
}

================ Node #1601 ================
{
  "id": "611b24cd-558b-4025-a0a8-ea355ba61988",
  "name": "OpenAI Chat Model3",
  "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
  "position": [
    720,
    580
  ],
  "parameters": {
    "options": {}
  },
  "typeVersion": 1
}

================ Node #1602 ================
{
  "id": "f814682c-cf6f-49a8-8ea0-48fbc64a3ebe",
  "name": "HTTP Request1",
  "type": "@n8n/n8n-nodes-langchain.toolHttpRequest",
  "position": [
    900,
    580
  ],
  "parameters": {
    "url": "={{ $json.url }}",
    "toolDescription": "grab the article for the ai agent to use"
  },
  "typeVersion": 1.1
}

================ Node #1603 ================
{
  "id": "2a4bcf69-23f0-440d-a3b0-c8261e153c62",
  "name": "Structured Output Parser",
  "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
  "position": [
    1080,
    580
  ],
  "parameters": {
    "schemaType": "manual",
    "inputSchema": "{\n\t\"type\": \"object\",\n\t\"properties\": {\n\t\t\"summary\": {\n\t\t\t\"type\": \"string\"\n\t\t},\n\t\t\"related\": {\n\t\t\t\"type\": \"string\"\n\t\t},\n \"image urls\": {\n\t\t\t\"type\": \"string\"\n }\n\t}\n}"
  },
  "typeVersion": 1.2
}

================ Node #1604 ================
{
  "id": "83c3b8f0-8d67-48a2-a5ce-b777ea1d7b32",
  "name": "Upload to Minio",
  "type": "n8n-nodes-base.s3",
  "position": [
    4240,
    1080
  ],
  "parameters": {
    "operation": "upload",
    "bucketName": "=",
    "additionalFields": {
      "grantRead": true,
      "parentFolderKey": "="
    }
  },
  "typeVersion": 1
}

================ Node #1605 ================
{
  "id": "05b972ff-ccab-415b-8787-aafabb3b7292",
  "name": "News1",
  "type": "n8n-nodes-base.set",
  "position": [
    2180,
    320
  ],
  "parameters": {
    "options": {},
    "assignments": {
      "assignments": [
        {
          "id": "ec8013d5-84b5-43c8-abcb-6986ef15939d",
          "name": "property_name",
          "type": "string",
          "value": "={{ $json.message.content['Article Title'] }}"
        },
        {
          "id": "4d91c4fc-12a2-4fe2-a58e-02284314e1de",
          "name": "property_text",
          "type": "string",
          "value": "={{ $json.message.content['Article Blurb'] }}"
        },
        {
          "id": "cad2b795-8b71-415f-a100-700d9ec62bbd",
          "name": "property_image_url",
          "type": "string",
          "value": "={{ $('If Topic').item.json.output['image urls'] }}"
        }
      ]
    }
  },
  "typeVersion": 3.4
}

================ Node #1606 ================
{
  "id": "d175d366-e672-4452-b78e-a06336ef242b",
  "name": "Leo - Improve Prompt",
  "type": "n8n-nodes-base.httpRequest",
  "position": [
    2720,
    100
  ],
  "parameters": {
    "url": "https://cloud.leonardo.ai/api/rest/v1/prompt/improve",
    "method": "POST",
    "options": {
      "response": {
        "response": {
          "fullResponse": true
        }
      }
    },
    "jsonBody": "={\n \"prompt\": \"{{ $('Article Prep').item.json.message.content['Image Prompt 1'] }}\"\n}",
    "sendBody": true,
    "sendHeaders": true,
    "specifyBody": "json",
    "authentication": "genericCredentialType",
    "genericAuthType": "httpCustomAuth",
    "headerParameters": {
      "parameters": [
        {
          "name": "accept",
          "value": "application/json"
        }
      ]
    }
  },
  "typeVersion": 4.2
}

================ Node #1607 ================
{
  "id": "d8da7879-1a67-4da1-86db-f70e50b4e9da",
  "name": "Leo - Get imageId",
  "type": "n8n-nodes-base.httpRequest",
  "position": [
    3320,
    100
  ],
  "parameters": {
    "url": "=https://cloud.leonardo.ai/api/rest/v1/generations/{{ $json.body.sdGenerationJob.generationId }}",
    "options": {
      "response": {
        "response": {
          "fullResponse": true
        }
      }
    },
    "sendHeaders": true,
    "authentication": "genericCredentialType",
    "genericAuthType": "httpCustomAuth",
    "headerParameters": {
      "parameters": [
        {
          "name": "content-type",
          "value": "application/json"
        }
      ]
    }
  },
  "typeVersion": 4.2
}

================ Node #1608 ================
{
  "id": "faf80246-3b1a-49c6-a277-0152428e46e1",
  "name": "Runway - Create Video",
  "type": "n8n-nodes-base.httpRequest",
  "position": [
    2520,
    300
  ],
  "parameters": {
    "url": "https://api.dev.runwayml.com/v1/image_to_video",
    "method": "POST",
    "options": {},
    "sendBody": true,
    "sendHeaders": true,
    "authentication": "genericCredentialType",
    "bodyParameters": {
      "parameters": [
        {
          "name": "promptImage",
          "value": "={{ $json.body.generations_by_pk.generated_images[0].url }}"
        },
        {
          "name": "promptText",
          "value": "string"
        },
        {
          "name": "model",
          "value": "gen3a_turbo"
        }
      ]
    },
    "genericAuthType": "httpCustomAuth",
    "headerParameters": {
      "parameters": [
        {
          "name": "X-Runway-Version",
          "value": "2024-11-06"
        }
      ]
    }
  },
  "typeVersion": 4.2
}

================ Node #1609 ================
{
  "id": "e91c1f01-7870-4063-9557-24a6ba1d3db3",
  "name": "Runway - Get Video",
  "type": "n8n-nodes-base.httpRequest",
  "position": [
    2920,
    300
  ],
  "parameters": {
    "url": "=https://api.dev.runwayml.com/v1/tasks/{{ $json.id }}",
    "options": {},
    "sendHeaders": true,
    "authentication": "genericCredentialType",
    "genericAuthType": "httpCustomAuth",
    "headerParameters": {
      "parameters": [
        {
          "name": "X-Runway-Version",
          "value": "2024-11-06"
        }
      ]
    }
  },
  "typeVersion": 4.2
}

================ Node #1610 ================
{
  "id": "41ee2665-e1aa-4d48-ade6-e37af568f211",
  "name": "Wait2",
  "type": "n8n-nodes-base.wait",
  "position": [
    2720,
    300
  ],
  "webhookId": "ddca5833-a40b-404a-9140-686cd4fa26cb",
  "parameters": {
    "unit": "minutes",
    "amount": 3
  },
  "typeVersion": 1.1
}

================ Node #1611 ================
{
  "id": "091e9e07-89ba-4fe3-9fc5-278fc333dbff",
  "name": "Sticky Note",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    -160,
    -40
  ],
  "parameters": {
    "color": 5,
    "width": 341,
    "height": 951,
    "content": "# Choose your data source \n## This can be swapped for any other data source of your choosing."
  },
  "typeVersion": 1
}

================ Node #1612 ================
{
  "id": "9660a593-9966-4ebe-bfd7-f884dc185d56",
  "name": "If Topic",
  "type": "n8n-nodes-base.if",
  "position": [
    1100,
    320
  ],
  "parameters": {
    "options": {},
    "conditions": {
      "options": {
        "version": 2,
        "leftValue": "",
        "caseSensitive": true,
        "typeValidation": "strict"
      },
      "combinator": "and",
      "conditions": [
        {
          "id": "56219de5-244d-4b7f-a511-f3061572cf93",
          "operator": {
            "name": "filter.operator.equals",
            "type": "string",
            "operation": "equals"
          },
          "leftValue": "={{ $json.output.related }}",
          "rightValue": "yes"
        }
      ]
    }
  },
  "typeVersion": 2.2
}

================ Node #1613 ================
{
  "id": "e47140ac-20cc-417b-a6cd-30f780dc8289",
  "name": "Get Image",
  "type": "n8n-nodes-base.httpRequest",
  "position": [
    1500,
    320
  ],
  "parameters": {
    "url": "={{ $('Article Analysis').first().json.output['image urls'] }}",
    "options": {
      "response": {
        "response": {
          "fullResponse": true
        }
      }
    }
  },
  "typeVersion": 4.2
}

================ Node #1614 ================
{
  "id": "26f80f71-2c3a-46fe-a960-21cdbc18ce34",
  "name": "Prompt Settings1",
  "type": "n8n-nodes-base.set",
  "position": [
    2520,
    100
  ],
  "parameters": {
    "options": {},
    "assignments": {
      "assignments": [
        {
          "id": "56c8f20d-d9d9-4be7-ac2a-38df6ffdd722",
          "name": "model",
          "type": "string",
          "value": "6b645e3a-d64f-4341-a6d8-7a3690fbf042"
        }
      ]
    },
    "includeOtherFields": true
  },
  "typeVersion": 3.4
}

================ Node #1615 ================
{
  "id": "ce697f6f-f8fc-4ba7-b776-17bbc2e870b7",
  "name": "Leo - Generate Image",
  "type": "n8n-nodes-base.httpRequest",
  "position": [
    2920,
    100
  ],
  "parameters": {
    "url": "https://cloud.leonardo.ai/api/rest/v1/generations",
    "method": "POST",
    "options": {
      "response": {
        "response": {
          "fullResponse": true
        }
      }
    },
    "jsonBody": "={\n \"alchemy\": true,\n \"width\": 1024,\n \"height\": 768,\n \"modelId\": \"6b645e3a-d64f-4341-a6d8-7a3690fbf042\",\n \"num_images\": 1,\n \"presetStyle\": \"MONOCHROME\",\n \"prompt\": \"{{ $json.body.promptGeneration.prompt }}; Use the rule of thirds, leading lines, & balance. DO NOT INCLUDE ANY WORDS OR LABELS.\",\n \"guidance_scale\": 7,\n \"highResolution\": true,\n \"promptMagic\": false,\n \"promptMagicStrength\": 0.5,\n \"promptMagicVersion\": \"v3\",\n \"public\": false,\n \"ultra\": false,\n \"photoReal\": false,\n \"negative_prompt\": \"\"\n} ",
    "sendBody": true,
    "sendHeaders": true,
    "specifyBody": "json",
    "authentication": "genericCredentialType",
    "genericAuthType": "httpCustomAuth",
    "headerParameters": {
      "parameters": [
        {
          "name": "accept",
          "value": "application/json"
        }
      ]
    }
  },
  "typeVersion": 4.2
}

================ Node #1616 ================
{
  "id": "e2067fe5-3fae-4f97-97c0-879967efd9b8",
  "name": "Wait1",
  "type": "n8n-nodes-base.wait",
  "position": [
    3120,
    100
  ],
  "webhookId": "256c3814-6a52-4eb1-969a-30f9f3b8e04e",
  "parameters": {
    "amount": 30
  },
  "typeVersion": 1.1
}

================ Node #1617 ================
{
  "id": "f0ba57a5-1d27-4c75-a422-4bc0e2cead9d",
  "name": "Limit",
  "type": "n8n-nodes-base.limit",
  "position": [
    240,
    300
  ],
  "parameters": {
    "keep": "lastItems",
    "maxItems": 50
  },
  "typeVersion": 1
}

================ Node #1618 ================
{
  "id": "e01152aa-961b-4e33-a1e3-186d47d81c55",
  "name": "Image Analysis",
  "type": "@n8n/n8n-nodes-langchain.openAi",
  "position": [
    1300,
    320
  ],
  "parameters": {
    "modelId": {
      "__rl": true,
      "mode": "list",
      "value": "gpt-4o-mini",
      "cachedResultName": "GPT-4O-MINI"
    },
    "options": {
      "detail": "auto"
    },
    "resource": "image",
    "imageUrls": "={{ $json.output['image urls'] }}",
    "operation": "analyze"
  },
  "credentials": {
    "openAiApi": {
      "id": "ysxujEYFiY5ozRTS",
      "name": "AlexK OpenAi Key"
    }
  },
  "typeVersion": 1.6
}

================ Node #1619 ================
{
  "id": "ab346129-c3d5-4f51-af5e-5d63cd154981",
  "name": "Wait3",
  "type": "n8n-nodes-base.wait",
  "disabled": true,
  "position": [
    3080,
    1020
  ],
  "webhookId": "6e4a0b8d-6c31-4a98-8ec3-2509aa2087e8",
  "parameters": {
    "unit": "minutes"
  },
  "typeVersion": 1.1
}

================ Node #1620 ================
{
  "id": "872c35a3-bdd5-4eec-9bac-0959f3ff78e7",
  "name": "Article Analysis",
  "type": "@n8n/n8n-nodes-langchain.agent",
  "onError": "continueErrorOutput",
  "position": [
    740,
    300
  ],
  "parameters": {
    "text": "=Can you tell me if the article at {{ $json.url }} is related to automation or ai? \n\nthen, create a 250 word summary of the article\n\nAlso, list any image url's related to the article content from the url. Limit to 1 image url.",
    "options": {
      "systemMessage": "You are a helpful assistant in summarizing and identifying articles related to automation and ai. \nOutput the results as:\nsummary: \nrelated: yes or no\nimage urls: "
    },
    "promptType": "define",
    "hasOutputParser": true
  },
  "typeVersion": 1.7
}

================ Node #1621 ================
{
  "id": "31c3a90e-10ee-4217-9b08-ff57bf17ea10",
  "name": "Dropbox",
  "type": "n8n-nodes-base.dropbox",
  "position": [
    3640,
    1080
  ],
  "parameters": {},
  "typeVersion": 1
}

================ Node #1622 ================
{
  "id": "22ccd0a0-f7f6-40ca-bd09-40ed4a7fcde1",
  "name": "Google Drive",
  "type": "n8n-nodes-base.googleDrive",
  "position": [
    3840,
    1080
  ],
  "parameters": {
    "fileId": {
      "__rl": true,
      "mode": "list",
      "value": ""
    },
    "options": {},
    "operation": "update"
  },
  "credentials": {
    "googleDriveOAuth2Api": {
      "id": "m8K1mbAUn7yuiEwl",
      "name": "AlexK1919 Google Drive account"
    }
  },
  "typeVersion": 3
}

================ Node #1623 ================
{
  "id": "ea75931d-c1ee-4139-9bdc-7901056ba016",
  "name": "Microsoft OneDrive",
  "type": "n8n-nodes-base.microsoftOneDrive",
  "position": [
    4040,
    1080
  ],
  "parameters": {},
  "typeVersion": 1
}

================ Node #1624 ================
{
  "id": "38888521-3087-4e0a-81d6-cf4b9a5dd3dd",
  "name": "YouTube",
  "type": "n8n-nodes-base.youTube",
  "position": [
    3640,
    1500
  ],
  "parameters": {
    "options": {},
    "resource": "video",
    "operation": "upload"
  },
  "typeVersion": 1
}

================ Node #1625 ================
{
  "id": "55f3decc-f952-4d2a-804d-2aec44fb2755",
  "name": "X",
  "type": "n8n-nodes-base.twitter",
  "position": [
    3840,
    1500
  ],
  "parameters": {
    "additionalFields": {}
  },
  "typeVersion": 2
}

================ Node #1626 ================
{
  "id": "54c8b762-444d-4790-97a9-a2f84518492f",
  "name": "Instagram",
  "type": "n8n-nodes-base.httpRequest",
  "position": [
    4240,
    1500
  ],
  "parameters": {
    "options": {}
  },
  "typeVersion": 4.2
}

================ Node #1627 ================
{
  "id": "90040f15-95c0-4ebb-818f-dde508eb0689",
  "name": "LinkedIn",
  "type": "n8n-nodes-base.linkedIn",
  "position": [
    4040,
    1500
  ],
  "parameters": {
    "additionalFields": {}
  },
  "typeVersion": 1
}

================ Node #1628 ================
{
  "id": "691eb779-5fae-4f65-89eb-b1b8e5488809",
  "name": "Leo - Improve Prompt2",
  "type": "n8n-nodes-base.httpRequest",
  "position": [
    2720,
    500
  ],
  "parameters": {
    "url": "https://cloud.leonardo.ai/api/rest/v1/prompt/improve",
    "method": "POST",
    "options": {
      "response": {
        "response": {
          "fullResponse": true
        }
      }
    },
    "jsonBody": "={\n \"prompt\": \"{{ $('Article Prep').item.json.message.content['Image Prompt 2'] }}\"\n}",
    "sendBody": true,
    "sendHeaders": true,
    "specifyBody": "json",
    "authentication": "genericCredentialType",
    "genericAuthType": "httpCustomAuth",
    "headerParameters": {
      "parameters": [
        {
          "name": "accept",
          "value": "application/json"
        }
      ]
    }
  },
  "credentials": {
    "httpCustomAuth": {
      "id": "hIzUsjbtHLmIe6uM",
      "name": "RunwayML Custom Auth"
    }
  },
  "typeVersion": 4.2
}

================ Node #1629 ================
{
  "id": "076a745a-055b-459c-8af9-fa7b6740dc6f",
  "name": "Wait4",
  "type": "n8n-nodes-base.wait",
  "position": [
    2720,
    700
  ],
  "webhookId": "89b31515-b403-4644-a2c1-970e5e774008",
  "parameters": {
    "unit": "minutes",
    "amount": 3
  },
  "typeVersion": 1.1
}

================ Node #1630 ================
{
  "id": "adc2c993-3f89-40df-96fc-eb3ff5eafb1c",
  "name": "Wait6",
  "type": "n8n-nodes-base.wait",
  "position": [
    3120,
    500
  ],
  "webhookId": "2efb873f-bcbd-41d9-99da-b2b57ef5ad93",
  "parameters": {
    "amount": 30
  },
  "typeVersion": 1.1
}

================ Node #1631 ================
{
  "id": "156f5735-bc20-46a9-871c-143b0772ca45",
  "name": "Leo - Generate Image2",
  "type": "n8n-nodes-base.httpRequest",
  "position": [
    2920,
    500
  ],
  "parameters": {
    "url": "https://cloud.leonardo.ai/api/rest/v1/generations",
    "method": "POST",
    "options": {
      "response": {
        "response": {
          "fullResponse": true
        }
      }
    },
    "jsonBody": "={\n \"alchemy\": true,\n \"width\": 1024,\n \"height\": 768,\n \"modelId\": \"6b645e3a-d64f-4341-a6d8-7a3690fbf042\",\n \"num_images\": 1,\n \"presetStyle\": \"MONOCHROME\",\n \"prompt\": \"{{ $json.body.promptGeneration.prompt }}; Use the rule of thirds, leading lines, & balance. DO NOT INCLUDE ANY WORDS OR LABELS.\",\n \"guidance_scale\": 7,\n \"highResolution\": true,\n \"promptMagic\": false,\n \"promptMagicStrength\": 0.5,\n \"promptMagicVersion\": \"v3\",\n \"public\": false,\n \"ultra\": false,\n \"photoReal\": false,\n \"negative_prompt\": \"\"\n} ",
    "sendBody": true,
    "sendHeaders": true,
    "specifyBody": "json",
    "authentication": "genericCredentialType",
    "genericAuthType": "httpCustomAuth",
    "headerParameters": {
      "parameters": [
        {
          "name": "accept",
          "value": "application/json"
        }
      ]
    }
  },
  "typeVersion": 4.2
}

================ Node #1632 ================
{
  "id": "4f270fa8-4da2-44f0-927f-3509fd9f8f7d",
  "name": "Leo - Get imageId2",
  "type": "n8n-nodes-base.httpRequest",
  "position": [
    3320,
    500
  ],
  "parameters": {
    "url": "=https://cloud.leonardo.ai/api/rest/v1/generations/{{ $json.body.sdGenerationJob.generationId }}",
    "options": {
      "response": {
        "response": {
          "fullResponse": true
        }
      }
    },
    "sendHeaders": true,
    "authentication": "genericCredentialType",
    "genericAuthType": "httpCustomAuth",
    "headerParameters": {
      "parameters": [
        {
          "name": "content-type",
          "value": "application/json"
        }
      ]
    }
  },
  "typeVersion": 4.2
}

================ Node #1633 ================
{
  "id": "49c0e7ba-bf9c-4819-b479-61aa099ab9ab",
  "name": "Runway - Create Video2",
  "type": "n8n-nodes-base.httpRequest",
  "position": [
    2520,
    700
  ],
  "parameters": {
    "url": "https://api.dev.runwayml.com/v1/image_to_video",
    "method": "POST",
    "options": {},
    "sendBody": true,
    "sendHeaders": true,
    "authentication": "genericCredentialType",
    "bodyParameters": {
      "parameters": [
        {
          "name": "promptImage",
          "value": "={{ $json.body.generations_by_pk.generated_images[0].url }}"
        },
        {
          "name": "promptText",
          "value": "string"
        },
        {
          "name": "model",
          "value": "gen3a_turbo"
        }
      ]
    },
    "genericAuthType": "httpCustomAuth",
    "headerParameters": {
      "parameters": [
        {
          "name": "X-Runway-Version",
          "value": "2024-11-06"
        }
      ]
    }
  },
  "credentials": {
    "httpCustomAuth": {
      "id": "hIzUsjbtHLmIe6uM",
      "name": "RunwayML Custom Auth"
    }
  },
  "typeVersion": 4.2
}

================ Node #1634 ================
{
  "id": "d03eb190-5fc0-4b7e-ad65-88ece3ab833d",
  "name": "Runway - Get Video2",
  "type": "n8n-nodes-base.httpRequest",
  "position": [
    2920,
    700
  ],
  "parameters": {
    "url": "=https://api.dev.runwayml.com/v1/tasks/{{ $json.id }}",
    "options": {},
    "sendHeaders": true,
    "authentication": "genericCredentialType",
    "genericAuthType": "httpCustomAuth",
    "headerParameters": {
      "parameters": [
        {
          "name": "X-Runway-Version",
          "value": "2024-11-06"
        }
      ]
    }
  },
  "typeVersion": 4.2
}

================ Node #1635 ================
{
  "id": "0072563d-b87d-47c5-80fd-ed3c051b3287",
  "name": "Sticky Note1",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    3580,
    940
  ],
  "parameters": {
    "color": 6,
    "width": 882,
    "height": 372,
    "content": "# Upload Assets\nYou can extend this workflow further by uploading the generated assets to your storage option of choice."
  },
  "typeVersion": 1
}

================ Node #1636 ================
{
  "id": "a0b2377e-57ea-47e9-83c9-3e58372610e5",
  "name": "Sticky Note2",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    3580,
    1360
  ],
  "parameters": {
    "color": 6,
    "width": 882,
    "height": 372,
    "content": "# Post to Social Media\nYou can extend this workflow further by posting the generated assets to social media."
  },
  "typeVersion": 1
}

================ Node #1637 ================
{
  "id": "708fe6a0-4899-462b-9a08-fadea7c7e195",
  "name": "Sticky Note3",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    2420,
    -40
  ],
  "parameters": {
    "color": 4,
    "width": 1114,
    "height": 943,
    "content": "# Generate Images and Videos"
  },
  "typeVersion": 1
}

================ Node #1638 ================
{
  "id": "5bbb6552-ec3a-42ea-a911-993f67a6c8dc",
  "name": "Sticky Note4",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    2420,
    940
  ],
  "parameters": {
    "color": 5,
    "width": 1114,
    "height": 372,
    "content": "# Stitch it all together"
  },
  "typeVersion": 1
}

================ Node #1639 ================
{
  "id": "25f4cc09-fbff-4c10-b706-30df5840b794",
  "name": "Cre - Generate Video1",
  "type": "n8n-nodes-base.httpRequest",
  "position": [
    2880,
    1020
  ],
  "parameters": {
    "url": "https://api.creatomate.com/v1/renders",
    "method": "POST",
    "options": {
      "response": {
        "response": {
          "fullResponse": true
        }
      }
    },
    "jsonBody": "={\n \"max_width\": 480,\n \"template_id\": \"enterTemplateID\",\n \"modifications\": {\n \"Scenes.elements\": [\n {\n \"name\": \"Intro Comp\",\n \"type\": \"composition\",\n \"track\": 1,\n \"elements\": [\n {\n \"name\": \"Image-1\",\n \"type\": \"image\",\n \"source\": \"{{ $('Leo - Get imageId').item.json.body.generations_by_pk.generated_images[0].url }}\"\n },\n {\n \"name\": \"Subtitles-1\",\n \"type\": \"text\",\n \"transcript_source\": \"Voiceover-1\",\n \"width\": \"86.66%\",\n \"height\": \"37.71%\",\n \"x_alignment\": \"50%\",\n \"y_alignment\": \"50%\",\n \"fill_color\": \"#ffffff\",\n \"stroke_color\": \"#333333\",\n \"stroke_width\": \"1.05 vmin\",\n \"font_family\": \"Inter\",\n \"font_weight\": \"700\",\n \"font_size\": \"8 vmin\",\n \"background_color\": \"rgba(255,255,255,0.2)\",\n \"background_x_padding\": \"26%\",\n \"background_y_padding\": \"7%\",\n \"background_border_radius\": \"28%\",\n \"transcript_effect\": \"highlight\",\n \"transcript_color\": \"#ff5900\"\n },\n {\n \"name\": \"Voiceover-1\",\n \"type\": \"audio\",\n \"source\": \"{{ $('News1').item.json.property_name }}\",\n \"provider\": \"openai model=tts-1 voice=onyx\"\n }\n ]\n },\n {\n \"name\": \"Auto Scene Comp\",\n \"type\": \"composition\",\n \"track\": 1,\n \"elements\": [\n {\n \"name\": \"Video-2\",\n \"type\": \"video\",\n \"source\": \"{{ $('Runway - Get Video').first().json.output[0] }}\",\n \"loop\": true\n },\n {\n \"name\": \"Subtitles-2\",\n \"type\": \"text\",\n \"transcript_source\": \"Voiceover-2\",\n \"y\": \"78.2173%\",\n \"width\": \"86.66%\",\n \"height\": \"37.71%\",\n \"x_alignment\": \"50%\",\n \"y_alignment\": \"50%\",\n \"fill_color\": \"#ffffff\",\n \"stroke_color\": \"#333333\",\n \"stroke_width\": \"1.05 vmin\",\n \"font_family\": \"Inter\",\n \"font_weight\": \"700\",\n \"font_size\": \"8 vmin\",\n \"background_color\": \"rgba(255,255,255,0.2)\",\n \"background_x_padding\": \"26%\",\n \"background_y_padding\": \"7%\",\n \"background_border_radius\": \"28%\",\n \"transcript_effect\": \"highlight\",\n \"transcript_color\": \"#ff5900\"\n },\n {\n \"name\": \"Voiceover-2\",\n \"type\": \"audio\",\n \"source\": \"{{ $('Article Prep').item.json.message.content['Summary Blurb 1'] }}\",\n \"provider\": \"openai model=tts-1 voice=onyx\"\n }\n ]\n },\n {\n \"name\": \"Auto Scene Comp\",\n \"type\": \"composition\",\n \"track\": 1,\n \"elements\": [\n {\n \"name\": \"Video-3\",\n \"type\": \"video\",\n \"source\": \"{{ $('Runway - Get Video2').first().json.output[0] }}\",\n \"loop\": true\n },\n {\n \"name\": \"Subtitles-3\",\n \"type\": \"text\",\n \"transcript_source\": \"Voiceover-3\",\n \"y\": \"78.2173%\",\n \"width\": \"86.66%\",\n \"height\": \"37.71%\",\n \"x_alignment\": \"50%\",\n \"y_alignment\": \"50%\",\n \"fill_color\": \"#ffffff\",\n \"stroke_color\": \"#333333\",\n \"stroke_width\": \"1.05 vmin\",\n \"font_family\": \"Inter\",\n \"font_weight\": \"700\",\n \"font_size\": \"8 vmin\",\n \"background_color\": \"rgba(255,89,0,0.5)\",\n \"background_x_padding\": \"26%\",\n \"background_y_padding\": \"7%\",\n \"background_border_radius\": \"28%\",\n \"transcript_effect\": \"highlight\",\n \"transcript_color\": \"#ff0040\"\n },\n {\n \"name\": \"Voiceover-3\",\n \"type\": \"audio\",\n \"source\": \"{{ $('Article Prep').item.json.message.content['Summary Blurb 2'] }}\",\n \"provider\": \"openai model=tts-1 voice=onyx\"\n }\n ]\n }\n ]\n }\n}",
    "sendBody": true,
    "specifyBody": "json",
    "authentication": "genericCredentialType",
    "genericAuthType": "httpCustomAuth"
  },
  "credentials": {
    "httpCustomAuth": {
      "id": "hIzUsjbtHLmIe6uM",
      "name": "RunwayML Custom Auth"
    }
  },
  "typeVersion": 4.2
}

================ Node #1640 ================
{
  "id": "7093de7b-a4e3-4363-8038-1002f7b20fbc",
  "name": "Cre - Get Video",
  "type": "n8n-nodes-base.httpRequest",
  "position": [
    3280,
    1020
  ],
  "parameters": {
    "url": "=https://api.creatomate.com/v1/renders/{{ $json.body.body[0].id }}",
    "options": {
      "response": {
        "response": {
          "fullResponse": true
        }
      }
    },
    "authentication": "genericCredentialType",
    "genericAuthType": "httpCustomAuth"
  },
  "credentials": {
    "httpCustomAuth": {
      "id": "hIzUsjbtHLmIe6uM",
      "name": "RunwayML Custom Auth"
    }
  },
  "typeVersion": 4.2
}

================ Node #1641 ================
{
  "id": "a57b719f-b299-431e-9c85-fa333e38b6a7",
  "name": "Sticky Note6",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    660,
    -40
  ],
  "parameters": {
    "color": 3,
    "width": 1033,
    "height": 951,
    "content": "# Article Analysis - Is it the right topic?"
  },
  "typeVersion": 1
}

================ Node #1642 ================
{
  "id": "60b879a0-8b7f-40f1-ae70-ac94e4675b38",
  "name": "Sticky Note7",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    1740,
    -40
  ],
  "parameters": {
    "color": 3,
    "width": 630,
    "height": 947,
    "content": "# Prepare the article for content generation"
  },
  "typeVersion": 1
}

================ Node #1643 ================
{
  "id": "afaf8437-ee52-434b-a267-8dbaff0e1922",
  "name": "Article Prep",
  "type": "@n8n/n8n-nodes-langchain.openAi",
  "position": [
    1820,
    320
  ],
  "parameters": {
    "modelId": {
      "__rl": true,
      "mode": "list",
      "value": "gpt-4o-mini",
      "cachedResultName": "GPT-4O-MINI"
    },
    "options": {},
    "messages": {
      "values": [
        {
          "content": "=prepare the following summary for a newsletter where the article will be 1 of several presented in the newsletter:\n\n{{ $('Article Analysis').first().json.output.summary }}\n\nMake sure the Article Blurb lenght is less than 15 words.\n\nThen, create 2 Summary Blurbs, making sure each is less than 15 words.\n\nAlso create 2 image prompts that is less than 15 words long for each Summary Blurb"
        },
        {
          "role": "system",
          "content": "Output in markdown format\nArticle Title\nArticle Blurb\nSummary Blurb 1\nSummary Blurb 2\nArticle Image\nImage Prompt 1\nImage Prompt 2"
        }
      ]
    },
    "jsonOutput": true
  },
  "credentials": {
    "openAiApi": {
      "id": "ysxujEYFiY5ozRTS",
      "name": "AlexK OpenAi Key"
    }
  },
  "typeVersion": 1.6
}

================ Node #1644 ================
{
  "id": "e7c95d56-86e1-4456-a6d3-9c8b9fc3a53c",
  "name": "Sticky Note5",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    -620,
    -40
  ],
  "parameters": {
    "color": 6,
    "width": 252,
    "height": 946,
    "content": "# AlexK1919 \n![Alex Kim](https://media.licdn.com/dms/image/v2/D5603AQFOYMkqCPl6Sw/profile-displayphoto-shrink_400_400/profile-displayphoto-shrink_400_400/0/1718309808352?e=1736985600&v=beta&t=pQKm7lQfUU1ytuC2Gq1PRxNY-XmROFWbo-BjzUPxWOs)\n\n#### I\u2019m Alex Kim, an AI-Native Workflow Automation Architect Building Solutions to Optimize your Personal and Professional Life.\n\n### Workflow Overview Video\nhttps://youtu.be/XaKybLDUlLk\n\n### About Me\nhttps://beacons.ai/alexk1919\n\n### Product Used \n[Leonardo.ai](https://leonardo.ai)\n[RunwayML](https://runwayml.com/)\n[Creatomate](https://creatomate.com/)\n"
  },
  "typeVersion": 1
}

================ Node #1645 ================
{
  "id": "32e2803e-bf7c-4da4-a4ae-c9b6fa5ae226",
  "name": "Sticky Note8",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    3280,
    1180
  ],
  "parameters": {
    "color": 7,
    "width": 180,
    "height": 100,
    "content": "Don't forget to connect this last node to the loop to process additional items"
  },
  "typeVersion": 1
}

================ Node #1646 ================
{
  "id": "65196267-0d57-4af4-9081-962701478146",
  "name": "OpenAI Chat Model",
  "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
  "position": [
    660,
    640
  ],
  "parameters": {
    "model": "gpt-4o",
    "options": {
      "temperature": 0.7,
      "frequencyPenalty": 0.2
    }
  },
  "credentials": {
    "openAiApi": {
      "id": "rveqdSfp7pCRON1T",
      "name": "Ted's Tech Talks OpenAi"
    }
  },
  "typeVersion": 1
}

================ Node #1647 ================
{
  "id": "fc446ef0-2f15-42e7-a993-7960d76d8876",
  "name": "Window Buffer Memory",
  "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
  "position": [
    800,
    640
  ],
  "parameters": {
    "sessionKey": "=chat_with_{{ $('Listen for incoming events').first().json.message.chat.id }}",
    "contextWindowLength": 10
  },
  "typeVersion": 1
}

================ Node #1648 ================
{
  "id": "51c3cddd-fc21-4fff-b615-ea7080c47947",
  "name": "Correct errors",
  "type": "n8n-nodes-base.telegram",
  "position": [
    1220,
    580
  ],
  "parameters": {
    "text": "={{ $('AI Agent').item.json.output.replace(/&/g, \"&amp;\").replace(/>/g, \"&gt;\").replace(/</g, \"&lt;\").replace(/\"/g, \"&quot;\") }}",
    "chatId": "={{ $('Listen for incoming events').first().json.message.from.id }}",
    "additionalFields": {
      "parse_mode": "HTML",
      "appendAttribution": false
    }
  },
  "credentials": {
    "telegramApi": {
      "id": "9dexJXnlVPA6wt8K",
      "name": "Chat & Sound"
    }
  },
  "typeVersion": 1.1
}

================ Node #1649 ================
{
  "id": "d931b7e1-bc17-431e-ae67-967b6ef79236",
  "name": "Listen for incoming events",
  "type": "n8n-nodes-base.telegramTrigger",
  "position": [
    -440,
    480
  ],
  "webhookId": "322dce18-f93e-4f86-b9b1-3305519b7834",
  "parameters": {
    "updates": [
      "*"
    ],
    "additionalFields": {}
  },
  "credentials": {
    "telegramApi": {
      "id": "9dexJXnlVPA6wt8K",
      "name": "Chat & Sound"
    }
  },
  "typeVersion": 1
}

================ Node #1650 ================
{
  "id": "b33335ff-5dea-4fff-8f63-fea2b11b8241",
  "name": "Download voice file",
  "type": "n8n-nodes-base.telegram",
  "position": [
    60,
    600
  ],
  "parameters": {
    "fileId": "={{$json.message.voice.file_id}}",
    "resource": "file"
  },
  "credentials": {
    "telegramApi": {
      "id": "9dexJXnlVPA6wt8K",
      "name": "Chat & Sound"
    }
  },
  "typeVersion": 1.2
}

================ Node #1651 ================
{
  "id": "2954ced6-ab98-42e6-bf64-237146a433e0",
  "name": "Combine content and set properties",
  "type": "n8n-nodes-base.set",
  "position": [
    440,
    460
  ],
  "parameters": {
    "options": {},
    "assignments": {
      "assignments": [
        {
          "id": "bccbce0a-7786-49c9-979a-7a285cb69f78",
          "name": "CombinedMessage",
          "type": "string",
          "value": "={{ $json.message && $json.message.text ? $json.message.text : ($json.text ? $json.text : '') }}"
        },
        {
          "id": "5b1fc9f5-1408-4099-88cc-a23725c9eddb",
          "name": "Message Type ",
          "type": "string",
          "value": "={{ $json?.message?.text && !$json?.text ? \"text query\" : (!$json?.message?.text && $json?.text ? \"voice message\" : \"unknown type message\") }}"
        },
        {
          "id": "1e9a17fa-ec5d-49dc-9ff6-1f28b57fb02e",
          "name": "Source Type",
          "type": "string",
          "value": "={{ $('Listen for incoming events').item.json.message.forward_origin ? \" forwarded\" : \"\" }}"
        }
      ]
    }
  },
  "typeVersion": 3.4
}

================ Node #1652 ================
{
  "id": "e18de374-941f-4c2e-ab6c-6c6f68f2ce12",
  "name": "Send final reply",
  "type": "n8n-nodes-base.telegram",
  "onError": "continueErrorOutput",
  "position": [
    1040,
    460
  ],
  "parameters": {
    "text": "={{ $json.output }} \n\nThank you for your{{ $('Combine content and set properties').item.json['Source Type'] }} {{ $('Combine content and set properties').item.json['Message Type '] }} \ud83e\udd17",
    "chatId": "={{ $('Listen for incoming events').first().json.message.from.id }}",
    "additionalFields": {
      "parse_mode": "HTML",
      "appendAttribution": false
    }
  },
  "credentials": {
    "telegramApi": {
      "id": "9dexJXnlVPA6wt8K",
      "name": "Chat & Sound"
    }
  },
  "typeVersion": 1.1
}

================ Node #1653 ================
{
  "id": "b47a9583-ce5c-464f-a9e6-153fb42e685f",
  "name": "Send error message",
  "type": "n8n-nodes-base.telegram",
  "position": [
    60,
    300
  ],
  "parameters": {
    "text": "=Sorry, {{ $('Listen for incoming events').first().json.message.from.first_name }}! This command is not supported yet. Please send text or voice messages.",
    "chatId": "={{ $('Listen for incoming events').first().json.message.from.id }}",
    "additionalFields": {
      "parse_mode": "Markdown",
      "appendAttribution": false
    }
  },
  "credentials": {
    "telegramApi": {
      "id": "9dexJXnlVPA6wt8K",
      "name": "Chat & Sound"
    }
  },
  "typeVersion": 1.2
}

================ Node #1654 ================
{
  "id": "0196b49e-90a1-4f2f-8b94-492fced37dbf",
  "name": "Convert audio to text",
  "type": "@n8n/n8n-nodes-langchain.openAi",
  "position": [
    240,
    600
  ],
  "parameters": {
    "options": {
      "language": "",
      "temperature": 0.7
    },
    "resource": "audio",
    "operation": "transcribe"
  },
  "credentials": {
    "openAiApi": {
      "id": "rveqdSfp7pCRON1T",
      "name": "Ted's Tech Talks OpenAi"
    }
  },
  "typeVersion": 1.5
}

================ Node #1655 ================
{
  "id": "66505b83-e0c3-4d9d-8e1a-9b54030e29e7",
  "name": "Sticky Note",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    -466.12784869794086,
    220
  ],
  "parameters": {
    "width": 1035.4478381373049,
    "height": 547.5630890194532,
    "content": "## Receive and pre-process messages \n"
  },
  "typeVersion": 1
}

================ Node #1656 ================
{
  "id": "44087d3f-86c8-407c-8791-645d167165cb",
  "name": "Sticky Note1",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    620,
    220
  ],
  "parameters": {
    "color": 2,
    "width": 861.262180151035,
    "height": 550.5748478134515,
    "content": "## 1. Send incoming message to the AI Agent\n## 2. Deliver agent reply to the user \n"
  },
  "typeVersion": 1
}

================ Node #1657 ================
{
  "id": "d7e58831-de97-483f-8b8a-583f85397245",
  "name": "Sticky Note2",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    20,
    553.0639243489702
  ],
  "parameters": {
    "color": 6,
    "width": 367.73614918993235,
    "height": 194.83713159725437,
    "content": "## Transcribe audio"
  },
  "typeVersion": 1
}

================ Node #1658 ================
{
  "id": "89515d80-6efc-40a8-95ce-343d4ff4dbee",
  "name": "Send Typing action",
  "type": "n8n-nodes-base.telegram",
  "position": [
    -180,
    300
  ],
  "parameters": {
    "chatId": "={{ $('Listen for incoming events').first().json.message.from.id }}",
    "operation": "sendChatAction"
  },
  "credentials": {
    "telegramApi": {
      "id": "9dexJXnlVPA6wt8K",
      "name": "Chat & Sound"
    }
  },
  "typeVersion": 1.2
}

================ Node #1659 ================
{
  "id": "c925d059-f843-473c-bfd4-3c563d80ca0f",
  "name": "AI Agent",
  "type": "@n8n/n8n-nodes-langchain.agent",
  "position": [
    680,
    460
  ],
  "parameters": {
    "text": "={{ $json.CombinedMessage }}",
    "options": {
      "humanMessage": "TOOLS\n------\nAssistant can ask the user to use tools to look up information that may be helpful in answering the users original question. The tools the human can use are:\n\n{tools}\n\n{format_instructions}\n\nUSER'S INPUT\n--------------------\nHere is the user's input (remember to respond with a markdown code snippet of a json blob with a single action, and NOTHING else):\n\n{{input}}",
      "systemMessage": "=You are a helpful AI assistant. You are chatting with the user named `{{ $('Determine content type').item.json.message.from.first_name }}`. You need to address the user by their name. Today is {{ DateTime.fromISO($now).toLocaleString(DateTime.DATETIME_FULL) }}\n\nIn your reply, always send a message in Telegram-supported HTML format. Here are the formatting instructions:\n1. The following tags are currently supported:\n<b>bold</b>, <strong>bold</strong>\n<i>italic</i>, <em>italic</em>\n<u>underline</u>, <ins>underline</ins>\n<s>strikethrough</s>, <strike>strikethrough</strike>, <del>strikethrough</del>\n<span class=\"tg-spoiler\">spoiler</span>, <tg-spoiler>spoiler</tg-spoiler>\n<b>bold <i>italic bold <s>italic bold strikethrough <span class=\"tg-spoiler\">italic bold strikethrough spoiler</span></s> <u>underline italic bold</u></i> bold</b>\n<a href=\"http://www.example.com/\">inline URL</a>\n<code>inline fixed-width code</code>\n<pre>pre-formatted fixed-width code block</pre>\n2. Any code that you send should be wrapped in these tags: <pre><code class=\"language-python\">pre-formatted fixed-width code block written in the Python programming language</code></pre>\nOther programming languages are supported as well.\n3. All <, > and & symbols that are not a part of a tag or an HTML entity must be replaced with the corresponding HTML entities (< with &lt;, > with &gt; and & with &amp;)\n4. If the user sends you a message starting with / sign, it means this is a Telegram bot command. For example, all users send /start command as their first message. Try to figure out what these commands mean and reply accodringly\n"
    }
  },
  "typeVersion": 1.1
}

================ Node #1660 ================
{
  "id": "2c56536d-1a86-4a49-b495-3e877adb308a",
  "name": "Determine content type",
  "type": "n8n-nodes-base.switch",
  "position": [
    -180,
    480
  ],
  "parameters": {
    "rules": {
      "values": [
        {
          "outputKey": "Text",
          "conditions": {
            "options": {
              "version": 2,
              "leftValue": "",
              "caseSensitive": true,
              "typeValidation": "strict"
            },
            "combinator": "and",
            "conditions": [
              {
                "operator": {
                  "type": "string",
                  "operation": "notEmpty",
                  "singleValue": true
                },
                "leftValue": "={{ $json.message.text }}",
                "rightValue": "/"
              }
            ]
          },
          "renameOutput": true
        },
        {
          "outputKey": "Voice",
          "conditions": {
            "options": {
              "version": 2,
              "leftValue": "",
              "caseSensitive": true,
              "typeValidation": "strict"
            },
            "combinator": "and",
            "conditions": [
              {
                "id": "dd41bbf0-bee0-450b-9160-b769821a4abc",
                "operator": {
                  "type": "object",
                  "operation": "exists",
                  "singleValue": true
                },
                "leftValue": "={{ $json.message.voice}}",
                "rightValue": ""
              }
            ]
          },
          "renameOutput": true
        }
      ]
    },
    "options": {
      "fallbackOutput": "extra"
    }
  },
  "typeVersion": 3.2
}

================ Node #1661 ================
{
  "id": "6d2579b8-376f-44c3-82e8-9dc608efd98b",
  "name": "Token Splitter",
  "type": "@n8n/n8n-nodes-langchain.textSplitterTokenSplitter",
  "position": [
    2200,
    800
  ],
  "parameters": {
    "chunkSize": 256,
    "chunkOverlap": 30
  },
  "typeVersion": 1
}

================ Node #1662 ================
{
  "id": "79b3c147-08ca-4db4-9116-958a868cbfd9",
  "name": "Notion - Page Added Trigger",
  "type": "n8n-nodes-base.notionTrigger",
  "position": [
    1080,
    360
  ],
  "parameters": {
    "simple": false,
    "pollTimes": {
      "item": [
        {
          "mode": "everyMinute"
        }
      ]
    },
    "databaseId": {
      "__rl": true,
      "mode": "list",
      "value": "17b11930-c10f-8000-a545-ece7cade03f9",
      "cachedResultUrl": "https://www.notion.so/17b11930c10f8000a545ece7cade03f9",
      "cachedResultName": "Embeddings"
    }
  },
  "credentials": {
    "notionApi": {
      "id": "oktwaKqpFztx5hYX",
      "name": "Auto: Notion"
    }
  },
  "typeVersion": 1
}

================ Node #1663 ================
{
  "id": "e4a6f524-e3f5-4d02-949a-8523f2d21965",
  "name": "Notion - Retrieve Page Content",
  "type": "n8n-nodes-base.notion",
  "position": [
    1300,
    360
  ],
  "parameters": {
    "blockId": {
      "__rl": true,
      "mode": "url",
      "value": "={{ $json.url }}"
    },
    "resource": "block",
    "operation": "getAll",
    "returnAll": true
  },
  "credentials": {
    "notionApi": {
      "id": "oktwaKqpFztx5hYX",
      "name": "Auto: Notion"
    }
  },
  "typeVersion": 2.2
}

================ Node #1664 ================
{
  "id": "bfebc173-8d4b-4f8f-a625-4622949dd545",
  "name": "Filter Non-Text Content",
  "type": "n8n-nodes-base.filter",
  "position": [
    1520,
    360
  ],
  "parameters": {
    "options": {},
    "conditions": {
      "options": {
        "version": 1,
        "leftValue": "",
        "caseSensitive": true,
        "typeValidation": "strict"
      },
      "combinator": "and",
      "conditions": [
        {
          "id": "e5b605e5-6d05-4bca-8f19-a859e474620f",
          "operator": {
            "type": "string",
            "operation": "notEquals"
          },
          "leftValue": "={{ $json.type }}",
          "rightValue": "image"
        },
        {
          "id": "c7415859-5ffd-4c78-b497-91a3d6303b6f",
          "operator": {
            "type": "string",
            "operation": "notEquals"
          },
          "leftValue": "={{ $json.type }}",
          "rightValue": "video"
        }
      ]
    }
  },
  "typeVersion": 2
}

================ Node #1665 ================
{
  "id": "b04939f9-355a-430b-a069-b11800066313",
  "name": "Summarize - Concatenate Notion's blocks content",
  "type": "n8n-nodes-base.summarize",
  "position": [
    1780,
    360
  ],
  "parameters": {
    "options": {
      "outputFormat": "separateItems"
    },
    "fieldsToSummarize": {
      "values": [
        {
          "field": "content",
          "separateBy": "\n",
          "aggregation": "concatenate"
        }
      ]
    }
  },
  "typeVersion": 1
}

================ Node #1666 ================
{
  "id": "0e64dbb5-20c1-4b90-b818-a1726aaf5112",
  "name": "Create metadata and load content",
  "type": "@n8n/n8n-nodes-langchain.documentDefaultDataLoader",
  "position": [
    2180,
    600
  ],
  "parameters": {
    "options": {
      "metadata": {
        "metadataValues": [
          {
            "name": "pageId",
            "value": "={{ $('Notion - Page Added Trigger').item.json.id }}"
          },
          {
            "name": "createdTime",
            "value": "={{ $('Notion - Page Added Trigger').item.json.created_time }}"
          },
          {
            "name": "pageTitle",
            "value": "={{ $('Notion - Page Added Trigger').item.json.properties.Name.title[0].text.content }}"
          }
        ]
      }
    },
    "jsonData": "={{ $json.concatenated_content }}",
    "jsonMode": "expressionData"
  },
  "typeVersion": 1
}

================ Node #1667 ================
{
  "id": "1f93c3e6-2d53-46b4-9ce9-1350e660ba82",
  "name": "Embeddings Google Gemini",
  "type": "@n8n/n8n-nodes-langchain.embeddingsGoogleGemini",
  "position": [
    1940,
    580
  ],
  "parameters": {
    "modelName": "models/text-embedding-004"
  },
  "credentials": {
    "googlePalmApi": {
      "id": "9idxGZRZ3BAKDoxq",
      "name": "Google Gemini(PaLM) Api account"
    }
  },
  "typeVersion": 1
}

================ Node #1668 ================
{
  "id": "b804b3fc-161c-40c1-ad9c-3022a09c4a0a",
  "name": "Pinecone Vector Store",
  "type": "@n8n/n8n-nodes-langchain.vectorStorePinecone",
  "position": [
    2060,
    360
  ],
  "parameters": {
    "mode": "insert",
    "options": {},
    "pineconeIndex": {
      "__rl": true,
      "mode": "list",
      "value": "notion-pages",
      "cachedResultName": "notion-pages"
    }
  },
  "credentials": {
    "pineconeApi": {
      "id": "R3QGXSEIRTEAZttK",
      "name": "Auto: PineconeApi"
    }
  },
  "typeVersion": 1
}

================ Node #1669 ================
{
  "id": "d73e5113-119f-4e62-9872-48e6a971d760",
  "name": "Stop Interview?",
  "type": "n8n-nodes-base.if",
  "position": [
    3380,
    920
  ],
  "parameters": {
    "options": {},
    "conditions": {
      "options": {
        "version": 2,
        "leftValue": "",
        "caseSensitive": true,
        "typeValidation": "strict"
      },
      "combinator": "and",
      "conditions": [
        {
          "id": "3cf788a6-94d0-4223-9caa-30b8e4df8e01",
          "operator": {
            "type": "boolean",
            "operation": "true",
            "singleValue": true
          },
          "leftValue": "={{ $json.output.stop_interview }}",
          "rightValue": ""
        }
      ]
    }
  },
  "typeVersion": 2.2
}

================ Node #1670 ================
{
  "id": "cda3c487-97fa-4037-b9a0-0802f4a02727",
  "name": "Generate Row",
  "type": "n8n-nodes-base.set",
  "position": [
    3740,
    1200
  ],
  "parameters": {
    "options": {},
    "assignments": {
      "assignments": [
        {
          "id": "06146a75-b67a-42cf-aa6f-241f23c47b9a",
          "name": "timestamp",
          "type": "string",
          "value": "={{ $now.toISO() }}"
        },
        {
          "id": "b0278c64-58a7-487d-b7ba-d102fb5d4a0c",
          "name": "type",
          "type": "string",
          "value": "next_question"
        },
        {
          "id": "ba034ca1-408e-422f-b071-dab0ef12fb48",
          "name": "question",
          "type": "string",
          "value": "={{ $('Parse Response').item.json.output.question }}"
        },
        {
          "id": "a2231f6e-f507-408e-b598-53888cf8d4b5",
          "name": "answer",
          "type": "string",
          "value": "={{ $('Get Answer').item.json.answer }}"
        }
      ]
    }
  },
  "typeVersion": 3.4
}

================ Node #1671 ================
{
  "id": "3486f9ae-6a19-4f1f-be46-15376053e71f",
  "name": "Generate Row1",
  "type": "n8n-nodes-base.set",
  "position": [
    3580,
    760
  ],
  "parameters": {
    "options": {},
    "assignments": {
      "assignments": [
        {
          "id": "06146a75-b67a-42cf-aa6f-241f23c47b9a",
          "name": "timestamp",
          "type": "string",
          "value": "={{ $now.toISO() }}"
        },
        {
          "id": "b0278c64-58a7-487d-b7ba-d102fb5d4a0c",
          "name": "type",
          "type": "string",
          "value": "stop_interview"
        },
        {
          "id": "ba034ca1-408e-422f-b071-dab0ef12fb48",
          "name": "question",
          "type": "string",
          "value": "=None"
        },
        {
          "id": "a2231f6e-f507-408e-b598-53888cf8d4b5",
          "name": "answer",
          "type": "string",
          "value": "=None"
        }
      ]
    }
  },
  "typeVersion": 3.4
}

================ Node #1672 ================
{
  "id": "a0e5d40d-e956-4ded-891f-ce5d0f55935f",
  "name": "Clear For Next Interview",
  "type": "@n8n/n8n-nodes-langchain.memoryManager",
  "position": [
    3900,
    760
  ],
  "parameters": {
    "mode": "delete",
    "deleteMode": "all"
  },
  "typeVersion": 1.1
}

================ Node #1673 ================
{
  "id": "66a33fcb-a902-4159-a025-2dff426c1fce",
  "name": "Sticky Note",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    2580,
    860
  ],
  "parameters": {
    "width": 180,
    "height": 260,
    "content": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n### \ud83d\udea8 Set Interview Topic Here!"
  },
  "typeVersion": 1
}

================ Node #1674 ================
{
  "id": "5cfb7114-a773-4c76-bb3b-7c004be5f799",
  "name": "Send Reply To Agent",
  "type": "n8n-nodes-base.set",
  "position": [
    4060,
    1200
  ],
  "parameters": {
    "options": {},
    "assignments": {
      "assignments": [
        {
          "id": "06a9c730-4756-4bc8-a394-6ff249cf7117",
          "name": "answer",
          "type": "string",
          "value": "={{ $('Get Answer').item.json.answer }}"
        }
      ]
    }
  },
  "typeVersion": 3.4
}

================ Node #1675 ================
{
  "id": "aa30c462-7dfa-40a7-8e63-bed29b30213c",
  "name": "Sticky Note1",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    1880,
    1060
  ],
  "parameters": {
    "color": 7,
    "width": 490,
    "height": 220,
    "content": "## 1. Setup Interview\n[Learn more about the form trigger node](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.formtrigger)\n\nThe form trigger node will be our entry point into this workflow and to start, we'll just ask for the user's name to start the interview.\nOur session storage will be using Redis via Upstash.com (you can use regular redis btw!) - whichever way, this ensures a highly scalable system able to handle many users."
  },
  "typeVersion": 1
}

================ Node #1676 ================
{
  "id": "5353a7c8-d0e4-429a-ab68-c54d9b845a43",
  "name": "Start Interview",
  "type": "n8n-nodes-base.formTrigger",
  "position": [
    1880,
    880
  ],
  "webhookId": "8d849295-ed30-41ab-a17c-464227cec8fb",
  "parameters": {
    "options": {
      "path": "driving-lessons-survey",
      "ignoreBots": true,
      "buttonLabel": "Begin Interview!",
      "appendAttribution": true,
      "useWorkflowTimezone": true
    },
    "formTitle": "=UK Practical Driving Test Satisfaction Interview",
    "formFields": {
      "values": [
        {
          "fieldLabel": "What is your name?",
          "placeholder": "ie. Sam Smith",
          "requiredField": true
        }
      ]
    },
    "responseMode": "lastNode",
    "formDescription": "=Thanks for taking part in our Interview. You will be presented with an unending series of questions to help us with your experiences in preparing for and taking the UK Practical Driving Test.\n\nThe interviewer is an AI agent and the questions are dynamically generated. When you're done with answer, simple say STOP to exit the interview. Sessions are deleted after 24 hours."
  },
  "typeVersion": 2.2
}

================ Node #1677 ================
{
  "id": "c88a829f-c4b4-4ad4-b121-32b15fae9980",
  "name": "Sticky Note2",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    2840,
    600
  ],
  "parameters": {
    "color": 7,
    "width": 614,
    "height": 280,
    "content": "## 2. AI Researcher for Endless Interview Questions\n[Learn more about the AI Agent node](https://docs.n8n.io/integrations/builtin/cluster-nodes/root-nodes/n8n-nodes-langchain.agent/)\n\nAn AI interviewer is an interesting take on a role traditionally understood as expensive and time-consuming - both in preparation and execution. What if this could be handed off to an AI/LLM, which could perform when it suits the interviewee and ask a never-ending list of open and follow-on questions for deeper insights?\n\nThis is what this AI researcher agent is designed to do! Upon activation, a loop is created where the agent generates the question and the user answers via the form node. This continues until the user asks to stop the interview."
  },
  "typeVersion": 1
}

================ Node #1678 ================
{
  "id": "10e5dbe0-0163-4c21-8811-9ce9a2a5063b",
  "name": "Sticky Note3",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    3580,
    1380
  ],
  "parameters": {
    "color": 7,
    "width": 580,
    "height": 202,
    "content": "## 3. Record Answers and Prep for Next Question\n[Learn more about the n8n Form node](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.form/)\n\nThe interview is no good if we can't record the answers somewhere for later analysis! Using n8n form node to capture the answer, we can simple push our new question and answer pair to our Redis session to build our transcript before continuing the loop with the agent."
  },
  "typeVersion": 1
}

================ Node #1679 ================
{
  "id": "0a0cc961-d364-40d2-9ece-cef7d17c4b45",
  "name": "Sticky Note4",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    3820,
    460
  ],
  "parameters": {
    "color": 7,
    "width": 528,
    "height": 253,
    "content": "## 4. Graciously End the Interview\n[Read more about the Chat Manager node](https://docs.n8n.io/integrations/builtin/cluster-nodes/sub-nodes/n8n-nodes-langchain.memorymanager/)\n\nOnce the AI/LLM detects the user wishes to end the interview (which is done by the user explicitly saying in the form), then the loop breaks and we conclude the interview session and displaying the confirmation screen.\n\nFor this demo, I've created a special confirmation screen which also displays the transcript. This is done by redirecting to a webhook URL. If you don't need this, feel free to change this to \"show completion screen\" instead.\n"
  },
  "typeVersion": 1
}

================ Node #1680 ================
{
  "id": "279d9a67-1d3b-4ffe-a152-33164ef9e2c8",
  "name": "Get Answer",
  "type": "n8n-nodes-base.form",
  "position": [
    3580,
    1200
  ],
  "webhookId": "d96bb88d-db84-4a68-8f02-bcff9cb8429e",
  "parameters": {
    "options": {
      "formTitle": "={{ $json.output.question }}",
      "buttonLabel": "Next Question",
      "formDescription": "Please answer the question or type \"stop interview\" to end the interview."
    },
    "formFields": {
      "values": [
        {
          "fieldType": "textarea",
          "fieldLabel": "answer",
          "requiredField": true
        }
      ]
    }
  },
  "typeVersion": 1
}

================ Node #1681 ================
{
  "id": "4e284505-afc3-4e3e-88c8-38021efbf3c1",
  "name": "Sticky Note5",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    1280,
    500
  ],
  "parameters": {
    "width": 522.6976744186048,
    "height": 787.6241860465118,
    "content": "## Try it out! \n\n### Conducting user interviews have been traditionally difficult due to preparation, timing and execution costs. What if we let an AI/LLM do it instead?\n\nThis template enables automated AI/LLM powered user interviews using n8n forms and an AI agent where the question and answers are recorded in a google sheet for later analysis. A powerful tool for any researcher.\n\n### Check out the full showcase post here: https://community.n8n.io/t/build-your-own-ai-interview-agents-with-n8n-forms/62312\n\n### How it works\n* A form trigger is used to start the interview and a new session is created in redis to capture the transcript.\n* An AI agent is then tasked to ask questions to the user regarding the topic of the interview. This is setup as a loop so the questions never stop unless the user wishes to end the interview.\n* Each answer is recorded in our session set up earlier between questions.\n* Finally, when the user requests to end the interview we break the loop and show the interview completion screen.\n\n### Why Redis?\nRedis is a fast key-value datastore which makes it ideal for sessions. This ensures the interview flow stays snappy between questions. For my live demo, I used Upstash.com which has a generous free tier.\n\n\n### Need Help?\nJoin the [Discord](https://discord.com/invite/XPKeKXeB7d) or ask in the [Forum](https://community.n8n.io/)!\n\nHappy Hacking!\n"
  },
  "typeVersion": 1
}

================ Node #1682 ================
{
  "id": "ff37e943-851f-4ea7-bcab-b33150881b72",
  "name": "Set Interview Topic",
  "type": "n8n-nodes-base.set",
  "position": [
    2620,
    880
  ],
  "parameters": {
    "options": {},
    "assignments": {
      "assignments": [
        {
          "id": "386f91e1-cc3e-4912-84e3-5ecdbf5412c8",
          "name": "answer",
          "type": "string",
          "value": "=Hello, my name is {{ $('Start Interview').first().json['What is your name?'] }}"
        },
        {
          "id": "492d5ecc-4e76-4297-b8a7-9ca4f801c855",
          "name": "interview_topic",
          "type": "string",
          "value": "Your experience preparing for and taking the UK practical driving test"
        }
      ]
    }
  },
  "typeVersion": 3.4
}

================ Node #1683 ================
{
  "id": "446937bc-a599-4184-b52e-be0607d62d94",
  "name": "UUID",
  "type": "n8n-nodes-base.crypto",
  "position": [
    2020,
    880
  ],
  "parameters": {
    "action": "generate"
  },
  "typeVersion": 1
}

================ Node #1684 ================
{
  "id": "da94c22a-4b26-4898-bde8-b57b5bf01f15",
  "name": "Generate Row2",
  "type": "n8n-nodes-base.set",
  "position": [
    2300,
    880
  ],
  "parameters": {
    "options": {},
    "assignments": {
      "assignments": [
        {
          "id": "06146a75-b67a-42cf-aa6f-241f23c47b9a",
          "name": "timestamp",
          "type": "string",
          "value": "={{ $now.toISO() }}"
        },
        {
          "id": "b0278c64-58a7-487d-b7ba-d102fb5d4a0c",
          "name": "type",
          "type": "string",
          "value": "start_interview"
        },
        {
          "id": "ba034ca1-408e-422f-b071-dab0ef12fb48",
          "name": "question",
          "type": "string",
          "value": "=What is your name?"
        },
        {
          "id": "a2231f6e-f507-408e-b598-53888cf8d4b5",
          "name": "answer",
          "type": "string",
          "value": "={{ $('Start Interview').first().json['What is your name?'] }}"
        }
      ]
    }
  },
  "typeVersion": 3.4
}

================ Node #1685 ================
{
  "id": "9aba23d7-04af-4478-b39b-417f0917597d",
  "name": "Create Session",
  "type": "n8n-nodes-base.redis",
  "position": [
    2160,
    880
  ],
  "parameters": {
    "key": "=session_{{ $('UUID').item.json.data }}",
    "ttl": "={{ 60 * 60 * 24 }}",
    "value": "={{ [] }}",
    "expire": true,
    "keyType": "list",
    "operation": "set"
  },
  "credentials": {
    "redis": {
      "id": "AbPH1yYQ924bVUqm",
      "name": "Upstash (ai interviewer)"
    }
  },
  "typeVersion": 1
}

================ Node #1686 ================
{
  "id": "217c9866-a162-41c6-b123-189869a6cb58",
  "name": "Update Session",
  "type": "n8n-nodes-base.redis",
  "position": [
    2440,
    880
  ],
  "parameters": {
    "list": "=session_{{ $('UUID').first().json.data }}",
    "tail": true,
    "operation": "push",
    "messageData": "={{ $json.toJsonString() }}"
  },
  "credentials": {
    "redis": {
      "id": "AbPH1yYQ924bVUqm",
      "name": "Upstash (ai interviewer)"
    }
  },
  "typeVersion": 1
}

================ Node #1687 ================
{
  "id": "95e8b7c4-4f27-49f3-b509-5238c0f7bd5d",
  "name": "Update Session1",
  "type": "n8n-nodes-base.redis",
  "position": [
    3900,
    1200
  ],
  "parameters": {
    "list": "=session_{{ $('UUID').first().json.data }}",
    "tail": true,
    "operation": "push",
    "messageData": "={{ $json.toJsonString() }}"
  },
  "credentials": {
    "redis": {
      "id": "AbPH1yYQ924bVUqm",
      "name": "Upstash (ai interviewer)"
    }
  },
  "typeVersion": 1
}

================ Node #1688 ================
{
  "id": "afaa55dd-844e-4bf3-8a31-3a0953caaf69",
  "name": "Update Session2",
  "type": "n8n-nodes-base.redis",
  "position": [
    3740,
    760
  ],
  "parameters": {
    "list": "=session_{{ $('UUID').first().json.data }}",
    "tail": true,
    "operation": "push",
    "messageData": "={{ $json.toJsonString() }}"
  },
  "credentials": {
    "redis": {
      "id": "AbPH1yYQ924bVUqm",
      "name": "Upstash (ai interviewer)"
    }
  },
  "typeVersion": 1
}

================ Node #1689 ================
{
  "id": "c381d598-1902-4789-ac15-65ac2124fbdd",
  "name": "Valid Session?",
  "type": "n8n-nodes-base.if",
  "position": [
    5080,
    1240
  ],
  "parameters": {
    "options": {},
    "conditions": {
      "options": {
        "version": 2,
        "leftValue": "",
        "caseSensitive": true,
        "typeValidation": "strict"
      },
      "combinator": "and",
      "conditions": [
        {
          "id": "500d6ca9-2a04-40f0-98e8-aa4290e6a30d",
          "operator": {
            "type": "array",
            "operation": "exists",
            "singleValue": true
          },
          "leftValue": "={{ $json.data }}",
          "rightValue": ""
        }
      ]
    }
  },
  "typeVersion": 2.2
}

================ Node #1690 ================
{
  "id": "f26ccdaa-4f94-4acb-894b-341648aee8b0",
  "name": "Respond to Webhook",
  "type": "n8n-nodes-base.respondToWebhook",
  "position": [
    5440,
    1240
  ],
  "parameters": {
    "options": {
      "responseCode": 200,
      "responseHeaders": {
        "entries": [
          {
            "name": "Content-Type",
            "value": "text/html"
          }
        ]
      }
    },
    "respondWith": "text",
    "responseBody": "={{ $json.html }}"
  },
  "typeVersion": 1.1
}

================ Node #1691 ================
{
  "id": "09a05dc6-4a21-4df0-a83d-5e1b986090f8",
  "name": "Window Buffer Memory2",
  "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
  "position": [
    3000,
    1120
  ],
  "parameters": {
    "sessionKey": "={{ $('UUID').first().json.data }}",
    "sessionIdType": "customKey"
  },
  "typeVersion": 1.2
}

================ Node #1692 ================
{
  "id": "26f87c7d-9e2c-41e8-b7eb-3c249a69f905",
  "name": "Window Buffer Memory",
  "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
  "position": [
    3900,
    920
  ],
  "parameters": {
    "sessionKey": "={{ $('UUID').first().json.data }}",
    "sessionIdType": "customKey"
  },
  "typeVersion": 1.2
}

================ Node #1693 ================
{
  "id": "ab891c71-af03-49c9-b281-d0058374260b",
  "name": "Sticky Note6",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    4180,
    740
  ],
  "parameters": {
    "width": 276.4353488372094,
    "height": 320.31553488372094,
    "content": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n### \ud83d\udea8 Set Your Webhook URL here!\nFor this demo, we want to show a customised completion screen with transcript so it's necessary to redirect to a webhook (see step 6)."
  },
  "typeVersion": 1
}

================ Node #1694 ================
{
  "id": "7a063851-1bea-4e34-897c-4038d08b845e",
  "name": "Redirect to Completion Screen",
  "type": "n8n-nodes-base.form",
  "position": [
    4260,
    760
  ],
  "webhookId": "9fdedf1b-e413-4fc3-94a4-9cc24bffff8a",
  "parameters": {
    "operation": "completion",
    "redirectUrl": "=https://<host>/webhook/<uuid-if-using-n8n-cloud>/ai-interview-transcripts/{{ $('UUID').first().json.data }}",
    "respondWith": "redirect"
  },
  "typeVersion": 1
}

================ Node #1695 ================
{
  "id": "b67b3fa5-faf6-402b-9b9e-c783869770ca",
  "name": "Sticky Note7",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    4640,
    1220
  ],
  "parameters": {
    "color": 5,
    "width": 236.3564651162793,
    "height": 345.82027906976737,
    "content": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n### \ud83d\udea8 This is the webhook we want to redirect to!\nIf you're on n8n cloud, you may want to copy the webhook url generated here and use it as the form ending's redirect url."
  },
  "typeVersion": 1
}

================ Node #1696 ================
{
  "id": "583d1572-2d6f-4ca4-9e31-33dc1481e87a",
  "name": "Sticky Note8",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    4580,
    980
  ],
  "parameters": {
    "color": 7,
    "width": 588,
    "height": 207,
    "content": "## 6. Display the Transcript\n[Read more about the Webhook Trigger](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.webhook)\n\nThis step is totally optional. For a nicer user experience, I use this webhook mini-flow to display the user's transcript for the completion screen. It works by capturing the session_id in the webhook's url and searching for it in our redis database. If a match is found the transcript is fetched and rendered into a webpage using the HTML node and returned to the user. If no match is found, a 404 message is displayed instead."
  },
  "typeVersion": 1
}

================ Node #1697 ================
{
  "id": "5fcf86b9-3fa3-48f5-a4a4-a1e261a48b49",
  "name": "Webhook",
  "type": "n8n-nodes-base.webhook",
  "position": [
    4700,
    1240
  ],
  "webhookId": "78df12c4-ccd0-46dd-be0d-4445c2bd04f2",
  "parameters": {
    "path": "ai-interview-transcripts/:session_id",
    "options": {
      "ignoreBots": true
    },
    "responseMode": "responseNode"
  },
  "typeVersion": 2
}

================ Node #1698 ================
{
  "id": "6df57307-feef-4be5-861d-fdc0b92d1ef6",
  "name": "404 Not Found",
  "type": "n8n-nodes-base.html",
  "position": [
    5260,
    1320
  ],
  "parameters": {
    "html": "\n<html lang='en'>\n\n\t<head>\n\t\t<meta charset='UTF-8' />\n\t\t<meta name='viewport' content='width=device-width, initial-scale=1.0' />\n\t\t<link rel='icon' type='image/png' href='https://n8n.io/favicon.ico' />\n\t\t<link\n\t\t\thref='https://fonts.googleapis.com/css?family=Open+Sans'\n\t\t\trel='stylesheet'\n\t\t\ttype='text/css'\n\t\t/>\n\n\t\t<title>Driving Practice Test 2024 Survey</title>\n\n\t\t<style>\n\t\t\t*, ::after, ::before { box-sizing: border-box; margin: 0; padding: 0; } body { font-family:\n\t\t\tOpen Sans, sans-serif; font-weight: 400; font-size: 12px; display: flex; flex-direction:\n\t\t\tcolumn; justify-content: start; background-color: #FBFCFE; } .container { margin: auto;\n\t\t\ttext-align: center; padding-top: 24px; width: 448px; } .card { padding: 24px;\n\t\t\tbackground-color: white; border: 1px solid #DBDFE7; border-radius: 8px; box-shadow: 0px 4px\n\t\t\t16px 0px #634DFF0F; margin-bottom: 16px; } .n8n-link a { color: #7E8186; font-weight: 600;\n\t\t\tfont-size: 12px; text-decoration: none; } .n8n-link svg { display: inline-block;\n\t\t\tvertical-align: middle; } .header h1 { color: #525356; font-size: 20px; font-weight: 400;\n\t\t\tpadding-bottom: 8px; } .header p { color: #7E8186; font-size: 14px; font-weight: 400; }\n\t\t</style>\n\t</head>\n\n\t<body>\n\t\t<div class='container'>\n\t\t\t<section>\n\t\t\t\t<div class='card'>\n\t\t\t\t\t<div class='header'>\n\t\t\t\t\t\t<h1>404 Not Found</h1>\n\t\t\t\t\t\t<p>The requested session does not exist.</p>\n <p>Your session may have expired.</p>\n </div>\n\t\t\t\t</div>\n\t\t\t\t\t<div class='n8n-link'>\n\t\t\t\t\t\t<a href=\"https://n8n.partnerlinks.io/ee7izbliiw0n\" target='_blank'>\n\t\t\t\t\t\t\tForm automated with\n\t\t\t\t\t\t\t<svg\n\t\t\t\t\t\t\t\twidth='73'\n\t\t\t\t\t\t\t\theight='20'\n\t\t\t\t\t\t\t\tviewBox='0 0 73 20'\n\t\t\t\t\t\t\t\tfill='none'\n\t\t\t\t\t\t\t\txmlns='http://www.w3.org/2000/svg'\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<path\n\t\t\t\t\t\t\t\t\tfill-rule='evenodd'\n\t\t\t\t\t\t\t\t\tclip-rule='evenodd'\n\t\t\t\t\t\t\t\t\td='M40.2373 4C40.2373 6.20915 38.4464 8 36.2373 8C34.3735 8 32.8074 6.72525 32.3633 5H26.7787C25.801 5 24.9666 5.70685 24.8059 6.6712L24.6415 7.6576C24.4854 8.59415 24.0116 9.40925 23.3417 10C24.0116 10.5907 24.4854 11.4058 24.6415 12.3424L24.8059 13.3288C24.9666 14.2931 25.801 15 26.7787 15H28.3633C28.8074 13.2747 30.3735 12 32.2373 12C34.4464 12 36.2373 13.7908 36.2373 16C36.2373 18.2092 34.4464 20 32.2373 20C30.3735 20 28.8074 18.7253 28.3633 17H26.7787C24.8233 17 23.1546 15.5864 22.8331 13.6576L22.6687 12.6712C22.508 11.7069 21.6736 11 20.6959 11H19.0645C18.5652 12.64 17.0406 13.8334 15.2373 13.8334C13.434 13.8334 11.9094 12.64 11.4101 11H9.06449C8.56519 12.64 7.04059 13.8334 5.2373 13.8334C3.02817 13.8334 1.2373 12.0424 1.2373 9.83335C1.2373 7.6242 3.02817 5.83335 5.2373 5.83335C7.16069 5.83335 8.76699 7.19085 9.15039 9H11.3242C11.7076 7.19085 13.3139 5.83335 15.2373 5.83335C17.1607 5.83335 18.767 7.19085 19.1504 9H20.6959C21.6736 9 22.508 8.29315 22.6687 7.3288L22.8331 6.3424C23.1546 4.41365 24.8233 3 26.7787 3H32.3633C32.8074 1.27478 34.3735 0 36.2373 0C38.4464 0 40.2373 1.79086 40.2373 4ZM38.2373 4C38.2373 5.10455 37.3419 6 36.2373 6C35.1327 6 34.2373 5.10455 34.2373 4C34.2373 2.89543 35.1327 2 36.2373 2C37.3419 2 38.2373 2.89543 38.2373 4ZM5.2373 11.8334C6.34189 11.8334 7.23729 10.9379 7.23729 9.83335C7.23729 8.72875 6.34189 7.83335 5.2373 7.83335C4.13273 7.83335 3.2373 8.72875 3.2373 9.83335C3.2373 10.9379 4.13273 11.8334 5.2373 11.8334ZM15.2373 11.8334C16.3419 11.8334 17.2373 10.9379 17.2373 9.83335C17.2373 8.72875 16.3419 7.83335 15.2373 7.83335C14.1327 7.83335 13.2373 8.72875 13.2373 9.83335C13.2373 10.9379 14.1327 11.8334 15.2373 11.8334ZM32.2373 18C33.3419 18 34.2373 17.1045 34.2373 16C34.2373 14.8954 33.3419 14 32.2373 14C31.1327 14 30.2373 14.8954 30.2373 16C30.2373 17.1045 31.1327 18 32.2373 18Z'\n\t\t\t\t\t\t\t\t\tfill='#EA4B71'\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t<path\n\t\t\t\t\t\t\t\t\td='M44.2393 15.0007H46.3277V10.5791C46.3277 9.12704 47.2088 8.49074 48.204 8.49074C49.183 8.49074 49.9498 9.14334 49.9498 10.4812V15.0007H52.038V10.057C52.038 7.91969 50.798 6.67969 48.8567 6.67969C47.633 6.67969 46.9477 7.16914 46.4582 7.80544H46.3277L46.1482 6.84284H44.2393V15.0007Z'\n\t\t\t\t\t\t\t\t\tfill='#101330'\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t<path\n\t\t\t\t\t\t\t\t\td='M60.0318 9.50205V9.40415C60.7498 9.0452 61.4678 8.4252 61.4678 7.20155C61.4678 5.43945 60.0153 4.37891 58.0088 4.37891C55.9528 4.37891 54.4843 5.5047 54.4843 7.23415C54.4843 8.4089 55.1698 9.0452 55.9203 9.40415V9.50205C55.0883 9.79575 54.0928 10.6768 54.0928 12.1452C54.0928 13.9237 55.5613 15.1637 57.9923 15.1637C60.4233 15.1637 61.8428 13.9237 61.8428 12.1452C61.8428 10.6768 60.8638 9.81205 60.0318 9.50205ZM57.9923 5.87995C58.8083 5.87995 59.4118 6.40205 59.4118 7.2831C59.4118 8.16415 58.7918 8.6863 57.9923 8.6863C57.1928 8.6863 56.5238 8.16415 56.5238 7.2831C56.5238 6.38575 57.1603 5.87995 57.9923 5.87995ZM57.9923 13.5974C57.0458 13.5974 56.2793 12.9937 56.2793 11.9658C56.2793 11.0358 56.9153 10.3342 57.9758 10.3342C59.0203 10.3342 59.6568 11.0195 59.6568 11.9984C59.6568 12.9937 58.9223 13.5974 57.9923 13.5974Z'\n\t\t\t\t\t\t\t\t\tfill='#101330'\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t<path\n\t\t\t\t\t\t\t\t\td='M63.9639 15.0007H66.0524V10.5791C66.0524 9.12704 66.9334 8.49074 67.9289 8.49074C68.9079 8.49074 69.6744 9.14334 69.6744 10.4812V15.0007H71.7629V10.057C71.7629 7.91969 70.5229 6.67969 68.5814 6.67969C67.3579 6.67969 66.6724 7.16914 66.1829 7.80544H66.0524L65.8729 6.84284H63.9639V15.0007Z'\n\t\t\t\t\t\t\t\t\tfill='#101330'\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t</svg>\n\t\t\t\t\t\t</a>\n\t\t\t\t\t</div>\n\t\t\t</section>\n\t\t</div>\n\t</body>\n\n</html>"
  },
  "typeVersion": 1.2
}

================ Node #1699 ================
{
  "id": "0e968154-ead5-4194-834e-0d1175e7c1d9",
  "name": "AI Researcher",
  "type": "@n8n/n8n-nodes-langchain.agent",
  "position": [
    2900,
    920
  ],
  "parameters": {
    "text": "={{ $json.answer }}",
    "options": {
      "systemMessage": "=You are a user research expert interviewing a user on the topic of \"{{ $('Set Interview Topic').first().json.interview_topic }}\".\n\n* Your task is to ask open-ended questions relevant to the interview topic.\n* Ask only one question at a time. Analyse the previous question and ask new question each time. If there is an opportunity to dig deeper into a previous answer, do so but limit to 1 follow-on question.\n* Keep asking questions until the user requests to stop the interview. When the user requests to stop the interview and no question is required, \"question\" is an empty string.\n* Use a friendly and polite tone when asking questions.\n* If the user answers are inrelevant to the question, ask the question again or move on to another question.\n* If the user's answer is beyond the scope of the interview, ignore the answer and ask if the user would like to stop the interview.\n*You must format your response using the following json schema as we require pre processing before responding to the user.\n```\n{\n \"type\":\"object\",\n \"properties\": {\n \"stop_interview\": { \"type\": \"boolean\" },\n \"question\": { \"type\": [\"string\", \"null\"] }\n }\n}\n```\n* Output only the json object and do not prefix or suffix the message with extraneous text."
    },
    "promptType": "define",
    "hasOutputParser": true
  },
  "typeVersion": 1.7
}

================ Node #1700 ================
{
  "id": "969d4094-1046-4f53-bf8b-5ae7e50bd3ed",
  "name": "Parse Response",
  "type": "n8n-nodes-base.set",
  "position": [
    3220,
    920
  ],
  "parameters": {
    "options": {},
    "assignments": {
      "assignments": [
        {
          "id": "bf61134c-e24c-453e-97ef-5edd25726148",
          "name": "output",
          "type": "object",
          "value": "={{\n$json.output\n .replace('```json', '')\n .replace('```', '')\n .parseJson()\n}}"
        }
      ]
    }
  },
  "typeVersion": 3.4
}

================ Node #1701 ================
{
  "id": "323b73c4-8c77-48a9-a549-f3e863ba72c2",
  "name": "Groq Chat Model",
  "type": "@n8n/n8n-nodes-langchain.lmChatGroq",
  "position": [
    2860,
    1120
  ],
  "parameters": {
    "model": "llama-3.2-90b-text-preview",
    "options": {}
  },
  "credentials": {
    "groqApi": {
      "id": "YQVoV5K9FREww7t1",
      "name": "Groq account"
    }
  },
  "typeVersion": 1
}

================ Node #1702 ================
{
  "id": "bf4518c4-8e59-450e-be5a-92f31cf38528",
  "name": "Show Transcript",
  "type": "n8n-nodes-base.html",
  "position": [
    5260,
    1140
  ],
  "parameters": {
    "html": "\n<html lang='en'>\n\n\t<head>\n\t\t<meta charset='UTF-8' />\n\t\t<meta name='viewport' content='width=device-width, initial-scale=1.0' />\n\t\t<link rel='icon' type='image/png' href='https://n8n.io/favicon.ico' />\n\t\t<link\n\t\t\thref='https://fonts.googleapis.com/css?family=Open+Sans'\n\t\t\trel='stylesheet'\n\t\t\ttype='text/css'\n\t\t/>\n\n\t\t<title>AI Interviewer Transcripts</title>\n\n\t\t<style>\n\t\t\t*, ::after, ::before { box-sizing: border-box; margin: 0; padding: 0; } body { font-family:\n\t\t\tOpen Sans, sans-serif; font-weight: 400; font-size: 12px; display: flex; flex-direction:\n\t\t\tcolumn; justify-content: start; background-color: #FBFCFE; } .container { margin: auto;\n\t\t\ttext-align: center; padding-top: 24px; width: 448px; } .card { padding: 24px;\n\t\t\tbackground-color: white; border: 1px solid #DBDFE7; border-radius: 8px; box-shadow: 0px 4px\n\t\t\t16px 0px #634DFF0F; margin-bottom: 16px; } .n8n-link a { color: #7E8186; font-weight: 600;\n\t\t\tfont-size: 12px; text-decoration: none; } .n8n-link svg { display: inline-block;\n\t\t\tvertical-align: middle; } .header h1 { color: #525356; font-size: 20px; font-weight: 400;\n\t\t\tpadding-bottom: 8px; } .header p { color: #7E8186; font-size: 14px; font-weight: 400; }\n\t\t</style>\n\t</head>\n\n\t<body>\n\t\t<div class='container' style=\"width:640px\">\n\t\t\t<section>\n\t\t\t\t<div class='card'>\n\t\t\t\t\t<div class='header'>\n\t\t\t\t\t\t<h1>Thanks for Completing the Interview!</h1>\n\t\t\t\t\t\t<p style=\"margin-bottom:12px;\">If you liked this demo, <br/>please follow me on <a href=\"http://linkedin.com/in/jimleuk\" target=\"_blank\">http://linkedin.com/in/jimleuk</a> and\n <a href=\"https://x.com/jimle_uk\" target=\"_blank\">https://x.com/jimle_uk</a>\n </p>\n <p>\n <a href=\"https://n8n.partnerlinks.io/ee7izbliiw0n\" target=\"_blank\">\n Support my work! Sign up to n8n using this link \ud83d\ude4f\n </a>\n </p>\n </div>\n\t\t\t\t</div>\n <div class='card' >\n\t\t\t\t\t<div class='header'>\n\t\t\t\t\t\t<h1>Transcript</h1>\n <p style=\"color:#ccc;margin-bottom:24px;font-size:0.8rem\">This session is deleted within 24 hours.</p>\n {{\n $json.data\n .map(item => JSON.parse(item))\n .filter(item => item.type === 'next_question')\n .map(item => `\n <div style=\"display:flex;flex-direction:row;margin-bottom: 16px;\">\n <div style=\"width: 60px;padding-right: 5px;text-align: left;color: #ccc;\">\n ${DateTime.fromISO(item.timestamp).format('dd MMM, hh:mm')}\n </div>\n <div style=\"width:100%\">\n <div style=\"\n border: 1px solid #ccc;\n padding: 10px;\n border-radius: 5px;\n background-color: #f8f7f7;\n text-align: right;\n margin-bottom: 5px;\n\">${item.question}</div>\n <div style=\"\n border: 1px solid #c7ccec;\n padding: 10px;\n border-radius: 5px;\n background-color: #f5f5fc;\n text-align: left;\n color: #2e2e84;\n\">${item.answer}</div>\n </div>\n </div>\n `)\n .join('\\n')\n }}\n \t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t\t<div class='n8n-link'>\n\t\t\t\t\t\t<a href=\"https://n8n.partnerlinks.io/ee7izbliiw0n\" target='_blank'>\n\t\t\t\t\t\t\tForm automated with\n\t\t\t\t\t\t\t<svg\n\t\t\t\t\t\t\t\twidth='73'\n\t\t\t\t\t\t\t\theight='20'\n\t\t\t\t\t\t\t\tviewBox='0 0 73 20'\n\t\t\t\t\t\t\t\tfill='none'\n\t\t\t\t\t\t\t\txmlns='http://www.w3.org/2000/svg'\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<path\n\t\t\t\t\t\t\t\t\tfill-rule='evenodd'\n\t\t\t\t\t\t\t\t\tclip-rule='evenodd'\n\t\t\t\t\t\t\t\t\td='M40.2373 4C40.2373 6.20915 38.4464 8 36.2373 8C34.3735 8 32.8074 6.72525 32.3633 5H26.7787C25.801 5 24.9666 5.70685 24.8059 6.6712L24.6415 7.6576C24.4854 8.59415 24.0116 9.40925 23.3417 10C24.0116 10.5907 24.4854 11.4058 24.6415 12.3424L24.8059 13.3288C24.9666 14.2931 25.801 15 26.7787 15H28.3633C28.8074 13.2747 30.3735 12 32.2373 12C34.4464 12 36.2373 13.7908 36.2373 16C36.2373 18.2092 34.4464 20 32.2373 20C30.3735 20 28.8074 18.7253 28.3633 17H26.7787C24.8233 17 23.1546 15.5864 22.8331 13.6576L22.6687 12.6712C22.508 11.7069 21.6736 11 20.6959 11H19.0645C18.5652 12.64 17.0406 13.8334 15.2373 13.8334C13.434 13.8334 11.9094 12.64 11.4101 11H9.06449C8.56519 12.64 7.04059 13.8334 5.2373 13.8334C3.02817 13.8334 1.2373 12.0424 1.2373 9.83335C1.2373 7.6242 3.02817 5.83335 5.2373 5.83335C7.16069 5.83335 8.76699 7.19085 9.15039 9H11.3242C11.7076 7.19085 13.3139 5.83335 15.2373 5.83335C17.1607 5.83335 18.767 7.19085 19.1504 9H20.6959C21.6736 9 22.508 8.29315 22.6687 7.3288L22.8331 6.3424C23.1546 4.41365 24.8233 3 26.7787 3H32.3633C32.8074 1.27478 34.3735 0 36.2373 0C38.4464 0 40.2373 1.79086 40.2373 4ZM38.2373 4C38.2373 5.10455 37.3419 6 36.2373 6C35.1327 6 34.2373 5.10455 34.2373 4C34.2373 2.89543 35.1327 2 36.2373 2C37.3419 2 38.2373 2.89543 38.2373 4ZM5.2373 11.8334C6.34189 11.8334 7.23729 10.9379 7.23729 9.83335C7.23729 8.72875 6.34189 7.83335 5.2373 7.83335C4.13273 7.83335 3.2373 8.72875 3.2373 9.83335C3.2373 10.9379 4.13273 11.8334 5.2373 11.8334ZM15.2373 11.8334C16.3419 11.8334 17.2373 10.9379 17.2373 9.83335C17.2373 8.72875 16.3419 7.83335 15.2373 7.83335C14.1327 7.83335 13.2373 8.72875 13.2373 9.83335C13.2373 10.9379 14.1327 11.8334 15.2373 11.8334ZM32.2373 18C33.3419 18 34.2373 17.1045 34.2373 16C34.2373 14.8954 33.3419 14 32.2373 14C31.1327 14 30.2373 14.8954 30.2373 16C30.2373 17.1045 31.1327 18 32.2373 18Z'\n\t\t\t\t\t\t\t\t\tfill='#EA4B71'\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t<path\n\t\t\t\t\t\t\t\t\td='M44.2393 15.0007H46.3277V10.5791C46.3277 9.12704 47.2088 8.49074 48.204 8.49074C49.183 8.49074 49.9498 9.14334 49.9498 10.4812V15.0007H52.038V10.057C52.038 7.91969 50.798 6.67969 48.8567 6.67969C47.633 6.67969 46.9477 7.16914 46.4582 7.80544H46.3277L46.1482 6.84284H44.2393V15.0007Z'\n\t\t\t\t\t\t\t\t\tfill='#101330'\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t<path\n\t\t\t\t\t\t\t\t\td='M60.0318 9.50205V9.40415C60.7498 9.0452 61.4678 8.4252 61.4678 7.20155C61.4678 5.43945 60.0153 4.37891 58.0088 4.37891C55.9528 4.37891 54.4843 5.5047 54.4843 7.23415C54.4843 8.4089 55.1698 9.0452 55.9203 9.40415V9.50205C55.0883 9.79575 54.0928 10.6768 54.0928 12.1452C54.0928 13.9237 55.5613 15.1637 57.9923 15.1637C60.4233 15.1637 61.8428 13.9237 61.8428 12.1452C61.8428 10.6768 60.8638 9.81205 60.0318 9.50205ZM57.9923 5.87995C58.8083 5.87995 59.4118 6.40205 59.4118 7.2831C59.4118 8.16415 58.7918 8.6863 57.9923 8.6863C57.1928 8.6863 56.5238 8.16415 56.5238 7.2831C56.5238 6.38575 57.1603 5.87995 57.9923 5.87995ZM57.9923 13.5974C57.0458 13.5974 56.2793 12.9937 56.2793 11.9658C56.2793 11.0358 56.9153 10.3342 57.9758 10.3342C59.0203 10.3342 59.6568 11.0195 59.6568 11.9984C59.6568 12.9937 58.9223 13.5974 57.9923 13.5974Z'\n\t\t\t\t\t\t\t\t\tfill='#101330'\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t<path\n\t\t\t\t\t\t\t\t\td='M63.9639 15.0007H66.0524V10.5791C66.0524 9.12704 66.9334 8.49074 67.9289 8.49074C68.9079 8.49074 69.6744 9.14334 69.6744 10.4812V15.0007H71.7629V10.057C71.7629 7.91969 70.5229 6.67969 68.5814 6.67969C67.3579 6.67969 66.6724 7.16914 66.1829 7.80544H66.0524L65.8729 6.84284H63.9639V15.0007Z'\n\t\t\t\t\t\t\t\t\tfill='#101330'\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t</svg>\n\t\t\t\t\t\t</a>\n\t\t\t\t\t</div>\n\t\t\t</section>\n\t\t</div>\n\t</body>\n\n</html>"
  },
  "typeVersion": 1.2
}

================ Node #1703 ================
{
  "id": "dff24e45-8e57-4dfc-8b65-9d315b406bd2",
  "name": "Save to Google Sheet",
  "type": "n8n-nodes-base.googleSheets",
  "position": [
    5040,
    760
  ],
  "parameters": {
    "columns": {
      "value": {
        "name": "{{ $('Start Interview').first().json['What is your name?'] }}",
        "session_id": "={{ $('UUID').first().json.data }}"
      },
      "schema": [
        {
          "id": "session_id",
          "type": "string",
          "display": true,
          "required": false,
          "displayName": "session_id",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "timestamp",
          "type": "string",
          "display": true,
          "required": false,
          "displayName": "timestamp",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "name",
          "type": "string",
          "display": true,
          "required": false,
          "displayName": "name",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "type",
          "type": "string",
          "display": true,
          "required": false,
          "displayName": "type",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "question",
          "type": "string",
          "display": true,
          "required": false,
          "displayName": "question",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "answer",
          "type": "string",
          "display": true,
          "required": false,
          "displayName": "answer",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        }
      ],
      "mappingMode": "autoMapInputData",
      "matchingColumns": []
    },
    "options": {
      "useAppend": true
    },
    "operation": "append",
    "sheetName": {
      "__rl": true,
      "mode": "list",
      "value": 1695693704,
      "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1wKjVdm7HeufJkHrUJn_bW9bFI_blm0laoI_jgXKDe0Q/edit#gid=1695693704",
      "cachedResultName": "transcripts"
    },
    "documentId": {
      "__rl": true,
      "mode": "list",
      "value": "1wKjVdm7HeufJkHrUJn_bW9bFI_blm0laoI_jgXKDe0Q",
      "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1wKjVdm7HeufJkHrUJn_bW9bFI_blm0laoI_jgXKDe0Q/edit?usp=drivesdk",
      "cachedResultName": "AI Researcher with n8n Forms"
    }
  },
  "credentials": {
    "googleSheetsOAuth2Api": {
      "id": "FsFwFchwmgtBu5l7",
      "name": "Google Sheets account"
    }
  },
  "typeVersion": 4.5
}

================ Node #1704 ================
{
  "id": "8eb03a1c-02e4-4d49-bf68-bb148585828f",
  "name": "Session to List",
  "type": "n8n-nodes-base.splitOut",
  "position": [
    4700,
    760
  ],
  "parameters": {
    "options": {},
    "fieldToSplitOut": "session"
  },
  "typeVersion": 1
}

================ Node #1705 ================
{
  "id": "c594aa2b-a29d-42e4-8799-1c557d78932d",
  "name": "Messages To JSON",
  "type": "n8n-nodes-base.set",
  "position": [
    4860,
    760
  ],
  "parameters": {
    "mode": "raw",
    "options": {},
    "jsonOutput": "={{\n{\n ...$json.session.parseJson(),\n session_id: `session_${$('UUID').first().json.data}`,\n name: $('Start Interview').first().json['What is your name?'],\n}\n}}"
  },
  "typeVersion": 3.4
}

================ Node #1706 ================
{
  "id": "106bd688-6ccc-4a6a-9b52-ee7187d9aebe",
  "name": "Sticky Note9",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    4540,
    420
  ],
  "parameters": {
    "color": 7,
    "width": 508,
    "height": 293,
    "content": "## 5. Save the Interview to Sheets\n[Read more about the Google Sheets node](https://docs.n8n.io/integrations/builtin/app-nodes/n8n-nodes-base.googlesheets/)\n\nFor easier data-sharing, we can have the workflow upload the session messages into data analysis tools for our team members.\n\nFor this demo, Google Sheets is an easy option. We'll pull the entire session out of redis and upload the messages one by one to sheets.\n\n### Check out the example sheet here: https://docs.google.com/spreadsheets/d/1wKjVdm7HeufJkHrUJn_bW9bFI_blm0laoI_jgXKDe0Q/edit?usp=sharing"
  },
  "typeVersion": 1
}

================ Node #1707 ================
{
  "id": "b7754724-7473-4245-8b54-85c370a2b1be",
  "name": "Query By Session",
  "type": "n8n-nodes-base.redis",
  "position": [
    4920,
    1240
  ],
  "parameters": {
    "key": "=session_{{ $('Webhook').first().json.params.session_id }}",
    "options": {},
    "operation": "get",
    "propertyName": "data"
  },
  "credentials": {
    "redis": {
      "id": "AbPH1yYQ924bVUqm",
      "name": "Upstash (ai interviewer)"
    }
  },
  "typeVersion": 1
}

================ Node #1708 ================
{
  "id": "4b6a0db6-1d33-4ed3-a955-7562e0dba1f0",
  "name": "Get Session",
  "type": "n8n-nodes-base.redis",
  "position": [
    4540,
    760
  ],
  "parameters": {
    "key": "=session_{{ $('UUID').first().json.data }}",
    "keyType": "list",
    "options": {},
    "operation": "get",
    "propertyName": "session"
  },
  "credentials": {
    "redis": {
      "id": "AbPH1yYQ924bVUqm",
      "name": "Upstash (ai interviewer)"
    }
  },
  "executeOnce": true,
  "typeVersion": 1
}

================ Node #1709 ================
{
  "id": "0a4e65b7-39be-44eb-8c66-913ebfe8a87a",
  "name": "Sticky Note3",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    1140,
    840
  ],
  "parameters": {
    "color": 3,
    "width": 215,
    "height": 80,
    "content": "**Replace password and username for Supabase**"
  },
  "typeVersion": 1
}

================ Node #1710 ================
{
  "id": "2cea21fc-f3fe-47b7-a7b6-12acb0bc03ac",
  "name": "Sticky Note5",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    -160,
    320
  ],
  "parameters": {
    "color": 7,
    "width": 280.2462120317618,
    "height": 545.9087885077763,
    "content": "### Set up steps\n\n#### Preparation\n1. **Create Accounts**:\n - [N8N](https://n8n.partnerlinks.io/2hr10zpkki6a): For workflow automation.\n - [Supabase](https://supabase.com/): For database hosting and management.\n - [OpenAI](https://openai.com/): For building the conversational AI agent.\n2. **Configure Database Connection**:\n - Set up a PostgreSQL database in Supabase.\n - Use appropriate credentials (`username`, `password`, `host`, and `database` name) in your workflow.\n\n#### N8N Workflow\n\nAI agent with tools:\n\n1. **Code Tool**:\n - Execute SQL queries based on user input.\n2. **Database Schema Tool**:\n - Retrieve a list of all tables in the database.\n - Use a predefined SQL query to fetch table definitions, including column names, types, and references.\n3. **Table Definition**:\n - Retrieve a list of columns with types for one table."
  },
  "typeVersion": 1
}

================ Node #1711 ================
{
  "id": "eacc0c8c-11d5-44fb-8ff1-10533a233693",
  "name": "Sticky Note6",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    -160,
    -200
  ],
  "parameters": {
    "color": 7,
    "width": 636.2128494576581,
    "height": 497.1532689930921,
    "content": "![5min Logo](https://res.cloudinary.com/de9jgixzm/image/upload/v1739773200/Skool%20Assets/ejm3hqnvhgwpnu2fv92s.png)\n## AI Agent to chat with Supabase/PostgreSQL DB\n**Made by [Mark Shcherbakov](https://www.linkedin.com/in/marklowcoding/) from community [5minAI](https://www.skool.com/5minai-2861)**\n\nAccessing and analyzing database data often requires SQL expertise or dedicated reports, which can be time-consuming. This workflow empowers users to interact with a database conversationally through an AI-powered agent. It dynamically generates SQL queries based on user requests, streamlining data retrieval and analysis.\n\nThis workflow integrates OpenAI with a Supabase database, enabling users to interact with their data via an AI agent. The agent can:\n- Retrieve records from the database.\n- Extract and analyze JSON data stored in tables.\n- Provide summaries, aggregations, or specific data points based on user queries.\n\n"
  },
  "typeVersion": 1
}

================ Node #1712 ================
{
  "id": "be1559ea-1f75-4e7c-9bdd-3add8d8be70b",
  "name": "Sticky Note7",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    140,
    320
  ],
  "parameters": {
    "color": 7,
    "width": 330.5152611046425,
    "height": 239.5888196628349,
    "content": "### ... or watch set up video [20 min]\n[![Youtube Thumbnail](https://res.cloudinary.com/de9jgixzm/image/upload/v1739773279/Youtube%20Thumbs/Chat%20With%20DB.png)](https://www.youtube.com/watch?v=-GgKzhCNxjk)\n"
  },
  "typeVersion": 1
}

================ Node #1713 ================
{
  "id": "4ea87754-dead-49ea-848c-ed86c98e217b",
  "name": "When chat message received",
  "type": "@n8n/n8n-nodes-langchain.chatTrigger",
  "position": [
    720,
    400
  ],
  "webhookId": "6e95bc27-99a6-417c-8bf7-2831d7f7a4be",
  "parameters": {
    "options": {}
  },
  "typeVersion": 1.1
}

================ Node #1714 ================
{
  "id": "c20d6e57-eb41-4682-a7f5-5bb4323df476",
  "name": "OpenAI Chat Model",
  "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
  "position": [
    760,
    680
  ],
  "parameters": {
    "options": {}
  },
  "credentials": {
    "openAiApi": {
      "id": "zJhr5piyEwVnWtaI",
      "name": "OpenAi club"
    }
  },
  "typeVersion": 1
}

================ Node #1715 ================
{
  "id": "8d3b1faf-643c-4070-996d-a59cb06e1827",
  "name": "DB Schema",
  "type": "n8n-nodes-base.postgresTool",
  "position": [
    1180,
    660
  ],
  "parameters": {
    "query": "SELECT table_schema, table_name\nFROM information_schema.tables\nWHERE table_type = 'BASE TABLE' AND table_schema = 'public';",
    "options": {},
    "operation": "executeQuery",
    "descriptionType": "manual",
    "toolDescription": "Get list of all tables in database"
  },
  "credentials": {
    "postgres": {
      "id": "AO9cER6p8uX7V07T",
      "name": "Postgres 5minai"
    }
  },
  "typeVersion": 2.5
}

================ Node #1716 ================
{
  "id": "d9346ade-79d1-44c2-8fa6-b337ad8b0544",
  "name": "Get table definition",
  "type": "n8n-nodes-base.postgresTool",
  "position": [
    1340,
    660
  ],
  "parameters": {
    "query": "SELECT \n c.column_name,\n c.data_type,\n c.is_nullable,\n c.column_default,\n tc.constraint_type,\n ccu.table_name AS referenced_table,\n ccu.column_name AS referenced_column\nFROM \n information_schema.columns c\nLEFT JOIN \n information_schema.key_column_usage kcu \n ON c.table_name = kcu.table_name \n AND c.column_name = kcu.column_name\nLEFT JOIN \n information_schema.table_constraints tc \n ON kcu.constraint_name = tc.constraint_name\n AND tc.constraint_type = 'FOREIGN KEY'\nLEFT JOIN\n information_schema.constraint_column_usage ccu\n ON tc.constraint_name = ccu.constraint_name\nWHERE \n c.table_name = '{{ $fromAI(\"table_name\") }}' -- Your table name\n AND c.table_schema = 'public' -- Ensure it's in the right schema\nORDER BY \n c.ordinal_position;\n",
    "options": {},
    "operation": "executeQuery",
    "descriptionType": "manual",
    "toolDescription": "Get table definition to find all columns and types."
  },
  "credentials": {
    "postgres": {
      "id": "AO9cER6p8uX7V07T",
      "name": "Postgres 5minai"
    }
  },
  "typeVersion": 2.5
}

================ Node #1717 ================
{
  "id": "b88a21e0-d2ff-4431-bd84-dfd43edeb5c4",
  "name": "Sticky Note",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    960,
    280
  ],
  "parameters": {
    "width": 215,
    "height": 80,
    "content": "**Finetune the prompt of assistant**"
  },
  "typeVersion": 1
}

================ Node #1718 ================
{
  "id": "fbe9eb68-5990-485c-820f-08234ea33194",
  "name": "AI Agent",
  "type": "@n8n/n8n-nodes-langchain.agent",
  "position": [
    940,
    400
  ],
  "parameters": {
    "text": "={{ $('When chat message received').item.json.chatInput }}",
    "agent": "openAiFunctionsAgent",
    "options": {
      "systemMessage": "You are DB assistant. You need to run queries in DB aligned with user requests.\n\nRun custom SQL query to aggregate data and response to user.\n\nFetch all data to analyse it for response if needed.\n"
    },
    "promptType": "define"
  },
  "typeVersion": 1.6
}

================ Node #1719 ================
{
  "id": "7f82d6d9-d7d6-4443-bbaa-c9b276a376e3",
  "name": "Run SQL Query",
  "type": "n8n-nodes-base.postgresTool",
  "position": [
    1040,
    660
  ],
  "parameters": {
    "query": "{{ $fromAI(\"query\",\"SQL query for PostgreSQL DB in Supabase\") }}",
    "options": {},
    "operation": "executeQuery",
    "descriptionType": "manual",
    "toolDescription": "Run custom SQL queries using knowledge about Output structure to provide needed response for user request.\nUse ->> operator to extract JSON data."
  },
  "credentials": {
    "postgres": {
      "id": "AO9cER6p8uX7V07T",
      "name": "Postgres 5minai"
    }
  },
  "typeVersion": 2.5
}

================ Node #1720 ================
{
  "id": "ff65c2db-6a94-4e56-a10c-2538c9617df6",
  "name": "When clicking \u2018Test workflow\u2019",
  "type": "n8n-nodes-base.manualTrigger",
  "position": [
    220,
    320
  ],
  "parameters": {},
  "typeVersion": 1
}

================ Node #1721 ================
{
  "id": "208fc618-0543-4552-bd65-9c808c879d88",
  "name": "Google Drive",
  "type": "n8n-nodes-base.googleDrive",
  "position": [
    440,
    320
  ],
  "parameters": {
    "fileId": {
      "__rl": true,
      "mode": "list",
      "value": "1wvlEcbxFIENvqL-bACzlLEfy5gA6uF9J",
      "cachedResultUrl": "https://drive.google.com/file/d/1wvlEcbxFIENvqL-bACzlLEfy5gA6uF9J/view?usp=drivesdk",
      "cachedResultName": "test_fine_tuning.jsonl"
    },
    "options": {
      "binaryPropertyName": "data.jsonl",
      "googleFileConversion": {
        "conversion": {
          "docsToFormat": "application/pdf"
        }
      }
    },
    "operation": "download"
  },
  "credentials": {
    "googleDriveOAuth2Api": {
      "id": "HEy5EuZkgPZVEa9w",
      "name": "Google Drive account"
    }
  },
  "typeVersion": 3
}

================ Node #1722 ================
{
  "id": "3580d925-c8c9-446f-bfa4-faae5ed3f44a",
  "name": "AI Agent",
  "type": "@n8n/n8n-nodes-langchain.agent",
  "position": [
    500,
    800
  ],
  "parameters": {
    "options": {}
  },
  "typeVersion": 1.7
}

================ Node #1723 ================
{
  "id": "d309da46-c44e-47b7-bb46-5ee6fe7e6964",
  "name": "When chat message received",
  "type": "@n8n/n8n-nodes-langchain.chatTrigger",
  "position": [
    220,
    800
  ],
  "webhookId": "88151d03-e7f5-4c9a-8190-7cff8e849ca2",
  "parameters": {
    "options": {}
  },
  "typeVersion": 1.1
}

================ Node #1724 ================
{
  "id": "84b896f7-d1dd-4485-a088-3c7f8154a406",
  "name": "OpenAI Chat Model",
  "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
  "position": [
    380,
    1000
  ],
  "parameters": {
    "model": "ft:gpt-4o-mini-2024-07-18:n3w-italia::AsVfsl7B",
    "options": {}
  },
  "credentials": {
    "openAiApi": {
      "id": "CDX6QM4gLYanh0P4",
      "name": "OpenAi account"
    }
  },
  "typeVersion": 1.1
}

================ Node #1725 ================
{
  "id": "3bff93e4-70c3-48c7-b0b3-d2a9881689c4",
  "name": "Sticky Note1",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    220,
    560
  ],
  "parameters": {
    "width": 556.5145228215765,
    "height": 211.35269709543567,
    "content": "# Step 2\n\nOnce the .jsonl file for training is uploaded (See the entire process here.: https://platform.openai.com/finetune/), a \"new model\" will be created and made available via your API. OpenAI will automatically train it based on the uploaded .jsonl file. If the training is successful, the new model will be accessible via API.\n\neg. ft:gpt-4o-mini-2024-07-18:n3w-italia::XXXXX7B"
  },
  "typeVersion": 1
}

================ Node #1726 ================
{
  "id": "ea67edd7-986d-47cd-bc1a-5df49851e27b",
  "name": "Sticky Note2",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    220,
    -5.676348547717737
  ],
  "parameters": {
    "width": 777.3941908713687,
    "height": 265.161825726141,
    "content": "# Step 1\n\nCreate the training file .jsonl with the following syntax and upload it to Drive.\n\n{\"messages\": [{\"role\": \"system\", \"content\": \"You are an experienced and helpful travel assistant.\"}, {\"role\": \"user\", \"content\": \"What documents are needed to travel to the United States?\"}, {\"role\": \"assistant\", \"content\": \"To travel to the United States, you will need a valid passport and an ESTA authorization, which you can apply for online. Make sure to check the specific requirements based on your nationality.\"}]}\n....\n\nThe file will be uploaded here: https://platform.openai.com/storage/files\n\n"
  },
  "typeVersion": 1
}

================ Node #1727 ================
{
  "id": "87df3b85-01ac-41db-b5b6-a236871fa4e2",
  "name": "Upload File",
  "type": "@n8n/n8n-nodes-langchain.openAi",
  "position": [
    660,
    320
  ],
  "parameters": {
    "options": {
      "purpose": "fine-tune"
    },
    "resource": "file",
    "binaryPropertyName": "data.jsonl"
  },
  "credentials": {
    "openAiApi": {
      "id": "CDX6QM4gLYanh0P4",
      "name": "OpenAi account"
    }
  },
  "typeVersion": 1.8
}

================ Node #1728 ================
{
  "id": "c8ec10d4-ff83-461f-94ac-45b68d298276",
  "name": "Create Fine-tuning Job",
  "type": "n8n-nodes-base.httpRequest",
  "position": [
    900,
    320
  ],
  "parameters": {
    "url": "https://api.openai.com/v1/fine_tuning/jobs",
    "method": "POST",
    "options": {},
    "jsonBody": "={\n \"training_file\": \"{{ $json.id }}\",\n \"model\": \"gpt-4o-mini-2024-07-18\"\n} ",
    "sendBody": true,
    "sendHeaders": true,
    "specifyBody": "json",
    "authentication": "genericCredentialType",
    "genericAuthType": "httpHeaderAuth",
    "headerParameters": {
      "parameters": [
        {
          "name": "Content-Type",
          "value": "application/json"
        }
      ]
    }
  },
  "credentials": {
    "httpHeaderAuth": {
      "id": "0WeSLPyZXOxqMuzn",
      "name": "OpenAI API"
    }
  },
  "typeVersion": 4.2
}

================ Node #1729 ================
{
  "id": "6ea4e702-1af8-407b-b653-964a519db1c2",
  "name": "Basic LLM Chain",
  "type": "@n8n/n8n-nodes-langchain.chainLlm",
  "position": [
    1560,
    -360
  ],
  "parameters": {
    "text": "=You are a highly skilled news categorizer, specializing in indentifying interesting stuff from Hacker News front-page headlines.\n\nYou are provided with JSON data containing a list of dates and their corresponding top headlines from the Hacker News front page. Each headline will also include a URL linking to the original article or discussion. Importantly, the dates provided will be the SAME DAY across MULTIPLE YEARS (e.g., January 1st, 2023, January 1st, 2022, January 1st, 2021, etc.). You need to indentify key headlines and also analyze how the tech landscape has evolved over the years, as reflected in the headlines for this specific day.\n\nYour task is to indentify top 10-15 headlines from across the years from the given json data and return in Markdown formatted bullet points categorizing into themes and adding markdown hyperlinks to the source URL with Prefixing Year before the headline. Follow the Output Foramt Mentioned.\n\n**Input Format:**\n\n```json\n[\n {\n \"headlines\": [\n \"Headline 1 Title [URL1]\",\n \"Headline 2 Title [URL2]\",\n \"Headline 3 Title [URL3]\",\n ...\n ]\n \"date\": \"YYYY-MM-DD\",\n },\n {\n \"headlines\": [\n \"Headline 1 Title [URL1]\",\n \"Headline 2 Title [URL2]\",\n ...\n ]\n \"date\": \"YYYY-MM-DD\",\n },\n ...\n]\n```\n\n**Output Format In Markdown**\n\n```\n# HN Lookback <FullMonthName-DD> | <start YYYY> to <end YYYY> \n\n## [Theme 1]\n- YYYY [Headline 1](URL1)\n- YYYY [Headline 2](URL2)\n...\n\n## [Theme 2]\n- YYYY [Headline 1](URL1)\n- YYYY [Headline 2](URL2)\n...\n\n... \n\n## <this is optional>\n<if any interesing ternds emerge mention them in oneline>\n```\n\n**Here is the Json data for Hackernews Headlines across the years**\n\n```\n{{ JSON.stringify($json.data) }}\n```",
    "promptType": "define"
  },
  "typeVersion": 1.5
}

================ Node #1730 ================
{
  "id": "b5a97c2a-0c3b-4ebe-aec5-7bca6b55ad4c",
  "name": "Google Gemini Chat Model",
  "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
  "position": [
    1740,
    -200
  ],
  "parameters": {
    "options": {},
    "modelName": "models/gemini-1.5-pro"
  },
  "credentials": {
    "googlePalmApi": {
      "id": "Hx1fn2jrUvojSKye",
      "name": "Google Gemini(PaLM) Api account"
    }
  },
  "typeVersion": 1
}

================ Node #1731 ================
{
  "id": "18cba750-aef5-451d-880f-2c12d8540d78",
  "name": "Schedule Trigger",
  "type": "n8n-nodes-base.scheduleTrigger",
  "position": [
    -380,
    -360
  ],
  "parameters": {
    "rule": {
      "interval": [
        {
          "triggerAtHour": 21
        }
      ]
    }
  },
  "typeVersion": 1.2
}

================ Node #1732 ================
{
  "id": "341da616-8670-4cd9-b47a-ee25e2ae9862",
  "name": "CreateYearsList",
  "type": "n8n-nodes-base.code",
  "position": [
    -200,
    -360
  ],
  "parameters": {
    "jsCode": "for (const item of $input.all()) {\n const currentDateStr = item.json.timestamp.split('T')[0];\n const currentDate = new Date(currentDateStr);\n const currentYear = currentDate.getFullYear();\n const currentMonth = currentDate.getMonth(); // 0 for January, 1 for February, etc.\n const currentDay = currentDate.getDate();\n\n const datesToFetch = [];\n for (let year = currentYear; year >= 2007; year--) {\n let targetDate;\n if (year === 2007) {\n // Special handling for 2007 to start from Feb 19\n if (currentMonth > 1 || (currentMonth === 1 && currentDay >= 19))\n {\n targetDate = new Date(2007, 1, 19); // Feb 19, 2007\n } else {\n continue; // Skip 2007 if currentDate is before Feb 19\n }\n } else {\n targetDate = new Date(year, currentMonth, currentDay);\n }\n \n // Format the date as YYYY-MM-DD\n const formattedDate = targetDate.toISOString().split('T')[0];\n datesToFetch.push(formattedDate);\n }\n item.json.datesToFetch = datesToFetch;\n}\n\nreturn $input.all();"
  },
  "typeVersion": 2
}

================ Node #1733 ================
{
  "id": "42e24547-be24-4f29-8ce8-c0df7d47a6ff",
  "name": "CleanUpYearList",
  "type": "n8n-nodes-base.set",
  "position": [
    0,
    -360
  ],
  "parameters": {
    "options": {},
    "assignments": {
      "assignments": [
        {
          "id": "b269dc0d-21e1-4124-8f3a-2c7bfa4add5c",
          "name": "datesToFetch",
          "type": "array",
          "value": "={{ $json.datesToFetch }}"
        }
      ]
    }
  },
  "typeVersion": 3.4
}

================ Node #1734 ================
{
  "id": "6e51ad05-0f3d-4bfb-8c8d-5b71e7355344",
  "name": "SplitOutYearList",
  "type": "n8n-nodes-base.splitOut",
  "position": [
    200,
    -360
  ],
  "parameters": {
    "options": {},
    "fieldToSplitOut": "datesToFetch"
  },
  "typeVersion": 1
}

================ Node #1735 ================
{
  "id": "6f827071-718f-4e27-9f7a-cc50296f7bc4",
  "name": "GetFrontPage",
  "type": "n8n-nodes-base.httpRequest",
  "position": [
    420,
    -360
  ],
  "parameters": {
    "url": "=https://news.ycombinator.com/front",
    "options": {
      "batching": {
        "batch": {
          "batchSize": 1,
          "batchInterval": 3000
        }
      }
    },
    "sendQuery": true,
    "queryParameters": {
      "parameters": [
        {
          "name": "day",
          "value": "={{ $json.datesToFetch }}"
        }
      ]
    }
  },
  "typeVersion": 4.2
}

================ Node #1736 ================
{
  "id": "7287e6b1-337f-4634-ac23-5ceaa87b0db3",
  "name": "ExtractDetails",
  "type": "n8n-nodes-base.html",
  "position": [
    640,
    -360
  ],
  "parameters": {
    "options": {},
    "operation": "extractHtmlContent",
    "extractionValues": {
      "values": [
        {
          "key": "=headlines",
          "cssSelector": ".titleline",
          "returnArray": true,
          "skipSelectors": "span"
        },
        {
          "key": "date",
          "cssSelector": ".pagetop > font"
        }
      ]
    }
  },
  "typeVersion": 1.2
}

================ Node #1737 ================
{
  "id": "fceff31e-4dcd-4199-89c5-8eb75cd479bf",
  "name": "GetHeadlines",
  "type": "n8n-nodes-base.set",
  "position": [
    920,
    -460
  ],
  "parameters": {
    "options": {},
    "assignments": {
      "assignments": [
        {
          "id": "e1ce33e9-e4f8-4215-bbdb-156a955a0a97",
          "name": "headlines",
          "type": "array",
          "value": "={{ $json.headlines }}"
        }
      ]
    }
  },
  "typeVersion": 3.4
}

================ Node #1738 ================
{
  "id": "f7683614-7225-4f05-ba12-86b326fdb4a1",
  "name": "GetDate",
  "type": "n8n-nodes-base.set",
  "position": [
    920,
    -280
  ],
  "parameters": {
    "options": {},
    "assignments": {
      "assignments": [
        {
          "id": "fc1d15f6-a999-4d6b-a7bc-3ffa9427679e",
          "name": "date",
          "type": "string",
          "value": "={{ $json.date }}"
        }
      ]
    }
  },
  "typeVersion": 3.4
}

================ Node #1739 ================
{
  "id": "7e09ce85-ece1-46a0-aa59-8e3da66413b2",
  "name": "MergeHeadlinesDate",
  "type": "n8n-nodes-base.merge",
  "position": [
    1180,
    -360
  ],
  "parameters": {
    "mode": "combine",
    "options": {},
    "combineBy": "combineByPosition"
  },
  "typeVersion": 3
}

================ Node #1740 ================
{
  "id": "db3bf408-8179-4ca4-a5b4-8a390b68f994",
  "name": "SingleJson",
  "type": "n8n-nodes-base.aggregate",
  "position": [
    1380,
    -360
  ],
  "parameters": {
    "options": {},
    "aggregate": "aggregateAllItemData"
  },
  "typeVersion": 1
}

================ Node #1741 ================
{
  "id": "2abbc0e9-ed1e-4ba0-9d2f-7c3cd314a0fe",
  "name": "Telegram",
  "type": "n8n-nodes-base.telegram",
  "position": [
    2020,
    -360
  ],
  "parameters": {
    "text": "={{ $json.text }}",
    "chatId": "@OnThisDayHN",
    "additionalFields": {
      "parse_mode": "Markdown",
      "appendAttribution": false
    }
  },
  "credentials": {
    "telegramApi": {
      "id": "6nIwfhIWcwJFTPTg",
      "name": "OnThisDayHNBot"
    }
  },
  "typeVersion": 1.2
}

================ Node #1742 ================
{
  "id": "6abe578b-d503-4da5-9af8-f9977de71139",
  "name": "Vivid Pop Explosion",
  "type": "n8n-nodes-base.set",
  "notes": " ",
  "position": [
    380,
    980
  ],
  "parameters": {
    "options": {},
    "assignments": {
      "assignments": [
        {
          "id": "9ec60f33-b940-40a6-9f8a-cb944b7065f1",
          "name": "stylePrompt",
          "type": "string",
          "value": "=rule of thirds, golden ratio, hyper-maximalist, vibrant neon, high-contrast, octane render, photorealism, 8k ::7 --ar 16:9 --s 1000\n\nDesign a fun, energetic scene filled with bold, neon colors, and playful shapes that pop off the screen. The image should evoke a sense of joy and movement, using fluid, organic forms and exaggerated, cartoon-like proportions. Focus on creating a lively atmosphere with contrasting, saturated tones and dynamic lighting. Use a mix of asymmetrical and balanced compositions to create a playful visual flow. Render in 8K with a hyper-maximalist approach using Octane Render for vibrant, high-gloss textures and photorealistic lighting effects. Include:"
        }
      ]
    },
    "includeOtherFields": true
  },
  "notesInFlow": true,
  "typeVersion": 3.4
}

================ Node #1743 ================
{
  "id": "7de1ea42-3b18-4bfb-8ea4-a8b6c8d16763",
  "name": "AI Dystopia",
  "type": "n8n-nodes-base.set",
  "notes": " ",
  "position": [
    380,
    620
  ],
  "parameters": {
    "options": {},
    "assignments": {
      "assignments": [
        {
          "id": "9ec60f33-b940-40a6-9f8a-cb944b7065f1",
          "name": "stylePrompt",
          "type": "string",
          "value": "=golden ratio, rule of thirds, cyberpunk, glitch art, octane render, cinematic realism, 8k ::7 --ar 16:9 --s 1000\n\nGenerate a futuristic, cyberpunk dystopia with metallic textures, digital glitches, and neon lights. Blend cold, dystopian structures with traces of organic life. Use photorealistic lighting and dynamic reflections to enhance the visual depth of the scene. Include:"
        }
      ]
    },
    "includeOtherFields": true
  },
  "notesInFlow": true,
  "typeVersion": 3.4
}

================ Node #1744 ================
{
  "id": "aa17c288-78e0-48d9-9c60-0e63e351d0b6",
  "name": "Post-Analog Glitchscape",
  "type": "n8n-nodes-base.set",
  "notes": " ",
  "position": [
    380,
    420
  ],
  "parameters": {
    "options": {},
    "assignments": {
      "assignments": [
        {
          "id": "9ec60f33-b940-40a6-9f8a-cb944b7065f1",
          "name": "stylePrompt",
          "type": "string",
          "value": "=rule of thirds, asymmetric composition, glitch art, pixelation, VHS noise, octane render, unreal engine, 8k ::7 --ar 16:9 --s 1200\nDesign a glitchy, post-analog world with digital decay and broken visuals. Utilize pixelated elements, VHS noise, and neon glitches to create a fragmented aesthetic. Use bold, contrasting colors against muted backgrounds for a high-contrast, otherworldly feel. The composition should follow asymmetrical rules, focusing on chaotic yet intentional visual balance. Include:"
        }
      ]
    },
    "includeOtherFields": true
  },
  "notesInFlow": true,
  "typeVersion": 3.4
}

================ Node #1745 ================
{
  "id": "769ff46c-630f-456d-ae19-4c6496270fda",
  "name": "Neon Fauvism",
  "type": "n8n-nodes-base.set",
  "notes": " ",
  "position": [
    380,
    800
  ],
  "parameters": {
    "options": {},
    "assignments": {
      "assignments": [
        {
          "id": "9ec60f33-b940-40a6-9f8a-cb944b7065f1",
          "name": "stylePrompt",
          "type": "string",
          "value": "=asymmetric composition, golden ratio, neon colors, abstract forms, octane render, cinematic realism, unreal engine, 8k ::7 --ar 16:9 --s 1000\nCreate a bold, vivid composition using neon colors and fluid shapes that break away from reality. Focus on abstract forms, blending Fauvism's exaggerated color palette with modern digital art techniques. Use asymmetric composition and dynamic lighting. Render with a vibrant, high-energy aesthetic. Include:"
        }
      ]
    },
    "includeOtherFields": true
  },
  "notesInFlow": true,
  "typeVersion": 3.4
}

================ Node #1746 ================
{
  "id": "ccc67dcb-84e6-476a-9bc2-b5382b700d5e",
  "name": "None",
  "type": "n8n-nodes-base.set",
  "notes": " ",
  "position": [
    380,
    1160
  ],
  "parameters": {
    "options": {},
    "assignments": {
      "assignments": [
        {
          "id": "9ec60f33-b940-40a6-9f8a-cb944b7065f1",
          "name": "stylePrompt",
          "type": "string",
          "value": "=Include: "
        }
      ]
    },
    "includeOtherFields": true
  },
  "notesInFlow": true,
  "typeVersion": 3.4
}

================ Node #1747 ================
{
  "id": "fea2039c-48e5-4077-af2c-ea72838e1a5d",
  "name": "Serve webpage",
  "type": "n8n-nodes-base.respondToWebhook",
  "position": [
    1460,
    580
  ],
  "parameters": {
    "options": {},
    "respondWith": "text",
    "responseBody": "=<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n <meta charset=\"UTF-8\">\n <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n <title>Flux Image Generation Result</title>\n <style>\n body {\n font-family: 'Open Sans', Tahoma, Geneva, Verdana, sans-serif;\n display: flex;\n flex-direction: column;\n align-items: center;\n justify-content: center;\n min-height: 100vh;\n background-color: #121212;\n color: #e0e0e0;\n }\n .container {\n margin-top: 2em;\n width: 90%;\n max-width: 670px; /* Increased the max-width for the main image area */\n text-align: center;\n background: #1e1e1e;\n padding: 24px;\n border-radius: 12px;\n box-shadow: 0 8px 16px rgba(0, 0, 0, 0.3);\n margin-bottom: 24px;\n }\n .image-container {\n margin-bottom: 20px;\n }\n .image-container img {\n max-width: 100%;\n height: auto;\n border-radius: 12px;\n border: 2px solid #333;\n }\n .style-text {\n font-size: 18px;\n margin-bottom: 20px;\n color: #bbb;\n }\n .cta {\n display: block;\n width: 100%;\n margin: 20px 0 0;\n padding: 18px 0;\n border: none;\n border-radius: 6px;\n text-decoration: none;\n color: #fff;\n background-color: #1C9985;\n font-size: 18px;\n font-weight: 400;\n cursor: pointer;\n transition: all 0.3s ease;\n }\n .cta:hover {\n background-color: #20B69E;\n transform: translateY(-2px);\n box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);\n }\n /* New section for recent renders */\n .recent-renders {\n display: flex;\n justify-content: space-between;\n flex-wrap: wrap;\n gap: 16px;\n margin-top: 24px;\n max-width: 670px;\n }\n .recent-render img {\n width: 100%;\n max-width: 180px;\n height: auto;\n border-radius: 8px;\n border: 2px solid #333;\n }\n .recent-render {\n flex: 1;\n max-width: 200px;\n background-color: #2c2c2c;\n padding: 10px;\n border-radius: 10px;\n margin-bottom: 3 rem;\n }\n </style>\n</head>\n<body>\n <div class=\"container\">\n <div class=\"image-container\">\n <img src=\"https://pub-d2d94462851644a78ea607e05f8a2d25.r2.dev/fg-{{ $execution.id }}.jpg\" alt=\"Generated Image\" />\n </div>\n <div class=\"style-text\">Style: {{ $('Route by style').item.json.Style }}</div>\n <a href=\"https://n8n.io/workflows/2417-flux-ai-image-generator?utm_source=30day\" class=\"cta\">Duplicate this AI template</a>\n </div>\n \n <!-- New section to display the last 4 renders -->\n <div class=\"recent-renders\">\n <div class=\"recent-render\">\n <img src=\"https://pub-d2d94462851644a78ea607e05f8a2d25.r2.dev/fg-{{ $execution.id.toNumber() - 1 }}.jpg\" alt=\"Recent Render 1\">\n </div>\n <div class=\"recent-render\">\n <img src=\"https://pub-d2d94462851644a78ea607e05f8a2d25.r2.dev/fg-{{ $execution.id.toNumber() - 2 }}.jpg\" alt=\"Recent Render 2\">\n </div>\n <div class=\"recent-render\">\n <img src=\"https://pub-d2d94462851644a78ea607e05f8a2d25.r2.dev/fg-{{ $execution.id .toNumber() - 3}}.jpg\" alt=\"Recent Render 3\">\n </div>\n <div class=\"recent-render\">\n <img src=\"https://pub-d2d94462851644a78ea607e05f8a2d25.r2.dev/fg-{{ $execution.id.toNumber() - 4 }}.jpg\">\n </div>\n </div>\n</body>\n</html>\n"
  },
  "typeVersion": 1.1
}

================ Node #1748 ================
{
  "id": "2df7b738-9584-48b4-8adc-cafb0c026928",
  "name": "Respond with error",
  "type": "n8n-nodes-base.respondToWebhook",
  "position": [
    1460,
    820
  ],
  "parameters": {
    "options": {},
    "respondWith": "json",
    "responseBody": "{\n \"formSubmittedText\": \"Flux API failed. It does this ~10% of the time. Refresh and try again.\"\n}"
  },
  "typeVersion": 1.1
}

================ Node #1749 ================
{
  "id": "54cba7c4-db24-4abb-9638-ee66236d8676",
  "name": "Sticky Note",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    -20,
    440
  ],
  "parameters": {
    "color": 7,
    "width": 205.9419250888625,
    "height": 107.99633347519193,
    "content": "### Set style prompt\nEach Edit fields node after the Switch sets `stylePrompt`, used in huggingface node."
  },
  "typeVersion": 1
}

================ Node #1750 ================
{
  "id": "f4aa76f8-d35f-4332-aa39-0c34582618eb",
  "name": "Sticky Note1",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    720,
    840
  ],
  "parameters": {
    "color": 7,
    "width": 419.0156901664085,
    "height": 226.2264013670822,
    "content": "### Run flux model\nIn `Call huggingface inference api` You can change `black-forest-labs/FLUX.1-schnell` in URL parameter to other models:\n- `black-forest-labs/FLUX.1-dev`\n- `Shakker-Labs/FLUX.1-dev-LoRA-AntiBlur`\n- `XLabs-AI/flux-RealismLora`\n- `ByteDance/Hyper-SD`\n\n[See more models on huggingface.co](https://huggingface.co/models?pipeline_tag=text-to-image&sort=trending)\n"
  },
  "typeVersion": 1
}

================ Node #1751 ================
{
  "id": "2b0b29ce-82c2-4428-bf12-cb25262e5291",
  "name": "Sticky Note2",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    1120,
    440
  ],
  "parameters": {
    "color": 7,
    "width": 247.37323750873333,
    "height": 90.99855957953969,
    "content": "### Host image on S3\n[Cloudflare](https://cloudflare.com) has free S3 compatible hosting. They call it \"R2\"."
  },
  "typeVersion": 1
}

================ Node #1752 ================
{
  "id": "6fccc88f-9e72-49a3-952d-b7b1d9612091",
  "name": "Upload image to S3",
  "type": "n8n-nodes-base.s3",
  "onError": "continueErrorOutput",
  "position": [
    1120,
    580
  ],
  "parameters": {
    "fileName": "=fg-{{ $execution.id }}.jpg",
    "operation": "upload",
    "bucketName": "flux-generator",
    "additionalFields": {}
  },
  "credentials": {
    "s3": {
      "id": "HZqaz9hPFlZp3BZ7",
      "name": "S3 account"
    }
  },
  "typeVersion": 1
}

================ Node #1753 ================
{
  "id": "7824dc49-c546-424e-8ba9-5f34b190d5f0",
  "name": "Sticky Note3",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    1460,
    440
  ],
  "parameters": {
    "color": 7,
    "width": 302.9292231993488,
    "height": 90.99855957953969,
    "content": "### Respond to Form\nServe a webform with image on success. On error, send message to form."
  },
  "typeVersion": 1
}

================ Node #1754 ================
{
  "id": "71739ba4-b8db-439e-b8c3-06f3208126e3",
  "name": "Hyper-Surreal Escape",
  "type": "n8n-nodes-base.set",
  "notes": " ",
  "position": [
    380,
    240
  ],
  "parameters": {
    "options": {},
    "assignments": {
      "assignments": [
        {
          "id": "9ec60f33-b940-40a6-9f8a-cb944b7065f1",
          "name": "stylePrompt",
          "type": "string",
          "value": "=golden ratio, rule of thirds, cyberpunk, glitch art, octane render, cinematic realism, 8k ::7 --ar 16:9 --s 1000\nCreate a hyper-realistic yet surreal landscape that bends reality, incorporating dreamlike elements and exaggerated proportions. Use vibrant, almost neon colors, and focus on a sense of wonder, play, and fantasy. Include:\n"
        }
      ]
    },
    "includeOtherFields": true
  },
  "notesInFlow": true,
  "typeVersion": 3.4
}

================ Node #1755 ================
{
  "id": "dcfdb152-a055-4f0f-baa5-7cf8afba36ae",
  "name": "Sticky Note4",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    -320,
    440
  ],
  "parameters": {
    "color": 7,
    "width": 186.9444130878394,
    "height": 103.99685726445023,
    "content": "### Serve form to user\nCaptures `Prompt to flux` and `Style` from user."
  },
  "typeVersion": 1
}

================ Node #1756 ================
{
  "id": "310f6c63-9441-4332-82dc-09b56e4f625a",
  "name": "n8n Form Trigger",
  "type": "n8n-nodes-base.formTrigger",
  "position": [
    -280,
    660
  ],
  "webhookId": "a35eb005-f795-4c85-9d00-0fe9797cb509",
  "parameters": {
    "path": "flux4free",
    "options": {},
    "formTitle": "flux.schnell image generator",
    "formFields": {
      "values": [
        {
          "fieldType": "textarea",
          "fieldLabel": "Prompt to flux",
          "placeholder": " An astronaut riding a horse in 35mm style",
          "requiredField": true
        },
        {
          "fieldType": "dropdown",
          "fieldLabel": "Style",
          "fieldOptions": {
            "values": [
              {
                "option": "Hyper-Surreal Escape"
              },
              {
                "option": "Neon Fauvism"
              },
              {
                "option": "Post-Analog Glitchscape"
              },
              {
                "option": "AI Dystopia"
              },
              {
                "option": "Vivid Pop Explosion"
              }
            ]
          }
        }
      ]
    },
    "responseMode": "responseNode",
    "formDescription": "No ads, no BS. Uses hugginface inference API."
  },
  "typeVersion": 2.1
}

================ Node #1757 ================
{
  "id": "ad10a84f-851a-40f8-b10e-18356c4eeed6",
  "name": "Call hugginface inference api",
  "type": "n8n-nodes-base.httpRequest",
  "notes": " ",
  "onError": "continueErrorOutput",
  "position": [
    740,
    660
  ],
  "parameters": {
    "url": "https://api-inference.huggingface.co/models/black-forest-labs/FLUX.1-schnell",
    "method": "POST",
    "options": {},
    "sendBody": true,
    "sendHeaders": true,
    "authentication": "genericCredentialType",
    "bodyParameters": {
      "parameters": [
        {
          "name": "inputs",
          "value": "=Depict {{ $json['Prompt to flux'] }}\n\nStyle: {{ $json.stylePrompt }}"
        }
      ]
    },
    "genericAuthType": "httpHeaderAuth",
    "headerParameters": {
      "parameters": [
        {}
      ]
    }
  },
  "credentials": {
    "httpHeaderAuth": {
      "id": "r98SNEAnA5arilQO",
      "name": "huggingface-nathan"
    }
  },
  "notesInFlow": true,
  "typeVersion": 4.2
}

================ Node #1758 ================
{
  "id": "e740dd3c-e23e-485b-bb4c-bb0515897a08",
  "name": "Sticky Note5",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    -880,
    600
  ],
  "parameters": {
    "color": 7,
    "width": 506.8102696237577,
    "height": 337.24177957113216,
    "content": "### Watch Set Up Video \ud83d\udc47\n[![Flux Generator](https://uploads.n8n.io/devrel/fluxgenerator.png#full-width)](https://youtu.be/Rv_1jt5WvtY)\n\n"
  },
  "typeVersion": 1
}

================ Node #1759 ================
{
  "id": "71d01821-3e0d-4c08-8571-58a158817e2c",
  "name": "Sticky Note6",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    -880,
    440
  ],
  "parameters": {
    "color": 7,
    "width": 506.8102696237577,
    "height": 134.27496896630808,
    "content": "# flux image generator\nBuilt by [@maxtkacz](https://x.com/maxtkacz) as part of the [30 Day AI Sprint](https://30dayaisprint.notion.site/)\nCheck out the project's [Notion page](https://30dayaisprint.notion.site/Flux-image-generator-bc94a8d2de8447c6ab70aacf2c4179f2) for more details"
  },
  "typeVersion": 1
}

================ Node #1760 ================
{
  "id": "0cc26680-ba63-464f-ba84-68c2616f95e2",
  "name": "Route by style",
  "type": "n8n-nodes-base.switch",
  "position": [
    0,
    640
  ],
  "parameters": {
    "rules": {
      "values": [
        {
          "outputKey": "Hyper-Surreal Escape",
          "conditions": {
            "options": {
              "leftValue": "",
              "caseSensitive": true,
              "typeValidation": "strict"
            },
            "combinator": "and",
            "conditions": [
              {
                "operator": {
                  "type": "string",
                  "operation": "equals"
                },
                "leftValue": "={{ $json.Style }}",
                "rightValue": "Hyper-Surreal Escape"
              }
            ]
          },
          "renameOutput": true
        },
        {
          "outputKey": "Post-Analog Glitchscape",
          "conditions": {
            "options": {
              "leftValue": "",
              "caseSensitive": true,
              "typeValidation": "strict"
            },
            "combinator": "and",
            "conditions": [
              {
                "id": "106969fa-994c-4b1e-b693-fc0b48ce5f3d",
                "operator": {
                  "name": "filter.operator.equals",
                  "type": "string",
                  "operation": "equals"
                },
                "leftValue": "={{ $json.Style }}",
                "rightValue": "Post-Analog Glitchscape"
              }
            ]
          },
          "renameOutput": true
        },
        {
          "outputKey": "AI Dystopia",
          "conditions": {
            "options": {
              "leftValue": "",
              "caseSensitive": true,
              "typeValidation": "strict"
            },
            "combinator": "and",
            "conditions": [
              {
                "id": "24318e7d-4dc1-4369-b045-bb7d0a484def",
                "operator": {
                  "name": "filter.operator.equals",
                  "type": "string",
                  "operation": "equals"
                },
                "leftValue": "={{ $json.Style }}",
                "rightValue": "AI Dystopia"
              }
            ]
          },
          "renameOutput": true
        },
        {
          "outputKey": "Neon Fauvism",
          "conditions": {
            "options": {
              "leftValue": "",
              "caseSensitive": true,
              "typeValidation": "strict"
            },
            "combinator": "and",
            "conditions": [
              {
                "id": "a80911ff-67fc-416d-b135-0401c336d6d8",
                "operator": {
                  "name": "filter.operator.equals",
                  "type": "string",
                  "operation": "equals"
                },
                "leftValue": "={{ $json.Style }}",
                "rightValue": "Neon Fauvism"
              }
            ]
          },
          "renameOutput": true
        },
        {
          "outputKey": "Vivid Pop Explosion",
          "conditions": {
            "options": {
              "leftValue": "",
              "caseSensitive": true,
              "typeValidation": "strict"
            },
            "combinator": "and",
            "conditions": [
              {
                "id": "7fdeec28-194e-415e-8da2-8bac90e4c011",
                "operator": {
                  "name": "filter.operator.equals",
                  "type": "string",
                  "operation": "equals"
                },
                "leftValue": "={{ $json.Style }}",
                "rightValue": "Vivid Pop Explosion"
              }
            ]
          },
          "renameOutput": true
        }
      ]
    },
    "options": {
      "fallbackOutput": "extra"
    }
  },
  "typeVersion": 3.1
}

================ Node #1761 ================
{
  "id": "c6e454af-70a1-4c65-8450-8159f7fc738b",
  "name": "If",
  "type": "n8n-nodes-base.if",
  "position": [
    160,
    560
  ],
  "parameters": {
    "options": {},
    "conditions": {
      "options": {
        "version": 1,
        "leftValue": "",
        "caseSensitive": true,
        "typeValidation": "strict"
      },
      "combinator": "and",
      "conditions": [
        {
          "id": "7ea831a4-0e20-4725-a6f5-3dc2f41f1cf4",
          "operator": {
            "type": "object",
            "operation": "exists",
            "singleValue": true
          },
          "leftValue": "={{ $json.leadData }}",
          "rightValue": ""
        },
        {
          "id": "ccb46339-4e43-42e6-aa45-d5a0cbd62214",
          "operator": {
            "name": "filter.operator.equals",
            "type": "string",
            "operation": "equals"
          },
          "leftValue": "",
          "rightValue": ""
        }
      ]
    }
  },
  "typeVersion": 2
}

================ Node #1762 ================
{
  "id": "2221736f-ef99-4ac8-8a81-51af6d4e7dcd",
  "name": "Edit Fields1",
  "type": "n8n-nodes-base.set",
  "position": [
    440,
    960
  ],
  "parameters": {
    "options": {},
    "assignments": {
      "assignments": [
        {
          "id": "19a16867-b574-4b99-82f1-a86752b7fe9f",
          "name": "chatInput",
          "type": "string",
          "value": "=\"Hello, just so you can get to know me, with no intention of a response, please save this information in your memory. My name is {{ $json.leadData.name }}. I am {{ $json.leadData.age }} years old and currently live in {{ $json.leadData.city }}, {{ $json.leadData.state }}. My profession is {{ $json.leadData.profession }}, and my education level is {{ $json.leadData.educationLevel }}.\nIf I\u2019m part of an adhesion group and have an entity, it would be {{ $json.leadData.entity }}.\n\nI am using a {{ $json.leadData.deviceType }} device to access this through the {{ $json.leadData.channel }} channel. At the moment, I am looking for a health insurance plan of type {{ $json.leadData.quotationType }}.\""
        },
        {
          "id": "0df8d578-8332-4cde-9044-489de16ab390",
          "name": "session_id",
          "type": "string",
          "value": "={{ $json.session_id }}"
        }
      ]
    }
  },
  "typeVersion": 3.4
}

================ Node #1763 ================
{
  "id": "6aa1b3a4-0e6a-4312-9d9f-f67c4bf8f443",
  "name": "Edit Fields2",
  "type": "n8n-nodes-base.set",
  "position": [
    920,
    960
  ],
  "parameters": {
    "options": {},
    "assignments": {
      "assignments": [
        {
          "id": "19a16867-b574-4b99-82f1-a86752b7fe9f",
          "name": "chatInput",
          "type": "string",
          "value": "={{ $('Chat Trigger').item.json.chatInput}}"
        },
        {
          "id": "0df8d578-8332-4cde-9044-489de16ab390",
          "name": "session_id",
          "type": "string",
          "value": "={{ $('Chat Trigger').item.json.session_id }}"
        }
      ]
    }
  },
  "typeVersion": 3.4
}

================ Node #1764 ================
{
  "id": "6afe6158-7a8b-4a83-a778-6fd28e2a11af",
  "name": "OpenAI",
  "type": "@n8n/n8n-nodes-langchain.openAi",
  "position": [
    600,
    960
  ],
  "parameters": {
    "options": {},
    "resource": "assistant",
    "assistantId": {
      "__rl": true,
      "mode": "list",
      "value": "asst_numdCoMZPQ6GwfiJg5drg9hr",
      "cachedResultName": "Chat IA - Testes - Dezembro - APIS"
    }
  },
  "credentials": {
    "openAiApi": {
      "id": "FW1FWHcMcwemQ1kZ",
      "name": "OpenAi account"
    }
  },
  "typeVersion": 1.4
}

================ Node #1765 ================
{
  "id": "4b961f1d-7da2-4a0b-98e3-7ec35ee14335",
  "name": "Chat Trigger",
  "type": "@n8n/n8n-nodes-langchain.chatTrigger",
  "position": [
    -20,
    560
  ],
  "webhookId": "1f83e8ac-d465-454a-8327-cef7f0149cb1",
  "parameters": {
    "public": true,
    "options": {},
    "initialMessages": "Ol\u00e1 \ud83d\udc4b\nSou Jovelino, o servi\u00e7o de IA do Joov, me mande sua pergunta e responderei em seguida! :)"
  },
  "typeVersion": 1
}

================ Node #1766 ================
{
  "id": "dccdb07f-97db-4a5a-9b09-02a5de65246e",
  "name": "Postgres Chat Memory",
  "type": "@n8n/n8n-nodes-langchain.memoryPostgresChat",
  "position": [
    640,
    720
  ],
  "parameters": {
    "tableName": "aimessages",
    "sessionKey": "={{ $('Chat Trigger').item.json.session_id }}{{ $json.sessionId }}",
    "sessionIdType": "customKey",
    "contextWindowLength": 30
  },
  "credentials": {
    "postgres": {
      "id": "M1cYa0bOSX1nfczy",
      "name": "Postgres account"
    }
  },
  "typeVersion": 1.3
}

================ Node #1767 ================
{
  "id": "553dd27b-ab06-4605-99e0-8f15735cfff3",
  "name": "Postgres Chat Memory1",
  "type": "@n8n/n8n-nodes-langchain.memoryPostgresChat",
  "position": [
    760,
    1160
  ],
  "parameters": {
    "tableName": "aimessages",
    "sessionKey": "={{ $('Chat Trigger').item.json.session_id }}{{ $json.sessionId }}",
    "sessionIdType": "customKey",
    "contextWindowLength": 1
  },
  "credentials": {
    "postgres": {
      "id": "M1cYa0bOSX1nfczy",
      "name": "Postgres account"
    }
  },
  "typeVersion": 1.3
}

================ Node #1768 ================
{
  "id": "0103fb97-c691-4bd3-b26d-85aaa9774594",
  "name": "Products in Daatabase",
  "type": "n8n-nodes-base.mySqlTool",
  "position": [
    1460,
    600
  ],
  "parameters": {
    "query": "SELECT * \nFROM Products p \nWHERE \n cityQuery = '{{ $fromAI(\"cityQuery\") }}' AND \n state = '{{ $fromAI(\"state\") }}' AND \n modality = 'PME' AND \n removed = 0 AND \n ({{ $fromAI(\"holderCount\") || 1 }} + {{ $fromAI(\"dependentsCount\") || 0 }}) BETWEEN p.minLifeAmount AND p.maxLifeAmount AND\n (CASE\n WHEN {{ $fromAI(\"holderAge\") }} BETWEEN 0 AND 18 THEN priceAtAge0To18\n WHEN {{ $fromAI(\"holderAge\") }} BETWEEN 19 AND 23 THEN priceAtAge19To23\n WHEN {{ $fromAI(\"holderAge\") }} BETWEEN 24 AND 28 THEN priceAtAge24To28\n WHEN {{ $fromAI(\"holderAge\") }} BETWEEN 29 AND 33 THEN priceAtAge29To33\n WHEN {{ $fromAI(\"holderAge\") }} BETWEEN 34 AND 38 THEN priceAtAge34To38\n WHEN {{ $fromAI(\"holderAge\") }} BETWEEN 39 AND 43 THEN priceAtAge39To43\n WHEN {{ $fromAI(\"holderAge\") }} BETWEEN 44 AND 48 THEN priceAtAge44To48\n WHEN {{ $fromAI(\"holderAge\") }} BETWEEN 49 AND 53 THEN priceAtAge49To53\n WHEN {{ $fromAI(\"holderAge\") }} BETWEEN 54 AND 58 THEN priceAtAge54To58\n ELSE priceAtAge59To199\n END) IS NOT NULL\nORDER BY \n (CASE\n WHEN {{ $fromAI(\"holderAge\") }} BETWEEN 0 AND 18 THEN priceAtAge0To18\n WHEN {{ $fromAI(\"holderAge\") }} BETWEEN 19 AND 23 THEN priceAtAge19To23\n WHEN {{ $fromAI(\"holderAge\") }} BETWEEN 24 AND 28 THEN priceAtAge24To28\n WHEN {{ $fromAI(\"holderAge\") }} BETWEEN 29 AND 33 THEN priceAtAge29To33\n WHEN {{ $fromAI(\"holderAge\") }} BETWEEN 34 AND 38 THEN priceAtAge34To38\n WHEN {{ $fromAI(\"holderAge\") }} BETWEEN 39 AND 43 THEN priceAtAge39To43\n WHEN {{ $fromAI(\"holderAge\") }} BETWEEN 44 AND 48 THEN priceAtAge44To48\n WHEN {{ $fromAI(\"holderAge\") }} BETWEEN 49 AND 53 THEN priceAtAge49To53\n WHEN {{ $fromAI(\"holderAge\") }} BETWEEN 54 AND 58 THEN priceAtAge54To58\n ELSE priceAtAge59To199\n END) ASC, \n createdAt DESC\nLIMIT 3;\n",
    "options": {
      "detailedOutput": true
    },
    "operation": "executeQuery",
    "descriptionType": "manual",
    "toolDescription": "// Search for the X product bla bla bla"
  },
  "credentials": {
    "mySql": {
      "id": "lkGJt8aNB0azyaGy",
      "name": "MySQL account 2"
    }
  },
  "typeVersion": 2.4
}

================ Node #1769 ================
{
  "id": "0cdfd89f-eb9e-4b6c-90d1-1cf8d6ed96bb",
  "name": "Knowledge Base",
  "type": "@n8n/n8n-nodes-langchain.toolHttpRequest",
  "position": [
    1340,
    600
  ],
  "parameters": {
    "url": "https://quotation.joov.com.br/widget/info?modalidade={modalidade}&estado=SP&cidade={city}&operadora={operadora}",
    "toolDescription": "Here you will find the knowlegde base of my shop and bla bla bla Use this when they ask for price, whatever i want."
  },
  "typeVersion": 1.1
}

================ Node #1770 ================
{
  "id": "393f792a-4eff-4b33-aac0-025fc622a4b3",
  "name": "External API",
  "type": "@n8n/n8n-nodes-langchain.toolHttpRequest",
  "position": [
    1200,
    600
  ],
  "parameters": {
    "url": "https://integracao-sed-alb-323570099.us-east-1.elb.amazonaws.com/findByNameAndBirthDate",
    "method": "POST",
    "jsonBody": "={\n \"name\": \"{{json.name}}\",\n \"birthdate\": \"{{json.birthdate }}\"\n}",
    "sendBody": true,
    "specifyBody": "json",
    "toolDescription": "Pegue o nome completo em camel case, exemplo: Fernanda Melo, e a data de nacimento nesse formato: 1990-03-28"
  },
  "typeVersion": 1.1
}

================ Node #1771 ================
{
  "id": "7ce7a5e7-6238-4479-a26f-bdcde1784188",
  "name": "Sticky Note",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    1160,
    414
  ],
  "parameters": {
    "color": 5,
    "width": 436.73182569600795,
    "height": 367.7413881276459,
    "content": "TOOLS"
  },
  "typeVersion": 1
}

================ Node #1772 ================
{
  "id": "df6737ca-c588-48fc-9761-2a5307841298",
  "name": "OpenAI2",
  "type": "@n8n/n8n-nodes-langchain.openAi",
  "position": [
    460,
    460
  ],
  "parameters": {
    "text": "={{ $json.chatInput }}",
    "prompt": "define",
    "options": {},
    "resource": "assistant",
    "assistantId": {
      "__rl": true,
      "mode": "list",
      "value": "asst_x2qfc7EuoPv7XGOL84ClEZ3L",
      "cachedResultName": "PINE"
    }
  },
  "credentials": {
    "openAiApi": {
      "id": "FW1FWHcMcwemQ1kZ",
      "name": "OpenAi account"
    }
  },
  "typeVersion": 1.4
}

================ Node #1773 ================
{
  "id": "f41906c3-ee4c-4333-bfd5-426f82ba4bd9",
  "name": "CONFIG",
  "type": "n8n-nodes-base.set",
  "position": [
    660,
    60
  ],
  "parameters": {
    "options": {},
    "assignments": {
      "assignments": [
        {
          "id": "b48986ec-f58d-4a7f-afba-677edcb28d31",
          "name": "project_path",
          "type": "string",
          "value": "./.n8n/test_docs"
        },
        {
          "id": "cf632419-f839-4045-922c-03784bb3ae07",
          "name": "instance_url",
          "type": "string",
          "value": "={{$env[\"N8N_PROTOCOL\"]}}://{{$env[\"N8N_HOST\"]}}"
        },
        {
          "id": "7a7c70a6-1853-4ca7-b5b1-e36bb0e190d0",
          "name": "HTML_headers",
          "type": "string",
          "value": "= <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\" />\n <meta name=\"viewport\" content=\"width=device-width,initial-scale=1\" />\n <meta charset=\"UTF-8\" />\n <link rel=\"stylesheet\" href=\"//cdn.jsdelivr.net/npm/docsify@4/themes/vue.css\" />\n <script src=\"https://cdn.jsdelivr.net/npm/mermaid/dist/mermaid.min.js\"></script>"
        },
        {
          "id": "1e785afe-f05f-4e51-a164-f341da81ccac",
          "name": "HTML_styles_editor",
          "type": "string",
          "value": "= <style>\n body {\n margin: 0;\n padding: 0;\n overflow: hidden;\n }\n \n .container {\n display: flex;\n flex-direction: column;\n height: 100vh;\n margin: 0;\n }\n\n .button-container {\n display: flex;\n justify-content: center;\n gap: 10px;\n padding: 10px;\n background: #f8f8f8;\n border-bottom: 1px solid #eee;\n width: 50%;\n }\n\n .button {\n padding: 8px 16px;\n border: none;\n border-radius: 4px;\n cursor: pointer;\n font-size: 14px;\n }\n\n .save-button {\n background: #42b983;\n color: white;\n }\n\n .cancel-button {\n background: #666;\n color: white;\n }\n\n .editor-preview-container {\n display: flex;\n flex: 1;\n overflow: hidden;\n }\n \n #editor {\n width: 50%;\n height: 100%;\n resize: none;\n padding: 20px;\n box-sizing: border-box;\n font-family: monospace;\n border: none;\n border-right: 1px solid #eee;\n }\n \n .preview-container {\n width: 50%;\n height: 100%;\n overflow-y: auto;\n }\n\n /* Remove width from main */\n main {\n width: auto !important;\n }\n\n /* Fix code block wrapping */\n .markdown-section pre > code {\n white-space: pre-wrap !important;\n }\n </style>"
        },
        {
          "id": "37e22865-7b6b-438d-83a0-dc680d4775cc",
          "name": "HTML_docsify_include",
          "type": "string",
          "value": "= <script src=\"//cdn.jsdelivr.net/npm/docsify@4\"></script>"
        }
      ]
    },
    "includeOtherFields": true
  },
  "typeVersion": 3.4
}

================ Node #1774 ================
{
  "id": "75cdf7fc-3dfa-49c1-bdbf-01d8be08aaa4",
  "name": "Convert to File",
  "type": "n8n-nodes-base.convertToFile",
  "position": [
    4020,
    1600
  ],
  "parameters": {
    "options": {},
    "operation": "toText",
    "sourceProperty": "workflowdata"
  },
  "typeVersion": 1.1
}

================ Node #1775 ================
{
  "id": "3868011e-8374-496a-b3f5-4cbf7bde4e56",
  "name": "HasFile?",
  "type": "n8n-nodes-base.if",
  "position": [
    2400,
    880
  ],
  "parameters": {
    "options": {},
    "conditions": {
      "options": {
        "version": 2,
        "leftValue": "",
        "caseSensitive": true,
        "typeValidation": "strict"
      },
      "combinator": "and",
      "conditions": [
        {
          "id": "2d9feb22-49d1-4354-9b0b-b82da2b20678",
          "operator": {
            "type": "number",
            "operation": "gt"
          },
          "leftValue": "={{ Object.keys($json).length }}",
          "rightValue": 0
        }
      ]
    }
  },
  "typeVersion": 2.2
}

================ Node #1776 ================
{
  "id": "0bf2317b-2534-4022-9a16-395d4b44680c",
  "name": "Extract from File",
  "type": "n8n-nodes-base.extractFromFile",
  "position": [
    2660,
    860
  ],
  "parameters": {
    "options": {},
    "operation": "text",
    "destinationKey": "workflowdata"
  },
  "typeVersion": 1
}

================ Node #1777 ================
{
  "id": "4b44a7f3-09bf-46a8-9520-247993af654b",
  "name": "Main Page",
  "type": "n8n-nodes-base.html",
  "position": [
    4660,
    -100
  ],
  "parameters": {
    "html": "<!DOCTYPE html>\n<html>\n <head>\n{{ $('CONFIG').first().json.HTML_headers }}\n <body>\n <div data-app id=\"main\">Please wait...</div>\n <script>\n \n mermaid.initialize({\n startOnLoad: false,\n });\n let svgCounter = 0;\n\n window.$docsify = {\n el: '#main',\n auto2top: true,\n loadSidebar: 'summary.md',\n basePath: '{{ $json.webhookUrl.split($json.webhookUrl.extractDomain())[1] }}/',\n name: 'All Workflows',\n markdown: {\n renderer: {\n code(code, lang) {\n if (lang === \"mermaid\") {\n const svgName = `mermaid-svg-${svgCounter++}`;\n const MERMAID_CONTAINER_ID = `${svgName}-container`;\n mermaid.render(svgName, code).then(({ svg }) => {\n const containerElement = document.querySelector(\n `#${MERMAID_CONTAINER_ID}`\n );\n if (containerElement) {\n containerElement.innerHTML = svg;\n } else {\n console.error(`Error: #${MERMAID_CONTAINER_ID} not found`);\n }\n });\n return `<div class=\"mermaid\" id=\"${MERMAID_CONTAINER_ID}\"></div>`;\n }\n return this.origin.code.apply(this, arguments);\n },\n },\n }, \n plugins: [\n function(hook, vm) {\n hook.ready(function() {\n // Check if URL doesn't end with slash but also isn't a file path\n if (!window.location.pathname.endsWith('/') && !window.location.pathname.includes('.')) {\n // Use history.replaceState to avoid adding to browser history\n const newUrl = window.location.pathname + '/' + window.location.hash;\n window.history.replaceState(null, null, newUrl);\n }\n });\n }\n ], \n };\n </script>\n{{ $('CONFIG').first().json.HTML_docsify_include }}\n </body>\n</html>"
  },
  "typeVersion": 1.2
}

================ Node #1778 ================
{
  "id": "28c29cec-7efd-4f05-bf53-ac08cc3834a1",
  "name": "Instance overview",
  "type": "n8n-nodes-base.html",
  "position": [
    4660,
    160
  ],
  "parameters": {
    "html": "# Your n8n instance workflows:\n\n| Workflow | Status | Docs | Created | Updated | Nodes | Triggers |\n|----------|:------:|------|---------|---------|-------|----------|\n{{ $jmespath($input.all(),'[].json.content').join('\\n') }}"
  },
  "executeOnce": true,
  "typeVersion": 1.2
}

================ Node #1779 ================
{
  "id": "3e8eb52e-8d35-4aa3-a485-6674d67720dc",
  "name": "Sort-workflows",
  "type": "n8n-nodes-base.sort",
  "position": [
    2080,
    160
  ],
  "parameters": {
    "options": {},
    "sortFieldsUi": {
      "sortField": [
        {
          "order": "descending",
          "fieldName": "updatedAt"
        }
      ]
    }
  },
  "typeVersion": 1
}

================ Node #1780 ================
{
  "id": "2178e1cf-90b8-4779-9b5c-3d6180823c95",
  "name": "doc action",
  "type": "n8n-nodes-base.switch",
  "position": [
    1740,
    1080
  ],
  "parameters": {
    "rules": {
      "values": [
        {
          "outputKey": "view",
          "conditions": {
            "options": {
              "version": 2,
              "leftValue": "",
              "caseSensitive": true,
              "typeValidation": "strict"
            },
            "combinator": "and",
            "conditions": [
              {
                "id": "ee386c7d-1abe-4864-bb3a-a19d3816c906",
                "operator": {
                  "name": "filter.operator.equals",
                  "type": "string",
                  "operation": "equals"
                },
                "leftValue": "={{ $json.query.action }}",
                "rightValue": "view"
              }
            ]
          },
          "renameOutput": true
        },
        {
          "outputKey": "edit",
          "conditions": {
            "options": {
              "version": 2,
              "leftValue": "",
              "caseSensitive": true,
              "typeValidation": "strict"
            },
            "combinator": "and",
            "conditions": [
              {
                "id": "aa1a33ee-ac38-4ea4-9a4c-d355e7de1312",
                "operator": {
                  "name": "filter.operator.equals",
                  "type": "string",
                  "operation": "equals"
                },
                "leftValue": "={{ $json.query.action }}",
                "rightValue": "edit"
              }
            ]
          },
          "renameOutput": true
        },
        {
          "outputKey": "recreate",
          "conditions": {
            "options": {
              "version": 2,
              "leftValue": "",
              "caseSensitive": true,
              "typeValidation": "strict"
            },
            "combinator": "and",
            "conditions": [
              {
                "id": "676c36e1-4c88-4314-9317-abc877ff3d17",
                "operator": {
                  "name": "filter.operator.equals",
                  "type": "string",
                  "operation": "equals"
                },
                "leftValue": "={{ $json.query.action }}",
                "rightValue": "recreate"
              }
            ]
          },
          "renameOutput": true
        },
        {
          "outputKey": "save",
          "conditions": {
            "options": {
              "version": 2,
              "leftValue": "",
              "caseSensitive": true,
              "typeValidation": "strict"
            },
            "combinator": "and",
            "conditions": [
              {
                "id": "164314cf-7d99-4716-9949-b9196ce47959",
                "operator": {
                  "name": "filter.operator.equals",
                  "type": "string",
                  "operation": "equals"
                },
                "leftValue": "={{ $json.query.action }}",
                "rightValue": "save"
              }
            ]
          },
          "renameOutput": true
        }
      ]
    },
    "options": {
      "fallbackOutput": "extra"
    }
  },
  "typeVersion": 3.2
}

================ Node #1781 ================
{
  "id": "7f4aab9b-b7e8-4920-98e8-af8f504a1333",
  "name": "Empty Set",
  "type": "n8n-nodes-base.set",
  "position": [
    2000,
    960
  ],
  "parameters": {
    "options": {}
  },
  "typeVersion": 3.4
}

================ Node #1782 ================
{
  "id": "1f35bc3e-29d7-47a2-a1c7-cf6052d99993",
  "name": "Load Doc File",
  "type": "n8n-nodes-base.readWriteFile",
  "position": [
    1900,
    860
  ],
  "parameters": {
    "options": {},
    "fileSelector": "={{ $('CONFIG').first().json.project_path }}/{{ $json.params.file }}"
  },
  "typeVersion": 1,
  "alwaysOutputData": true
}

================ Node #1783 ================
{
  "id": "c0805f50-8f8c-49ba-b0c7-6768bf89798c",
  "name": "Respond with markdown",
  "type": "n8n-nodes-base.respondToWebhook",
  "position": [
    4920,
    1040
  ],
  "parameters": {
    "options": {
      "responseCode": 200,
      "responseHeaders": {
        "entries": [
          {
            "name": "Content-Type",
            "value": "text/markdown"
          }
        ]
      }
    },
    "respondWith": "text",
    "responseBody": "={{ $json.html }}"
  },
  "typeVersion": 1.1
}

================ Node #1784 ================
{
  "id": "9c7a18b9-a081-4162-94f4-e125d666cbcc",
  "name": "Respond with HTML",
  "type": "n8n-nodes-base.respondToWebhook",
  "position": [
    4920,
    860
  ],
  "parameters": {
    "options": {
      "responseCode": 200,
      "responseHeaders": {
        "entries": [
          {
            "name": "Content-Type",
            "value": "text/html"
          }
        ]
      }
    },
    "respondWith": "text",
    "responseBody": "={{ $json.html }}"
  },
  "typeVersion": 1.1
}

================ Node #1785 ================
{
  "id": "50944148-eb7c-4c28-99c5-478ddb2596f2",
  "name": "Save New Doc File",
  "type": "n8n-nodes-base.readWriteFile",
  "position": [
    4180,
    1600
  ],
  "parameters": {
    "options": {},
    "fileName": "={{ $('CONFIG').first().json.project_path }}/{{ $('CONFIG').first().json.params.file }}",
    "operation": "write"
  },
  "typeVersion": 1,
  "alwaysOutputData": true
}

================ Node #1786 ================
{
  "id": "6d7e0dcf-d12b-4428-9c5e-ef7fb2c6be28",
  "name": "Blank Doc File",
  "type": "n8n-nodes-base.set",
  "position": [
    4000,
    1080
  ],
  "parameters": {
    "options": {},
    "assignments": {
      "assignments": [
        {
          "id": "b168d9b1-1a13-4915-b59b-8a17258fd9cc",
          "name": "workflowdata",
          "type": "string",
          "value": "=# {{ $json.name }}\n\n## Workflow Description\n!> Please write what is this workflow doing\n\n## Workflow schematic\n\n```mermaid\n{{ $json.mermaidChart }}\n```\n\n## Any further information\n\n> You can also add tables like this:\n\n| Parameter | Value |\n|-----------|-------|\n| Created | {{ $json.createdAt }} |\n| Last updated | {{ $json.updatedAt }} |\n| Author | {{ $json.shared[0].project.name }} |\n\n"
        }
      ]
    },
    "includeOtherFields": true
  },
  "typeVersion": 3.4
}

================ Node #1787 ================
{
  "id": "778a97eb-f7a2-4537-81fc-979dc6c674a2",
  "name": "Fetch Single Workflow1",
  "type": "n8n-nodes-base.n8n",
  "position": [
    2820,
    1200
  ],
  "parameters": {
    "operation": "get",
    "workflowId": {
      "__rl": true,
      "mode": "id",
      "value": "={{ $('CONFIG').first().json.params.file.replaceAll('docs_','').split('.md')[0] }}"
    },
    "requestOptions": {}
  },
  "credentials": {
    "n8nApi": {
      "id": "eW7IdTFt4ARJbEwR",
      "name": "Ted n8n account"
    }
  },
  "typeVersion": 1
}

================ Node #1788 ================
{
  "id": "092b8c67-77f9-4d4b-aa26-8f0e3ea3ed29",
  "name": "Fill Workflow Table",
  "type": "n8n-nodes-base.set",
  "position": [
    2280,
    160
  ],
  "parameters": {
    "options": {},
    "assignments": {
      "assignments": [
        {
          "id": "3bed44f3-7fa6-4d28-8a6e-7074ca354cd6",
          "name": "content",
          "type": "string",
          "value": "=| [{{ `${$json.name.replace(/[|\\\\[\\]`_*{}()<>#+-]/g, '\\\\$&')}` }}]({{ `${$('CONFIG').first().json.instance_url}/workflow/${$json.id}` }} \"Click to open workflow in n8n\") | {{ $json.active ? '[:green_circle:](# \"Active\")' : '[:white_circle:](# \"Inactive\")' }} | <nobr>[:book:]({{ `docs_${$json.id}?action=view` }} \"View docs\") [:memo:]({{ `docs_${$json.id}.md?action=edit` }} \":ignore Edit\") [:arrows_counterclockwise:]({{ `docs_${$json.id}?action=recreate` }} \"Recreate docs\")</nobr> | <nobr>{{ `${new Date($json.createdAt).toISOString().replace('T', ' ').slice(0, 16)}` }}</nobr> | <nobr>{{ `${new Date($json.updatedAt).toISOString().replace('T', ' ').slice(0, 16)}` }}</nobr> | {{ $json.nodes.length }} | {{ $json.nodes.filter(n => n.type.includes('Trigger')).length }} |"
        }
      ]
    }
  },
  "executeOnce": false,
  "typeVersion": 3.4
}

================ Node #1789 ================
{
  "id": "18c58a09-0dfe-4cb4-ae7f-503957eabadb",
  "name": "Basic LLM Chain",
  "type": "@n8n/n8n-nodes-langchain.chainLlm",
  "onError": "continueRegularOutput",
  "position": [
    3480,
    1200
  ],
  "parameters": {
    "text": "=Here's the workflow data:\n{{Object.assign(\n Object.fromEntries(Object.entries($json).filter(([key]) => !['staticData', 'pinData'].includes(key))),\n {nodes: $json.nodes.map(node => Object.fromEntries(Object.entries(node).filter(([key]) => !['id', 'position'].includes(key))))}\n).toJsonString() }}",
    "messages": {
      "messageValues": [
        {
          "message": "=Your task is to generate simple workflow documentation for the n8n workflows. The user will provide a JSON structure. Reply \nin JSON format in 2 sections: workflow_desription and nodes_settings. Important! Each json key should be a simple markdown text without any additional comments or remarks from your end.\n\nInstruction for `workflow_desription`:\n```\n## Section header with H2\n\\n\n> subline with who created workflow and when, when it was last edited and the status (active / inactive as the green / grey round emoji). Also, when the documentation was generated. Now is: {{ $now }}.\n\\n\\n\nShould contain a description of the workflow. in a couple of paragraphs. Use direct voice without the fluff\n```\n\nInstruction for `nodes_settings`:\n```\n## Section header with H2.\n\\n\n### Node 1 name as H3 title\n - For each node make a bullet list with the main node configs. Ignore irrelevant configs. Enclose each config value in code backticks (`). Look:\n - Parameter 1 name: `Parameter 1 value`\n - Parameter 2 name: `Parameter 2 value`\n\\n\\n\n### Node 2 name as H3 title\n - For each node make a bullet list with the main node configs. Ignore irrelevant configs. Enclose each config value in code backticks (`). Look:\n - Parameter 1 name: `Parameter 1 value`\n - Parameter 2 name: `Parameter 2 value`\n\\n\\n\n```"
        }
      ]
    },
    "promptType": "define",
    "hasOutputParser": true
  },
  "typeVersion": 1.4,
  "alwaysOutputData": false
}

================ Node #1790 ================
{
  "id": "9bc58cd3-a55e-4cda-95b5-7fa8dc0e7076",
  "name": "OpenAI Chat Model",
  "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
  "position": [
    3480,
    1360
  ],
  "parameters": {
    "model": "gpt-4-turbo",
    "options": {
      "timeout": 120000,
      "temperature": 0.2
    }
  },
  "credentials": {
    "openAiApi": {
      "id": "rveqdSfp7pCRON1T",
      "name": "Ted's Tech Talks OpenAi"
    }
  },
  "typeVersion": 1
}

================ Node #1791 ================
{
  "id": "38fb6192-b8ce-4241-a9fe-aebda09aa8d5",
  "name": "Structured Output Parser",
  "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
  "position": [
    3820,
    1360
  ],
  "parameters": {
    "jsonSchemaExample": "{\n\t\"workflow_description\": \"## Workflow overview\\n\\n>some additiona info\\n\\nWorkflow desctiption\",\n\t\"nodes_settings\": \"## Nodes settings\\n\\n###Node name 1\\n\\n- Setting 1\\n- Setting 2###Node name 2\\n\\n- Setting 1\\n- Setting 2\"\n}"
  },
  "typeVersion": 1.2
}

================ Node #1792 ================
{
  "id": "29261bbb-dbbb-44df-b99d-bb084df7d846",
  "name": "Auto-fixing Output Parser",
  "type": "@n8n/n8n-nodes-langchain.outputParserAutofixing",
  "position": [
    3580,
    1360
  ],
  "parameters": {
    "options": {}
  },
  "typeVersion": 1
}

================ Node #1793 ================
{
  "id": "086a57cf-a2b4-4f32-8ca6-38546e4856c1",
  "name": "Respond with main page HTML",
  "type": "n8n-nodes-base.respondToWebhook",
  "position": [
    4920,
    -100
  ],
  "parameters": {
    "options": {
      "responseCode": 200,
      "responseHeaders": {
        "entries": [
          {
            "name": "Content-Type",
            "value": "text/html"
          }
        ]
      }
    },
    "respondWith": "text",
    "responseBody": "={{ $json.html }}"
  },
  "typeVersion": 1.1
}

================ Node #1794 ================
{
  "id": "fdbfe60b-e677-4897-ab1a-9a9f506bba27",
  "name": "Workflow Tags",
  "type": "n8n-nodes-base.html",
  "position": [
    4660,
    500
  ],
  "parameters": {
    "html": "- **Click to filter by tag:**\n{{ [...new Set($jmespath($input.all(),'[].json.tags[].name'))].map(tag => `- [${tag}](tag-${encodeURIComponent(tag)})`).join('\\n') }}"
  },
  "executeOnce": true,
  "typeVersion": 1.2
}

================ Node #1795 ================
{
  "id": "94a258ed-c07c-42d4-8d37-3395fad205b0",
  "name": "No Operation, do nothing",
  "type": "n8n-nodes-base.noOp",
  "position": [
    1740,
    1880
  ],
  "parameters": {},
  "typeVersion": 1
}

================ Node #1796 ================
{
  "id": "c35ca075-52e7-4c2f-9891-f709afe36e52",
  "name": "Merge",
  "type": "n8n-nodes-base.merge",
  "position": [
    3140,
    1100
  ],
  "parameters": {
    "mode": "combine",
    "options": {},
    "combineBy": "combineByPosition",
    "numberInputs": 3
  },
  "typeVersion": 3
}

================ Node #1797 ================
{
  "id": "55a1e32f-b20c-4b1f-9d6f-9bc4ec221fab",
  "name": "Fallback file name",
  "type": "n8n-nodes-base.html",
  "position": [
    4660,
    1900
  ],
  "parameters": {
    "html": "> File: {{ $json.params.file }}"
  },
  "typeVersion": 1.2
}

================ Node #1798 ================
{
  "id": "3eef159b-99ad-4c9a-82f4-13bf16972521",
  "name": "mkdir",
  "type": "n8n-nodes-base.executeCommand",
  "position": [
    2100,
    1060
  ],
  "parameters": {
    "command": "=mkdir -p {{$('CONFIG').first().json.project_path}}"
  },
  "typeVersion": 1
}

================ Node #1799 ================
{
  "id": "15fda233-925b-4a4d-964e-1916c0cd39a2",
  "name": "Merge1",
  "type": "n8n-nodes-base.merge",
  "position": [
    2240,
    880
  ],
  "parameters": {
    "mode": "chooseBranch"
  },
  "typeVersion": 3
}

================ Node #1800 ================
{
  "id": "3e6c9243-d5f7-4f04-8231-9994963df36d",
  "name": "Edit Page",
  "type": "n8n-nodes-base.html",
  "position": [
    4660,
    860
  ],
  "parameters": {
    "html": "<!DOCTYPE html>\n<html>\n <head>\n{{ $('CONFIG').first().json.HTML_headers }}\n{{ $('CONFIG').first().json.HTML_styles_editor }}\n </head>\n <body>\n <div class=\"container\">\n <div class=\"button-container\">\n <button class=\"button save-button\" onclick=\"saveContent()\">Save</button>\n <button class=\"button cancel-button\" onclick=\"closeWindow()\">Cancel</button>\n </div>\n <div class=\"editor-preview-container\">\n <textarea id=\"editor\">{{ $json.workflowdata }}</textarea>\n <div class=\"preview-container\">\n <div id=\"preview\"></div>\n </div>\n </div>\n </div>\n \n<script>\n const editor = document.getElementById('editor');\n let vm;\n\n mermaid.initialize({\n startOnLoad: false,\n });\n\n let svgCounter = 0;\n\n // Function to save content\n async function saveContent() {\n try {\n const response = await fetch(window.location.pathname + '?action=save', {\n method: 'POST',\n headers: {\n 'Content-Type': 'application/json',\n },\n body: JSON.stringify({\n content: editor.value\n })\n });\n \n if (response.ok) {\n alert('Successfully saved!');\n } else {\n alert('Failed to save content');\n }\n } catch (error) {\n console.error('Error saving content:', error);\n alert('Error saving content');\n }\n }\n \n // Function to close window\n function closeWindow() {\n window.close();\n }\n \n window.$docsify = {\n el: '#preview',\n loadSidebar: false,\n loadNavbar: false,\n basePath: '/',\n hideSidebar: true,\n markdown: {\n renderer: {\n code(code, lang) {\n if (lang === \"mermaid\") {\n const svgName = `mermaid-svg-${svgCounter++}`;\n const MERMAID_CONTAINER_ID = `${svgName}-container`;\n mermaid.render(svgName, code).then(({ svg }) => {\n const containerElement = document.querySelector(\n `#${MERMAID_CONTAINER_ID}`\n );\n if (containerElement) {\n containerElement.innerHTML = svg;\n } else {\n console.error(`Error: #${MERMAID_CONTAINER_ID} not found`);\n }\n });\n return `<div class=\"mermaid\" id=\"${MERMAID_CONTAINER_ID}\"></div>`;\n }\n return this.origin.code.apply(this, arguments);\n },\n },\n },\n plugins: [\n function(hook, _vm) {\n vm = _vm;\n \n hook.beforeEach(function(content) {\n return editor.value;\n });\n }\n ]\n };\n \nlet timeout;\nfunction updatePreview() {\n clearTimeout(timeout);\n timeout = setTimeout(() => {\n if (vm) {\n const markdownSection = document.querySelector('.markdown-section');\n if (markdownSection) {\n const compiler = new window.DocsifyCompiler({\n basePath: '/',\n relativePath: false,\n fallbackLanguages: [],\n nameLink: '/',\n routerMode: 'hash'\n }, vm.router);\n \n const html = compiler.compile(editor.value);\n markdownSection.innerHTML = html;\n window.Prism.highlightAll();\n\n // Re-render all mermaid diagrams\n const mermaidDivs = markdownSection.querySelectorAll('pre[data-lang=\"mermaid\"] code');\n mermaidDivs.forEach((div, index) => {\n const code = div.textContent;\n const svgName = `mermaid-svg-${svgCounter++}`;\n const MERMAID_CONTAINER_ID = `${svgName}-container`;\n \n // Replace the <pre> element with our container\n const container = document.createElement('div');\n container.className = 'mermaid';\n container.id = MERMAID_CONTAINER_ID;\n div.parentElement.replaceWith(container);\n \n // Render the diagram\n mermaid.render(svgName, code).then(({ svg }) => {\n const containerElement = document.getElementById(MERMAID_CONTAINER_ID);\n if (containerElement) {\n containerElement.innerHTML = svg;\n }\n });\n });\n }\n }\n }, 500);\n};\n \n editor.addEventListener('input', updatePreview);\n</script>\n{{ $('CONFIG').first().json.HTML_docsify_include }}\n </body>\n</html>"
  },
  "typeVersion": 1.2
}

================ Node #1801 ================
{
  "id": "71e136d5-bb5b-4eab-8cab-bfc50ea2a5a5",
  "name": "Workflow md content",
  "type": "n8n-nodes-base.html",
  "position": [
    4660,
    1040
  ],
  "parameters": {
    "html": "{{ $json.workflowdata }}"
  },
  "executeOnce": true,
  "typeVersion": 1.2
}

================ Node #1802 ================
{
  "id": "6cb6f3b8-de65-43a5-9df3-48299ba7fcce",
  "name": "Is Action Edit?1",
  "type": "n8n-nodes-base.if",
  "position": [
    3300,
    1100
  ],
  "parameters": {
    "options": {},
    "conditions": {
      "options": {
        "version": 2,
        "leftValue": "",
        "caseSensitive": true,
        "typeValidation": "strict"
      },
      "combinator": "and",
      "conditions": [
        {
          "id": "856cdb3b-a187-4db5-b77b-43ee086780ee",
          "operator": {
            "name": "filter.operator.equals",
            "type": "string",
            "operation": "equals"
          },
          "leftValue": "={{ $json.query.action }}",
          "rightValue": "edit"
        }
      ]
    }
  },
  "typeVersion": 2.2
}

================ Node #1803 ================
{
  "id": "aff9ed71-bb49-4170-9ae3-5f05f89bab05",
  "name": "Is Action Edit?2",
  "type": "n8n-nodes-base.if",
  "position": [
    4180,
    880
  ],
  "parameters": {
    "options": {},
    "conditions": {
      "options": {
        "version": 2,
        "leftValue": "",
        "caseSensitive": true,
        "typeValidation": "strict"
      },
      "combinator": "and",
      "conditions": [
        {
          "id": "e3648023-8cb7-4b82-bd35-1ba196458327",
          "operator": {
            "name": "filter.operator.equals",
            "type": "string",
            "operation": "equals"
          },
          "leftValue": "={{ $json.query.action }}",
          "rightValue": "edit"
        }
      ]
    }
  },
  "typeVersion": 2.2
}

================ Node #1804 ================
{
  "id": "7b3d31a9-ee01-4bce-bc5b-78161536999d",
  "name": "Generate Mermaid Chart",
  "type": "n8n-nodes-base.code",
  "position": [
    3000,
    1260
  ],
  "parameters": {
    "jsCode": "const workflow = $input.first().json;\n\n// Extract nodes from the workflow\nconst nodes = workflow.nodes || [];\n\n// Node types to exclude\nconst excludedNodeTypes = ['n8n-nodes-base.stickyNote'];\n\n// Define shapes and their corresponding brackets\n// https://mermaid.js.org/syntax/flowchart.html\nconst shapes = {\n 'rect': ['[', ']'],\n 'rhombus': ['{', '}'],\n 'circle': ['((', '))'],\n 'hexagon': ['{{', '}}'],\n 'subroutine': ['[[', ']]'],\n 'parallelogram': ['[\\/', '\\/]'],\n 'wait': ['(', ')']\n // Add more shapes here as needed\n};\n\n// Define special shapes for specific node types\nconst specialShapes = {\n 'n8n-nodes-base.if': 'rhombus',\n 'n8n-nodes-base.switch': 'rhombus',\n 'n8n-nodes-base.code': 'subroutine',\n 'n8n-nodes-base.executeWorkflow': 'subroutine',\n 'n8n-nodes-base.httpRequest':'parallelogram',\n 'n8n-nodes-base.wait':'wait'\n // List more special node types\n};\n\n// Function to get the shape for a node type\nfunction getNodeShape(nodeType) {\n return specialShapes[nodeType] || 'rect';\n}\n\n// Create a map of node names to their \"EL<N>\" identifiers, disabled status, and shape\nconst nodeMap = {};\nlet nodeCounter = 1;\nnodes.forEach((node) => {\n if (!excludedNodeTypes.includes(node.type)) {\n const shape = getNodeShape(node.type);\n nodeMap[node.name] = {\n id: `EL${nodeCounter}`,\n disabled: node.disabled || false,\n shape: shape,\n brackets: shapes[shape] || shapes['rect'] // Default to rect if shape not found\n };\n nodeCounter++;\n }\n});\n\n// Function to convert special characters to HTML entities\nfunction convertToHTMLEntities(str) {\n return str.replaceAll('\"',\"'\").replace(/[^\\w\\s-]/g, function(char) {\n return '&#' + char.charCodeAt(0) + ';';\n });\n}\n\n// Function to format node text (with strike-through if disabled)\nfunction formatNodeText(nodeName, isDisabled) {\n const escapedName = convertToHTMLEntities(nodeName);\n return isDisabled ? `<s>${escapedName}</s>` : escapedName;\n}\n\n// Generate connections and isolated nodes\nconst connections = [];\nconst isolatedNodes = new Set(Object.keys(nodeMap));\n\nif (workflow.connections) {\n Object.entries(workflow.connections).forEach(([sourceName, targetConnections]) => {\n Object.entries(targetConnections).forEach(([connectionType, targets]) => {\n targets.forEach(targetArray => {\n targetArray.forEach(target => {\n const sourceNode = nodeMap[sourceName];\n const targetNode = nodeMap[target.node];\n if (sourceNode && targetNode) {\n let connectionLine = ` ${sourceNode.id}${sourceNode.brackets[0]}${formatNodeText(sourceName, sourceNode.disabled)}${sourceNode.brackets[1]}`;\n if (connectionType === 'main') {\n connectionLine += ` -->`;\n } else {\n connectionLine += ` -.- |${connectionType}|`;\n }\n connectionLine += ` ${targetNode.id}${targetNode.brackets[0]}${formatNodeText(target.node, targetNode.disabled)}${targetNode.brackets[1]}`;\n connections.push(connectionLine);\n isolatedNodes.delete(sourceName);\n isolatedNodes.delete(target.node);\n }\n });\n });\n });\n });\n}\n\n// Add isolated nodes to the connections array\nisolatedNodes.forEach(nodeName => {\n const node = nodeMap[nodeName];\n connections.push(` ${node.id}${node.brackets[0]}${formatNodeText(nodeName, node.disabled)}${node.brackets[1]}`);\n});\n\n// Generate the Mermaid flowchart string\nconst mermaidChart = `---\nconfig:\n look: neo\n theme: default\n---\nflowchart LR\n${connections.join('\\n')}`;\n\n// Output the result\nreturn {\n json: {\n mermaidChart: mermaidChart\n }\n};"
  },
  "typeVersion": 2
}

================ Node #1805 ================
{
  "id": "77a35cd5-cb8f-4ac5-a699-dff5e65cda09",
  "name": "Merge2",
  "type": "n8n-nodes-base.merge",
  "position": [
    3840,
    1140
  ],
  "parameters": {
    "mode": "combine",
    "options": {},
    "combineBy": "combineByPosition"
  },
  "typeVersion": 3
}

================ Node #1806 ================
{
  "id": "f8119590-e9d7-4513-9da4-fa911165baff",
  "name": "Generated Doc",
  "type": "n8n-nodes-base.set",
  "position": [
    4000,
    1240
  ],
  "parameters": {
    "options": {},
    "assignments": {
      "assignments": [
        {
          "id": "7693348d-5129-4a07-809d-b0619b9fc44b",
          "name": "workflowdata",
          "type": "string",
          "value": "=# {{ $json.name }}\n\n{{ $json?.output?.workflow_description || \"## <SORRY, COULD NOT GENERATE WORKFLOW DESCRIPTION>\" }}\n\n## Workflow schematic\n\n```mermaid\n{{ $json.mermaidChart }}\n```\n\n{{ $json?.output?.nodes_settings || \"## <SORRY, COULD NOT GENERATE DOCS FOR NODE SETTING>\" }}"
        }
      ]
    }
  },
  "typeVersion": 3.4
}

================ Node #1807 ================
{
  "id": "92565206-6cf2-4243-9143-4f6def4b524d",
  "name": "Passthrough",
  "type": "n8n-nodes-base.noOp",
  "position": [
    2100,
    1240
  ],
  "parameters": {},
  "typeVersion": 1
}

================ Node #1808 ================
{
  "id": "73081fc3-9554-4a12-b985-da02b356616f",
  "name": "Merge3",
  "type": "n8n-nodes-base.merge",
  "position": [
    3140,
    880
  ],
  "parameters": {
    "mode": "combine",
    "options": {},
    "combineBy": "combineByPosition"
  },
  "typeVersion": 3
}

================ Node #1809 ================
{
  "id": "f50e72f8-9027-4ca7-9df7-700e828f48eb",
  "name": "Merge4",
  "type": "n8n-nodes-base.merge",
  "position": [
    960,
    -100
  ],
  "parameters": {
    "mode": "combine",
    "options": {},
    "combineBy": "combineByPosition"
  },
  "typeVersion": 3
}

================ Node #1810 ================
{
  "id": "306820ac-7c87-45c2-b76f-55d772ac7300",
  "name": "Merge5",
  "type": "n8n-nodes-base.merge",
  "position": [
    960,
    240
  ],
  "parameters": {
    "mode": "combine",
    "options": {},
    "combineBy": "combineByPosition"
  },
  "typeVersion": 3
}

================ Node #1811 ================
{
  "id": "96fd7265-7920-453f-8309-bdbd10880d03",
  "name": "Edit Fields",
  "type": "n8n-nodes-base.set",
  "position": [
    2100,
    1600
  ],
  "parameters": {
    "options": {},
    "assignments": {
      "assignments": [
        {
          "id": "8bc55c5b-e09a-459b-bbb6-ed5f70d4f353",
          "name": "workflowdata",
          "type": "string",
          "value": "={{ $json.body.content }}"
        }
      ]
    },
    "includeOtherFields": true
  },
  "typeVersion": 3.4
}

================ Node #1812 ================
{
  "id": "2fffb547-1c11-4663-aed5-29b9557e8738",
  "name": "Is Action Save?",
  "type": "n8n-nodes-base.if",
  "position": [
    4540,
    1600
  ],
  "parameters": {
    "options": {},
    "conditions": {
      "options": {
        "version": 2,
        "leftValue": "",
        "caseSensitive": true,
        "typeValidation": "strict"
      },
      "combinator": "and",
      "conditions": [
        {
          "id": "e3648023-8cb7-4b82-bd35-1ba196458327",
          "operator": {
            "name": "filter.operator.equals",
            "type": "string",
            "operation": "equals"
          },
          "leftValue": "={{ $json?.query?.action }}",
          "rightValue": "save"
        },
        {
          "id": "a44c9cc5-5717-4c34-978b-e644219a9cc1",
          "operator": {
            "type": "string",
            "operation": "exists",
            "singleValue": true
          },
          "leftValue": "={{ $json?.query?.action }}",
          "rightValue": ""
        }
      ]
    }
  },
  "typeVersion": 2.2
}

================ Node #1813 ================
{
  "id": "15825037-a8e2-4fbc-b529-2bf89810a116",
  "name": "Merge6",
  "type": "n8n-nodes-base.merge",
  "position": [
    4360,
    1700
  ],
  "parameters": {
    "mode": "chooseBranch",
    "useDataOfInput": 2
  },
  "typeVersion": 3
}

================ Node #1814 ================
{
  "id": "b47f18a4-9b59-4278-890d-b6f6c596c554",
  "name": "Respond OK on Save",
  "type": "n8n-nodes-base.respondToWebhook",
  "position": [
    4920,
    1580
  ],
  "parameters": {
    "options": {
      "responseCode": 200
    },
    "respondWith": "noData"
  },
  "typeVersion": 1.1
}

================ Node #1815 ================
{
  "id": "273dfd58-abef-49b7-8f12-5abc3d3515a6",
  "name": "single workflow",
  "type": "n8n-nodes-base.webhook",
  "position": [
    240,
    240
  ],
  "webhookId": "135bc21f-c7d0-4afe-be73-f984d444b43b",
  "parameters": {
    "path": "/:file",
    "options": {},
    "responseMode": "responseNode",
    "multipleMethods": true
  },
  "typeVersion": 2
}

================ Node #1816 ================
{
  "id": "a7d7ee50-1420-475b-9028-0c80e1ae2241",
  "name": "Sticky Note",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    140,
    -242.54375384615383
  ],
  "parameters": {
    "width": 296.5956923076922,
    "height": 277.9529846153844,
    "content": "## Main Docsify webhook\nIn response, n8n serves the main html page with the [Docsify JS library](https://docsify.js.org/)"
  },
  "typeVersion": 1
}

================ Node #1817 ================
{
  "id": "b7c4b82a-9722-48ae-ab6a-4335981356ad",
  "name": "Sticky Note1",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    -77.62340912473337,
    108.96056004923076
  ],
  "parameters": {
    "width": 509.1040245093486,
    "height": 287.9568584558579,
    "content": "## Single page requests\n* Docsify may request default pages (i.e. `readme.md` or a `summary.md`)\n* GET request for the workflow documentation pages\n* POST request for saving manually edited doc page"
  },
  "typeVersion": 1
}

================ Node #1818 ================
{
  "id": "18e1f4c5-3652-4244-9a09-cd7a498a9310",
  "name": "Sticky Note2",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    460,
    -240.54580345183416
  ],
  "parameters": {
    "color": 3,
    "width": 489.50636350106504,
    "height": 462.9720128227216,
    "content": "## EDIT THIS!\n* `project_path` to link to a writable directory that is accessible to n8n\n* update `instance_url` when running in the cloud version. If using in self-hosted mode, make sure N8N_PROTOCOL and N8N_HOST .env variables are correct"
  },
  "typeVersion": 1
}

================ Node #1819 ================
{
  "id": "d505d2ec-33e9-4983-8265-ff55f0df3da8",
  "name": "file types",
  "type": "n8n-nodes-base.switch",
  "position": [
    1180,
    240
  ],
  "parameters": {
    "rules": {
      "values": [
        {
          "outputKey": ".md",
          "conditions": {
            "options": {
              "version": 2,
              "leftValue": "",
              "caseSensitive": true,
              "typeValidation": "strict"
            },
            "combinator": "and",
            "conditions": [
              {
                "operator": {
                  "type": "string",
                  "operation": "endsWith"
                },
                "leftValue": "={{ $json.params.file.toLowerCase() }}",
                "rightValue": ".md"
              }
            ]
          },
          "renameOutput": true
        }
      ]
    },
    "options": {
      "fallbackOutput": "extra",
      "renameFallbackOutput": "unknown"
    }
  },
  "typeVersion": 3.2
}

================ Node #1820 ================
{
  "id": "59362792-4a3e-4f97-95e2-d7b33b870e1d",
  "name": "Sticky Note3",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    4620,
    -245.7696645512633
  ],
  "parameters": {
    "width": 446.67466982248516,
    "height": 309.89805271694365,
    "content": "## Construct main HTML page and send it back to the user\n* `HTML_headers` and `HTML_docsify_include` are stored in the CONFIG node for the page simplicity"
  },
  "typeVersion": 1
}

================ Node #1821 ================
{
  "id": "83189146-4d1f-454e-9591-bdbfda676683",
  "name": "Get All Workflows",
  "type": "n8n-nodes-base.n8n",
  "position": [
    1880,
    160
  ],
  "parameters": {
    "filters": {
      "tags": "={{ decodeURIComponent(($json.params.file?.match(/^tag-(.+)\\.md$/))?.[1] || '') }}"
    },
    "requestOptions": {}
  },
  "credentials": {
    "n8nApi": {
      "id": "eW7IdTFt4ARJbEwR",
      "name": "Ted n8n account"
    }
  },
  "typeVersion": 1,
  "alwaysOutputData": true
}

================ Node #1822 ================
{
  "id": "39aa6017-a0ef-4f05-81b8-cfc9bb2fcc20",
  "name": "Sticky Note4",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    1780,
    20.913927466176517
  ],
  "parameters": {
    "width": 820.1843305645202,
    "height": 307.51990359708003,
    "content": "## Serve main Markdown table with the workflow overview\n*NOTE! Here we don't reply with HTML content. Only Markdown elements are sent back and processed by the JS library*\n* Create an overall table when `README.md` (the home page) is requested\n* Create a table with a subset of workflows when a tag from a navigation pane is selected"
  },
  "typeVersion": 1
}

================ Node #1823 ================
{
  "id": "2d087c25-b998-4abc-b0ce-ede8e62e28b4",
  "name": "md files",
  "type": "n8n-nodes-base.switch",
  "position": [
    1440,
    180
  ],
  "parameters": {
    "rules": {
      "values": [
        {
          "outputKey": "README.md",
          "conditions": {
            "options": {
              "version": 2,
              "leftValue": "",
              "caseSensitive": true,
              "typeValidation": "strict"
            },
            "combinator": "and",
            "conditions": [
              {
                "operator": {
                  "type": "string",
                  "operation": "equals"
                },
                "leftValue": "={{ $json.params.file }}",
                "rightValue": "README.md"
              }
            ]
          },
          "renameOutput": true
        },
        {
          "outputKey": "docs",
          "conditions": {
            "options": {
              "version": 2,
              "leftValue": "",
              "caseSensitive": true,
              "typeValidation": "strict"
            },
            "combinator": "and",
            "conditions": [
              {
                "id": "c1c1aecc-8faa-47ea-b831-4674c3c0db61",
                "operator": {
                  "type": "string",
                  "operation": "contains"
                },
                "leftValue": "={{ $json.params.file }}",
                "rightValue": "docs_"
              }
            ]
          },
          "renameOutput": true
        },
        {
          "outputKey": "summary.md",
          "conditions": {
            "options": {
              "version": 2,
              "leftValue": "",
              "caseSensitive": true,
              "typeValidation": "strict"
            },
            "combinator": "and",
            "conditions": [
              {
                "id": "fde643c9-31cd-4cbd-b4de-99a8ad6202af",
                "operator": {
                  "name": "filter.operator.equals",
                  "type": "string",
                  "operation": "equals"
                },
                "leftValue": "={{ $json.params.file }}",
                "rightValue": "summary.md"
              }
            ]
          },
          "renameOutput": true
        },
        {
          "outputKey": "tags",
          "conditions": {
            "options": {
              "version": 2,
              "leftValue": "",
              "caseSensitive": true,
              "typeValidation": "strict"
            },
            "combinator": "and",
            "conditions": [
              {
                "id": "df4bc9f8-9285-49a6-b31c-d7173bf42901",
                "operator": {
                  "type": "string",
                  "operation": "startsWith"
                },
                "leftValue": "={{ $json.params.file }}",
                "rightValue": "tag-"
              }
            ]
          },
          "renameOutput": true
        }
      ]
    },
    "options": {
      "fallbackOutput": "extra"
    }
  },
  "typeVersion": 3.2
}

================ Node #1824 ================
{
  "id": "08524df2-d555-42ca-8440-57ca5a780b74",
  "name": "Get Workflow tags",
  "type": "n8n-nodes-base.n8n",
  "position": [
    1880,
    500
  ],
  "parameters": {
    "filters": {},
    "requestOptions": {}
  },
  "credentials": {
    "n8nApi": {
      "id": "eW7IdTFt4ARJbEwR",
      "name": "Ted n8n account"
    }
  },
  "typeVersion": 1
}

================ Node #1825 ================
{
  "id": "06e383dc-b1ea-4c97-9ee4-c07084ffc4cc",
  "name": "Sticky Note5",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    1780,
    360
  ],
  "parameters": {
    "width": 817.6163848212657,
    "height": 288.20835077550953,
    "content": "## Serve left pane content\n* Here all workflows are fetched again when `summary.md` file is requested.\n\nIt contains Markdown for the left navigation pane: a list of all tags"
  },
  "typeVersion": 1
}

================ Node #1826 ================
{
  "id": "c28ae282-7d83-42dd-8714-30d26b0f20af",
  "name": "Sticky Note6",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    1700,
    1780
  ],
  "parameters": {
    "width": 367.8950651848079,
    "height": 262.5093167050718,
    "content": "## Handle missing pages\nServe the Markdown content with the requested file name for edge cases, i.e. any unexpected files"
  },
  "typeVersion": 1
}

================ Node #1827 ================
{
  "id": "6441cf8f-dace-45fb-984e-aa9e0589e495",
  "name": "Sticky Note7",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    1020,
    729
  ],
  "parameters": {
    "color": 6,
    "width": 4161.578473434268,
    "height": 1142.0268674813442,
    "content": "# Main functionality here\n\n## * View existing documentation\n## * Auto-generate doc page if no file available\n## * Re-created autodoc page\n## * Edit doc page: LIVE Markdown editor included!\n## * Save edited file. WARNING! No authentication"
  },
  "typeVersion": 1
}

================ Node #1828 ================
{
  "id": "9116a4eb-18c6-4ec2-84e8-9a0b920d5c19",
  "name": "Sticky Note8",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    4460,
    751
  ],
  "parameters": {
    "width": 652.3100890494833,
    "height": 268.0620091282372,
    "content": "## Custom markdown editor\nThis is another HTML page for the live Markdown editor\n* `Mermaid.js` is supported\n* Docsify preview on edit\n* Save or Cancel buttons"
  },
  "typeVersion": 1
}

================ Node #1829 ================
{
  "id": "920c1edb-29ad-4952-9e30-9020146ed88a",
  "name": "Sticky Note9",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    4000,
    1501
  ],
  "parameters": {
    "width": 522.870786668288,
    "height": 348.0868581511653,
    "content": "## Save new file\nOnce the doc page is generated or edited manually, a Markdown files is saved in the directory"
  },
  "typeVersion": 1
}

================ Node #1830 ================
{
  "id": "cff4d2be-f627-4c7d-9f7a-093f6f9b2c27",
  "name": "Sticky Note10",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    1887,
    758
  ],
  "parameters": {
    "width": 639.8696984316115,
    "height": 429.7891698152571,
    "content": "## Load existing doc file\nCheck the existing file when the View or Edit button is pressed\n"
  },
  "typeVersion": 1
}

================ Node #1831 ================
{
  "id": "b7f01785-99c7-47b2-967a-b7456bb8f562",
  "name": "Sticky Note11",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    2786.9421822644376,
    1023
  ],
  "parameters": {
    "width": 1369.2986733206085,
    "height": 466.42237140646773,
    "content": "## If the file is not available, then:\n* either auto-generate new doc\n* prepare a basic template for editing"
  },
  "typeVersion": 1
}

================ Node #1832 ================
{
  "id": "6953bf0c-3122-4d80-9e74-1c07a892bf31",
  "name": "docsify",
  "type": "n8n-nodes-base.webhook",
  "position": [
    240,
    -100
  ],
  "webhookId": "8b719afe-8be3-4cd5-84ed-aca521b31a89",
  "parameters": {
    "path": "135bc21f-c7d0-4afe-be73-f984d444b43b",
    "options": {},
    "responseMode": "responseNode"
  },
  "typeVersion": 2
}

================ Node #1833 ================
{
  "id": "a8b14ffd-4a8b-4a3d-ba54-5997197e5457",
  "name": "Sticky Note4",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    -2880,
    340
  ],
  "parameters": {
    "color": 6,
    "width": 429.96763122593137,
    "height": 322,
    "content": "### Get Apprropraite Data\nThese Nodes are to extract only the Required Data from the Webhook Node"
  },
  "typeVersion": 1
}

================ Node #1834 ================
{
  "id": "c8ae8766-3942-4b8d-8815-9e96ab9dc1de",
  "name": "Sticky Note6",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    -840,
    340
  ],
  "parameters": {
    "color": 5,
    "width": 677,
    "height": 660,
    "content": "### N8N has the Node to convert PDF to Text, but PDF should be converted from Text. Scanned Image PDF will not be converted. \n\nYou can use ohter nodes here to convert word file to text or JPG to Text, possiblities are limitless."
  },
  "typeVersion": 1
}

================ Node #1835 ================
{
  "id": "529f5756-c1a2-4c41-8245-38164543eb8e",
  "name": "Sticky Note",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    -1334.2232779572741,
    340
  ],
  "parameters": {
    "color": 7,
    "width": 477.2230145794152,
    "height": 648.5051458745238,
    "content": "### Download the File.\nIf you are using S3 to Upload attachments you can use S3 node here to download the attachment\n"
  },
  "typeVersion": 1
}

================ Node #1836 ================
{
  "id": "101c6544-d319-495d-a14f-e180f51be1f0",
  "name": "Code",
  "type": "n8n-nodes-base.code",
  "position": [
    -2840,
    480
  ],
  "parameters": {
    "jsCode": "// Loop over input items and add a new field called 'myNewField' to the JSON of each one\nfor (const item of $input.all()) {\n item.json.myNewField = 1;\n}\n\nreturn $input.all();"
  },
  "typeVersion": 2
}

================ Node #1837 ================
{
  "id": "5d0a1090-9be9-41e1-9a15-26bd6498fd95",
  "name": "Sticky Note2",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    -3300,
    340
  ],
  "parameters": {
    "color": 5,
    "width": 398,
    "height": 642,
    "content": "### Applicant Applied for Job in ERPNext\n\nYou need to go to Webhooks in ERPNext and Create a Webhook on Job Applicant Doc Type and trigger should be on insert.\n\nFirst do the Test Wehbook and Pin the Webhook.\n\nFollow the Tutorial"
  },
  "typeVersion": 1
}

================ Node #1838 ================
{
  "id": "4ed5dfbf-9b16-4f62-83e2-abb63421809b",
  "name": "ApplicantData",
  "type": "n8n-nodes-base.set",
  "position": [
    -2640,
    480
  ],
  "parameters": {
    "options": {},
    "assignments": {
      "assignments": [
        {
          "id": "8d600a4f-14d3-4840-aea0-665d26e7771b",
          "name": "body",
          "type": "object",
          "value": "={{ $json.body }}"
        }
      ]
    }
  },
  "typeVersion": 3.4
}

================ Node #1839 ================
{
  "id": "4f141057-8dd6-429a-b48f-fd80b2666882",
  "name": "ERPNext - Reject if Resume not Attached",
  "type": "n8n-nodes-base.erpNext",
  "position": [
    -2380,
    800
  ],
  "parameters": {
    "docType": "Job%20Applicant",
    "operation": "update",
    "properties": {
      "customProperty": [
        {
          "field": "status",
          "value": "Rejected"
        }
      ]
    },
    "documentName": "={{ $('ApplicantData').item.json.body.name }}"
  },
  "credentials": {
    "erpNextApi": {
      "id": "PInpnsxvPkvaiW0z",
      "name": "ERPNext account"
    }
  },
  "typeVersion": 1
}

================ Node #1840 ================
{
  "id": "de0a9900-4109-4092-ad3b-f36f02517fdf",
  "name": "Applied Against Job",
  "type": "n8n-nodes-base.if",
  "position": [
    -2140,
    460
  ],
  "parameters": {
    "options": {
      "ignoreCase": true
    },
    "conditions": {
      "options": {
        "version": 2,
        "leftValue": "",
        "caseSensitive": false,
        "typeValidation": "strict"
      },
      "combinator": "and",
      "conditions": [
        {
          "id": "abbbd6f3-838e-43fb-a809-6bfffb153244",
          "operator": {
            "type": "string",
            "operation": "notEquals"
          },
          "leftValue": "={{ $json.body.Job_opening }}",
          "rightValue": "None"
        }
      ]
    }
  },
  "typeVersion": 2.2
}

================ Node #1841 ================
{
  "id": "1c8e889b-dcd9-4807-8528-a7f0300bf558",
  "name": "ERPNext - Hold Applicant",
  "type": "n8n-nodes-base.erpNext",
  "position": [
    -2180,
    800
  ],
  "parameters": {
    "docType": "Job%20Applicant",
    "operation": "update",
    "properties": {
      "customProperty": [
        {
          "field": "status",
          "value": "Hold"
        }
      ]
    },
    "documentName": "={{ $('ApplicantData').item.json.body.name }}"
  },
  "credentials": {
    "erpNextApi": {
      "id": "PInpnsxvPkvaiW0z",
      "name": "ERPNext account"
    }
  },
  "typeVersion": 1
}

================ Node #1842 ================
{
  "id": "548c61dd-bcc3-4a7f-970e-5ff734926499",
  "name": "Sticky Note5",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    -140,
    343.6198532285906
  ],
  "parameters": {
    "color": 6,
    "width": 258,
    "height": 638.3801467714094,
    "content": "### Get Job Opening Data\nFrom ERPNext\n\nAs Job is applied against a specific Job, you can now get the Job Opening Data which must be having the Job Description."
  },
  "typeVersion": 1
}

================ Node #1843 ================
{
  "id": "6266e3e0-9bd7-4ab6-a488-55f1b524000f",
  "name": "Get Job Opening",
  "type": "n8n-nodes-base.erpNext",
  "position": [
    -80,
    620
  ],
  "parameters": {
    "docType": "Job%20Opening",
    "operation": "get",
    "documentName": "={{ $('ApplicantData').item.json.body.Job_opening }}"
  },
  "credentials": {
    "erpNextApi": {
      "id": "PInpnsxvPkvaiW0z",
      "name": "ERPNext account"
    }
  },
  "typeVersion": 1
}

================ Node #1844 ================
{
  "id": "536755cf-19d6-44a4-8449-635f4562b61f",
  "name": "Sticky Note7",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    140,
    320
  ],
  "parameters": {
    "color": 4,
    "width": 406.7864870360547,
    "height": 662,
    "content": "### AI Agent to do its Job\nOpenAI\n\nSee full prompt which tells this AI Agent that you are a recruitment sepcialist and all the roles are defined in this node.\n\nIt will shortlist the candidate and will give the descriptive output with candidate fitlevel, score, rating and justification."
  },
  "typeVersion": 1
}

================ Node #1845 ================
{
  "id": "0072826c-0e24-4c1f-89f9-388dc6e59ae5",
  "name": "Sticky Note8",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    980,
    320
  ],
  "parameters": {
    "color": 6,
    "width": 438,
    "height": 662,
    "content": "### Update data in ERPNext\nHere First node will do the formatting of the data and will convert output from AI Agent to Appropriate Fields which are defined in ERPNext and then will Send to Next Node\n\n### ERPNext (HTTP Node)\nThis node will take the Data from Previouis Node and will update the Applicant Data in ERPNext"
  },
  "typeVersion": 1
}

================ Node #1846 ================
{
  "id": "28f23589-0608-4ed0-9e70-b6cbd31aa387",
  "name": "Google Gemini Chat Model",
  "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
  "position": [
    220,
    800
  ],
  "parameters": {
    "options": {},
    "modelName": "models/gemini-2.0-flash-exp"
  },
  "credentials": {
    "googlePalmApi": {
      "id": "pKFvSpPWSRFpnBoB",
      "name": "Google Gemini(PaLM) Api account"
    }
  },
  "typeVersion": 1
}

================ Node #1847 ================
{
  "id": "8bdd8f1c-e546-4ffb-a058-a3271fcad156",
  "name": "Convert to Fields",
  "type": "n8n-nodes-base.code",
  "position": [
    660,
    620
  ],
  "parameters": {
    "jsCode": "// Input text from the `output` field\nconst textOutput = $json.output || '';\n\n// Function to extract values from the text\nfunction extractFields(text) {\n const fields = {};\n\n // Regular expressions to extract each field\n const fitLevelMatch = text.match(/FitLevel:\\s*(.+)\\n/);\n const scoreMatch = text.match(/Score:\\s*(\\d+)\\n/);\n const ratingMatch = text.match(/Rating:\\s*(\\d+)\\n/);\n const justificationMatch = text.match(/Justification:\\s*([\\s\\S]+)/);\n\n // Assign extracted values to the fields\n fields.fit_level = fitLevelMatch ? fitLevelMatch[1].trim() : null;\n fields.score = scoreMatch ? scoreMatch[1].trim() : null;\n fields.applicant_rating = ratingMatch ? ratingMatch[1].trim() : null;\n fields.justification_by_ai = justificationMatch ? justificationMatch[1].trim() : null;\n\n return fields;\n}\n\n// Extract fields from the output\nconst extractedFields = extractFields(textOutput);\n\n// Return the fields as JSON\nreturn {\n json: extractedFields\n};\n"
  },
  "typeVersion": 2
}

================ Node #1848 ================
{
  "id": "ae1dc677-9ad7-4138-969f-2ee73b8537f9",
  "name": "Sticky Note9",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    1460,
    320
  ],
  "parameters": {
    "color": 5,
    "width": 226.43884349833064,
    "height": 682,
    "content": "### Selected or Rejected\n\nThe criteia for score is that if Score is 80 or above Candidate will be selected Else Rejected."
  },
  "typeVersion": 1
}

================ Node #1849 ================
{
  "id": "090f4f22-639a-4fc7-8351-04dafcc09638",
  "name": "If score less than 80",
  "type": "n8n-nodes-base.if",
  "position": [
    1520,
    620
  ],
  "parameters": {
    "options": {},
    "conditions": {
      "options": {
        "version": 2,
        "leftValue": "",
        "caseSensitive": true,
        "typeValidation": "loose"
      },
      "combinator": "and",
      "conditions": [
        {
          "id": "5f845292-f4aa-44fb-a644-06c0736c3503",
          "operator": {
            "type": "number",
            "operation": "lt"
          },
          "leftValue": "={{ $('Convert to Fields').item.json.score }}",
          "rightValue": 80
        }
      ]
    },
    "looseTypeValidation": true
  },
  "typeVersion": 2.2
}

================ Node #1850 ================
{
  "id": "0d7a84c2-0b1d-4e61-a3df-b81dd7981f1a",
  "name": "Reject Applicant",
  "type": "n8n-nodes-base.httpRequest",
  "position": [
    1880,
    460
  ],
  "parameters": {
    "url": "=https://erpnext.syncbricks.com/api/resource/Job Applicant/{{ $('ApplicantData').item.json.body.name }}",
    "method": "PUT",
    "options": {},
    "jsonBody": "={\n \"status\": \"Rejected\"\n}",
    "sendBody": true,
    "sendHeaders": true,
    "specifyBody": "json",
    "authentication": "predefinedCredentialType",
    "headerParameters": {
      "parameters": [
        {}
      ]
    },
    "nodeCredentialType": "erpNextApi"
  },
  "credentials": {
    "erpNextApi": {
      "id": "PInpnsxvPkvaiW0z",
      "name": "ERPNext account"
    }
  },
  "typeVersion": 4.2
}

================ Node #1851 ================
{
  "id": "a55e70d1-7070-407d-9107-41cb33d2f0ae",
  "name": "Update Applicant Data",
  "type": "n8n-nodes-base.httpRequest",
  "position": [
    1140,
    620
  ],
  "parameters": {
    "url": "=https://erpnext.syncbricks.com/api/resource/Job Applicant/{{ $('ApplicantData').item.json.body.name }}",
    "method": "PUT",
    "options": {},
    "jsonBody": "={\n \"applicant_rating\": \"{{ $json.applicant_rating }}\",\n \"custom_justification_by_ai\": \"{{ $json.justification_by_ai }}\",\n \"custom_fit_level\": \"{{ $json.fit_level }}\",\n \"custom_score\":\"{{ $json.score }}\"\n}\n\n\n\n\n",
    "sendBody": true,
    "sendHeaders": true,
    "specifyBody": "json",
    "authentication": "predefinedCredentialType",
    "headerParameters": {
      "parameters": [
        {}
      ]
    },
    "nodeCredentialType": "erpNextApi"
  },
  "credentials": {
    "erpNextApi": {
      "id": "PInpnsxvPkvaiW0z",
      "name": "ERPNext account"
    }
  },
  "typeVersion": 4.2
}

================ Node #1852 ================
{
  "id": "044d26cb-2b34-4613-8d1d-20f40b47da29",
  "name": "Reume Attachment Link",
  "type": "n8n-nodes-base.set",
  "position": [
    -1820,
    560
  ],
  "parameters": {
    "options": {},
    "assignments": {
      "assignments": [
        {
          "id": "7d0b8b98-0976-4c19-bc7c-738fabd60d28",
          "name": "body.resume_attachment",
          "type": "string",
          "value": "={{ $json.body.resume_link }}"
        }
      ]
    }
  },
  "typeVersion": 3.4
}

================ Node #1853 ================
{
  "id": "a17e9c94-0ec7-430f-adf3-109bcccf3bcb",
  "name": "Sticky Note10",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    -2874.102923130834,
    680
  ],
  "parameters": {
    "color": 3,
    "width": 875.658619343735,
    "height": 302,
    "content": "## Resume Available?\nFirst Node : If Resume is not attached or Then Job Applicant will be Rejected\nSecond Node : If job is not applied against opening then the Applicant will be kept on hold."
  },
  "typeVersion": 1
}

================ Node #1854 ================
{
  "id": "e2508130-4ecd-4d19-b41c-293006d17507",
  "name": "Resume Link Provided",
  "type": "n8n-nodes-base.if",
  "position": [
    -2400,
    480
  ],
  "parameters": {
    "options": {},
    "conditions": {
      "options": {
        "version": 2,
        "leftValue": "",
        "caseSensitive": true,
        "typeValidation": "strict"
      },
      "combinator": "and",
      "conditions": [
        {
          "id": "3cd3da7d-d0fb-43fd-be10-3c1e627846b9",
          "operator": {
            "type": "string",
            "operation": "startsWith"
          },
          "leftValue": "={{ $json.body.resume_link }}",
          "rightValue": "http"
        }
      ]
    }
  },
  "typeVersion": 2.2
}

================ Node #1855 ================
{
  "id": "e6770961-05b2-4488-99b1-7d1a219f8372",
  "name": "Accept Applicant",
  "type": "n8n-nodes-base.httpRequest",
  "position": [
    1860,
    760
  ],
  "parameters": {
    "url": "=https://erpnext.syncbricks.com/api/resource/Job Applicant/{{ $('ApplicantData').item.json.body.name }}",
    "method": "PUT",
    "options": {},
    "jsonBody": "={\n \"status\": \"Accepted\"\n}",
    "sendBody": true,
    "sendHeaders": true,
    "specifyBody": "json",
    "authentication": "predefinedCredentialType",
    "headerParameters": {
      "parameters": [
        {}
      ]
    },
    "nodeCredentialType": "erpNextApi"
  },
  "credentials": {
    "erpNextApi": {
      "id": "PInpnsxvPkvaiW0z",
      "name": "ERPNext account"
    }
  },
  "typeVersion": 4.2
}

================ Node #1856 ================
{
  "id": "6b7ad5c5-2a6f-4bb8-8296-3defb40f9605",
  "name": "Sticky Note11",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    -3800,
    340
  ],
  "parameters": {
    "color": 4,
    "width": 475.27306699862953,
    "height": 636.1483291619771,
    "content": "## Developed by Amjid Ali\n\nThank you for using this workflow template. It has taken me countless hours of hard work, research, and dedication to develop, and I sincerely hope it adds value to your work.\n\nIf you find this template helpful, I kindly ask you to consider supporting my efforts. Your support will help me continue improving and creating more valuable resources.\n\nYou can contribute via PayPal here:\n\nhttp://paypal.me/pmptraining\n\nFor Full Course about ERPNext or Automation using AI follow below link\n\nhttp://lms.syncbricks.com\n\nAdditionally, when sharing this template, I would greatly appreciate it if you include my original information to ensure proper credit is given.\n\nThank you for your generosity and support!\nEmail : amjid@amjidali.com\nhttps://linkedin.com/in/amjidali\nhttps://syncbricks.com\nhttps://youtube.com/@syncbricks"
  },
  "typeVersion": 1
}

================ Node #1857 ================
{
  "id": "173c6341-2ab7-4ee5-a6bd-0770ae19c013",
  "name": "Webhook",
  "type": "n8n-nodes-base.webhook",
  "position": [
    -3180,
    620
  ],
  "webhookId": "f003f8ea-1f24-457c-8f28-762bd7942023",
  "parameters": {
    "path": "syncbricks-com-tutorial-candidate-shortlist",
    "options": {},
    "httpMethod": "POST"
  },
  "typeVersion": 2
}

================ Node #1858 ================
{
  "id": "cb0a8dd4-6673-4043-af76-0bf4537a8173",
  "name": "Sticky Note12",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    -1980,
    340
  ],
  "parameters": {
    "color": 6,
    "width": 613.5767730410602,
    "height": 654.6630436071407,
    "content": "### Get file of Resume Detail from ERPNext Applicant\nExtract the Resume Download Link and Decide which Attachment type it is as every attachment will be treated differently.\nCurrently I provided only for PDF Version but you can add seperate flow for other versions"
  },
  "typeVersion": 1
}

================ Node #1859 ================
{
  "id": "101938bd-75cd-4557-a44f-ba64c4181f70",
  "name": "Sticky Note13",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    -2420,
    340
  ],
  "parameters": {
    "color": 6,
    "width": 429.96763122593137,
    "height": 310.20584626167124,
    "content": "### Validate if the Resume is Available and It is against a specific Job\nThese Nodes are to extract only the Required Data from the Webhook Node"
  },
  "typeVersion": 1
}

================ Node #1860 ================
{
  "id": "596bcbd5-b94a-4a06-aa83-f7d9dc6264be",
  "name": "File Type",
  "type": "n8n-nodes-base.switch",
  "position": [
    -1600,
    560
  ],
  "parameters": {
    "rules": {
      "values": [
        {
          "outputKey": "pdf",
          "conditions": {
            "options": {
              "version": 2,
              "leftValue": "",
              "caseSensitive": true,
              "typeValidation": "strict"
            },
            "combinator": "and",
            "conditions": [
              {
                "operator": {
                  "type": "string",
                  "operation": "endsWith"
                },
                "leftValue": "={{ $json.body.resume_attachment }}",
                "rightValue": ".pdf"
              }
            ]
          },
          "renameOutput": true
        },
        {
          "outputKey": "doc",
          "conditions": {
            "options": {
              "version": 2,
              "leftValue": "",
              "caseSensitive": true,
              "typeValidation": "strict"
            },
            "combinator": "and",
            "conditions": [
              {
                "id": "dabe1bd2-9aba-4a61-b0b3-08c22856b213",
                "operator": {
                  "type": "string",
                  "operation": "contains"
                },
                "leftValue": "={{ $json.body.resume_attachment }}",
                "rightValue": ".doc"
              }
            ]
          },
          "renameOutput": true
        },
        {
          "outputKey": ".jpg",
          "conditions": {
            "options": {
              "version": 2,
              "leftValue": "",
              "caseSensitive": true,
              "typeValidation": "strict"
            },
            "combinator": "and",
            "conditions": [
              {
                "id": "1101fc2e-4220-4795-9342-58d88ea146ce",
                "operator": {
                  "type": "string",
                  "operation": "endsWith"
                },
                "leftValue": "={{ $json.body.resume_attachment }}",
                "rightValue": ".jpg"
              }
            ]
          },
          "renameOutput": true
        }
      ]
    },
    "options": {}
  },
  "typeVersion": 3.2
}

================ Node #1861 ================
{
  "id": "cc7f4ca0-8e9b-49de-a7f1-f1f7913d6dcc",
  "name": "Download PDF Resume",
  "type": "n8n-nodes-base.httpRequest",
  "position": [
    -1160,
    460
  ],
  "parameters": {
    "url": "={{ $json.body.resume_attachment }}",
    "options": {}
  },
  "typeVersion": 4.2
}

================ Node #1862 ================
{
  "id": "1209643a-7133-45cf-98a3-e242e2e1766b",
  "name": "PDF to Text",
  "type": "n8n-nodes-base.extractFromFile",
  "position": [
    -720,
    440
  ],
  "parameters": {
    "options": {},
    "operation": "pdf"
  },
  "typeVersion": 1
}

================ Node #1863 ================
{
  "id": "17430d0d-7bca-4ed9-b80e-d1f81dad5d58",
  "name": "Txt File to Text (Example)",
  "type": "n8n-nodes-base.extractFromFile",
  "position": [
    -740,
    680
  ],
  "parameters": {
    "options": {},
    "operation": "text"
  },
  "typeVersion": 1
}

================ Node #1864 ================
{
  "id": "2ab3f083-66d7-4a28-9b00-b9dabcd84282",
  "name": "Merge1",
  "type": "n8n-nodes-base.merge",
  "position": [
    -420,
    620
  ],
  "parameters": {},
  "typeVersion": 3
}

================ Node #1865 ================
{
  "id": "e45d5828-1e7b-454e-9a79-7ab0f60e3cd9",
  "name": "Recruitment AI Agent",
  "type": "@n8n/n8n-nodes-langchain.agent",
  "position": [
    200,
    620
  ],
  "parameters": {
    "text": "=System Prompt : \nYou are a highly skilled AI agent trained to compare and analyze text from resumes against job descriptions. Your primary goal is to assess whether the candidate is a good fit for the role based on the given inputs. You will receive two inputs:\n\n1. **Job Description**: A detailed description of the responsibilities, qualifications, and skills required for a specific job role.\n2. **Resume Text**: A summary of a candidate's qualifications, skills, experience, and education.\n\nYour task is to:\n1. **Analyze Match**: Compare the candidate's resume text against the job description and assess the alignment of:\n - Required skills\n - Relevant experience\n - Educational background\n - Certifications\n - Keywords mentioned in both texts (e.g., specific tools, methodologies, or terminologies).\n\n2. **Assess Fit**: Determine if the candidate is a strong, moderate, or weak fit for the role. Assign a score from 0 to 100 based on relevance:\n - **Strong Fit**: 80\u2013100 (Candidate meets or exceeds the majority of the job requirements).\n - **Moderate Fit**: 50\u201379 (Candidate meets some key requirements but lacks in others).\n - **Weak Fit**: Below 50 (Candidate does not align with the role requirements).\n\n3. **Provide Justification**: Include a brief explanation of why the candidate is or isn\u2019t a good fit, highlighting strengths, gaps, or missing criteria.\n\nOutput Format:\n- **Fit Level**: [Strong Fit / Moderate Fit / Weak Fit]\n- **Score**: [0\u2013100]\n- **Rating**: [0\u20135]\n- **Justification**: A concise summary of the reasoning behind the fit level.\n\nRemember to maintain a neutral and objective tone in your analysis and ensure that your assessment is solely based on the information provided in the inputs.\"\n\n\nProvide me the output in the following format:\n\nFitLevel\n<fitLevel>\n\nScore:\n<score>\n\nRating:\n<rating>\n\nJustification:\n<justification>\n\nBelow are the inputs \n\nJob Title : {{ $json.job_title }}\nJob Desription : {{ $json.description }}\n\n\nHere here Job Applican't text from Resume : \n{{ $('PDF to Text').item.json.text }}\n",
    "agent": "reActAgent",
    "options": {},
    "promptType": "define"
  },
  "typeVersion": 1.7
}

================ Node #1866 ================
{
  "id": "02d40fbc-3b2a-4350-bd01-2dcca11cf23b",
  "name": "Sticky Note14",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    560,
    320
  ],
  "parameters": {
    "color": 6,
    "width": 374.6910896370089,
    "height": 662,
    "content": "### Create Fields\n\nThis Java Script will convert the extracted fieldws from AI Agent and will create fields which are already created in ERPNext.\n\nEnsure to create below fields in ERPNext : \n\njustification_by_ai\nfit_level\nscore\n\napplicant_rating field is already there, which will be updated with 1 to 5 star"
  },
  "typeVersion": 1
}

================ Node #1867 ================
{
  "id": "fdc011c2-e734-44fe-8a83-975247445d16",
  "name": "Sticky Note15",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    1720,
    320
  ],
  "parameters": {
    "color": 3,
    "width": 394.2810709723076,
    "height": 308.0357387860514,
    "content": "### Update data in ERPNext\nAPI Call\nCandidate Rejected"
  },
  "typeVersion": 1
}

================ Node #1868 ================
{
  "id": "3c4174cc-b947-4461-87a6-a7dbd0e3c78d",
  "name": "Sticky Note16",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    1720,
    660
  ],
  "parameters": {
    "color": 4,
    "width": 385.4472695263088,
    "height": 308.0357387860514,
    "content": "### Update data in ERPNext\nAPI Call\nCandidate Rejected"
  },
  "typeVersion": 1
}

================ Node #1869 ================
{
  "id": "0116aa6d-2783-487b-b457-47a6b7d69f02",
  "name": "Microsoft Outlook",
  "type": "n8n-nodes-base.microsoftOutlook",
  "position": [
    2240,
    460
  ],
  "parameters": {
    "additionalFields": {}
  },
  "credentials": {
    "microsoftOutlookOAuth2Api": {
      "id": "9gy3uvf3pmBdpEsq",
      "name": "Microsoft Outlook Al Ansari"
    }
  },
  "typeVersion": 2
}

================ Node #1870 ================
{
  "id": "f2eac576-3a17-46e8-8800-1ba250e53047",
  "name": "Sticky Note17",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    2140,
    331.1661985540012
  ],
  "parameters": {
    "color": 6,
    "width": 338.3336618143153,
    "height": 623.107990360008,
    "content": "### Notifiy Applicant either by Email or Whatsapp or SMS, Options are Limitless"
  },
  "typeVersion": 1
}

================ Node #1871 ================
{
  "id": "d4a6e756-923c-47c8-9c12-b1e8dcc873ca",
  "name": "WhatsApp Business Cloud",
  "type": "n8n-nodes-base.whatsApp",
  "position": [
    2280,
    760
  ],
  "parameters": {
    "operation": "send",
    "requestOptions": {},
    "additionalFields": {}
  },
  "credentials": {
    "whatsAppApi": {
      "id": "E8IjegSMj5LTd8lA",
      "name": "WhatsApp Syncbricks Access Token Never Expires"
    }
  },
  "typeVersion": 1
}

================ Node #1872 ================
{
  "id": "475385fa-28f3-45c4-bd1a-10dde79f74f2",
  "name": "When chat message received",
  "type": "@n8n/n8n-nodes-langchain.chatTrigger",
  "position": [
    700,
    460
  ],
  "webhookId": "ebdeba3f-6b4f-49f3-ba0a-8253dd226161",
  "parameters": {
    "options": {}
  },
  "typeVersion": 1.1
}

================ Node #1873 ================
{
  "id": "61133dc6-dcd9-44ff-85f2-5d8cc2ce813e",
  "name": "Ollama Chat Model",
  "type": "@n8n/n8n-nodes-langchain.lmChatOllama",
  "position": [
    900,
    680
  ],
  "parameters": {
    "options": {}
  },
  "credentials": {
    "ollamaApi": {
      "id": "MyYvr1tcNQ4e7M6l",
      "name": "Local Ollama"
    }
  },
  "typeVersion": 1
}

================ Node #1874 ================
{
  "id": "3e89571f-7c87-44c6-8cfd-4903d5e1cdc5",
  "name": "Sticky Note",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    160,
    80
  ],
  "parameters": {
    "width": 485,
    "height": 473,
    "content": "## Chat with local LLMs using n8n and Ollama\nThis n8n workflow allows you to seamlessly interact with your self-hosted Large Language Models (LLMs) through a user-friendly chat interface. By connecting to Ollama, a powerful tool for managing local LLMs, you can send prompts and receive AI-generated responses directly within n8n.\n\n### How it works\n1. When chat message received: Captures the user's input from the chat interface.\n2. Chat LLM Chain: Sends the input to the Ollama server and receives the AI-generated response.\n3. Delivers the LLM's response back to the chat interface.\n\n### Set up steps\n* Make sure Ollama is installed and running on your machine before executing this workflow.\n* Edit the Ollama address if different from the default.\n"
  },
  "typeVersion": 1
}

================ Node #1875 ================
{
  "id": "9345cadf-a72e-4d3d-b9f0-d670744065fe",
  "name": "Sticky Note1",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    1040,
    660
  ],
  "parameters": {
    "color": 6,
    "width": 368,
    "height": 258,
    "content": "## Ollama setup\n* Connect to your local Ollama, usually on http://localhost:11434\n* If running in Docker, make sure that the n8n container has access to the host's network in order to connect to Ollama. You can do this by passing `--net=host` option when starting the n8n Docker container"
  },
  "typeVersion": 1
}

================ Node #1876 ================
{
  "id": "eeffdd4e-6795-4ebc-84f7-87b5ac4167d9",
  "name": "Chat LLM Chain",
  "type": "@n8n/n8n-nodes-langchain.chainLlm",
  "position": [
    920,
    460
  ],
  "parameters": {},
  "typeVersion": 1.4
}

================ Node #1877 ================
{
  "id": "2017403c-7496-48f8-a487-8a017c7adfe3",
  "name": "When clicking \u2018Test workflow\u2019",
  "type": "n8n-nodes-base.manualTrigger",
  "position": [
    680,
    320
  ],
  "parameters": {},
  "typeVersion": 1
}

================ Node #1878 ================
{
  "id": "82ff288f-4234-4192-9046-33e5ffee5264",
  "name": "Wordpress",
  "type": "n8n-nodes-base.wordpress",
  "position": [
    1500,
    320
  ],
  "parameters": {
    "postId": "={{ $('Get All Wordpress Posts').item.json.id }}",
    "operation": "update",
    "updateFields": {
      "categories": "={{ $json.output }}"
    }
  },
  "credentials": {
    "wordpressApi": {
      "id": "lGWPwxTdfPDDbFjj",
      "name": "Rumjahn.com wordpress"
    }
  },
  "typeVersion": 1
}

================ Node #1879 ================
{
  "id": "521deb22-62dd-4b5f-8b9a-aab9777821da",
  "name": "Sticky Note1",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    620,
    -100
  ],
  "parameters": {
    "width": 504.88636363636317,
    "content": "## How to Auto-Categorize 82 Blog Posts in 2 Minutes using A.I. (No Coding Required)\n\n\ud83d\udca1 Read the [case study here](https://rumjahn.com/how-to-use-a-i-to-categorize-wordpress-posts-and-streamline-your-content-organization-process/).\n\n\ud83d\udcfa Watch the [youtube tutorial here](https://www.youtube.com/watch?v=IvQioioVqhw)\n\n"
  },
  "typeVersion": 1
}

================ Node #1880 ================
{
  "id": "4090d827-f8cd-47ef-ad4f-654ee58216f6",
  "name": "Sticky Note",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    860,
    180
  ],
  "parameters": {
    "color": 3,
    "width": 188.14814814814804,
    "height": 327.3400673400663,
    "content": "### Get wordpress posts\n\nTurn off return all if you're running into issues.\n"
  },
  "typeVersion": 1
}

================ Node #1881 ================
{
  "id": "71585d54-fdcc-42a5-8a0e-0fac3adc1809",
  "name": "Sticky Note2",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    1080,
    80
  ],
  "parameters": {
    "color": 4,
    "width": 315.1464152082392,
    "height": 416.90235690235625,
    "content": "### A.I. Categorization\n\n1. you need to set up the categories first in wordpress\n\n2. Edit the message prompt and change the categories and category numbers"
  },
  "typeVersion": 1
}

================ Node #1882 ================
{
  "id": "29354054-8600-4e45-99d0-6f30f779a505",
  "name": "Sticky Note3",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    1480,
    240
  ],
  "parameters": {
    "color": 5,
    "width": 171.64983164983155,
    "height": 269.59595959595947,
    "content": "### Update category"
  },
  "typeVersion": 1
}

================ Node #1883 ================
{
  "id": "d9fe6289-6b97-4830-80aa-754ac4d4b3e0",
  "name": "Get All Wordpress Posts",
  "type": "n8n-nodes-base.wordpress",
  "position": [
    900,
    320
  ],
  "parameters": {
    "options": {},
    "operation": "getAll",
    "returnAll": true
  },
  "credentials": {
    "wordpressApi": {
      "id": "lGWPwxTdfPDDbFjj",
      "name": "Rumjahn.com wordpress"
    }
  },
  "typeVersion": 1
}

================ Node #1884 ================
{
  "id": "ed40bf13-8294-4b4e-a8b6-5749989d3420",
  "name": "OpenAI Chat Model",
  "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
  "position": [
    1080,
    540
  ],
  "parameters": {
    "options": {}
  },
  "credentials": {
    "openAiApi": {
      "id": "XO3iT1iYT5Vod56X",
      "name": "OpenAi account"
    }
  },
  "typeVersion": 1
}

================ Node #1885 ================
{
  "id": "dafeb935-532e-4067-9dfb-7e9a6bbc4e5a",
  "name": "AI Agent",
  "type": "@n8n/n8n-nodes-langchain.agent",
  "position": [
    1100,
    320
  ],
  "parameters": {
    "text": "=You are an expert content strategist and taxonomy specialist with extensive experience in blog categorization and content organization.\n\nI will provide you with a blog post's title. Your task is to assign ONE primary category ID from this fixed list:\n\n13 = Content Creation\n14 = Digital Marketing\n15 = AI Tools\n17 = Automation & Integration\n18 = Productivity Tools\n19 = Analytics & Strategy\n\nAnalyze the title and return only the single most relevant category ID number that best represents the main focus of the post. While a post might touch on multiple topics, select the dominant theme that would be most useful for navigation purposes.\n\n{{ $json.title.rendered }}\n\nOutput only the category number",
    "options": {},
    "promptType": "define"
  },
  "typeVersion": 1.7
}

================ Node #1886 ================
{
  "id": "38972c5c-09f4-4120-a468-731e720914e1",
  "name": "AI Agent",
  "type": "@n8n/n8n-nodes-langchain.agent",
  "position": [
    900,
    -240
  ],
  "parameters": {
    "text": "=Title: {{ $json.data.transcript.title }}\n\nParticipants: {{ $json.data.transcript.participants }}\n\nTranscript: {{ JSON.stringify($json.data.transcript.sentences) }}\n\nBullet gist:{{ $json.data.transcript.summary.bullet_gist }}",
    "agent": "openAiFunctionsAgent",
    "options": {
      "systemMessage": "=You get my calls' transcripts from Firefiles.\nThere can be meetings about projects. You can understand if it's about a project if meeting's title contains \"project\". If so - you need to:\n1. Analyze transcript, use tool \"Create Tasks\" to create tasks for me in my AirTable base.\n2. You need to use tool \"Notify Client About Tasks\" to nofity client about his tasks.\n3. If transcript contains info there's a call needed - you'll use \"Create Event\" tool to create call on Google Meet\nCurrent date: {{ $now }}"
    },
    "promptType": "define"
  },
  "typeVersion": 1.7
}

================ Node #1887 ================
{
  "id": "db5c1bfa-b979-4749-84c8-8cd7d777748c",
  "name": "OpenAI Chat Model",
  "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
  "position": [
    880,
    40
  ],
  "parameters": {
    "model": "gpt-4o",
    "options": {}
  },
  "credentials": {
    "openAiApi": {
      "id": "9RivS2BmSh1DDBFm",
      "name": "OpenAi account 3"
    }
  },
  "typeVersion": 1
}

================ Node #1888 ================
{
  "id": "334873ba-ec5c-42b3-b8d0-def79d07c0aa",
  "name": "Create Tasks",
  "type": "@n8n/n8n-nodes-langchain.toolWorkflow",
  "position": [
    1040,
    40
  ],
  "parameters": {
    "name": "create_task",
    "schemaType": "manual",
    "workflowId": {
      "__rl": true,
      "mode": "list",
      "value": "Jo0BiizccacaChkH",
      "cachedResultName": "Firefiles AI Agent"
    },
    "description": "=Use this tool to create a task. \nFor task creation use only action items for me [YOUR NAME HERE], don't use action items for other participants.",
    "inputSchema": "{\n \"type\": \"object\",\n \"properties\": {\n \"items\": {\n \"type\": \"array\",\n \"description\": \"An array of tasks\",\n \"items\": {\n \"type\": \"object\",\n \"properties\": {\n \"name\": {\n \"type\": \"string\",\n \"description\": \"The name of the task\"\n },\n \"description\": {\n \"type\": \"string\",\n \"description\": \"A detailed description of the task\"\n },\n \"due_date\": {\n \"type\": \"string\",\n \"description\": \"Due Date\"\n },\n \"priority\": {\n \"type\": \"string\",\n \"description\": \"Priority. . Please capitalize first letter\"\n },\n \"project_name\": {\n \"type\": \"string\",\n \"description\": \"Name of the project. Word 'Project' shouldn't be included\"\n }\n },\n \"required\": [\n \"name\",\n \"description\",\n \"due_date\",\n \"priority\"\n ],\n \"additionalProperties\": false\n }\n }\n },\n \"required\": [\n \"items\"\n ],\n \"additionalProperties\": false\n}",
    "specifyInputSchema": true
  },
  "typeVersion": 1.3
}

================ Node #1889 ================
{
  "id": "7fd03a80-71e9-4c47-9870-7a3ad4916149",
  "name": "Notify Client About Tasks",
  "type": "n8n-nodes-base.gmailTool",
  "position": [
    1180,
    40
  ],
  "webhookId": "519d9406-10ef-4ae1-a747-d278002cac9e",
  "parameters": {
    "sendTo": "={{ $fromAI(\"participant_email\",\"participant email \",\"string\") }}",
    "message": "=Summary:\n{{ $json.data.transcript.summary.bullet_gist }}\n\nAction Items:\n{{ $fromAI(\"participant_action_items\",\"participant action items \",\"string\") }}",
    "options": {
      "appendAttribution": false
    },
    "subject": "Meeting Summary",
    "emailType": "text",
    "descriptionType": "manual",
    "toolDescription": "=Use the tool to notify a participant of the meeting with meeting summary and his tasks.\nIMPORTANT: \n1. Please notify participants except for me. My email: [YOUR EMAIL HERE]\n2. When working with tasks - please send only the participant's tasks."
  },
  "credentials": {
    "gmailOAuth2": {
      "id": "LhdnHxP8WcSDEHw3",
      "name": "Gmail account 3"
    }
  },
  "typeVersion": 2.1
}

================ Node #1890 ================
{
  "id": "094a0e52-a4fa-4078-9b96-80568acb9c51",
  "name": "Execute Workflow Trigger",
  "type": "n8n-nodes-base.executeWorkflowTrigger",
  "position": [
    460,
    420
  ],
  "parameters": {},
  "typeVersion": 1
}

================ Node #1891 ================
{
  "id": "e59e5a29-4509-45cc-9130-181ea432553c",
  "name": "Split Out",
  "type": "n8n-nodes-base.splitOut",
  "position": [
    680,
    420
  ],
  "parameters": {
    "options": {},
    "fieldToSplitOut": "query.items"
  },
  "typeVersion": 1
}

================ Node #1892 ================
{
  "id": "dc664650-f74e-4574-95a0-dd4a9bf181a1",
  "name": "Create Task",
  "type": "n8n-nodes-base.airtable",
  "position": [
    900,
    420
  ],
  "parameters": {
    "base": {
      "__rl": true,
      "mode": "list",
      "value": "appndgSF4faN4jPXi",
      "cachedResultUrl": "https://airtable.com/appndgSF4faN4jPXi",
      "cachedResultName": "Philipp's Base"
    },
    "table": {
      "__rl": true,
      "mode": "list",
      "value": "tblaCSndQsSF3gq7Z",
      "cachedResultUrl": "https://airtable.com/appndgSF4faN4jPXi/tblaCSndQsSF3gq7Z",
      "cachedResultName": "Tasks"
    },
    "columns": {
      "value": {
        "Name": "={{ $json.name }}",
        "Project": "={{ [$json.project_name] }}",
        "Due Date": "={{ $json.due_date }}",
        "Priority": "={{ $json.priority }}",
        "Description": "={{ $json.description }}"
      },
      "schema": [
        {
          "id": "Name",
          "type": "string",
          "display": true,
          "removed": false,
          "readOnly": false,
          "required": false,
          "displayName": "Name",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "Description",
          "type": "string",
          "display": true,
          "removed": false,
          "readOnly": false,
          "required": false,
          "displayName": "Description",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "Priority",
          "type": "options",
          "display": true,
          "options": [
            {
              "name": "Low",
              "value": "Low"
            },
            {
              "name": "Medium",
              "value": "Medium"
            },
            {
              "name": "Urgent",
              "value": "Urgent"
            },
            {
              "name": "low",
              "value": "low"
            },
            {
              "name": "medium",
              "value": "medium"
            },
            {
              "name": "urgent",
              "value": "urgent"
            }
          ],
          "removed": false,
          "readOnly": false,
          "required": false,
          "displayName": "Priority",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "Due Date",
          "type": "dateTime",
          "display": true,
          "removed": false,
          "readOnly": false,
          "required": false,
          "displayName": "Due Date",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "Project",
          "type": "array",
          "display": true,
          "removed": false,
          "readOnly": false,
          "required": false,
          "displayName": "Project",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        }
      ],
      "mappingMode": "defineBelow",
      "matchingColumns": []
    },
    "options": {
      "typecast": true
    },
    "operation": "create"
  },
  "credentials": {
    "airtableTokenApi": {
      "id": "XT7hvl1w201jtBhx",
      "name": "Philipp Airtable Personal Access Token account"
    }
  },
  "typeVersion": 2.1
}

================ Node #1893 ================
{
  "id": "6d6f9094-b0b3-495e-ade8-d80c03e727b0",
  "name": "Create Event",
  "type": "n8n-nodes-base.googleCalendarTool",
  "position": [
    1340,
    40
  ],
  "parameters": {
    "end": "={{ $fromAI(\"end_date_time\",\"Date and time of meeting end\",\"string\") }}",
    "start": "={{ $fromAI(\"start_date_time\",\"Date and time of meeting start\",\"string\") }}",
    "calendar": {
      "__rl": true,
      "mode": "list",
      "value": "philipp@lowcoding.dev",
      "cachedResultName": "philipp@lowcoding.dev"
    },
    "descriptionType": "manual",
    "toolDescription": "=Use tool to create Google Calendar Event. Use this tool only when transcript contains information that call should be scheduled.",
    "additionalFields": {
      "summary": "={{ $fromAI(\"meeting_name\",\"Meeting name\",\"string\") }}",
      "attendees": [
        "={{ $fromAI(\"email\",\"client email\",\"string\") }}"
      ],
      "conferenceDataUi": {
        "conferenceDataValues": {
          "conferenceSolution": "hangoutsMeet"
        }
      }
    }
  },
  "credentials": {
    "googleCalendarOAuth2Api": {
      "id": "E5Ufn31vrZLKzh4n",
      "name": "Google Calendar account"
    }
  },
  "typeVersion": 1.2
}

================ Node #1894 ================
{
  "id": "2406fc01-fd28-403c-9378-473e8748e0dd",
  "name": "Webhook",
  "type": "n8n-nodes-base.webhook",
  "position": [
    480,
    -240
  ],
  "webhookId": "df852a9f-5ea3-43f2-bd49-d045aba5e9c9",
  "parameters": {
    "path": "df852a9f-5ea3-43f2-bd49-d045aba5e9c9",
    "options": {},
    "httpMethod": "POST"
  },
  "typeVersion": 2
}

================ Node #1895 ================
{
  "id": "fe28fa98-4946-4379-970e-6df1a79e2a1e",
  "name": "Get Meeting Content",
  "type": "n8n-nodes-base.httpRequest",
  "position": [
    700,
    -240
  ],
  "parameters": {
    "url": "https://api.fireflies.ai/graphql",
    "method": "POST",
    "options": {},
    "jsonBody": "={\n \"query\": \"query Transcript($transcriptId: String!) { transcript(id: $transcriptId) { title participants speakers { id name } sentences { speaker_name text } summary { bullet_gist } } }\",\n \"variables\": {\n \"transcriptId\": \"{{ $json.meetingId }}\"\n }\n}",
    "sendBody": true,
    "sendHeaders": true,
    "specifyBody": "json",
    "headerParameters": {
      "parameters": [
        {
          "name": "Authorization",
          "value": "Bearer [YOUR API KEY HERE]"
        }
      ]
    }
  },
  "typeVersion": 4.2
}

================ Node #1896 ================
{
  "id": "5eadd00a-9095-4bf3-80ed-e7bc5c49390d",
  "name": "Sticky Note",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    620,
    -360
  ],
  "parameters": {
    "color": 4,
    "height": 80,
    "content": "### Replace API key for Fireflies\n"
  },
  "typeVersion": 1
}

================ Node #1897 ================
{
  "id": "93cee18c-2215-4a63-af7b-ddf45729f5e4",
  "name": "Sticky Note1",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    1180,
    200
  ],
  "parameters": {
    "color": 4,
    "height": 80,
    "content": "### Replace connections for Airtable and Google\n"
  },
  "typeVersion": 1
}

================ Node #1898 ================
{
  "id": "4d792723-4507-486f-9dc7-62bf1b927edd",
  "name": "Sticky Note2",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    380,
    340
  ],
  "parameters": {
    "width": 820,
    "height": 280,
    "content": "### Scenario 2 - Create Tasks tool"
  },
  "typeVersion": 1
}

================ Node #1899 ================
{
  "id": "c5520210-86db-4639-9f8c-ac9055407232",
  "name": "Sticky Note3",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    380,
    -460
  ],
  "parameters": {
    "width": 1100,
    "height": 760,
    "content": "### Scenario 1 - AI agent"
  },
  "typeVersion": 1
}

================ Node #1900 ================
{
  "id": "48d47e44-b7bf-49b3-814b-6969ce97108d",
  "name": "Sticky Note4",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    800,
    180
  ],
  "parameters": {
    "color": 4,
    "height": 80,
    "content": "### Replace OpenAI connection\n"
  },
  "typeVersion": 1
}

================ Node #1901 ================
{
  "id": "afe4bffa-8937-4c31-8513-0acc6b8858ce",
  "name": "Sticky Note5",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    -360,
    60
  ],
  "parameters": {
    "color": 7,
    "width": 280,
    "height": 566,
    "content": "### Set up steps\n\n#### Preparation\n1. **Create Accounts**:\n - [N8N](https://n8n.partnerlinks.io/2hr10zpkki6a): For workflow automation.\n - [Airtable](https://airtable.com/): For database hosting and management.\n - [Fireflies](https://fireflies.ai/): For recording meetings.\n\n#### N8N Workflow\n\n1. **Configure the Webhook**: \n - Set up a webhook to capture meeting completion events and integrate it with Fireflies.\n\n2. **Retrieve Meeting Content**: \n - Use GraphQL API requests to extract meeting details and transcripts, ensuring appropriate authentication through Bearer tokens.\n\n3. **AI Processing Setup**: \n - Define system messages for AI tasks and configure connections to the AI chat model (e.g., OpenAI's GPT) to process transcripts.\n\n4. **Task Creation Logic**: \n - Create structured tasks based on AI output, ensuring necessary details are captured and records are created in Airtable.\n\n5. **Client Notifications**: \n - Use an email node to notify clients about their tasks, ensuring communications are client-specific.\n\n6. **Scheduling Follow-Up Calls**: \n - Set up Google Calendar events if follow-up meetings are required, populating details from the original meeting context.\n\n7. **Final Testing**: \n - Conduct tests to ensure each part of the workflow is functional and seamless, making adjustments as needed based on feedback."
  },
  "typeVersion": 1
}

================ Node #1902 ================
{
  "id": "cbb81fa7-4a97-4a7e-82ce-05250b2c82cf",
  "name": "Sticky Note6",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    -360,
    -460
  ],
  "parameters": {
    "color": 7,
    "width": 636.2128494576581,
    "height": 497.1532689930921,
    "content": "![5min Logo](https://cflobdhpqwnoisuctsoc.supabase.co/storage/v1/object/public/my_storage/banner.png)\n## AI Agent for project management and meetings with Airtable and Fireflies\n**Made by [Philipp Bekher](https://www.linkedin.com/in/philipp-bekher-5437171a4/) from community [5minAI](https://www.skool.com/5minai-2861)**\n\nManaging action items from meetings can often lead to missed tasks and poor follow-up. This automation alleviates that issue by automatically generating tasks from meeting transcripts, keeping everyone informed about their responsibilities and streamlining communication.\n\nThe workflow leverages n8n to create a Smart Agent that listens for completed meeting transcripts, processes them using AI, and generates tasks in Airtable. Key functionalities include:\n- Capturing completed meeting events through webhooks.\n- Extracting relevant meeting details such as transcripts and participants using API calls.\n- Generating structured tasks from meeting discussions and sending notifications to clients.\n\n"
  },
  "typeVersion": 1
}

================ Node #1903 ================
{
  "id": "6d367721-875d-4d43-bd55-9801796a0e9f",
  "name": "Sticky Note7",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    -60,
    60
  ],
  "parameters": {
    "color": 7,
    "width": 330.5152611046425,
    "height": 239.5888196628349,
    "content": "### ... or watch set up video [10 min]\n[![Youtube Link](https://cflobdhpqwnoisuctsoc.supabase.co/storage/v1/object/public/my_storage/Video%2011%20-%20Fireflies%20Agent%20Blur.png)](https://www.youtube.com/watch?v=0TyX7G00x3A)\n"
  },
  "typeVersion": 1
}

================ Node #1904 ================
{
  "id": "d44489b8-8cb7-4776-8c16-a8bb01e52171",
  "name": "OpenAI1",
  "type": "@n8n/n8n-nodes-langchain.openAi",
  "position": [
    300,
    -300
  ],
  "parameters": {
    "text": "={{ \n JSON.parse($('Insert Transcription Part').item.json.dialog)\n .filter(item => item.date_updated && new Date(item.date_updated) >= new Date($('Insert Transcription Part').item.json.date_updated))\n .sort((a, b) => a.order - b.order)\n .map(item => `${item.words}\\n${item.speaker}`)\n .join('\\n\\n')\n}}",
    "memory": "threadId",
    "prompt": "define",
    "options": {},
    "resource": "assistant",
    "threadId": "={{ $json.thread_id }}",
    "assistantId": {
      "__rl": true,
      "mode": "list",
      "value": "asst_D5t6bNnNpenmfC7PmvywMqyR",
      "cachedResultName": "5minAI - Realtime Agent"
    }
  },
  "credentials": {
    "openAiApi": {
      "id": "SphXAX7rlwRLkiox",
      "name": "Test club key"
    }
  },
  "typeVersion": 1.6
}

================ Node #1905 ================
{
  "id": "3425f1c1-ad68-495e-bb9a-95ea92e7cf23",
  "name": "Insert Transcription Part",
  "type": "n8n-nodes-base.postgres",
  "position": [
    -120,
    -300
  ],
  "parameters": {
    "query": "UPDATE public.data\nSET output = jsonb_set(\n output,\n '{dialog}', \n (\n COALESCE(\n (output->'dialog')::jsonb, \n '[]'::jsonb -- Initialize as empty array if dialog does not exist\n ) || jsonb_build_object(\n 'order', (COALESCE(jsonb_array_length(output->'dialog'), 0) + 1), -- Calculate the next order\n 'words', '{{ $('Webhook2').item.json.body.data.transcript.words.map(word => word.text.replace(/'/g, \"''\")).join(\" \") }}',\n 'speaker', '{{ $('Webhook2').item.json.body.data.transcript.speaker }}',\n 'language', '{{ $('Webhook2').item.json.body.data.transcript.language }}',\n 'speaker_id', ('{{ $('Webhook2').item.json.body.data.transcript.speaker_id }}')::int,\n 'date_updated', to_jsonb('{{ $now }}'::text)\n )\n )\n)\nWHERE input->>'recall_bot_id' = $1\nReturning input->>'openai_thread_id' as thread_id;",
    "options": {
      "queryReplacement": "={{ $('Scenario 2 Start - Webhook').item.json.body.data.bot_id }}"
    },
    "operation": "executeQuery"
  },
  "credentials": {
    "postgres": {
      "id": "AO9cER6p8uX7V07T",
      "name": "Postgres 5minai"
    }
  },
  "typeVersion": 2.5
}

================ Node #1906 ================
{
  "id": "9bcc0605-fc35-4842-a3f4-30ef902f35c1",
  "name": "Create Note",
  "type": "n8n-nodes-base.postgresTool",
  "position": [
    180,
    -120
  ],
  "parameters": {
    "query": "UPDATE public.data\nSET output = jsonb_set(\n output,\n '{notes}', \n (\n COALESCE(\n (output->'notes')::jsonb, \n '[]'::jsonb -- Initialize as empty array if dialog does not exist\n ) || jsonb_build_object(\n 'order', (COALESCE(jsonb_array_length(output->'notes'), 0) + 1), -- Calculate the next order\n 'text', '{{ $fromAI(\"note\",\"Text of note.\") }}'\n )\n )\n)\nWHERE input->>'recall_bot_id' = $1",
    "options": {
      "queryReplacement": "={{ $('Scenario 2 Start - Webhook').item.json.body.data.bot_id }}"
    },
    "operation": "executeQuery",
    "descriptionType": "manual",
    "toolDescription": "Create note record."
  },
  "credentials": {
    "postgres": {
      "id": "AO9cER6p8uX7V07T",
      "name": "Postgres 5minai"
    }
  },
  "typeVersion": 2.5
}

================ Node #1907 ================
{
  "id": "0831c139-ca4b-4b4c-aa7f-7495c4ca0110",
  "name": "Create Recall bot",
  "type": "n8n-nodes-base.httpRequest",
  "position": [
    -60,
    -980
  ],
  "parameters": {
    "url": "https://us-west-2.recall.ai/api/v1/bot",
    "method": "POST",
    "options": {},
    "jsonBody": "={\n \"meeting_url\":\"{{ $json.meeting_url }}\",\n \"transcription_options\": {\n \"provider\": \"assembly_ai\"\n }\n,\n\"real_time_transcription\": {\n \"destination_url\": \"https://n8n.lowcoding.dev/webhook/d074ca1e-52f9-47af-8587-8c24d431f9cd\"\n },\n\"automatic_leave\": {\n \"silence_detection\": {\n \"timeout\": 300, \n \"activate_after\": 600\n },\n \"bot_detection\": {\n \"using_participant_events\": {\n \"timeout\": 600, \n \"activate_after\": 1200\n }\n },\n \"waiting_room_timeout\": 600,\n \"noone_joined_timeout\": 600,\n \"everyone_left_timeout\": 2,\n \"in_call_not_recording_timeout\": 600,\n \"recording_permission_denied_timeout\": 600\n}\n}",
    "sendBody": true,
    "specifyBody": "json",
    "authentication": "genericCredentialType",
    "genericAuthType": "httpHeaderAuth"
  },
  "credentials": {
    "httpHeaderAuth": {
      "id": "lfHu7Kn7L7SH3LAF",
      "name": "Recall"
    }
  },
  "typeVersion": 4.2
}

================ Node #1908 ================
{
  "id": "e1122b5b-3af5-4836-802c-40c3a0eb3c93",
  "name": "Create OpenAI thread",
  "type": "n8n-nodes-base.httpRequest",
  "position": [
    140,
    -980
  ],
  "parameters": {
    "url": "https://api.openai.com/v1/threads",
    "method": "POST",
    "options": {},
    "sendHeaders": true,
    "authentication": "predefinedCredentialType",
    "headerParameters": {
      "parameters": [
        {
          "name": "OpenAI-Beta",
          "value": "assistants=v2"
        }
      ]
    },
    "nodeCredentialType": "openAiApi"
  },
  "credentials": {
    "openAiApi": {
      "id": "SphXAX7rlwRLkiox",
      "name": "Test club key"
    }
  },
  "typeVersion": 4.2
}

================ Node #1909 ================
{
  "id": "784c123d-adbb-4265-9485-2c88dd3091c2",
  "name": "Create data record",
  "type": "n8n-nodes-base.supabase",
  "position": [
    320,
    -980
  ],
  "parameters": {
    "tableId": "data",
    "fieldsUi": {
      "fieldValues": [
        {
          "fieldId": "input",
          "fieldValue": "={{ {\"openai_thread_id\": $('Create OpenAI thread').item.json.id, \"recall_bot_id\": $('Create Recall bot').item.json.id, \"meeting_url\":$('Webhook').item.json.body.meeting_url } }}"
        },
        {
          "fieldId": "output",
          "fieldValue": "={{ {\"dialog\":[]} }}"
        }
      ]
    }
  },
  "credentials": {
    "supabaseApi": {
      "id": "iVKNf5qv3ZFhq0ZV",
      "name": "Supabase 5minAI"
    }
  },
  "typeVersion": 1
}

================ Node #1910 ================
{
  "id": "f455c7de-1e64-4a28-9eef-11d19c982813",
  "name": "Sticky Note9",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    -900,
    -380
  ],
  "parameters": {
    "color": 7,
    "width": 330.5152611046425,
    "height": 239.5888196628349,
    "content": "### ... or watch set up video [10 min]\n[![Youtube Thumbnail](https://res.cloudinary.com/de9jgixzm/image/upload/v1739773273/Youtube%20Thumbs/Realtim%20AI%20Agent.png)](https://www.youtube.com/watch?v=rtaX6BMiTeo)\n"
  },
  "typeVersion": 1
}

================ Node #1911 ================
{
  "id": "ea90c110-18ad-4f4b-90ab-fcb88b92e709",
  "name": "Sticky Note7",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    -1200,
    -1060
  ],
  "parameters": {
    "color": 7,
    "width": 636,
    "height": 657,
    "content": "![5min Logo](https://res.cloudinary.com/de9jgixzm/image/upload/v1739773200/Skool%20Assets/ejm3hqnvhgwpnu2fv92s.png)\n## AI Agent for realtime insights on meetings\n**Made by [Mark Shcherbakov](https://www.linkedin.com/in/marklowcoding/) from community [5minAI](https://www.skool.com/5minai)**\n\nTranscribing meetings manually can be tedious and prone to error. This workflow automates the transcription process in real-time, ensuring that key discussions and decisions are accurately captured and easily accessible for later review, thus enhancing productivity and clarity in communications.\n\nThe workflow employs an AI-powered assistant to join virtual meetings and capture discussions through real-time transcription. Key functionalities include:\n- Automatic joining of meetings on platforms like Zoom, Google Meet, and others with the ability to provide real-time transcription.\n- Integration with transcription APIs (e.g., AssemblyAI) to deliver seamless and accurate capture of dialogue.\n- Structuring and storing transcriptions efficiently in a database for easy retrieval and analysis.\n\n1. **Real-Time Transcription**: The assistant captures audio during meetings and transcribes it in real-time, allowing participants to focus on discussions.\n2. **Keyword Recognition**: Key phrases can trigger specific actions, such as noting important points or making prompts to the assistant.\n3. **Structured Data Management**: The assistant maintains a database of transcriptions linked to meeting details for organized storage and quick access later."
  },
  "typeVersion": 1
}

================ Node #1912 ================
{
  "id": "378c19bb-0e4a-43d3-9ba5-2a77ebfb5b83",
  "name": "Sticky Note6",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    -1200,
    -380
  ],
  "parameters": {
    "color": 7,
    "width": 280,
    "height": 626,
    "content": "### Set up steps\n\n#### Preparation\n\n1. **Create Recall.ai API key**\n2. **Setup Supabase account and table**\n```\ncreate table\n public.data (\n id uuid not null default gen_random_uuid (),\n date_created timestamp with time zone not null default (now() at time zone 'utc'::text),\n input jsonb null,\n output jsonb null,\n constraint data_pkey primary key (id),\n ) tablespace pg_default;\n\n```\n3. **Create OpenAI API key**\n\n#### Development\n\n1. **Bot Creation**: \n - Use a node to create the bot that will join meetings. Provide the meeting URL and set transcription options within the API request.\n\n2. **Authentication**: \n - Configure authentication settings via a Bearer token for interacting with your transcription service.\n\n3. **Webhook Setup**: \n - Create a webhook to receive real-time transcription updates, ensuring timely data capture during meetings.\n\n4. **Join Meeting**: \n - Set the bot to join the specified meeting and actively listen to capture conversations.\n\n5. **Transcription Handling**: \n - Combine transcription fragments into cohesive sentences and manage dialog arrays for coherence.\n\n6. **Trigger Actions on Keywords**: \n - Set up keyword recognition that can initiate requests to the OpenAI API for additional interactions based on captured dialogue.\n\n7. **Output and Summary Generation**: \n - Produce insights and summary notes from the transcriptions that can be stored back into the database for future reference."
  },
  "typeVersion": 1
}

================ Node #1913 ================
{
  "id": "9a4ff741-ccfd-42e9-883e-43297a73e2c3",
  "name": "Scenario 1 Start - Edit Fields",
  "type": "n8n-nodes-base.set",
  "position": [
    -260,
    -980
  ],
  "parameters": {
    "options": {},
    "assignments": {
      "assignments": [
        {
          "id": "4891fa6e-2dd5-4433-925c-5497ec82e8ab",
          "name": "meeting_url",
          "type": "string",
          "value": "https://meet.google.com/iix-vrav-kuc"
        }
      ]
    }
  },
  "typeVersion": 3.4
}

================ Node #1914 ================
{
  "id": "a4368763-b96e-45e7-884d-aa0cbae2d276",
  "name": "Scenario 2 Start - Webhook",
  "type": "n8n-nodes-base.webhook",
  "position": [
    -320,
    -300
  ],
  "webhookId": "7f176935-cb83-4147-ac14-48c8d747863a",
  "parameters": {
    "path": "d074ca1e-52f9-47af-8587-8c24d431f9cd",
    "options": {},
    "httpMethod": "POST"
  },
  "typeVersion": 2
}

================ Node #1915 ================
{
  "id": "107b26af-d1d2-40c7-ad4f-7193d3ae9b70",
  "name": "If Jimmy word",
  "type": "n8n-nodes-base.if",
  "position": [
    80,
    -300
  ],
  "parameters": {
    "options": {},
    "conditions": {
      "options": {
        "version": 2,
        "leftValue": "",
        "caseSensitive": true,
        "typeValidation": "strict"
      },
      "combinator": "and",
      "conditions": [
        {
          "id": "ba6c2ae5-d0f4-4242-9cf8-97cb84335a93",
          "operator": {
            "type": "string",
            "operation": "contains"
          },
          "leftValue": "={{ $('Scenario 2 Start - Webhook').item.json.body.data.transcript.words.map(word => word.text.replace(/'/g, \"''\")).join(\" \") }}",
          "rightValue": "=Jimmy"
        }
      ]
    }
  },
  "typeVersion": 2.2
}

================ Node #1916 ================
{
  "id": "49cf34f6-86cf-42cc-9da4-3efb37e6f565",
  "name": "Sticky Note",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    -380,
    -1040
  ],
  "parameters": {
    "width": 920,
    "height": 400,
    "content": "## Scenario 1\n\n"
  },
  "typeVersion": 1
}

================ Node #1917 ================
{
  "id": "34660f39-6ecc-4f2d-98e8-a2c529255e98",
  "name": "Sticky Note1",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    -380,
    -360
  ],
  "parameters": {
    "width": 1020,
    "height": 420,
    "content": "## Scenario 2\n\n"
  },
  "typeVersion": 1
}

================ Node #1918 ================
{
  "id": "5027e72d-2b2c-40b4-921e-c4f40d85f251",
  "name": "Sticky Note2",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    -200,
    -120
  ],
  "parameters": {
    "color": 3,
    "width": 270,
    "height": 80,
    "content": "### Replace Supabase credentials"
  },
  "typeVersion": 1
}

================ Node #1919 ================
{
  "id": "dddea341-da40-4b6a-ae25-a8417e869cc9",
  "name": "Sticky Note3",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    -100,
    -780
  ],
  "parameters": {
    "color": 3,
    "width": 200,
    "height": 80,
    "content": "### Replace server location\n\n"
  },
  "typeVersion": 1
}

================ Node #1920 ================
{
  "id": "e8e76c2a-f949-400e-92b2-39da8034b471",
  "name": "Sticky Note4",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    340,
    -100
  ],
  "parameters": {
    "color": 4,
    "width": 270,
    "height": 80,
    "content": "### Replace OpenAI credentials"
  },
  "typeVersion": 1
}

================ Node #1921 ================
{
  "id": "729a5f6e-5aea-4908-9a82-2a7d7bea1322",
  "name": "Sticky Note5",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    140,
    -780
  ],
  "parameters": {
    "color": 3,
    "width": 290,
    "height": 80,
    "content": "### Replace credentials"
  },
  "typeVersion": 1
}

================ Node #1922 ================
{
  "id": "31178e90-62ce-4bf8-8381-dc8138088889",
  "name": "Sticky Note8",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    -320,
    -780
  ],
  "parameters": {
    "color": 3,
    "width": 200,
    "height": 80,
    "content": "### Replace meeting url\n\n"
  },
  "typeVersion": 1
}

================ Node #1923 ================
{
  "id": "20d35d68-db49-4183-a913-85ad06c13912",
  "name": "Extract First Url Match",
  "type": "n8n-nodes-base.html",
  "position": [
    1820,
    540
  ],
  "parameters": {
    "options": {},
    "operation": "extractHtmlContent",
    "extractionValues": {
      "values": [
        {
          "key": "Url Find ",
          "attribute": "href",
          "cssSelector": "=a[href*=\"https://\"][href*=\"{{ $('Edit Fields (For testing prupose )').item.json['Website Domaine'] }}\"]\n",
          "returnArray": true,
          "returnValue": "attribute"
        }
      ]
    }
  },
  "typeVersion": 1.2
}

================ Node #1924 ================
{
  "id": "9167ea20-fc9c-4d75-bf4d-bb2016079dd0",
  "name": "OpenAI Chat Model",
  "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
  "position": [
    2060,
    700
  ],
  "parameters": {
    "model": "gpt-4o",
    "options": {}
  },
  "credentials": {
    "openAiApi": {
      "id": "FmszNHDDVS32ud21",
      "name": "OpenAi account"
    }
  },
  "typeVersion": 1
}

================ Node #1925 ================
{
  "id": "42a8646d-1b0b-4309-a87d-9c8aeb355a28",
  "name": "Clean Webdriver ",
  "type": "n8n-nodes-base.httpRequest",
  "notes": "Script to delete traces of selenium in the browser ",
  "position": [
    3120,
    560
  ],
  "parameters": {
    "url": "=http://selenium_chrome:4444/wd/hub/session/{{ $('Create Selenium Session').item.json.value.sessionId }}/execute/sync",
    "method": "POST",
    "options": {},
    "jsonBody": "{\n \"script\": \"Object.defineProperty(navigator, 'webdriver', { get: () => undefined }); window.navigator.chrome = { runtime: {} }; Object.defineProperty(navigator, 'languages', { get: () => ['en-US', 'en'] }); Object.defineProperty(navigator, 'plugins', { get: () => [1, 2, 3, 4, 5] });\",\n \"args\": []\n}\n",
    "sendBody": true,
    "specifyBody": "json"
  },
  "notesInFlow": false,
  "typeVersion": 4.2
}

================ Node #1926 ================
{
  "id": "107dd8de-e341-4819-a493-94ed57fd0f33",
  "name": "Delete Session",
  "type": "n8n-nodes-base.httpRequest",
  "position": [
    5180,
    920
  ],
  "parameters": {
    "url": "=http://selenium_chrome:4444/wd/hub/session/{{ $('Create Selenium Session').item.json.value.sessionId }}",
    "method": "DELETE",
    "options": {}
  },
  "typeVersion": 4.2
}

================ Node #1927 ================
{
  "id": "8c7ec6bc-d417-48c2-a6f2-ecce27803671",
  "name": "Delete Session2",
  "type": "n8n-nodes-base.httpRequest",
  "position": [
    6740,
    -160
  ],
  "parameters": {
    "url": "=http://selenium_chrome:4444/wd/hub/session/{{ $('Create Selenium Session').item.json.value.sessionId }}",
    "method": "DELETE",
    "options": {}
  },
  "typeVersion": 4.2
}

================ Node #1928 ================
{
  "id": "e43ecd94-b7f2-4f73-a9fa-b829de9e0296",
  "name": "If Block1",
  "type": "n8n-nodes-base.if",
  "position": [
    6520,
    -20
  ],
  "parameters": {
    "options": {},
    "conditions": {
      "options": {
        "version": 2,
        "leftValue": "",
        "caseSensitive": true,
        "typeValidation": "strict"
      },
      "combinator": "and",
      "conditions": [
        {
          "id": "e6e6e15d-1cfe-48be-8ea0-f112e9781c9d",
          "operator": {
            "name": "filter.operator.equals",
            "type": "string",
            "operation": "equals"
          },
          "leftValue": "={{ $json.content }}",
          "rightValue": "BLOCK"
        }
      ]
    }
  },
  "typeVersion": 2.2
}

================ Node #1929 ================
{
  "id": "08e46f63-41b5-4606-8f2c-df9e96c9c34e",
  "name": "Delete Session3",
  "type": "n8n-nodes-base.httpRequest",
  "position": [
    6740,
    60
  ],
  "parameters": {
    "url": "=http://selenium_chrome:4444/wd/hub/session/{{ $('Create Selenium Session').item.json.value.sessionId }}",
    "method": "DELETE",
    "options": {}
  },
  "typeVersion": 4.2
}

================ Node #1930 ================
{
  "id": "b47d9b22-9a59-4c7a-8cba-9487f18207ee",
  "name": "Limit",
  "type": "n8n-nodes-base.limit",
  "position": [
    5120,
    -100
  ],
  "parameters": {},
  "typeVersion": 1
}

================ Node #1931 ================
{
  "id": "541622f7-562b-4e8a-93e5-61e6e918ff52",
  "name": "Delete Session1",
  "type": "n8n-nodes-base.httpRequest",
  "position": [
    5180,
    720
  ],
  "parameters": {
    "url": "=http://selenium_chrome:4444/wd/hub/session/{{ $('Create Selenium Session').item.json.value.sessionId }}",
    "method": "DELETE",
    "options": {}
  },
  "typeVersion": 4.2
}

================ Node #1932 ================
{
  "id": "825be0d7-9dd3-4a2f-8c3d-fd405f59a5d6",
  "name": "Delete Session4",
  "type": "n8n-nodes-base.httpRequest",
  "onError": "continueRegularOutput",
  "position": [
    5780,
    260
  ],
  "parameters": {
    "url": "=http://selenium_chrome:4444/wd/hub/session/{{ $('Create Selenium Session').item.json.value.sessionId }}",
    "method": "DELETE",
    "options": {}
  },
  "retryOnFail": false,
  "typeVersion": 4.2
}

================ Node #1933 ================
{
  "id": "56f6f4f6-f737-4de8-bdfe-029546909677",
  "name": "Success with cookie",
  "type": "n8n-nodes-base.respondToWebhook",
  "position": [
    7260,
    60
  ],
  "parameters": {
    "options": {
      "responseCode": 200
    }
  },
  "typeVersion": 1.1
}

================ Node #1934 ================
{
  "id": "c6939773-e230-45e1-bf76-d0299c2c7066",
  "name": "Respond to Webhook2",
  "type": "n8n-nodes-base.respondToWebhook",
  "position": [
    6920,
    -160
  ],
  "parameters": {
    "options": {
      "responseCode": 200
    },
    "respondWith": "json",
    "responseBody": "{\n \"Success \": \"Request has been block by the targeted website\"\n}"
  },
  "typeVersion": 1.1
}

================ Node #1935 ================
{
  "id": "ea921f11-323f-4c79-8cc6-779b39498b05",
  "name": "Code",
  "type": "n8n-nodes-base.code",
  "position": [
    4700,
    -100
  ],
  "parameters": {
    "jsCode": "// R\u00e9cup\u00e8re les donn\u00e9es du n\u0153ud Webhook (en rempla\u00e7ant \"Webhook\" par le nom du n\u0153ud Webhook dans votre workflow)\nconst webhookData = $node[\"Webhook\"].json;\n\n// Fonction pour convertir la valeur de sameSite\nfunction convertSameSite(value) {\n // Conversion sp\u00e9cifique des valeurs de sameSite\n const conversionMap = {\n \"unspecified\": \"None\",\n \"lax\": \"Lax\",\n \"strict\": \"Strict\"\n };\n \n // Si la valeur existe dans le tableau de conversion, on la convertit\n if (value in conversionMap) {\n return conversionMap[value];\n }\n \n // Si la valeur est d\u00e9j\u00e0 une des valeurs accept\u00e9es par Selenium\n const allowedValues = [\"Strict\", \"Lax\", \"None\"];\n if (allowedValues.includes(value)) {\n return value;\n } else {\n // Si la valeur n'est pas reconnue, on la remplace par \"Lax\" (par d\u00e9faut)\n return \"Lax\";\n }\n}\n\n// V\u00e9rifiez et traitez les donn\u00e9es des cookies\nif (webhookData.body && webhookData.body.cookies) {\n let items = [];\n for (const cookieObject of webhookData.body.cookies) {\n if (cookieObject.cookie) {\n // Convertir la valeur de sameSite\n cookieObject.cookie.sameSite = convertSameSite(cookieObject.cookie.sameSite);\n \n // Ajouter le cookie \u00e0 la liste des items\n items.push({\n json: cookieObject.cookie\n });\n }\n }\n return items;\n}\n\n// Si les cookies ne sont pas trouv\u00e9s, renvoyer un tableau vide\nreturn [];\n"
  },
  "typeVersion": 2
}

================ Node #1936 ================
{
  "id": "c3d77928-eefc-4903-9b4f-b14bd6f34e3c",
  "name": "Delete Session5",
  "type": "n8n-nodes-base.httpRequest",
  "onError": "continueRegularOutput",
  "position": [
    3940,
    360
  ],
  "parameters": {
    "url": "=http://selenium_chrome:4444/wd/hub/session/{{ $('Create Selenium Session').item.json.value.sessionId }}",
    "method": "DELETE",
    "options": {}
  },
  "retryOnFail": false,
  "typeVersion": 4.2
}

================ Node #1937 ================
{
  "id": "036cfce6-8082-4539-bb0e-980368679fe5",
  "name": "Error",
  "type": "n8n-nodes-base.respondToWebhook",
  "position": [
    4120,
    360
  ],
  "parameters": {
    "options": {
      "responseCode": 404
    },
    "respondWith": "json",
    "responseBody": "{\n \"Error\": \"Cookies are note for the targeted url\"\n}"
  },
  "typeVersion": 1.1
}

================ Node #1938 ================
{
  "id": "09d6a99b-d8b3-40c9-b74a-14014e3647e2",
  "name": "Error1",
  "type": "n8n-nodes-base.respondToWebhook",
  "position": [
    6000,
    260
  ],
  "parameters": {
    "options": {
      "responseCode": 500
    }
  },
  "typeVersion": 1.1
}

================ Node #1939 ================
{
  "id": "0b1f3442-6b70-405f-b597-642e9c982b82",
  "name": "Error2",
  "type": "n8n-nodes-base.respondToWebhook",
  "position": [
    3060,
    780
  ],
  "parameters": {
    "options": {
      "responseCode": 500
    }
  },
  "typeVersion": 1.1
}

================ Node #1940 ================
{
  "id": "4d0112bb-cbfd-45c6-961a-964bd8f59cac",
  "name": "If",
  "type": "n8n-nodes-base.if",
  "position": [
    3760,
    200
  ],
  "parameters": {
    "options": {},
    "conditions": {
      "options": {
        "version": 2,
        "leftValue": "",
        "caseSensitive": true,
        "typeValidation": "strict"
      },
      "combinator": "and",
      "conditions": [
        {
          "id": "1bffbc80-9913-46e7-a594-ebc26948c83b",
          "operator": {
            "type": "string",
            "operation": "contains"
          },
          "leftValue": "={{ $('Webhook').item.json.body.cookies[0].cookie.domain }}",
          "rightValue": "={{ $('Webhook').item.json.body.Url }}"
        }
      ]
    }
  },
  "typeVersion": 2.2
}

================ Node #1941 ================
{
  "id": "58a50b80-df4c-4b6f-a682-72237f4dbdef",
  "name": "Inject Cookie",
  "type": "n8n-nodes-base.httpRequest",
  "onError": "continueRegularOutput",
  "position": [
    4900,
    -100
  ],
  "parameters": {
    "url": "=http://selenium_chrome:4444/wd/hub/session/{{ $('Create Selenium Session').item.json.value.sessionId }}/cookie",
    "method": "POST",
    "options": {},
    "jsonBody": "={\n \"cookie\": {\n \"name\": \"{{ $json.name }}\",\n \"value\": \"{{ $json.value }}\",\n \"domain\": \"{{ $json.domain }}\",\n \"path\": \"{{ $json.path }}\",\n \"secure\": {{ $json.secure }},\n \"httpOnly\": {{ $json.httpOnly }},\n \"sameSite\": \"{{ $json.sameSite }}\",\n \"expirationDate\": {{ $json.expirationDate }}\n }\n}",
    "sendBody": true,
    "specifyBody": "json"
  },
  "typeVersion": 4.2
}

================ Node #1942 ================
{
  "id": "39f7401b-b6b7-4f0c-9afc-8f144d394350",
  "name": "Respond to Webhook3",
  "type": "n8n-nodes-base.respondToWebhook",
  "position": [
    5400,
    720
  ],
  "parameters": {
    "options": {
      "responseCode": 200
    },
    "respondWith": "json",
    "responseBody": "{\n \"Success \": \"Request has been block by the targeted website\"\n}"
  },
  "typeVersion": 1.1
}

================ Node #1943 ================
{
  "id": "80b107cc-2f6c-46f0-a597-e85594634492",
  "name": "Success",
  "type": "n8n-nodes-base.respondToWebhook",
  "position": [
    5740,
    920
  ],
  "parameters": {
    "options": {
      "responseKey": "={{ $json.output }}",
      "responseCode": 200
    }
  },
  "typeVersion": 1.1
}

================ Node #1944 ================
{
  "id": "94a97354-07d9-428e-989c-ef066f9b4d8a",
  "name": "Go on url",
  "type": "n8n-nodes-base.httpRequest",
  "onError": "continueErrorOutput",
  "position": [
    3900,
    780
  ],
  "parameters": {
    "url": "=http://selenium_chrome:4444/wd/hub/session/{{ $('Create Selenium Session').item.json.value.sessionId }}/url",
    "method": "POST",
    "options": {},
    "jsonBody": "={\n \"url\": \"{{ $('Webhook').item.json.body['Target Url'] }}\"\n}\n",
    "sendBody": true,
    "specifyBody": "json"
  },
  "retryOnFail": true,
  "typeVersion": 4.2
}

================ Node #1945 ================
{
  "id": "fd044cf3-594d-48af-bbd1-f2d9adedcbc1",
  "name": "Delete Session6",
  "type": "n8n-nodes-base.httpRequest",
  "onError": "continueRegularOutput",
  "position": [
    4360,
    1200
  ],
  "parameters": {
    "url": "=http://selenium_chrome:4444/wd/hub/session/{{ $('Create Selenium Session').item.json.value.sessionId }}",
    "method": "DELETE",
    "options": {}
  },
  "retryOnFail": false,
  "typeVersion": 4.2
}

================ Node #1946 ================
{
  "id": "7c28c3b6-1141-4609-8774-cb6b4d842b97",
  "name": "Error3",
  "type": "n8n-nodes-base.respondToWebhook",
  "position": [
    4520,
    1200
  ],
  "parameters": {
    "options": {
      "responseCode": 500
    },
    "respondWith": "json",
    "responseBody": "{\n \"Error\": \"Page crash on the extracted url\"\n}"
  },
  "typeVersion": 1.1
}

================ Node #1947 ================
{
  "id": "52f78923-156f-4861-88ba-f0253c483bd9",
  "name": "Information Extractor",
  "type": "@n8n/n8n-nodes-langchain.informationExtractor",
  "position": [
    2040,
    540
  ],
  "parameters": {
    "text": "={{ $json['Url Find '][1] }}{{ $json['Url Find '][2] }}{{ $json['Url Find '][3] }}",
    "options": {
      "systemPromptTemplate": "=You are an expert extraction algorithm.\nOnly extract relevant url from the unstructured urls array.\nA relevant url is a url whre you can find relevant information about this subject : {{ $('Edit Fields (For testing prupose )').item.json.Subject }}, on this domaine name : {{ $('Edit Fields (For testing prupose )').item.json['Website Domaine'] }}.\nIf you do not know the value of an attribute asked to extract, you need \\ attribute's value as NA."
    },
    "attributes": {
      "attributes": [
        {
          "name": "Good_url_for_etract_information",
          "required": true,
          "description": "=The url where I can extract relevant infroamtion on this subject : {{ $('Edit Fields (For testing prupose )').item.json.Subject }} on this domaine name : {{ $('Edit Fields (For testing prupose )').item.json['Website Domaine'] }}"
        }
      ]
    }
  },
  "typeVersion": 1
}

================ Node #1948 ================
{
  "id": "6ac249e2-a9d8-4590-b050-3a0a2472fa3c",
  "name": "Check if empty of NA",
  "type": "n8n-nodes-base.if",
  "position": [
    2440,
    540
  ],
  "parameters": {
    "options": {},
    "conditions": {
      "options": {
        "version": 2,
        "leftValue": "",
        "caseSensitive": true,
        "typeValidation": "strict"
      },
      "combinator": "or",
      "conditions": [
        {
          "id": "9470fb6c-e367-4af7-a697-275e724fe771",
          "operator": {
            "type": "string",
            "operation": "empty",
            "singleValue": true
          },
          "leftValue": "={{ $json.output.Good_url_for_etract_information }}",
          "rightValue": ""
        },
        {
          "id": "8518e9a9-5b0c-4699-97c5-d9b7b1943918",
          "operator": {
            "name": "filter.operator.equals",
            "type": "string",
            "operation": "equals"
          },
          "leftValue": "={{ $json.output.Good_url_for_etract_information }}",
          "rightValue": "NA"
        }
      ]
    }
  },
  "typeVersion": 2.2
}

================ Node #1949 ================
{
  "id": "f380eff7-3d18-4791-9dac-8a88d3fdcc4f",
  "name": "If Block",
  "type": "n8n-nodes-base.if",
  "position": [
    4960,
    840
  ],
  "parameters": {
    "options": {},
    "conditions": {
      "options": {
        "version": 2,
        "leftValue": "",
        "caseSensitive": true,
        "typeValidation": "strict"
      },
      "combinator": "and",
      "conditions": [
        {
          "id": "e6e6e15d-1cfe-48be-8ea0-f112e9781c9d",
          "operator": {
            "type": "string",
            "operation": "contains"
          },
          "leftValue": "={{ $json.content }}",
          "rightValue": "BLOCK"
        }
      ]
    }
  },
  "typeVersion": 2.2
}

================ Node #1950 ================
{
  "id": "43382397-89b5-4b90-9016-49109ec04baf",
  "name": "Google search Query ",
  "type": "n8n-nodes-base.httpRequest",
  "position": [
    1600,
    540
  ],
  "parameters": {
    "url": "=https://www.google.com/search?q=site:{{ $json['Website Domaine'] }}+{{$json.Subject}}&oq=site&gs_lcrp=EgZjaHJvbWUqCAgAEEUYJxg7MggIABBFGCcYOzIICAEQRRgnGDsyBggCEEUYOzIRCAMQRRg5GEMYyQMYgAQYigUyBggEEEUYQDIGCAUQRRg9MgYIBhBFGD0yBggHEEUYPdIBCDEwNTRqMGo3qAIAsAIA&sourceid=chrome&ie=UTF-8",
    "options": {}
  },
  "typeVersion": 4.2
}

================ Node #1951 ================
{
  "id": "d34256af-1b43-4f64-853c-cf063b8c6b68",
  "name": "Create Selenium Session",
  "type": "n8n-nodes-base.httpRequest",
  "onError": "continueErrorOutput",
  "position": [
    2680,
    640
  ],
  "parameters": {
    "url": "http://selenium_chrome:4444/wd/hub/session",
    "method": "POST",
    "options": {
      "timeout": 5000
    },
    "jsonBody": "{\n \"capabilities\": {\n \"alwaysMatch\": {\n \"browserName\": \"chrome\",\n \"goog:chromeOptions\": {\n \"args\": [ \n \"--disable-blink-features=AutomationControlled\",\n \"--user-agent=Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.3\"\n ]\n }\n }\n }\n}\n",
    "sendBody": true,
    "specifyBody": "json"
  },
  "retryOnFail": true,
  "typeVersion": 4.2
}

================ Node #1952 ================
{
  "id": "4f0f696c-9637-4c7d-82ae-1f5c36bb9cd1",
  "name": "Get ScreenShot 1",
  "type": "n8n-nodes-base.httpRequest",
  "onError": "continueErrorOutput",
  "position": [
    4420,
    840
  ],
  "parameters": {
    "url": "=http://selenium_chrome:4444/wd/hub/session/{{ $('Create Selenium Session').item.json.value.sessionId }}/screenshot",
    "options": {}
  },
  "typeVersion": 4.2
}

================ Node #1953 ================
{
  "id": "ba72c0cf-217a-4411-80f6-ca28ccdb0151",
  "name": "Refresh browser",
  "type": "n8n-nodes-base.httpRequest",
  "onError": "continueErrorOutput",
  "position": [
    5320,
    -100
  ],
  "parameters": {
    "url": "=http:///selenium_chrome:4444/wd/hub/session/{{ $('Create Selenium Session').item.json.value.sessionId }}/refresh",
    "method": "POST",
    "options": {},
    "jsonBody": "{}",
    "sendBody": true,
    "specifyBody": "json"
  },
  "typeVersion": 4.2
}

================ Node #1954 ================
{
  "id": "b6ba7068-399a-467d-ba58-7f47d650e2f1",
  "name": "Get ScreenShot ",
  "type": "n8n-nodes-base.httpRequest",
  "onError": "continueErrorOutput",
  "position": [
    5880,
    -20
  ],
  "parameters": {
    "url": "=http://selenium_chrome:4444/wd/hub/session/{{ $('Create Selenium Session').item.json.value.sessionId }}/screenshot",
    "options": {}
  },
  "typeVersion": 4.2
}

================ Node #1955 ================
{
  "id": "792649be-0ee2-442f-bc21-d0c297cea227",
  "name": "Convert to File",
  "type": "n8n-nodes-base.convertToFile",
  "onError": "continueErrorOutput",
  "position": [
    6160,
    -20
  ],
  "parameters": {
    "options": {},
    "operation": "toBinary",
    "sourceProperty": "value"
  },
  "typeVersion": 1.1
}

================ Node #1956 ================
{
  "id": "49e58759-bedf-4f38-a96c-bd18e67b8aaf",
  "name": "Convert to File1",
  "type": "n8n-nodes-base.convertToFile",
  "onError": "continueErrorOutput",
  "position": [
    4600,
    840
  ],
  "parameters": {
    "options": {},
    "operation": "toBinary",
    "sourceProperty": "value"
  },
  "typeVersion": 1.1
}

================ Node #1957 ================
{
  "id": "3735f5f5-665e-4649-b1c2-84a4a8699f70",
  "name": "Delete Session7",
  "type": "n8n-nodes-base.httpRequest",
  "onError": "continueRegularOutput",
  "position": [
    2920,
    780
  ],
  "parameters": {
    "url": "=http://selenium_chrome:4444/wd/hub/session/{{ $('Create Selenium Session').item.json.value.sessionId }}",
    "method": "DELETE",
    "options": {}
  },
  "retryOnFail": false,
  "typeVersion": 4.2
}

================ Node #1958 ================
{
  "id": "1b8b1e0c-f465-4963-869c-0e7086922151",
  "name": "Sticky Note",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    920,
    -1023.3944834469928
  ],
  "parameters": {
    "color": 4,
    "width": 851.2111300888805,
    "height": 1333.3079943516484,
    "content": "## N8N Ultimate Scraper - Workflow\n\nThis workflow's objective is to collect data from any website page, whether it requires login or not.\n\nFor example, you can collect the number of stars of the n8n-ultimate-scraper project on GitHub.\n\n## Requirements\n**Selenium Container**: Selenium is an open-source automation framework for web applications, enabling browser control and interaction through scripts in various programming languages.\nYou can deploy the Docker Compose file from the associated GitHub project to set up your Selenium container and configuration: https://github.com/Touxan/n8n-ultimate-scraper\n\n**Residential Proxy Server**: To scrape data at scale without being blocked, I personally recommend GeoNode. They offer affordable, high-quality residential proxies: https://geonode.com/invite/98895\n\n**OpenAI API Key**: For using GPT-4.\n\n## Optional\nSession Cookies Collection: To use login functionality with the n8n Ultimate Scraper, you need to collect session cookies from the target website. You can do this using the extension created for this application in the GitHub project: https://github.com/Touxan/n8n-ultimate-scraper. Follow the installation procedure to use it.\n\n## How to use \nDeploy the project with all the requiremnts and request your webhook.\n\n**Example of request**:\ncurl -X POST http://localhost:5678/webhook-test/yourwebhookid \\\n-H \"Content-Type: application/json\" \\\n-d '{\n \"subject\": \"Hugging Face\",\n \"Url\": \"github.com\",\n \"Target data\": [\n {\n \"DataName\": \"Followers\",\n \"description\": \"The number of followers of the GitHub page\"\n },\n {\n \"DataName\": \"Total Stars\",\n \"description\": \"The total numbers of stars on the different repos\"\n }\n ],\n \"cookies\": []\n}'\n\nYou can also scrape link like this : \ncurl -X POST http://localhost:5678/webhook-test/67d77918-2d5b-48c1-ae73-2004b32125f0 \\\n-H \"Content-Type: application/json\" \\\n-d '{\n \"Target Url\": \"https://github.com\",\n \"Target data\": [\n {\n \"DataName\": \"Followers\",\n \"description\": \"The number of followers of the GitHub page\"\n },\n {\n \"DataName\": \"Total Stars\",\n \"description\": \"The total numbers of stars on the different repo\"\n }\n]\n}'\n\n**Note**\nThe maximum nimber of Target data is 5."
  },
  "typeVersion": 1
}

================ Node #1959 ================
{
  "id": "4d743518-4fcb-4e9f-aff7-a8959a78ccaf",
  "name": "Edit Fields (For testing prupose )",
  "type": "n8n-nodes-base.set",
  "position": [
    1160,
    540
  ],
  "parameters": {
    "options": {},
    "assignments": {
      "assignments": [
        {
          "id": "3895040f-0a21-47ee-a73f-d3c7fd6edf36",
          "name": "Subject",
          "type": "string",
          "value": "={{ $json.body.subject }}"
        },
        {
          "id": "304e4240-513f-4c87-ae9d-4efda7d0c4ab",
          "name": "Website Domaine",
          "type": "string",
          "value": "={{ $json.body.Url }}"
        }
      ]
    }
  },
  "typeVersion": 3.4
}

================ Node #1960 ================
{
  "id": "62b0a416-71a2-4d2b-83f9-8c5465c72006",
  "name": "Get ScreenShot 2",
  "type": "n8n-nodes-base.httpRequest",
  "onError": "continueErrorOutput",
  "position": [
    6200,
    851
  ],
  "parameters": {
    "url": "=http://selenium_chrome:4444/wd/hub/session/{{ $('Create Selenium Session').item.json.value.sessionId }}/screenshot",
    "options": {}
  },
  "typeVersion": 4.2
}

================ Node #1961 ================
{
  "id": "6a5b1a08-c47a-435e-8e0b-648cb8282a90",
  "name": "Convert to File2",
  "type": "n8n-nodes-base.convertToFile",
  "onError": "continueErrorOutput",
  "position": [
    6440,
    851
  ],
  "parameters": {
    "options": {},
    "operation": "toBinary",
    "sourceProperty": "value"
  },
  "typeVersion": 1.1
}

================ Node #1962 ================
{
  "id": "a2aa5d45-5f41-41f7-a8ee-07c145b73d89",
  "name": "Go on ip-api.com",
  "type": "n8n-nodes-base.httpRequest",
  "onError": "continueErrorOutput",
  "position": [
    5960,
    851
  ],
  "parameters": {
    "url": "=http://selenium_chrome:4444/wd/hub/session/{{ $('Create Selenium Session').item.json.value.sessionId }}/url",
    "method": "POST",
    "options": {},
    "jsonBody": "={\n \"url\": \"https://ip-api.com/\"\n}\n",
    "sendBody": true,
    "specifyBody": "json"
  },
  "retryOnFail": true,
  "typeVersion": 4.2
}

================ Node #1963 ================
{
  "id": "8ddde1d2-0b09-45ca-88ef-db24352b095e",
  "name": "Delete Session8",
  "type": "n8n-nodes-base.httpRequest",
  "onError": "continueRegularOutput",
  "position": [
    6440,
    1071
  ],
  "parameters": {
    "url": "=http://selenium_chrome:4444/wd/hub/session/{{ $('Create Selenium Session').item.json.value.sessionId }}",
    "method": "DELETE",
    "options": {}
  },
  "retryOnFail": false,
  "typeVersion": 4.2
}

================ Node #1964 ================
{
  "id": "78ffd8e1-b4b8-444c-8a7d-410172d3a7f8",
  "name": "Sticky Note1",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    5920,
    727
  ],
  "parameters": {
    "color": 6,
    "width": 784.9798841202522,
    "height": 520.0741248156677,
    "content": "## Debug IP\n\nThis small debug flow aims to check the IP you're requesting with, in case you're using a proxy"
  },
  "typeVersion": 1
}

================ Node #1965 ================
{
  "id": "be5de434-5f07-40bc-a1e6-aece9ad211b4",
  "name": "Sticky Note2",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    1580,
    420
  ],
  "parameters": {
    "width": 751.8596006980003,
    "height": 430.433007240277,
    "content": "## Search\n\n**Description** :\nThis part aims to search on Google for the subject and find the URL of the subject page based on the input URL."
  },
  "typeVersion": 1
}

================ Node #1966 ================
{
  "id": "ffbb3c92-245b-4635-9adf-17d24f236bff",
  "name": "Error can't find url",
  "type": "n8n-nodes-base.respondToWebhook",
  "position": [
    2800,
    280
  ],
  "parameters": {
    "options": {
      "responseCode": 404
    },
    "respondWith": "json",
    "responseBody": "{\n \"Error\": \"Can't find url\"\n}"
  },
  "typeVersion": 1.1
}

================ Node #1967 ================
{
  "id": "088ad72c-907a-409a-9fa4-00a16d396e1b",
  "name": "Sticky Note3",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    2420,
    420
  ],
  "parameters": {
    "width": 827.9448220213314,
    "height": 502.0185388323068,
    "content": "## Selenium Session\n\n**Description**:\nCreation and configuration of the Selenium session."
  },
  "typeVersion": 1
}

================ Node #1968 ================
{
  "id": "00b8bf19-b34e-42ed-bb2a-3fbfa5f02a25",
  "name": "Resize browser window",
  "type": "n8n-nodes-base.httpRequest",
  "position": [
    2920,
    560
  ],
  "parameters": {
    "url": "=http://selenium_chrome:4444/wd/hub/session/{{ $json.value.sessionId }}/window/rect",
    "method": "POST",
    "options": {},
    "jsonBody": "{\n \"width\": 1920,\n \"height\": 1080,\n \"x\": 0,\n \"y\": 0\n}\n",
    "sendBody": true,
    "specifyBody": "json"
  },
  "typeVersion": 4.2
}

================ Node #1969 ================
{
  "id": "007354a1-3f00-4ae9-ab53-54ded5eed563",
  "name": "Sticky Note4",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    3500,
    -300
  ],
  "parameters": {
    "width": 3939.555135735299,
    "height": 821.0847869745435,
    "content": "## Scrape with cookies session\n\n**Description**\nThis part goes to the extracted URL, injects the cookies passed into the webhook, takes a screenshot of the webpage, and analyzes the image with GPT to extract the targeted data."
  },
  "typeVersion": 1
}

================ Node #1970 ================
{
  "id": "5ab44e1b-6878-4af5-bfd8-1f1e5cbee3a7",
  "name": "Sticky Note5",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    3500,
    580
  ],
  "parameters": {
    "width": 3336.952424000919,
    "height": 821.0847869745435,
    "content": "## Scrape without cookies session\n\n**Description**\nSame as the 'Scrape with cookies session' flow, but without the cookie injection"
  },
  "typeVersion": 1
}

================ Node #1971 ================
{
  "id": "4fc7e290-0c60-4efe-ac3f-eb71ce5e457b",
  "name": "OpenAI",
  "type": "@n8n/n8n-nodes-langchain.openAi",
  "position": [
    6340,
    -20
  ],
  "parameters": {
    "text": "=Analyse this image and extract revlant infromation about this subject : {{ $('Webhook').item.json.body.subject }}. \n\nIf the webpage seem block by waf, or don't have any relant information about the subject reurn BLOCK with out any aditinonal information.",
    "modelId": {
      "__rl": true,
      "mode": "list",
      "value": "gpt-4o",
      "cachedResultName": "GPT-4O"
    },
    "options": {
      "detail": "auto",
      "maxTokens": 300
    },
    "resource": "image",
    "inputType": "base64",
    "operation": "analyze"
  },
  "credentials": {
    "openAiApi": {
      "id": "FmszNHDDVS32ud21",
      "name": "OpenAi account"
    }
  },
  "typeVersion": 1.5
}

================ Node #1972 ================
{
  "id": "b039ed2a-94da-4a37-b794-7fb1721a8ab3",
  "name": "OpenAI1",
  "type": "@n8n/n8n-nodes-langchain.openAi",
  "onError": "continueErrorOutput",
  "position": [
    4780,
    840
  ],
  "parameters": {
    "text": "=Analyse this image and extract revlant infromation about this subject : {{ $('Webhook').item.json.body.subject }}. \n\nIf the webpage seem block by waf, or don't have any relant information about the subject reurn BLOCK with out any aditinonal information.",
    "modelId": {
      "__rl": true,
      "mode": "list",
      "value": "gpt-4o",
      "cachedResultName": "GPT-4O"
    },
    "options": {
      "detail": "auto",
      "maxTokens": 300
    },
    "resource": "image",
    "inputType": "base64",
    "operation": "analyze"
  },
  "credentials": {
    "openAiApi": {
      "id": "FmszNHDDVS32ud21",
      "name": "OpenAi account"
    }
  },
  "typeVersion": 1.5
}

================ Node #1973 ================
{
  "id": "c69364ce-c7e3-4f7a-ae0c-bad97643da30",
  "name": "Information Extractor1",
  "type": "@n8n/n8n-nodes-langchain.informationExtractor",
  "position": [
    5400,
    920
  ],
  "parameters": {
    "text": "={{ $('OpenAI1').item.json.content }}",
    "options": {
      "systemPromptTemplate": "You are an expert extraction algorithm.\nOnly extract relevant information from the text.\nIf you do not know the value of an attribute asked to extract, set the attribute's value to NA."
    },
    "attributes": {
      "attributes": [
        {
          "name": "={{ $('Webhook').item.json.body['Target data'][0].DataName }}",
          "description": "={{ $('Webhook').item.json.body['Target data'][0].description }}"
        },
        {
          "name": "={{ $('Webhook').item.json.body['Target data'][1].DataName }}",
          "description": "=The total number of stars on all project"
        },
        {
          "name": "={{ $('Webhook').item.json.body['Target data'][2].DataName }}",
          "description": "={{ $('Webhook').item.json.body['Target data'][2].description }}"
        },
        {
          "name": "={{ $('Webhook').item.json.body['Target data'][3].DataName }}",
          "description": "={{ $('Webhook').item.json.body['Target data'][3].description }}"
        },
        {
          "name": "={{ $('Webhook').item.json.body['Target data'][4].DataName }}",
          "description": "={{ $('Webhook').item.json.body['Target data'][4].description }}"
        }
      ]
    }
  },
  "typeVersion": 1
}

================ Node #1974 ================
{
  "id": "0e756adb-a6ba-421f-9d21-374e7fa74781",
  "name": "OpenAI Chat Model1",
  "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
  "position": [
    5400,
    1140
  ],
  "parameters": {
    "model": "gpt-4o-mini",
    "options": {}
  },
  "credentials": {
    "openAiApi": {
      "id": "FmszNHDDVS32ud21",
      "name": "OpenAi account"
    }
  },
  "typeVersion": 1
}

================ Node #1975 ================
{
  "id": "920e9315-7de4-4a23-adbe-36338ea18097",
  "name": "Information Extractor2",
  "type": "@n8n/n8n-nodes-langchain.informationExtractor",
  "position": [
    6920,
    60
  ],
  "parameters": {
    "text": "={{ $('OpenAI').item.json.content }}",
    "options": {
      "systemPromptTemplate": "You are an expert extraction algorithm.\nOnly extract relevant information from the text.\nIf you do not know the value of an attribute asked to extract, set the attribute's value to NA. If the attribute is empty you can omit it."
    },
    "attributes": {
      "attributes": [
        {
          "name": "={{ $('Webhook').item.json.body['Target data'][0].DataName }}",
          "description": "={{ $('Webhook').item.json.body['Target data'][0].description }}"
        },
        {
          "name": "={{ $('Webhook').item.json.body['Target data'][1].DataName }}",
          "description": "=The total number of stars on all project"
        },
        {
          "name": "={{ $('Webhook').item.json.body['Target data'][2].DataName }}",
          "description": "={{ $('Webhook').item.json.body['Target data'][2].description }}"
        },
        {
          "name": "={{ $('Webhook').item.json.body['Target data'][3].DataName }}",
          "description": "={{ $('Webhook').item.json.body['Target data'][3].description }}"
        },
        {
          "name": "={{ $('Webhook').item.json.body['Target data'][4].DataName }}",
          "description": "={{ $('Webhook').item.json.body['Target data'][4].description }}"
        }
      ]
    }
  },
  "typeVersion": 1
}

================ Node #1976 ================
{
  "id": "aa98d16e-d20c-4a8f-8eaf-1f64751dd8ea",
  "name": "OpenAI Chat Model2",
  "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
  "position": [
    6940,
    220
  ],
  "parameters": {
    "model": "gpt-4o-mini",
    "options": {}
  },
  "credentials": {
    "openAiApi": {
      "id": "FmszNHDDVS32ud21",
      "name": "OpenAi account"
    }
  },
  "typeVersion": 1
}

================ Node #1977 ================
{
  "id": "ba41b87e-feb7-4753-95b3-d569d54d8756",
  "name": "Sticky Note6",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    1820,
    -680
  ],
  "parameters": {
    "color": 3,
    "width": 813.0685668942513,
    "height": 507.4126722815008,
    "content": "## Proxy\n\n**Configuration**\n\nTo configure your proxy with the project, follow the instructions on the GitHub project: https://github.com/Touxan/n8n-ultimate-scraper. To configure the docker-compose, you also need to add this argument to the 'Create Selenium Session' node : --proxy-server=address:port.\n\n### \u26a0\ufe0fWarning\u26a0\ufe0f\n Selenium does not support proxy authentication, so you need to add your server IP to the proxy whitelist. On GeoNode, it's here: https://app.geonode.com/whitelist-ip!"
  },
  "typeVersion": 1
}

================ Node #1978 ================
{
  "id": "194bbecc-a5b3-4c5f-a17f-94703a44f196",
  "name": "Webhook",
  "type": "n8n-nodes-base.webhook",
  "position": [
    940,
    540
  ],
  "webhookId": "67d77918-2d5b-48c1-ae73-2004b32125f0",
  "parameters": {
    "path": "67d77918-2d5b-48c1-ae73-2004b32125f0",
    "options": {},
    "httpMethod": "POST",
    "responseMode": "responseNode"
  },
  "typeVersion": 2
}

================ Node #1979 ================
{
  "id": "513389b0-0930-48d8-8cbb-e3575a0276ae",
  "name": "If Target Url",
  "type": "n8n-nodes-base.if",
  "position": [
    1380,
    620
  ],
  "parameters": {
    "options": {},
    "conditions": {
      "options": {
        "version": 2,
        "leftValue": "",
        "caseSensitive": true,
        "typeValidation": "strict"
      },
      "combinator": "and",
      "conditions": [
        {
          "id": "4b608dcd-a175-4019-82c2-560320a2abce",
          "operator": {
            "type": "string",
            "operation": "empty",
            "singleValue": true
          },
          "leftValue": "={{ $('Webhook').item.json.body['Target Url'] }}",
          "rightValue": ""
        }
      ]
    }
  },
  "typeVersion": 2.2
}

================ Node #1980 ================
{
  "id": "4ca0aee7-0dd2-4c78-b99b-8c188a3917f4",
  "name": "If1",
  "type": "n8n-nodes-base.if",
  "position": [
    3700,
    900
  ],
  "parameters": {
    "options": {},
    "conditions": {
      "options": {
        "version": 2,
        "leftValue": "",
        "caseSensitive": true,
        "typeValidation": "strict"
      },
      "combinator": "and",
      "conditions": [
        {
          "id": "ff919945-b8c2-492a-b496-8617e9147389",
          "operator": {
            "type": "string",
            "operation": "notEmpty",
            "singleValue": true
          },
          "leftValue": "={{ $('Webhook').item.json.body['Target Url'] }}",
          "rightValue": ""
        }
      ]
    }
  },
  "typeVersion": 2.2
}

================ Node #1981 ================
{
  "id": "baa4dc94-67f3-4683-b8c7-6b6e856e7c64",
  "name": "Go on url1",
  "type": "n8n-nodes-base.httpRequest",
  "onError": "continueErrorOutput",
  "position": [
    3900,
    960
  ],
  "parameters": {
    "url": "=http://selenium_chrome:4444/wd/hub/session/{{ $('Create Selenium Session').item.json.value.sessionId }}/url",
    "method": "POST",
    "options": {},
    "jsonBody": "={\n \"url\": \"{{ $('Information Extractor').item.json.output.Good_url_for_etract_information }}\"\n}\n",
    "sendBody": true,
    "specifyBody": "json"
  },
  "retryOnFail": true,
  "typeVersion": 4.2
}

================ Node #1982 ================
{
  "id": "2c439b0e-7c78-4ae8-b653-3f02b3834aa8",
  "name": "If2",
  "type": "n8n-nodes-base.if",
  "position": [
    3340,
    560
  ],
  "parameters": {
    "options": {},
    "conditions": {
      "options": {
        "version": 2,
        "leftValue": "",
        "caseSensitive": true,
        "typeValidation": "loose"
      },
      "combinator": "and",
      "conditions": [
        {
          "id": "2a1bfc1e-28a6-45d1-9581-53b632af90e0",
          "operator": {
            "type": "string",
            "operation": "notEmpty",
            "singleValue": true
          },
          "leftValue": "={{ $('Webhook').item.json.body.cookies }}",
          "rightValue": ""
        }
      ]
    },
    "looseTypeValidation": true
  },
  "typeVersion": 2.2
}

================ Node #1983 ================
{
  "id": "fc3260da-9131-4850-a581-55a27ce4428d",
  "name": "Go on url2",
  "type": "n8n-nodes-base.httpRequest",
  "onError": "continueErrorOutput",
  "position": [
    4260,
    -20
  ],
  "parameters": {
    "url": "=http://selenium_chrome:4444/wd/hub/session/{{ $('Create Selenium Session').item.json.value.sessionId }}/url",
    "method": "POST",
    "options": {},
    "jsonBody": "={\n \"url\": \"{{ $('Webhook').item.json.body['Target Url'] }}\"\n}\n",
    "sendBody": true,
    "specifyBody": "json"
  },
  "retryOnFail": true,
  "typeVersion": 4.2
}

================ Node #1984 ================
{
  "id": "fe345010-1fa3-4d2c-8bc2-e87f6aeeb0d9",
  "name": "If3",
  "type": "n8n-nodes-base.if",
  "position": [
    4060,
    100
  ],
  "parameters": {
    "options": {},
    "conditions": {
      "options": {
        "version": 2,
        "leftValue": "",
        "caseSensitive": true,
        "typeValidation": "strict"
      },
      "combinator": "and",
      "conditions": [
        {
          "id": "ff919945-b8c2-492a-b496-8617e9147389",
          "operator": {
            "type": "string",
            "operation": "notEmpty",
            "singleValue": true
          },
          "leftValue": "={{ $('Webhook').item.json.body['Target Url'] }}",
          "rightValue": ""
        }
      ]
    }
  },
  "typeVersion": 2.2
}

================ Node #1985 ================
{
  "id": "1aae02ec-3a22-4dd5-aea4-819758f130c1",
  "name": "Go on url3",
  "type": "n8n-nodes-base.httpRequest",
  "onError": "continueErrorOutput",
  "position": [
    4260,
    160
  ],
  "parameters": {
    "url": "=http://selenium_chrome:4444/wd/hub/session/{{ $('Create Selenium Session').item.json.value.sessionId }}/url",
    "method": "POST",
    "options": {},
    "jsonBody": "={\n \"url\": \"{{ $('Information Extractor').item.json.output.Good_url_for_etract_information }}\"\n}\n",
    "sendBody": true,
    "specifyBody": "json"
  },
  "retryOnFail": true,
  "typeVersion": 4.2
}

================ Node #1986 ================
{
  "id": "290cc9b8-e4b1-4124-ab0e-afbb02a9072b",
  "name": "Execute Workflow Trigger",
  "type": "n8n-nodes-base.executeWorkflowTrigger",
  "position": [
    -460,
    -100
  ],
  "parameters": {},
  "typeVersion": 1
}

================ Node #1987 ================
{
  "id": "f256ed59-ba61-4912-9a75-4e7703547de5",
  "name": "FireCrawl",
  "type": "n8n-nodes-base.httpRequest",
  "position": [
    -220,
    -100
  ],
  "parameters": {
    "url": "https://api.firecrawl.dev/v1/scrape",
    "method": "POST",
    "options": {},
    "jsonBody": "={\n \"url\": \"{{ $json.query.url }}\",\n \"formats\": [\n \"markdown\"\n ]\n} ",
    "sendBody": true,
    "sendHeaders": true,
    "specifyBody": "json",
    "authentication": "genericCredentialType",
    "genericAuthType": "httpHeaderAuth",
    "headerParameters": {
      "parameters": [
        {}
      ]
    }
  },
  "credentials": {
    "httpHeaderAuth": {
      "id": "RoJ6k6pWBzSVp9JK",
      "name": "Firecrawl"
    }
  },
  "typeVersion": 4.2
}

================ Node #1988 ================
{
  "id": "a28bdbe6-fa59-4bf1-b0ab-c34ebb10cf0f",
  "name": "Edit Fields",
  "type": "n8n-nodes-base.set",
  "position": [
    -20,
    -100
  ],
  "parameters": {
    "options": {},
    "assignments": {
      "assignments": [
        {
          "id": "1af62ef9-7385-411a-8aba-e4087f09c3a9",
          "name": "response",
          "type": "string",
          "value": "={{ $json.data.markdown }}"
        }
      ]
    }
  },
  "typeVersion": 3.4
}

================ Node #1989 ================
{
  "id": "fcd26213-038a-453f-80e5-a3936e4c2d06",
  "name": "Sticky Note",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    -480,
    -340
  ],
  "parameters": {
    "width": 620,
    "height": 200,
    "content": "## Send URL got Crawl\nThis can be reused by Ai Agents and any Workspace to crawl a site. All that Workspace has to do is send a request:\n\n```json\n {\n \"url\": \"Some URL to Get\"\n }\n```"
  },
  "typeVersion": 1
}

================ Node #1990 ================
{
  "id": "0f3b39af-2802-462c-ac54-a7bccf5b78c5",
  "name": "Extract Document PDF",
  "type": "n8n-nodes-base.extractFromFile",
  "position": [
    520,
    400
  ],
  "parameters": {
    "options": {},
    "operation": "pdf"
  },
  "typeVersion": 1,
  "alwaysOutputData": false
}

================ Node #1991 ================
{
  "id": "6f76e3a6-a3be-4f9f-a0db-3f002eafc2ad",
  "name": "Download File",
  "type": "n8n-nodes-base.httpRequest",
  "position": [
    340,
    400
  ],
  "parameters": {
    "url": "={{ $json.file_url }}",
    "options": {}
  },
  "typeVersion": 4.2
}

================ Node #1992 ================
{
  "id": "2c4e0b0f-28c7-48f5-b051-6e909ac878d2",
  "name": "When clicking \u2018Test workflow\u2019",
  "type": "n8n-nodes-base.manualTrigger",
  "position": [
    -20,
    400
  ],
  "parameters": {},
  "typeVersion": 1
}

================ Node #1993 ================
{
  "id": "a70d972b-ceb4-4f4d-8737-f0be624d6234",
  "name": "Sticky Note",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    120,
    280
  ],
  "parameters": {
    "width": 187.37066290133808,
    "height": 80,
    "content": "**Add direct link to CV and Job description**"
  },
  "typeVersion": 1
}

================ Node #1994 ================
{
  "id": "9fdff1be-14cf-4167-af2d-7c5e60943831",
  "name": "Sticky Note5",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    -800,
    140
  ],
  "parameters": {
    "color": 7,
    "width": 280.2462120317618,
    "height": 438.5821431288714,
    "content": "### Setup\n\n1. **Download File**: Fetch the CV using its direct URL.\n2. **Extract Data**: Use N8N\u2019s PDF or text extraction nodes to retrieve text from the CV.\n3. **Send to OpenAI**:\n - **URL**: POST to OpenAI\u2019s API for analysis.\n - **Parameters**:\n - Include the extracted CV data and job description.\n - Use JSON Schema to structure the response.\n4. **Save Results**:\n - Store the extracted data and OpenAI's analysis in Supabase for further use."
  },
  "typeVersion": 1
}

================ Node #1995 ================
{
  "id": "b1ce4a61-270f-480b-a716-6618e6034581",
  "name": "Sticky Note6",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    -800,
    -500
  ],
  "parameters": {
    "color": 7,
    "width": 636.2128494576581,
    "height": 598.6675280064023,
    "content": "![5min Logo](https://cflobdhpqwnoisuctsoc.supabase.co/storage/v1/object/public/my_storage/Untitled%20(1500%20x%20300%20px).png)\n## CV Screening with OpenAI\n**Made by [Mark Shcherbakov](https://www.linkedin.com/in/marklowcoding/) from community [5minAI](https://www.skool.com/5minai-2861)**\n\nThis workflow is ideal for recruitment agencies, HR professionals, and hiring managers looking to automate the initial screening of CVs. It is especially useful for organizations handling large volumes of applications and seeking to streamline their recruitment process.\n\nThis workflow automates the resume screening process using OpenAI for analysis and Supabase for structured data storage. It provides a matching score, a summary of candidate suitability, and key insights into why the candidate fits (or doesn\u2019t fit) the job. \n\n1. **Retrieve Resume**: The workflow downloads CVs from a direct link (e.g., Supabase storage or Dropbox).\n2. **Extract Data**: Extracts text data from PDF or DOC files for analysis.\n3. **Analyze with OpenAI**: Sends the extracted data and job description to OpenAI to:\n - Generate a matching score.\n - Summarize candidate strengths and weaknesses.\n - Provide actionable insights into their suitability for the job.\n4. **Store Results in Supabase**: Saves the analysis and raw data in a structured format for further processing or integration into other tools.\n"
  },
  "typeVersion": 1
}

================ Node #1996 ================
{
  "id": "747591cd-76b1-417e-ab9d-0a3935d3db03",
  "name": "Sticky Note2",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    -500,
    140
  ],
  "parameters": {
    "color": 7,
    "width": 330.5152611046425,
    "height": 240.6839895136402,
    "content": "### ... or watch set up video [8 min]\n[![Youtube Thumbnail](https://cflobdhpqwnoisuctsoc.supabase.co/storage/v1/object/public/my_storage/11.png)](https://youtu.be/TWuI3dOcn0E)\n"
  },
  "typeVersion": 1
}

================ Node #1997 ================
{
  "id": "051d8cb0-2557-4e35-9045-c769ec5a34f9",
  "name": "Sticky Note1",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    660,
    280
  ],
  "parameters": {
    "width": 187.37066290133808,
    "height": 80,
    "content": "**Replace OpenAI connection**"
  },
  "typeVersion": 1
}

================ Node #1998 ================
{
  "id": "865f4f69-e13d-49c1-8bb4-9f98facbf75c",
  "name": "OpenAI - Analyze CV",
  "type": "n8n-nodes-base.httpRequest",
  "position": [
    700,
    400
  ],
  "parameters": {
    "url": "=https://api.openai.com/v1/chat/completions",
    "method": "POST",
    "options": {},
    "jsonBody": "={\n \"model\": \"gpt-4o-mini\",\n \"messages\": [\n {\n \"role\": \"system\",\n \"content\": \"{{ $('Set Variables').item.json.prompt }}\"\n },\n {\n \"role\": \"user\",\n \"content\": {{ JSON.stringify(encodeURIComponent($json.text))}}\n }\n ],\n \"response_format\":{ \"type\": \"json_schema\", \"json_schema\": {{ $('Set Variables').item.json.json_schema }}\n\n }\n }",
    "sendBody": true,
    "specifyBody": "json",
    "authentication": "predefinedCredentialType",
    "nodeCredentialType": "openAiApi"
  },
  "credentials": {
    "openAiApi": {
      "id": "SphXAX7rlwRLkiox",
      "name": "Test club key"
    }
  },
  "typeVersion": 4.2
}

================ Node #1999 ================
{
  "id": "68b7fc08-506d-4816-9a8f-db7ab89e4589",
  "name": "Set Variables",
  "type": "n8n-nodes-base.set",
  "position": [
    160,
    400
  ],
  "parameters": {
    "options": {},
    "assignments": {
      "assignments": [
        {
          "id": "83274f6f-c73e-4d5e-946f-c6dfdf7ed1c4",
          "name": "file_url",
          "type": "string",
          "value": "https://cflobdhpqwnoisuctsoc.supabase.co/storage/v1/object/public/my_storage/software_engineer_resume_example.pdf"
        },
        {
          "id": "6e44f3e5-a0df-4337-9f7e-7cfa91b3cc37",
          "name": "job_description",
          "type": "string",
          "value": "Melange is a venture-backed startup building a brand new search infrastructure for the patent system. Leveraging recent and ongoing advancements in machine learning and natural language processing, we are building systems to conduct patent search faster and more accurately than any human currently can. We are a small team with a friendly, mostly-remote culture\\n\\nAbout the team\\nMelange is currently made up of 9 people. We are remote but headquartered in Brooklyn, NY. We look for people who are curious and earnest.\\n\\nAbout the role\\nJoin the team at Melange, a startup with a focus on revolutionizing patent search through advanced technology. As a software engineer in this role, you will be responsible for developing conversation graphs, integrating grammar processes, and maintaining a robust codebase. The ideal candidate will have experience shipping products, working with cloud platforms, and have familiarity with containerization tools. Additionally, experience with prompting tools, NLP packages, and cybersecurity is a plus.\\n\\nCandidate location - the US. Strong preference if they're in NYC, Boston or SF but open to anywhere else but needs to be rockstar\\n\\nYou will \\n\\n* Ship high-quality products.\\n* Utilize prompting libraries such as Langchain and Langgraph to develop conversation graphs and evaluation flows.\\n* Collaborate with linguists to integrate our in-house grammar and entity mapping processes into an iterable patent search algorithm piloted by AI patent agents.\\n* Steward the codebase, ensuring that it remains robust as it scales.\\n\\n\\nCandidate requirements\\nMinimum requirements a candidate must meet\\nHad ownership over aspects of product development in both small and large organizations at differing points in your career.\\n\\nHave used Langchain, LangGraph, or other prompting tools in production or for personal projects.\\n\\nFamiliarity with NLP packages such as Spacy, Stanza, PyTorch, and/or Tensorflow.\\n\\nShipped a working product to users, either as part of a team or on your own. \\nThis means you have: \\nproficiency with one of AWS, Azure, or Google Cloud, \\nfamiliarity with containerization and orchestration tools like Docker and Kubernetes, and \\nbuilt and maintained CI/CD pipelines.\\n5+ years of experience as a software engineer\\n\\nNice-to-haves\\nWhat could make your candidate stand out\\nExperience with cybersecurity.\\n\\nIdeal companies\\nSuccessful b2b growth stage startups that have a strong emphasis on product and design. Orgs with competent management where talent is dense and protected.\\n\\nRamp, Rippling, Brex, Carta, Toast, Asana, Airtable, Benchling, Figma, Gusto, Stripe, Plaid, Monday.com, Smartsheet, Bill.com, Freshworks, Intercom, Sprout Social, Sisense, InsightSquared, DocuSign, Dropbox, Slack, Trello, Qualtrics, Datadog, HubSpot, Shopify, Zendesk, SurveyMonkey, Squarespace, Mixpanel, Github, Atlassian, Zapier, PagerDuty, Box, Snowflake, Greenhouse, Lever, Pendo, Lucidchart, Asana, New Relic, Kajabi, Veeva Systems, Adyen, Twilio, Workday, ServiceNow, Confluent.\\n"
        },
        {
          "id": "c597c502-9a3c-48e6-a5f5-8a2a8be7282c",
          "name": "prompt",
          "type": "string",
          "value": "You are the recruiter in recruiting agency, you are strict and you pay extra attention on details in a resume. You work with companies and find talents for their jobs. You asses any resume really attentively and critically. If the candidate is a jumper, you notice that and say us. You need to say if the candidate from out base is suitable for this job. Return 4 things: 1. Percentage (10% step) of matching candidate resume with job. 2. Short summary - should use simple language and be short. Provide final decision on candidate based on matching percentage and candidate skills vs job requirements. 3. Summary why this candidate suits this jobs. 4. Summary why this candidate doesn't suit this jobs."
        },
        {
          "id": "1884eed1-9111-4ce1-8d07-ed176611f2d8",
          "name": "json_schema",
          "type": "string",
          "value": "{ \"name\": \"candidate_evaluation\", \"description\": \"Structured data for evaluating a candidate based on experience and fit\", \"strict\": true, \"schema\": { \"type\": \"object\", \"properties\": { \"percentage\": { \"type\": \"integer\", \"description\": \"Overall suitability percentage score for the candidate\" }, \"summary\": { \"type\": \"string\", \"description\": \"A brief summary of the candidate's experience, personality, and any notable strengths or concerns\" }, \"reasons-suit\": { \"type\": \"array\", \"items\": { \"type\": \"object\", \"properties\": { \"name\": { \"type\": \"string\", \"description\": \"Title of the strength or reason for suitability\" }, \"text\": { \"type\": \"string\", \"description\": \"Description of how this experience or skill matches the job requirements\" } }, \"required\": [\"name\", \"text\"], \"additionalProperties\": false }, \"description\": \"List of reasons why the candidate is suitable for the position\" }, \"reasons-notsuit\": { \"type\": \"array\", \"items\": { \"type\": \"object\", \"properties\": { \"name\": { \"type\": \"string\", \"description\": \"Title of the concern or reason for unsuitability\" }, \"text\": { \"type\": \"string\", \"description\": \"Description of how this factor may not align with the job requirements\" } }, \"required\": [\"name\", \"text\"], \"additionalProperties\": false }, \"description\": \"List of reasons why the candidate may not be suitable for the position\" } }, \"required\": [\"percentage\", \"summary\", \"reasons-suit\", \"reasons-notsuit\"], \"additionalProperties\": false } }"
        }
      ]
    }
  },
  "typeVersion": 3.4
}

================ Node #2000 ================
{
  "id": "22dedac7-c44b-430f-b9c7-57d0c55328fa",
  "name": "Parsed JSON",
  "type": "n8n-nodes-base.set",
  "position": [
    880,
    400
  ],
  "parameters": {
    "options": {},
    "assignments": {
      "assignments": [
        {
          "id": "83274f6f-c73e-4d5e-946f-c6dfdf7ed1c4",
          "name": "json_parsed",
          "type": "object",
          "value": "={{ JSON.parse($json.choices[0].message.content) }}"
        }
      ]
    }
  },
  "typeVersion": 3.4
}