================ Node #2001 ================
{
  "id": "be5c3e43-cc86-4081-aa98-e7af3d22267d",
  "name": "When clicking \u2018Test workflow\u2019",
  "type": "n8n-nodes-base.manualTrigger",
  "position": [
    200,
    -960
  ],
  "parameters": {},
  "typeVersion": 1
}

================ Node #2002 ================
{
  "id": "28f70c3a-bc45-4f43-80a6-69b592c8ce2e",
  "name": "Sticky Note20",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    -180,
    -1200
  ],
  "parameters": {
    "color": 6,
    "width": 290,
    "height": 1110,
    "content": "# AlexK1919 \n![Alex Kim](https://media.licdn.com/dms/image/v2/D5603AQFOYMkqCPl6Sw/profile-displayphoto-shrink_400_400/profile-displayphoto-shrink_400_400/0/1718309808352?e=1736985600&v=beta&t=pQKm7lQfUU1ytuC2Gq1PRxNY-XmROFWbo-BjzUPxWOs)\n\n#### I\u2019m Alex, an AI-Native Workflow Automation Architect Building Solutions to Optimize your Personal and Professional Life.\n\n### Example AirTable Base\nhttps://airtable.com/appRDq3E42JNtruIP/shrnc9EzlxpCq7Vxe\n\n### Link to my n8n Workflow Templates\nhttps://n8n.io/creators/alexk1919\n\n### Workflow Overview Video\nhttps://www.youtube.com/@alexk1919_\n\n### Products Used\n[AirTable](https://airtable.com)\n[OpenAI](https://openai.com/)\n[Leonardo.ai](https://app.leonardo.ai/?via=alexk1919)\n\n### About Me\nhttps://beacons.ai/alexk1919\n"
  },
  "typeVersion": 1
}

================ Node #2003 ================
{
  "id": "334044d8-e9a6-497e-9a11-63134233c8fa",
  "name": "Sticky Note9",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    140,
    -1200
  ],
  "parameters": {
    "color": 7,
    "width": 247,
    "height": 1111,
    "content": "# Triggers"
  },
  "typeVersion": 1
}

================ Node #2004 ================
{
  "id": "fcdf5c1a-3ddd-44cf-9b6d-a9afdd1fc256",
  "name": "Sticky Note",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    420,
    -1200
  ],
  "parameters": {
    "color": 3,
    "width": 427,
    "height": 1111,
    "content": "# 1. Retrieve Brand Guidelines"
  },
  "typeVersion": 1
}

================ Node #2005 ================
{
  "id": "a5a2bfcf-e2b7-4a9f-a766-7d08168c3d6f",
  "name": "Set Guidelines",
  "type": "n8n-nodes-base.set",
  "position": [
    680,
    -960
  ],
  "parameters": {
    "options": {},
    "assignments": {
      "assignments": [
        {
          "id": "f803283a-f895-4794-87ad-46c63542ea4f",
          "name": "id",
          "type": "string",
          "value": "={{ $json.id }}"
        }
      ]
    },
    "includeOtherFields": true
  },
  "typeVersion": 3.4
}

================ Node #2006 ================
{
  "id": "ab26d351-144d-477c-8dd3-a010c3fce0ca",
  "name": "Sticky Note10",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    880,
    -1200
  ],
  "parameters": {
    "color": 4,
    "width": 667,
    "height": 1111,
    "content": "# 2. Retrieve Blog Post/s"
  },
  "typeVersion": 1
}

================ Node #2007 ================
{
  "id": "f8e46822-cf7e-4697-bee4-99221b6063a7",
  "name": "Get Brand Guidelines",
  "type": "n8n-nodes-base.airtable",
  "position": [
    480,
    -960
  ],
  "parameters": {
    "base": {
      "__rl": true,
      "mode": "list",
      "value": "appRDq3E42JNtruIP",
      "cachedResultUrl": "https://airtable.com/appRDq3E42JNtruIP",
      "cachedResultName": "Content Manager"
    },
    "table": {
      "__rl": true,
      "mode": "list",
      "value": "tblF8Ye2g0gPdpsaI",
      "cachedResultUrl": "https://airtable.com/appRDq3E42JNtruIP/tblF8Ye2g0gPdpsaI",
      "cachedResultName": "Brand Guidelines"
    },
    "options": {},
    "operation": "search"
  },
  "credentials": {
    "airtableTokenApi": {
      "id": "zS1BIbs19PvAC2d0",
      "name": "AlexK Airtable Personal Access Token account"
    }
  },
  "typeVersion": 2.1
}

================ Node #2008 ================
{
  "id": "c6609f11-d04d-4e83-8fc0-af3c0e2cc9bd",
  "name": "Get SEO Keywords",
  "type": "n8n-nodes-base.airtable",
  "position": [
    940,
    -960
  ],
  "parameters": {
    "base": {
      "__rl": true,
      "mode": "list",
      "value": "appRDq3E42JNtruIP",
      "cachedResultUrl": "https://airtable.com/appRDq3E42JNtruIP",
      "cachedResultName": "Content Manager"
    },
    "table": {
      "__rl": true,
      "mode": "list",
      "value": "tblU1fgGH1LXwnWRb",
      "cachedResultUrl": "https://airtable.com/appRDq3E42JNtruIP/tblU1fgGH1LXwnWRb",
      "cachedResultName": "SEO Keywords"
    },
    "options": {
      "fields": [
        "Keyword",
        "RelatedContent"
      ]
    },
    "operation": "search"
  },
  "credentials": {
    "airtableTokenApi": {
      "id": "zS1BIbs19PvAC2d0",
      "name": "AlexK Airtable Personal Access Token account"
    }
  },
  "executeOnce": false,
  "typeVersion": 2.1
}

================ Node #2009 ================
{
  "id": "d9201fa0-05d9-492b-896d-2cdc26e84f2e",
  "name": "Remove Duplicates",
  "type": "n8n-nodes-base.removeDuplicates",
  "position": [
    1340,
    -960
  ],
  "parameters": {
    "compare": "selectedFields",
    "options": {},
    "fieldsToCompare": "id"
  },
  "typeVersion": 2
}

================ Node #2010 ================
{
  "id": "68f2a29b-0e29-4a64-986b-9c1204c1d1ef",
  "name": "Sticky Note7",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    1080,
    -1040
  ],
  "parameters": {
    "color": 3,
    "width": 220,
    "height": 240,
    "content": "## Set keyword filter"
  },
  "typeVersion": 1
}

================ Node #2011 ================
{
  "id": "530dfb77-0aee-445d-8a1f-d8f2cbcd1640",
  "name": "Keyword Filter",
  "type": "n8n-nodes-base.filter",
  "position": [
    1140,
    -960
  ],
  "parameters": {
    "options": {
      "ignoreCase": true
    },
    "conditions": {
      "options": {
        "version": 2,
        "leftValue": "",
        "caseSensitive": false,
        "typeValidation": "strict"
      },
      "combinator": "and",
      "conditions": [
        {
          "id": "1b854a48-286a-486f-8a0f-4eb3b8d302ea",
          "operator": {
            "type": "string",
            "operation": "contains"
          },
          "leftValue": "={{ $json.Keyword }}",
          "rightValue": "ai automation"
        }
      ]
    }
  },
  "typeVersion": 2.2
}

================ Node #2012 ================
{
  "id": "75da86d6-22d4-42d6-8451-ea75db76ae57",
  "name": "Get Content",
  "type": "n8n-nodes-base.airtable",
  "position": [
    1140,
    -740
  ],
  "parameters": {
    "id": "={{ $json.RelatedContent }}",
    "base": {
      "__rl": true,
      "mode": "list",
      "value": "appRDq3E42JNtruIP",
      "cachedResultUrl": "https://airtable.com/appRDq3E42JNtruIP",
      "cachedResultName": "Content Manager"
    },
    "table": {
      "__rl": true,
      "mode": "list",
      "value": "tblU1fgGH1LXwnWRb",
      "cachedResultUrl": "https://airtable.com/appRDq3E42JNtruIP/tblU1fgGH1LXwnWRb",
      "cachedResultName": "SEO Keywords"
    },
    "options": {}
  },
  "credentials": {
    "airtableTokenApi": {
      "id": "zS1BIbs19PvAC2d0",
      "name": "AlexK Airtable Personal Access Token account"
    }
  },
  "typeVersion": 2.1
}

================ Node #2013 ================
{
  "id": "7524c5d8-78bb-4a4e-9c56-af97b851b767",
  "name": "Split Out Content",
  "type": "n8n-nodes-base.splitOut",
  "position": [
    1340,
    -740
  ],
  "parameters": {
    "include": "allOtherFields",
    "options": {},
    "fieldToSplitOut": "id"
  },
  "typeVersion": 1
}

================ Node #2014 ================
{
  "id": "45d55ea1-ad01-4771-a2b2-67bb0cd1f983",
  "name": "Split Out Keywords",
  "type": "n8n-nodes-base.splitOut",
  "position": [
    940,
    -740
  ],
  "parameters": {
    "include": "allOtherFields",
    "options": {},
    "fieldToSplitOut": "RelatedContent"
  },
  "typeVersion": 1
}

================ Node #2015 ================
{
  "id": "349c64c2-2085-4b61-b9d2-dc1f0d7f46f6",
  "name": "Limit",
  "type": "n8n-nodes-base.limit",
  "position": [
    1340,
    -520
  ],
  "parameters": {},
  "typeVersion": 1
}

================ Node #2016 ================
{
  "id": "3b689583-6f40-4a6b-9afc-af128b2d4fca",
  "name": "Sticky Note11",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    1580,
    -1200
  ],
  "parameters": {
    "color": 5,
    "width": 727,
    "height": 1111,
    "content": "# 3. Prepare Short Form Video Content"
  },
  "typeVersion": 1
}

================ Node #2017 ================
{
  "id": "bcdf8e9e-463c-43d4-a29e-7f90076815a1",
  "name": "Script Prep",
  "type": "@n8n/n8n-nodes-langchain.openAi",
  "onError": "continueErrorOutput",
  "position": [
    1640,
    -960
  ],
  "parameters": {
    "modelId": {
      "__rl": true,
      "mode": "list",
      "value": "gpt-4o-mini",
      "cachedResultName": "GPT-4O-MINI"
    },
    "options": {},
    "messages": {
      "values": [
        {
          "content": "=Prepare a script with 4 scenes for a short form video based on the following blog post:\n\nTitle:\n{{ $json.Title }}\n\nContent:\n{{ $json.Content }}\n\nThe video should be less than 30 seconds in length.\n\nAlso create image prompts for each scene within the script.\n\nThen output a image prompt for the video thmbnail.\n\nThe video will use a 9:16 aspect."
        },
        {
          "role": "system",
          "content": "Output format:\nMake sure you number each script and image prompt.\n\nScene 1 - 4\n- script #\n- image prompt #\n\nThumbnail Prompt"
        }
      ]
    },
    "jsonOutput": true
  },
  "credentials": {
    "openAiApi": {
      "id": "ysxujEYFiY5ozRTS",
      "name": "AlexK OpenAi Key"
    }
  },
  "typeVersion": 1.6
}

================ Node #2018 ================
{
  "id": "be07f6e3-1e2d-4d4f-a8e0-1d642ca4b789",
  "name": "Split Out Scenes",
  "type": "n8n-nodes-base.splitOut",
  "position": [
    2060,
    -520
  ],
  "parameters": {
    "options": {},
    "fieldToSplitOut": "message.content.scenes"
  },
  "typeVersion": 1
}

================ Node #2019 ================
{
  "id": "83b3213d-70db-46d4-8dcc-5f399a64467d",
  "name": "Split Out TN Prompt",
  "type": "n8n-nodes-base.splitOut",
  "position": [
    2060,
    -1020
  ],
  "parameters": {
    "options": {},
    "fieldToSplitOut": "message.content.thumbnail_prompt"
  },
  "typeVersion": 1
}

================ Node #2020 ================
{
  "id": "d4f30eff-220a-4682-9072-f1bbbce3655c",
  "name": "Leo - Improve Prompt1",
  "type": "n8n-nodes-base.httpRequest",
  "position": [
    2600,
    -1020
  ],
  "parameters": {
    "url": "https://cloud.leonardo.ai/api/rest/v1/prompt/improve",
    "method": "POST",
    "options": {
      "response": {
        "response": {
          "fullResponse": true
        }
      }
    },
    "jsonBody": "={\n \"prompt\": \"{{ $json['message.content[\\'Thumbnail Prompt\\']'] }}\"\n}",
    "sendBody": true,
    "sendHeaders": true,
    "specifyBody": "json",
    "authentication": "genericCredentialType",
    "genericAuthType": "httpCustomAuth",
    "headerParameters": {
      "parameters": [
        {
          "name": "accept",
          "value": "application/json"
        }
      ]
    }
  },
  "credentials": {
    "httpCustomAuth": {
      "id": "pJguwbEclNjPgU6F",
      "name": "Leo Custom Auth account"
    }
  },
  "typeVersion": 4.2
}

================ Node #2021 ================
{
  "id": "a1d32bae-67a0-487d-9583-0b53ab25d184",
  "name": "Leo - Get imageId1",
  "type": "n8n-nodes-base.httpRequest",
  "position": [
    3200,
    -1020
  ],
  "parameters": {
    "url": "=https://cloud.leonardo.ai/api/rest/v1/generations/{{ $json.body.sdGenerationJob.generationId }}",
    "options": {
      "response": {
        "response": {
          "fullResponse": true
        }
      }
    },
    "sendHeaders": true,
    "authentication": "genericCredentialType",
    "genericAuthType": "httpCustomAuth",
    "headerParameters": {
      "parameters": [
        {
          "name": "content-type",
          "value": "application/json"
        }
      ]
    }
  },
  "credentials": {
    "httpCustomAuth": {
      "id": "pJguwbEclNjPgU6F",
      "name": "Leo Custom Auth account"
    }
  },
  "typeVersion": 4.2
}

================ Node #2022 ================
{
  "id": "89436c9d-1898-4f32-abf4-1f4fef7473a8",
  "name": "Prompt Settings",
  "type": "n8n-nodes-base.set",
  "position": [
    2400,
    -1020
  ],
  "parameters": {
    "options": {},
    "assignments": {
      "assignments": [
        {
          "id": "56c8f20d-d9d9-4be7-ac2a-38df6ffdd722",
          "name": "model",
          "type": "string",
          "value": "de7d3faf-762f-48e0-b3b7-9d0ac3a3fcf3"
        },
        {
          "id": "dc66dd4a-9209-4790-b844-e19931accc39",
          "name": "additional",
          "type": "string",
          "value": "Use the rule of thirds, leading lines, & balance."
        }
      ]
    },
    "includeOtherFields": true
  },
  "typeVersion": 3.4
}

================ Node #2023 ================
{
  "id": "9791db0e-c9a5-4fd8-b3fc-fd92b65c6362",
  "name": "Leo - Generate Image1",
  "type": "n8n-nodes-base.httpRequest",
  "position": [
    2800,
    -1020
  ],
  "parameters": {
    "url": "https://cloud.leonardo.ai/api/rest/v1/generations",
    "method": "POST",
    "options": {
      "response": {
        "response": {
          "fullResponse": true
        }
      }
    },
    "jsonBody": "={\n \"alchemy\": true,\n \"width\": 768,\n \"height\": 1376,\n \"modelId\": \"{{ $('Prompt Settings').item.json.model }}\",\n \"num_images\": 1,\n \"presetStyle\": \"DYNAMIC\",\n \"prompt\": \"{{ $json.body.promptGeneration.prompt }};\",\n \"guidance_scale\": 7,\n \"highResolution\": true,\n \"promptMagic\": false,\n \"promptMagicStrength\": 0.5,\n \"promptMagicVersion\": \"v3\",\n \"public\": false,\n \"ultra\": false,\n \"photoReal\": false,\n \"negative_prompt\": \"\"\n} ",
    "sendBody": true,
    "sendHeaders": true,
    "specifyBody": "json",
    "authentication": "genericCredentialType",
    "genericAuthType": "httpCustomAuth",
    "headerParameters": {
      "parameters": [
        {
          "name": "accept",
          "value": "application/json"
        }
      ]
    }
  },
  "credentials": {
    "httpCustomAuth": {
      "id": "pJguwbEclNjPgU6F",
      "name": "Leo Custom Auth account"
    }
  },
  "typeVersion": 4.2
}

================ Node #2024 ================
{
  "id": "8b77e0b5-5ed5-401b-964f-e2a651b774ee",
  "name": "Sticky Note12",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    2340,
    -1200
  ],
  "parameters": {
    "color": 6,
    "width": 1447,
    "height": 531,
    "content": "# 4. Generate Thumbnail Image"
  },
  "typeVersion": 1
}

================ Node #2025 ================
{
  "id": "64c5d0f0-07ce-493d-b974-69051ed41e0d",
  "name": "Wait 30 Seconds",
  "type": "n8n-nodes-base.wait",
  "position": [
    3000,
    -1020
  ],
  "webhookId": "08a6381f-bd3d-4cc1-8420-62c886406000",
  "parameters": {
    "amount": 30
  },
  "typeVersion": 1.1
}

================ Node #2026 ================
{
  "id": "94e8f4a6-c22e-4938-bfc6-b5a040e3aa5e",
  "name": "Sticky Note13",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    2740,
    -1100
  ],
  "parameters": {
    "color": 3,
    "width": 220,
    "height": 280,
    "content": "### Uses the latest Leonardo.ai Model: Phoenix 1.0"
  },
  "typeVersion": 1
}

================ Node #2027 ================
{
  "id": "d418088f-cebd-483a-b413-09f62faac1b7",
  "name": "Leo - Improve Prompt",
  "type": "n8n-nodes-base.httpRequest",
  "position": [
    2800,
    -420
  ],
  "parameters": {
    "url": "https://cloud.leonardo.ai/api/rest/v1/prompt/improve",
    "method": "POST",
    "options": {
      "response": {
        "response": {
          "fullResponse": true
        }
      }
    },
    "jsonBody": "={\n \"prompt\": \"{{ $json.image_prompt }}\"\n}",
    "sendBody": true,
    "sendHeaders": true,
    "specifyBody": "json",
    "authentication": "genericCredentialType",
    "genericAuthType": "httpCustomAuth",
    "headerParameters": {
      "parameters": [
        {
          "name": "accept",
          "value": "application/json"
        }
      ]
    }
  },
  "credentials": {
    "httpCustomAuth": {
      "id": "pJguwbEclNjPgU6F",
      "name": "Leo Custom Auth account"
    }
  },
  "typeVersion": 4.2
}

================ Node #2028 ================
{
  "id": "c77d1f84-8db8-4ca5-9bcf-854a4bda9cf5",
  "name": "Leo - Get imageId",
  "type": "n8n-nodes-base.httpRequest",
  "position": [
    3400,
    -420
  ],
  "parameters": {
    "url": "=https://cloud.leonardo.ai/api/rest/v1/generations/{{ $json.body.sdGenerationJob.generationId }}",
    "options": {
      "response": {
        "response": {
          "fullResponse": true
        }
      }
    },
    "sendHeaders": true,
    "authentication": "genericCredentialType",
    "genericAuthType": "httpCustomAuth",
    "headerParameters": {
      "parameters": [
        {
          "name": "content-type",
          "value": "application/json"
        }
      ]
    }
  },
  "credentials": {
    "httpCustomAuth": {
      "id": "pJguwbEclNjPgU6F",
      "name": "Leo Custom Auth account"
    }
  },
  "typeVersion": 4.2
}

================ Node #2029 ================
{
  "id": "3f8fef1e-c7ff-43d2-9385-4ab8a6dce553",
  "name": "Prompt Settings1",
  "type": "n8n-nodes-base.set",
  "position": [
    2600,
    -420
  ],
  "parameters": {
    "options": {},
    "assignments": {
      "assignments": [
        {
          "id": "56c8f20d-d9d9-4be7-ac2a-38df6ffdd722",
          "name": "model",
          "type": "string",
          "value": "de7d3faf-762f-48e0-b3b7-9d0ac3a3fcf3"
        },
        {
          "id": "dc66dd4a-9209-4790-b844-e19931accc39",
          "name": "additional",
          "type": "string",
          "value": "Use the rule of thirds, leading lines, & balance."
        }
      ]
    },
    "includeOtherFields": true
  },
  "typeVersion": 3.4
}

================ Node #2030 ================
{
  "id": "b6c43a16-29e8-4074-9dda-5661dfd3da5d",
  "name": "Leo - Generate Image",
  "type": "n8n-nodes-base.httpRequest",
  "position": [
    3000,
    -420
  ],
  "parameters": {
    "url": "https://cloud.leonardo.ai/api/rest/v1/generations",
    "method": "POST",
    "options": {
      "response": {
        "response": {
          "fullResponse": true
        }
      }
    },
    "jsonBody": "={\n \"alchemy\": false,\n \"width\": 768,\n \"height\": 1376,\n \"modelId\": \"{{ $('Prompt Settings1').item.json.model }}\",\n \"num_images\": 1,\n \"presetStyle\": \"DYNAMIC\",\n \"prompt\": \"{{ $json.body.promptGeneration.prompt }};\",\n \"guidance_scale\": 7,\n \"highResolution\": true,\n \"promptMagic\": false,\n \"promptMagicStrength\": 0.5,\n \"promptMagicVersion\": \"v3\",\n \"public\": false,\n \"ultra\": true,\n \"photoReal\": false,\n \"negative_prompt\": \"\"\n} ",
    "sendBody": true,
    "sendHeaders": true,
    "specifyBody": "json",
    "authentication": "genericCredentialType",
    "genericAuthType": "httpCustomAuth",
    "headerParameters": {
      "parameters": [
        {
          "name": "accept",
          "value": "application/json"
        }
      ]
    }
  },
  "credentials": {
    "httpCustomAuth": {
      "id": "pJguwbEclNjPgU6F",
      "name": "Leo Custom Auth account"
    }
  },
  "typeVersion": 4.2
}

================ Node #2031 ================
{
  "id": "c3910b17-9a27-4419-ab01-409cc7090c68",
  "name": "Wait 30 Seconds1",
  "type": "n8n-nodes-base.wait",
  "position": [
    3200,
    -420
  ],
  "webhookId": "08a6381f-bd3d-4cc1-8420-62c886406000",
  "parameters": {
    "amount": 30
  },
  "typeVersion": 1.1
}

================ Node #2032 ================
{
  "id": "85a320a3-7a06-41f9-a34a-de3fd1ce2950",
  "name": "Loop Over Items",
  "type": "n8n-nodes-base.splitInBatches",
  "position": [
    2400,
    -520
  ],
  "parameters": {
    "options": {
      "reset": false
    }
  },
  "typeVersion": 3
}

================ Node #2033 ================
{
  "id": "8b3158d1-6be6-4446-8083-f3a9fa18e074",
  "name": "Sticky Note14",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    2340,
    -640
  ],
  "parameters": {
    "color": 6,
    "width": 1447,
    "height": 551,
    "content": "# 4. Generate Scene Images"
  },
  "typeVersion": 1
}

================ Node #2034 ================
{
  "id": "3ee7e646-8690-4a7c-9820-ce2985b02e7a",
  "name": "Add Asset Info",
  "type": "n8n-nodes-base.airtable",
  "position": [
    3400,
    -1020
  ],
  "parameters": {
    "base": {
      "__rl": true,
      "mode": "list",
      "value": "appRDq3E42JNtruIP",
      "cachedResultUrl": "https://airtable.com/appRDq3E42JNtruIP",
      "cachedResultName": "Content Manager"
    },
    "table": {
      "__rl": true,
      "mode": "list",
      "value": "tblqoaJ7bRLBgENED",
      "cachedResultUrl": "https://airtable.com/appRDq3E42JNtruIP/tblqoaJ7bRLBgENED",
      "cachedResultName": "Assets"
    },
    "columns": {
      "value": {
        "Asset URL": "={{ $json.body.generations_by_pk.generated_images[0].url }}",
        "File Size": 0,
        "Asset Name": "=TN - {{ $('Get Content').item.json.Title }}",
        "Asset Type": "Image"
      },
      "schema": [
        {
          "id": "id",
          "type": "string",
          "display": true,
          "removed": false,
          "readOnly": true,
          "required": false,
          "displayName": "id",
          "defaultMatch": true
        },
        {
          "id": "Asset Name",
          "type": "string",
          "display": true,
          "removed": false,
          "readOnly": false,
          "required": false,
          "displayName": "Asset Name",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "Asset Type",
          "type": "options",
          "display": true,
          "options": [
            {
              "name": "Image",
              "value": "Image"
            },
            {
              "name": "Video",
              "value": "Video"
            },
            {
              "name": "Document",
              "value": "Document"
            }
          ],
          "removed": false,
          "readOnly": false,
          "required": false,
          "displayName": "Asset Type",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "Upload Date",
          "type": "dateTime",
          "display": true,
          "removed": false,
          "readOnly": false,
          "required": false,
          "displayName": "Upload Date",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "File Size",
          "type": "number",
          "display": true,
          "removed": false,
          "readOnly": false,
          "required": false,
          "displayName": "File Size",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "Asset URL",
          "type": "string",
          "display": true,
          "removed": false,
          "readOnly": false,
          "required": false,
          "displayName": "Asset URL",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "Usage Rights",
          "type": "string",
          "display": true,
          "removed": false,
          "readOnly": false,
          "required": false,
          "displayName": "Usage Rights",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "Thumbnail",
          "type": "array",
          "display": true,
          "removed": false,
          "readOnly": false,
          "required": false,
          "displayName": "Thumbnail",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "Associated Videos",
          "type": "array",
          "display": true,
          "removed": false,
          "readOnly": false,
          "required": false,
          "displayName": "Associated Videos",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "Associated Social Media Posts",
          "type": "array",
          "display": true,
          "removed": false,
          "readOnly": false,
          "required": false,
          "displayName": "Associated Social Media Posts",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "Associated Blog Posts",
          "type": "array",
          "display": true,
          "removed": false,
          "readOnly": false,
          "required": false,
          "displayName": "Associated Blog Posts",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "Related Campaigns",
          "type": "array",
          "display": true,
          "removed": false,
          "readOnly": false,
          "required": false,
          "displayName": "Related Campaigns",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "Schedules",
          "type": "array",
          "display": true,
          "removed": false,
          "readOnly": false,
          "required": false,
          "displayName": "Schedules",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "Content Calendar",
          "type": "array",
          "display": true,
          "removed": false,
          "readOnly": false,
          "required": false,
          "displayName": "Content Calendar",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        }
      ],
      "mappingMode": "defineBelow",
      "matchingColumns": [
        "id"
      ]
    },
    "options": {},
    "operation": "create"
  },
  "credentials": {
    "airtableTokenApi": {
      "id": "zS1BIbs19PvAC2d0",
      "name": "AlexK Airtable Personal Access Token account"
    }
  },
  "typeVersion": 2.1
}

================ Node #2035 ================
{
  "id": "88cd8514-9a54-47bf-b822-8c01ef05c08e",
  "name": "Add Asset Info1",
  "type": "n8n-nodes-base.airtable",
  "position": [
    3600,
    -420
  ],
  "parameters": {
    "base": {
      "__rl": true,
      "mode": "list",
      "value": "appRDq3E42JNtruIP",
      "cachedResultUrl": "https://airtable.com/appRDq3E42JNtruIP",
      "cachedResultName": "Content Manager"
    },
    "table": {
      "__rl": true,
      "mode": "list",
      "value": "tblqoaJ7bRLBgENED",
      "cachedResultUrl": "https://airtable.com/appRDq3E42JNtruIP/tblqoaJ7bRLBgENED",
      "cachedResultName": "Assets"
    },
    "columns": {
      "value": {
        "Asset URL": "={{ $json.body.generations_by_pk.generated_images[0].url }}",
        "File Size": 0,
        "Asset Name": "=Scene - {{ $('Loop Over Items').item.json.script }}",
        "Asset Type": "Image"
      },
      "schema": [
        {
          "id": "id",
          "type": "string",
          "display": true,
          "removed": false,
          "readOnly": true,
          "required": false,
          "displayName": "id",
          "defaultMatch": true
        },
        {
          "id": "Asset Name",
          "type": "string",
          "display": true,
          "removed": false,
          "readOnly": false,
          "required": false,
          "displayName": "Asset Name",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "Asset Type",
          "type": "options",
          "display": true,
          "options": [
            {
              "name": "Image",
              "value": "Image"
            },
            {
              "name": "Video",
              "value": "Video"
            },
            {
              "name": "Document",
              "value": "Document"
            }
          ],
          "removed": false,
          "readOnly": false,
          "required": false,
          "displayName": "Asset Type",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "Upload Date",
          "type": "dateTime",
          "display": true,
          "removed": false,
          "readOnly": false,
          "required": false,
          "displayName": "Upload Date",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "File Size",
          "type": "number",
          "display": true,
          "removed": false,
          "readOnly": false,
          "required": false,
          "displayName": "File Size",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "Asset URL",
          "type": "string",
          "display": true,
          "removed": false,
          "readOnly": false,
          "required": false,
          "displayName": "Asset URL",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "Usage Rights",
          "type": "string",
          "display": true,
          "removed": false,
          "readOnly": false,
          "required": false,
          "displayName": "Usage Rights",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "Thumbnail",
          "type": "array",
          "display": true,
          "removed": false,
          "readOnly": false,
          "required": false,
          "displayName": "Thumbnail",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "Associated Videos",
          "type": "array",
          "display": true,
          "removed": false,
          "readOnly": false,
          "required": false,
          "displayName": "Associated Videos",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "Associated Social Media Posts",
          "type": "array",
          "display": true,
          "removed": false,
          "readOnly": false,
          "required": false,
          "displayName": "Associated Social Media Posts",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "Associated Blog Posts",
          "type": "array",
          "display": true,
          "removed": false,
          "readOnly": false,
          "required": false,
          "displayName": "Associated Blog Posts",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "Related Campaigns",
          "type": "array",
          "display": true,
          "removed": false,
          "readOnly": false,
          "required": false,
          "displayName": "Related Campaigns",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "Schedules",
          "type": "array",
          "display": true,
          "removed": false,
          "readOnly": false,
          "required": false,
          "displayName": "Schedules",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "Content Calendar",
          "type": "array",
          "display": true,
          "removed": false,
          "readOnly": false,
          "required": false,
          "displayName": "Content Calendar",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        }
      ],
      "mappingMode": "defineBelow",
      "matchingColumns": [
        "id"
      ]
    },
    "options": {},
    "operation": "create"
  },
  "credentials": {
    "airtableTokenApi": {
      "id": "zS1BIbs19PvAC2d0",
      "name": "AlexK Airtable Personal Access Token account"
    }
  },
  "typeVersion": 2.1
}

================ Node #2036 ================
{
  "id": "67cd2444-506d-4754-a75d-e725239d6f7c",
  "name": "Sticky Note15",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    2740,
    -500
  ],
  "parameters": {
    "color": 3,
    "width": 220,
    "height": 280,
    "content": "### Uses the latest Leonardo.ai Model: Phoenix 1.0"
  },
  "typeVersion": 1
}

================ Node #2037 ================
{
  "id": "1acc2d91-c4ba-4a26-bb74-a848875e9fac",
  "name": "Wikipedia",
  "type": "@n8n/n8n-nodes-langchain.toolWikipedia",
  "position": [
    1640,
    -740
  ],
  "parameters": {},
  "typeVersion": 1
}

================ Node #2038 ================
{
  "id": "1c5b5602-bf95-4534-8c73-69b8157765ee",
  "name": "Sticky Note1",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    2940,
    -840
  ],
  "parameters": {
    "color": 7,
    "width": 400,
    "height": 80,
    "content": "### Optionally, you can modify the number of images generated to provide more options"
  },
  "typeVersion": 1
}

================ Node #2039 ================
{
  "id": "79552e45-5dbc-4ddb-8543-039ca76dfe56",
  "name": "Sticky Note2",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    2940,
    -560
  ],
  "parameters": {
    "color": 7,
    "width": 400,
    "height": 80,
    "content": "### Optionally, you can modify the number of images generated to provide more options"
  },
  "typeVersion": 1
}

================ Node #2040 ================
{
  "id": "1205b121-8aaa-4e41-874b-4e81aad6374e",
  "name": "Sticky Note",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    120,
    600
  ],
  "parameters": {
    "color": 4,
    "width": 462.4041757955455,
    "height": 315.6388466176832,
    "content": "## Generate SEO Seed Keywords Using AI\n\nThis flow uses an AI node to generate Seed Keywords to focus SEO efforts on based on your ideal customer profile\n\n**Outputs:** \n- List of 20 Seed Keywords\n\n\n**Pre-requisites / Dependencies:**\n- You know your ideal customer profile (ICP)\n- An AI API account (either OpenAI or Anthropic recommended)"
  },
  "typeVersion": 1
}

================ Node #2041 ================
{
  "id": "d2654d75-2b64-4ec3-b583-57d2b6b7b195",
  "name": "Sticky Note13",
  "type": "n8n-nodes-base.stickyNote",
  "disabled": true,
  "position": [
    640,
    920
  ],
  "parameters": {
    "color": 7,
    "width": 287.0816455493243,
    "height": 330.47923074942287,
    "content": "**Generate draft seed KW based on ICP**\n\n"
  },
  "typeVersion": 1
}

================ Node #2042 ================
{
  "id": "d248a58e-3705-4b6f-99cb-e9187e56781c",
  "name": "Anthropic Chat Model",
  "type": "@n8n/n8n-nodes-langchain.lmChatAnthropic",
  "position": [
    680,
    1120
  ],
  "parameters": {
    "options": {}
  },
  "typeVersion": 1.2
}

================ Node #2043 ================
{
  "id": "71517d83-59f5-441a-8a75-c35f4e06a8a2",
  "name": "Split Out",
  "type": "n8n-nodes-base.splitOut",
  "position": [
    980,
    980
  ],
  "parameters": {
    "options": {},
    "fieldToSplitOut": "output.answer"
  },
  "typeVersion": 1
}

================ Node #2044 ================
{
  "id": "1c68eff5-6478-4eba-9abe-3ccea2a17a5c",
  "name": "Sticky Note12",
  "type": "n8n-nodes-base.stickyNote",
  "disabled": true,
  "position": [
    120,
    920
  ],
  "parameters": {
    "color": 7,
    "width": 492.16246201447336,
    "height": 213.62075341687063,
    "content": "**Get data from airtable and format** "
  },
  "typeVersion": 1
}

================ Node #2045 ================
{
  "id": "53dcc524-ef3d-40b8-b79d-976517dce4e7",
  "name": "Sticky Note17",
  "type": "n8n-nodes-base.stickyNote",
  "disabled": true,
  "position": [
    960,
    920
  ],
  "parameters": {
    "color": 7,
    "width": 348.42891651921957,
    "height": 213.62075341687063,
    "content": "**Add data to database**"
  },
  "typeVersion": 1
}

================ Node #2046 ================
{
  "id": "570495fe-3f1d-44ae-bea0-9fa4b2ce15ef",
  "name": "Sticky Note11",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    640,
    820
  ],
  "parameters": {
    "color": 6,
    "width": 393.46745700785266,
    "height": 80,
    "content": "**Costs to run**\nApprox. $0.02-0.05 for a run using Claude Sonnet 3.5"
  },
  "typeVersion": 1
}

================ Node #2047 ================
{
  "id": "6e5e84c5-409f-4f37-931a-21a44aff7c5e",
  "name": "Set Ideal Customer Profile (ICP)",
  "type": "n8n-nodes-base.set",
  "position": [
    160,
    980
  ],
  "parameters": {
    "options": {},
    "assignments": {
      "assignments": [
        {
          "id": "973e949e-1afd-4378-8482-d2168532eff6",
          "name": "product",
          "type": "string",
          "value": "=**Replace this with a string detailing your intended product (if you have one)**"
        },
        {
          "id": "ce9c0a8f-6157-4b46-8b77-133545dc71bd",
          "name": "pain points",
          "type": "string",
          "value": "=**Replace this with a string list of customer pain points**"
        },
        {
          "id": "5abc858a-c412-4acf-acb9-488e4d992d2f",
          "name": "goals",
          "type": "string",
          "value": "=**Replace this with a string list of your customers key goals/objectives**"
        },
        {
          "id": "fbdd1ef7-c1b9-48eb-b73e-a383f12b5ba1",
          "name": "current solutions",
          "type": "string",
          "value": "=**Replace this with a string detailing how your ideal customer currently solves their pain ppoints**"
        },
        {
          "id": "2e5c8f48-266e-486c-956f-51f1449f6288",
          "name": "expertise level",
          "type": "string",
          "value": "=**Replace this with a string detailing customer level of expertise**"
        }
      ]
    }
  },
  "notesInFlow": true,
  "typeVersion": 3.4
}

================ Node #2048 ================
{
  "id": "bd5781f4-6f35-45d3-8182-12ea6712eddf",
  "name": "Aggregate for AI node",
  "type": "n8n-nodes-base.aggregate",
  "position": [
    380,
    980
  ],
  "parameters": {
    "options": {},
    "aggregate": "aggregateAllItemData"
  },
  "notesInFlow": true,
  "typeVersion": 1
}

================ Node #2049 ================
{
  "id": "244943bf-e4dd-40fc-9a43-7a5cd0da1c5b",
  "name": "Sticky Note14",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    640,
    1260
  ],
  "parameters": {
    "color": 3,
    "width": 284.87764467541297,
    "height": 80,
    "content": "**REQUIRED**\nConnect to your own AI API above"
  },
  "typeVersion": 1
}

================ Node #2050 ================
{
  "id": "73c8f47a-4fdb-40c8-9062-890ef1265ab0",
  "name": "Sticky Note16",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    120,
    1140
  ],
  "parameters": {
    "color": 3,
    "width": 284.87764467541297,
    "height": 80,
    "content": "**REQUIRED**\nSet your Ideal Customer Profile before proceeding"
  },
  "typeVersion": 1
}

================ Node #2051 ================
{
  "id": "a5b93e6d-44ab-4b6f-b86a-25dc621b52b0",
  "name": "AI Agent",
  "type": "@n8n/n8n-nodes-langchain.agent",
  "position": [
    660,
    980
  ],
  "parameters": {
    "text": "=User:\nHere are some important rules for you to follow:\n<rules>\n1. Analyze the ICP information carefully.\n2. Generate 15-20 seed keywords that are relevant to the ICP's needs, challenges, goals, and search behavior.\n3. Ensure the keywords are broad enough to be considered \"\"head\"\" terms, but specific enough to target the ICP effectively.\n4. Consider various aspects of the ICP's journey, including awareness, consideration, and decision stages.\n5. Include a mix of product-related, problem-related, and solution-related terms.\n6. Think beyond just the product itself - consider industry trends, related technologies, and broader business concepts that would interest the ICP.\n7. Avoid overly generic terms that might attract irrelevant traffic.\n8. Aim for a mix of keyword difficulties, including both competitive and less competitive terms.\n9. Include keywords that cover different search intents: informational, navigational, commercial, and transactional.\n10. Consider related tools or platforms that the ICP might use, and include relevant integration-related keywords.\n11. If applicable, include some location-specific keywords based on the ICP's geographic information.\n12. Incorporate industry-specific terminology or jargon that the ICP would likely use in their searches.\n13. Consider emerging trends or pain points in the ICP's industry that they might be searching for solutions to.\n13. Format the keywords in lowercase, without punctuation. Trim any leading or trailing white space.\n</rules>\n\nYour output should be an array of strings, each representing a seed keyword:\n<example>\n['b2b lead generation', 'startup marketing strategies', 'saas sales funnel', ...]\n</example>\n\nHere is the Ideal Customer Profile (ICP) information:\n<input>\n{{ $json.data[0].product }}\n</input>\n\nNow:\nBased on the provided ICP, generate an array of 15-20 seed keywords that will form the foundation of a comprehensive SEO strategy for this B2B SaaS company. These keywords should reflect a deep understanding of the ICP's needs, challenges, and search behavior, while also considering broader industry trends and related concepts.\n\nFirst, write out your ideas in {thoughts: } JSON as part of your analysis, then answer inside the {answer: } key in the JSON. ",
    "agent": "conversationalAgent",
    "options": {
      "systemMessage": "=System: You are an expert SEO strategist tasked with generating 15-20 key head search terms (seed keywords) for a B2B SaaS company. Your goal is to create a comprehensive list of keywords that will attract and engage the ideal customer profile (ICP) described."
    },
    "promptType": "define"
  },
  "typeVersion": 1.6
}

================ Node #2052 ================
{
  "id": "ca3c0bd5-7ef0-4e2b-9b5e-071773c32c85",
  "name": "Connect to your own database",
  "type": "n8n-nodes-base.noOp",
  "position": [
    1140,
    980
  ],
  "parameters": {},
  "typeVersion": 1
}

================ Node #2053 ================
{
  "id": "94639a81-5e46-482a-851a-5443bfe9863c",
  "name": "Sticky Note15",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    1120,
    1140
  ],
  "parameters": {
    "color": 3,
    "width": 284.87764467541297,
    "height": 80,
    "content": "**REQUIRED**\nConnect to your own database / GSheet / Airtable base to output these"
  },
  "typeVersion": 1
}

================ Node #2054 ================
{
  "id": "16498e92-c0d5-44f4-b993-c9c8930955bc",
  "name": "When clicking \u2018Test workflow\u2019",
  "type": "n8n-nodes-base.manualTrigger",
  "position": [
    -60,
    980
  ],
  "parameters": {},
  "typeVersion": 1
}

================ Node #2055 ================
{
  "id": "06a34e3b-519a-4b48-afd0-4f2b51d2105d",
  "name": "When clicking \u2018Test workflow\u2019",
  "type": "n8n-nodes-base.manualTrigger",
  "position": [
    4980,
    740
  ],
  "parameters": {},
  "typeVersion": 1
}

================ Node #2056 ================
{
  "id": "9213003d-433f-41ab-838b-be93860261b2",
  "name": "GitHub",
  "type": "n8n-nodes-base.github",
  "position": [
    5200,
    740
  ],
  "parameters": {
    "owner": {
      "__rl": true,
      "mode": "name",
      "value": "mrscoopers"
    },
    "filePath": "Top_1000_IMDB_movies.csv",
    "resource": "file",
    "operation": "get",
    "repository": {
      "__rl": true,
      "mode": "list",
      "value": "n8n_demo",
      "cachedResultUrl": "https://github.com/mrscoopers/n8n_demo",
      "cachedResultName": "n8n_demo"
    },
    "additionalParameters": {}
  },
  "credentials": {
    "githubApi": {
      "id": "VbfC0mqEq24vPIwq",
      "name": "GitHub n8n demo"
    }
  },
  "typeVersion": 1
}

================ Node #2057 ================
{
  "id": "9850d1a9-3a6f-44c0-9f9d-4d20fda0b602",
  "name": "Extract from File",
  "type": "n8n-nodes-base.extractFromFile",
  "position": [
    5360,
    740
  ],
  "parameters": {
    "options": {}
  },
  "typeVersion": 1
}

================ Node #2058 ================
{
  "id": "7704f993-b1c9-477a-8b5a-77dc2cb68161",
  "name": "Embeddings OpenAI",
  "type": "@n8n/n8n-nodes-langchain.embeddingsOpenAi",
  "position": [
    5560,
    940
  ],
  "parameters": {
    "model": "text-embedding-3-small",
    "options": {}
  },
  "credentials": {
    "openAiApi": {
      "id": "deYJUwkgL1Euu613",
      "name": "OpenAi account 2"
    }
  },
  "typeVersion": 1
}

================ Node #2059 ================
{
  "id": "bc6dd8e5-0186-4bf9-9c60-2eab6d9b6520",
  "name": "Default Data Loader",
  "type": "@n8n/n8n-nodes-langchain.documentDefaultDataLoader",
  "position": [
    5700,
    960
  ],
  "parameters": {
    "options": {
      "metadata": {
        "metadataValues": [
          {
            "name": "movie_name",
            "value": "={{ $('Extract from File').item.json['Movie Name'] }}"
          },
          {
            "name": "movie_release_date",
            "value": "={{ $('Extract from File').item.json['Year of Release'] }}"
          },
          {
            "name": "movie_description",
            "value": "={{ $('Extract from File').item.json.Description }}"
          }
        ]
      }
    },
    "jsonData": "={{ $('Extract from File').item.json.Description }}",
    "jsonMode": "expressionData"
  },
  "typeVersion": 1
}

================ Node #2060 ================
{
  "id": "f87ea014-fe79-444b-88ea-0c4773872b0a",
  "name": "Token Splitter",
  "type": "@n8n/n8n-nodes-langchain.textSplitterTokenSplitter",
  "position": [
    5700,
    1140
  ],
  "parameters": {},
  "typeVersion": 1
}

================ Node #2061 ================
{
  "id": "d8d28cec-c8e8-4350-9e98-cdbc6da54988",
  "name": "Qdrant Vector Store",
  "type": "@n8n/n8n-nodes-langchain.vectorStoreQdrant",
  "position": [
    5600,
    740
  ],
  "parameters": {
    "mode": "insert",
    "options": {},
    "qdrantCollection": {
      "__rl": true,
      "mode": "id",
      "value": "imdb"
    }
  },
  "credentials": {
    "qdrantApi": {
      "id": "Zin08PA0RdXVUKK7",
      "name": "QdrantApi n8n demo"
    }
  },
  "typeVersion": 1
}

================ Node #2062 ================
{
  "id": "f86e03dc-12ea-4929-9035-4ec3cf46e300",
  "name": "When chat message received",
  "type": "@n8n/n8n-nodes-langchain.chatTrigger",
  "position": [
    4920,
    1140
  ],
  "webhookId": "71bfe0f8-227e-466b-9d07-69fd9fe4a27b",
  "parameters": {
    "options": {}
  },
  "typeVersion": 1.1
}

================ Node #2063 ================
{
  "id": "ead23ef6-2b6b-428d-b412-b3394bff8248",
  "name": "OpenAI Chat Model",
  "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
  "position": [
    5040,
    1340
  ],
  "parameters": {
    "model": "gpt-4o-mini",
    "options": {}
  },
  "credentials": {
    "openAiApi": {
      "id": "deYJUwkgL1Euu613",
      "name": "OpenAi account 2"
    }
  },
  "typeVersion": 1
}

================ Node #2064 ================
{
  "id": "7ab936e1-aac8-43bc-a497-f2d02c2c19e5",
  "name": "Call n8n Workflow Tool",
  "type": "@n8n/n8n-nodes-langchain.toolWorkflow",
  "position": [
    5320,
    1340
  ],
  "parameters": {
    "name": "movie_recommender",
    "schemaType": "manual",
    "workflowId": {
      "__rl": true,
      "mode": "id",
      "value": "a58HZKwcOy7lmz56"
    },
    "description": "Call this tool to get a list of recommended movies from a vector database. ",
    "inputSchema": "{\n\"type\": \"object\",\n\"properties\": {\n\t\"positive_example\": {\n \"type\": \"string\",\n \"description\": \"A string with a movie description matching the user's positive recommendation request\"\n },\n \"negative_example\": {\n \"type\": \"string\",\n \"description\": \"A string with a movie description matching the user's negative anti-recommendation reuqest\"\n }\n}\n}",
    "specifyInputSchema": true
  },
  "typeVersion": 1.2
}

================ Node #2065 ================
{
  "id": "ce55f334-698b-45b1-9e12-0eaa473187d4",
  "name": "Window Buffer Memory",
  "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
  "position": [
    5160,
    1340
  ],
  "parameters": {},
  "typeVersion": 1.2
}

================ Node #2066 ================
{
  "id": "41c1ee11-3117-4765-98fc-e56cc6fc8fb2",
  "name": "Execute Workflow Trigger",
  "type": "n8n-nodes-base.executeWorkflowTrigger",
  "position": [
    5640,
    1600
  ],
  "parameters": {},
  "typeVersion": 1
}

================ Node #2067 ================
{
  "id": "db8d6ab6-8cd2-4a8c-993d-f1b7d7fdcffd",
  "name": "Merge",
  "type": "n8n-nodes-base.merge",
  "position": [
    6540,
    1500
  ],
  "parameters": {
    "mode": "combine",
    "options": {},
    "combineBy": "combineAll"
  },
  "typeVersion": 3
}

================ Node #2068 ================
{
  "id": "c7bc5e04-22b1-40db-ba74-1ab234e51375",
  "name": "Split Out",
  "type": "n8n-nodes-base.splitOut",
  "position": [
    7260,
    1480
  ],
  "parameters": {
    "options": {},
    "fieldToSplitOut": "result"
  },
  "typeVersion": 1
}

================ Node #2069 ================
{
  "id": "a2002d2e-362a-49eb-a42d-7b665ddd67a0",
  "name": "Split Out1",
  "type": "n8n-nodes-base.splitOut",
  "position": [
    7140,
    1260
  ],
  "parameters": {
    "options": {},
    "fieldToSplitOut": "result.points"
  },
  "typeVersion": 1
}

================ Node #2070 ================
{
  "id": "f69a87f1-bfb9-4337-9350-28d2416c1580",
  "name": "Merge1",
  "type": "n8n-nodes-base.merge",
  "position": [
    7520,
    1400
  ],
  "parameters": {
    "mode": "combine",
    "options": {},
    "fieldsToMatchString": "id"
  },
  "typeVersion": 3
}

================ Node #2071 ================
{
  "id": "b2f2529e-e260-4d72-88ef-09b804226004",
  "name": "Aggregate",
  "type": "n8n-nodes-base.aggregate",
  "position": [
    7960,
    1400
  ],
  "parameters": {
    "options": {},
    "aggregate": "aggregateAllItemData",
    "destinationFieldName": "response"
  },
  "typeVersion": 1
}

================ Node #2072 ================
{
  "id": "bedea10f-b4de-4f0e-9d60-cc8117a2b328",
  "name": "AI Agent",
  "type": "@n8n/n8n-nodes-langchain.agent",
  "position": [
    5140,
    1140
  ],
  "parameters": {
    "options": {
      "systemMessage": "You are a Movie Recommender Tool using a Vector Database under the hood. Provide top-3 movie recommendations returned by the database, ordered by their recommendation score, but not showing the score to the user."
    }
  },
  "typeVersion": 1.6
}

================ Node #2073 ================
{
  "id": "e04276b5-7d69-437b-bf4f-9717808cc8f6",
  "name": "Embedding Recommendation Request with Open AI",
  "type": "n8n-nodes-base.httpRequest",
  "position": [
    5900,
    1460
  ],
  "parameters": {
    "url": "https://api.openai.com/v1/embeddings",
    "method": "POST",
    "options": {},
    "sendBody": true,
    "sendHeaders": true,
    "authentication": "predefinedCredentialType",
    "bodyParameters": {
      "parameters": [
        {
          "name": "input",
          "value": "={{ $json.query.positive_example }}"
        },
        {
          "name": "model",
          "value": "text-embedding-3-small"
        }
      ]
    },
    "headerParameters": {
      "parameters": [
        {
          "name": "Authorization",
          "value": "Bearer $OPENAI_API_KEY"
        }
      ]
    },
    "nodeCredentialType": "openAiApi"
  },
  "credentials": {
    "openAiApi": {
      "id": "deYJUwkgL1Euu613",
      "name": "OpenAi account 2"
    }
  },
  "typeVersion": 4.2
}

================ Node #2074 ================
{
  "id": "68e99f06-82f5-432c-8b31-8a1ae34981a6",
  "name": "Embedding Anti-Recommendation Request with Open AI",
  "type": "n8n-nodes-base.httpRequest",
  "position": [
    5920,
    1660
  ],
  "parameters": {
    "url": "https://api.openai.com/v1/embeddings",
    "method": "POST",
    "options": {},
    "sendBody": true,
    "sendHeaders": true,
    "authentication": "predefinedCredentialType",
    "bodyParameters": {
      "parameters": [
        {
          "name": "input",
          "value": "={{ $json.query.negative_example }}"
        },
        {
          "name": "model",
          "value": "text-embedding-3-small"
        }
      ]
    },
    "headerParameters": {
      "parameters": [
        {
          "name": "Authorization",
          "value": "Bearer $OPENAI_API_KEY"
        }
      ]
    },
    "nodeCredentialType": "openAiApi"
  },
  "credentials": {
    "openAiApi": {
      "id": "deYJUwkgL1Euu613",
      "name": "OpenAi account 2"
    }
  },
  "typeVersion": 4.2
}

================ Node #2075 ================
{
  "id": "ecb1d7e1-b389-48e8-a34a-176bfc923641",
  "name": "Extracting Embedding",
  "type": "n8n-nodes-base.set",
  "position": [
    6180,
    1460
  ],
  "parameters": {
    "options": {},
    "assignments": {
      "assignments": [
        {
          "id": "01a28c9d-aeb1-48bb-8a73-f8bddbd73460",
          "name": "positive_example",
          "type": "array",
          "value": "={{ $json.data[0].embedding }}"
        }
      ]
    }
  },
  "typeVersion": 3.4
}

================ Node #2076 ================
{
  "id": "4ed11142-a734-435f-9f7a-f59e2d423076",
  "name": "Extracting Embedding1",
  "type": "n8n-nodes-base.set",
  "position": [
    6180,
    1660
  ],
  "parameters": {
    "options": {},
    "assignments": {
      "assignments": [
        {
          "id": "01a28c9d-aeb1-48bb-8a73-f8bddbd73460",
          "name": "negative_example",
          "type": "array",
          "value": "={{ $json.data[0].embedding }}"
        }
      ]
    }
  },
  "typeVersion": 3.4
}

================ Node #2077 ================
{
  "id": "ce3aa9bc-a5b1-4529-bff5-e0dba43b99f3",
  "name": "Calling Qdrant Recommendation API",
  "type": "n8n-nodes-base.httpRequest",
  "position": [
    6840,
    1500
  ],
  "parameters": {
    "url": "https://edcc6735-2ffb-484f-b735-3467043828fe.europe-west3-0.gcp.cloud.qdrant.io:6333/collections/imdb_1000_open_ai/points/query",
    "method": "POST",
    "options": {},
    "jsonBody": "={\n \"query\": {\n \"recommend\": {\n \"positive\": [[{{ $json.positive_example }}]],\n \"negative\": [[{{ $json.negative_example }}]],\n \"strategy\": \"average_vector\"\n }\n },\n \"limit\":3\n}",
    "sendBody": true,
    "specifyBody": "json",
    "authentication": "predefinedCredentialType",
    "nodeCredentialType": "qdrantApi"
  },
  "credentials": {
    "qdrantApi": {
      "id": "Zin08PA0RdXVUKK7",
      "name": "QdrantApi n8n demo"
    }
  },
  "typeVersion": 4.2
}

================ Node #2078 ================
{
  "id": "9b8a6bdb-16fe-4edc-86d0-136fe059a777",
  "name": "Retrieving Recommended Movies Meta Data",
  "type": "n8n-nodes-base.httpRequest",
  "position": [
    7060,
    1460
  ],
  "parameters": {
    "url": "https://edcc6735-2ffb-484f-b735-3467043828fe.europe-west3-0.gcp.cloud.qdrant.io:6333/collections/imdb_1000_open_ai/points",
    "method": "POST",
    "options": {},
    "jsonBody": "={\n \"ids\": [\"{{ $json.result.points[0].id }}\", \"{{ $json.result.points[1].id }}\", \"{{ $json.result.points[2].id }}\"],\n \"with_payload\":true\n}",
    "sendBody": true,
    "specifyBody": "json",
    "authentication": "predefinedCredentialType",
    "nodeCredentialType": "qdrantApi"
  },
  "credentials": {
    "qdrantApi": {
      "id": "Zin08PA0RdXVUKK7",
      "name": "QdrantApi n8n demo"
    }
  },
  "typeVersion": 4.2
}

================ Node #2079 ================
{
  "id": "28cdcad5-3dca-48a1-b626-19eef657114c",
  "name": "Selecting Fields Relevant for Agent",
  "type": "n8n-nodes-base.set",
  "position": [
    7740,
    1400
  ],
  "parameters": {
    "options": {},
    "assignments": {
      "assignments": [
        {
          "id": "b4b520a5-d0e2-4dcb-af9d-0b7748fd44d6",
          "name": "movie_recommendation_score",
          "type": "number",
          "value": "={{ $json.score }}"
        },
        {
          "id": "c9f0982e-bd4e-484b-9eab-7e69e333f706",
          "name": "movie_description",
          "type": "string",
          "value": "={{ $json.payload.content }}"
        },
        {
          "id": "7c7baf11-89cd-4695-9f37-13eca7e01163",
          "name": "movie_name",
          "type": "string",
          "value": "={{ $json.payload.metadata.movie_name }}"
        },
        {
          "id": "1d1d269e-43c7-47b0-859b-268adf2dbc21",
          "name": "movie_release_year",
          "type": "string",
          "value": "={{ $json.payload.metadata.release_year }}"
        }
      ]
    }
  },
  "typeVersion": 3.4
}

================ Node #2080 ================
{
  "id": "56e73f01-5557-460a-9a63-01357a1b456f",
  "name": "Sticky Note",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    5560,
    1780
  ],
  "parameters": {
    "content": "Tool, calling Qdrant's recommendation API based on user's request, transformed by AI agent"
  },
  "typeVersion": 1
}

================ Node #2081 ================
{
  "id": "cce5250e-0285-4fd0-857f-4b117151cd8b",
  "name": "Sticky Note1",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    4680,
    720
  ],
  "parameters": {
    "content": "Uploading data (movies and their descriptions) to Qdrant Vector Store\n"
  },
  "typeVersion": 1
}

================ Node #2082 ================
{
  "id": "065d7ec9-edc5-46f6-b8ac-d62ed0e5c8e3",
  "name": "Baserow Event",
  "type": "n8n-nodes-base.webhook",
  "position": [
    -1180,
    -140
  ],
  "webhookId": "267ea500-e2cd-4604-a31f-f0773f27317c",
  "parameters": {
    "path": "267ea500-e2cd-4604-a31f-f0773f27317c",
    "options": {},
    "httpMethod": "POST"
  },
  "typeVersion": 2
}

================ Node #2083 ================
{
  "id": "ac1403b4-9d45-404d-9892-0bed39b9ec82",
  "name": "Event Type",
  "type": "n8n-nodes-base.switch",
  "position": [
    -220,
    -140
  ],
  "parameters": {
    "rules": {
      "values": [
        {
          "outputKey": "rows.updated",
          "conditions": {
            "options": {
              "version": 2,
              "leftValue": "",
              "caseSensitive": true,
              "typeValidation": "strict"
            },
            "combinator": "and",
            "conditions": [
              {
                "id": "2162daf8-d23d-4b8f-8257-bdfc5400a3a8",
                "operator": {
                  "name": "filter.operator.equals",
                  "type": "string",
                  "operation": "equals"
                },
                "leftValue": "={{ $json.event_type }}",
                "rightValue": "rows.updated"
              }
            ]
          },
          "renameOutput": true
        },
        {
          "outputKey": "field.created",
          "conditions": {
            "options": {
              "version": 2,
              "leftValue": "",
              "caseSensitive": true,
              "typeValidation": "strict"
            },
            "combinator": "and",
            "conditions": [
              {
                "id": "48e112f6-afe8-40bf-b673-b37446934a62",
                "operator": {
                  "name": "filter.operator.equals",
                  "type": "string",
                  "operation": "equals"
                },
                "leftValue": "={{ $json.event_type }}",
                "rightValue": "field.created"
              }
            ]
          },
          "renameOutput": true
        },
        {
          "outputKey": "field.updated",
          "conditions": {
            "options": {
              "version": 2,
              "leftValue": "",
              "caseSensitive": true,
              "typeValidation": "strict"
            },
            "combinator": "and",
            "conditions": [
              {
                "id": "5aa258cd-15c2-4156-a32d-afeed662a38e",
                "operator": {
                  "name": "filter.operator.equals",
                  "type": "string",
                  "operation": "equals"
                },
                "leftValue": "={{ $json.event_type }}",
                "rightValue": "field.updated"
              }
            ]
          },
          "renameOutput": true
        }
      ]
    },
    "options": {}
  },
  "typeVersion": 3.2
}

================ Node #2084 ================
{
  "id": "c501042d-f9e7-4c1a-b01d-b11392b1a804",
  "name": "Table Fields API",
  "type": "n8n-nodes-base.httpRequest",
  "position": [
    -900,
    -140
  ],
  "parameters": {
    "url": "=https://api.baserow.io/api/database/fields/table/{{ $json.body.table_id }}/",
    "options": {},
    "sendQuery": true,
    "authentication": "genericCredentialType",
    "genericAuthType": "httpHeaderAuth",
    "queryParameters": {
      "parameters": [
        {
          "name": "user_field_names",
          "value": "true"
        }
      ]
    }
  },
  "credentials": {
    "httpHeaderAuth": {
      "id": "F28aPWK5NooSHAg0",
      "name": "Baserow (n8n-local)"
    }
  },
  "typeVersion": 4.2
}

================ Node #2085 ================
{
  "id": "af6c3b7f-bb8b-4037-8e3b-337d81ca5632",
  "name": "Get Prompt Fields",
  "type": "n8n-nodes-base.code",
  "position": [
    -720,
    -140
  ],
  "parameters": {
    "jsCode": "const fields = $input.all()\n .filter(item => item.json.description)\n .map(item => ({\n id: item.json.id,\n order: item.json.order,\n name: item.json.name,\n description: item.json.description,\n }));\n\nreturn { json: { fields } };"
  },
  "typeVersion": 2
}

================ Node #2086 ================
{
  "id": "e1f8f740-c784-4f07-9265-76db518f3ebc",
  "name": "Get Event Body",
  "type": "n8n-nodes-base.set",
  "position": [
    -380,
    -140
  ],
  "parameters": {
    "mode": "raw",
    "options": {},
    "jsonOutput": "={{ $('Baserow Event').first().json.body }}"
  },
  "typeVersion": 3.4
}

================ Node #2087 ================
{
  "id": "e303b7c3-639a-4136-8aa4-074eedeb273f",
  "name": "List Table API",
  "type": "n8n-nodes-base.httpRequest",
  "position": [
    480,
    220
  ],
  "parameters": {
    "url": "=https://api.baserow.io/api/database/rows/table/{{ $json.table_id }}/",
    "options": {
      "pagination": {
        "pagination": {
          "nextURL": "={{ $response.body.next || `https://api.baserow.io/api/database/rows/table/${$json.table_id}/?user_field_names=true&size=20&page=9999` }}",
          "maxRequests": 3,
          "paginationMode": "responseContainsNextURL",
          "requestInterval": 1000,
          "limitPagesFetched": true,
          "completeExpression": "={{ $response.body.isEmpty() || $response.statusCode >= 400 }}",
          "paginationCompleteWhen": "other"
        }
      }
    },
    "sendQuery": true,
    "authentication": "genericCredentialType",
    "genericAuthType": "httpHeaderAuth",
    "queryParameters": {
      "parameters": [
        {
          "name": "user_field_names",
          "value": "true"
        },
        {
          "name": "size",
          "value": "20"
        },
        {
          "name": "include",
          "value": "id,order,_id,name,created_at,last_modified_at"
        },
        {
          "name": "filters",
          "value": "{\"filter_type\":\"AND\",\"filters\":[{\"type\":\"not_empty\",\"field\":\"File\",\"value\":\"\"}],\"groups\":[]}"
        }
      ]
    }
  },
  "credentials": {
    "httpHeaderAuth": {
      "id": "F28aPWK5NooSHAg0",
      "name": "Baserow (n8n-local)"
    }
  },
  "typeVersion": 4.2
}

================ Node #2088 ================
{
  "id": "9ad2e0c8-c92d-460d-be7a-237ce29b34c2",
  "name": "Get Valid Rows",
  "type": "n8n-nodes-base.code",
  "position": [
    640,
    220
  ],
  "parameters": {
    "jsCode": "return $input.all()\n .filter(item => item.json.results?.length)\n .flatMap(item => item.json.results);"
  },
  "typeVersion": 2
}

================ Node #2089 ================
{
  "id": "72b137e9-2e87-4580-9282-0ab7c5147f68",
  "name": "Get File Data",
  "type": "n8n-nodes-base.httpRequest",
  "position": [
    1320,
    320
  ],
  "parameters": {
    "url": "={{ $json.File[0].url }}",
    "options": {}
  },
  "typeVersion": 4.2
}

================ Node #2090 ================
{
  "id": "d479ee4e-4a87-4a0e-b9ca-4aa54afdc67a",
  "name": "Extract from File",
  "type": "n8n-nodes-base.extractFromFile",
  "position": [
    1480,
    320
  ],
  "parameters": {
    "options": {},
    "operation": "pdf"
  },
  "typeVersion": 1
}

================ Node #2091 ================
{
  "id": "717e36f8-7dd7-44a6-bcef-9f20735853d2",
  "name": "Update Row",
  "type": "n8n-nodes-base.httpRequest",
  "notes": "Execute Once",
  "onError": "continueRegularOutput",
  "maxTries": 2,
  "position": [
    2280,
    380
  ],
  "parameters": {
    "url": "=https://api.baserow.io/api/database/rows/table/{{ $('Event Ref').first().json.table_id }}/{{ $('Row Reference').item.json.id }}/",
    "method": "PATCH",
    "options": {},
    "jsonBody": "={{\n{\n ...$input.all()\n .reduce((acc, item) => ({\n ...acc,\n [item.json.field]: item.json.value\n }), {})\n}\n}}",
    "sendBody": true,
    "sendQuery": true,
    "specifyBody": "json",
    "authentication": "genericCredentialType",
    "genericAuthType": "httpHeaderAuth",
    "queryParameters": {
      "parameters": [
        {
          "name": "user_field_names",
          "value": "true"
        }
      ]
    }
  },
  "credentials": {
    "httpHeaderAuth": {
      "id": "F28aPWK5NooSHAg0",
      "name": "Baserow (n8n-local)"
    }
  },
  "executeOnce": true,
  "notesInFlow": true,
  "retryOnFail": false,
  "typeVersion": 4.2,
  "waitBetweenTries": 3000
}

================ Node #2092 ================
{
  "id": "b807a9c0-2334-491c-a259-1e0e266f89df",
  "name": "Get Result",
  "type": "n8n-nodes-base.set",
  "position": [
    2100,
    380
  ],
  "parameters": {
    "options": {},
    "assignments": {
      "assignments": [
        {
          "id": "3ad72567-1d17-4910-b916-4c34a43b1060",
          "name": "field",
          "type": "string",
          "value": "={{ $('Event Ref').first().json.field.name }}"
        },
        {
          "id": "e376ba60-8692-4962-9af7-466b6a3f44a2",
          "name": "value",
          "type": "string",
          "value": "={{ $json.text.trim() }}"
        }
      ]
    }
  },
  "typeVersion": 3.4
}

================ Node #2093 ================
{
  "id": "d29a58db-f547-4a4b-bc20-10e14529e474",
  "name": "Loop Over Items",
  "type": "n8n-nodes-base.splitInBatches",
  "position": [
    900,
    220
  ],
  "parameters": {
    "options": {}
  },
  "typeVersion": 3
}

================ Node #2094 ================
{
  "id": "233b2e96-7873-42f0-989f-c3df5a8e4542",
  "name": "Row Reference",
  "type": "n8n-nodes-base.noOp",
  "position": [
    1080,
    320
  ],
  "parameters": {},
  "typeVersion": 1
}

================ Node #2095 ================
{
  "id": "396eb9c0-dcde-4735-9e15-bf6350def086",
  "name": "Generate Field Value",
  "type": "@n8n/n8n-nodes-langchain.chainLlm",
  "position": [
    1640,
    320
  ],
  "parameters": {
    "text": "=<file>\n{{ $json.text }}\n</file>\n\nData to extract: {{ $('Event Ref').first().json.field.description }}\noutput format is: {{ $('Event Ref').first().json.field.type }}",
    "messages": {
      "messageValues": [
        {
          "message": "=You assist the user in extracting the required data from the given file.\n* Keep you answer short.\n* If you cannot extract the requested data, give you response as \"n/a\"."
        }
      ]
    },
    "promptType": "define"
  },
  "typeVersion": 1.5
}

================ Node #2096 ================
{
  "id": "4be0a9e5-e77e-4cea-9dd3-bc6e7de7a72b",
  "name": "Get Row",
  "type": "n8n-nodes-base.httpRequest",
  "position": [
    640,
    -420
  ],
  "parameters": {
    "url": "=https://api.baserow.io/api/database/rows/table/{{ $('Event Ref1').first().json.table_id }}/{{ $json.id }}/",
    "options": {},
    "sendQuery": true,
    "authentication": "genericCredentialType",
    "genericAuthType": "httpHeaderAuth",
    "queryParameters": {
      "parameters": [
        {
          "name": "user_field_names",
          "value": "true"
        }
      ]
    }
  },
  "credentials": {
    "httpHeaderAuth": {
      "id": "F28aPWK5NooSHAg0",
      "name": "Baserow (n8n-local)"
    }
  },
  "typeVersion": 4.2
}

================ Node #2097 ================
{
  "id": "40fc77b8-a986-40ab-a78c-da05a3f171c2",
  "name": "Rows to List",
  "type": "n8n-nodes-base.splitOut",
  "position": [
    320,
    -420
  ],
  "parameters": {
    "options": {},
    "fieldToSplitOut": "items"
  },
  "typeVersion": 1
}

================ Node #2098 ================
{
  "id": "4c5bc9c8-1bcb-48b1-82d0-5cf04535108c",
  "name": "Fields to Update",
  "type": "n8n-nodes-base.code",
  "position": [
    1640,
    -300
  ],
  "parameters": {
    "jsCode": "const row = $('Row Ref').first().json;\nconst fields = $('Get Prompt Fields').first().json.fields;\nconst missingFields = fields\n .filter(field => field.description && !row[field.name]);\n\nreturn missingFields;"
  },
  "typeVersion": 2
}

================ Node #2099 ================
{
  "id": "85d5c817-e5f8-45ea-bf7f-efc7913f542c",
  "name": "Loop Over Items1",
  "type": "n8n-nodes-base.splitInBatches",
  "position": [
    900,
    -420
  ],
  "parameters": {
    "options": {}
  },
  "typeVersion": 3
}

================ Node #2100 ================
{
  "id": "69005b35-9c66-4c14-80a9-ef8e945dab30",
  "name": "Row Ref",
  "type": "n8n-nodes-base.noOp",
  "position": [
    1080,
    -300
  ],
  "parameters": {},
  "typeVersion": 1
}

================ Node #2101 ================
{
  "id": "1b0e14da-13a8-4023-9006-464578bf0ff5",
  "name": "Get File Data1",
  "type": "n8n-nodes-base.httpRequest",
  "position": [
    1320,
    -300
  ],
  "parameters": {
    "url": "={{ $('Row Ref').item.json.File[0].url }}",
    "options": {}
  },
  "typeVersion": 4.2
}

================ Node #2102 ================
{
  "id": "47cf67bc-a3e2-4796-b5a7-4f6a6aef3e90",
  "name": "Extract from File1",
  "type": "n8n-nodes-base.extractFromFile",
  "position": [
    1480,
    -300
  ],
  "parameters": {
    "options": {},
    "operation": "pdf"
  },
  "typeVersion": 1
}

================ Node #2103 ================
{
  "id": "3dc743cc-0dde-4349-975c-fa453d99dbaf",
  "name": "Update Row1",
  "type": "n8n-nodes-base.httpRequest",
  "notes": "Execute Once",
  "onError": "continueRegularOutput",
  "maxTries": 2,
  "position": [
    2440,
    -260
  ],
  "parameters": {
    "url": "=https://api.baserow.io/api/database/rows/table/{{ $('Event Ref1').first().json.table_id }}/{{ $('Row Ref').first().json.id }}/",
    "method": "PATCH",
    "options": {},
    "jsonBody": "={{\n{\n ...$input.all()\n .reduce((acc, item) => ({\n ...acc,\n [item.json.field]: item.json.value\n }), {})\n}\n}}",
    "sendBody": true,
    "sendQuery": true,
    "specifyBody": "json",
    "authentication": "genericCredentialType",
    "genericAuthType": "httpHeaderAuth",
    "queryParameters": {
      "parameters": [
        {
          "name": "user_field_names",
          "value": "true"
        }
      ]
    }
  },
  "credentials": {
    "httpHeaderAuth": {
      "id": "F28aPWK5NooSHAg0",
      "name": "Baserow (n8n-local)"
    }
  },
  "executeOnce": true,
  "notesInFlow": true,
  "retryOnFail": false,
  "typeVersion": 4.2,
  "waitBetweenTries": 3000
}

================ Node #2104 ================
{
  "id": "49c53281-d323-4794-919a-d807d7ccc25e",
  "name": "Get Result1",
  "type": "n8n-nodes-base.set",
  "position": [
    2260,
    -260
  ],
  "parameters": {
    "options": {},
    "assignments": {
      "assignments": [
        {
          "id": "3ad72567-1d17-4910-b916-4c34a43b1060",
          "name": "field",
          "type": "string",
          "value": "={{ $('Fields to Update').item.json.name }}"
        },
        {
          "id": "e376ba60-8692-4962-9af7-466b6a3f44a2",
          "name": "value",
          "type": "string",
          "value": "={{ $json.text.trim() }}"
        }
      ]
    }
  },
  "typeVersion": 3.4
}

================ Node #2105 ================
{
  "id": "bc23708a-b177-47db-8a30-4330198710e0",
  "name": "Generate Field Value1",
  "type": "@n8n/n8n-nodes-langchain.chainLlm",
  "position": [
    1800,
    -300
  ],
  "parameters": {
    "text": "=<file>\n{{ $('Extract from File1').first().json.text }}\n</file>\n\nData to extract: {{ $json.description }}\noutput format is: {{ $json.type }}",
    "messages": {
      "messageValues": [
        {
          "message": "=You assist the user in extracting the required data from the given file.\n* Keep you answer short.\n* If you cannot extract the requested data, give you response as \"n/a\" followed by \"(reason)\" where reason is replaced with reason why data could not be extracted."
        }
      ]
    },
    "promptType": "define"
  },
  "typeVersion": 1.5
}

================ Node #2106 ================
{
  "id": "c0297c19-04b8-4d56-9ce0-320b399f73bd",
  "name": "Filter Valid Rows",
  "type": "n8n-nodes-base.filter",
  "position": [
    480,
    -420
  ],
  "parameters": {
    "options": {},
    "conditions": {
      "options": {
        "version": 2,
        "leftValue": "",
        "caseSensitive": true,
        "typeValidation": "strict"
      },
      "combinator": "and",
      "conditions": [
        {
          "id": "7ad58f0b-0354-49a9-ab2f-557652d7b416",
          "operator": {
            "type": "string",
            "operation": "notEmpty",
            "singleValue": true
          },
          "leftValue": "={{ $json.File[0].url }}",
          "rightValue": ""
        }
      ]
    }
  },
  "typeVersion": 2.2
}

================ Node #2107 ================
{
  "id": "5aab6971-1d6f-4b82-a218-4e25c7b28052",
  "name": "Filter Valid Fields",
  "type": "n8n-nodes-base.filter",
  "position": [
    320,
    220
  ],
  "parameters": {
    "options": {},
    "conditions": {
      "options": {
        "version": 2,
        "leftValue": "",
        "caseSensitive": true,
        "typeValidation": "strict"
      },
      "combinator": "and",
      "conditions": [
        {
          "id": "5b4a7393-788c-42dc-ac1f-e76f833f8534",
          "operator": {
            "type": "string",
            "operation": "notEmpty",
            "singleValue": true
          },
          "leftValue": "={{ $json.field.description }}",
          "rightValue": ""
        }
      ]
    }
  },
  "typeVersion": 2.2
}

================ Node #2108 ================
{
  "id": "bc144115-f3a2-4e99-a35c-4a780754d0fb",
  "name": "Event Ref",
  "type": "n8n-nodes-base.noOp",
  "position": [
    160,
    220
  ],
  "parameters": {},
  "typeVersion": 1
}

================ Node #2109 ================
{
  "id": "13fd10c0-d4eb-463a-a8b6-5471380f3710",
  "name": "Event Ref1",
  "type": "n8n-nodes-base.noOp",
  "position": [
    160,
    -420
  ],
  "parameters": {},
  "typeVersion": 1
}

================ Node #2110 ================
{
  "id": "e07053a4-a130-41b0-85d3-dfa3983b1547",
  "name": "Sticky Note",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    -1000,
    -340
  ],
  "parameters": {
    "color": 7,
    "width": 480,
    "height": 440,
    "content": "### 1. Get Table Schema\n[Learn more about the HTTP node](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.httprequest)\n\nFor this operation, we'll have to use the Baserow API rather than the built-in node. However, this way does allow for more flexibility with query parameters.\n"
  },
  "typeVersion": 1
}

================ Node #2111 ================
{
  "id": "675b9d6a-1ba6-49ce-b569-38cc0ba04dcb",
  "name": "Sticky Note1",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    -260,
    -440
  ],
  "parameters": {
    "color": 5,
    "width": 330,
    "height": 80,
    "content": "### 2a. Updates Minimal Number of Rows\nThis branch updates only the rows impacted."
  },
  "typeVersion": 1
}

================ Node #2112 ================
{
  "id": "021d51f9-7a5b-4f93-baad-707144aeb7ba",
  "name": "Sticky Note2",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    -320,
    140
  ],
  "parameters": {
    "color": 5,
    "width": 390,
    "height": 120,
    "content": "### 2b. Update Every Row under the Field\nThis branch updates all applicable rows under field when the field/column is created or changed. Watch out - if you have 1000s of rows, this could take a while!"
  },
  "typeVersion": 1
}

================ Node #2113 ================
{
  "id": "ae49cfb0-ac83-4501-bc01-d98be32798f0",
  "name": "Sticky Note3",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    -1780,
    -1060
  ],
  "parameters": {
    "width": 520,
    "height": 1160,
    "content": "## Try It Out!\n### This n8n template powers a \"dynamic\" or \"user-defined\" prompts with PDF workflow pattern for a [Baserow](https://baserow.io) table. Simply put, it allows users to populate a spreadsheet using prompts without touching the underlying template.\n\n**Check out the video demo I did for n8n Studio**: https://www.youtube.com/watch?v=_fNAD1u8BZw\n\nThis template is intended to be used as a webhook source for Baserow. **Looking for a Airtable version? [Click here](https://n8n.io/workflows/2771-ai-data-extraction-with-dynamic-prompts-and-airtable/)**\n\n## How it works\n* Each Baserow.io tables offers integration feature whereby changes to the table can be sent as events to any accessible webhook. This allows for a reactive trigger pattern which makes this type of workflow possible. For our usecase, we capture the vents of `row_updated`, `field_created` and `field_updated`.\n* Next, we'll need an \"input\" column in our Baserow.io table. This column will be where our context lives for evaluating the prompts against. In this example, our \"input\" column name is \"file\" and it's where we'll upload our PDFs. Note, this \"input\" field is human-controlled and never updated from this template.\n* Now for the columns (aka \"fields\" in Baserow). Each field allows us to define a name, type and description and together form the schema. The first 2 are self-explaintory but the \"description\" will be for users to provide their prompts ie. what data should the field to contain.\n* In this template, a webhook trigger waits for when a row or column is updated. The incoming event comes with lots of details such as the table, row and/or column Ids that were impacted.\n* We use this information to fetch the table's schema in order to get the column's descriptions (aka dynamic prompts).\n* For each triggered event, we download our input ie. the PDF and ready it for our AI/LLM. By iterating through the available columns and feeding the dynamic prompts, our LLM can run those prompts against the PDF and thus generating a value response for each cell.\n* These values are then collected and used to update the Baserow Table.\n\n## How to use\n* You'll need to publish this workflow and make it accessible to our Baserow instance. Good to note, you only really need to do this once and can reuse for many Baserow Tables.\n* Configure your Baserow Table to send `row_updated`, `field_created` and `field_updated` events to this n8n workflow.\n* This workflow should work with both cloud-hosted and self-hosted versions of Baserow.\n\n\n### Need Help?\nJoin the [Discord](https://discord.com/invite/XPKeKXeB7d) or ask in the [Forum](https://community.n8n.io/)!\n\nHappy Flowgramming!"
  },
  "typeVersion": 1
}

================ Node #2114 ================
{
  "id": "23ea63f5-e1ad-4326-95a4-945bf98d03f4",
  "name": "Sticky Note4",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    -500,
    -340
  ],
  "parameters": {
    "color": 7,
    "width": 580,
    "height": 440,
    "content": "### 2. Event Router Pattern\n[Learn more about the Switch node](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.switch/)\n\nA simple switch node can be used to determine which event to handle. The difference between our row and field events is that row event affect a single row whereas field events affect all rows. \n"
  },
  "typeVersion": 1
}

================ Node #2115 ================
{
  "id": "179f9459-43d0-4342-ab94-e248730182a5",
  "name": "Sticky Note5",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    100,
    -620
  ],
  "parameters": {
    "color": 7,
    "width": 700,
    "height": 400,
    "content": "### 3. Filter Only Rows with Valid Input\n[Learn more about the Split Out node](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.splitout/)\n\nThis step handles one or more updated rows where \"updated\" means the \"input\" column (ie. \"file\" in our example) for these rows were changed. For each affected row, we'll get the full row to figure out only the columns we need to update - this is an optimisation to avoid redundant work ie. generating values for columns which already have a value."
  },
  "typeVersion": 1
}

================ Node #2116 ================
{
  "id": "7124a8c0-549e-4b82-8e1f-c6428d2bfb44",
  "name": "Sticky Note7",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    2140,
    -480
  ],
  "parameters": {
    "color": 7,
    "width": 520,
    "height": 440,
    "content": "### 6. Update the Baserow Table Row\n[Learn more about the Edit Fields node](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.set/)\n\nFinally, we can collect the LLM responses and combine them to build an API request to update our Baserow Table row - the Id of which we got from initial webhook. After this is done, we can move onto the next row and repeat the process.\n"
  },
  "typeVersion": 1
}

================ Node #2117 ================
{
  "id": "c55ce945-10ba-440b-a444-81cb4ed63539",
  "name": "Sticky Note8",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    1260,
    -580
  ],
  "parameters": {
    "color": 7,
    "width": 860,
    "height": 580,
    "content": "### 5. PDFs, LLMs and Dynamic Prompts? Oh My!\n[Learn more about the Basic LLM node](https://docs.n8n.io/integrations/builtin/cluster-nodes/root-nodes/n8n-nodes-langchain.chainllm/)\n\nThis step is where it all comes together! In short, we give our LLM the PDF contents as the context and loop through our dynamic prompts (from the schema we pulled earlier) for our row. At the end, our LLM should have produced a value for each column requested.\n\n**Note**: There's definitely a optimisation which could be done for caching PDFs but it beyond the scope of this demonstration.\n"
  },
  "typeVersion": 1
}

================ Node #2118 ================
{
  "id": "1a0ff82e-64aa-479e-8dec-c29b512b0686",
  "name": "Sticky Note9",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    820,
    -580
  ],
  "parameters": {
    "color": 7,
    "width": 420,
    "height": 460,
    "content": "### 4. Using an Items Loop\n[Learn more about the Split in Batches node](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.splitinbatches/)\n\nA split in batches node is used here to update a row at a time however, this is a preference for user experience - changes are seen in the Baserow quicker.\n"
  },
  "typeVersion": 1
}

================ Node #2119 ================
{
  "id": "f4562d44-4fc0-4c59-ba90-8b65f1162aac",
  "name": "Sticky Note10",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    100,
    40
  ],
  "parameters": {
    "color": 7,
    "width": 680,
    "height": 360,
    "content": "### 7. Listing All Rows Under The Column\n[Learn more about the Code node](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.code)\n\nWe can use Baserow's List API and the HTTP node's pagination feature to fetch all applicable rows under the affected field - the filter query on the API is helpful here.\n"
  },
  "typeVersion": 1
}

================ Node #2120 ================
{
  "id": "979983e9-1002-444c-a018-50ce525ef02a",
  "name": "Sticky Note11",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    1260,
    140
  ],
  "parameters": {
    "color": 7,
    "width": 700,
    "height": 500,
    "content": "### 9. Generating Value using LLM\n[Learn more about the Extract From File node](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.extractfromfile/)\n\nPretty much identical to Step 5 but instead of updating every field/column, we only need to generate a value for one. \n"
  },
  "typeVersion": 1
}

================ Node #2121 ================
{
  "id": "f38aa7a3-479b-4876-87bf-769ada3089f2",
  "name": "OpenAI Chat Model",
  "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
  "position": [
    1800,
    -140
  ],
  "parameters": {
    "options": {}
  },
  "credentials": {
    "openAiApi": {
      "id": "8gccIjcuf3gvaoEr",
      "name": "OpenAi account"
    }
  },
  "typeVersion": 1.1
}

================ Node #2122 ================
{
  "id": "a5061210-2e6b-4b62-994f-594fc10a0ac6",
  "name": "Sticky Note12",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    820,
    40
  ],
  "parameters": {
    "color": 7,
    "width": 420,
    "height": 460,
    "content": "### 8. Using an Items Loop\n[Learn more about the Split in Batches node](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.splitinbatches/)\n\nSimilar to Step 4, the Split in Batches node is a preference for user experience - changes are seen in the Baserow quicker.\n"
  },
  "typeVersion": 1
}

================ Node #2123 ================
{
  "id": "e47e36d4-bf6d-48d3-9e52-d8bbac06c4b4",
  "name": "OpenAI Chat Model1",
  "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
  "position": [
    1640,
    500
  ],
  "parameters": {
    "options": {}
  },
  "credentials": {
    "openAiApi": {
      "id": "8gccIjcuf3gvaoEr",
      "name": "OpenAi account"
    }
  },
  "typeVersion": 1.1
}

================ Node #2124 ================
{
  "id": "52501eab-861e-4de9-837d-65879cd43e5b",
  "name": "Sticky Note13",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    1980,
    200
  ],
  "parameters": {
    "color": 7,
    "width": 500,
    "height": 380,
    "content": "### 10. Update the Baserow Table Row\n[Learn more about the Edit Fields node](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.set/)\n\nAs with Step 6, the LLM response is used to update the row however only under the field that was created/changed. Once complete, the loop continues and the next row is processed.\n"
  },
  "typeVersion": 1
}

================ Node #2125 ================
{
  "id": "6d9fb2e9-6aca-4276-b9b3-d409be24e40e",
  "name": "Sticky Note6",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    -1780,
    -1200
  ],
  "parameters": {
    "color": 7,
    "height": 120,
    "content": "![baserow.io](https://res.cloudinary.com/daglih2g8/image/upload/f_auto,q_auto/v1/n8n-workflows/baserow_logo)"
  },
  "typeVersion": 1
}

================ Node #2126 ================
{
  "id": "bccfc32b-fd18-4de7-88d5-0aeb02ab7954",
  "name": "Sticky Note14",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    -1200,
    -1280
  ],
  "parameters": {
    "color": 5,
    "width": 820,
    "height": 800,
    "content": "## \u2b50\ufe0f Creating Baserow Webhooks\nBaserow webhooks are created via the UI and the option can be accessed by clicking on the 3 dots button in the toolbar.\n\n* Create a POST webhook for your n8n webhook URL found in this template.\n* Select the \"use fields names instead of IDs\" option.\n* Select \"let me choose individual events\"\n* The events to choose are \"row updated\", \"field created\" and \"field updated\".\n* For the \"row updated\" event, be sure to specify the input field - in this case, \"File\".\n\n![](https://res.cloudinary.com/daglih2g8/image/upload/f_auto,q_auto/v1/n8n-workflows/jfhvavdpnf3krloc6iaz)"
  },
  "typeVersion": 1
}

================ Node #2127 ================
{
  "id": "80debfe0-c591-4ba1-aca1-068adac62aa9",
  "name": "When chat message received",
  "type": "@n8n/n8n-nodes-langchain.chatTrigger",
  "position": [
    100,
    -300
  ],
  "webhookId": "4a44e974-db62-4727-9913-12a22bc88e01",
  "parameters": {
    "public": true,
    "options": {
      "title": "N8N \ud83d\udc4b",
      "subtitle": "Weather Assistant: Example of Tools Using ChatGPT",
      "allowFileUploads": false,
      "loadPreviousSession": "memory"
    },
    "initialMessages": "Type like this: Weather Forecast for the Next 7 Days in S\u00e3o Paulo"
  },
  "typeVersion": 1.1
}

================ Node #2128 ================
{
  "id": "ec375027-1c0d-438b-9fca-7bc4fbef2479",
  "name": "OpenAI Chat Model",
  "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
  "position": [
    420,
    -60
  ],
  "parameters": {
    "options": {}
  },
  "credentials": {
    "openAiApi": {
      "id": "bhRvwBXztNmJVObo",
      "name": "OpenAi account"
    }
  },
  "typeVersion": 1
}

================ Node #2129 ================
{
  "id": "bd2f5967-8188-4b1f-9255-8008870aaf7b",
  "name": "Sticky Note",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    -540,
    -640
  ],
  "parameters": {
    "color": 5,
    "width": 500,
    "height": 720,
    "content": "## Integrating AI with Open-Meteo API for Enhanced Weather Forecasting\n\n## Use case\n\n### Workshop\n\nWe are using this workflow in our workshops to teach how to use Tools a.k.a functions with artificial intelligence. In this specific case, we will use a generic \"AI Agent\" node to illustrate that it could use other models from different data providers.\n\n### Enhanced Weather Forecasting\n\nIn this small example, it's easy to demonstrate how to obtain weather forecast results from the Open-Meteo site to accurately display the upcoming days.\n\nThis can be used to plan travel decisions, for example.\n\n## What this workflow does\n\n1. We will make an HTTP request to find out the geographic coordinates of a city.\n2. Then, we will make other HTTP requests to discover the weather for the upcoming days.\n\nIn this workshop, we demonstrate that the AI will be able to determine which tool to call first\u2014it will first call the geolocation tool and then the weather forecast tool. All of this within a single client conversation call.\n\n\n## Setup\n\nInsert an OpenAI Key and activate the workflow.\n\nby Davi Saranszky Mesquita\nhttps://www.linkedin.com/in/mesquitadavi/"
  },
  "typeVersion": 1
}

================ Node #2130 ================
{
  "id": "3cfeea52-a310-4101-8377-0f393bf54c8d",
  "name": "Sticky Note1",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    60,
    -440
  ],
  "parameters": {
    "width": 340,
    "height": 220,
    "content": "## Create an Hosted Web Chat\n\n### And setup the trigger!\n\nExample: https://website/webhook/4a4..../chat"
  },
  "typeVersion": 1
}

================ Node #2131 ================
{
  "id": "55713ffc-da61-4594-99f4-ca6b448cbee2",
  "name": "Generic AI Tool Agent",
  "type": "@n8n/n8n-nodes-langchain.agent",
  "position": [
    440,
    -300
  ],
  "parameters": {
    "options": {}
  },
  "typeVersion": 1.7
}

================ Node #2132 ================
{
  "id": "7f608ddc-87bb-4e54-84a8-4db6b7f95011",
  "name": "Chat Memory Buffer",
  "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
  "position": [
    200,
    -60
  ],
  "parameters": {},
  "typeVersion": 1.3
}

================ Node #2133 ================
{
  "id": "77f82443-1efe-47d3-92ec-aa193853c8a5",
  "name": "Sticky Note2",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    320,
    0
  ],
  "parameters": {
    "width": 260,
    "content": "-\n\n\n## Setup OpenAI Key"
  },
  "typeVersion": 1
}

================ Node #2134 ================
{
  "id": "ed37ea94-3cff-47cb-bf45-bce620b0f056",
  "name": "Sticky Note5",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    780,
    60
  ],
  "parameters": {
    "color": 4,
    "width": 280,
    "height": 360,
    "content": "### Open Meteo SPEC - City Geolocation\n\nThis tool will go to the URL https://geocoding-api.open-meteo.com/v1/search to fetch the geolocation data of the city, and I only need to get the name of the city.\n\nSo, I will ask the user to input the name of the city and pass some pre-existing information, such as returning only the first city and returning in JSON format.\n\n- name (By Model) - And placeholder - The parameter that the AI will need to fill in as required.\n\n- count - 1 by default because I want only the first city.\n\n- format - Putting JSON for no specific reason, but OpenAI could figure out how to process that information."
  },
  "typeVersion": 1
}

================ Node #2135 ================
{
  "id": "f9b0e65d-a85e-4511-bdd2-adf54b1c039d",
  "name": "A tool to get the weather forecast based on geolocation",
  "type": "@n8n/n8n-nodes-langchain.toolHttpRequest",
  "position": [
    1100,
    -160
  ],
  "parameters": {
    "url": "https://api.open-meteo.com/v1/forecast",
    "sendQuery": true,
    "parametersQuery": {
      "values": [
        {
          "name": "latitude"
        },
        {
          "name": "longitude"
        },
        {
          "name": "daily",
          "value": "temperature_2m_max,precipitation_sum",
          "valueProvider": "fieldValue"
        },
        {
          "name": "timezone",
          "value": "GMT",
          "valueProvider": "fieldValue"
        },
        {
          "name": "forecast_days"
        }
      ]
    },
    "toolDescription": "To get forecast of next [forecast_days] input the geolocation of an City",
    "placeholderDefinitions": {
      "values": [
        {
          "name": "longitude",
          "type": "number",
          "description": "longitude"
        },
        {
          "name": "latitude",
          "type": "number",
          "description": "latitude"
        },
        {
          "name": "forecast_days",
          "type": "number",
          "description": "forecast_days number of days ahead"
        }
      ]
    }
  },
  "typeVersion": 1.1
}

================ Node #2136 ================
{
  "id": "76382491-dd75-4b51-a2d8-cb9782246af8",
  "name": "Sticky Note6",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    1240,
    -220
  ],
  "parameters": {
    "color": 4,
    "width": 280,
    "height": 320,
    "content": "### Open Meteo SPEC - Weather Forecast\n\nThis tool will go to the Open Meteo site with the geolocation information at https://api.open-meteo.com/v1/forecast\n\nIt will pass the information on latitude, longitude, and the number of days for which it will bring data.\n\nThere are many default pieces of information within, but the focus is not to explain the Open Meteo API.\n\nVariables like latitude, longitude, and forecast_days are self-explanatory for OpenAI, making it the easiest tool to configure.\n\n- latitude (By Model) and Placeholder\n- longitude (By Model) and Placeholder\n- forecast_days (By Model) and Placeholder\n"
  },
  "typeVersion": 1
}

================ Node #2137 ================
{
  "id": "1c8087ce-6800-4ece-8234-23914e21a692",
  "name": "A tool for inputting the city and obtaining geolocation",
  "type": "@n8n/n8n-nodes-langchain.toolHttpRequest",
  "position": [
    820,
    -100
  ],
  "parameters": {
    "url": "=https://geocoding-api.open-meteo.com/v1/search",
    "sendQuery": true,
    "parametersQuery": {
      "values": [
        {
          "name": "name"
        },
        {
          "name": "count",
          "value": "1",
          "valueProvider": "fieldValue"
        },
        {
          "name": "format",
          "value": "json",
          "valueProvider": "fieldValue"
        }
      ]
    },
    "toolDescription": "Input the City and get geolocation, geocode or coordinates from Requested City",
    "placeholderDefinitions": {
      "values": [
        {
          "name": "name",
          "type": "string",
          "description": "Requested City"
        }
      ]
    }
  },
  "typeVersion": 1.1
}

================ Node #2138 ================
{
  "id": "15ae7421-eff9-4677-b8cf-b7bbb5d2385e",
  "name": "Sticky Note4",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    -100,
    340
  ],
  "parameters": {
    "color": 3,
    "width": 840,
    "height": 80,
    "content": "## Within N8N, there will be a chat button to test, or you can use the external chat link from the trigger."
  },
  "typeVersion": 1
}

================ Node #2139 ================
{
  "id": "30f5203b-469d-4f0c-8493-e8f08e14e4fe",
  "name": "When clicking \u2018Test workflow\u2019",
  "type": "n8n-nodes-base.manualTrigger",
  "position": [
    -560,
    440
  ],
  "parameters": {},
  "typeVersion": 1
}

================ Node #2140 ================
{
  "id": "d16f59dd-f54e-487b-9aac-67f109ba9869",
  "name": "Sticky Note8",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    1000,
    -280
  ],
  "parameters": {
    "color": 7,
    "width": 727.9032097745135,
    "height": 110.58643966444157,
    "content": "# Auto Categorise Outlook Emails with AI\nBuilt by [Wayne Simpson](https://www.linkedin.com/in/simpsonwayne/) at [nocodecreative.io](https://nocodecreative.io)"
  },
  "typeVersion": 1
}

================ Node #2141 ================
{
  "id": "4e110412-8530-4322-bc5c-7f9df2b63bcb",
  "name": "Sticky Note9",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    1100,
    -120
  ],
  "parameters": {
    "color": 7,
    "width": 506.8102696237577,
    "height": 337.24177957113216,
    "content": "### Watch Set Up Video \ud83d\udc47\n[![Auto Categorise Outlook Emails with AI](https://vdyfnvnstovfxpabhdjc.supabase.co/storage/v1/object/public/images/Thumbnails/auto-categories-emails.png?t=2024-10-11T09%3A56%3A37.961Z#full-width)](https://www.youtube.com/watch?v=EhRBkkjv_3c)\n\n"
  },
  "typeVersion": 1
}

================ Node #2142 ================
{
  "id": "9d79875f-148e-46ef-967a-95c07298456d",
  "name": "Ollama Chat Model1",
  "type": "@n8n/n8n-nodes-langchain.lmChatOllama",
  "position": [
    1129,
    684
  ],
  "parameters": {
    "model": "qwen2.5:14b",
    "options": {
      "temperature": 0.2
    }
  },
  "typeVersion": 1
}

================ Node #2143 ================
{
  "id": "bcf92a71-ff5f-46a7-bec3-cedb5be2bf98",
  "name": "Microsoft Outlook10",
  "type": "n8n-nodes-base.microsoftOutlook",
  "position": [
    3020,
    8
  ],
  "parameters": {
    "folderId": {
      "__rl": true,
      "mode": "list",
      "value": "AQMkAGE3ZTU5MGMzLTFkNGItNGQ5Zi04MDQ1LThmNGFlMTVhYjMwYgAuAAAD8UhruVwm402lgPBG2Tj-aQEAnz-IOcWBGE2lrVuQgAF6zAAAAgFJAAAA",
      "cachedResultUrl": "https://outlook.office365.com/mail/AQMkAGE3ZTU5MGMzLTFkNGItNGQ5Zi04MDQ1LThmNGFlMTVhYjMwYgAuAAAD8UhruVwm402lgPBG2Tj%2FaQEAnz%2FIOcWBGE2lrVuQgAF6zAAAAgFJAAAA",
      "cachedResultName": "Junk Email"
    },
    "messageId": {
      "__rl": true,
      "mode": "id",
      "value": "={{ $('varID & Category1').item.json.id }}"
    },
    "operation": "move"
  },
  "typeVersion": 2
}

================ Node #2144 ================
{
  "id": "100db1cb-3819-43c7-a74b-5c087ad4f2da",
  "name": "Microsoft Outlook12",
  "type": "n8n-nodes-base.microsoftOutlook",
  "position": [
    2700,
    8
  ],
  "parameters": {
    "messageId": {
      "__rl": true,
      "mode": "id",
      "value": "={{ $('varID & Category1').item.json.id }}"
    },
    "operation": "update",
    "updateFields": {
      "categories": "={{ \n [$('varJSON1').first().json.output.category, $('varJSON1').first().json.output.subCategory]\n .filter(item => item && item.trim() !== \"\")\n .map(item => item.charAt(0).toUpperCase() + item.slice(1))\n}}"
    }
  },
  "typeVersion": 2
}

================ Node #2145 ================
{
  "id": "d4969259-a3ae-473d-82ef-0c9f7933c899",
  "name": "Loop Over Items1",
  "type": "n8n-nodes-base.splitInBatches",
  "position": [
    160,
    448
  ],
  "parameters": {
    "options": {}
  },
  "typeVersion": 3
}

================ Node #2146 ================
{
  "id": "524f6be3-7708-4aae-b9ab-e0ef8180a627",
  "name": "Microsoft Outlook13",
  "type": "n8n-nodes-base.microsoftOutlook",
  "position": [
    2700,
    188
  ],
  "parameters": {
    "messageId": {
      "__rl": true,
      "mode": "id",
      "value": "={{ $('varID & Category1').item.json.id }}"
    },
    "operation": "update",
    "updateFields": {
      "categories": "={{ \n [$('varJSON1').first().json.output.category, $('varJSON1').first().json.output.subCategory]\n .filter(item => item && item.trim() !== \"\")\n .map(item => item.charAt(0).toUpperCase() + item.slice(1))\n}}"
    }
  },
  "typeVersion": 2
}

================ Node #2147 ================
{
  "id": "72cb54f3-4e4e-4ad2-8845-11a38fc29f1a",
  "name": "Microsoft Outlook15",
  "type": "n8n-nodes-base.microsoftOutlook",
  "position": [
    3020,
    188
  ],
  "parameters": {
    "folderId": {
      "__rl": true,
      "mode": "list",
      "value": "AQMkAGE3ZTU5MGMzLTFkNGItNGQ5Zi04MDQ1LThmNGFlMTVhYjMwYgAuAAAD8UhruVwm402lgPBG2Tj-aQEAnz-IOcWBGE2lrVuQgAF6zAADLJmrBwAAAA==",
      "cachedResultUrl": "https://outlook.office365.com/mail/AQMkAGE3ZTU5MGMzLTFkNGItNGQ5Zi04MDQ1LThmNGFlMTVhYjMwYgAuAAAD8UhruVwm402lgPBG2Tj%2FaQEAnz%2FIOcWBGE2lrVuQgAF6zAADLJmrBwAAAA%3D%3D",
      "cachedResultName": "Receipt"
    },
    "messageId": {
      "__rl": true,
      "mode": "id",
      "value": "={{ $('varID & Category1').item.json.id }}"
    },
    "operation": "move"
  },
  "typeVersion": 2
}

================ Node #2148 ================
{
  "id": "e4446e84-c05e-4d04-b415-7608e39024ee",
  "name": "Microsoft Outlook16",
  "type": "n8n-nodes-base.microsoftOutlook",
  "position": [
    2709,
    504
  ],
  "parameters": {
    "messageId": {
      "__rl": true,
      "mode": "id",
      "value": "={{ $('varID & Category1').item.json.id }}"
    },
    "operation": "update",
    "updateFields": {
      "categories": "={{ \n [$('varJSON1').first().json.output.category, $('varJSON1').first().json.output.subCategory]\n .filter(item => item && item.trim() !== \"\")\n .map(item => item.charAt(0).toUpperCase() + item.slice(1))\n}}"
    }
  },
  "typeVersion": 2
}

================ Node #2149 ================
{
  "id": "3ee05cfe-a528-472e-aa3d-c890fd88b6c4",
  "name": "Microsoft Outlook17",
  "type": "n8n-nodes-base.microsoftOutlook",
  "position": [
    3020,
    508
  ],
  "parameters": {
    "folderId": {
      "__rl": true,
      "mode": "list",
      "value": "AQMkAGE3ZTU5MGMzLTFkNGItNGQ5Zi04MDQ1LThmNGFlMTVhYjMwYgAuAAAD8UhruVwm402lgPBG2Tj-aQEAnz-IOcWBGE2lrVuQgAF6zAADLJmrCAAAAA==",
      "cachedResultUrl": "https://outlook.office365.com/mail/AQMkAGE3ZTU5MGMzLTFkNGItNGQ5Zi04MDQ1LThmNGFlMTVhYjMwYgAuAAAD8UhruVwm402lgPBG2Tj%2FaQEAnz%2FIOcWBGE2lrVuQgAF6zAADLJmrCAAAAA%3D%3D",
      "cachedResultName": "Community"
    },
    "messageId": {
      "__rl": true,
      "mode": "id",
      "value": "={{ $('varID & Category1').item.json.id }}"
    },
    "operation": "move"
  },
  "typeVersion": 2
}

================ Node #2150 ================
{
  "id": "2fcecd9e-95cc-489a-b874-699c54518e44",
  "name": "Microsoft Outlook18",
  "type": "n8n-nodes-base.microsoftOutlook",
  "position": [
    2709,
    344
  ],
  "parameters": {
    "messageId": {
      "__rl": true,
      "mode": "id",
      "value": "={{ $('varID & Category1').item.json.id }}"
    },
    "operation": "update",
    "updateFields": {
      "categories": "={{ \n [$('varJSON1').first().json.output.category, $('varJSON1').first().json.output.subCategory]\n .filter(item => item && item.trim() !== \"\")\n .map(item => item.charAt(0).toUpperCase() + item.slice(1))\n}}"
    }
  },
  "typeVersion": 2
}

================ Node #2151 ================
{
  "id": "41a39309-1a94-461f-9308-63dd5b9a94a7",
  "name": "Microsoft Outlook19",
  "type": "n8n-nodes-base.microsoftOutlook",
  "position": [
    3020,
    348
  ],
  "parameters": {
    "folderId": {
      "__rl": true,
      "mode": "list",
      "value": "AQMkAGE3ZTU5MGMzLTFkNGItNGQ5Zi04MDQ1LThmNGFlMTVhYjMwYgAuAAAD8UhruVwm402lgPBG2Tj-aQEAnz-IOcWBGE2lrVuQgAF6zAADLJmrCQAAAA==",
      "cachedResultUrl": "https://outlook.office365.com/mail/AQMkAGE3ZTU5MGMzLTFkNGItNGQ5Zi04MDQ1LThmNGFlMTVhYjMwYgAuAAAD8UhruVwm402lgPBG2Tj%2FaQEAnz%2FIOcWBGE2lrVuQgAF6zAADLJmrCQAAAA%3D%3D",
      "cachedResultName": "SaaS"
    },
    "messageId": {
      "__rl": true,
      "mode": "id",
      "value": "={{ $('varID & Category1').item.json.id }}"
    },
    "operation": "move"
  },
  "typeVersion": 2
}

================ Node #2152 ================
{
  "id": "ebf606f9-099c-4218-b23b-66e2487262d0",
  "name": "Markdown1",
  "type": "n8n-nodes-base.markdown",
  "notes": "Converts the body of the email to markdown",
  "position": [
    420,
    468
  ],
  "parameters": {
    "html": "={{ $('Loop Over Items1').item.json.body.content }}",
    "options": {}
  },
  "notesInFlow": true,
  "typeVersion": 1
}

================ Node #2153 ================
{
  "id": "ff447dd5-3ef6-4a02-8453-3489af8bf6b5",
  "name": "varEmal1",
  "type": "n8n-nodes-base.set",
  "notes": "Set email fields",
  "position": [
    620,
    468
  ],
  "parameters": {
    "options": {},
    "assignments": {
      "assignments": [
        {
          "id": "edb304e1-3e9f-4a77-918c-25646addbc53",
          "name": "subject",
          "type": "string",
          "value": "={{ $json.subject }}"
        },
        {
          "id": "57a3ef3a-2701-40d9-882f-f43a7219f148",
          "name": "importance",
          "type": "string",
          "value": "={{ $json.importance }}"
        },
        {
          "id": "d8317f4f-aa0e-4196-89af-cb016765490a",
          "name": "sender",
          "type": "object",
          "value": "={{ $json.sender.emailAddress }}"
        },
        {
          "id": "908716c8-9ff7-4bdc-a1a3-64227559635e",
          "name": "from",
          "type": "object",
          "value": "={{ $json.from.emailAddress }}"
        },
        {
          "id": "ce007329-e221-4c5a-8130-2f8e9130160f",
          "name": "body",
          "type": "string",
          "value": "={{ $json.data\n .replace(/<[^>]*>/g, '') // Remove HTML tags\n .replace(/\\[(.*?)\\]\\((.*?)\\)/g, '') // Remove Markdown links like [text](link)\n .replace(/!\\[.*?\\]\\(.*?\\)/g, '') // Remove Markdown images like ![alt](image-link)\n .replace(/\\|/g, '') // Remove table separators \"|\"\n .replace(/-{3,}/g, '') // Remove horizontal rule \"---\"\n .replace(/\\n+/g, ' ') // Remove multiple newlines\n .replace(/([^\\w\\s.,!?@])/g, '') // Remove special characters except essential ones\n .replace(/\\s{2,}/g, ' ') // Replace multiple spaces with a single space\n .trim() // Trim leading/trailing whitespace\n}}\n"
        }
      ]
    }
  },
  "typeVersion": 3.4
}

================ Node #2154 ================
{
  "id": "198524cb-c9f0-4261-8c38-7c878efe7457",
  "name": "Microsoft Outlook20",
  "type": "n8n-nodes-base.microsoftOutlook",
  "position": [
    2700,
    668
  ],
  "parameters": {
    "messageId": {
      "__rl": true,
      "mode": "id",
      "value": "={{ $('varID & Category1').item.json.id }}"
    },
    "operation": "update",
    "updateFields": {
      "categories": "={{ \n [$('varJSON1').first().json.output.category, $('varJSON1').first().json.output.subCategory]\n .filter(item => item && item.trim() !== \"\")\n .map(item => item.charAt(0).toUpperCase() + item.slice(1))\n}}"
    }
  },
  "typeVersion": 2
}

================ Node #2155 ================
{
  "id": "ec73629c-59ac-4f0e-a432-2c06934952ab",
  "name": "Microsoft Outlook21",
  "type": "n8n-nodes-base.microsoftOutlook",
  "position": [
    2709,
    1044
  ],
  "parameters": {
    "messageId": {
      "__rl": true,
      "mode": "id",
      "value": "={{ $('varID & Category1').item.json.id }}"
    },
    "operation": "update",
    "updateFields": {
      "categories": "={{ \n [$('varJSON1').first().json.output.category, $('varJSON1').first().json.output.subCategory]\n .filter(item => item && item.trim() !== \"\")\n .map(item => item.charAt(0).toUpperCase() + item.slice(1))\n}}"
    }
  },
  "typeVersion": 2
}

================ Node #2156 ================
{
  "id": "0a19d15c-0cd3-4f26-9be2-4914522751fb",
  "name": "Filter1",
  "type": "n8n-nodes-base.filter",
  "position": [
    -100,
    448
  ],
  "parameters": {
    "options": {},
    "conditions": {
      "options": {
        "version": 2,
        "leftValue": "",
        "caseSensitive": true,
        "typeValidation": "strict"
      },
      "combinator": "and",
      "conditions": [
        {
          "id": "c8cd6917-f94e-4fb7-8601-b8ed8f1aa8bf",
          "operator": {
            "type": "array",
            "operation": "empty",
            "singleValue": true
          },
          "leftValue": "={{ $json.categories }}",
          "rightValue": ""
        }
      ]
    }
  },
  "typeVersion": 2.2
}

================ Node #2157 ================
{
  "id": "96e6e31c-6306-44a8-a57a-2b5216636b00",
  "name": "If1",
  "type": "n8n-nodes-base.if",
  "notes": "Checks if the email has been read",
  "position": [
    3320,
    668
  ],
  "parameters": {
    "options": {},
    "conditions": {
      "options": {
        "version": 2,
        "leftValue": "",
        "caseSensitive": true,
        "typeValidation": "strict"
      },
      "combinator": "and",
      "conditions": [
        {
          "id": "f8cf2a56-cea8-4150-b7a0-048dbda20f2f",
          "operator": {
            "type": "boolean",
            "operation": "true",
            "singleValue": true
          },
          "leftValue": "={{ $json.isRead }}",
          "rightValue": ""
        }
      ]
    }
  },
  "typeVersion": 2.2
}

================ Node #2158 ================
{
  "id": "8a6e0118-abe3-45e2-aefc-94640348b2ec",
  "name": "Microsoft Outlook22",
  "type": "n8n-nodes-base.microsoftOutlook",
  "position": [
    2709,
    864
  ],
  "parameters": {
    "messageId": {
      "__rl": true,
      "mode": "id",
      "value": "={{ $('varID & Category1').item.json.id }}"
    },
    "operation": "update",
    "updateFields": {
      "categories": "={{ \n [$('varJSON1').first().json.output.category, $('varJSON1').first().json.output.subCategory]\n .filter(item => item && item.trim() !== \"\")\n .map(item => item.charAt(0).toUpperCase() + item.slice(1))\n}}"
    }
  },
  "typeVersion": 2
}

================ Node #2159 ================
{
  "id": "e2d8e7b5-4447-4327-9f4e-b8d52765667e",
  "name": "Catch Errors1",
  "type": "n8n-nodes-base.set",
  "position": [
    1760,
    608
  ],
  "parameters": {
    "options": {},
    "assignments": {
      "assignments": [
        {
          "id": "0dc6d439-60fb-49f6-b4d5-f5cce6f030ad",
          "name": "error",
          "type": "string",
          "value": "={{ $json }}"
        }
      ]
    }
  },
  "typeVersion": 3.4
}

================ Node #2160 ================
{
  "id": "17f6ac43-51e4-4bee-b0d8-13deb3bf3cc9",
  "name": "varJSON1",
  "type": "n8n-nodes-base.set",
  "onError": "continueErrorOutput",
  "position": [
    1540,
    468
  ],
  "parameters": {
    "options": {
      "ignoreConversionErrors": true
    },
    "assignments": {
      "assignments": [
        {
          "id": "0c52f57f-74eb-4385-ac6b-f3e5f4f50e73",
          "name": "output",
          "type": "object",
          "value": "={{ $json.output.replace(/^.*?({.*}).*$/s, '$1') }}"
        }
      ]
    }
  },
  "typeVersion": 3.4
}

================ Node #2161 ================
{
  "id": "82dd9631-a34b-4d54-be28-6f8dcc3548f0",
  "name": "Sticky Note10",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    -360,
    220
  ],
  "parameters": {
    "width": 411.91693012378937,
    "height": 401.49417117683515,
    "content": "## Outlook Business with filters\nFilters:\n```\nflag/flagStatus eq 'notFlagged' and not categories/any()\n```\n\nThese filters ensure we do not process flagged emails or email that already have a category set."
  },
  "typeVersion": 1
}

================ Node #2162 ================
{
  "id": "0583e196-37a5-43db-8c0a-aa624029c926",
  "name": "Microsoft Outlook23",
  "type": "n8n-nodes-base.microsoftOutlook",
  "position": [
    -300,
    448
  ],
  "parameters": {
    "limit": 1,
    "fields": [
      "flag",
      "from",
      "importance",
      "replyTo",
      "sender",
      "subject",
      "toRecipients",
      "body",
      "categories",
      "isRead"
    ],
    "output": "fields",
    "options": {},
    "filtersUI": {
      "values": {
        "filters": {
          "custom": "flag/flagStatus eq 'notFlagged' and not categories/any()",
          "foldersToInclude": [
            "AQMkAGE3ZTU5MGMzLTFkNGItNGQ5Zi04MDQ1LThmNGFlMTVhYjMwYgAuAAAD8UhruVwm402lgPBG2Tj-aQEAnz-IOcWBGE2lrVuQgAF6zAAAAgEMAAAA"
          ]
        }
      }
    },
    "operation": "getAll"
  },
  "typeVersion": 2
}

================ Node #2163 ================
{
  "id": "a9540e6b-929b-4460-8972-93e4d19cd934",
  "name": "varID & Category1",
  "type": "n8n-nodes-base.set",
  "position": [
    900,
    468
  ],
  "parameters": {
    "options": {},
    "assignments": {
      "assignments": [
        {
          "id": "de2ad4f2-7381-4715-a3f4-59611e161b74",
          "name": "id",
          "type": "string",
          "value": "={{ $('Microsoft Outlook23').item.json.id }}"
        },
        {
          "id": "458c7a89-e4a3-46d0-8b38-72d87748e306",
          "name": "category",
          "type": "string",
          "value": "\"action\", \"junk\", \"receipt\", \"SaaS\", \"community\", \"business\" or \"other\""
        }
      ]
    }
  },
  "typeVersion": 3.4
}

================ Node #2164 ================
{
  "id": "e6b3b41e-d7d3-4c9b-8189-a005c748ff18",
  "name": "Sticky Note11",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    360,
    348
  ],
  "parameters": {
    "color": 6,
    "width": 418.7820408163265,
    "height": 301.40952380952365,
    "content": "## Sanitise Email \nRemoves HTML and useless information in preparation for the AI Agent"
  },
  "typeVersion": 1
}

================ Node #2165 ================
{
  "id": "f9787a75-526c-4ef1-b0a7-0db7d890ab3f",
  "name": "Sticky Note12",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    820,
    348
  ],
  "parameters": {
    "color": 6,
    "width": 256.16108843537415,
    "height": 298.37931972789124,
    "content": "## Modify Categories \nEdit this to customise category selection"
  },
  "typeVersion": 1
}

================ Node #2166 ================
{
  "id": "50223a01-34cf-4191-9dd7-3dac02a9e945",
  "name": "Sticky Note13",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    1480,
    328
  ],
  "parameters": {
    "color": 5,
    "width": 441.003537414966,
    "height": 463.0204081632651,
    "content": "## Convert to JSON\n* Ensures the Agent output to converted to JSON\n* Catches any errors and continues processing"
  },
  "typeVersion": 1
}

================ Node #2167 ================
{
  "id": "4580c532-96a6-46b4-8922-d79316d1cc01",
  "name": "Sticky Note14",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    2120,
    328
  ],
  "parameters": {
    "color": 5,
    "width": 311.71482993197264,
    "height": 454.93986394557805,
    "content": "## Switch Categories\nEnsure your categories match the **varID & Category** Edit Fields node"
  },
  "typeVersion": 1
}

================ Node #2168 ================
{
  "id": "b51a7c34-2a5e-4670-81a4-d1582711c69a",
  "name": "Sticky Note15",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    2629,
    -76
  ],
  "parameters": {
    "color": 4,
    "width": 251.3480889735252,
    "height": 1289.0156245602684,
    "content": "## Set Categories\n"
  },
  "typeVersion": 1
}

================ Node #2169 ================
{
  "id": "3a7ede7b-539b-49d2-8803-153ca6c9eb69",
  "name": "Sticky Note16",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    2949,
    -76
  ],
  "parameters": {
    "color": 4,
    "width": 251.3480889735252,
    "height": 770.995811762121,
    "content": "## Move to Folders\n"
  },
  "typeVersion": 1
}

================ Node #2170 ================
{
  "id": "ee9a9d78-8c07-470a-9d1b-ceddfc8875ca",
  "name": "Sticky Note17",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    3260,
    553
  ],
  "parameters": {
    "color": 4,
    "height": 293.65527013262994,
    "content": "## Check if email has been read\n\n"
  },
  "typeVersion": 1
}

================ Node #2171 ================
{
  "id": "c75b9d38-79a7-4be2-a90b-a99da1bbd745",
  "name": "Microsoft Outlook Move Message1",
  "type": "n8n-nodes-base.microsoftOutlook",
  "position": [
    3609,
    604
  ],
  "parameters": {
    "folderId": {
      "__rl": true,
      "mode": "list",
      "value": "AQMkAGE3ZTU5MGMzLTFkNGItNGQ5Zi04MDQ1LThmNGFlMTVhYjMwYgAuAAAD8UhruVwm402lgPBG2Tj-aQEAnz-IOcWBGE2lrVuQgAF6zAADLJmrCwAAAA==",
      "cachedResultUrl": "https://outlook.office365.com/mail/AQMkAGE3ZTU5MGMzLTFkNGItNGQ5Zi04MDQ1LThmNGFlMTVhYjMwYgAuAAAD8UhruVwm402lgPBG2Tj%2FaQEAnz%2FIOcWBGE2lrVuQgAF6zAADLJmrCwAAAA%3D%3D",
      "cachedResultName": "Actioned"
    },
    "messageId": {
      "__rl": true,
      "mode": "id",
      "value": "={{ $('varID & Category1').item.json.id }}"
    },
    "operation": "move"
  },
  "typeVersion": 2
}

================ Node #2172 ================
{
  "id": "85ff0348-16dc-46e6-bf70-48a10fe0ded8",
  "name": "AI Agent1",
  "type": "@n8n/n8n-nodes-langchain.agent",
  "position": [
    1160,
    468
  ],
  "parameters": {
    "text": "=Categorise the following email\n<email>\n{{ $('varEmal1').first().json.toJsonString() }}\n</email>\n\nEnsure your final output is valid JSON with no additional text or token in the following format:\n\n{\n \"subject\": \"SUBJECT_LINE\",1\n \"category\": \"CATEGORY\",\n \"subCategory\": \"SUBCATEGORY\", //use sparingly\n \"analysis\": \"ANALYSIS_REASONING\"\n}\n\nRemember you can only use ONE of the following categories {{ $json.category }}. No other categories can be used. Use the subcategory for additional context, for example, if a SaaS email requires action, or if a business email requires action. Do not create any additional subcategories, you can only use ONE of the following {{ $json.category }}.",
    "options": {
      "systemMessage": "=You're an AI assistant for a freelance developer, categorizing emails as {{ $json.category }}. Email info is in <email> tags.\n\nCategorization priority:\n\nAction: Needs response or action (includes some SaaS emails), avoid sales email but include enquires.\nJunk: Ads, sales, newsletters, promotions, daily digests, (emojis often indicate junk), phishing, scams, discounts etc.\nReceipt: Any purchase confirmation.\nSaaS: Account/security updates, unless action required, generic SaaS information, usually from a non-personal email address.\nCommunity: Updates, events, forums, everything related to \"community\".\nBusiness: Any communication related to freelance work, usually from a humans email address\nOther: Doesn't fit into any other category.\n\nKey points:\n\nSaaS emails needing action are \"SaaS\" and subcategory \"action\".\nAnalyze the subject, body, email addresses and other data.\nLook for specific keywords and phrases for each category.\nEmail can have 2 categories, primary and sub, for example, \"action\" and \"SaaS\" or \"action\" and \"business\".\nEmails from business development executives are often junk.\n\n\nOutput in valid JSON format:\n{\n\"subject\": \"SUBJECT_LINE\",\n\"category\": \"PRIMARY CATEGORY\",\n\"subCategory\": \"SUBCATEGORY\", //use sparingly\n\"analysis\": \"Brief 1-2 sentence explanation of category choice\"\n}\nNo additional text or tokens outside the JSON.\n\nYou may only use the following categories and subcategories, do not create any more categories or subcategories: {{ $json.category }}"
    },
    "promptType": "define",
    "hasOutputParser": true
  },
  "typeVersion": 1.6
}

================ Node #2173 ================
{
  "id": "93e7be79-9035-4b58-9a83-b9182a0515f8",
  "name": "Merge1",
  "type": "n8n-nodes-base.merge",
  "position": [
    3989,
    564
  ],
  "parameters": {
    "numberInputs": 7
  },
  "typeVersion": 3
}

================ Node #2174 ================
{
  "id": "cbaeaed1-cb09-4614-93f1-3fe349cd0e4e",
  "name": "Switch1",
  "type": "n8n-nodes-base.switch",
  "position": [
    2220,
    488
  ],
  "parameters": {
    "rules": {
      "values": [
        {
          "outputKey": "junk",
          "conditions": {
            "options": {
              "version": 2,
              "leftValue": "",
              "caseSensitive": false,
              "typeValidation": "strict"
            },
            "combinator": "and",
            "conditions": [
              {
                "operator": {
                  "type": "string",
                  "operation": "equals"
                },
                "leftValue": "={{ $json.output.category }}",
                "rightValue": "junk"
              }
            ]
          },
          "renameOutput": true
        },
        {
          "outputKey": "receipt",
          "conditions": {
            "options": {
              "version": 2,
              "leftValue": "",
              "caseSensitive": false,
              "typeValidation": "strict"
            },
            "combinator": "and",
            "conditions": [
              {
                "id": "0c61c7a8-e8b4-49c5-a96c-402d5eae7089",
                "operator": {
                  "name": "filter.operator.equals",
                  "type": "string",
                  "operation": "equals"
                },
                "leftValue": "={{ $json.output.category }}",
                "rightValue": "receipt"
              }
            ]
          },
          "renameOutput": true
        },
        {
          "outputKey": "SaaS",
          "conditions": {
            "options": {
              "version": 2,
              "leftValue": "",
              "caseSensitive": false,
              "typeValidation": "strict"
            },
            "combinator": "and",
            "conditions": [
              {
                "id": "703f65c8-cf4a-47fe-ad1a-a5f6e0412ae7",
                "operator": {
                  "name": "filter.operator.equals",
                  "type": "string",
                  "operation": "equals"
                },
                "leftValue": "={{ $json.output.category }}",
                "rightValue": "SaaS"
              }
            ]
          },
          "renameOutput": true
        },
        {
          "outputKey": "community",
          "conditions": {
            "options": {
              "version": 2,
              "leftValue": "",
              "caseSensitive": false,
              "typeValidation": "strict"
            },
            "combinator": "and",
            "conditions": [
              {
                "id": "b074d5cd-9215-40df-8877-5df904edc000",
                "operator": {
                  "name": "filter.operator.equals",
                  "type": "string",
                  "operation": "equals"
                },
                "leftValue": "={{ $json.output.category }}",
                "rightValue": "community"
              }
            ]
          },
          "renameOutput": true
        },
        {
          "outputKey": "action",
          "conditions": {
            "options": {
              "version": 2,
              "leftValue": "",
              "caseSensitive": false,
              "typeValidation": "strict"
            },
            "combinator": "and",
            "conditions": [
              {
                "id": "bece338a-e0c5-43b5-b8cc-41229a374213",
                "operator": {
                  "name": "filter.operator.equals",
                  "type": "string",
                  "operation": "equals"
                },
                "leftValue": "={{ $json.output.category }}",
                "rightValue": "action"
              }
            ]
          },
          "renameOutput": true
        },
        {
          "outputKey": "business",
          "conditions": {
            "options": {
              "version": 2,
              "leftValue": "",
              "caseSensitive": false,
              "typeValidation": "strict"
            },
            "combinator": "and",
            "conditions": [
              {
                "id": "d6c9751f-0ffa-4041-a579-6957bb9c9296",
                "operator": {
                  "name": "filter.operator.equals",
                  "type": "string",
                  "operation": "equals"
                },
                "leftValue": "={{ $json.output.category }}",
                "rightValue": "business"
              }
            ]
          },
          "renameOutput": true
        }
      ]
    },
    "options": {
      "ignoreCase": true,
      "fallbackOutput": "extra"
    }
  },
  "typeVersion": 3.2
}

================ Node #2175 ================
{
  "id": "939bb301-5e12-4d5b-9a56-61a61cca5f0d",
  "name": "OpenAI Chat Model",
  "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
  "position": [
    640,
    460
  ],
  "parameters": {
    "model": "gpt-4o-mini",
    "options": {}
  },
  "credentials": {
    "openAiApi": {
      "id": "8gccIjcuf3gvaoEr",
      "name": "OpenAi account"
    }
  },
  "typeVersion": 1
}

================ Node #2176 ================
{
  "id": "372777e8-ce90-4dea-befc-ac1b2eb4729f",
  "name": "Window Buffer Memory",
  "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
  "position": [
    780,
    460
  ],
  "parameters": {},
  "typeVersion": 1.2
}

================ Node #2177 ================
{
  "id": "7a8f0ad1-1c00-4043-b3e5-c88521140a1a",
  "name": "SerpAPI",
  "type": "@n8n/n8n-nodes-langchain.toolSerpApi",
  "position": [
    920,
    460
  ],
  "parameters": {
    "options": {}
  },
  "credentials": {
    "serpApi": {
      "id": "aJCKjxx6U3K7ydDe",
      "name": "SerpAPI account"
    }
  },
  "typeVersion": 1
}

================ Node #2178 ================
{
  "id": "a7624108-e3da-4193-a625-887314216b8b",
  "name": "When chat message received",
  "type": "@n8n/n8n-nodes-langchain.chatTrigger",
  "position": [
    360,
    240
  ],
  "webhookId": "53c136fe-3e77-4709-a143-fe82746dd8b6",
  "parameters": {
    "options": {}
  },
  "typeVersion": 1.1
}

================ Node #2179 ================
{
  "id": "6b8b7de8-fe3f-43b5-97ce-a52a9e44eb5e",
  "name": "AI Agent",
  "type": "@n8n/n8n-nodes-langchain.agent",
  "position": [
    680,
    240
  ],
  "parameters": {
    "options": {}
  },
  "typeVersion": 1.6
}

================ Node #2180 ================
{
  "id": "ff4e8706-09a0-4bf1-86c1-dfb65f55ccb3",
  "name": "Google Drive Trigger",
  "type": "n8n-nodes-base.googleDriveTrigger",
  "position": [
    20,
    -140
  ],
  "parameters": {
    "event": "fileCreated",
    "options": {},
    "pollTimes": {
      "item": [
        {
          "mode": "everyMinute"
        }
      ]
    },
    "triggerOn": "specificFolder",
    "folderToWatch": {
      "__rl": true,
      "mode": "list",
      "value": "1-hRMnBRYgY6iVJ_youKMyPz83k9GAVYu",
      "cachedResultUrl": "https://drive.google.com/drive/folders/1-hRMnBRYgY6iVJ_youKMyPz83k9GAVYu",
      "cachedResultName": "nnnnnnnnnnn8n"
    }
  },
  "credentials": {
    "googleDriveOAuth2Api": {
      "id": "PlyNQuMqlwn9SuLb",
      "name": "Google Drive account"
    }
  },
  "typeVersion": 1
}

================ Node #2181 ================
{
  "id": "340fb03b-3b8a-4eb4-ad4c-b0ba12b72b19",
  "name": "Google Drive",
  "type": "n8n-nodes-base.googleDrive",
  "position": [
    260,
    -140
  ],
  "parameters": {
    "fileId": {
      "__rl": true,
      "mode": "id",
      "value": "={{ $json.id }}"
    },
    "options": {
      "binaryPropertyName": "data"
    },
    "operation": "download"
  },
  "credentials": {
    "googleDriveOAuth2Api": {
      "id": "PlyNQuMqlwn9SuLb",
      "name": "Google Drive account"
    }
  },
  "typeVersion": 3
}

================ Node #2182 ================
{
  "id": "4a5d037f-0103-4645-87d0-785dfdfb80d1",
  "name": "Extract from File",
  "type": "n8n-nodes-base.extractFromFile",
  "position": [
    260,
    60
  ],
  "parameters": {
    "options": {}
  },
  "typeVersion": 1,
  "alwaysOutputData": false
}

================ Node #2183 ================
{
  "id": "36c7e83d-f22f-4a71-b5a2-64ed3e4ce24b",
  "name": "OpenAI",
  "type": "@n8n/n8n-nodes-langchain.openAi",
  "position": [
    -120,
    260
  ],
  "parameters": {
    "modelId": {
      "__rl": true,
      "mode": "list",
      "value": "gpt-4o-mini",
      "cachedResultName": "GPT-4O-MINI"
    },
    "options": {},
    "messages": {
      "values": [
        {
          "role": "system",
          "content": "Analyze the provided tabular data and identify the columns that contain personally identifiable information (PII). Return only the column names that contain PII, separated by commas. Key name: 'content'. Do not include any additional text or explanation."
        },
        {
          "content": "=Here is some tabular data with column headers and two example rows.\n\nHeaders: {{Object.keys($json)}}\n\nExample Row 1: {{Object.values($json)}}\n\n"
        }
      ]
    },
    "jsonOutput": true
  },
  "credentials": {
    "openAiApi": {
      "id": "Mld1OIvnEVogxjDH",
      "name": "OpenAi account"
    }
  },
  "executeOnce": true,
  "typeVersion": 1.7
}

================ Node #2184 ================
{
  "id": "771c6535-47d4-4c70-b487-bd5ac602e29c",
  "name": "Merge",
  "type": "n8n-nodes-base.merge",
  "position": [
    440,
    260
  ],
  "parameters": {
    "numberInputs": 3
  },
  "typeVersion": 3
}

================ Node #2185 ================
{
  "id": "1fc467fd-379d-4841-978b-89c1453b61d8",
  "name": "Upload to Drive",
  "type": "n8n-nodes-base.googleDrive",
  "position": [
    740,
    260
  ],
  "parameters": {
    "name": "={{ $json.fileName }}",
    "content": "={{ $json.content }}",
    "driveId": {
      "__rl": true,
      "mode": "list",
      "value": "My Drive"
    },
    "options": {},
    "folderId": {
      "__rl": true,
      "mode": "list",
      "value": "1F30Qu3csrmMhtcu_prMipeiGm-64VEdd",
      "cachedResultUrl": "https://drive.google.com/drive/folders/1F30Qu3csrmMhtcu_prMipeiGm-64VEdd",
      "cachedResultName": "processed"
    },
    "operation": "createFromText"
  },
  "credentials": {
    "googleDriveOAuth2Api": {
      "id": "PlyNQuMqlwn9SuLb",
      "name": "Google Drive account"
    }
  },
  "typeVersion": 3
}

================ Node #2186 ================
{
  "id": "92715586-e630-4584-83a3-1af42d7cb50e",
  "name": "Get filename",
  "type": "n8n-nodes-base.splitOut",
  "position": [
    20,
    60
  ],
  "parameters": {
    "options": {
      "destinationFieldName": "originalFilename"
    },
    "fieldToSplitOut": "name"
  },
  "executeOnce": true,
  "typeVersion": 1
}

================ Node #2187 ================
{
  "id": "2c4b3242-34db-4948-b835-cd2340ad7b19",
  "name": "Get result",
  "type": "n8n-nodes-base.splitOut",
  "position": [
    200,
    260
  ],
  "parameters": {
    "options": {
      "destinationFieldName": "data"
    },
    "fieldToSplitOut": "message.content.content"
  },
  "typeVersion": 1
}

================ Node #2188 ================
{
  "id": "4207dc71-5b0e-4780-9f23-00f5a7fc3862",
  "name": "Remove PII columns",
  "type": "n8n-nodes-base.code",
  "position": [
    580,
    260
  ],
  "parameters": {
    "jsCode": "// Input: All items from the previous node\nconst input = $input.all();\n\n// Step 1: Extract the PII column names from the first item\nconst firstItem = input[0];\nif (!firstItem.json.data || !firstItem.json.data) {\n throw new Error(\"PII column names are missing in the input data.\");\n}\nconst piiColumns = firstItem.json.data.split(',').map(col => col.trim());\n//console.log(\"PII Columns to Remove:\", piiColumns);\n\n// Step 2: Remove the first two items and process the remaining rows\nlet rows = input.slice(2).map(item => item.json); // Exclude the first item\n//console.log(\"Rows to convert (before skipping last):\", rows);\n\n\n// Ensure there are rows to process\nif (rows.length === 0) {\n throw new Error(\"No rows to convert to CSV.\");\n}\n\n// Step 3: Remove PII columns from each row\nconst sanitizedRows = rows.map(row => {\n const sanitizedRow = { ...row }; // Copy the row\n piiColumns.forEach(column => delete sanitizedRow[column]); // Remove PII columns\n return sanitizedRow;\n});\n//console.log(\"Sanitized Rows:\", sanitizedRows);\n\n// Step 4: Extract headers from sanitized rows\nconst headers = Object.keys(sanitizedRows[0]); // Extract updated headers\n//console.log(\"CSV Headers:\", headers);\n\n// Step 5: Convert rows to CSV format\nconst csvRows = [\n headers.join(','), // Add header row\n ...sanitizedRows.map(row => \n headers.map(header => String(row[header] || '').replace(/,/g, '')).join(',') // Match headers with rows\n )\n];\n\n// Join all rows with a newline character\nconst csvContent = csvRows.join('\\n');\n//console.log(\"CSV Content:\", csvContent);\n\nconst originalFileName = input[1].json.originalFilename;\n\n// Step 7: Generate a new filename\nconst fileExtension = originalFileName.split('.').pop();\nconst baseName = originalFileName.replace(`.${fileExtension}`, '');\nconst newFileName = `${baseName}_PII_removed.${fileExtension}`;\n//console.log(\"New Filename:\", newFileName);\n\n// Step 8: Return the CSV content and filename as JSON\nreturn [\n {\n json: {\n fileName: newFileName, // New file name\n content: csvContent // CSV content as plain text\n }\n }\n];\n"
  },
  "typeVersion": 2
}

================ Node #2189 ================
{
  "id": "e9f25ee7-cd00-4496-9062-5d57cab5788d",
  "name": "Sticky Note",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    -300,
    -220
  ],
  "parameters": {
    "height": 260,
    "content": "## Remove PII from CSV Files\nThis workflow monitors a Google Drive folder for new CSV files, identifies and removes PII columns using OpenAI, and uploads the sanitized file back to the drive. It requires Google Drive and OpenAI integrations with API access enabled."
  },
  "typeVersion": 1
}

================ Node #2190 ================
{
  "id": "76589d1c-45f3-4a89-906f-8ef300d34964",
  "name": "n8n Form Trigger",
  "type": "n8n-nodes-base.formTrigger",
  "position": [
    -2520,
    -280
  ],
  "webhookId": "5e7637dd-d222-4786-8cdc-7b66cebc1481",
  "parameters": {
    "path": "schedule_appointment",
    "options": {
      "ignoreBots": true,
      "appendAttribution": true,
      "useWorkflowTimezone": true
    },
    "formTitle": "Schedule an Appointment",
    "formFields": {
      "values": [
        {
          "fieldLabel": "Your Name",
          "placeholder": "eg. Sam Smith",
          "requiredField": true
        },
        {
          "fieldType": "email",
          "fieldLabel": "Email",
          "placeholder": "eg. sam@example.com",
          "requiredField": true
        },
        {
          "fieldType": "textarea",
          "fieldLabel": "Enquiry",
          "placeholder": "eg. I'm looking for...",
          "requiredField": true
        }
      ]
    },
    "formDescription": "Welcome to Jim's Appointment Form.\nBefore we set a date, please tell me a little about yourself and how I can help."
  },
  "typeVersion": 2.1
}

================ Node #2191 ================
{
  "id": "194b7073-fa33-4e75-85ed-c02724c8075c",
  "name": "Form End",
  "type": "n8n-nodes-base.form",
  "position": [
    -420,
    -260
  ],
  "webhookId": "8fcc907b-bc2e-4fdf-a829-82c83e677724",
  "parameters": {
    "options": {
      "formTitle": "Appointment Request Sent!"
    },
    "operation": "completion",
    "completionTitle": "Appointment Request Sent!",
    "completionMessage": "=Thank you for submitting an appointment request. A confirmation of this request will be sent to your inbox. I'll get back to you shortly with a confirmation of the appointment.\n\nHere is the summary of the appointment request.\n\nName: {{ $('Get Form Values').item.json.name }}\nDate & Time: {{ DateTime.fromISO($('Get Form Values').item.json.dateTime).format('EEE, dd MMM @ t') }}\nEnquiry: {{ $('Get Form Values').item.json.enquiry.trim() }}\n"
  },
  "typeVersion": 1
}

================ Node #2192 ================
{
  "id": "688ea2cc-b595-4b6f-9214-d5dfd3893172",
  "name": "Enter Date & Time",
  "type": "n8n-nodes-base.form",
  "position": [
    -1260,
    -320
  ],
  "webhookId": "0cd03415-66f8-4c82-8069-5bfd8ea310bd",
  "parameters": {
    "options": {
      "formTitle": "Enter a Date & Time",
      "formDescription": "=Please select a date and time"
    },
    "defineForm": "json",
    "jsonOutput": "={{\n[\n {\n \"fieldLabel\":\"Date\",\n \"requiredField\":true,\n \"fieldType\": \"dropdown\",\n \"fieldOptions\":\n Array(5).fill(0)\n .map((_,idx) => $now.plus(idx+1, 'day'))\n .filter(d => !d.isWeekend)\n .map(d => ({ option: d.format('EEE, d MMM') }))\n },\n {\n \"fieldLabel\": \"Time\",\n \"requiredField\": true,\n \"fieldType\": \"dropdown\",\n \"fieldOptions\": [\n { \"option\": \"9:00 am\" },\n { \"option\": \"10:00 am\" },\n { \"option\": \"11:00 am\" },\n { \"option\": \"12:00 pm\" },\n { \"option\": \"1:00 pm\" },\n { \"option\": \"2:00 pm\" },\n { \"option\": \"3:00 pm\" },\n { \"option\": \"4:00 pm\" },\n { \"option\": \"5:00 pm\" },\n { \"option\": \"6:00 pm\" }\n ]\n }\n]\n}}"
  },
  "typeVersion": 1
}

================ Node #2193 ================
{
  "id": "602c40f9-ab11-4908-aab3-1a199126e097",
  "name": "Get Form Values",
  "type": "n8n-nodes-base.set",
  "position": [
    -900,
    -260
  ],
  "parameters": {
    "mode": "raw",
    "options": {},
    "jsonOutput": "={{\n{\n name: $('n8n Form Trigger').first().json['Your Name'],\n email: $('n8n Form Trigger').first().json.Email,\n enquiry: $('n8n Form Trigger').first().json.Enquiry,\n dateTime: DateTime.fromFormat(`${$json.Date} ${$json.Time}`, \"EEE, dd MMM t\"),\n submittedAt: $('n8n Form Trigger').first().json.submittedAt,\n}\n}}"
  },
  "typeVersion": 3.4
}

================ Node #2194 ================
{
  "id": "21f93645-5e27-4e9f-a72c-47a39e42a79c",
  "name": "Terms & Conditions",
  "type": "n8n-nodes-base.form",
  "position": [
    -1680,
    -240
  ],
  "webhookId": "dcf32f99-8fb7-457a-8a58-ac1a018b1873",
  "parameters": {
    "options": {
      "formTitle": "Before we continue...",
      "formDescription": "=Terms and Conditions for Booking an Appointment\n\nNon-Binding Nature of Discussions:\nAny information shared, discussed, or agreed upon during the call is non-binding and provisional. No agreement, service, or commitment shall be considered confirmed unless explicitly documented and agreed to in writing.\n\nProhibition of Recording and Note-Taking Tools:\nBy proceeding with the appointment, the user agrees not to use AI assistants, note-taking applications, recording devices, or any other technology to record or transcribe the conversation, whether manually or automatically. This is to ensure confidentiality and respect for the integrity of the discussion.\n\nConfirmation of Understanding:\nBy booking this appointment, you acknowledge and accept these terms and conditions in full."
    },
    "formFields": {
      "values": [
        {
          "fieldType": "dropdown",
          "fieldLabel": "Please select",
          "multiselect": true,
          "fieldOptions": {
            "values": [
              {
                "option": "I accept the terms and conditions"
              }
            ]
          },
          "requiredField": true
        }
      ]
    }
  },
  "typeVersion": 1
}

================ Node #2195 ================
{
  "id": "22e03fec-bd56-4fc3-864a-f1e81a864cb5",
  "name": "OpenAI Chat Model",
  "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
  "position": [
    -2340,
    -140
  ],
  "parameters": {
    "options": {}
  },
  "credentials": {
    "openAiApi": {
      "id": "8gccIjcuf3gvaoEr",
      "name": "OpenAi account"
    }
  },
  "typeVersion": 1
}

================ Node #2196 ================
{
  "id": "8b4e9bba-cd57-46af-8042-4b47e5ebcd82",
  "name": "Has Accepted?",
  "type": "n8n-nodes-base.if",
  "position": [
    -1500,
    -240
  ],
  "parameters": {
    "options": {},
    "conditions": {
      "options": {
        "version": 2,
        "leftValue": "",
        "caseSensitive": true,
        "typeValidation": "strict"
      },
      "combinator": "and",
      "conditions": [
        {
          "id": "bc7c3e99-e610-4997-82a7-4851f2c04c19",
          "operator": {
            "type": "string",
            "operation": "startsWith"
          },
          "leftValue": "={{ $json[\"Please select\"] }}",
          "rightValue": "I accept"
        }
      ]
    }
  },
  "typeVersion": 2.2
}

================ Node #2197 ================
{
  "id": "627a4c00-e831-4a77-8aad-f417f0f8e6dd",
  "name": "Send Receipt",
  "type": "n8n-nodes-base.gmail",
  "position": [
    -580,
    -260
  ],
  "webhookId": "5f590407-4ab9-4ae6-bb85-38dbe41d6dce",
  "parameters": {
    "sendTo": "={{ $('Get Form Values').first().json.email }}",
    "message": "=<p>Dear {{ $('Get Form Values').first().json.name }},</p>\n<p>Thanks for requesting an appointment. We will review and get back to you shortly.</p>\n<p>Here is the summary of the request that was sent:</p>\n<p>\nName: {{ $('Get Form Values').first().json.name }}<br/>\nEmail: {{ $('Get Form Values').first().json.email }}<br/>\nEnquiry: {{ $('Get Form Values').first().json.enquiry }}<br/>\nSubmitted at: {{ $('Get Form Values').first().json.submittedAt }}\n</p>\n",
    "options": {},
    "subject": "=Appointment Request Received for {{ DateTime.fromISO($('Get Form Values').first().json.dateTime).format('EEE, dd MMM @ t') }}"
  },
  "credentials": {
    "gmailOAuth2": {
      "id": "Sf5Gfl9NiFTNXFWb",
      "name": "Gmail account"
    }
  },
  "typeVersion": 2.1
}

================ Node #2198 ================
{
  "id": "91d3dd7d-53f8-4f8e-9af2-ec54cf7f42ad",
  "name": "Wait for Approval",
  "type": "n8n-nodes-base.gmail",
  "position": [
    340,
    -260
  ],
  "webhookId": "ab9c6c5e-334d-44bb-a8fd-a58140bc680d",
  "parameters": {
    "sendTo": "=admin@example.com",
    "message": "=<h2>A new appointment request was submitted!</h2>\n<p>\nRequesting appointment date is <strong>{{ DateTime.fromISO($('Execute Workflow Trigger').item.json.dateTime).format('EEE, dd MMM @ t') }}</strong>.\n</p>\n<p>\nName: {{ $('Execute Workflow Trigger').first().json.name }}<br/>\nEmail: {{ $('Execute Workflow Trigger').first().json.email }}<br/>\nEnquiry Summary: {{ $json.text }}<br/>\nSubmitted at: {{ $('Execute Workflow Trigger').first().json.submittedAt }}\n</p>",
    "subject": "New Appointment Request!",
    "operation": "sendAndWait",
    "approvalOptions": {
      "values": {
        "approvalType": "double",
        "approveLabel": "Confirm"
      }
    }
  },
  "credentials": {
    "gmailOAuth2": {
      "id": "Sf5Gfl9NiFTNXFWb",
      "name": "Gmail account"
    }
  },
  "typeVersion": 2.1
}

================ Node #2199 ================
{
  "id": "7a02b57b-b9b1-45b1-9b3d-aebb84259875",
  "name": "Has Approval?",
  "type": "n8n-nodes-base.if",
  "position": [
    520,
    -260
  ],
  "parameters": {
    "options": {},
    "conditions": {
      "options": {
        "version": 2,
        "leftValue": "",
        "caseSensitive": true,
        "typeValidation": "strict"
      },
      "combinator": "and",
      "conditions": [
        {
          "id": "e5e37acb-9e9d-4a9e-bf59-a35dfc035886",
          "operator": {
            "type": "boolean",
            "operation": "true",
            "singleValue": true
          },
          "leftValue": "={{ $json.data.approved }}",
          "rightValue": ""
        }
      ]
    }
  },
  "typeVersion": 2.2
}

================ Node #2200 ================
{
  "id": "96aab8be-4c5e-4e14-a6ea-6d2b743551be",
  "name": "OpenAI Chat Model1",
  "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
  "position": [
    0,
    -120
  ],
  "parameters": {
    "options": {}
  },
  "credentials": {
    "openAiApi": {
      "id": "8gccIjcuf3gvaoEr",
      "name": "OpenAi account"
    }
  },
  "typeVersion": 1
}

================ Node #2201 ================
{
  "id": "6f2b5454-70a3-4391-b785-bb871c3e2081",
  "name": "Create Appointment",
  "type": "n8n-nodes-base.googleCalendar",
  "position": [
    720,
    -340
  ],
  "parameters": {
    "end": "={{ DateTime.fromISO($('Execute Workflow Trigger').first().json.dateTime).plus(30, 'minute').toISO() }}",
    "start": "={{ $('Execute Workflow Trigger').first().json.dateTime }}",
    "calendar": {
      "__rl": true,
      "mode": "list",
      "value": "c_5792bdf04bc395cbcbc6f7b754268245a33779d36640cc80a357711aa2f09a0a@group.calendar.google.com",
      "cachedResultName": "n8n-events"
    },
    "additionalFields": {
      "summary": "=Appointment Scheduled - {{ $('Execute Workflow Trigger').item.json.name }} & Jim",
      "attendees": [
        "={{ $('Execute Workflow Trigger').item.json.email }}"
      ],
      "description": "={{ $('Summarise Enquiry').first().json.text }}\n\nOriginal message:\n> {{ $('Execute Workflow Trigger').item.json.enquiry }}",
      "conferenceDataUi": {
        "conferenceDataValues": {
          "conferenceSolution": "hangoutsMeet"
        }
      }
    }
  },
  "credentials": {
    "googleCalendarOAuth2Api": {
      "id": "kWMxmDbMDDJoYFVK",
      "name": "Google Calendar account"
    }
  },
  "typeVersion": 1.2
}

================ Node #2202 ================
{
  "id": "e6881867-5b3c-4b85-b06a-a0a3c01be227",
  "name": "Send Rejection",
  "type": "n8n-nodes-base.gmail",
  "position": [
    720,
    -180
  ],
  "webhookId": "5f590407-4ab9-4ae6-bb85-38dbe41d6dce",
  "parameters": {
    "sendTo": "={{ $('Execute Workflow Trigger').first().json.email }}",
    "message": "=<p>Dear {{ $('Execute Workflow Trigger').first().json.name }},</p>\n<p>Unfortunately, we cannot schedule the requested appointment at the requested time.</p>\n<p>Kind regards</p>\n",
    "options": {},
    "subject": "=Appointment Request Rejected for {{ DateTime.fromISO($('Execute Workflow Trigger').first().json.dateTime).format('EEE, dd MMM @ t') }}"
  },
  "credentials": {
    "gmailOAuth2": {
      "id": "Sf5Gfl9NiFTNXFWb",
      "name": "Gmail account"
    }
  },
  "typeVersion": 2.1
}

================ Node #2203 ================
{
  "id": "40785eca-943c-45f6-b4a9-0c95538621ed",
  "name": "Sticky Note3",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    -2580,
    -555.2889298043726
  ],
  "parameters": {
    "color": 7,
    "width": 763.0427617951669,
    "height": 611.898918296892,
    "content": "## 1. Qualify Enquiries Using AI\n[Learn more about the text classifier](https://docs.n8n.io/integrations/builtin/cluster-nodes/root-nodes/n8n-nodes-langchain.text-classifier/)\n\nWith n8n's multi-forms, you\u2019re no longer stuck creating long, overwhelming forms. Instead, you have more flexibility and control to design smarter, more engaging form experiences.\n\nIn this demo, we\u2019ll explore an appointment request scenario where a user wants to schedule a call to discuss their inquiry. However, not all inquiries require a meeting, making it a perfect use case for AI to pre-qualify the request. We can handle this validation using the text classifier node."
  },
  "typeVersion": 1
}

================ Node #2204 ================
{
  "id": "985be8d1-e77a-475b-9ac2-dba163dbd950",
  "name": "Sticky Note6",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    -1800,
    -549.8684464902185
  ],
  "parameters": {
    "color": 7,
    "width": 781.472405063291,
    "height": 606.0718987341766,
    "content": "## 2. Split Form For Better User Experience\n[Learn more about the forms](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.form)\n\nOnboarding is a great reason to split your big form into smaller ones. Taking the user through a step by step process ensures a smooth experience and keeps them engaged throughout.\n\nHere, we take the opportunity of the extra context space to display a terms and conditions which the user must agree to making their request. The next form then asks for desired date and time of the event."
  },
  "typeVersion": 1
}

================ Node #2205 ================
{
  "id": "9b0a3f0e-e15d-4d0e-b620-1acc78bf812c",
  "name": "Decline",
  "type": "n8n-nodes-base.form",
  "position": [
    -2020,
    -160
  ],
  "webhookId": "4353eadb-b7a0-45f2-8dd8-5f6cd882d8d8",
  "parameters": {
    "options": {},
    "operation": "completion",
    "completionTitle": "Send me a DM Instead!",
    "completionMessage": "Thanks for your enquiry but it may not necessarily need an appointment. Please feel free to email me instead at jim@example.com."
  },
  "typeVersion": 1
}

================ Node #2206 ================
{
  "id": "fcd3eb7d-6389-4c07-97cc-275ae387c963",
  "name": "Decline1",
  "type": "n8n-nodes-base.form",
  "position": [
    -1260,
    -160
  ],
  "webhookId": "4353eadb-b7a0-45f2-8dd8-5f6cd882d8d8",
  "parameters": {
    "options": {},
    "operation": "completion",
    "completionTitle": "Send me a DM Instead!",
    "completionMessage": "Thanks for your enquiry but it may not necessarily need an appointment. Please feel free to email me instead at jim@example.com."
  },
  "typeVersion": 1
}

================ Node #2207 ================
{
  "id": "d89427cb-fffb-4aa4-b55c-b315fa0e92be",
  "name": "Sticky Note7",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    -1000,
    -498.80432681242814
  ],
  "parameters": {
    "color": 7,
    "width": 792.9401150747982,
    "height": 497.4250863060987,
    "content": "## 3. Send Acknowledgement to User and Start Approval Process\n[Learn more about the Gmail node](https://docs.n8n.io/integrations/builtin/app-nodes/n8n-nodes-base.gmail/)\n\nOnce all form steps are concluded, we can send a notification to the requester via email and in the background, trigger another email to the admin to initiate the approval process. The approval process works in a separate execution so doesn't interrupt the user's form experience."
  },
  "typeVersion": 1
}

================ Node #2208 ================
{
  "id": "041081e1-ee98-4b40-aa14-1980b23f4031",
  "name": "Sticky Note8",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    -160,
    -620
  ],
  "parameters": {
    "color": 7,
    "width": 609.4228768699652,
    "height": 287.178089758343,
    "content": "## 4. Approve or Decline Appointment\n[Learn more about the Waiting for Approval](https://docs.n8n.io/integrations/builtin/app-nodes/n8n-nodes-base.gmail/message-operations/#send-a-message-and-wait-for-approval)\n\nThe Wait for Approval feature for Gmail is a special operation which allows for human-in-the-loop interaction in n8n workflows. In this example, the human interaction is the approval of the appointment request. The feature will put the workflow in a waiting state where a message is sent to the admin with 2 buttons: confirm and decline.\n\nWhen the admin clicks on the confirm button, the workflow resumes from the Gmail node and a meeting event is created for the requesting user in Google Calendar.\n\nWhen declined, a rejection email is sent to the requester instead."
  },
  "typeVersion": 1
}

================ Node #2209 ================
{
  "id": "d6af0f50-234f-46ca-aa41-7f3891aff8a3",
  "name": "Trigger Approval Process",
  "type": "n8n-nodes-base.executeWorkflow",
  "position": [
    -740,
    -260
  ],
  "parameters": {
    "mode": "each",
    "options": {
      "waitForSubWorkflow": false
    },
    "workflowId": {
      "__rl": true,
      "mode": "id",
      "value": "={{ $workflow.id }}"
    }
  },
  "typeVersion": 1.1
}

================ Node #2210 ================
{
  "id": "e524d6df-9b6d-4d61-8e71-08a0d3a751d7",
  "name": "Execute Workflow Trigger",
  "type": "n8n-nodes-base.executeWorkflowTrigger",
  "position": [
    -160,
    -260
  ],
  "parameters": {},
  "typeVersion": 1
}

================ Node #2211 ================
{
  "id": "74dccbc1-7728-4336-a18a-2541007fd369",
  "name": "Summarise Enquiry",
  "type": "@n8n/n8n-nodes-langchain.chainLlm",
  "position": [
    0,
    -260
  ],
  "parameters": {
    "text": "=The enquiry is as follows:\n{{ $('Execute Workflow Trigger').first().json.enquiry.substring(0, 500) }}",
    "messages": {
      "messageValues": [
        {
          "message": "Summarise the given enquiry"
        }
      ]
    },
    "promptType": "define"
  },
  "typeVersion": 1.5
}

================ Node #2212 ================
{
  "id": "b74f0f5a-39f0-4db3-beba-03caf981c5d2",
  "name": "Sticky Note9",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    -3080,
    -640
  ],
  "parameters": {
    "width": 468.6766398158801,
    "height": 690.6653164556957,
    "content": "## Try it out!\n\n### This n8n template is a simple appointment scheduling workflow using n8n forms with AI thrown in the mix for good measure. It also uses n8n's wait for approval feature which allows the ability to confirm appointment requests and create events in Google Calendar.\n\n### How it works\n* We start with a form trigger which asks for the purpose of the appointment.\n* Instantly, we can qualify this by using a text classifier node which uses AI's contextual understanding to ensure the appointment is worthwhile. If not, an alternative is suggested instead.\n* Multi-page forms are then used to set the terms of the appointment and ask the user for a desired date and time.\n* An acknowledgement is sent to the user while an approval by email process is triggered in the background.\n* In a subworkflow, we use Gmail with the wait for approval operation to send an approval form to the admin user who can either confirm or decline the appointment request.\n* When approved, a Google Calendar event is created. When declined, the user is notified via email that the appointment request was declined.\n\n### Need Help?\nJoin the [Discord](https://discord.com/invite/XPKeKXeB7d) or ask in the [Forum](https://community.n8n.io/)!\n\nHappy Hacking!\n"
  },
  "typeVersion": 1
}

================ Node #2213 ================
{
  "id": "d3c87dfa-d6e5-402a-89e5-6d8f93b824a6",
  "name": "Sticky Note",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    299,
    -280
  ],
  "parameters": {
    "width": 177.66444188722656,
    "height": 257.56869965477557,
    "content": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n### \ud83d\udea8 Set your admin email here!"
  },
  "typeVersion": 1
}

================ Node #2214 ================
{
  "id": "6351121d-6ebe-432d-b370-13296fd58e1a",
  "name": "Enquiry Classifier",
  "type": "@n8n/n8n-nodes-langchain.textClassifier",
  "position": [
    -2340,
    -280
  ],
  "parameters": {
    "options": {
      "fallback": "other"
    },
    "inputText": "={{ $json.Enquiry }}",
    "categories": {
      "categories": [
        {
          "category": "relevant enquiry",
          "description": "Enquire about AI, automation, digital products and product engineering."
        }
      ]
    }
  },
  "typeVersion": 1
}

================ Node #2215 ================
{
  "id": "49086cdf-a38c-4cb8-9be9-d3e6ea5bdde5",
  "name": "Embeddings OpenAI",
  "type": "@n8n/n8n-nodes-langchain.embeddingsOpenAi",
  "position": [
    1740,
    1040
  ],
  "parameters": {
    "options": {}
  },
  "credentials": {
    "openAiApi": {
      "id": "X7Jf0zECd3IkQdSw",
      "name": "OpenAi (octionicsolutions)"
    }
  },
  "typeVersion": 1
}

================ Node #2216 ================
{
  "id": "f0670721-92f4-422a-99c9-f9c2aa6fe21f",
  "name": "Token Splitter",
  "type": "@n8n/n8n-nodes-langchain.textSplitterTokenSplitter",
  "position": [
    2380,
    540
  ],
  "parameters": {
    "chunkSize": 500
  },
  "typeVersion": 1
}

================ Node #2217 ================
{
  "id": "fe80ecac-4f79-4b07-ad8e-60ab5f980cba",
  "name": "Loop Over Items",
  "type": "n8n-nodes-base.splitInBatches",
  "position": [
    1180,
    -200
  ],
  "parameters": {
    "options": {}
  },
  "typeVersion": 3
}

================ Node #2218 ================
{
  "id": "81b79248-08e8-4214-872b-1796e51ad0a4",
  "name": "Question and Answer Chain",
  "type": "@n8n/n8n-nodes-langchain.chainRetrievalQa",
  "position": [
    744,
    495
  ],
  "parameters": {
    "options": {}
  },
  "typeVersion": 1.3
}

================ Node #2219 ================
{
  "id": "e78f7b63-baef-4834-8f1b-aecfa9102d6c",
  "name": "Vector Store Retriever",
  "type": "@n8n/n8n-nodes-langchain.retrieverVectorStore",
  "position": [
    844,
    715
  ],
  "parameters": {},
  "typeVersion": 1
}

================ Node #2220 ================
{
  "id": "1d5ffbd0-b2cf-4660-a291-581d18608ecd",
  "name": "OpenAI Chat Model",
  "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
  "position": [
    704,
    715
  ],
  "parameters": {
    "model": "gpt-4o",
    "options": {}
  },
  "credentials": {
    "openAiApi": {
      "id": "X7Jf0zECd3IkQdSw",
      "name": "OpenAi (octionicsolutions)"
    }
  },
  "typeVersion": 1
}

================ Node #2221 ================
{
  "id": "37a3063f-aa21-4347-a72f-6dd316c58366",
  "name": "When chat message received",
  "type": "@n8n/n8n-nodes-langchain.chatTrigger",
  "position": [
    524,
    495
  ],
  "webhookId": "74479a54-418f-4de2-b70d-cfb3e3fdd5a7",
  "parameters": {
    "public": true,
    "options": {}
  },
  "typeVersion": 1.1
}

================ Node #2222 ================
{
  "id": "5924bc01-1694-4b5c-8a06-7c46ee4c6425",
  "name": "Schedule Trigger",
  "type": "n8n-nodes-base.scheduleTrigger",
  "position": [
    520,
    -200
  ],
  "parameters": {
    "rule": {
      "interval": [
        {
          "field": "minutes",
          "minutesInterval": 1
        }
      ]
    }
  },
  "typeVersion": 1.2
}

================ Node #2223 ================
{
  "id": "5067eda6-8bbe-407a-a6af-93e81be53661",
  "name": "Sticky Note",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    620,
    0
  ],
  "parameters": {
    "width": 329.16412916774584,
    "height": 312.52803480051045,
    "content": "## Switch trigger (optional)\nIf you are on the cloud plan, consider switching to the Notion Trigger Node instead, to save on executions."
  },
  "typeVersion": 1
}

================ Node #2224 ================
{
  "id": "33458828-484d-426b-a3d1-974a81c6162e",
  "name": "Limit",
  "type": "n8n-nodes-base.limit",
  "position": [
    1620,
    -60
  ],
  "parameters": {},
  "typeVersion": 1
}

================ Node #2225 ================
{
  "id": "4d39503a-378e-4942-a5d4-8c62785aac44",
  "name": "Limit1",
  "type": "n8n-nodes-base.limit",
  "position": [
    2660,
    -60
  ],
  "parameters": {},
  "typeVersion": 1
}

================ Node #2226 ================
{
  "id": "0e0b1391-3fe5-4d80-a2eb-a2483b79d9a6",
  "name": "Delete old embeddings if exist",
  "type": "n8n-nodes-base.supabase",
  "position": [
    1400,
    -60
  ],
  "parameters": {
    "tableId": "documents",
    "operation": "delete",
    "filterType": "string",
    "filterString": "=metadata->>id=eq.{{ $('Input Reference').item.json.id }}"
  },
  "credentials": {
    "supabaseApi": {
      "id": "DjIb4HMTYXhTU8Uc",
      "name": "Supabase (VectorStore)"
    }
  },
  "typeVersion": 1,
  "alwaysOutputData": true
}

================ Node #2227 ================
{
  "id": "4a8614e4-0a53-4731-bc68-57505d7d0a09",
  "name": "Get page blocks",
  "type": "n8n-nodes-base.notion",
  "position": [
    1840,
    -60
  ],
  "parameters": {
    "blockId": {
      "__rl": true,
      "mode": "id",
      "value": "={{ $('Input Reference').item.json.id }}"
    },
    "resource": "block",
    "operation": "getAll",
    "returnAll": true,
    "fetchNestedBlocks": true
  },
  "credentials": {
    "notionApi": {
      "id": "ObmaBA0dJss3JJPv",
      "name": "Notion (octionicsolutions / Test)"
    }
  },
  "executeOnce": true,
  "typeVersion": 2.2
}

================ Node #2228 ================
{
  "id": "8c922895-49d6-4778-8356-6f6cf49e5420",
  "name": "Default Data Loader",
  "type": "@n8n/n8n-nodes-langchain.documentDefaultDataLoader",
  "position": [
    2300,
    260
  ],
  "parameters": {
    "options": {
      "metadata": {
        "metadataValues": [
          {
            "name": "id",
            "value": "={{ $('Input Reference').item.json.id }}"
          },
          {
            "name": "name",
            "value": "={{ $('Input Reference').item.json.name }}"
          }
        ]
      }
    }
  },
  "typeVersion": 1
}

================ Node #2229 ================
{
  "id": "8ad7ff2e-4bc2-4821-ae03-bab2dc11d947",
  "name": "Sticky Note1",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    2220,
    400
  ],
  "parameters": {
    "width": 376.2098538932132,
    "height": 264.37628764336097,
    "content": "## Adjust chunk size and overlap\nFor more accurate search results, increase the overlap. For the *text-embedding-ada-002* model the chunk size plus overlap must not exceed 8191"
  },
  "typeVersion": 1
}

================ Node #2230 ================
{
  "id": "8078d59a-f45f-4e96-a8ec-6c2f1c328e84",
  "name": "Input Reference",
  "type": "n8n-nodes-base.noOp",
  "position": [
    960,
    -200
  ],
  "parameters": {},
  "typeVersion": 1
}

================ Node #2231 ================
{
  "id": "aae6c517-a316-40e3-aee9-1cc4b448689f",
  "name": "Notion Trigger",
  "type": "n8n-nodes-base.notionTrigger",
  "disabled": true,
  "position": [
    740,
    120
  ],
  "parameters": {
    "event": "pagedUpdatedInDatabase",
    "pollTimes": {
      "item": [
        {
          "mode": "everyMinute"
        }
      ]
    },
    "databaseId": {
      "__rl": true,
      "mode": "list",
      "value": "ec6dc7b4-9ce0-47f7-8025-ef09295999fd",
      "cachedResultUrl": "https://www.notion.so/ec6dc7b49ce047f78025ef09295999fd",
      "cachedResultName": "Knowledge Base"
    }
  },
  "credentials": {
    "notionApi": {
      "id": "ObmaBA0dJss3JJPv",
      "name": "Notion (octionicsolutions / Test)"
    }
  },
  "typeVersion": 1
}

================ Node #2232 ================
{
  "id": "3a43d66d-d4e3-4ca1-aee9-85ac65160e45",
  "name": "Get updated pages",
  "type": "n8n-nodes-base.notion",
  "position": [
    740,
    -200
  ],
  "parameters": {
    "filters": {
      "conditions": [
        {
          "key": "Last edited time|last_edited_time",
          "condition": "equals",
          "lastEditedTime": "={{ $now.minus(1, 'minutes').toISO() }}"
        }
      ]
    },
    "options": {},
    "resource": "databasePage",
    "operation": "getAll",
    "databaseId": {
      "__rl": true,
      "mode": "list",
      "value": "ec6dc7b4-9ce0-47f7-8025-ef09295999fd",
      "cachedResultUrl": "https://www.notion.so/ec6dc7b49ce047f78025ef09295999fd",
      "cachedResultName": "Knowledge Base"
    },
    "filterType": "manual"
  },
  "credentials": {
    "notionApi": {
      "id": "ObmaBA0dJss3JJPv",
      "name": "Notion (octionicsolutions / Test)"
    }
  },
  "typeVersion": 2.2
}

================ Node #2233 ================
{
  "id": "bbf1296f-4e2b-4a38-bdf3-ae2b63cc7774",
  "name": "Sticky Note23",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    900,
    -300
  ],
  "parameters": {
    "color": 7,
    "width": 216.47293010628914,
    "height": 275.841854198618,
    "content": "This placeholder serves as a reference point so it is easier to swap the data source with a different service"
  },
  "typeVersion": 1
}

================ Node #2234 ================
{
  "id": "631e1e10-0b52-4a17-89a4-769ac563321f",
  "name": "Sticky Note24",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    1340,
    -160
  ],
  "parameters": {
    "color": 7,
    "width": 216.47293010628914,
    "height": 275.841854198618,
    "content": "All chunks of a previous version of the document are being deleted by filtering the meta data by the given ID"
  },
  "typeVersion": 1
}

================ Node #2235 ================
{
  "id": "6c830c83-4b70-4719-8e2a-26846e60085c",
  "name": "Sticky Note25",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    1560,
    -160
  ],
  "parameters": {
    "color": 7,
    "width": 216.47293010628914,
    "height": 275.841854198618,
    "content": "Reduce the active streams/items to just 1 to prevent the following nodes from double-processing"
  },
  "typeVersion": 1
}

================ Node #2236 ================
{
  "id": "46c8e4e4-0a5e-4ede-947b-5773710d4e55",
  "name": "Sticky Note26",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    1780,
    -160
  ],
  "parameters": {
    "color": 7,
    "width": 216.47293010628914,
    "height": 275.841854198618,
    "content": "Retrieve all page contents/blocks"
  },
  "typeVersion": 1
}

================ Node #2237 ================
{
  "id": "0369e610-d074-4812-9d04-8615b42965a5",
  "name": "Sticky Note27",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    2600,
    -160
  ],
  "parameters": {
    "color": 7,
    "width": 216.47293010628914,
    "height": 275.841854198618,
    "content": "Reduce the active streams/items to just 1 to prevent the following nodes from double-processing"
  },
  "typeVersion": 1
}

================ Node #2238 ================
{
  "id": "4f3bce54-1650-45fa-abb0-c881358c7e8d",
  "name": "Sticky Note28",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    2220,
    -160
  ],
  "parameters": {
    "color": 7,
    "width": 375.9283286479995,
    "height": 275.841854198618,
    "content": "Embed item and store in Vector Store. Depending on the length the content is being split up into multiple chunks/embeds"
  },
  "typeVersion": 1
}

================ Node #2239 ================
{
  "id": "44125921-e068-4a5d-a56b-b0e63c103556",
  "name": "Supabase Vector Store1",
  "type": "@n8n/n8n-nodes-langchain.vectorStoreSupabase",
  "position": [
    924,
    935
  ],
  "parameters": {
    "options": {},
    "tableName": {
      "__rl": true,
      "mode": "list",
      "value": "documents",
      "cachedResultName": "documents"
    }
  },
  "credentials": {
    "supabaseApi": {
      "id": "DjIb4HMTYXhTU8Uc",
      "name": "Supabase (VectorStore)"
    }
  },
  "typeVersion": 1
}

================ Node #2240 ================
{
  "id": "467322a9-949d-4569-aac6-92196da46ba5",
  "name": "Sticky Note30",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    460,
    400
  ],
  "parameters": {
    "color": 7,
    "width": 730.7522093855692,
    "height": 668.724737081502,
    "content": "Simple chat bot to ask specific questions while having access to the context of the Notion Knowledge Base which was stored in the Vector Store"
  },
  "typeVersion": 1
}

================ Node #2241 ================
{
  "id": "27f078cf-b309-4dd1-a8ce-b4fc504d6e29",
  "name": "Sticky Note31",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    1660,
    900
  ],
  "parameters": {
    "color": 7,
    "width": 219.31927574471658,
    "height": 275.841854198618,
    "content": "Model used for both creating and reading embeddings"
  },
  "typeVersion": 1
}

================ Node #2242 ================
{
  "id": "2f59cba1-4318-47e7-bf0b-b908d4186b86",
  "name": "Supabase Vector Store",
  "type": "@n8n/n8n-nodes-langchain.vectorStoreSupabase",
  "position": [
    2280,
    -60
  ],
  "parameters": {
    "mode": "insert",
    "options": {},
    "tableName": {
      "__rl": true,
      "mode": "list",
      "value": "documents",
      "cachedResultName": "documents"
    }
  },
  "credentials": {
    "supabaseApi": {
      "id": "DjIb4HMTYXhTU8Uc",
      "name": "Supabase (VectorStore)"
    }
  },
  "typeVersion": 1
}

================ Node #2243 ================
{
  "id": "729849e7-0eff-40c2-ae00-ae660c1eec69",
  "name": "Sticky Note32",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    1120,
    -300
  ],
  "parameters": {
    "color": 7,
    "width": 216.47293010628914,
    "height": 275.841854198618,
    "content": "Process each page/document separately."
  },
  "typeVersion": 1
}

================ Node #2244 ================
{
  "id": "3f632a24-ca0a-45c4-801d-041aa3f887a7",
  "name": "Sticky Note29",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    2220,
    120
  ],
  "parameters": {
    "color": 7,
    "width": 376.0759088111347,
    "height": 275.841854198618,
    "content": "Store additional meta data with each embed, especially the Notion ID, which can be later used to find all belonging entries of one page, even if they got split into multiple embeds."
  },
  "typeVersion": 1
}

================ Node #2245 ================
{
  "id": "ffaf3861-5287-4f57-8372-09216a18cb4d",
  "name": "Sticky Note33",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    460,
    -300
  ],
  "parameters": {
    "color": 7,
    "width": 216.47293010628914,
    "height": 275.841854198618,
    "content": "Using a manual approach for polling data from Notion for more accuracy."
  },
  "typeVersion": 1
}

================ Node #2246 ================
{
  "id": "cbbedfc0-4d64-42a6-8f55-21e04887305f",
  "name": "Sticky Note34",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    680,
    -300
  ],
  "parameters": {
    "width": 216.47293010628914,
    "height": 275.841854198618,
    "content": "## Select Database\nChoose the database which represents your Knowledge Base"
  },
  "typeVersion": 1
}

================ Node #2247 ================
{
  "id": "8b6767f2-1bc9-42fb-b319-f39f6734b9f2",
  "name": "Sticky Note35",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    2000,
    -160
  ],
  "parameters": {
    "color": 7,
    "width": 216.47293010628914,
    "height": 275.841854198618,
    "content": "Combine all contents to a single text formatted into one line which can be easily stored as an embed"
  },
  "typeVersion": 1
}

================ Node #2248 ================
{
  "id": "cdff1756-77d7-421e-8672-25c9862840b0",
  "name": "Concatenate to single string",
  "type": "n8n-nodes-base.summarize",
  "position": [
    2060,
    -60
  ],
  "parameters": {
    "options": {},
    "fieldsToSummarize": {
      "values": [
        {
          "field": "content",
          "separateBy": "\n",
          "aggregation": "concatenate"
        }
      ]
    }
  },
  "typeVersion": 1
}

================ Node #2249 ================
{
  "id": "b7c3ca47-11b3-4378-81fa-68b2f56b295e",
  "name": "OpenAI Chat Model",
  "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
  "position": [
    1460,
    440
  ],
  "parameters": {
    "model": "gpt-4o",
    "options": {
      "temperature": 0.2
    }
  },
  "credentials": {
    "openAiApi": {
      "id": "rveqdSfp7pCRON1T",
      "name": "Ted's Tech Talks OpenAi"
    }
  },
  "typeVersion": 1
}

================ Node #2250 ================
{
  "id": "977c3a82-440b-4d44-9042-47a673bcb52c",
  "name": "Window Buffer Memory",
  "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
  "position": [
    1640,
    440
  ],
  "parameters": {
    "contextWindowLength": 10
  },
  "typeVersion": 1.2
}

================ Node #2251 ================
{
  "id": "c6e9c0e2-d238-4f0b-a4c8-2271f2c8b31b",
  "name": "No Operation, do nothing",
  "type": "n8n-nodes-base.noOp",
  "position": [
    2340,
    520
  ],
  "parameters": {},
  "typeVersion": 1
}

================ Node #2252 ================
{
  "id": "4c141ae8-d2d1-45c7-bb5d-f33841d3cee6",
  "name": "List all tables in a database",
  "type": "n8n-nodes-base.mySql",
  "position": [
    520,
    -35
  ],
  "parameters": {
    "query": "SHOW TABLES;",
    "options": {},
    "operation": "executeQuery"
  },
  "credentials": {
    "mySql": {
      "id": "ICakJ1LRuVl4dRTs",
      "name": "db4free TTT account"
    }
  },
  "typeVersion": 2.4
}

================ Node #2253 ================
{
  "id": "54fb3362-041b-4e4f-bfea-f0bc788d8dfd",
  "name": "Extract database schema",
  "type": "n8n-nodes-base.mySql",
  "position": [
    700,
    -35
  ],
  "parameters": {
    "query": "DESCRIBE {{ $json.Tables_in_tttytdb2023 }};",
    "options": {},
    "operation": "executeQuery"
  },
  "credentials": {
    "mySql": {
      "id": "ICakJ1LRuVl4dRTs",
      "name": "db4free TTT account"
    }
  },
  "typeVersion": 2.4
}

================ Node #2254 ================
{
  "id": "d55e841d-11ed-4ce2-8c8e-840bd807ff2c",
  "name": "Add table name to output",
  "type": "n8n-nodes-base.set",
  "position": [
    880,
    -35
  ],
  "parameters": {
    "options": {},
    "assignments": {
      "assignments": [
        {
          "id": "764176d6-3c89-404d-9c71-301e8a406a68",
          "name": "table",
          "type": "string",
          "value": "={{ $('List all tables in a database').item.json.Tables_in_tttytdb2023 }}"
        }
      ]
    },
    "includeOtherFields": true
  },
  "typeVersion": 3.4
}

================ Node #2255 ================
{
  "id": "ca8d30d6-c1f1-4e89-8cd5-ea3648dc3b0c",
  "name": "Convert data to binary",
  "type": "n8n-nodes-base.convertToFile",
  "position": [
    1060,
    -35
  ],
  "parameters": {
    "options": {},
    "operation": "toJson"
  },
  "typeVersion": 1.1
}

================ Node #2256 ================
{
  "id": "2d89f901-d4e7-4fea-bd69-20b518280bbc",
  "name": "Save file locally",
  "type": "n8n-nodes-base.readWriteFile",
  "position": [
    1220,
    -35
  ],
  "parameters": {
    "options": {},
    "fileName": "./chinook_mysql.json",
    "operation": "write"
  },
  "typeVersion": 1
}

================ Node #2257 ================
{
  "id": "04511c4f-44fa-4c23-87af-54d959e6cb2c",
  "name": "Extract data from file",
  "type": "n8n-nodes-base.extractFromFile",
  "position": [
    920,
    420
  ],
  "parameters": {
    "options": {},
    "operation": "fromJson"
  },
  "typeVersion": 1
}

================ Node #2258 ================
{
  "id": "96f129c0-d1d4-4cbf-a24d-0b0cea18a229",
  "name": "Chat Trigger",
  "type": "@n8n/n8n-nodes-langchain.chatTrigger",
  "position": [
    440,
    420
  ],
  "webhookId": "c308dec7-655c-4b79-832e-991bd8ea891f",
  "parameters": {
    "options": {}
  },
  "typeVersion": 1.1
}

================ Node #2259 ================
{
  "id": "4d993ed9-3bbe-4bc3-9e5b-c3d738b0e714",
  "name": "AI Agent",
  "type": "@n8n/n8n-nodes-langchain.agent",
  "position": [
    1480,
    300
  ],
  "parameters": {
    "text": "=Here is the database schema: {{ $json.schema }}\nHere is the user request: {{ $('Chat Trigger').item.json.chatInput }}",
    "agent": "conversationalAgent",
    "options": {
      "humanMessage": "TOOLS\n------\nAssistant can ask the user to use tools to look up information that may be helpful in answering the users original question. The tools the human can use are:\n\n{tools}\n\n{format_instructions}\n\nUSER'S INPUT\n--------------------\nHere is the user's input (remember to respond with a markdown code snippet of a json blob with a single action, and NOTHING else):\n\n{{input}}",
      "systemMessage": "Assistant is a large language model trained by OpenAI.\n\nAssistant is designed to be able to assist with a wide range of tasks, from answering simple questions to providing in-depth explanations and discussions on a wide range of topics. As a language model, Assistant is able to generate human-like text based on the input it receives, allowing it to engage in natural-sounding conversations and provide responses that are coherent and relevant to the topic at hand.\n\nAssistant is constantly learning and improving, and its capabilities are constantly evolving. It is able to process and understand large amounts of text, and can use this knowledge to provide accurate and informative responses to a wide range of questions. Additionally, Assistant is able to generate its own text based on the input it receives, allowing it to engage in discussions and provide explanations and descriptions on a wide range of topics.\n\nOverall, Assistant is a powerful system that can help with a wide range of tasks and provide valuable insights and information on a wide range of topics. Whether you need help with a specific question or just want to have a conversation about a particular topic, Assistant is here to assist.\n\nHelp user to work with the MySQL database.\n\nPlease wrap any sql commands into triple quotes. You don't have a tool to run SQL, so the user will do that instead of you."
    },
    "promptType": "define"
  },
  "typeVersion": 1.6
}

================ Node #2260 ================
{
  "id": "f5749b31-b28a-4341-b57f-94ee422d2873",
  "name": "Sticky Note",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    320,
    -280
  ],
  "parameters": {
    "color": 3,
    "width": 1065.0949045120822,
    "height": 466.4256045427794,
    "content": "## Run this part only once\nThis section:\n* loads a list of all tables from the database hosted on [db4free](https://db4free.net/signup.php) \n* extracts the database schema for each table and adds the table name\n* converts the schema into a binary JSON format\n* saves the schema `./chinook_mysql.json` file locally\n\n***Now you can use chat to \"talk\" to your data!*** \ud83c\udf89"
  },
  "typeVersion": 1
}

================ Node #2261 ================
{
  "id": "6606abc9-1dcb-4dba-b7ef-e221f892eed8",
  "name": "Sticky Note1",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    1040,
    -255
  ],
  "parameters": {
    "color": 6,
    "width": 312.47220527158765,
    "height": 174.60585869504342,
    "content": "## Pre-workflow setup \nConnect to a free MySQL server and import your database. Follow Step 1 and 2 in this [tutorial](https://blog.n8n.io/compare-databases/) for more.\n\n*The Chinook data used in this workflow is available on [GitHub](https://github.com/msimanga/chinook/tree/master/mysql).* "
  },
  "typeVersion": 1
}

================ Node #2262 ================
{
  "id": "c8ac730a-04ee-499d-b845-1149967d6aa2",
  "name": "When clicking \"Test workflow\"",
  "type": "n8n-nodes-base.manualTrigger",
  "position": [
    360,
    -35
  ],
  "parameters": {},
  "typeVersion": 1
}

================ Node #2263 ================
{
  "id": "6f0b167c-e012-43e1-9892-ded05be47cf8",
  "name": "Sticky Note2",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    324.32561050665913,
    209.72072645338642
  ],
  "parameters": {
    "color": 6,
    "width": 1062.678698911262,
    "height": 489.29614613074125,
    "content": "## On every chat message:\n\n* The workflow gets the data from the local schema file and extracts it as a JSON object. This way, we achieve two important improvements:\n * faster processing time as we don't need to fetch the schema for each table from a slow remote database\n * the Agent will know database structure without seeing the actual data\n* DB schema is then converted into a long string, JSON fields from the Chat Trigger are added before they are entered into the Agent node.\n"
  },
  "typeVersion": 1
}

================ Node #2264 ================
{
  "id": "3a79350c-aec1-4ad4-a2e0-679957fa420b",
  "name": "Sticky Note3",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    1400,
    -15.552780029374958
  ],
  "parameters": {
    "color": 6,
    "width": 445.66588600071304,
    "height": 714.7896619176862,
    "content": "### LangChain AI Agent's system prompt is modified.\nIt uses only the database schema to generate SQL queries. The agent creates these queries but does not execute them. Instead, it passes them to subsequent nodes.\n\n**Example:**\n\"Can you show me the list of all German customers?\" \n\nQueries are generated only when necessary; for some requests, a query may not be needed. This is because certain questions can be answered directly without SQL execution.\n\n**Example:**\n\"Can you list me all tables?\""
  },
  "typeVersion": 1
}

================ Node #2265 ================
{
  "id": "0cd425db-2a8e-4f48-b749-9a082e948395",
  "name": "Combine schema data and chat input",
  "type": "n8n-nodes-base.set",
  "position": [
    1140,
    420
  ],
  "parameters": {
    "options": {},
    "assignments": {
      "assignments": [
        {
          "id": "42abd24e-419a-47d6-bc8b-7146dd0b8314",
          "name": "sessionId",
          "type": "string",
          "value": "={{ $('Chat Trigger').first().json.sessionId }}"
        },
        {
          "id": "39244192-a1a6-42fe-bc75-a6fba1f264df",
          "name": "action",
          "type": "string",
          "value": "={{ $('Chat Trigger').first().json.action }}"
        },
        {
          "id": "f78c57d9-df13-43c7-89a7-5387e528107e",
          "name": "chatinput",
          "type": "string",
          "value": "={{ $('Chat Trigger').first().json.chatInput }}"
        },
        {
          "id": "e42b39eb-dfbd-48d9-94ed-d658bdd41454",
          "name": "schema",
          "type": "string",
          "value": "={{ $json.data }}"
        }
      ]
    }
  },
  "executeOnce": true,
  "typeVersion": 3.4
}

================ Node #2266 ================
{
  "id": "e4045e33-bb87-488d-8ccf-b4a94339a841",
  "name": "Load the schema from the local file",
  "type": "n8n-nodes-base.readWriteFile",
  "position": [
    680,
    420
  ],
  "parameters": {
    "options": {},
    "fileSelector": "./chinook_mysql.json"
  },
  "typeVersion": 1
}

================ Node #2267 ================
{
  "id": "367ebe95-0b87-44f6-8392-33fe65446c24",
  "name": "Extract SQL query",
  "type": "n8n-nodes-base.set",
  "position": [
    1900,
    340
  ],
  "parameters": {
    "options": {},
    "assignments": {
      "assignments": [
        {
          "id": "ebbe194a-4b8b-44c9-ac19-03cf69d353bf",
          "name": "query",
          "type": "string",
          "value": "={{ ($json.output.match(/SELECT[\\s\\S]*?;/i) || [])[0] || \"\" }}"
        }
      ]
    },
    "includeOtherFields": true
  },
  "typeVersion": 3.4
}

================ Node #2268 ================
{
  "id": "b856fe78-2435-4075-97f8-ecbeecf3e780",
  "name": "Check if query exists",
  "type": "n8n-nodes-base.if",
  "position": [
    2060,
    340
  ],
  "parameters": {
    "options": {},
    "conditions": {
      "options": {
        "version": 2,
        "leftValue": "",
        "caseSensitive": true,
        "typeValidation": "strict"
      },
      "combinator": "and",
      "conditions": [
        {
          "id": "2963d04d-9d79-49f9-b52a-dc8732aca781",
          "operator": {
            "type": "string",
            "operation": "notEmpty",
            "singleValue": true
          },
          "leftValue": "={{ $json.query }}",
          "rightValue": ""
        }
      ]
    }
  },
  "typeVersion": 2.2
}

================ Node #2269 ================
{
  "id": "87162d31-2f6c-4f4a-af28-c65cbadd8ed5",
  "name": "Sticky Note4",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    1874,
    220.45316744685329
  ],
  "parameters": {
    "color": 3,
    "width": 317.8901548206743,
    "height": 278.8174358200552,
    "content": "## SQL query extraction\nCheck if the agent's response contains an SQL query. If it does, we extract the query using a regular expression."
  },
  "typeVersion": 1
}

================ Node #2270 ================
{
  "id": "b3e77333-eaa9-4d23-a78c-8a19ae074739",
  "name": "Sticky Note5",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    1860,
    -16.43746604251737
  ],
  "parameters": {
    "color": 6,
    "width": 882.7611828369563,
    "height": 715.7029266156915,
    "content": ""
  },
  "typeVersion": 1
}

================ Node #2271 ================
{
  "id": "269ea79d-5f17-4764-aebb-bba31b43d8bb",
  "name": "Sticky Note7",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    1580,
    580
  ],
  "parameters": {
    "color": 3,
    "width": 257.46308756569573,
    "height": 108.03673727584527,
    "content": "The AI Agent remembers the schema, questions, and final answers, but not data values, since queries run externally. The agent can't access database content. "
  },
  "typeVersion": 1
}

================ Node #2272 ================
{
  "id": "2fd1175c-4110-48be-b6bf-2251c678bc04",
  "name": "Sticky Note6",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    2420,
    0
  ],
  "parameters": {
    "color": 3,
    "width": 308.8514666587585,
    "height": 123.43139661532095,
    "content": "- The SQL node accesses the database and executes the query. The results are then formatted for readability.\n- Both the chat response and the query result are displayed in the chat window."
  },
  "typeVersion": 1
}

================ Node #2273 ================
{
  "id": "61ae7f7c-1424-4ecb-8a12-78cd98e94d45",
  "name": "Sticky Note8",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    2480,
    600
  ],
  "parameters": {
    "color": 3,
    "width": 250.40895053328057,
    "height": 89.90186716520257,
    "content": "When the agent responds without an SQL query, you receive an immediate answer with no additional processing."
  },
  "typeVersion": 1
}

================ Node #2274 ================
{
  "id": "cbb6d1e1-0a75-4b3a-89cd-6bd545b8d414",
  "name": "Format query results",
  "type": "n8n-nodes-base.set",
  "position": [
    2420,
    140
  ],
  "parameters": {
    "options": {},
    "assignments": {
      "assignments": [
        {
          "id": "f944d21f-6aac-4842-8926-4108d6cad4bf",
          "name": "sqloutput",
          "type": "string",
          "value": "={{ Object.keys($jmespath($input.all(),'[].json')[0]).join(' | ') }} \n{{ ($jmespath($input.all(),'[].json')).map(obj => Object.values(obj).join(' | ')).join('\\n') }}"
        }
      ]
    }
  },
  "executeOnce": true,
  "typeVersion": 3.4
}

================ Node #2275 ================
{
  "id": "d958de24-84ef-4928-a7f3-32cada09a0eb",
  "name": "Run SQL query",
  "type": "n8n-nodes-base.mySql",
  "position": [
    2260,
    140
  ],
  "parameters": {
    "query": "{{ $json.query }}",
    "options": {},
    "operation": "executeQuery"
  },
  "credentials": {
    "mySql": {
      "id": "ICakJ1LRuVl4dRTs",
      "name": "db4free TTT account"
    }
  },
  "typeVersion": 2.4
}

================ Node #2276 ================
{
  "id": "99a6dc03-1035-4866-81e4-11dc66bf98ec",
  "name": "Prepare final output",
  "type": "n8n-nodes-base.set",
  "position": [
    2560,
    420
  ],
  "parameters": {
    "options": {},
    "assignments": {
      "assignments": [
        {
          "id": "aa55e186-1535-4923-aee4-e088ca69575b",
          "name": "output",
          "type": "string",
          "value": "={{ $json.output }}\n\nSQL result:\n```markdown\n{{ $json.sqloutput }}\n```"
        }
      ]
    }
  },
  "typeVersion": 3.4
}

================ Node #2277 ================
{
  "id": "9380c2f6-15d9-43e4-80a2-3019bcf5ae04",
  "name": "Combine query result and chat answer",
  "type": "n8n-nodes-base.merge",
  "position": [
    2340,
    340
  ],
  "parameters": {
    "mode": "combine",
    "options": {},
    "combineBy": "combineByPosition"
  },
  "typeVersion": 3
}

================ Node #2278 ================
{
  "id": "9052b5b2-1e2d-425c-92e5-1ed51323e71c",
  "name": "Sticky Note",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    380,
    240
  ],
  "parameters": {
    "color": 7,
    "width": 616.7964812508943,
    "height": 231.27721611949534,
    "content": "# Generate new workflow version for specific notion db schema\nInput a Notion database URL and get an AI Assistant chatbot workflow for it based on this template: https://n8n.io/workflows/2413-notion-knowledge-base-ai-assistant/\n\nProject in notion: https://www.notion.so/n8n/Chat-with-notion-database-84eec91b74dd4e36ba97edda17c2c306"
  },
  "typeVersion": 1
}

================ Node #2279 ================
{
  "id": "b4a83f76-2bad-4bbe-9b7f-1df684166035",
  "name": "Notion",
  "type": "n8n-nodes-base.notion",
  "onError": "continueErrorOutput",
  "position": [
    1280,
    480
  ],
  "parameters": {
    "simple": false,
    "resource": "database",
    "databaseId": {
      "__rl": true,
      "mode": "url",
      "value": "={{ $json.chatInput.match(/https?:\\/\\/[^\\s/$.?#].[^\\s]*/g)[0] }}"
    }
  },
  "credentials": {
    "notionApi": {
      "id": "aDS2eHXMOtsMrQnJ",
      "name": "Nathan's notion account"
    }
  },
  "typeVersion": 2.2
}

================ Node #2280 ================
{
  "id": "39537c95-5ca0-47a9-b2bf-2c0134d3f236",
  "name": "Return success to chat",
  "type": "n8n-nodes-base.set",
  "position": [
    3540,
    740
  ],
  "parameters": {
    "options": {},
    "assignments": {
      "assignments": [
        {
          "id": "bebcb43c-461d-40d7-af83-436d94733622",
          "name": "output",
          "type": "string",
          "value": "=Created workflow:\n```\n{{ $json.generatedWorkflow }}\n```\n\n\u261d\ufe0f Copy and paste JSON above into an n8n workflow canvas (on v 1.52.0+)"
        }
      ]
    }
  },
  "typeVersion": 3.4
}

================ Node #2281 ================
{
  "id": "5ae0fcfb-c3e2-443d-9a0c-25e7b17dc189",
  "name": "Auto-fixing Output Parser",
  "type": "@n8n/n8n-nodes-langchain.outputParserAutofixing",
  "position": [
    2340,
    640
  ],
  "parameters": {},
  "typeVersion": 1
}

================ Node #2282 ================
{
  "id": "4cd182ff-040a-4c0f-819f-a0648c67ab66",
  "name": "Anthropic Chat Model",
  "type": "@n8n/n8n-nodes-langchain.lmChatAnthropic",
  "position": [
    2100,
    640
  ],
  "parameters": {
    "options": {
      "temperature": 0.7,
      "maxTokensToSample": 8192
    }
  },
  "typeVersion": 1.2
}

================ Node #2283 ================
{
  "id": "dc751c1f-4cd6-4d04-8152-402eb5e24574",
  "name": "Set schema for eval",
  "type": "n8n-nodes-base.set",
  "position": [
    2720,
    440
  ],
  "parameters": {
    "options": {},
    "assignments": {
      "assignments": [
        {
          "id": "f82e26dd-f5c5-43b5-b97d-ee63c3ef124e",
          "name": "searchNotionDBJsonBody",
          "type": "string",
          "value": "={{ $json.output.output.workflowJson.parseJson().nodes.find(node => node.name === \"Search notion database\").parameters.jsonBody }}"
        },
        {
          "id": "a804139b-8bf0-43dc-aa8c-9c0dcb387392",
          "name": "generatedWorkflow",
          "type": "string",
          "value": "={{ $json.output.output.workflowJson }}"
        },
        {
          "id": "1e24fdfe-c31f-43e3-bca2-7124352fd62e",
          "name": "inputDatabase",
          "type": "object",
          "value": "={{ $('Set input data').first().json.inputDatabase }}"
        }
      ]
    }
  },
  "typeVersion": 3.4
}

================ Node #2284 ================
{
  "id": "8f8c9d29-c901-4c3c-83a6-23bfe51809bd",
  "name": "Return error to chat",
  "type": "n8n-nodes-base.set",
  "position": [
    1500,
    660
  ],
  "parameters": {
    "options": {},
    "assignments": {
      "assignments": [
        {
          "id": "b561b640-7fcb-4613-8b66-068dbd115b4e",
          "name": "sessionId",
          "type": "string",
          "value": "={{ $('When chat message received').item.json.sessionId }}"
        },
        {
          "id": "74d91d28-b73a-4341-a037-693468120d2d",
          "name": "output",
          "type": "string",
          "value": "Sorry that doesn't look like a valid notion database url. Try again."
        }
      ]
    }
  },
  "typeVersion": 3.4
}

================ Node #2285 ================
{
  "id": "518d2e58-6f2e-4497-9f74-7dbfeff4fd6f",
  "name": "Anthropic Chat Model1",
  "type": "@n8n/n8n-nodes-langchain.lmChatAnthropic",
  "position": [
    2300,
    800
  ],
  "parameters": {
    "options": {
      "maxTokensToSample": 8192
    }
  },
  "typeVersion": 1.2
}

================ Node #2286 ================
{
  "id": "0e7a4d05-db00-4915-9df4-d3cb79bf5789",
  "name": "standardize schema",
  "type": "n8n-nodes-base.set",
  "position": [
    1500,
    440
  ],
  "parameters": {
    "options": {},
    "assignments": {
      "assignments": [
        {
          "id": "8fc7df86-4a47-43ec-baea-f9ee87a899a8",
          "name": "inputDatabase.id",
          "type": "string",
          "value": "={{ $json.id }}"
        },
        {
          "id": "fdeb5b1b-0bf3-46d6-a266-7f85e212a427",
          "name": "inputDatabase.url",
          "type": "string",
          "value": "={{ $json.url }}"
        },
        {
          "id": "b2b06176-b4df-41bd-9422-9c89726fa3fd",
          "name": "inputDatabase.public_url",
          "type": "string",
          "value": "={{ $json.public_url }}"
        },
        {
          "id": "c7b65a70-8af6-4808-aae9-898df9b10340",
          "name": "inputDatabase.name",
          "type": "string",
          "value": "={{ $json.title[0].text.content }}"
        },
        {
          "id": "87c1be85-e180-487b-9c82-61c87c7c460b",
          "name": "inputDatabase.properties",
          "type": "object",
          "value": "={{ $json.properties }}"
        }
      ]
    }
  },
  "typeVersion": 3.4
}

================ Node #2287 ================
{
  "id": "8244fb04-75ec-4b41-93cf-e9c5755fabfd",
  "name": "Simplify properties object",
  "type": "n8n-nodes-base.code",
  "position": [
    1720,
    440
  ],
  "parameters": {
    "jsCode": "// Loop through each incoming item\nreturn items.map(item => {\n const inputDatabase = item.json[\"inputDatabase\"];\n\n const simplifiedProperties = Object.fromEntries(Object.entries(inputDatabase.properties).map(([key, value]) => {\n const simplifiedValue = {\n id: value.id,\n name: value.name,\n type: value.type\n };\n\n // Simplify based on type\n if (value.type === 'multi_select' || value.type === 'select') {\n simplifiedValue.options = value.multi_select?.options?.map(option => option.name) || [];\n }\n \n return [key, simplifiedValue];\n }));\n\n // Overwrite the properties object with simplifiedProperties\n item.json.inputDatabase.properties = simplifiedProperties;\n\n return item; // Return the modified item\n});\n"
  },
  "typeVersion": 2
}

================ Node #2288 ================
{
  "id": "41b615cc-de7d-4c3f-b608-2d1856e0541a",
  "name": "Structured Output Parser",
  "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
  "position": [
    2500,
    800
  ],
  "parameters": {
    "jsonSchemaExample": "{\n\t\"workflowJson\": \"json of workflow\"\n}"
  },
  "typeVersion": 1.2
}

================ Node #2289 ================
{
  "id": "8016baac-9242-44e6-b487-111bb560019d",
  "name": "Set input data",
  "type": "n8n-nodes-base.code",
  "notes": "This allows different routes to input into our agent (e.g. the retry branch). In the AI Agent, we can use a relative $json reference for data, since it's always the same input schema going in. ",
  "position": [
    1980,
    440
  ],
  "parameters": {
    "jsCode": "\nreturn [{\n json: {\n inputDatabase: $input.first().json.inputDatabase,\n feedbackPrompt: (typeof yourVariable !== 'undefined' && yourVariable) ? yourVariable : \" \",\n workflowTemplate: {\n \"nodes\": [\n {\n \"parameters\": {\n \"model\": \"gpt-4o\",\n \"options\": {\n \"temperature\": 0.7,\n \"timeout\": 25000\n }\n },\n \"id\": \"f262c0b4-d627-4fd4-ad78-0aa2f57d963f\",\n \"name\": \"OpenAI Chat Model\",\n \"type\": \"@n8n/n8n-nodes-langchain.lmChatOpenAi\",\n \"typeVersion\": 1,\n \"position\": [\n 1320,\n 640\n ],\n \"credentials\": {\n \"openAiApi\": {\n \"id\": \"AzPPV759YPBxJj3o\",\n \"name\": \"Max's DevRel OpenAI account\"\n }\n }\n },\n {\n \"parameters\": {\n \"assignments\": {\n \"assignments\": [\n {\n \"id\": \"055e8a80-4aff-4466-aaa5-ac58bb90f2d0\",\n \"name\": \"databaseName\",\n \"value\": \"={{ $json.name }}\",\n \"type\": \"string\"\n },\n {\n \"id\": \"2a61e473-72e7-46f6-98b0-817508d701c7\",\n \"name\": \"databaseId\",\n \"value\": \"={{ $json.id }}\",\n \"type\": \"string\"\n }\n ]\n },\n \"options\": {}\n },\n \"id\": \"fb74819f-660e-479c-9519-73cfc41c7ee0\",\n \"name\": \"workflow vars\",\n \"type\": \"n8n-nodes-base.set\",\n \"typeVersion\": 3.4,\n \"position\": [\n 940,\n 460\n ]\n },\n {\n \"parameters\": {\n \"assignments\": {\n \"assignments\": [\n {\n \"id\": \"a8e58791-ba51-46a2-8645-386dd1a0ff6e\",\n \"name\": \"sessionId\",\n \"value\": \"={{ $('When chat message received').item.json.sessionId }}\",\n \"type\": \"string\"\n },\n {\n \"id\": \"434209de-39d5-43d8-a964-0fcb7396306c\",\n \"name\": \"action\",\n \"value\": \"={{ $('When chat message received').item.json.action }}\",\n \"type\": \"string\"\n },\n {\n \"id\": \"cad4c972-51a9-4e16-a627-b00eea77eb30\",\n \"name\": \"chatInput\",\n \"value\": \"={{ $('When chat message received').item.json.chatInput }}\",\n \"type\": \"string\"\n }\n ]\n },\n \"options\": {}\n },\n \"id\": \"832ec8ce-0f7c-4380-9a24-633f490a60a9\",\n \"name\": \"format input for agent\",\n \"type\": \"n8n-nodes-base.set\",\n \"typeVersion\": 3.4,\n \"position\": [\n 1160,\n 460\n ]\n },\n {\n \"parameters\": {\n \"toolDescription\": \"=Use this tool to search the \\\"{{ $('workflow vars').item.json.databaseName }}\\\" Notion app database.\\n\\nIt is structured with question and answer format. \\nYou can filter query result by:\\n- By keyword\\n- filter by tag.\\n\\nKeyword and Tag have an OR relationship not AND.\\n\\n\",\n \"method\": \"POST\",\n \"url\": \"https://api.notion.com/v1/databases/7ea9697d-4875-441e-b262-1105337d232e/query\",\n \"authentication\": \"predefinedCredentialType\",\n \"nodeCredentialType\": \"notionApi\",\n \"sendBody\": true,\n \"specifyBody\": \"json\",\n \"jsonBody\": \"{\\n \\\"filter\\\": {\\n \\\"or\\\": [\\n {\\n \\\"property\\\": \\\"question\\\",\\n \\\"rich_text\\\": {\\n \\\"contains\\\": \\\"{keyword}\\\"\\n }\\n },\\n {\\n \\\"property\\\": \\\"tags\\\",\\n \\\"multi_select\\\": {\\n \\\"contains\\\": \\\"{tag}\\\"\\n }\\n }\\n ]\\n },\\n \\\"sorts\\\": [\\n {\\n \\\"property\\\": \\\"updated_at\\\",\\n \\\"direction\\\": \\\"ascending\\\"\\n }\\n ]\\n}\",\n \"placeholderDefinitions\": {\n \"values\": [\n {\n \"name\": \"keyword\",\n \"description\": \"Searches question of the record. Use one keyword at a time.\"\n },\n {\n \"name\": \"tag\",\n \"description\": \"Options: PTO, HR Policy, Health Benefits, Direct Deposit, Payroll, Sick Leave, 1:1 Meetings, Scheduling, Internal Jobs, Performance Review, Diversity, Inclusion, Training, Harassment, Discrimination, Product Roadmap, Development, Feature Request, Product Management, Support, Ticket Submission, Password Reset, Email, Slack, GitHub, Team Collaboration, Development Setup, DevOps, GitHub Profile Analyzer, Security Breach, Incident Report, New Software, Software Request, IT, Hardware, Procurement, Software Licenses, JetBrains, Adobe, Data Backup, IT Policy, Security, MFA, Okta, Device Policy, Support Ticket, Phishing, Office Supplies, Operations, Meeting Room, Berlin Office, Travel Expenses, Reimbursement, Facilities, Maintenance, Equipment, Expense Reimbursement, Mobile Phones, SIM Cards, Parking, OKRs, Dashboard, Catering, Office Events\"\n }\n ]\n }\n },\n \"id\": \"f16acb7e-f27d-4a95-845c-c990fc334795\",\n \"name\": \"Search notion database\",\n \"type\": \"@n8n/n8n-nodes-langchain.toolHttpRequest\",\n \"typeVersion\": 1.1,\n \"position\": [\n 1620,\n 640\n ],\n \"credentials\": {\n \"notionApi\": {\n \"id\": \"gfNp6Jup8rsmFLRr\",\n \"name\": \"max-bot\"\n }\n }\n },\n {\n \"parameters\": {\n \"public\": true,\n \"initialMessages\": \"=Happy {{ $today.weekdayLong }}!\\nKnowledge source assistant at your service. How can I help?\",\n \"options\": {\n \"subtitle\": \"\",\n \"title\": \"Notion Knowledge Base\"\n }\n },\n \"id\": \"9fc1ae38-d115-44d0-a088-7cec7036be6f\",\n \"name\": \"When chat message received\",\n \"type\": \"@n8n/n8n-nodes-langchain.chatTrigger\",\n \"typeVersion\": 1.1,\n \"position\": [\n 560,\n 460\n ],\n \"webhookId\": \"b76d02c0-b406-4d21-b6bf-8ad2c623def3\"\n },\n {\n \"parameters\": {\n \"resource\": \"database\",\n \"databaseId\": {\n \"__rl\": true,\n \"value\": \"7ea9697d-4875-441e-b262-1105337d232e\",\n \"mode\": \"list\",\n \"cachedResultName\": \"StarLens Company Knowledge Base\",\n \"cachedResultUrl\": \"https://www.notion.so/7ea9697d4875441eb2621105337d232e\"\n }\n },\n \"id\": \"9325e0fe-549f-423b-af48-85e802429a7f\",\n \"name\": \"Get database details\",\n \"type\": \"n8n-nodes-base.notion\",\n \"typeVersion\": 2.2,\n \"position\": [\n 760,\n 460\n ],\n \"credentials\": {\n \"notionApi\": {\n \"id\": \"gfNp6Jup8rsmFLRr\",\n \"name\": \"max-bot\"\n }\n }\n },\n {\n \"parameters\": {\n \"contextWindowLength\": 4\n },\n \"id\": \"637f5731-4442-42be-9151-30ee29ad97c6\",\n \"name\": \"Window Buffer Memory\",\n \"type\": \"@n8n/n8n-nodes-langchain.memoryBufferWindow\",\n \"typeVersion\": 1.2,\n \"position\": [\n 1460,\n 640\n ]\n },\n {\n \"parameters\": {\n \"toolDescription\": \"=Use this tool to retrieve Notion page content using the page ID. \\n\\nIt is structured with question and answer format. \\nYou can filter query result by:\\n- By keyword\\n- filter by tag.\\n\\nKeyword and Tag have an OR relationship not AND.\\n\\n\",\n \"url\": \"https://api.notion.com/v1/blocks/{page_id}/children\",\n \"authentication\": \"predefinedCredentialType\",\n \"nodeCredentialType\": \"notionApi\",\n \"placeholderDefinitions\": {\n \"values\": [\n {\n \"name\": \"page_id\",\n \"description\": \"Notion page id from 'Search notion database' tool results\"\n }\n ]\n },\n \"optimizeResponse\": true,\n \"dataField\": \"results\",\n \"fieldsToInclude\": \"selected\",\n \"fields\": \"id, type, paragraph.text, heading_1.text, heading_2.text, heading_3.text, bulleted_list_item.text, numbered_list_item.text, to_do.text, children\"\n },\n \"id\": \"6b87ae47-fac9-4ef5-aa9a-f1a1ae1adc5f\",\n \"name\": \"Search inside database record\",\n \"type\": \"@n8n/n8n-nodes-langchain.toolHttpRequest\",\n \"typeVersion\": 1.1,\n \"position\": [\n 1800,\n 640\n ],\n \"credentials\": {\n \"notionApi\": {\n \"id\": \"gfNp6Jup8rsmFLRr\",\n \"name\": \"max-bot\"\n }\n }\n },\n {\n \"parameters\": {\n \"promptType\": \"define\",\n \"text\": \"={{ $json.chatInput }}\",\n \"options\": {\n \"systemMessage\": \"=# Role:\\nYou are a helpful agent. Query the \\\"{{ $('workflow vars').item.json.databaseName }}\\\" Notion database to find relevant records or provide insights based on multiple records.\\n\\n# Behavior:\\n\\nBe clear, very concise, efficient, and accurate in responses. Do not hallucinate.\\nIf the request is ambiguous, ask for clarification. Do not embellish, only use facts from the Notion records. Never offer general advice.\\n\\n# Error Handling:\\n\\nIf no matching records are found, try alternative search criteria. Example: Laptop, then Computer, then Equipment. \\nClearly explain any issues with queries (e.g., missing fields or unsupported filters).\\n\\n# Output:\\n\\nReturn concise, user-friendly results or summaries.\\nFor large sets, show top results by default and offer more if needed. Output URLs in markdown format. \\n\\nWhen a record has the answer to user question, always output the URL to that page. Always list links to records separately at the end of the message like this:\\n\\\"Relevant pages: \\n(links in markdown format)\\\"\\nDo not output links twice, only in Relevant pages section\\n\"\n }\n },\n \"id\": \"17f2c426-c48e-48e0-9c5e-e35bdafe5109\",\n \"name\": \"AI Agent\",\n \"type\": \"@n8n/n8n-nodes-langchain.agent\",\n \"typeVersion\": 1.6,\n \"position\": [\n 1380,\n 460\n ]\n }\n ],\n \"connections\": {\n \"OpenAI Chat Model\": {\n \"ai_languageModel\": [\n [\n {\n \"node\": \"AI Agent\",\n \"type\": \"ai_languageModel\",\n \"index\": 0\n }\n ]\n ]\n },\n \"workflow vars\": {\n \"main\": [\n [\n {\n \"node\": \"format input for agent\",\n \"type\": \"main\",\n \"index\": 0\n }\n ]\n ]\n },\n \"format input for agent\": {\n \"main\": [\n [\n {\n \"node\": \"AI Agent\",\n \"type\": \"main\",\n \"index\": 0\n }\n ]\n ]\n },\n \"Search notion database\": {\n \"ai_tool\": [\n [\n {\n \"node\": \"AI Agent\",\n \"type\": \"ai_tool\",\n \"index\": 0\n }\n ]\n ]\n },\n \"When chat message received\": {\n \"main\": [\n [\n {\n \"node\": \"Get database details\",\n \"type\": \"main\",\n \"index\": 0\n }\n ]\n ]\n },\n \"Get database details\": {\n \"main\": [\n [\n {\n \"node\": \"workflow vars\",\n \"type\": \"main\",\n \"index\": 0\n }\n ]\n ]\n },\n \"Window Buffer Memory\": {\n \"ai_memory\": [\n [\n {\n \"node\": \"AI Agent\",\n \"type\": \"ai_memory\",\n \"index\": 0\n }\n ]\n ]\n },\n \"Search inside database record\": {\n \"ai_tool\": [\n [\n {\n \"node\": \"AI Agent\",\n \"type\": \"ai_tool\",\n \"index\": 0\n }\n ]\n ]\n }\n },\n \"pinData\": {}\n}\n }\n}];"
  },
  "typeVersion": 2
}

================ Node #2290 ================
{
  "id": "dc15a250-074e-4aed-8eec-5c60c91cc42d",
  "name": "Set schem for rerun",
  "type": "n8n-nodes-base.set",
  "position": [
    3540,
    240
  ],
  "parameters": {
    "options": {},
    "assignments": {
      "assignments": [
        {
          "id": "b4669a2c-7780-4c54-aef6-89a56ddf1d06",
          "name": "inputDatabase",
          "type": "object",
          "value": "={{ $json.inputDatabase }}"
        }
      ]
    }
  },
  "typeVersion": 3.4
}

================ Node #2291 ================
{
  "id": "224f4963-caac-4438-a61b-90e2c0858f24",
  "name": "Sticky Note1",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    1060,
    240
  ],
  "parameters": {
    "color": 7,
    "width": 747.234277816171,
    "height": 110.78786136085805,
    "content": "## #1 Serve chat, get URL from user, pull new notion DB schema\nUses n8n Chat trigger. Notion node will fail if an invalid URL is used, or if n8n doesn't have access to it. Also attempts to strip non URL text input. Simplifies notion DB outputs for more efficient token usage in AI Agent."
  },
  "typeVersion": 1
}

================ Node #2292 ================
{
  "id": "7e18ca8d-3181-446f-96f5-0e4b1000d855",
  "name": "Sticky Note2",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    1939,
    240
  ],
  "parameters": {
    "color": 7,
    "width": 638.6509136143742,
    "height": 114.20873484539783,
    "content": "## #2 GenAI step\nTakes 2 inputs: [original workflow template](https://n8n.io/workflows/2413-notion-knowledge-base-ai-assistant/) and new Notion database details from #1"
  },
  "typeVersion": 1
}

================ Node #2293 ================
{
  "id": "b54b8c03-eb66-4ec7-bc7f-f62ddc566bbe",
  "name": "Sticky Note3",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    2660,
    240
  ],
  "parameters": {
    "color": 7,
    "width": 727.8599253628195,
    "height": 111.9281525223713,
    "content": "## #3 Does the new workflow look right?\nChecks for previously identified cases (e.g. LLM outputs placeholder for certain values) then does general LLM check on whether it looks like valid n8n workflow JSON."
  },
  "typeVersion": 1
}

================ Node #2294 ================
{
  "id": "a5cc97a7-33e3-45fe-9e13-45ebafd469d7",
  "name": "Add feedback prompt",
  "type": "n8n-nodes-base.set",
  "position": [
    3220,
    440
  ],
  "parameters": {
    "options": {},
    "assignments": {
      "assignments": [
        {
          "id": "1243a328-8420-4be0-8932-4e153472a638",
          "name": "feedbackPrompt",
          "type": "string",
          "value": "=You attempted the below task and outputted incorrect JSON. Below is your incorrect attempt and original task prompt. Try again.\n\n# Incorrect task prompt\n"
        }
      ]
    },
    "includeOtherFields": true
  },
  "typeVersion": 3.4
}

================ Node #2295 ================
{
  "id": "b066fa2d-77ba-4466-ae3b-9ab2405bae3c",
  "name": "Check for WF JSON errors",
  "type": "n8n-nodes-base.switch",
  "notes": "Placeholder jsonBody in tool - this means the 'Search notion database' tool got [object Object] as it's value (happening ~25% of the time)",
  "position": [
    2920,
    440
  ],
  "parameters": {
    "rules": {
      "values": [
        {
          "outputKey": "Placeholder jsonBody in tool",
          "conditions": {
            "options": {
              "leftValue": "",
              "caseSensitive": true,
              "typeValidation": "strict"
            },
            "combinator": "and",
            "conditions": [
              {
                "operator": {
                  "type": "string",
                  "operation": "contains"
                },
                "leftValue": "={{ $json.searchNotionDBJsonBody }}",
                "rightValue": "object Object"
              }
            ]
          },
          "renameOutput": true
        }
      ]
    },
    "options": {
      "fallbackOutput": "extra",
      "allMatchingOutputs": false
    }
  },
  "typeVersion": 3.1
}

================ Node #2296 ================
{
  "id": "e4b38c13-255d-4136-9c7b-90678cbe523b",
  "name": "Sticky Note4",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    3540,
    60
  ],
  "parameters": {
    "color": 7,
    "width": 343.3887397891673,
    "height": 132.30907857627597,
    "content": "## #4 Respond to Chat trigger\nEach response to the chat trigger is one run. Data of the last node that runs in the workflow is sent to chat trigger, like `Return success to chat`"
  },
  "typeVersion": 1
}

================ Node #2297 ================
{
  "id": "3ecfadc2-2499-4e0f-94c4-1e68770beefb",
  "name": "Generate Workflow Agent",
  "type": "@n8n/n8n-nodes-langchain.agent",
  "onError": "continueRegularOutput",
  "position": [
    2220,
    440
  ],
  "parameters": {
    "text": "=Your task is to output a modified version of a n8n workflow template so it works with the provided new notion database schema. \n\n\n# new notion database details\n{{ $json.inputDatabase.toJsonString() }}\n\n# n8n workflow template to use as reference\n{{ $json.workflowTemplate.toJsonString() }}\n\nJSON Output:\n- Ensure valid JSON with properly quoted keys and values, no trailing commas, and correctly nested braces `{}` and brackets `[]`. If unable to format, return an error or a valid example.\n- Output linebreaks so user can copy working JSON",
    "agent": "reActAgent",
    "options": {
      "prefix": "You are an n8n expert and understand n8n's workflow JSON Structure. You take n8n workflows and make changes to them based on the user request. \n\nDon't hallucinate. Only output n8n workflow json. \n\n",
      "returnIntermediateSteps": false
    },
    "promptType": "define",
    "hasOutputParser": true
  },
  "typeVersion": 1.6
}

================ Node #2298 ================
{
  "id": "3ac37a66-30d5-404a-8c22-1402874e4f37",
  "name": "Anthropic Chat Model2",
  "type": "@n8n/n8n-nodes-langchain.lmChatAnthropic",
  "position": [
    3120,
    860
  ],
  "parameters": {
    "options": {
      "maxTokensToSample": 8192
    }
  },
  "typeVersion": 1.2
}

================ Node #2299 ================
{
  "id": "f71ddd6e-7d41-405c-8cd8-bb21fc0654ae",
  "name": "When chat message received",
  "type": "@n8n/n8n-nodes-langchain.chatTrigger",
  "position": [
    1100,
    480
  ],
  "webhookId": "49dfdc22-b4c8-4ed3-baef-6751ec52f278",
  "parameters": {
    "public": true,
    "options": {
      "title": "\ud83e\udd16 Notion database assistant generator",
      "subtitle": "Generates an n8n workflow-based AI Agent that can query any arbitrary Notion database. ",
      "inputPlaceholder": "e.g. https://www.notion.so/n8n/34f67a14195344fda645691c63dc3901",
      "loadPreviousSession": "manually"
    },
    "initialMessages": "Hi there, I can help you make an AI Agent assistant that can query a Notion database.\n\nGenerating the workflow may take a few minutes as I check whether it works and try again if I oopsie.\n\nEnter a notion database URL and I'll output the workflow in JSON that you can paste in to the n8n canvas. \n"
  },
  "typeVersion": 1.1
}

================ Node #2300 ================
{
  "id": "5a549080-0ad0-4f94-87b1-8b735d7b95a3",
  "name": "Valid n8n workflow JSON?",
  "type": "@n8n/n8n-nodes-langchain.textClassifier",
  "position": [
    3140,
    700
  ],
  "parameters": {
    "options": {
      "systemPromptTemplate": "You are an expert in n8n workflow automation tool. You know whether the json representation of an n8n workflow is valid. \n\nPlease classify the text provided by the user into one of the following categories: {categories}, and use the provided formatting instructions below. Don't explain, and only output the json."
    },
    "inputText": "={{ $json.generatedWorkflow }}",
    "categories": {
      "categories": [
        {
          "category": "invalidJSON",
          "description": "Any other workflow JSON"
        },
        {
          "category": "validJSON",
          "description": "A valid n8n workflow JSON"
        }
      ]
    }
  },
  "typeVersion": 1
}

================ Node #2301 ================
{
  "id": "02bf6e06-6671-4d18-ba30-117459e9d58a",
  "name": "Sticky Note5",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    380,
    500
  ],
  "parameters": {
    "color": 7,
    "width": 614.8565246662145,
    "height": 416.2640726760381,
    "content": "## Watch a quick set up video \ud83d\udc47\n[![Notion AI Assistant Generator](https://uploads.n8n.io/devrel/notion-db-assistant-thumb#full-width)](https://youtu.be/iK87ppcaNgM)\n"
  },
  "typeVersion": 1
}

================ Node #2302 ================
{
  "id": "41183066-0045-4a75-ba23-42f4efcfeccc",
  "name": "Google Gemini Chat Model",
  "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
  "position": [
    720,
    720
  ],
  "parameters": {
    "options": {},
    "modelName": "models/gemini-1.5-flash"
  },
  "credentials": {
    "googlePalmApi": {
      "id": "Hx1fn2jrUvojSKye",
      "name": "Google Gemini(PaLM) Api account"
    }
  },
  "typeVersion": 1
}

================ Node #2303 ================
{
  "id": "eb061c39-7a4d-42e7-bb42-806504731b11",
  "name": "Basic LLM Chain",
  "type": "@n8n/n8n-nodes-langchain.chainLlm",
  "position": [
    700,
    560
  ],
  "parameters": {
    "text": "=Your Task is to find the best resources to learn {{ $('GetTopicFromToLearn').item.json[\"I want to learn\"] }}. \n\nI have scraped the HackerNews and The following is the list of comments from HackerNews on topic about Learning {{ $('GetTopicFromToLearn').item.json[\"I want to learn\"] }}\n\n\nFocus only on comments that provide any resouces or advice or insight about learning {{ $('GetTopicFromToLearn').item.json.Learn }}. Ignore all other comments that are off topic discussions.\n\nNow based on these comments, you need to find the top resources and list them. \n\nCategorize them based on resource type (course, book, article, youtube videos, lectures, etc) and also figure out the difficultiy level (beginner, intermediate, advanced, expert).\n\nYou don't always to have fill in these categories exactly, these are given here for reference. Use your intution to find the best categorization.\n\nNow based on these metrics and running a basic sentiment analysis on comments you need to figure out what the top resources are. \n\nRespond back in Markdown formatted text. In the following format\n\n**OUTPUT FORMAT**\n\n```\n\n## Top HN Recomended Resources To Learn <topic Name> \n\n### Category 1\n\n- **Resource 1** - One line description\n- **Resource 2** - One line description\n- ... \n\n<add hyperlinks if any exists>\n\n### Category 2\n\n- **Resource 1** - One line description\n- **Resource 2** - One line description\n- ... \n\n<add hyperlinks in markdown format to the resource name itself if any exists. Example [resource name](https://example.com)>\n\n...\n```\n\nHere is the list of HackerNews Comments.\n\n{{ $json.text }}",
    "promptType": "define"
  },
  "typeVersion": 1.5
}

================ Node #2304 ================
{
  "id": "94073fe0-d25c-421e-9c99-67b6c4f0afad",
  "name": "SearchAskHN",
  "type": "n8n-nodes-base.hackerNews",
  "position": [
    -160,
    560
  ],
  "parameters": {
    "limit": 150,
    "resource": "all",
    "additionalFields": {
      "tags": [
        "ask_hn"
      ],
      "keyword": "={{ $json[\"I want to learn\"] }}"
    }
  },
  "typeVersion": 1
}

================ Node #2305 ================
{
  "id": "eee4dfdf-53ab-42be-91ae-7b6c405df7c2",
  "name": "FindHNComments",
  "type": "n8n-nodes-base.httpRequest",
  "position": [
    260,
    560
  ],
  "parameters": {
    "url": "=https://hacker-news.firebaseio.com/v0/item/{{ $json.children }}.json?print=pretty",
    "options": {}
  },
  "typeVersion": 4.2
}

================ Node #2306 ================
{
  "id": "e57d86ae-d7c1-4354-9e3c-528c76160cd9",
  "name": "CombineIntoSingleText",
  "type": "n8n-nodes-base.aggregate",
  "position": [
    480,
    560
  ],
  "parameters": {
    "options": {},
    "fieldsToAggregate": {
      "fieldToAggregate": [
        {
          "fieldToAggregate": "text"
        }
      ]
    }
  },
  "typeVersion": 1
}

================ Node #2307 ================
{
  "id": "b2086d29-1de5-48f4-8c1e-affd509fb5f7",
  "name": "SplitOutChildrenIDs",
  "type": "n8n-nodes-base.splitOut",
  "position": [
    40,
    560
  ],
  "parameters": {
    "options": {},
    "fieldToSplitOut": "children"
  },
  "typeVersion": 1
}

================ Node #2308 ================
{
  "id": "6fe68a4b-744b-48c8-9320-d2b19e3eb92b",
  "name": "GetTopicFromToLearn",
  "type": "n8n-nodes-base.formTrigger",
  "position": [
    -340,
    560
  ],
  "webhookId": "4524d82f-86a6-4fab-ba09-1d24001e15f3",
  "parameters": {
    "options": {
      "path": "learn",
      "buttonLabel": "Submit",
      "respondWithOptions": {
        "values": {
          "formSubmittedText": "We'll shortly send you an email with top recommendations."
        }
      }
    },
    "formTitle": "What do You want to learn ?",
    "formFields": {
      "values": [
        {
          "fieldLabel": "I want to learn",
          "placeholder": "Python, DevOps, Ai, or just about anything"
        },
        {
          "fieldType": "email",
          "fieldLabel": "What's your email ?",
          "placeholder": "john.doe@example.com",
          "requiredField": true
        }
      ]
    },
    "formDescription": "We'll find the best resources from HackerNews and send you an email"
  },
  "typeVersion": 2.2
}

================ Node #2309 ================
{
  "id": "72fcb7f3-6706-47cc-8a79-364b325aa8ae",
  "name": "SendEmailWithTopResources",
  "type": "n8n-nodes-base.emailSend",
  "position": [
    1320,
    560
  ],
  "parameters": {
    "html": "=FYI, We read through {{ $('SplitOutChildrenIDs').all().length }} comments in search for the best.\n\n{{ $json.data }}",
    "options": {},
    "subject": "=Here are Top HN Recommendations for Learning {{ $('GetTopicFromToLearn').item.json[\"I want to learn\"] }}",
    "toEmail": "={{ $('GetTopicFromToLearn').item.json[\"What's your email ?\"] }}",
    "fromEmail": "allsmallnocaps@gmail.com"
  },
  "credentials": {
    "smtp": {
      "id": "knhWxmnfY16ZQwBm",
      "name": "allsamll Gmail SMTP account"
    }
  },
  "typeVersion": 2.1
}

================ Node #2310 ================
{
  "id": "b4d50b42-9e40-46b0-a411-90210b422de3",
  "name": "Convert2HTML",
  "type": "n8n-nodes-base.markdown",
  "position": [
    1100,
    560
  ],
  "parameters": {
    "mode": "markdownToHtml",
    "options": {},
    "markdown": "={{ $json.text }}"
  },
  "typeVersion": 1
}

================ Node #2311 ================
{
  "id": "b79e867a-ea3b-4a94-9809-b5a01ee2820f",
  "name": "Finished",
  "type": "n8n-nodes-base.noOp",
  "position": [
    1540,
    560
  ],
  "parameters": {},
  "typeVersion": 1
}

================ Node #2312 ================
{
  "id": "94dd7f48-0013-4fb5-89c4-826ecd7f2d66",
  "name": "Gmail Trigger",
  "type": "n8n-nodes-base.gmailTrigger",
  "position": [
    1460,
    120
  ],
  "parameters": {
    "simple": false,
    "filters": {},
    "options": {},
    "pollTimes": {
      "item": [
        {
          "mode": "everyMinute"
        }
      ]
    }
  },
  "credentials": {
    "gmailOAuth2": {
      "id": "kkhNhqKpZt6IUZd0",
      "name": "Gmail"
    }
  },
  "typeVersion": 1.2
}

================ Node #2313 ================
{
  "id": "ca2023fa-ceca-4923-80e4-a3843803536c",
  "name": "Microsoft Outlook Trigger",
  "type": "n8n-nodes-base.microsoftOutlookTrigger",
  "disabled": true,
  "position": [
    1480,
    680
  ],
  "parameters": {
    "fields": [
      "body",
      "toRecipients",
      "subject",
      "bodyPreview"
    ],
    "output": "fields",
    "filters": {},
    "options": {},
    "pollTimes": {
      "item": [
        {
          "mode": "everyMinute"
        }
      ]
    }
  },
  "credentials": {
    "microsoftOutlookOAuth2Api": {
      "id": "vTCK0oVQ0WjFrI5H",
      "name": " Outlook Credential"
    }
  },
  "typeVersion": 1
}

================ Node #2314 ================
{
  "id": "1f011214-91a0-4cfa-9d9e-29864937c0a3",
  "name": "Screenshot HTML",
  "type": "n8n-nodes-base.httpRequest",
  "position": [
    2620,
    420
  ],
  "parameters": {
    "url": "https://hcti.io/v1/image",
    "method": "POST",
    "options": {},
    "sendBody": true,
    "sendQuery": true,
    "authentication": "genericCredentialType",
    "bodyParameters": {
      "parameters": [
        {
          "name": "html",
          "value": "={{ $('Set Email Variables').item.json.htmlBody }}"
        }
      ]
    },
    "genericAuthType": "httpBasicAuth",
    "queryParameters": {
      "parameters": [
        {}
      ]
    }
  },
  "credentials": {
    "httpBasicAuth": {
      "id": "8tm8mUWmPvtmPFPk",
      "name": "hcti.io"
    }
  },
  "typeVersion": 4.2
}

================ Node #2315 ================
{
  "id": "64f4789f-9de8-414f-af62-ddc339f0d0ac",
  "name": "Retrieve Screenshot",
  "type": "n8n-nodes-base.httpRequest",
  "position": [
    2800,
    420
  ],
  "parameters": {
    "url": "={{ $json.url }}",
    "options": {},
    "authentication": "genericCredentialType",
    "genericAuthType": "httpBasicAuth"
  },
  "credentials": {
    "httpBasicAuth": {
      "id": "8tm8mUWmPvtmPFPk",
      "name": "hcti.io"
    }
  },
  "typeVersion": 4.2
}

================ Node #2316 ================
{
  "id": "db707bd9-6abc-4ab7-8ffa-ad25c5e8adc4",
  "name": "Set Outlook Variables",
  "type": "n8n-nodes-base.set",
  "position": [
    2040,
    680
  ],
  "parameters": {
    "options": {},
    "assignments": {
      "assignments": [
        {
          "id": "38bd3db2-1a8d-4c40-a2dd-336e0cc84224",
          "name": "htmlBody",
          "type": "string",
          "value": "={{ $('Microsoft Outlook Trigger').item.json.body.content }}"
        },
        {
          "id": "13bdd95b-ef02-486e-b38b-d14bd05a4a8a",
          "name": "headers",
          "type": "string",
          "value": "={{ $json}}"
        },
        {
          "id": "20566ad4-7eb7-42b1-8a0d-f8b759610f10",
          "name": "subject",
          "type": "string",
          "value": "={{ $('Microsoft Outlook Trigger').item.json.subject }}"
        },
        {
          "id": "7171998f-a5a2-4e23-946a-9c1ad75710e7",
          "name": "recipient",
          "type": "string",
          "value": "={{ $('Microsoft Outlook Trigger').item.json.toRecipients[0].emailAddress.address }}"
        },
        {
          "id": "cc262634-2470-4524-8319-abe2518a6335",
          "name": "textBody",
          "type": "string",
          "value": "={{ $('Retrieve Headers of Email').item.json.body.content }}"
        }
      ]
    }
  },
  "typeVersion": 3.4
}

================ Node #2317 ================
{
  "id": "7a3622c0-6949-4ea3-ae13-46a1ee26de7b",
  "name": "Set Gmail Variables",
  "type": "n8n-nodes-base.set",
  "position": [
    2020,
    120
  ],
  "parameters": {
    "options": {},
    "assignments": {
      "assignments": [
        {
          "id": "38bd3db2-1a8d-4c40-a2dd-336e0cc84224",
          "name": "htmlBody",
          "type": "string",
          "value": "={{ $json.html }}"
        },
        {
          "id": "18fbcf78-6d3c-4036-b3a2-fb5adf22176a",
          "name": "headers",
          "type": "string",
          "value": "={{ $json.headers }}"
        },
        {
          "id": "1d690098-be2a-4604-baf8-62f314930929",
          "name": "subject",
          "type": "string",
          "value": "={{ $json.subject }}"
        },
        {
          "id": "8009f00a-547f-4eb1-b52d-2e7305248885",
          "name": "recipient",
          "type": "string",
          "value": "={{ $json.to.text }}"
        },
        {
          "id": "1932e97d-b03b-4964-b8bc-8262aaaa1f7a",
          "name": "textBody",
          "type": "string",
          "value": "={{ $json.text }}"
        }
      ]
    }
  },
  "typeVersion": 3.4
}

================ Node #2318 ================
{
  "id": "4b4c6b34-f74c-4402-91a1-4d002e02a3bd",
  "name": "Retrieve Headers of Email",
  "type": "n8n-nodes-base.httpRequest",
  "position": [
    1700,
    680
  ],
  "parameters": {
    "url": "=https://graph.microsoft.com/v1.0/me/messages/{{ $json.id }}?$select=internetMessageHeaders,body",
    "options": {},
    "sendHeaders": true,
    "authentication": "predefinedCredentialType",
    "headerParameters": {
      "parameters": [
        {
          "name": "Accept",
          "value": "application/json"
        },
        {
          "name": "Prefer",
          "value": "outlook.body-content-type=\"text\""
        }
      ]
    },
    "nodeCredentialType": "microsoftOutlookOAuth2Api"
  },
  "credentials": {
    "microsoftOutlookOAuth2Api": {
      "id": "vTCK0oVQ0WjFrI5H",
      "name": " Outlook Credential"
    }
  },
  "typeVersion": 4.2
}

================ Node #2319 ================
{
  "id": "0c9883b5-3eb7-45db-9803-d1b30166a3b5",
  "name": "Format Headers",
  "type": "n8n-nodes-base.code",
  "position": [
    1880,
    680
  ],
  "parameters": {
    "jsCode": "const input = $('Retrieve Headers of Email').item.json.internetMessageHeaders;\n\nconst result = input.reduce((acc, { name, value }) => {\n if (!acc[name]) acc[name] = [];\n acc[name].push(value);\n return acc;\n}, {});\n\nreturn result;"
  },
  "typeVersion": 2
}

================ Node #2320 ================
{
  "id": "c21a976c-00e5-4823-bd94-4c95a7d60438",
  "name": "Analyze Email with ChatGPT",
  "type": "@n8n/n8n-nodes-langchain.openAi",
  "position": [
    3000,
    420
  ],
  "parameters": {
    "modelId": {
      "__rl": true,
      "mode": "list",
      "value": "gpt-4o",
      "cachedResultName": "GPT-4O"
    },
    "options": {},
    "messages": {
      "values": [
        {
          "content": "=Describe the following email using the HTML body and headers. Determine if the email could be a phishing email. \n\nHere is the HTML body:\n{{ $('Set Email Variables').item.json.htmlBody }}\n\nThe message headers are as follows:\n{{ $('Set Email Variables').item.json.headers }}\n\n"
        },
        {
          "role": "system",
          "content": "Please make sure to output all responses using the following structured JSON output:\n{\n \"malicious\": false,\n \"summary\": \"The email appears to be a legitimate communication from a known sender. It contains no suspicious links, attachments, or language that indicates phishing or malicious intent.\"\n}\n\nFormat the response for Jira who uses a wiki-style renderer. Do not include ``` around your response. Make the summary as verbose as possible including a full breakdown of why the email is benign or malicious."
        }
      ]
    },
    "jsonOutput": true
  },
  "credentials": {
    "openAiApi": {
      "id": "76",
      "name": "OpenAi account"
    }
  },
  "typeVersion": 1.6
}

================ Node #2321 ================
{
  "id": "a91f4095-9245-4276-b21f-f415de22df62",
  "name": "Create Potentially Malicious Ticket",
  "type": "n8n-nodes-base.jira",
  "position": [
    3640,
    400
  ],
  "parameters": {
    "project": {
      "__rl": true,
      "mode": "list",
      "value": "10001",
      "cachedResultName": "Support"
    },
    "summary": "=Potentially Malicious - Phishing Email Reported: \"{{ $('Set Email Variables').item.json.subject }}\"",
    "issueType": {
      "__rl": true,
      "mode": "list",
      "value": "10008",
      "cachedResultName": "Task"
    },
    "additionalFields": {
      "description": "=A phishing email was reported by {{ $('Set Email Variables').item.json.recipient }} with the subject line \"{{ $('Set Email Variables').item.json.subject }}\"\n\\\\\nh2. Here is ChatGPT's analysis of the email:\n{{ $json.message.content.summary }}"
    }
  },
  "credentials": {
    "jiraSoftwareCloudApi": {
      "id": "BZmmGUrNIsgM9fDj",
      "name": "New Jira Cloud"
    }
  },
  "typeVersion": 1
}

================ Node #2322 ================
{
  "id": "a5a66a0e-9d8a-45a9-b1ae-aec78ddfec27",
  "name": "Create Potentially Benign Ticket",
  "type": "n8n-nodes-base.jira",
  "position": [
    3640,
    580
  ],
  "parameters": {
    "project": {
      "__rl": true,
      "mode": "list",
      "value": "10001",
      "cachedResultName": "Support"
    },
    "summary": "=Potentially Benign - Phishing Email Reported: \"{{ $('Set Email Variables').item.json.subject }}\"",
    "issueType": {
      "__rl": true,
      "mode": "list",
      "value": "10008",
      "cachedResultName": "Task"
    },
    "additionalFields": {
      "description": "=A phishing email was reported by {{ $('Set Email Variables').item.json.recipient }} with the subject line \"{{ $('Set Email Variables').item.json.subject }}\"\n\\\\\nh2. Here is ChatGPT's analysis of the email:\n{{ $json.message.content.summary }}"
    }
  },
  "credentials": {
    "jiraSoftwareCloudApi": {
      "id": "BZmmGUrNIsgM9fDj",
      "name": "New Jira Cloud"
    }
  },
  "typeVersion": 1
}

================ Node #2323 ================
{
  "id": "5af0d60b-d021-4dd9-98f7-b2842800764a",
  "name": "Rename Screenshot",
  "type": "n8n-nodes-base.code",
  "position": [
    4020,
    480
  ],
  "parameters": {
    "mode": "runOnceForEachItem",
    "jsCode": "$('Retrieve Screenshot').item.binary.data.fileName = 'emailScreenshot.png'\n\nreturn $('Retrieve Screenshot').item;"
  },
  "typeVersion": 2
}

================ Node #2324 ================
{
  "id": "441c4cbb-bd93-4213-bd34-e18f2a49389f",
  "name": "Set Jira ID",
  "type": "n8n-nodes-base.set",
  "position": [
    3860,
    480
  ],
  "parameters": {
    "options": {},
    "includeOtherFields": true
  },
  "typeVersion": 3.4
}

================ Node #2325 ================
{
  "id": "4c71188c-011d-4f8e-a36c-87900bfab59a",
  "name": "Upload Screenshot of Email to Jira",
  "type": "n8n-nodes-base.jira",
  "position": [
    4220,
    480
  ],
  "parameters": {
    "issueKey": "={{ $('Set Jira ID').item.json.key }}",
    "resource": "issueAttachment"
  },
  "credentials": {
    "jiraSoftwareCloudApi": {
      "id": "BZmmGUrNIsgM9fDj",
      "name": "New Jira Cloud"
    }
  },
  "typeVersion": 1
}

================ Node #2326 ================
{
  "id": "3c031c34-8306-44e1-8e0e-a584c5323112",
  "name": "Upload Email Body to Jira",
  "type": "n8n-nodes-base.jira",
  "position": [
    4620,
    480
  ],
  "parameters": {
    "issueKey": "={{ $('Set Jira ID').item.json.key }}",
    "resource": "issueAttachment"
  },
  "credentials": {
    "jiraSoftwareCloudApi": {
      "id": "BZmmGUrNIsgM9fDj",
      "name": "New Jira Cloud"
    }
  },
  "typeVersion": 1
}

================ Node #2327 ================
{
  "id": "d033dcbd-7ccb-451f-ab81-cc6d32d2e01f",
  "name": "Convert Email Body to File",
  "type": "n8n-nodes-base.convertToFile",
  "position": [
    2420,
    420
  ],
  "parameters": {
    "options": {
      "fileName": "emailBody.txt"
    },
    "operation": "toText",
    "sourceProperty": "textBody"
  },
  "typeVersion": 1.1
}

================ Node #2328 ================
{
  "id": "bda5e2fe-d8c0-456b-975a-35e82ff02816",
  "name": "Set Email Variables",
  "type": "n8n-nodes-base.set",
  "position": [
    2240,
    420
  ],
  "parameters": {
    "options": {},
    "includeOtherFields": true
  },
  "typeVersion": 3.4
}

================ Node #2329 ================
{
  "id": "54ecd8ab-ac4a-4b6b-bd1b-bf8c70082a33",
  "name": "Rename Email Body Screenshot",
  "type": "n8n-nodes-base.code",
  "position": [
    4420,
    480
  ],
  "parameters": {
    "mode": "runOnceForEachItem",
    "jsCode": "$('Convert Email Body to File').item.binary.data.fileName = 'emailBody.txt'\n\nreturn $('Convert Email Body to File').item;"
  },
  "typeVersion": 2
}

================ Node #2330 ================
{
  "id": "fe5b82cc-b4bb-4c97-9477-075d5a280e9f",
  "name": "Sticky Note2",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    2574.536755825029,
    0
  ],
  "parameters": {
    "color": 7,
    "width": 376.8280004374956,
    "height": 595.590013880477,
    "content": "![hctiapi](https://uploads.n8n.io/templates/hctiapi2.png)\n## Email Body Screenshot Creation\n\nThe **Screenshot HTML** node sends the email's HTML body to the **hcti.io** API, generating a screenshot that visually represents the email's layout. The **Retrieve Screenshot** node then fetches this image, making it available for attachment or review in subsequent steps. This dual-format processing ensures both clarity and flexibility in email analysis workflows."
  },
  "typeVersion": 1
}

================ Node #2331 ================
{
  "id": "86b21049-f65e-4c6a-a854-c4376f870da9",
  "name": "Sticky Note",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    1380,
    -149.99110983560342
  ],
  "parameters": {
    "color": 7,
    "width": 814.4556539379754,
    "height": 444.5525554815556,
    "content": "![Gmail](https://uploads.n8n.io/templates/gmail.png)\n## Gmail Integration and Data Extraction\n\nThis section of the workflow connects to a Gmail account using the **Gmail Trigger** node, capturing incoming emails in real-time, with checks performed every minute. Once an email is detected, its key components\u2014such as the subject, recipient, body, and headers\u2014are extracted and assigned to variables using the **Set Gmail Variables** node. These variables are structured for subsequent analysis and processing in later steps."
  },
  "typeVersion": 1
}

================ Node #2332 ================
{
  "id": "b1a786cf-7a8d-49e1-90ed-31f3d0e65b13",
  "name": "Sticky Note1",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    1380,
    308
  ],
  "parameters": {
    "color": 7,
    "width": 809.7918597571277,
    "height": 602.9002284617277,
    "content": "![Gmail](https://uploads.n8n.io/templates/outlook.png)\n## Microsoft Outlook Integration and Email Header Processing\n\nThis section enables the integration of Microsoft Outlook to monitor and capture incoming emails. The Microsoft Outlook Trigger node checks for new messages every minute. Once an email is detected, the Retrieve Headers of Email node fetches detailed header and body content via the Microsoft Graph API. The Format Headers node organizes the email headers into a structured format using a JavaScript function, ensuring clarity and readiness for further processing. Finally, the Set Outlook Variables node extracts and assigns key details\u2014such as the email subject, recipient, body, and formatted headers\u2014to variables for use in subsequent workflow steps. This section is essential for processing Outlook emails and preparing them for analysis and reporting.\n\n\n\n\n\n\n"
  },
  "typeVersion": 1
}

================ Node #2333 ================
{
  "id": "e7ace035-b5f5-4ef3-a117-22c7c938868d",
  "name": "Sticky Note3",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    2958.4325220284563,
    24.744924120002338
  ],
  "parameters": {
    "color": 7,
    "width": 593.0990401534098,
    "height": 573.1750519720028,
    "content": "![hctiapi](https://uploads.n8n.io/templates/openai.png)\n## AI-Powered Email Analysis and Threat Detection\n\nThis section leverages ChatGPT for advanced email content and header analysis to determine potential phishing threats. The **Analyze Email with ChatGPT** node processes the email's HTML body and headers, generating a detailed JSON response that categorizes the email as malicious or benign. The response includes a verbose explanation, formatted for Jira, outlining the reasons for the classification. The **Check if Malicious** node evaluates the AI output to determine the next steps based on the email's threat status. If flagged as malicious, subsequent actions like reporting and ticket creation are triggered. This section ensures precise, AI-driven analysis to enhance email security workflows."
  },
  "typeVersion": 1
}

================ Node #2334 ================
{
  "id": "02c1ad8e-f952-42d2-ae9f-cf3a77e49e52",
  "name": "Sticky Note4",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    3562.4948140707697,
    -125.79607719303533
  ],
  "parameters": {
    "color": 7,
    "width": 1251.7025543502837,
    "height": 891.579206098173,
    "content": "![hctiapi](https://uploads.n8n.io/templates/jira.png)\n## Automated Jira Ticket Creation and Email Attachment\n\nThis section streamlines the process of logging phishing email reports in Jira, complete with detailed analysis and attachments. The workflow creates two distinct Jira tickets depending on the AI classification of the email:\n\n1. **Potentially Malicious**: The **Create Potentially Malicious Ticket** node generates a ticket if the email is flagged as a phishing attempt, including a summary of ChatGPT's analysis and the email\u2019s details.\n2. **Potentially Benign**: If the email is classified as safe, the **Create Potentially Benign Ticket** node logs a ticket with similar details but under a non-malicious category.\n\n\nThe **Set Jira ID** node ensures the generated ticket's ID is tracked for subsequent operations. Attachments are handled efficiently:\n\n- **Rename Screenshot** prepares the email screenshot for upload.\n- **Upload Screenshot of Email to Jira** adds the screenshot to the Jira ticket for visual context.\n- **Rename Email Body Screenshot** and **Upload Email Body to Jira** manage the attachment of the email's text body as a `.txt` file.\n\n\nThis section enhances reporting by automating ticket creation, ensuring all relevant email data is readily available for review by security teams."
  },
  "typeVersion": 1
}

================ Node #2335 ================
{
  "id": "597ef23e-c61c-4e27-8c14-74ec20079c96",
  "name": "Check if Malicious",
  "type": "n8n-nodes-base.if",
  "position": [
    3400,
    420
  ],
  "parameters": {
    "options": {},
    "conditions": {
      "options": {
        "version": 2,
        "leftValue": "",
        "caseSensitive": true,
        "typeValidation": "strict"
      },
      "combinator": "and",
      "conditions": [
        {
          "id": "493f412c-5f11-4173-8940-90f5bc7f5fab",
          "operator": {
            "type": "boolean",
            "operation": "true",
            "singleValue": true
          },
          "leftValue": "={{ $json.message.content.malicious }}",
          "rightValue": ""
        }
      ]
    }
  },
  "typeVersion": 2.2
}

================ Node #2336 ================
{
  "id": "af512af9-924b-4019-bdf9-62aac9cd0dac",
  "name": "Sticky Note5",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    2200,
    39.041733604283195
  ],
  "parameters": {
    "color": 7,
    "width": 365.6458805720866,
    "height": 559.8072303111675,
    "content": "![n8n](https://uploads.n8n.io/templates/n8n.png)\n## Email Body Conversion\n\nThis section processes the email body into both text and visual formats for detailed analysis and reporting. The **Set Email Variables** node organizes the email's data, including its HTML body and text content, to prepare it for further steps. The **Convert Email Body to File** node creates a `.txt` file containing the plain text version of the email body, useful for documentation or further analysis."
  },
  "typeVersion": 1
}

================ Node #2337 ================
{
  "id": "50695e7f-3334-4124-a46e-1b3819412e26",
  "name": "OpenAI Chat Model",
  "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
  "position": [
    1260,
    560
  ],
  "parameters": {
    "model": "gpt-4o",
    "options": {
      "temperature": 0.1
    }
  },
  "credentials": {
    "openAiApi": {
      "id": "WqzqjezKh8VtxdqA",
      "name": "OpenAi account - Baptiste"
    }
  },
  "typeVersion": 1
}

================ Node #2338 ================
{
  "id": "2f07481d-3ca4-48ab-a8ff-59e9ab5c6062",
  "name": "Execute Workflow",
  "type": "n8n-nodes-base.executeWorkflow",
  "position": [
    2360,
    280
  ],
  "parameters": {
    "options": {
      "waitForSubWorkflow": true
    },
    "workflowId": {
      "__rl": true,
      "mode": "id",
      "value": "={{ $workflow.id }}"
    }
  },
  "typeVersion": 1.1
}

================ Node #2339 ================
{
  "id": "49120164-4ffc-4fe0-8ee3-4ae13bda6c8d",
  "name": "Execute \"Generate a chart\" tool",
  "type": "n8n-nodes-base.executeWorkflowTrigger",
  "position": [
    1320,
    1140
  ],
  "parameters": {},
  "typeVersion": 1
}

================ Node #2340 ================
{
  "id": "0fc6eaf9-8521-44ec-987e-73644d0cba79",
  "name": "OpenAI - Generate Chart definition with Structured Output",
  "type": "n8n-nodes-base.httpRequest",
  "position": [
    1620,
    1140
  ],
  "parameters": {
    "url": "https://api.openai.com/v1/chat/completions",
    "method": "POST",
    "options": {},
    "jsonBody": "={\n \"model\": \"gpt-4o-2024-08-06\",\n \"messages\": [\n {\n \"role\": \"system\",\n \"content\": \"Based on the user request, generate a valid Chart.js definition. Important: - Be careful with the data scale and beginatzero that all data are visible. Example if ploted data 2 and 3 on a bar chart, the baseline should be 0. - Charts colors should be different only if there are multiple datasets. - Output valid JSON. In scales, min and max are numbers. Example: `{scales:{yAxes:[{ticks:{min:0,max:3}`\"\n },\n {\n \"role\": \"user\",\n \"content\": \"**User Request**: {{ $json.user_question }} \\n **Data to visualize**: {{ $json.output.replaceAll('\\n', \" \").replaceAll('\"', \"\") }}\"\n }\n ],\n \"response_format\": {\n \"type\": \"json_schema\",\n \"json_schema\": {\n \"name\": \"chart_configuration\",\n \"description\": \"Configuration schema for Chart.js charts\",\n \"strict\": true,\n \"schema\": {\n \"type\": \"object\",\n \"properties\": {\n \"type\": {\n \"type\": \"string\",\n \"enum\": [\"bar\", \"line\", \"radar\", \"pie\", \"doughnut\", \"polarArea\", \"bubble\", \"scatter\", \"area\"]\n },\n \"data\": {\n \"type\": \"object\",\n \"properties\": {\n \"labels\": {\n \"type\": \"array\",\n \"items\": {\n \"type\": \"string\"\n }\n },\n \"datasets\": {\n \"type\": \"array\",\n \"items\": {\n \"type\": \"object\",\n \"properties\": {\n \"label\": {\n \"type\": [\"string\", \"null\"]\n },\n \"data\": {\n \"type\": \"array\",\n \"items\": {\n \"type\": \"number\"\n }\n },\n \"backgroundColor\": {\n \"type\": [\"array\", \"null\"],\n \"items\": {\n \"type\": \"string\"\n }\n },\n \"borderColor\": {\n \"type\": [\"array\", \"null\"],\n \"items\": {\n \"type\": \"string\"\n }\n },\n \"borderWidth\": {\n \"type\": [\"number\", \"null\"]\n }\n },\n \"required\": [\"data\", \"label\", \"backgroundColor\", \"borderColor\", \"borderWidth\"],\n \"additionalProperties\": false\n }\n }\n },\n \"required\": [\"labels\", \"datasets\"],\n \"additionalProperties\": false\n },\n \"options\": {\n \"type\": \"object\",\n \"properties\": {\n \"scales\": {\n \"type\": [\"object\", \"null\"],\n \"properties\": {\n \"yAxes\": {\n \"type\": \"array\",\n \"items\": {\n \"type\": [\"object\", \"null\"],\n \"properties\": {\n \"ticks\": {\n \"type\": [\"object\", \"null\"],\n \"properties\": {\n \"max\": {\n \"type\": [\"number\", \"null\"]\n },\n \"min\": {\n \"type\": [\"number\", \"null\"]\n },\n \"stepSize\": {\n \"type\": [\"number\", \"null\"]\n },\n \"beginAtZero\": {\n \"type\": [\"boolean\", \"null\"]\n }\n },\n \"required\": [\"max\", \"min\", \"stepSize\", \"beginAtZero\"],\n \"additionalProperties\": false\n },\n \"stacked\": {\n \"type\": [\"boolean\", \"null\"]\n }\n },\n \"required\": [\"ticks\", \"stacked\"],\n \"additionalProperties\": false\n }},\n \"xAxes\": {\n \"type\": [\"object\", \"null\"],\n \"properties\": {\n \"stacked\": {\n \"type\": [\"boolean\", \"null\"]\n }\n },\n \"required\": [\"stacked\"],\n \"additionalProperties\": false\n }\n },\n \"required\": [\"yAxes\", \"xAxes\"],\n \"additionalProperties\": false\n },\n \"plugins\": {\n \"type\": [\"object\", \"null\"],\n \"properties\": {\n \"title\": {\n \"type\": [\"object\", \"null\"],\n \"properties\": {\n \"display\": {\n \"type\": [\"boolean\", \"null\"]\n },\n \"text\": {\n \"type\": [\"string\", \"null\"]\n }\n },\n \"required\": [\"display\", \"text\"],\n \"additionalProperties\": false\n },\n \"legend\": {\n \"type\": [\"object\", \"null\"],\n \"properties\": {\n \"display\": {\n \"type\": [\"boolean\", \"null\"]\n },\n \"position\": {\n \"type\": [\"string\", \"null\"],\n \"enum\": [\"top\", \"left\", \"bottom\", \"right\", null]\n }\n },\n \"required\": [\"display\", \"position\"],\n \"additionalProperties\": false\n }\n },\n \"required\": [\"title\", \"legend\"],\n \"additionalProperties\": false\n }\n },\n \"required\": [\"scales\", \"plugins\"],\n \"additionalProperties\": false\n }\n },\n \"required\": [\"type\", \"data\", \"options\"],\n \"additionalProperties\": false\n}\n}\n}\n}",
    "sendBody": true,
    "sendHeaders": true,
    "specifyBody": "json",
    "authentication": "predefinedCredentialType",
    "headerParameters": {
      "parameters": [
        {
          "name": "=Content-Type",
          "value": "application/json"
        }
      ]
    },
    "nodeCredentialType": "openAiApi"
  },
  "credentials": {
    "openAiApi": {
      "id": "WqzqjezKh8VtxdqA",
      "name": "OpenAi account - Baptiste"
    }
  },
  "typeVersion": 4.2
}

================ Node #2341 ================
{
  "id": "8016a925-7b31-4a49-b5e1-56cf9b5fa7b3",
  "name": "Set response",
  "type": "n8n-nodes-base.set",
  "position": [
    1860,
    1140
  ],
  "parameters": {
    "options": {},
    "assignments": {
      "assignments": [
        {
          "id": "37512e1a-8376-4ba0-bdcd-34bb9329ae4b",
          "name": "output",
          "type": "string",
          "value": "={{ \"https://quickchart.io/chart?width=200&c=\" + encodeURIComponent($json.choices[0].message.content) }}"
        }
      ]
    }
  },
  "typeVersion": 3.4
}

================ Node #2342 ================
{
  "id": "9a2b8eca-5303-4eb0-8115-b0d81bfd1d7c",
  "name": "When chat message received",
  "type": "@n8n/n8n-nodes-langchain.chatTrigger",
  "position": [
    880,
    380
  ],
  "webhookId": "b0e681ae-e00d-450c-9300-2c2a4a0876df",
  "parameters": {
    "public": true,
    "options": {}
  },
  "typeVersion": 1.1
}

================ Node #2343 ================
{
  "id": "2a02c5ee-11e1-4559-bbfb-ea483e914e52",
  "name": "Set Text output",
  "type": "n8n-nodes-base.set",
  "position": [
    2200,
    480
  ],
  "parameters": {
    "options": {},
    "assignments": {
      "assignments": [
        {
          "id": "4283fd50-c022-4eba-9142-b3e212a4536c",
          "name": "output",
          "type": "string",
          "value": "={{ $('AI Agent').item.json.output }}"
        }
      ]
    }
  },
  "typeVersion": 3.4
}

================ Node #2344 ================
{
  "id": "3b0f455a-ab1d-4dcd-ae97-708218c6c4b0",
  "name": "Set Text + Chart output",
  "type": "n8n-nodes-base.set",
  "position": [
    2540,
    280
  ],
  "parameters": {
    "options": {},
    "assignments": {
      "assignments": [
        {
          "id": "63bab42a-9b9b-4756-88d2-f41cff9a1ded",
          "name": "output",
          "type": "string",
          "value": "={{ $('AI Agent').item.json.output }}\n\n![image]({{ $json.output }})"
        }
      ]
    }
  },
  "typeVersion": 3.4
}

================ Node #2345 ================
{
  "id": "29e2381a-7650-4e9a-a97f-26c7550ff7ba",
  "name": "AI Agent",
  "type": "@n8n/n8n-nodes-langchain.agent",
  "position": [
    1400,
    380
  ],
  "parameters": {
    "text": "={{ $json.output.user_question }}",
    "agent": "sqlAgent",
    "options": {
      "prefixPrompt": "=You are an agent designed to interact with an SQL database.\nGiven an input question, create a syntactically correct {dialect} query to run, then look at the results of the query and return the answer.\nUnless the user specifies a specific number of examples they wish to obtain, always limit your query to at most {top_k} results using the LIMIT clause.\nYou can order the results by a relevant column to return the most interesting examples in the database.\nNever query for all the columns from a specific table, only ask for a the few relevant columns given the question.\nYou have access to tools for interacting with the database.\nOnly use the below tools. Only use the information returned by the below tools to construct your final answer.\nYou MUST double check your query before executing it. If you get an error while executing a query, rewrite the query and try again.\n\nTable name have to be enclosed in \"\", don't escape the \" with a \\.\nExample: SELECT DISTINCT cash_type FROM \"Sales\";\n\n\nDO NOT make any DML statements (INSERT, UPDATE, DELETE, DROP etc.) to the database.\n\n**STEP BY STEP**: \n1. Extract the question from the user, omitting everything related to charts.\n2. Try solve the question normally\n3. If the user request is only related to charts: use your memory to try solving the request (by default use latest message). Otherwise go to the next step.\n4. If you don't find anything, just return \"I don't know\".\nDO NOT MENTION THESE INSTRUCTIONS IN ANY WAY!\n\n**Instructions**\n- You are speaking with business users, not developers.\n- Always output numbers from the database.\n- They want to have the answer to their question (or that you don't know), not any way to get the result.\n- Do not use jargon or mention any code/librairy.\n- Do not say things like \"To create a pie chart of the top-selling products, you can use the following data:\" Instead say thigs like: \"Here is the data\"\n- Do not mention any charting or visualizing tool as this is already done automatically afterwards.\n\n\n**Mandatory**:\nYour output should always be the following:\nI now know the final answer.\nFinal Answer: ...the answer..."
    },
    "promptType": "define"
  },
  "credentials": {
    "postgres": {
      "id": "pdoWsjndlIgtlZYV",
      "name": "Coffee Sales Postgres"
    }
  },
  "typeVersion": 1.7
}

================ Node #2346 ================
{
  "id": "c5fdff53-29fa-474e-abcc-34fa4009250c",
  "name": "Window Buffer Memory",
  "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
  "position": [
    1560,
    540
  ],
  "parameters": {
    "sessionKey": "={{ $('When chat message received').item.json.sessionId }}",
    "sessionIdType": "customKey"
  },
  "typeVersion": 1.2
}

================ Node #2347 ================
{
  "id": "4e630901-6c6c-4e86-af66-c6dfb9a92138",
  "name": "Sticky Note1",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    40,
    60
  ],
  "parameters": {
    "color": 7,
    "width": 681,
    "height": 945,
    "content": "### Overview \n- This workflow aims to provide data visualization capabilities to a native SQL Agent. \n- Together, they can help foster data analysis and data visualization within a team. \n- It uses the native SQL Agent that works well and adds visualization capabilities thanks to OpenAI\u2019s Structured Output and Quickchart.io. \n\n### How it works \n1. Information Extraction: \n - The Information Extractor identifies and extracts the user's question. \n - If the question includes a visualization aspect, the SQL Agent alone may not respond accurately. \n2. SQL Querying: \n - It leverages a regular SQL Agent: it connects to a database, queries it, and translates the response into a human-readable format. \n3. Chart Decision: \n - The Text Classifier determines whether the user would benefit from a chart to support the SQL Agent's response. \n4. Chart Generation: \n - If a chart is needed, the sub-workflow dynamically generates a chart and appends it to the SQL Agent\u2019s response. \n - If not, the SQL Agent\u2019s response is output as is. \n5. Calling OpenAI for Chart Definition: \n - The sub-workflow calls OpenAI via the HTTP Request node to retrieve a chart definition. \n6. Building and Returning the Chart: \n - In the \"Set Response\" node, the chart definition is appended to a Quickchart.io URL, generating the final chart image. \n - The AI Agent returns the response along with the chart. \n\n### How to use it \n- Use an existing database or create a new one. \n- For example, I've used [this Kaggle dataset](https://www.kaggle.com/datasets/ihelon/coffee-sales/versions/15?resource=download) and uploaded it to a Supabase DB. \n- Add the PostgreSQL or MySQL credentials. \n- Alternatively, you can use SQLite binary files (check [this template](https://n8n.io/workflows/2292-talk-to-your-sqlite-database-with-a-langchain-ai-agent/)). \n- Activate the workflow. \n- Start chatting with the AI SQL Agent. \n- If the Text Classifier determines a chart would be useful, it will generate one in addition to the SQL Agent's response. \n\n### Notes \n- The full Quickchart.io specifications have not been fully integrated, so there may be some glitches (e.g., radar graphs may not display properly due to size limitations). "
  },
  "typeVersion": 1
}

================ Node #2348 ================
{
  "id": "36d7b17f-c7df-4a0a-8781-626dc1edddee",
  "name": "Sticky Note",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    1260,
    800
  ],
  "parameters": {
    "color": 7,
    "width": 769,
    "height": 523,
    "content": "## Generate a Quickchart definition \n[Original template](https://n8n.io/workflows/2400-ai-agent-with-charts-capabilities-using-openai-structured-output-and-quickchart/)\n\n**HTTP Request node**\n- Send the chart query to OpenAI, with a defined JSON response format - *using HTTP Request node as it has not yet been implemented in the OpenAI nodes*\n- The JSON structure is based on ChartJS and Quickchart.io definitions, that let us create nice looking graphs.\n- The output is a JSON containing the chart definition that is passed to the next node.\n\n**Set Response node**\n- Adds the chart definition at the end of a Quickchart.io URL ([see documentation](https://quickchart.io/documentation/usage/parameters/))\n- Note that in the parameters, we specify the width to 250 in order to be properly displayed in the chart interface."
  },
  "typeVersion": 1
}

================ Node #2349 ================
{
  "id": "9ccea33b-c5d9-422e-a5b9-11efbc05ab1a",
  "name": "Sticky Note2",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    840,
    60
  ],
  "parameters": {
    "color": 7,
    "width": 888,
    "height": 646,
    "content": "### Information Extractor \n- This Information Extractor is added to extract the user's question\n- In some cases, if the question contains a visualization aspect, the SQL Agent may not responding accurately.\n\n### SQL Agent\n- This SQL Agent is connected to a Database.\n- It queries the Database for each user message.\n- In this example, the prompt has been slightly changed to address an issue with querying a Supabase DB. Feel free to change the `Prefix Prompt` to suit your needs.\n- This example uses the data from this [Kaggle dataset](https://www.kaggle.com/datasets/ihelon/coffee-sales/versions/15?resource=download)"
  },
  "typeVersion": 1
}

================ Node #2350 ================
{
  "id": "d8bf0767-faf0-4030-b325-08315188adcb",
  "name": "OpenAI Chat Model Classifier",
  "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
  "position": [
    1900,
    540
  ],
  "parameters": {
    "options": {
      "temperature": 0.2
    }
  },
  "credentials": {
    "openAiApi": {
      "id": "WqzqjezKh8VtxdqA",
      "name": "OpenAi account - Baptiste"
    }
  },
  "typeVersion": 1
}

================ Node #2351 ================
{
  "id": "4bcd676f-44f3-4242-a5fd-7cf2098a3a64",
  "name": "Sticky Note3",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    1760,
    60
  ],
  "parameters": {
    "color": 7,
    "width": 948,
    "height": 646,
    "content": "### Respond with a text only or also include a chart \n- The text classifier determines if the response from the SQL Agent would benefit from a chart\n- If it does, then it executes the subworkflow to dynamically generate a chart, and append the chart to the response from the SQL Agent\n- If it doesn't, then the SQL Agent response is directly outputted. "
  },
  "typeVersion": 1
}

================ Node #2352 ================
{
  "id": "256cb28b-0d83-4f6d-bb11-33745c9efa4a",
  "name": "Text Classifier - Chart required?",
  "type": "@n8n/n8n-nodes-langchain.textClassifier",
  "position": [
    1800,
    380
  ],
  "parameters": {
    "options": {},
    "inputText": "=**User Request**: {{ $('When chat message received').item.json.chatInput }}\n**Data to visualize**: {{ $json.output }}\n",
    "categories": {
      "categories": [
        {
          "category": "chart_required",
          "description": "If a chart can help the user understand the response (if there are multiple data to show) or if the user specifically request a chart. "
        },
        {
          "category": "chart_not_required",
          "description": "if a chart doesn't help the user understand the response (e.g a single data point that doesn't require visualization).\n\"I don't know\" does fall into this category"
        }
      ]
    }
  },
  "typeVersion": 1
}

================ Node #2353 ================
{
  "id": "6df60db5-19c0-4585-a229-b56f4b9a2b29",
  "name": "Sticky Note4",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    40,
    1020
  ],
  "parameters": {
    "color": 7,
    "width": 680,
    "height": 720,
    "content": "## Demo\n![Demo SQL Agent](https://media.licdn.com/dms/image/v2/D4E22AQERT4FEXEUncw/feedshare-shrink_800/feedshare-shrink_800/0/1731433289953?e=1741824000&v=beta&t=e6xUqjcsSq5U_NELeD-nn1mFROGYZLazkYC0eELTv5Y)"
  },
  "typeVersion": 1
}

================ Node #2354 ================
{
  "id": "a843845d-e010-4a09-ab50-e169beb67811",
  "name": "User question + Agent initial response",
  "type": "n8n-nodes-base.set",
  "position": [
    2200,
    280
  ],
  "parameters": {
    "options": {},
    "assignments": {
      "assignments": [
        {
          "id": "debab41c-da64-4999-a80f-fae06522d672",
          "name": "user_question",
          "type": "string",
          "value": "={{ $('When chat message received').item.json.chatInput }}"
        },
        {
          "id": "2b4bbf7f-9890-4ef3-9d8f-15e3a55fbfda",
          "name": "output",
          "type": "string",
          "value": "={{ $json.output }}"
        }
      ]
    }
  },
  "typeVersion": 3.4
}

================ Node #2355 ================
{
  "id": "12c9dc38-c0fe-4f4c-a101-ec1ff7ea9048",
  "name": "Information Extractor - User question",
  "type": "@n8n/n8n-nodes-langchain.informationExtractor",
  "position": [
    1060,
    380
  ],
  "parameters": {
    "text": "={{ $json.chatInput }}",
    "options": {},
    "attributes": {
      "attributes": [
        {
          "name": "user_question",
          "required": true,
          "description": "Extract the question from the user, omitting everything related to charts."
        }
      ]
    }
  },
  "typeVersion": 1
}

================ Node #2356 ================
{
  "id": "645799b0-7ddb-4acb-a95d-3b04eadff445",
  "name": "OpenAI Chat Model",
  "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
  "position": [
    1480,
    20
  ],
  "parameters": {
    "model": "gpt-4o-mini",
    "options": {}
  },
  "credentials": {
    "openAiApi": {
      "id": "8gccIjcuf3gvaoEr",
      "name": "OpenAi account"
    }
  },
  "typeVersion": 1
}

================ Node #2357 ================
{
  "id": "e2923385-2f73-439c-9d5c-5a3c560993cb",
  "name": "OpenAI Chat Model1",
  "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
  "position": [
    2040,
    420
  ],
  "parameters": {
    "model": "gpt-4o-mini",
    "options": {}
  },
  "credentials": {
    "openAiApi": {
      "id": "8gccIjcuf3gvaoEr",
      "name": "OpenAi account"
    }
  },
  "typeVersion": 1
}

================ Node #2358 ================
{
  "id": "c24728f9-73b9-45f7-9c4e-aee872c59714",
  "name": "OpenAI Chat Model3",
  "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
  "position": [
    3180,
    -80
  ],
  "parameters": {
    "model": "gpt-4o-mini",
    "options": {}
  },
  "credentials": {
    "openAiApi": {
      "id": "8gccIjcuf3gvaoEr",
      "name": "OpenAi account"
    }
  },
  "typeVersion": 1
}

================ Node #2359 ================
{
  "id": "0bc19e46-4a65-45fb-9571-d1f00d204c63",
  "name": "OpenAI Chat Model4",
  "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
  "position": [
    2060,
    -261
  ],
  "parameters": {
    "model": "gpt-4o-mini",
    "options": {}
  },
  "credentials": {
    "openAiApi": {
      "id": "8gccIjcuf3gvaoEr",
      "name": "OpenAi account"
    }
  },
  "typeVersion": 1
}

================ Node #2360 ================
{
  "id": "0c631234-125d-476b-b97a-2837d6a32f2b",
  "name": "Schedule Trigger",
  "type": "n8n-nodes-base.scheduleTrigger",
  "position": [
    -272,
    -180
  ],
  "parameters": {
    "rule": {
      "interval": [
        {}
      ]
    }
  },
  "typeVersion": 1.2
}

================ Node #2361 ================
{
  "id": "96c9931d-d286-42f8-9629-2641eaa368b9",
  "name": "Get Issue Comments",
  "type": "n8n-nodes-base.jira",
  "position": [
    748,
    -180
  ],
  "parameters": {
    "options": {},
    "issueKey": "={{ $json.key }}",
    "resource": "issueComment",
    "operation": "getAll"
  },
  "credentials": {
    "jiraSoftwareCloudApi": {
      "id": "IH5V74q6PusewNjD",
      "name": "Jira SW Cloud account"
    }
  },
  "typeVersion": 1
}

================ Node #2362 ================
{
  "id": "18a2770d-5240-4837-8837-4821f73ec560",
  "name": "Close Issue",
  "type": "n8n-nodes-base.jira",
  "position": [
    2660,
    -741
  ],
  "parameters": {
    "issueKey": "={{ $('Get Issue Metadata').item.json.key }}",
    "operation": "update",
    "updateFields": {
      "statusId": {
        "__rl": true,
        "mode": "list",
        "value": "31",
        "cachedResultName": "Done"
      }
    }
  },
  "credentials": {
    "jiraSoftwareCloudApi": {
      "id": "IH5V74q6PusewNjD",
      "name": "Jira SW Cloud account"
    }
  },
  "typeVersion": 1
}

================ Node #2363 ================
{
  "id": "83e81448-26c7-4c29-a17a-409c53e05881",
  "name": "Send Reminder",
  "type": "n8n-nodes-base.jira",
  "position": [
    3500,
    -220
  ],
  "parameters": {
    "comment": "={{ $json.text }}\n(this is an automated message)",
    "options": {},
    "issueKey": "={{ $('Get Issue Metadata').item.json.key }}",
    "resource": "issueComment"
  },
  "credentials": {
    "jiraSoftwareCloudApi": {
      "id": "IH5V74q6PusewNjD",
      "name": "Jira SW Cloud account"
    }
  },
  "typeVersion": 1
}

================ Node #2364 ================
{
  "id": "5fed9245-4af9-4de7-b021-750d2ba39e63",
  "name": "Join Comments",
  "type": "n8n-nodes-base.aggregate",
  "position": [
    928,
    -180
  ],
  "parameters": {
    "options": {},
    "aggregate": "aggregateAllItemData"
  },
  "typeVersion": 1
}

================ Node #2365 ================
{
  "id": "34712dd3-0348-4709-8a68-07279242910c",
  "name": "Add Autoclose Message",
  "type": "n8n-nodes-base.jira",
  "position": [
    2460,
    -561
  ],
  "parameters": {
    "comment": "=Autoclosing due to inactivity. Please create a new ticket if you require additional support. Thank you!\n(this is an automated message)",
    "options": {},
    "issueKey": "={{ $('Get Issue Metadata').item.json.key }}",
    "resource": "issueComment"
  },
  "credentials": {
    "jiraSoftwareCloudApi": {
      "id": "IH5V74q6PusewNjD",
      "name": "Jira SW Cloud account"
    }
  },
  "typeVersion": 1
}

================ Node #2366 ================
{
  "id": "c43a3b66-838b-4970-a85f-dc0370437388",
  "name": "Ask For Feedback Message",
  "type": "n8n-nodes-base.jira",
  "position": [
    2460,
    -741
  ],
  "parameters": {
    "comment": "=[~accountid:{{ $('Get Issue Metadata').item.json.reporter_accountId }}]\n\nWe think the issue is resolved so we're autoclosing it. If you've been satisified with our service, please leave us a 5 start review here: [link](link/to/review_site)\n\nPlease feel free to create another ticket if you need further assistance.\n(this is an automated message)",
    "options": {},
    "issueKey": "={{ $('Get Issue Metadata').item.json.key }}",
    "resource": "issueComment"
  },
  "credentials": {
    "jiraSoftwareCloudApi": {
      "id": "IH5V74q6PusewNjD",
      "name": "Jira SW Cloud account"
    }
  },
  "typeVersion": 1
}

================ Node #2367 ================
{
  "id": "3223ce45-9e5e-471c-9015-75e9f28088e9",
  "name": "Simplify Thread For AI",
  "type": "n8n-nodes-base.set",
  "position": [
    1108,
    -180
  ],
  "parameters": {
    "options": {},
    "assignments": {
      "assignments": [
        {
          "id": "f65c5971-c90d-47f2-823f-37fd03d8e9c7",
          "name": "thread",
          "type": "array",
          "value": "={{\n$json.data.map(comment => {\n const { accountId, displayName } = comment.author;\n\n const message = comment.body.content.map(item =>\n `<${item.type}>${item.content\n .filter(c => c.text || c.content)\n .map(c => c.content\n ? c.content\n .filter(cc => c.text || c.content)\n .map(cc => cc.text)\n .join(' ')\n : c.text\n )}</${item.type}>`\n ).join('');\n return `${displayName} (accountId: ${accountId}) says: ${message}`;\n})\n\n}}"
        },
        {
          "id": "7b98b2db-3417-472f-bea2-a7aebe30184c",
          "name": "topic",
          "type": "string",
          "value": "={{\n[\n `title: ${$('Get Issue Metadata').item.json.title}`,\n `original message: ${$('Get Issue Metadata').item.json.description.replaceAll(/\\n/g, ' ')}`,\n `reported by: ${$('Get Issue Metadata').item.json.reporter}`\n].join('\\n')\n}}"
        }
      ]
    }
  },
  "typeVersion": 3.4
}

================ Node #2368 ================
{
  "id": "e6f91099-1fe6-4930-8dda-b19330edb599",
  "name": "Solution Found?",
  "type": "n8n-nodes-base.if",
  "position": [
    2440,
    220
  ],
  "parameters": {
    "options": {},
    "conditions": {
      "options": {
        "version": 2,
        "leftValue": "",
        "caseSensitive": true,
        "typeValidation": "strict"
      },
      "combinator": "and",
      "conditions": [
        {
          "id": "0e71783b-3072-421a-852c-58940d0dd7cd",
          "operator": {
            "type": "boolean",
            "operation": "true",
            "singleValue": true
          },
          "leftValue": "={{ $json.output.solution_found }}",
          "rightValue": ""
        }
      ]
    }
  },
  "typeVersion": 2.2
}

================ Node #2369 ================
{
  "id": "696348a5-c955-47eb-ab44-f56652587944",
  "name": "Reply to Issue",
  "type": "n8n-nodes-base.jira",
  "position": [
    2760,
    220
  ],
  "parameters": {
    "comment": "=Hey there!\n{{ $('KnowledgeBase Agent').item.json.output.response }}\nWe'll close this issue now but feel free to create a new one if needed.\n(this is an automated message)",
    "options": {},
    "issueKey": "={{ $('Get Issue Metadata').item.json.key }}",
    "resource": "issueComment"
  },
  "credentials": {
    "jiraSoftwareCloudApi": {
      "id": "IH5V74q6PusewNjD",
      "name": "Jira SW Cloud account"
    }
  },
  "typeVersion": 1
}

================ Node #2370 ================
{
  "id": "4d4562c7-f5ed-44b8-9292-9c1a75d51173",
  "name": "Last Message is Not Bot",
  "type": "n8n-nodes-base.if",
  "position": [
    3000,
    -220
  ],
  "parameters": {
    "options": {},
    "conditions": {
      "options": {
        "version": 2,
        "leftValue": "",
        "caseSensitive": true,
        "typeValidation": "strict"
      },
      "combinator": "and",
      "conditions": [
        {
          "id": "6e07d5dc-01b2-4735-8fc1-983fc57dfaaf",
          "operator": {
            "type": "boolean",
            "operation": "true",
            "singleValue": true
          },
          "leftValue": "={{ !$('Simplify Thread For AI').item.json.thread.last().includes('this is an automated message') }}",
          "rightValue": ""
        }
      ]
    }
  },
  "typeVersion": 2.2
}

================ Node #2371 ================
{
  "id": "e1ca19da-c030-478b-a488-dcb08d9be97e",
  "name": "Structured Output Parser",
  "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
  "position": [
    2400,
    420
  ],
  "parameters": {
    "schemaType": "manual",
    "inputSchema": "{\n\t\"type\": \"object\",\n\t\"properties\": {\n\t\t\"solution_found\": {\n\t\t\t\"type\": \"boolean\"\n\t\t},\n \"short_summary_of_issue\": {\n \"type\": \"string\"\n },\n\t\t\"response\": {\n\t\t\t\"type\": \"string\"\n\t\t}\n\t}\n}"
  },
  "typeVersion": 1.2
}

================ Node #2372 ================
{
  "id": "596ef421-beb0-4523-a313-3f6ccd9e8f0c",
  "name": "Get Issue Metadata",
  "type": "n8n-nodes-base.set",
  "position": [
    568,
    -180
  ],
  "parameters": {
    "options": {},
    "assignments": {
      "assignments": [
        {
          "id": "200706ea-6936-48ae-a46c-38d6e2eff558",
          "name": "key",
          "type": "string",
          "value": "={{ $json.key }}"
        },
        {
          "id": "3e3584bf-dc5c-408a-896c-1660710860f6",
          "name": "title",
          "type": "string",
          "value": "={{ $json.fields.summary }}"
        },
        {
          "id": "e1d89014-5e07-4752-9e7c-ae8d4cba6f6e",
          "name": "url",
          "type": "string",
          "value": "={{\n[\n 'https:/',\n $json.self.extractDomain(),\n 'browse',\n $json.key\n ].join('/')\n}}"
        },
        {
          "id": "df1cca88-1c57-475d-968e-999f6c25dba7",
          "name": "date",
          "type": "string",
          "value": "={{ DateTime.fromISO($json.fields.created).format('yyyy-MM-dd') }}"
        },
        {
          "id": "7fc9c625-e741-43bb-9223-b8024fc86cc7",
          "name": "reporter",
          "type": "string",
          "value": "={{ $json.fields.reporter.displayName }}"
        },
        {
          "id": "17bf06ae-fcad-4eb3-add8-11ac85e9a68e",
          "name": "reporter_url",
          "type": "string",
          "value": "={{\n[\n 'https:/',\n $json.fields.reporter.self.extractDomain(),\n 'jira',\n 'people',\n $json.fields.reporter.accountId\n ].join('/')\n}}"
        },
        {
          "id": "7624642f-f76b-41ec-b402-280b64d46400",
          "name": "reporter_accountId",
          "type": "string",
          "value": "={{ $json.fields.reporter.accountId }}"
        },
        {
          "id": "0fa1d73f-4e8b-435b-a78d-37e95c85c87c",
          "name": "description",
          "type": "string",
          "value": "={{ $json.fields.description }}"
        }
      ]
    }
  },
  "typeVersion": 3.4
}

================ Node #2373 ================
{
  "id": "23bb0cf8-c682-416c-a809-e9ca6fc480ef",
  "name": "Notify Slack Channel",
  "type": "n8n-nodes-base.slack",
  "position": [
    2600,
    380
  ],
  "parameters": {
    "select": "channel",
    "blocksUi": "={{\n{\n\t\"blocks\": [\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"text\": {\n\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\"text\": \"Hey there \ud83d\udc4b\\nI found a zombie ticket that no one has taken a look at yet.\"\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"text\": {\n\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\"text\": `*[${$('Get Issue Metadata').item.json.key}] ${$('Get Issue Metadata').item.json.title}*\\n${$('KnowledgeBase Agent').item.json.output.short_summary_of_issue}\\n\ud83d\udc64 <${$('Get Issue Metadata').item.json.reporter_url}|${$('Get Issue Metadata').item.json.reporter}> \ud83d\udcc5 ${$('Get Issue Metadata').item.json.date} \ud83d\udd17 <${$('Get Issue Metadata').item.json.url}|Link to Issue>\\n`\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"divider\"\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"text\": {\n\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\"text\": \"I couldn't find an answer in the knowledgebase so I've notified the user and closed the ticket. Thanks!\"\n\t\t\t}\n\t\t}\n\t]\n}\n}}",
    "channelId": {
      "__rl": true,
      "mode": "list",
      "value": "C07S0NQ04D7",
      "cachedResultName": "n8n-jira"
    },
    "messageType": "block",
    "otherOptions": {}
  },
  "credentials": {
    "slackApi": {
      "id": "VfK3js0YdqBdQLGP",
      "name": "Slack account"
    }
  },
  "typeVersion": 2.2
}

================ Node #2374 ================
{
  "id": "21076f8f-8462-4a5a-8831-709a138639c5",
  "name": "Close Issue2",
  "type": "n8n-nodes-base.jira",
  "position": [
    2920,
    220
  ],
  "parameters": {
    "issueKey": "={{ $('Get Issue Metadata').item.json.key }}",
    "operation": "update",
    "updateFields": {
      "statusId": {
        "__rl": true,
        "mode": "list",
        "value": "31",
        "cachedResultName": "Done"
      }
    }
  },
  "credentials": {
    "jiraSoftwareCloudApi": {
      "id": "IH5V74q6PusewNjD",
      "name": "Jira SW Cloud account"
    }
  },
  "typeVersion": 1
}

================ Node #2375 ================
{
  "id": "6c9b30c5-d061-4b4d-b4fa-596ca0768297",
  "name": "Get List of Unresolved Long Lived Issues",
  "type": "n8n-nodes-base.jira",
  "position": [
    -72,
    -180
  ],
  "parameters": {
    "limit": 10,
    "options": {
      "jql": "status IN (\"To Do\", \"In Progress\") AND created <= -7d"
    },
    "operation": "getAll"
  },
  "credentials": {
    "jiraSoftwareCloudApi": {
      "id": "IH5V74q6PusewNjD",
      "name": "Jira SW Cloud account"
    }
  },
  "typeVersion": 1
}

================ Node #2376 ================
{
  "id": "1c6c2919-c48b-47bb-a975-f184bd9e95dd",
  "name": "Sticky Note1",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    -337.3183708039286,
    -425.6402206027777
  ],
  "parameters": {
    "color": 7,
    "width": 640.6500163735489,
    "height": 484.114789072283,
    "content": "## 1. Search For Unresolved Long-lived JIRA Issues\n[Learn more about the JIRA node](https://docs.n8n.io/integrations/builtin/app-nodes/n8n-nodes-base.jira)\n\nIn this demonstration, we'll define \"long-lived\" as any issue which is unresolved after 7 days. Adjust to fit your own criteria.\n\nWe'll also use the Execute Workflow node to run the issues separate in parallel. This is a performance optimisation and if not required, the alternative is to use a loop node instead."
  },
  "typeVersion": 1
}

================ Node #2377 ================
{
  "id": "f21d95a7-0cef-4110-a3b9-59c562b2ea24",
  "name": "Execute Workflow",
  "type": "n8n-nodes-base.executeWorkflow",
  "position": [
    128,
    -180
  ],
  "parameters": {
    "mode": "each",
    "options": {},
    "workflowId": {
      "__rl": true,
      "mode": "id",
      "value": "={{ $workflow.id }}"
    }
  },
  "typeVersion": 1.1
}

================ Node #2378 ================
{
  "id": "e9f9e6e6-c66d-4e50-b4d4-3931b8cf40c9",
  "name": "Execute Workflow Trigger",
  "type": "n8n-nodes-base.executeWorkflowTrigger",
  "position": [
    388,
    -180
  ],
  "parameters": {},
  "typeVersion": 1
}

================ Node #2379 ================
{
  "id": "91b5e024-6141-47e8-99ff-9ac25df7df48",
  "name": "Sticky Note2",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    320,
    -353.43597793972225
  ],
  "parameters": {
    "color": 7,
    "width": 956.5422324510927,
    "height": 411.91054640922755,
    "content": "## 2. Retrieves and Combine JIRA Issue Comments\n[Learn more about the JIRA node](https://docs.n8n.io/integrations/builtin/app-nodes/n8n-nodes-base.jira)\n\nTo provide the necessary information for our AI agents, we'll fetch and combine all the issue's comments along with our issue. This gives a accurate history of the the issues progress (or lack thereof!)."
  },
  "typeVersion": 1
}

================ Node #2380 ================
{
  "id": "9b545aa8-d2df-4500-8af0-ee55b0fcc736",
  "name": "Sticky Note3",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    1300,
    -381.8893508540474
  ],
  "parameters": {
    "color": 7,
    "width": 653.0761795166852,
    "height": 583.0290516595711,
    "content": "## 3. Classify the Current State of the Issue\n[Learn more about the Text Classifier node](https://docs.n8n.io/integrations/builtin/cluster-nodes/root-nodes/n8n-nodes-langchain.text-classifier)\n\nToday's AI/LLMs are well suited for solving contextual problems like determining issue state. Here, we can use the text classifier node to analyse the issue as a whole to determine our next move. Almost like a really, really smart Switch node!\n\nThere are 3 branches we want to take: Check if a resolution was reached, blocked issues and auto-resolving when no team member has yet to respond."
  },
  "typeVersion": 1
}

================ Node #2381 ================
{
  "id": "abe0da8f-4107-4641-b992-1a31f71ce530",
  "name": "Sticky Note4",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    1980,
    -820
  ],
  "parameters": {
    "color": 7,
    "width": 896.1509781357872,
    "height": 726.4699654775604,
    "content": "## 4. Sentiment Analysis on Issue Resolution\n[Read more about the Sentiment Analysis node](https://docs.n8n.io/integrations/builtin/cluster-nodes/root-nodes/n8n-nodes-langchain.sentimentanalysis)\n\nThe Sentiment Analysis node is a convenient method of assessing\ncustomer satisfaction from resolved issues. Here, when resolution\nis detected as positive, we can ask use the opportunity to\ncapitalise of the favourable experience which in this example,\nis to ask for a review. In the opposite vein, if the exchange has\nbeen negative, we can escalate in an attempt to improve\nthe situation before closing the ticket.\n\nAI can equip teams to provide unrivalled customer support\nwhich can differentiate themselves significantly against\nthe competition."
  },
  "typeVersion": 1
}

================ Node #2382 ================
{
  "id": "d9c97501-e2cf-4a7e-86cc-c295d69db939",
  "name": "Customer Satisfaction Agent",
  "type": "@n8n/n8n-nodes-langchain.sentimentAnalysis",
  "position": [
    2060,
    -400
  ],
  "parameters": {
    "options": {},
    "inputText": "=issue:\n{{ $('Simplify Thread For AI').item.json.topic }}\n\ncomments:\n{{ $('Simplify Thread For AI').item.json.thread.join('\\n') }}"
  },
  "typeVersion": 1
}

================ Node #2383 ================
{
  "id": "2829d591-8347-4683-be10-663872c08546",
  "name": "Sticky Note5",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    1980,
    -60
  ],
  "parameters": {
    "color": 7,
    "width": 1120.504487917144,
    "height": 675.5857025907994,
    "content": "## 5. Attempt to Resolve The Issue With KnowledgeBase\n[Read more about the AI Agent node](https://docs.n8n.io/integrations/builtin/cluster-nodes/root-nodes/n8n-nodes-langchain.agent/)\n\nWhen the issue is unaddressed, we can attempt to resolve the issue automatically using AI. Here an AI agent can easily be deployed with\naccess to knowledge tools to research and generate solutions for the user. Since n8n v1.62.1, AI Tools Agents can attach nodes directly as\ntools providing a very easy way to linking documents to the LLM.\n\nHere, we use both the JIRA tool to search for similar issues and the notion tool to query for product pages. If a solution can be generated,\nwe create a new comment with the solution and attach it to the issue. If not, then we can leave a simple message notifying the user that we could not do so. Finally, we close the issue as no further action can likely be taken in this case."
  },
  "typeVersion": 1
}

================ Node #2384 ================
{
  "id": "112c9fd3-c104-4a68-8e58-96a317fef854",
  "name": "KnowledgeBase Agent",
  "type": "@n8n/n8n-nodes-langchain.agent",
  "position": [
    2060,
    220
  ],
  "parameters": {
    "text": "=issue:\n{{ $('Simplify Thread For AI').item.json.topic }}\n\ncomments:\n{{ $('Simplify Thread For AI').item.json.thread.join('\\n') }}",
    "options": {
      "systemMessage": "Help the user answer their question using the company's knowledgebase. Your answer must be based factually on documents retrieved from the knowledge. If no relevant information is found or the information is insufficent to answer the user's query, you must tell the user so and not mislead the user. If you don't know the answer, it is okay to say you don't know."
    },
    "promptType": "define",
    "hasOutputParser": true
  },
  "typeVersion": 1.6
}

================ Node #2385 ================
{
  "id": "c27e0679-29a0-45d7-ada7-9727975b5069",
  "name": "Sticky Note6",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    2900,
    -421.245651256349
  ],
  "parameters": {
    "color": 7,
    "width": 801.0347525891818,
    "height": 507.581094640126,
    "content": "## 6. Notify for Unanswered Questions or Response Waiting\n[Read more about the Basic LLM Chain node](https://docs.n8n.io/integrations/builtin/cluster-nodes/root-nodes/n8n-nodes-langchain.chainllm/)\n\nIn this step, where signals indicate that the issue is not yet ready to be close, we can try to re-engage issue participants by summarize the conversation so far and sending a reminder comment for any pending actions that were requested. This action can help reduce the number of issues which linger for too long."
  },
  "typeVersion": 1
}

================ Node #2386 ================
{
  "id": "0a7da82e-789b-401c-80d0-de3ade51942c",
  "name": "Issue Reminder Agent",
  "type": "@n8n/n8n-nodes-langchain.chainLlm",
  "position": [
    3180,
    -220
  ],
  "parameters": {
    "text": "=issue:\n{{ $('Simplify Thread For AI').item.json.topic }}\n\ncomments:\n{{ $('Simplify Thread For AI').item.json.thread }}",
    "messages": {
      "messageValues": [
        {
          "message": "=The user has a pending issue and some time has passed since the last update. Analyse the last message in this thread and generate a short reminder message to add to the issue comments which summarizes and reiterates what pending action or information is required. Return only the message."
        }
      ]
    },
    "promptType": "define"
  },
  "typeVersion": 1.4
}

================ Node #2387 ================
{
  "id": "2847136e-b95b-4906-89af-ceb180abb9b0",
  "name": "Sticky Note",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    -820,
    -560
  ],
  "parameters": {
    "width": 454.99286536248565,
    "height": 619.151728428442,
    "content": "## Try It Out!\n\n### This n8n template is designed to assist and improve customer support team member capacity by automating the resolution of long-lived and forgotten JIRA issues.\n\n* Schedule Trigger runs daily to check for long-lived unresolved issues and imports them into the workflow.\n* Each Issue is handled as a separate subworkflow by using an execute workflow node. This allows parallel processing.\n* A report is generated from the issue using its comment history allowing the issue to be classified by AI - determining the state and progress of the issue.\n* If determined to be resolved, sentiment analysis is performed to track customer satisfaction. If negative, a slack message is sent to escalate, otherwise the issue is closed automatically.\n* If no response has been initiated, an AI agent will attempt to search and resolve the issue itself using similar resolved issues or from the notion database. If a solution is found, it is posted to the issue and closed.\n* If the issue is blocked and waiting for responses, then a reminder message is added.\n\n### Need Help?\nJoin the [Discord](https://discord.com/invite/XPKeKXeB7d) or ask in the [Forum](https://community.n8n.io/)!"
  },
  "typeVersion": 1
}

================ Node #2388 ================
{
  "id": "9edb0847-5dcf-4357-a1d4-537a126e277b",
  "name": "Find Simlar Issues",
  "type": "n8n-nodes-base.jiraTool",
  "position": [
    2160,
    420
  ],
  "parameters": {
    "limit": 4,
    "options": {
      "jql": "=text ~ \"{{ $fromAI('title', 'the title of the current issue', 'string', '') }}\" AND status IN (\"In Progress\", \"Done\")"
    },
    "operation": "getAll",
    "descriptionType": "manual",
    "toolDescription": "Call this tool to search for similar issues in JIRA."
  },
  "credentials": {
    "jiraSoftwareCloudApi": {
      "id": "IH5V74q6PusewNjD",
      "name": "Jira SW Cloud account"
    }
  },
  "typeVersion": 1
}

================ Node #2389 ================
{
  "id": "573c1b75-35ae-40f0-aa6e-c1372f83569b",
  "name": "Query KnowledgeBase",
  "type": "n8n-nodes-base.notionTool",
  "position": [
    2280,
    420
  ],
  "parameters": {
    "text": "={{ $fromAI('search_terms', 'relevant terms to search for information on the current issue', 'string', '') }}",
    "limit": 4,
    "options": {},
    "operation": "search",
    "descriptionType": "manual",
    "toolDescription": "Search the knowledgebase for information relevant to the issue."
  },
  "credentials": {
    "notionApi": {
      "id": "iHBHe7ypzz4mZExM",
      "name": "Notion account"
    }
  },
  "typeVersion": 2.2
}

================ Node #2390 ================
{
  "id": "1274f6ff-16d9-4d86-b75a-59755390a07c",
  "name": "Report Unhappy Resolution",
  "type": "n8n-nodes-base.slack",
  "position": [
    2660,
    -400
  ],
  "parameters": {
    "text": "=",
    "select": "channel",
    "blocksUi": "={{\n{\n\t\"blocks\": [\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"text\": {\n\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\"text\": \"Hey there \ud83d\udc4b\\nI found a unclosed ticket which was resolved but thread overall has a negative sentiment score. Please address or close the ticket.\"\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"text\": {\n\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\"text\": `*[${$('Get Issue Metadata').item.json.key}] ${$('Get Issue Metadata').item.json.title}*\\n${$('KnowledgeBase Agent').item.json.output.short_summary_of_issue}\\n\ud83d\udc64 <${$('Get Issue Metadata').item.json.reporter_url}|${$('Get Issue Metadata').item.json.reporter}> \ud83d\udcc5 ${$('Get Issue Metadata').item.json.date} \ud83d\udd17 <${$('Get Issue Metadata').item.json.url}|Link to Issue>\\n`\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"divider\"\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"text\": {\n\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\"text\": \"Thanks!\"\n\t\t\t}\n\t\t}\n\t]\n}\n}}",
    "channelId": {
      "__rl": true,
      "mode": "list",
      "value": "C07S0NQ04D7",
      "cachedResultName": "n8n-jira"
    },
    "messageType": "block",
    "otherOptions": {}
  },
  "credentials": {
    "slackApi": {
      "id": "VfK3js0YdqBdQLGP",
      "name": "Slack account"
    }
  },
  "typeVersion": 2.2
}

================ Node #2391 ================
{
  "id": "3226d576-c3ae-444a-b0c5-ac797d25dd2e",
  "name": "Classify Current Issue State",
  "type": "@n8n/n8n-nodes-langchain.textClassifier",
  "position": [
    1480,
    -140
  ],
  "parameters": {
    "options": {},
    "inputText": "=issue:\n{{ $('Simplify Thread For AI').item.json.topic }}\n\ncomments:\n{{ $('Simplify Thread For AI').item.json.thread.join('\\n') || 'There are no comments' }}",
    "categories": {
      "categories": [
        {
          "category": "resolved",
          "description": "There are human comments and a resolution was found and/or accepted"
        },
        {
          "category": "pending more information",
          "description": "There are human comments but no resolution has been reached yet"
        },
        {
          "category": "still waiting",
          "description": "Reporter is still waiting on a response. Ignoring automated messages, there are no comments."
        }
      ]
    }
  },
  "executeOnce": false,
  "typeVersion": 1
}

================ Node #2392 ================
{
  "id": "b24c6e28-3c9e-4069-9e87-49b2efd47257",
  "name": "OpenAI Chat Model",
  "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
  "position": [
    1200,
    660
  ],
  "parameters": {
    "model": "gpt-4o-mini",
    "options": {}
  },
  "credentials": {
    "openAiApi": {
      "id": "AzPPV759YPBxJj3o",
      "name": "Max's DevRel OpenAI account"
    }
  },
  "typeVersion": 1
}

================ Node #2393 ================
{
  "id": "c71a3e22-f0fd-4377-9be2-32438b282430",
  "name": "Sticky Note",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    200,
    240
  ],
  "parameters": {
    "color": 7,
    "width": 636.2128494576581,
    "height": 494.9629292914819,
    "content": "![Siri Template Thumbnail](https://uploads.n8n.io/devrel/wf-siri-header.png#full-width)\n## \"Hey Siri, Ask Agent\" workflow\n**Made by [Max Tkacz](https://www.linkedin.com/in/maxtkacz) during the [30 Day AI Sprint](https://30dayaisprint.notion.site/)**\n\nThis template integrates with Apple Shortcuts to trigger an n8n AI Agent via a \"Hey Siri\" command. The shortcut prompts for spoken input, transcribes it, and sends it to the workflow's `When Called by Apple Shortcut` Webhook trigger. The AI Agent processes the input and Siri dictates the response back to you.\n\nThe workflow also passes the current date and time to the `AI Agent`, which you can extend with additional context, like data from an App node, for more customized responses.\n\n"
  },
  "typeVersion": 1
}

================ Node #2394 ================
{
  "id": "a4ec93c3-eefa-4006-b02c-f995fb7bc410",
  "name": "Respond to Apple Shortcut",
  "type": "n8n-nodes-base.respondToWebhook",
  "position": [
    1640,
    460
  ],
  "parameters": {
    "options": {},
    "respondWith": "text",
    "responseBody": "={{ $json.output }}"
  },
  "typeVersion": 1.1
}

================ Node #2395 ================
{
  "id": "942b284e-e26a-4534-8f33-eb92b0a88fdb",
  "name": "Sticky Note1",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    200,
    760
  ],
  "parameters": {
    "color": 7,
    "width": 280.2462120317618,
    "height": 438.5821431288714,
    "content": "### Set up steps\n1. Add an OpenAI API credential in `OpenAI Chat Model` node, or replace it with another model. Try `Groq` if you want a free alternative (can be used with free Groq account, no CC).\n2. Copy the \"Production URL\" from `When called by Apple Shortcut` node, you'll need this when setting up the shortcut.\n3. Save and activate this n8n workflow.\n4. Download the [Apple Shortcut here](https://uploads.n8n.io/devrel/ask-agent.shortcut), open it on macOS or iOS. This adds the shortcut to your device.\n5. Open the shortcut and swap URL in `Get contents of\" step to the \"Production URL\" you copied from `When called by Apple Shortcut`.\n6. Test it by saying \"Hey Siri, AI Agent\", then ask a question."
  },
  "typeVersion": 1
}

================ Node #2396 ================
{
  "id": "ebb9e886-546a-429c-b4b5-35c0a7b6370e",
  "name": "Sticky Note2",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    503.6292958565226,
    760
  ],
  "parameters": {
    "color": 7,
    "width": 330.5152611046425,
    "height": 240.6839895136402,
    "content": "### ... or watch set up video [5 min]\n[![Siri Template Thumbnail](https://uploads.n8n.io/devrel/thumb-siri.png#full-width)](https://youtu.be/dewsB-4iGA8)\n"
  },
  "typeVersion": 1
}

================ Node #2397 ================
{
  "id": "5a842fa9-be8c-4ba8-996b-a26a53273b3f",
  "name": "AI Agent",
  "type": "@n8n/n8n-nodes-langchain.agent",
  "position": [
    1240,
    460
  ],
  "parameters": {
    "text": "=Here is my request: {{ $json.body.input }}\n",
    "agent": "conversationalAgent",
    "options": {
      "systemMessage": "=## Task\nYou are a helpful assistant. Provide concise replies as the user receives them via voice on their mobile phone. Avoid using symbols like \"\\n\" to prevent them from being narrated.\n\n## Context\n- Today is {{ $now.format('dd LLL yy') }}.\n- Current time: {{ $now.format('h:mm a') }} in Berlin, Germany.\n- When asked, you are an AI Agent running as an n8n workflow.\n\n## Output\nKeep responses short and clear, optimized for voice delivery. Don't hallucinate, if you don't know the answer, say you don't know. "
    },
    "promptType": "define",
    "hasOutputParser": true
  },
  "typeVersion": 1.6
}

================ Node #2398 ================
{
  "id": "598d22d5-7472-44c5-ab2e-69c8bbb23ddd",
  "name": "When called by Apple Shortcut",
  "type": "n8n-nodes-base.webhook",
  "position": [
    980,
    460
  ],
  "webhookId": "f0224b4b-1644-4d3d-9f12-01a9c04879e4",
  "parameters": {
    "path": "assistant",
    "options": {},
    "httpMethod": "POST",
    "responseMode": "responseNode"
  },
  "typeVersion": 2
}

================ Node #2399 ================
{
  "id": "d1d4291e-fa37-43d0-81e0-f0a594371426",
  "name": "OpenAI Chat Model",
  "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
  "position": [
    680,
    620
  ],
  "parameters": {
    "model": "gpt-4o",
    "options": {
      "timeout": 25000,
      "temperature": 0.7
    }
  },
  "credentials": {
    "openAiApi": {
      "id": "AzPPV759YPBxJj3o",
      "name": "Max's DevRel OpenAI account"
    }
  },
  "typeVersion": 1
}

================ Node #2400 ================
{
  "id": "68e6805b-9c19-4c9e-a300-8983f2b7c28a",
  "name": "Search notion database",
  "type": "@n8n/n8n-nodes-langchain.toolHttpRequest",
  "position": [
    980,
    620
  ],
  "parameters": {
    "url": "=https://api.notion.com/v1/databases/{{ $json.notionID }}/query",
    "method": "POST",
    "jsonBody": "{\n \"filter\": {\n \"or\": [\n {\n \"property\": \"question\",\n \"rich_text\": {\n \"contains\": \"{keyword}\"\n }\n },\n {\n \"property\": \"tags\",\n \"multi_select\": {\n \"contains\": \"{tag}\"\n }\n }\n ]\n },\n \"sorts\": [\n {\n \"property\": \"updated_at\",\n \"direction\": \"ascending\"\n }\n ]\n}",
    "sendBody": true,
    "specifyBody": "json",
    "authentication": "predefinedCredentialType",
    "toolDescription": "=Use this tool to search the \"\" Notion app database.\n\nIt is structured with question and answer format. \nYou can filter query result by:\n- By keyword\n- filter by tag.\n\nKeyword and Tag have an OR relationship not AND.\n\n",
    "nodeCredentialType": "notionApi",
    "placeholderDefinitions": {
      "values": [
        {
          "name": "keyword",
          "description": "Searches question of the record. Use one keyword at a time."
        },
        {
          "name": "tag",
          "description": "=Options: {{ $json.tagsOptions }}"
        }
      ]
    }
  },
  "credentials": {
    "notionApi": {
      "id": "gfNp6Jup8rsmFLRr",
      "name": "max-bot"
    }
  },
  "typeVersion": 1.1
}

================ Node #2401 ================
{
  "id": "c3164d38-a9fb-4ee3-b6bd-fccb4aa5a1a4",
  "name": "Get database details",
  "type": "n8n-nodes-base.notion",
  "position": [
    420,
    380
  ],
  "parameters": {
    "simple": false,
    "resource": "database",
    "databaseId": {
      "__rl": true,
      "mode": "list",
      "value": "7ea9697d-4875-441e-b262-1105337d232e",
      "cachedResultUrl": "https://www.notion.so/7ea9697d4875441eb2621105337d232e",
      "cachedResultName": "StarLens Company Knowledge Base"
    }
  },
  "credentials": {
    "notionApi": {
      "id": "gfNp6Jup8rsmFLRr",
      "name": "max-bot"
    }
  },
  "typeVersion": 2.2
}

================ Node #2402 ================
{
  "id": "98300243-efcc-4427-88da-c1af8a91ddae",
  "name": "Window Buffer Memory",
  "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
  "position": [
    820,
    620
  ],
  "parameters": {
    "contextWindowLength": 4
  },
  "typeVersion": 1.2
}

================ Node #2403 ================
{
  "id": "a8473f48-1343-4eb2-8e48-ec89377a2a00",
  "name": "Search inside database record",
  "type": "@n8n/n8n-nodes-langchain.toolHttpRequest",
  "notes": " ",
  "position": [
    1140,
    620
  ],
  "parameters": {
    "url": "https://api.notion.com/v1/blocks/{page_id}/children",
    "fields": "id, type, paragraph.text, heading_1.text, heading_2.text, heading_3.text, bulleted_list_item.text, numbered_list_item.text, to_do.text, children",
    "dataField": "results",
    "authentication": "predefinedCredentialType",
    "fieldsToInclude": "selected",
    "toolDescription": "=Use this tool to retrieve Notion page content using the page ID. \n\nIt is structured with question and answer format. \nYou can filter query result by:\n- By keyword\n- filter by tag.\n\nKeyword and Tag have an OR relationship not AND.\n\n",
    "optimizeResponse": true,
    "nodeCredentialType": "notionApi",
    "placeholderDefinitions": {
      "values": [
        {
          "name": "page_id",
          "description": "Notion page id from 'Search notion database' tool results"
        }
      ]
    }
  },
  "credentials": {
    "notionApi": {
      "id": "gfNp6Jup8rsmFLRr",
      "name": "max-bot"
    }
  },
  "notesInFlow": true,
  "typeVersion": 1.1
}

================ Node #2404 ================
{
  "id": "115c328e-84b0-43d2-8df7-8b3f74cbb2fb",
  "name": "Format schema",
  "type": "n8n-nodes-base.set",
  "position": [
    620,
    380
  ],
  "parameters": {
    "options": {},
    "assignments": {
      "assignments": [
        {
          "id": "a8e58791-ba51-46a2-8645-386dd1a0ff6e",
          "name": "sessionId",
          "type": "string",
          "value": "={{ $('When chat message received').item.json.sessionId }}"
        },
        {
          "id": "434209de-39d5-43d8-a964-0fcb7396306c",
          "name": "action",
          "type": "string",
          "value": "={{ $('When chat message received').item.json.action }}"
        },
        {
          "id": "cad4c972-51a9-4e16-a627-b00eea77eb30",
          "name": "chatInput",
          "type": "string",
          "value": "={{ $('When chat message received').item.json.chatInput }}"
        },
        {
          "id": "8e88876c-2714-494d-bd5e-5e80c99f83e3",
          "name": "notionID",
          "type": "string",
          "value": "={{ $('Get database details').item.json.id }}"
        },
        {
          "id": "a88a15f6-317c-4d2e-9d64-26f5ccaf7a97",
          "name": "databaseName",
          "type": "string",
          "value": "={{ $json.title[0].text.content }}"
        },
        {
          "id": "7c3bf758-8ed3-469a-8695-6777f4af4fb9",
          "name": "tagsOptions",
          "type": "string",
          "value": "={{ $json.properties.tags.multi_select.options.map(item => item.name).join(',') }}"
        }
      ]
    }
  },
  "typeVersion": 3.4
}

================ Node #2405 ================
{
  "id": "3b82f4fe-6c0c-4e6e-a387-27de31fec758",
  "name": "Sticky Note",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    -340,
    240
  ],
  "parameters": {
    "color": 6,
    "width": 462.3561535890252,
    "height": 95.12709218477178,
    "content": "## Notion knowledge base assistant [v1]\nBuilt as part of the [30 Day AI Sprint](https://30dayaisprint.notion.site/) by [@maxtkacz](https://x.com/maxtkacz)\n"
  },
  "typeVersion": 1
}

================ Node #2406 ================
{
  "id": "31debc55-6608-4e64-be18-1bc0fc0fbf16",
  "name": "Sticky Note1",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    -340,
    1060
  ],
  "parameters": {
    "color": 7,
    "width": 462.3561535890252,
    "height": 172.4760209818479,
    "content": "### FAQ\n- In `Get database details` if you see a `The resource you are requesting could not be found` error, you need to add your connection to the database (in the Notion app).\n- The `Get database details` pulls most recent `Tags` and informs AI Agent of them. However this step adds ~250-800ms per run. Watch detailed video to see how to remove this step. "
  },
  "typeVersion": 1
}

================ Node #2407 ================
{
  "id": "9f48e548-f032-477c-960d-9c99d61443df",
  "name": "AI Agent",
  "type": "@n8n/n8n-nodes-langchain.agent",
  "position": [
    820,
    380
  ],
  "parameters": {
    "text": "={{ $json.chatInput }}",
    "options": {
      "systemMessage": "=# Role:\nYou are a helpful agent. Query the \"{{ $json.databaseName }}\" Notion database to find relevant records or summarize insights based on multiple records.\n\n# Behavior:\n\nBe clear, very concise, efficient, and accurate in responses. Do not hallucinate.\nIf the request is ambiguous, ask for clarification. Do not embellish, only use facts from the Notion records. Do not offer general advice.\n\n# Error Handling:\n\nIf no matching records are found, try alternative search criteria. Example 1: Laptop, then Computer, then Equipment. Example 2: meetings, then meeting.\nClearly explain any issues with queries (e.g., missing fields or unsupported filters).\n\n# Output:\n\nReturn concise, user-friendly results or summaries.\nFor large sets, show top results by default and offer more if needed. Output URLs in markdown format. \n\nWhen a record has the answer to user question, always output the URL to that page. Do not output links twice."
    },
    "promptType": "define"
  },
  "typeVersion": 1.6
}

================ Node #2408 ================
{
  "id": "f1274a12-128c-4549-a19b-6bfc3beccd89",
  "name": "When chat message received",
  "type": "@n8n/n8n-nodes-langchain.chatTrigger",
  "position": [
    220,
    380
  ],
  "webhookId": "b76d02c0-b406-4d21-b6bf-8ad2c623def3",
  "parameters": {
    "public": true,
    "options": {
      "title": "Notion Knowledge Base",
      "subtitle": ""
    },
    "initialMessages": "=Happy {{ $today.weekdayLong }}!\nKnowledge source assistant at your service. How can I help you?"
  },
  "typeVersion": 1.1
}

================ Node #2409 ================
{
  "id": "2e25e4bc-7970-4d00-a757-ba1e418873aa",
  "name": "Sticky Note2",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    -340,
    360
  ],
  "parameters": {
    "color": 7,
    "width": 463.90418399676537,
    "height": 318.2958135288425,
    "content": "### Template set up quickstart video \ud83d\udc47\n[![Video Thumbnail](https://uploads.n8n.io/maxt/notion-db-assistant-embedded-thumb.png#full-width)](https://www.youtube.com/watch?v=ynLZwS2Nhnc)\n"
  },
  "typeVersion": 1
}

================ Node #2410 ================
{
  "id": "ba6fe953-fd5c-497f-ac2a-7afa04b7e6cc",
  "name": "Sticky Note3",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    -340,
    700
  ],
  "parameters": {
    "color": 7,
    "width": 461.5634274842711,
    "height": 332.14098134070576,
    "content": "### Written set up steps\n1. Add a Notion credential to your n8n workspace (follow [this Notion guide](https://developers.notion.com/docs/create-a-notion-integration))\n2. [Duplicate Company knowledge base Notion template](https://www.notion.so/templates/knowledge-base-ai-assistant-with-n8n) to your Notion workspace, then make sure to share the new knowledge base with connection you created in Step 1. \n3. Add Notion cred to `Get database details`:`Credential to connect with` parameter, then to `Search notion database`:`Notion API` parameter (same for `Search inside database record`)\n4. Add OpenAI credential to `Open AI Chat Model` node (tested and working with Anthropic Claude 3.5 too)\n5. In `Get database details`, select the db you created from Step 2 in `Database` dropdown.\n6. Click `Chat` button to test the workflow. Then Activate it and copy the `Chat URL` from `When chat message received`."
  },
  "typeVersion": 1
}

================ Node #2411 ================
{
  "id": "86cbf150-df4f-42f7-b7b3-e03c32e6f23c",
  "name": "Get Chat",
  "type": "@n8n/n8n-nodes-langchain.memoryManager",
  "position": [
    1700,
    -400
  ],
  "parameters": {
    "options": {}
  },
  "typeVersion": 1,
  "alwaysOutputData": true
}

================ Node #2412 ================
{
  "id": "a9153a24-e902-4f29-9b83-447317ce3119",
  "name": "Insert Chat",
  "type": "@n8n/n8n-nodes-langchain.memoryManager",
  "position": [
    2540,
    -400
  ],
  "parameters": {
    "mode": "insert",
    "messages": {
      "messageValues": [
        {
          "type": "user",
          "message": "={{ $('OpenAI - Speech to Text').item.json[\"text\"] }}"
        },
        {
          "type": "ai",
          "message": "={{ $json.text }}"
        }
      ]
    }
  },
  "typeVersion": 1,
  "alwaysOutputData": true
}

================ Node #2413 ================
{
  "id": "f5c272d4-248b-45a5-87b5-eb659a865d05",
  "name": "Sticky Note5",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    1664,
    -491
  ],
  "parameters": {
    "color": 6,
    "width": 486.4746124819703,
    "height": 238.4911357933579,
    "content": "## Get Context"
  },
  "typeVersion": 1
}

================ Node #2414 ================
{
  "id": "32ad17ca-0045-487d-9387-71c2e73629d4",
  "name": "Sticky Note",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    2510,
    -489
  ],
  "parameters": {
    "color": 6,
    "width": 321.2536584847704,
    "height": 231.05945912581728,
    "content": "## Save Context"
  },
  "typeVersion": 1
}

================ Node #2415 ================
{
  "id": "17ae4f1a-6192-4c52-8157-3cb47b37e0fb",
  "name": "Aggregate",
  "type": "n8n-nodes-base.aggregate",
  "position": [
    2020,
    -400
  ],
  "parameters": {
    "options": {},
    "aggregate": "aggregateAllItemData",
    "destinationFieldName": "context"
  },
  "typeVersion": 1,
  "alwaysOutputData": true
}

================ Node #2416 ================
{
  "id": "00b3081e-fbcd-489b-b45a-4e847c346594",
  "name": "Window Buffer Memory",
  "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
  "position": [
    2080,
    -100
  ],
  "parameters": {
    "sessionKey": "test-0dacb3b5-4bcd-47dd-8456-dcfd8c258204",
    "sessionIdType": "customKey"
  },
  "typeVersion": 1.2
}

================ Node #2417 ================
{
  "id": "55ca2790-e905-414a-a9f6-7d88a9e5807d",
  "name": "Google Gemini Chat Model",
  "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
  "position": [
    2220,
    -100
  ],
  "parameters": {
    "options": {},
    "modelName": "models/gemini-1.5-flash"
  },
  "credentials": {
    "googlePalmApi": {
      "id": "2bUF1ZI9hoMIM5XN",
      "name": "Google Gemini(PaLM) Api account"
    }
  },
  "typeVersion": 1
}

================ Node #2418 ================
{
  "id": "e8b3433f-b205-404c-9f05-504556d6b6dd",
  "name": "Respond to Webhook",
  "type": "n8n-nodes-base.respondToWebhook",
  "position": [
    3560,
    -400
  ],
  "parameters": {
    "options": {},
    "respondWith": "binary"
  },
  "typeVersion": 1.1
}

================ Node #2419 ================
{
  "id": "de296743-5ac7-454b-bf3a-d020cc024511",
  "name": "ElevenLabs - Generate Audio",
  "type": "n8n-nodes-base.httpRequest",
  "position": [
    3240,
    -400
  ],
  "parameters": {
    "url": "=https://api.elevenlabs.io/v1/text-to-speech/{{voice id}}",
    "method": "POST",
    "options": {},
    "sendBody": true,
    "sendHeaders": true,
    "authentication": "genericCredentialType",
    "bodyParameters": {
      "parameters": [
        {
          "name": "text",
          "value": "={{ $('Basic LLM Chain').item.json.text }}"
        }
      ]
    },
    "genericAuthType": "httpCustomAuth",
    "headerParameters": {
      "parameters": [
        {
          "name": "Content-Type",
          "value": "application/json"
        }
      ]
    }
  },
  "credentials": {
    "httpCustomAuth": {
      "id": "lnGfV4BlxSE6Xc4X",
      "name": "Eleven Labs"
    }
  },
  "typeVersion": 4.2
}

================ Node #2420 ================
{
  "id": "214e15f2-8a16-4598-b4ac-9fc2ec6545e6",
  "name": "Sticky Note2",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    3040,
    -560
  ],
  "parameters": {
    "width": 468.73250812192407,
    "height": 843.7602354099661,
    "content": "* ### For the Text-to-Speech part, we'll use ElevenLabs.io, which is free and offers a variety of voices to choose from. However, you can also use the OpenAI `\"Generate audio\"` node instead.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n* ### Since there is no pre-built node for `\"ElevenLabs\"` in n8n, we'll connect to it through its API using the \"HTTP Request\" node.\n\n## Prerequisites:\n* ### `\"ElevenLabs API Key\"` (you can obtain it from their website).\n* ### `\"Voice ID\"` (you can also get it from ElevenLabs' \"Voice Library\").\n## Setup\n* ### In the URL parameter, replace \"{{voice id}}\" at the end of the URL with the Voice ID you obtained from ElevenLabs.io.\n* ### To set up your API Key, add custom authentication and include the following `JSON` with your acual ElevenLabs API Key:\n```json\n{\n \"headers\": {\n \"xi-api-key\": \"put-your-API-Key-here\"\n }\n}\n```"
  },
  "typeVersion": 1
}

================ Node #2421 ================
{
  "id": "94ad934c-4a13-47b1-83a5-76fab43b3a47",
  "name": "Sticky Note1",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    1663,
    -598
  ],
  "parameters": {
    "color": 6,
    "width": 487.4293487597613,
    "height": 91.01435855269375,
    "content": "### The \"Get Chat,\" \"Insert Chat,\" and \"Window Buffer Memory\" nodes will help the LLM model maintain context throughout the conversation."
  },
  "typeVersion": 1
}

================ Node #2422 ================
{
  "id": "0a96f48d-0d8b-4240-9eab-a681bfd4c8b5",
  "name": "Limit",
  "type": "n8n-nodes-base.limit",
  "position": [
    2900,
    -400
  ],
  "parameters": {},
  "typeVersion": 1
}

================ Node #2423 ================
{
  "id": "9a5d4ddb-6403-4758-858e-9fbe10c421a9",
  "name": "Basic LLM Chain",
  "type": "@n8n/n8n-nodes-langchain.chainLlm",
  "position": [
    2200,
    -400
  ],
  "parameters": {
    "text": "={{ $('OpenAI - Speech to Text').item.json[\"text\"] }}",
    "messages": {
      "messageValues": [
        {
          "type": "AIMessagePromptTemplate",
          "message": "=To maintain context and fully understand the user's question, always review the previous conversation between you and him before providing an answer.\nThis is the previous conversation:\n{{ $('Aggregate').item.json[\"context\"].map(m => `\nHuman: ${m.human || 'undefined'}\nAI Assistant: ${m.ai || 'undefined'}\n`).join('') }}"
        }
      ]
    },
    "promptType": "define"
  },
  "typeVersion": 1.4
}

================ Node #2424 ================
{
  "id": "f2f99895-9678-41b8-ad28-db40e1e23dc0",
  "name": "Webhook",
  "type": "n8n-nodes-base.webhook",
  "position": [
    1320,
    -400
  ],
  "webhookId": "e9f611eb-a8dd-4520-8d24-9f36deaca528",
  "parameters": {
    "path": "voice_message",
    "options": {},
    "httpMethod": "POST",
    "responseMode": "responseNode"
  },
  "typeVersion": 2
}

================ Node #2425 ================
{
  "id": "d9a5fb04-4c02-4da4-b690-7b0ecd0ae052",
  "name": "OpenAI - Speech to Text",
  "type": "@n8n/n8n-nodes-langchain.openAi",
  "position": [
    1500,
    -400
  ],
  "parameters": {
    "options": {},
    "resource": "audio",
    "operation": "transcribe",
    "binaryPropertyName": "voice_message"
  },
  "credentials": {
    "openAiApi": {
      "id": "2Cije3KX7OIVwn9B",
      "name": "n8n OpenAI"
    }
  },
  "typeVersion": 1.3
}

================ Node #2426 ================
{
  "id": "71b06728-7f59-49e3-9365-3281189a6659",
  "name": "When clicking \"Test workflow\"",
  "type": "n8n-nodes-base.manualTrigger",
  "position": [
    920,
    340
  ],
  "parameters": {},
  "typeVersion": 1
}

================ Node #2427 ================
{
  "id": "b37019e3-c7ab-4119-986d-c27d082a036e",
  "name": "Input",
  "type": "n8n-nodes-base.set",
  "position": [
    1340,
    340
  ],
  "parameters": {
    "options": {},
    "assignments": {
      "assignments": [
        {
          "id": "fcc97354-b9f6-4459-a004-46e87902c77c",
          "name": "company_input",
          "type": "string",
          "value": "={{ $json.input }}"
        },
        {
          "id": "e5415c49-5204-45b1-a0e9-814157127b12",
          "name": "row_number",
          "type": "number",
          "value": "={{ $json.row_number }}"
        }
      ]
    }
  },
  "typeVersion": 3.3
}

================ Node #2428 ================
{
  "id": "7d5d53ac-6d3c-4b24-97c7-deb6b76749e5",
  "name": "OpenAI Chat Model",
  "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
  "position": [
    2020,
    660
  ],
  "parameters": {
    "model": "gpt-4o",
    "options": {
      "temperature": 0.3
    }
  },
  "credentials": {
    "openAiApi": {
      "id": "FMTQypGcsAwaRQdC",
      "name": "OpenAi account"
    }
  },
  "typeVersion": 1
}

================ Node #2429 ================
{
  "id": "24e2f3b0-8b90-49a9-bde6-0fb0c2baf52a",
  "name": "Get website content",
  "type": "@n8n/n8n-nodes-langchain.toolWorkflow",
  "position": [
    2580,
    680
  ],
  "parameters": {
    "name": "get_website_content",
    "source": "parameter",
    "description": "This tool will return the text from the given URL. ",
    "workflowJson": "{\n \"meta\": {\n \"templateCredsSetupCompleted\": true,\n \"instanceId\": \"2b1cc1a8b0a2fb9caab11ab2d5eb3712f9973066051b2e898cf4041a1f2a7757\"\n },\n \"nodes\": [\n {\n \"parameters\": {},\n \"id\": \"475eaf3c-7e11-457e-8b72-4d3e683e2f80\",\n \"name\": \"Execute Workflow Trigger\",\n \"type\": \"n8n-nodes-base.executeWorkflowTrigger\",\n \"typeVersion\": 1,\n \"position\": [\n 260,\n 340\n ]\n },\n {\n \"parameters\": {\n \"url\": \"={{ $json.query.url }}\",\n \"options\": {}\n },\n \"id\": \"321fbc74-d749-4f9b-954e-7cad37601ddf\",\n \"name\": \"Visit Website\",\n \"type\": \"n8n-nodes-base.httpRequest\",\n \"typeVersion\": 4.2,\n \"position\": [\n 440,\n 340\n ]\n },\n {\n \"parameters\": {\n \"operation\": \"extractHtmlContent\",\n \"extractionValues\": {\n \"values\": [\n {\n \"key\": \"body\",\n \"cssSelector\": \"html\",\n \"skipSelectors\": \"head\"\n }\n ]\n },\n \"options\": {\n \"cleanUpText\": true\n }\n },\n \"id\": \"6e51732a-4999-4805-838b-f692e9965197\",\n \"name\": \"HTML\",\n \"type\": \"n8n-nodes-base.html\",\n \"typeVersion\": 1.2,\n \"position\": [\n 620,\n 340\n ]\n }\n ],\n \"connections\": {\n \"Execute Workflow Trigger\": {\n \"main\": [\n [\n {\n \"node\": \"Visit Website\",\n \"type\": \"main\",\n \"index\": 0\n }\n ]\n ]\n },\n \"Visit Website\": {\n \"main\": [\n [\n {\n \"node\": \"HTML\",\n \"type\": \"main\",\n \"index\": 0\n }\n ]\n ]\n }\n },\n \"pinData\": {\n \"Execute Workflow Trigger\": [\n {\n \"query\": {\n \"url\": \"https://www.lemlist.com\"\n }\n }\n ]\n }\n}",
    "jsonSchemaExample": "{\n\t\"url\": \"https://www.lemlist.com\"\n}",
    "specifyInputSchema": true,
    "responsePropertyName": "body"
  },
  "typeVersion": 1.1
}

================ Node #2430 ================
{
  "id": "ff7ab74c-dfc6-43ce-8c57-6edf935b4915",
  "name": "SerpAPI - Search Google",
  "type": "@n8n/n8n-nodes-langchain.toolSerpApi",
  "position": [
    2300,
    660
  ],
  "parameters": {
    "options": {}
  },
  "credentials": {
    "serpApi": {
      "id": "ECK6FimAloRJOZMG",
      "name": "SerpAPI account"
    }
  },
  "typeVersion": 1
}

================ Node #2431 ================
{
  "id": "4fe311f2-4983-4380-b4ed-a827a406fce5",
  "name": "Structured Output Parser",
  "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
  "position": [
    2880,
    660
  ],
  "parameters": {
    "schemaType": "manual",
    "inputSchema": "{\n\t\"type\": \"object\",\n\t\"properties\": {\n\t\t\"case_study_link\": {\n\t\t\t\"type\":[\"string\", \"null\"]\n\t\t},\n \t\t\"domain\": {\n\t\t\t\"type\": [\"string\", \"null\"]\n\t\t},\n \"linkedinUrl\": {\n\t\t\t\"type\": [\"string\", \"null\"]\n\t\t},\n \t\"market\": {\n\t\t\t\"type\": [\"string\", \"null\"]\n\t\t},\n\t\t\"cheapest_plan\": {\n\t\t\t\"type\": [\"number\", \"null\"]\n\t\t},\n\t\"has_enterprise_plan\": {\n\t\t\t\"type\": [\"boolean\", \"null\"]\n\t\t},\n\t\"has_API\": {\n\t\t\t\"type\": [\"boolean\", \"null\"]\n\t\t},\n\t\"has_free_trial\": {\n\t\t\t\"type\": [\"boolean\", \"null\"]\n\t\t},\n\t\"integrations\": {\n\t\t\t\"type\": [\"array\",\"null\"],\n \"items\": {\n\t\t\t\t\"type\": \"string\"\n\t\t\t}\n\t\t}\n\t}\n}"
  },
  "typeVersion": 1.2
}

================ Node #2432 ================
{
  "id": "89ed0723-4dbe-428d-b1a9-ebdf515e42bb",
  "name": "Loop Over Items",
  "type": "n8n-nodes-base.splitInBatches",
  "position": [
    1600,
    340
  ],
  "parameters": {
    "options": {}
  },
  "typeVersion": 3
}

================ Node #2433 ================
{
  "id": "34ea3862-e8e5-4bf2-a9aa-2ad084376bb5",
  "name": "AI Researcher Output Data",
  "type": "n8n-nodes-base.set",
  "position": [
    2960,
    340
  ],
  "parameters": {
    "options": {},
    "assignments": {
      "assignments": [
        {
          "id": "4109ca11-1bb8-4f5c-8bec-a962f44b0746",
          "name": "domain",
          "type": "string",
          "value": "={{ $json.output.domain }}"
        },
        {
          "id": "7f492768-375e-48fa-866b-644b2b5cbd68",
          "name": "linkedinUrl",
          "type": "string",
          "value": "={{ $json.output.linkedinUrl }}"
        },
        {
          "id": "e30b0d07-68db-45a1-9593-fd6ce24a1d50",
          "name": "market",
          "type": "string",
          "value": "={{ $json.output.market }}"
        },
        {
          "id": "0c03a51e-2c07-4583-85c6-d3d2ee81c5d1",
          "name": "cheapest_plan",
          "type": "number",
          "value": "={{ $json.output.cheapest_plan }}"
        },
        {
          "id": "0c9622d0-8446-4663-9a94-964b5df851f1",
          "name": "has_enterprise_plan",
          "type": "boolean",
          "value": "={{ $json.output.has_enterprise_plan }}"
        },
        {
          "id": "564cf6ea-457f-4762-bc19-6900b7d5743c",
          "name": "has_API",
          "type": "boolean",
          "value": "={{ $json.output.has_API }}"
        },
        {
          "id": "7fd39897-65c3-45d6-9563-8254f55ecef0",
          "name": "has_free_trial",
          "type": "boolean",
          "value": "={{ $json.output.has_free_trial }}"
        },
        {
          "id": "26477939-d407-4cae-92b2-9a9dc0f53a64",
          "name": "integrations",
          "type": "array",
          "value": "={{ $json.output.integrations }}"
        },
        {
          "id": "f0cc61d1-6b6b-4142-8627-4a4c721b19a1",
          "name": "case_study_link",
          "type": "string",
          "value": "={{ $json.output.case_study_link }}"
        }
      ]
    }
  },
  "typeVersion": 3.3
}

================ Node #2434 ================
{
  "id": "ff1cb26d-6138-4ee1-9f28-4ecc80c1c8ae",
  "name": "Google Sheets - Update Row with data",
  "type": "n8n-nodes-base.googleSheets",
  "position": [
    3600,
    700
  ],
  "parameters": {
    "columns": {
      "value": {
        "domain": "={{ $json.domain }}",
        "market": "={{ $json.market }}",
        "row_number": "={{ $json.row_number }}",
        "linkedinUrl": "={{ $json.linkedinUrl }}",
        "integrations": "={{ $json.integrations }}",
        "cheapest_plan": "={{ $json.cheapest_plan }}",
        "has_free_trial": "={{ $json.has_free_trial }}",
        "enrichment_status": "done",
        "has_entreprise_plan": "={{ $json.has_enterprise_plan }}",
        "last_case_study_link": "={{ $json.case_study_link }}"
      },
      "schema": [
        {
          "id": "input",
          "type": "string",
          "display": true,
          "removed": true,
          "required": false,
          "displayName": "input",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "domain",
          "type": "string",
          "display": true,
          "required": false,
          "displayName": "domain",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "linkedinUrl",
          "type": "string",
          "display": true,
          "required": false,
          "displayName": "linkedinUrl",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "has_free_trial",
          "type": "string",
          "display": true,
          "required": false,
          "displayName": "has_free_trial",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "cheapest_plan",
          "type": "string",
          "display": true,
          "required": false,
          "displayName": "cheapest_plan",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "has_entreprise_plan",
          "type": "string",
          "display": true,
          "required": false,
          "displayName": "has_entreprise_plan",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "last_case_study_link",
          "type": "string",
          "display": true,
          "removed": false,
          "required": false,
          "displayName": "last_case_study_link",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "market",
          "type": "string",
          "display": true,
          "required": false,
          "displayName": "market",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "integrations",
          "type": "string",
          "display": true,
          "required": false,
          "displayName": "integrations",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "enrichment_status",
          "type": "string",
          "display": true,
          "required": false,
          "displayName": "enrichment_status",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        },
        {
          "id": "row_number",
          "type": "string",
          "display": true,
          "removed": false,
          "readOnly": true,
          "required": false,
          "displayName": "row_number",
          "defaultMatch": false,
          "canBeUsedToMatch": true
        }
      ],
      "mappingMode": "defineBelow",
      "matchingColumns": [
        "row_number"
      ]
    },
    "options": {},
    "operation": "update",
    "sheetName": {
      "__rl": true,
      "mode": "list",
      "value": "gid=0",
      "cachedResultUrl": "https://docs.google.com/spreadsheets/d/19U7gAgkUEz6mbFcnygf1zKDdGvY6OAdUqq3bZQWgjxE/edit#gid=0",
      "cachedResultName": "Sheet1"
    },
    "documentId": {
      "__rl": true,
      "mode": "list",
      "value": "19U7gAgkUEz6mbFcnygf1zKDdGvY6OAdUqq3bZQWgjxE",
      "cachedResultUrl": "https://docs.google.com/spreadsheets/d/19U7gAgkUEz6mbFcnygf1zKDdGvY6OAdUqq3bZQWgjxE/edit?usp=drivesdk",
      "cachedResultName": "Enrich companies using AI agents"
    }
  },
  "credentials": {
    "googleSheetsOAuth2Api": {
      "id": "GC2OQl3Jvy543LT2",
      "name": "Google Sheets account - perso"
    }
  },
  "typeVersion": 4.3
}

================ Node #2435 ================
{
  "id": "6611f852-b4d6-4a07-9428-db206ef57cc3",
  "name": "Merge data",
  "type": "n8n-nodes-base.merge",
  "position": [
    3240,
    180
  ],
  "parameters": {
    "mode": "combine",
    "options": {},
    "combinationMode": "mergeByPosition"
  },
  "typeVersion": 2.1
}

================ Node #2436 ================
{
  "id": "2a19516b-33a1-4987-9b5f-242a084621e0",
  "name": "Sticky Note",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    380,
    240
  ],
  "parameters": {
    "width": 409.0131656322444,
    "height": 658.0614601225933,
    "content": "## Read Me\n\nThis workflow allows you to do account research with the web using AI.\n\nThe advanced AI module has 2 capabilities: \n- Research Google using SerpAPI\n- Visit and get website content using a sub-workflow\n\n\nFrom an unstructured input like a domain or a company name. \n\nIt will return the following properties: \n- domain\n- company Linkedin Url\n- cheapest plan\n- has free trial\n- has entreprise plan\n- has API\n- market (B2B or B2C)\n\n\nThe strength of n8n here is that you can adapt this workflow to research whatever information you need.\n\nYou just have to precise it in the prompt and to precise the output format in the \"Strutured Output Parser\" module.\n\n[Click here to find more detailed instructions with video guide.](https://lempire.notion.site/AI-Web-research-with-n8n-a25aae3258d0423481a08bd102f16906)\n"
  },
  "typeVersion": 1
}

================ Node #2437 ================
{
  "id": "67d485c9-3289-4bb3-9523-cd24c0b1aa05",
  "name": "Get rows to enrich",
  "type": "n8n-nodes-base.googleSheets",
  "position": [
    1140,
    340
  ],
  "parameters": {
    "options": {
      "returnAllMatches": "returnAllMatches"
    },
    "filtersUI": {
      "values": [
        {
          "lookupColumn": "enrichment_status"
        }
      ]
    },
    "sheetName": {
      "__rl": true,
      "mode": "list",
      "value": "gid=0",
      "cachedResultUrl": "https://docs.google.com/spreadsheets/d/19U7gAgkUEz6mbFcnygf1zKDdGvY6OAdUqq3bZQWgjxE/edit#gid=0",
      "cachedResultName": "Sheet1"
    },
    "documentId": {
      "__rl": true,
      "mode": "list",
      "value": "19U7gAgkUEz6mbFcnygf1zKDdGvY6OAdUqq3bZQWgjxE",
      "cachedResultUrl": "https://docs.google.com/spreadsheets/d/19U7gAgkUEz6mbFcnygf1zKDdGvY6OAdUqq3bZQWgjxE/edit?usp=drivesdk",
      "cachedResultName": "Enrich companies using AI agents"
    }
  },
  "credentials": {
    "googleSheetsOAuth2Api": {
      "id": "GC2OQl3Jvy543LT2",
      "name": "Google Sheets account - perso"
    }
  },
  "typeVersion": 4.3
}

================ Node #2438 ================
{
  "id": "eb0c95e7-2211-48d1-abaf-07cd0c76d3a6",
  "name": "Sticky Note1",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    1540,
    227.25301102878547
  ],
  "parameters": {
    "width": 300.49399096535876,
    "height": 333.8263184006576,
    "content": "### Process rows 1 by 1\nThis module will allow us to process rows 1 by 1"
  },
  "typeVersion": 1
}

================ Node #2439 ================
{
  "id": "8bf0deae-dda7-4e27-9ac7-978db14cca19",
  "name": "Sticky Note2",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    2740,
    560
  ],
  "parameters": {
    "width": 300.49399096535876,
    "height": 236.01118609685022,
    "content": "Precise here the format in which you need the data to be "
  },
  "typeVersion": 1
}

================ Node #2440 ================
{
  "id": "dc4f1550-1e3c-4175-a2b3-10153dc2fd77",
  "name": "Sticky Note3",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    2180,
    200.2582716310755
  ],
  "parameters": {
    "width": 300.49399096535876,
    "height": 279.8787004666023,
    "content": "### Ask AI what are the information you are looking for about the company"
  },
  "typeVersion": 1
}

================ Node #2441 ================
{
  "id": "70fc73a0-303b-46e1-822d-cebdbccf8e32",
  "name": "Sticky Note4",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    2220,
    580
  ],
  "parameters": {
    "height": 248.91749449109562,
    "content": "Get your free API key here https://serpapi.com/"
  },
  "typeVersion": 1
}

================ Node #2442 ================
{
  "id": "0c1dafa9-28fe-4ef4-b80e-d4034e16f6c0",
  "name": "Schedule Trigger",
  "type": "n8n-nodes-base.scheduleTrigger",
  "position": [
    920,
    580
  ],
  "parameters": {
    "rule": {
      "interval": [
        {
          "field": "hours",
          "hoursInterval": 2
        }
      ]
    }
  },
  "typeVersion": 1.2
}

================ Node #2443 ================
{
  "id": "8b5ebee9-f519-4621-bf2a-12891794f2c5",
  "name": "Sticky Note5",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    820,
    240
  ],
  "parameters": {
    "width": 266.12865147126786,
    "height": 627.5654650079845,
    "content": "Run the workflow manually or activate it to run it every 2 hours"
  },
  "typeVersion": 1
}

================ Node #2444 ================
{
  "id": "d7db2452-ba3d-4adb-bd8b-d17a92d1bce5",
  "name": "AI company researcher",
  "type": "@n8n/n8n-nodes-langchain.agent",
  "position": [
    2200,
    340
  ],
  "parameters": {
    "text": "=This is the company I want you to research info about:\n{{ $json.company_input }}\n\nReturn me:\n- the linkedin URL of the company\n- the domain of the company. in this format ([domain].[tld])\n- market: if they are B2B or B2C. Only reply by \"B2B\" or \"B2B\"\n- the lowest paid plan the company is offering. If you are not sure, reply null.\n- the latest case study URL published on the website (find case study hub using google, and return the first case study link)\n- tell me if the company offer an API\n- tell me if the company has an enterprise plan\n- tell me if the company has a free trial mentionned in their homepage. reply false if you don't find strong evidence.\n- return an array with up to 5 tools the company is integrated with",
    "options": {
      "maxIterations": 10
    },
    "promptType": "define",
    "hasOutputParser": true
  },
  "typeVersion": 1.6
}

================ Node #2445 ================
{
  "id": "f7896dbd-5c15-44e9-96ca-c695a66562cc",
  "name": "Search Google with ScrapingBee",
  "type": "@n8n/n8n-nodes-langchain.toolWorkflow",
  "position": [
    2300,
    1140
  ],
  "parameters": {
    "name": "search_google",
    "source": "parameter",
    "description": "Call this tool to get results from a google search.",
    "workflowJson": "{\n \"meta\": {\n \"templateCredsSetupCompleted\": true,\n \"instanceId\": \"2b1cc1a8b0a2fb9caab11ab2d5eb3712f9973066051b2e898cf4041a1f2a7757\"\n },\n \"nodes\": [\n {\n \"parameters\": {},\n \"id\": \"fbb17d8d-e2dc-46ae-aba4-8c27cc9d8766\",\n \"name\": \"Execute Workflow Trigger\",\n \"type\": \"n8n-nodes-base.executeWorkflowTrigger\",\n \"typeVersion\": 1,\n \"position\": [\n 20,\n 460\n ]\n },\n {\n \"parameters\": {\n \"url\": \"https://app.scrapingbee.com/api/v1/store/google\",\n \"authentication\": \"genericCredentialType\",\n \"genericAuthType\": \"httpQueryAuth\",\n \"sendQuery\": true,\n \"queryParameters\": {\n \"parameters\": [\n {\n \"name\": \"search\",\n \"value\": \"={{ $json.query.google_search_query }}\"\n },\n {\n \"name\": \"language\",\n \"value\": \"en\"\n },\n {\n \"name\": \"nb_results\",\n \"value\": \"5\"\n }\n ]\n },\n \"options\": {}\n },\n \"id\": \"b938a2bd-030e-46d7-adee-4e3c85cfc1b3\",\n \"name\": \"Search Google\",\n \"type\": \"n8n-nodes-base.httpRequest\",\n \"typeVersion\": 4.2,\n \"position\": [\n 300,\n 460\n ],\n \"credentials\": {\n \"httpQueryAuth\": {\n \"id\": \"Pb2CIMT0tN838QPy\",\n \"name\": \"ScrapingBee\"\n }\n }\n },\n {\n \"parameters\": {\n \"assignments\": {\n \"assignments\": [\n {\n \"id\": \"096fee70-444e-4948-816c-752b20786062\",\n \"name\": \"response\",\n \"value\": \"={{ $json.organic_results }}\",\n \"type\": \"array\"\n }\n ]\n },\n \"options\": {}\n },\n \"id\": \"c5db1fb6-d875-47d2-97db-287777583f22\",\n \"name\": \"Response\",\n \"type\": \"n8n-nodes-base.set\",\n \"typeVersion\": 3.3,\n \"position\": [\n 520,\n 460\n ]\n }\n ],\n \"connections\": {\n \"Execute Workflow Trigger\": {\n \"main\": [\n [\n {\n \"node\": \"Search Google\",\n \"type\": \"main\",\n \"index\": 0\n }\n ]\n ]\n },\n \"Search Google\": {\n \"main\": [\n [\n {\n \"node\": \"Response\",\n \"type\": \"main\",\n \"index\": 0\n }\n ]\n ]\n }\n },\n \"pinData\": {\n \"Execute Workflow Trigger\": [\n {\n \"query\": {\n \"google_search_query\": \"site:lemlist.com pricing\"\n }\n }\n ]\n }\n}",
    "jsonSchemaExample": "{\n\t\"google_search_query\": \"site:lemlist.com pricing\"\n}",
    "specifyInputSchema": true
  },
  "typeVersion": 1.1
}

================ Node #2446 ================
{
  "id": "7a89c803-8145-49c2-aafe-ec2aff0b2fbc",
  "name": "Sticky Note6",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    2220,
    940
  ],
  "parameters": {
    "height": 340.14969579315925,
    "content": "Instead of SERP API module, you can also use this custom module for ScrapingBee. It is more cost-efficient.\n\nGet your free API key here https://www.scrapingbee.com/"
  },
  "typeVersion": 1
}

================ Node #2447 ================
{
  "id": "79eff129-790b-46da-bef3-899eb6db3ced",
  "name": "Sticky Note7",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    1100,
    -20
  ],
  "parameters": {
    "width": 194.6864335083109,
    "height": 525.6560478822986,
    "content": "In this workflow, I use Google Sheets to store the results. \n\nYou can use my template to get started faster:\n\n1. [Click on this link to get the template](https://docs.google.com/spreadsheets/d/1vR6s2nlTwu01v3GP7wvSRWS5W49FJIh20ZF7AUkmMDo/edit?usp=sharing)\n2. Make a copy of the Sheets\n3. Add the URL to this node and the node **\"Google Sheets - Update Row with data\"**\n\n\n"
  },
  "typeVersion": 1
}

================ Node #2448 ================
{
  "id": "6cdc45e5-1fa4-47fe-b80a-0e1560996936",
  "name": "Text",
  "type": "@n8n/n8n-nodes-langchain.toolWorkflow",
  "position": [
    1460,
    980
  ],
  "parameters": {
    "name": "text_retrieval_tool",
    "source": "parameter",
    "description": "Call this tool to return all text from the given website. Query should be full website URL.",
    "workflowJson": "{\n \"nodes\": [\n {\n \"parameters\": {},\n \"id\": \"05107436-c9cb-419b-ae8a-b74d309a130d\",\n \"name\": \"Execute workflow\",\n \"type\": \"n8n-nodes-base.manualTrigger\",\n \"typeVersion\": 1,\n \"position\": [\n 2220,\n 620\n ]\n },\n {\n \"parameters\": {\n \"assignments\": {\n \"assignments\": [\n {\n \"id\": \"253c2b17-c749-4f0a-93e8-5ff74f1ce49b\",\n \"name\": \"domain\",\n \"value\": \"={{ $json.query }}\",\n \"type\": \"string\"\n }\n ]\n },\n \"options\": {}\n },\n \"id\": \"bb8be616-3227-4705-8520-1827069faacd\",\n \"name\": \"Set domain\",\n \"type\": \"n8n-nodes-base.set\",\n \"typeVersion\": 3.3,\n \"position\": [\n 2440,\n 620\n ]\n },\n {\n \"parameters\": {\n \"assignments\": {\n \"assignments\": [\n {\n \"id\": \"ed0f1505-82b6-4393-a0d8-088055137ec9\",\n \"name\": \"domain\",\n \"value\": \"={{ $json.domain.startsWith(\\\"http\\\") ? $json.domain : \\\"http://\\\" + $json.domain }}\",\n \"type\": \"string\"\n }\n ]\n },\n \"options\": {}\n },\n \"id\": \"bdf29340-f135-489f-848e-1c7fa43a01df\",\n \"name\": \"Add protocool to domain\",\n \"type\": \"n8n-nodes-base.set\",\n \"typeVersion\": 3.3,\n \"position\": [\n 2640,\n 620\n ]\n },\n {\n \"parameters\": {\n \"assignments\": {\n \"assignments\": [\n {\n \"id\": \"2b1c7ff8-06a7-448b-99b7-5ede4b2e0bf0\",\n \"name\": \"response\",\n \"value\": \"={{ $json.data }}\",\n \"type\": \"string\"\n }\n ]\n },\n \"options\": {}\n },\n \"id\": \"9f0aa264-08c1-459a-bb99-e28599fe8f76\",\n \"name\": \"Set response\",\n \"type\": \"n8n-nodes-base.set\",\n \"typeVersion\": 3.3,\n \"position\": [\n 3300,\n 620\n ]\n },\n {\n \"parameters\": {\n \"url\": \"={{ $json.domain }}\",\n \"options\": {}\n },\n \"id\": \"cec7c8e8-bf5e-43d5-aa41-876293dbec78\",\n \"name\": \"Get website\",\n \"type\": \"n8n-nodes-base.httpRequest\",\n \"typeVersion\": 4.2,\n \"position\": [\n 2860,\n 620\n ]\n },\n {\n \"parameters\": {\n \"html\": \"={{ $json.data }}\",\n \"options\": {\n \"ignore\": \"a,img\"\n }\n },\n \"id\": \"1af94fcb-bca3-45c4-9277-18878c75d417\",\n \"name\": \"Convert HTML to Markdown\",\n \"type\": \"n8n-nodes-base.markdown\",\n \"typeVersion\": 1,\n \"position\": [\n 3080,\n 620\n ]\n }\n ],\n \"connections\": {\n \"Execute workflow\": {\n \"main\": [\n [\n {\n \"node\": \"Set domain\",\n \"type\": \"main\",\n \"index\": 0\n }\n ]\n ]\n },\n \"Set domain\": {\n \"main\": [\n [\n {\n \"node\": \"Add protocool to domain\",\n \"type\": \"main\",\n \"index\": 0\n }\n ]\n ]\n },\n \"Add protocool to domain\": {\n \"main\": [\n [\n {\n \"node\": \"Get website\",\n \"type\": \"main\",\n \"index\": 0\n }\n ]\n ]\n },\n \"Get website\": {\n \"main\": [\n [\n {\n \"node\": \"Convert HTML to Markdown\",\n \"type\": \"main\",\n \"index\": 0\n }\n ]\n ]\n },\n \"Convert HTML to Markdown\": {\n \"main\": [\n [\n {\n \"node\": \"Set response\",\n \"type\": \"main\",\n \"index\": 0\n }\n ]\n ]\n }\n },\n \"pinData\": {}\n}",
    "requestOptions": {}
  },
  "typeVersion": 1.1
}

================ Node #2449 ================
{
  "id": "af8efccb-ba3c-44de-85f7-b932d7a2e3ca",
  "name": "URLs",
  "type": "@n8n/n8n-nodes-langchain.toolWorkflow",
  "position": [
    1640,
    980
  ],
  "parameters": {
    "name": "url_retrieval_tool",
    "source": "parameter",
    "description": "Call this tool to return all URLs from the given website. Query should be full website URL.",
    "workflowJson": "{\n \"nodes\": [\n {\n \"parameters\": {},\n \"id\": \"05107436-c9cb-419b-ae8a-b74d309a130d\",\n \"name\": \"Execute workflow\",\n \"type\": \"n8n-nodes-base.manualTrigger\",\n \"typeVersion\": 1,\n \"position\": [\n 2200,\n 740\n ]\n },\n {\n \"parameters\": {\n \"operation\": \"extractHtmlContent\",\n \"extractionValues\": {\n \"values\": [\n {\n \"key\": \"output\",\n \"cssSelector\": \"a\",\n \"returnValue\": \"attribute\",\n \"returnArray\": true\n }\n ]\n },\n \"options\": {}\n },\n \"id\": \"1972e13e-d923-45e8-9752-e4bf45faaccf\",\n \"name\": \"Retrieve URLs\",\n \"type\": \"n8n-nodes-base.html\",\n \"typeVersion\": 1.2,\n \"position\": [\n 3060,\n 740\n ]\n },\n {\n \"parameters\": {\n \"fieldToSplitOut\": \"output\",\n \"options\": {}\n },\n \"id\": \"19703fbc-05ff-4d80-ab53-85ba6d39fc3f\",\n \"name\": \"Split out URLs\",\n \"type\": \"n8n-nodes-base.splitOut\",\n \"typeVersion\": 1,\n \"position\": [\n 3280,\n 740\n ]\n },\n {\n \"parameters\": {\n \"compare\": \"selectedFields\",\n \"fieldsToCompare\": \"href\",\n \"options\": {}\n },\n \"id\": \"5cc988e7-de9b-4177-b5e7-edb3842202c8\",\n \"name\": \"Remove duplicated\",\n \"type\": \"n8n-nodes-base.removeDuplicates\",\n \"typeVersion\": 1,\n \"position\": [\n 3720,\n 740\n ]\n },\n {\n \"parameters\": {\n \"assignments\": {\n \"assignments\": [\n {\n \"id\": \"04ced063-09f0-496c-9b28-b8095f9e2297\",\n \"name\": \"href\",\n \"value\": \"={{ $json.href.startsWith(\\\"/\\\") ? $('Add protocool to domain (URL)').item.json[\\\"domain\\\"] + $json.href : $json.href }}\",\n \"type\": \"string\"\n }\n ]\n },\n \"includeOtherFields\": true,\n \"include\": \"selected\",\n \"includeFields\": \"title\",\n \"options\": {}\n },\n \"id\": \"4715a25d-93a7-4056-8768-e3f886a1a0c9\",\n \"name\": \"Set domain to path\",\n \"type\": \"n8n-nodes-base.set\",\n \"typeVersion\": 3.3,\n \"position\": [\n 3940,\n 740\n ]\n },\n {\n \"parameters\": {\n \"conditions\": {\n \"options\": {\n \"caseSensitive\": true,\n \"leftValue\": \"\",\n \"typeValidation\": \"strict\"\n },\n \"conditions\": [\n {\n \"id\": \"d01ea6a8-7e75-40d4-98f2-25d42b245f36\",\n \"leftValue\": \"={{ $json.href.isUrl() }}\",\n \"rightValue\": \"\",\n \"operator\": {\n \"type\": \"boolean\",\n \"operation\": \"true\",\n \"singleValue\": true\n }\n }\n ],\n \"combinator\": \"and\"\n },\n \"options\": {}\n },\n \"id\": \"353deefb-ae69-440c-95b6-fdadacf4bf91\",\n \"name\": \"Filter out invalid URLs\",\n \"type\": \"n8n-nodes-base.filter\",\n \"typeVersion\": 2,\n \"position\": [\n 4160,\n 740\n ]\n },\n {\n \"parameters\": {\n \"aggregate\": \"aggregateAllItemData\",\n \"include\": \"specifiedFields\",\n \"fieldsToInclude\": \"title,href\",\n \"options\": {}\n },\n \"id\": \"9f87be8c-72d7-4ab1-b297-dc7069b2dd11\",\n \"name\": \"Aggregate URLs\",\n \"type\": \"n8n-nodes-base.aggregate\",\n \"typeVersion\": 1,\n \"position\": [\n 4380,\n 740\n ]\n },\n {\n \"parameters\": {\n \"conditions\": {\n \"options\": {\n \"caseSensitive\": true,\n \"leftValue\": \"\",\n \"typeValidation\": \"strict\"\n },\n \"conditions\": [\n {\n \"id\": \"5b9b7353-bd04-4af2-9480-8de135ff4223\",\n \"leftValue\": \"={{ $json.href }}\",\n \"rightValue\": \"\",\n \"operator\": {\n \"type\": \"string\",\n \"operation\": \"exists\",\n \"singleValue\": true\n }\n }\n ],\n \"combinator\": \"and\"\n },\n \"options\": {}\n },\n \"id\": \"35c8323a-5350-403a-9c2d-114b0527e395\",\n \"name\": \"Filter out empty hrefs\",\n \"type\": \"n8n-nodes-base.filter\",\n \"typeVersion\": 2,\n \"position\": [\n 3500,\n 740\n ]\n },\n {\n \"parameters\": {\n \"assignments\": {\n \"assignments\": [\n {\n \"id\": \"253c2b17-c749-4f0a-93e8-5ff74f1ce49b\",\n \"name\": \"domain\",\n \"value\": \"={{ $json.query }}\",\n \"type\": \"string\"\n }\n ]\n },\n \"options\": {}\n },\n \"id\": \"d9f6a148-6c8c-4a58-89f5-4e9cfcd8d910\",\n \"name\": \"Set domain (URL)\",\n \"type\": \"n8n-nodes-base.set\",\n \"typeVersion\": 3.3,\n \"position\": [\n 2400,\n 740\n ]\n },\n {\n \"parameters\": {\n \"assignments\": {\n \"assignments\": [\n {\n \"id\": \"ed0f1505-82b6-4393-a0d8-088055137ec9\",\n \"name\": \"domain\",\n \"value\": \"={{ $json.domain.startsWith(\\\"http\\\") ? $json.domain : \\\"http://\\\" + $json.domain }}\",\n \"type\": \"string\"\n }\n ]\n },\n \"options\": {}\n },\n \"id\": \"1f974444-da58-4a47-a9c3-ba3091fc1e96\",\n \"name\": \"Add protocool to domain (URL)\",\n \"type\": \"n8n-nodes-base.set\",\n \"typeVersion\": 3.3,\n \"position\": [\n 2620,\n 740\n ]\n },\n {\n \"parameters\": {\n \"url\": \"={{ $json.domain }}\",\n \"options\": {}\n },\n \"id\": \"31d7c7d4-8f61-402b-858d-63dd68ac69ee\",\n \"name\": \"Get website (URL)\",\n \"type\": \"n8n-nodes-base.httpRequest\",\n \"typeVersion\": 4.2,\n \"position\": [\n 2840,\n 740\n ]\n },\n {\n \"parameters\": {\n \"assignments\": {\n \"assignments\": [\n {\n \"id\": \"53c1c016-7983-4eba-a91d-da2a0523d805\",\n \"name\": \"response\",\n \"value\": \"={{ JSON.stringify($json.data) }}\",\n \"type\": \"string\"\n }\n ]\n },\n \"options\": {}\n },\n \"id\": \"f4b6df77-96be-4b12-9a8b-ae9b7009f13d\",\n \"name\": \"Set response (URL)\",\n \"type\": \"n8n-nodes-base.set\",\n \"typeVersion\": 3.3,\n \"position\": [\n 4600,\n 740\n ]\n }\n ],\n \"connections\": {\n \"Execute workflow\": {\n \"main\": [\n [\n {\n \"node\": \"Set domain (URL)\",\n \"type\": \"main\",\n \"index\": 0\n }\n ]\n ]\n },\n \"Retrieve URLs\": {\n \"main\": [\n [\n {\n \"node\": \"Split out URLs\",\n \"type\": \"main\",\n \"index\": 0\n }\n ]\n ]\n },\n \"Split out URLs\": {\n \"main\": [\n [\n {\n \"node\": \"Filter out empty hrefs\",\n \"type\": \"main\",\n \"index\": 0\n }\n ]\n ]\n },\n \"Remove duplicated\": {\n \"main\": [\n [\n {\n \"node\": \"Set domain to path\",\n \"type\": \"main\",\n \"index\": 0\n }\n ]\n ]\n },\n \"Set domain to path\": {\n \"main\": [\n [\n {\n \"node\": \"Filter out invalid URLs\",\n \"type\": \"main\",\n \"index\": 0\n }\n ]\n ]\n },\n \"Filter out invalid URLs\": {\n \"main\": [\n [\n {\n \"node\": \"Aggregate URLs\",\n \"type\": \"main\",\n \"index\": 0\n }\n ]\n ]\n },\n \"Aggregate URLs\": {\n \"main\": [\n [\n {\n \"node\": \"Set response (URL)\",\n \"type\": \"main\",\n \"index\": 0\n }\n ]\n ]\n },\n \"Filter out empty hrefs\": {\n \"main\": [\n [\n {\n \"node\": \"Remove duplicated\",\n \"type\": \"main\",\n \"index\": 0\n }\n ]\n ]\n },\n \"Set domain (URL)\": {\n \"main\": [\n [\n {\n \"node\": \"Add protocool to domain (URL)\",\n \"type\": \"main\",\n \"index\": 0\n }\n ]\n ]\n },\n \"Add protocool to domain (URL)\": {\n \"main\": [\n [\n {\n \"node\": \"Get website (URL)\",\n \"type\": \"main\",\n \"index\": 0\n }\n ]\n ]\n },\n \"Get website (URL)\": {\n \"main\": [\n [\n {\n \"node\": \"Retrieve URLs\",\n \"type\": \"main\",\n \"index\": 0\n }\n ]\n ]\n }\n },\n \"pinData\": {}\n}",
    "requestOptions": {}
  },
  "typeVersion": 1.1
}

================ Node #2450 ================
{
  "id": "725dc9d9-dc10-4895-aedb-93ecd7494d76",
  "name": "OpenAI Chat Model",
  "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
  "position": [
    1300,
    980
  ],
  "parameters": {
    "model": "gpt-4o",
    "options": {
      "temperature": 0,
      "responseFormat": "json_object"
    },
    "requestOptions": {}
  },
  "credentials": {
    "openAiApi": {
      "id": "Qp9mop4DylpfqiTH",
      "name": "OpenAI (avirago@avirago.pl)"
    }
  },
  "typeVersion": 1
}

================ Node #2451 ================
{
  "id": "2b9aa18b-e72e-486a-b307-db50e408842b",
  "name": "JSON Parser",
  "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
  "position": [
    1800,
    980
  ],
  "parameters": {
    "schemaType": "manual",
    "inputSchema": "{\n \"type\": \"object\",\n \"properties\": {\n \"social_media\": {\n \"type\": \"array\",\n \"items\": {\n \"type\": \"object\",\n \"properties\": {\n \"platform\": {\n \"type\": \"string\",\n \"description\": \"The name of the social media platform (e.g., LinkedIn, Instagram)\"\n },\n \"urls\": {\n \"type\": \"array\",\n \"items\": {\n \"type\": \"string\",\n \"format\": \"uri\",\n \"description\": \"A URL for the social media platform\"\n }\n }\n },\n \"required\": [\"platform\", \"urls\"],\n \"additionalProperties\": false\n }\n }\n },\n \"required\": [\"platforms\"],\n \"additionalProperties\": false\n}\n",
    "requestOptions": {}
  },
  "typeVersion": 1.2
}

================ Node #2452 ================
{
  "id": "87dcfe83-01f3-439c-8175-7da3d96391b4",
  "name": "Map company name and website",
  "type": "n8n-nodes-base.set",
  "position": [
    1400,
    300
  ],
  "parameters": {
    "options": {},
    "assignments": {
      "assignments": [
        {
          "id": "ae484e44-36bc-4d88-9772-545e579a261c",
          "name": "company_name",
          "type": "string",
          "value": "={{ $json.name }}"
        },
        {
          "id": "c426ab19-649c-4443-aabb-eb0826680452",
          "name": "company_website",
          "type": "string",
          "value": "={{ $json.website }}"
        }
      ]
    }
  },
  "typeVersion": 3.3
}

================ Node #2453 ================
{
  "id": "a904bd16-b470-4c98-ac05-50bbc09bf24b",
  "name": "Execute workflow",
  "type": "n8n-nodes-base.manualTrigger",
  "position": [
    540,
    620
  ],
  "parameters": {},
  "typeVersion": 1
}

================ Node #2454 ================
{
  "id": "a9801b62-a691-457c-a52f-ac0d68c8e8b3",
  "name": "Get companies",
  "type": "n8n-nodes-base.supabase",
  "position": [
    780,
    620
  ],
  "parameters": {
    "tableId": "companies_input",
    "operation": "getAll"
  },
  "credentials": {
    "supabaseApi": {
      "id": "TZeFGe5qO3z7X5Zk",
      "name": "Supabase (workfloows@gmail.com)"
    }
  },
  "typeVersion": 1
}

================ Node #2455 ================
{
  "id": "40d8fe8a-2975-4ea5-b6ac-46e19d158eea",
  "name": "Select company name and website",
  "type": "n8n-nodes-base.set",
  "position": [
    1040,
    620
  ],
  "parameters": {
    "include": "selected",
    "options": {},
    "assignments": {
      "assignments": []
    },
    "includeFields": "name,website",
    "includeOtherFields": true
  },
  "typeVersion": 3.3
}

================ Node #2456 ================
{
  "id": "20aa3aea-f1f6-435c-a511-d4e8db047c6d",
  "name": "Set social media array",
  "type": "n8n-nodes-base.set",
  "position": [
    1800,
    720
  ],
  "parameters": {
    "options": {},
    "assignments": {
      "assignments": [
        {
          "id": "a6e109b7-9333-44e8-aa13-590aeb91a56b",
          "name": "social_media",
          "type": "array",
          "value": "={{ $json.output.social_media }}"
        }
      ]
    }
  },
  "typeVersion": 3.3
}

================ Node #2457 ================
{
  "id": "53f64ebf-8d9f-4718-9a33-aaae06e9cf9a",
  "name": "Merge all data",
  "type": "n8n-nodes-base.merge",
  "position": [
    2040,
    620
  ],
  "parameters": {
    "mode": "combine",
    "options": {},
    "combinationMode": "mergeByPosition"
  },
  "typeVersion": 2.1
}

================ Node #2458 ================
{
  "id": "e38e590e-cc1c-485f-b6c4-e7631f1c8381",
  "name": "Insert new row",
  "type": "n8n-nodes-base.supabase",
  "position": [
    2260,
    620
  ],
  "parameters": {
    "tableId": "companies_output",
    "dataToSend": "autoMapInputData"
  },
  "credentials": {
    "supabaseApi": {
      "id": "TZeFGe5qO3z7X5Zk",
      "name": "Supabase (workfloows@gmail.com)"
    }
  },
  "typeVersion": 1
}

================ Node #2459 ================
{
  "id": "aac08494-b324-4307-a5c5-5d5345cc9070",
  "name": "Convert HTML to Markdown",
  "type": "n8n-nodes-base.markdown",
  "position": [
    2100,
    1314
  ],
  "parameters": {
    "html": "={{ $json.data }}",
    "options": {
      "ignore": "a,img"
    }
  },
  "typeVersion": 1
}

================ Node #2460 ================
{
  "id": "ca6733cb-973f-4e7b-9d52-48f1af2e08e3",
  "name": "Sticky Note",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    1420,
    940
  ],
  "parameters": {
    "color": 5,
    "width": 157.8125,
    "height": 166.55000000000004,
    "content": ""
  },
  "typeVersion": 1
}

================ Node #2461 ================
{
  "id": "4acd71c9-9e31-43fc-bda6-66d6a057306b",
  "name": "Sticky Note1",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    1600,
    940
  ],
  "parameters": {
    "color": 4,
    "width": 157.8125,
    "height": 166.55000000000004,
    "content": ""
  },
  "typeVersion": 1
}

================ Node #2462 ================
{
  "id": "359adcd6-6bb9-4d64-8dde-6a45b0439fd6",
  "name": "Sticky Note2",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    1420,
    1180
  ],
  "parameters": {
    "color": 5,
    "width": 1117.5005339977713,
    "height": 329.45390772033636,
    "content": "### Text scraper tool\nThis tool is designed to return all text from the given webpage.\n\n\ud83d\udca1 **Consider adding proxy for better crawling accuracy.**\n"
  },
  "typeVersion": 1
}

================ Node #2463 ================
{
  "id": "84133903-dcec-4c0c-8684-fdeb49f5702d",
  "name": "Retrieve URLs",
  "type": "n8n-nodes-base.html",
  "position": [
    2120,
    1700
  ],
  "parameters": {
    "options": {},
    "operation": "extractHtmlContent",
    "extractionValues": {
      "values": [
        {
          "key": "output",
          "cssSelector": "a",
          "returnArray": true,
          "returnValue": "attribute"
        }
      ]
    }
  },
  "typeVersion": 1.2
}

================ Node #2464 ================
{
  "id": "2ebffed6-5517-47ff-9fcd-5ce503aa3b63",
  "name": "Split out URLs",
  "type": "n8n-nodes-base.splitOut",
  "position": [
    2340,
    1700
  ],
  "parameters": {
    "options": {},
    "fieldToSplitOut": "output"
  },
  "typeVersion": 1
}

================ Node #2465 ================
{
  "id": "215da9b2-0c0d-4d0e-b5f9-9887be75b0c4",
  "name": "Remove duplicated",
  "type": "n8n-nodes-base.removeDuplicates",
  "position": [
    2780,
    1700
  ],
  "parameters": {
    "compare": "selectedFields",
    "options": {},
    "fieldsToCompare": "href"
  },
  "typeVersion": 1
}

================ Node #2466 ================
{
  "id": "55825a1c-9351-413c-858a-c44cd3078f11",
  "name": "Set domain to path",
  "type": "n8n-nodes-base.set",
  "position": [
    3000,
    1700
  ],
  "parameters": {
    "include": "selected",
    "options": {},
    "assignments": {
      "assignments": [
        {
          "id": "04ced063-09f0-496c-9b28-b8095f9e2297",
          "name": "href",
          "type": "string",
          "value": "={{ $json.href.startsWith(\"/\") ? $('Add protocool to domain (URL)').item.json[\"domain\"] + $json.href : $json.href }}"
        }
      ]
    },
    "includeFields": "title",
    "includeOtherFields": true
  },
  "typeVersion": 3.3
}

================ Node #2467 ================
{
  "id": "57858d59-2727-4291-9dc6-238101de25ea",
  "name": "Filter out invalid URLs",
  "type": "n8n-nodes-base.filter",
  "position": [
    3220,
    1700
  ],
  "parameters": {
    "options": {},
    "conditions": {
      "options": {
        "leftValue": "",
        "caseSensitive": true,
        "typeValidation": "strict"
      },
      "combinator": "and",
      "conditions": [
        {
          "id": "d01ea6a8-7e75-40d4-98f2-25d42b245f36",
          "operator": {
            "type": "boolean",
            "operation": "true",
            "singleValue": true
          },
          "leftValue": "={{ $json.href.isUrl() }}",
          "rightValue": ""
        }
      ]
    }
  },
  "typeVersion": 2
}

================ Node #2468 ================
{
  "id": "0e487a35-8a6c-48f7-9048-fe66a5a346e8",
  "name": "Aggregate URLs",
  "type": "n8n-nodes-base.aggregate",
  "position": [
    3440,
    1700
  ],
  "parameters": {
    "include": "specifiedFields",
    "options": {},
    "aggregate": "aggregateAllItemData",
    "fieldsToInclude": "title,href"
  },
  "typeVersion": 1
}

================ Node #2469 ================
{
  "id": "0062af28-8727-4ed4-b283-e250146c2085",
  "name": "Filter out empty hrefs",
  "type": "n8n-nodes-base.filter",
  "position": [
    2560,
    1700
  ],
  "parameters": {
    "options": {},
    "conditions": {
      "options": {
        "leftValue": "",
        "caseSensitive": true,
        "typeValidation": "strict"
      },
      "combinator": "and",
      "conditions": [
        {
          "id": "5b9b7353-bd04-4af2-9480-8de135ff4223",
          "operator": {
            "type": "string",
            "operation": "exists",
            "singleValue": true
          },
          "leftValue": "={{ $json.href }}",
          "rightValue": ""
        }
      ]
    }
  },
  "typeVersion": 2
}

================ Node #2470 ================
{
  "id": "995e04f2-f5e3-48b8-879e-913f3a9fb657",
  "name": "Set domain (text)",
  "type": "n8n-nodes-base.set",
  "position": [
    1460,
    1314
  ],
  "parameters": {
    "options": {},
    "assignments": {
      "assignments": [
        {
          "id": "253c2b17-c749-4f0a-93e8-5ff74f1ce49b",
          "name": "domain",
          "type": "string",
          "value": "={{ $json.query }}"
        }
      ]
    }
  },
  "typeVersion": 3.3
}

================ Node #2471 ================
{
  "id": "c88f1008-00f8-4285-b595-a936e1f925a5",
  "name": "Add protocool to domain (text)",
  "type": "n8n-nodes-base.set",
  "position": [
    1660,
    1314
  ],
  "parameters": {
    "options": {},
    "assignments": {
      "assignments": [
        {
          "id": "ed0f1505-82b6-4393-a0d8-088055137ec9",
          "name": "domain",
          "type": "string",
          "value": "={{ $json.domain.startsWith(\"http\") ? $json.domain : \"http://\" + $json.domain }}"
        }
      ]
    }
  },
  "typeVersion": 3.3
}

================ Node #2472 ================
{
  "id": "3bc68a89-8bab-423a-b4bf-4739739aeb07",
  "name": "Get website (text)",
  "type": "n8n-nodes-base.httpRequest",
  "position": [
    1880,
    1314
  ],
  "parameters": {
    "url": "={{ $json.domain }}",
    "options": {}
  },
  "typeVersion": 4.2
}

================ Node #2473 ================
{
  "id": "9d4782c3-872b-4e3c-9f8c-02cfea7a8ff2",
  "name": "Set response (text)",
  "type": "n8n-nodes-base.set",
  "position": [
    2320,
    1314
  ],
  "parameters": {
    "options": {},
    "assignments": {
      "assignments": [
        {
          "id": "2b1c7ff8-06a7-448b-99b7-5ede4b2e0bf0",
          "name": "response",
          "type": "string",
          "value": "={{ $json.data }}"
        }
      ]
    }
  },
  "typeVersion": 3.3
}

================ Node #2474 ================
{
  "id": "2b6ffbd9-892d-4246-b47c-86ad51362ac9",
  "name": "Set domain (URL)",
  "type": "n8n-nodes-base.set",
  "position": [
    1460,
    1700
  ],
  "parameters": {
    "options": {},
    "assignments": {
      "assignments": [
        {
          "id": "253c2b17-c749-4f0a-93e8-5ff74f1ce49b",
          "name": "domain",
          "type": "string",
          "value": "={{ $json.query }}"
        }
      ]
    }
  },
  "typeVersion": 3.3
}

================ Node #2475 ================
{
  "id": "2477677e-262e-45a3-99c3-06607b5ae270",
  "name": "Get website (URL)",
  "type": "n8n-nodes-base.httpRequest",
  "position": [
    1900,
    1700
  ],
  "parameters": {
    "url": "={{ $json.domain }}",
    "options": {}
  },
  "typeVersion": 4.2
}

================ Node #2476 ================
{
  "id": "4f84eb31-7ad4-4b10-8043-b474fc7f367a",
  "name": "Set response (URL)",
  "type": "n8n-nodes-base.set",
  "position": [
    3660,
    1700
  ],
  "parameters": {
    "options": {},
    "assignments": {
      "assignments": [
        {
          "id": "53c1c016-7983-4eba-a91d-da2a0523d805",
          "name": "response",
          "type": "string",
          "value": "={{ JSON.stringify($json.data) }}"
        }
      ]
    }
  },
  "typeVersion": 3.3
}

================ Node #2477 ================
{
  "id": "2d2288dd-2ab5-41a1-984c-ff7c5bbab8d1",
  "name": "Sticky Note3",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    1420,
    1560
  ],
  "parameters": {
    "color": 4,
    "width": 2467.2678721043376,
    "height": 328.79842054012374,
    "content": "### URL scraper tool\nThis tool is designed to return all links (URLs) from the given webpage.\n\n\ud83d\udca1 **Consider adding proxy for better crawling accuracy.**"
  },
  "typeVersion": 1
}

================ Node #2478 ================
{
  "id": "61c1b30f-38e5-44a5-a8be-edd4df1b13e5",
  "name": "Sticky Note4",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    720,
    400
  ],
  "parameters": {
    "width": 221.7729148148145,
    "height": 400.16865185185225,
    "content": "### Get companies from database\nRetrieve names and websites of companies from Supabase table to process crawling.\n\n\ud83d\udca1 **You can replace Supabase with other database of your choice.**"
  },
  "typeVersion": 1
}

================ Node #2479 ================
{
  "id": "b6c6643a-4450-4576-b9c3-e28bc9ebed5d",
  "name": "Sticky Note5",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    980,
    429.32034814814835
  ],
  "parameters": {
    "width": 221.7729148148145,
    "height": 370.14757037037066,
    "content": "### Set parameters for execution\nPass only `name` and `website` values from database. \n\n\u26a0\ufe0f **If you use other field namings, update this node.**"
  },
  "typeVersion": 1
}

================ Node #2480 ================
{
  "id": "52196e71-c2c2-4ec9-91ab-f7ebc9874d6c",
  "name": "Sticky Note6",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    1360,
    536.6201859111013
  ],
  "parameters": {
    "width": 339.7128777777775,
    "height": 328.4957622370491,
    "content": "### Crawling agent (retrieve social media profile links)\nCrawl website to extract social media profile links and return them in unified JSON format.\n\n\ud83d\udca1 **You can change type of retrieved data by editing prompt and parser schema.**"
  },
  "typeVersion": 1
}

================ Node #2481 ================
{
  "id": "ea11931b-c1c7-43c4-a728-f10479863e38",
  "name": "Sticky Note7",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    2200,
    435.3819888888892
  ],
  "parameters": {
    "width": 221.7729148148145,
    "height": 364.786662962963,
    "content": "### Insert data to database\nAdd new rows in database table with extracted data.\n\n\ud83d\udca1 **You can replace Supabase with other database of your choice.**"
  },
  "typeVersion": 1
}

================ Node #2482 ================
{
  "id": "bc3d3337-a5b9-45ec-bb73-810cea9c0e73",
  "name": "Add protocool to domain (URL)",
  "type": "n8n-nodes-base.set",
  "position": [
    1680,
    1700
  ],
  "parameters": {
    "options": {},
    "assignments": {
      "assignments": [
        {
          "id": "ed0f1505-82b6-4393-a0d8-088055137ec9",
          "name": "domain",
          "type": "string",
          "value": "={{ $json.domain.startsWith(\"http\") ? $json.domain : \"http://\" + $json.domain }}"
        }
      ]
    }
  },
  "typeVersion": 3.3
}

================ Node #2483 ================
{
  "id": "db91703c-0133-4030-a9b5-fc3ab4331784",
  "name": "Sticky Note8",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    0,
    660
  ],
  "parameters": {
    "color": 3,
    "width": 369.60264559047334,
    "height": 256.26672065702303,
    "content": "## \u26a0\ufe0f Note\n\n1. Complete video guide for this workflow is available [on my YouTube](https://youtu.be/2W09puFZwtY). \n2. Remember to add your credentials and configure nodes.\n3. If you like this workflow, please subscribe to [my YouTube channel](https://www.youtube.com/@workfloows) and/or [my newsletter](https://workfloows.com/).\n\n**Thank you for your support!**"
  },
  "typeVersion": 1
}

================ Node #2484 ================
{
  "id": "54530733-f8dc-44c7-a645-6f279e9a2c21",
  "name": "Sticky Note9",
  "type": "n8n-nodes-base.stickyNote",
  "position": [
    0,
    420
  ],
  "parameters": {
    "color": 7,
    "width": 369.93062670813185,
    "height": 212.09880341753203,
    "content": "## Autonomous AI crawler\nThis workflow autonomously navigates through given websites and retrieves social media profile links. \n\n\ud83d\udca1 **You can modify this workflow to retrieve other type of data (e.g. contact details or company profile summary).**"
  },
  "typeVersion": 1
}

================ Node #2485 ================
{
  "id": "b43aee3c-47b5-47fd-89c4-7d213b26b4ca",
  "name": "Crawl website",
  "type": "@n8n/n8n-nodes-langchain.agent",
  "position": [
    1400,
    720
  ],
  "parameters": {
    "text": "=Retrieve social media profile URLs from this website: {{ $json.website }}",
    "options": {
      "systemMessage": "You are an automated web crawler tasked with extracting social media URLs from a webpage provided by the user. You have access to a text retrieval tool to gather all text content from the page and a URL retrieval tool to identify and navigate through links on the page. Utilize the URLs retrieved to crawl additional pages. Your objective is to provide a unified JSON output containing the extracted data (links to all possible social media profiles from the website)."
    },
    "promptType": "define",
    "hasOutputParser": true
  },
  "retryOnFail": true,
  "typeVersion": 1.6
}

================ Node #2486 ================
{
  "id": "82b62d4e-a263-4232-9bae-4c581db2269c",
  "name": "Receive a Line Webhook",
  "type": "n8n-nodes-base.webhook",
  "position": [
    0,
    0
  ],
  "webhookId": "2a27c148-3977-485f-b197-567c96671023",
  "parameters": {
    "path": "lineimage",
    "options": {},
    "httpMethod": "POST"
  },
  "typeVersion": 2
}

================ Node #2487 ================
{
  "id": "f861c4eb-3d4f-4253-810f-8032602f079b",
  "name": "Receive Line Messages",
  "type": "n8n-nodes-base.httpRequest",
  "position": [
    220,
    0
  ],
  "parameters": {
    "url": "=https://api-data.line.me/v2/bot/message/{{ $json.body.events[0].message.id }}/content",
    "options": {},
    "jsonHeaders": "={\n\"Authorization\": \"Bearer YOUR_LINE_BOT_TOKEN\",\n\"Content-Type\": \"application/json\"\n}",
    "sendHeaders": true,
    "specifyHeaders": "json"
  },
  "typeVersion": 4.2
}

================ Node #2488 ================
{
  "id": "da3a9188-028d-4c75-b23f-5f1f4e50784c",
  "name": "Creating an Image using Dall-E",
  "type": "@n8n/n8n-nodes-langchain.openAi",
  "position": [
    860,
    0
  ],
  "parameters": {
    "prompt": "={{ $json.content }}",
    "options": {
      "returnImageUrls": true
    },
    "resource": "image"
  },
  "credentials": {
    "openAiApi": {
      "id": "YOUR_OPENAI_CREDENTIAL_ID",
      "name": "OpenAi account"
    }
  },
  "typeVersion": 1.7
}

================ Node #2489 ================
{
  "id": "36c826e5-eacd-43ad-b663-4d788005e61a",
  "name": "Creating a Prompt for Dall-E (Lego Style)",
  "type": "@n8n/n8n-nodes-langchain.openAi",
  "position": [
    540,
    0
  ],
  "parameters": {
    "text": "Creating the DALL\u00b7E 3 prompt to transform this kind of image into a isometric LEGO image (Only provide me with a prompt).",
    "modelId": {
      "__rl": true,
      "mode": "list",
      "value": "gpt-4o-mini",
      "cachedResultName": "GPT-4O-MINI"
    },
    "options": {},
    "resource": "image",
    "inputType": "base64",
    "operation": "analyze",
    "binaryPropertyName": "=data"
  },
  "credentials": {
    "openAiApi": {
      "id": "YOUR_OPENAI_CREDENTIAL_ID",
      "name": "OpenAi account"
    }
  },
  "typeVersion": 1.7
}

================ Node #2490 ================
{
  "id": "3c19f931-9ca0-4bd7-b4eb-1628d89bbba1",
  "name": "Send Back an Image through Line",
  "type": "n8n-nodes-base.httpRequest",
  "position": [
    1160,
    0
  ],
  "parameters": {
    "url": "https://api.line.me/v2/bot/message/reply",
    "method": "POST",
    "options": {},
    "jsonBody": "={\n \"replyToken\": \"{{ $('Receive a Line Webhook').item.json.body.events[0].replyToken }}\",\n \"messages\": [\n {\n \"type\": \"image\",\n \"originalContentUrl\": \"{{ $json.url }}\",\n \"previewImageUrl\": \"{{ $json.url }}\"\n }\n ]\n}",
    "sendBody": true,
    "jsonHeaders": "{\n\"Authorization\": \"Bearer YOUR_LINE_BOT_TOKEN\",\n\"Content-Type\": \"application/json\"\n}",
    "sendHeaders": true,
    "specifyBody": "json",
    "specifyHeaders": "json"
  },
  "typeVersion": 4.2
}

================ Node #2491 ================
{
  "id": "9e1e1c11-f406-47de-8f65-9669cf078d3d",
  "name": "AI Agent",
  "type": "@n8n/n8n-nodes-langchain.agent",
  "position": [
    -1140,
    120
  ],
  "parameters": {
    "text": "={{ $json.body.events[0].message.text }}",
    "options": {
      "systemMessage": "=You are a helpful assistant.\n\nHere is the current date {{ $now }}"
    },
    "promptType": "define"
  },
  "typeVersion": 1.7
}

================ Node #2492 ================
{
  "id": "fa722820-8804-47da-bb21-02c0d2b5d665",
  "name": "Window Buffer Memory",
  "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
  "position": [
    -1020,
    580
  ],
  "parameters": {
    "sessionKey": "={{ $json.body.events[0].source.userId }}",
    "sessionIdType": "customKey"
  },
  "typeVersion": 1.3
}

================ Node #2493 ================
{
  "id": "5149b91a-5934-4037-a444-dfdb93d0cd16",
  "name": "OpenAI Chat Model",
  "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
  "position": [
    -1180,
    580
  ],
  "parameters": {
    "options": {}
  },
  "typeVersion": 1
}

================ Node #2494 ================
{
  "id": "211a120d-d65f-4708-adc2-66dc8f4a40d6",
  "name": "Wikipedia",
  "type": "@n8n/n8n-nodes-langchain.toolWikipedia",
  "position": [
    -360,
    380
  ],
  "parameters": {},
  "typeVersion": 1
}

================ Node #2495 ================
{
  "id": "0e03137d-0300-47a4-bbd8-03c87c93d6e2",
  "name": "OpenAI",
  "type": "@n8n/n8n-nodes-langchain.openAi",
  "position": [
    -780,
    120
  ],
  "parameters": {
    "modelId": {
      "__rl": true,
      "mode": "list",
      "value": "gpt-4o-mini",
      "cachedResultName": "GPT-4O-MINI"
    },
    "options": {},
    "messages": {
      "values": [
        {
          "role": "system",
          "content": "Your task is to extract and condense the answer into an easily readable format. Don't provide a link or details such as \"\u0e14\u0e39\u0e40\u0e1e\u0e34\u0e48\u0e21\u0e40\u0e15\u0e34\u0e21\" or \"\u0e14\u0e39\u0e23\u0e32\u0e22\u0e25\u0e30\u0e40\u0e2d\u0e35\u0e22\u0e14\u0e44\u0e14\u0e49\u0e17\u0e35\u0e48\u0e19\u0e35\u0e48.\""
        },
        {
          "content": "={{ $json.output }}"
        }
      ]
    }
  },
  "typeVersion": 1.7
}

================ Node #2496 ================
{
  "id": "8c6e96bc-aa9d-44d1-b7ce-6bb85b175cf1",
  "name": "Switch Between Text and Others",
  "type": "n8n-nodes-base.switch",
  "position": [
    -1820,
    640
  ],
  "parameters": {
    "rules": {
      "values": [
        {
          "conditions": {
            "options": {
              "version": 2,
              "leftValue": "",
              "caseSensitive": true,
              "typeValidation": "strict"
            },
            "combinator": "and",
            "conditions": [
              {
                "operator": {
                  "type": "string",
                  "operation": "equals"
                },
                "leftValue": "={{ $('Line Receiving').item.json.body.events[0].message.type }}",
                "rightValue": "text"
              }
            ]
          }
        }
      ]
    },
    "options": {
      "fallbackOutput": "extra"
    }
  },
  "typeVersion": 3.2
}

================ Node #2497 ================
{
  "id": "721a5e5e-3a9a-435e-9302-03ca7cf64fb7",
  "name": "Line Receiving",
  "type": "n8n-nodes-base.webhook",
  "position": [
    -2320,
    560
  ],
  "webhookId": "********-****-****-****-************",
  "parameters": {
    "path": "linechatbotagent",
    "options": {},
    "httpMethod": "POST"
  },
  "typeVersion": 2
}

================ Node #2498 ================
{
  "id": "2b47f8f1-a501-4204-9221-c838edfceae7",
  "name": "Error Handling from AI Response",
  "type": "n8n-nodes-base.switch",
  "position": [
    -220,
    100
  ],
  "parameters": {
    "rules": {
      "values": [
        {
          "conditions": {
            "options": {
              "version": 2,
              "leftValue": "",
              "caseSensitive": true,
              "typeValidation": "strict"
            },
            "combinator": "and",
            "conditions": [
              {
                "operator": {
                  "type": "string",
                  "operation": "exists",
                  "singleValue": true
                },
                "leftValue": "={{ $json.message.content }}",
                "rightValue": "={{ $json.output }}"
              }
            ]
          }
        }
      ]
    },
    "options": {
      "fallbackOutput": "extra"
    }
  },
  "typeVersion": 3.2
}

================ Node #2499 ================
{
  "id": "99218c08-5ec7-44b9-a795-e98f1ec4aab3",
  "name": "Text Cleansing",
  "type": "n8n-nodes-base.set",
  "position": [
    0,
    0
  ],
  "parameters": {
    "options": {},
    "assignments": {
      "assignments": [
        {
          "id": "********-****-****-****-************",
          "name": "message.content",
          "type": "string",
          "value": "={{ $json.message.content.replaceAll(\"\\n\",\"\\\\n\").replaceAll(\"\\n\",\"\").removeMarkdown().removeTags().replaceAll('\"',\"\") }}"
        }
      ]
    }
  },
  "typeVersion": 3.4
}

================ Node #2500 ================
{
  "id": "39476f44-9dc7-4c72-a857-9e79f85ccd72",
  "name": "Line Answering (Error Case)",
  "type": "n8n-nodes-base.httpRequest",
  "position": [
    760,
    680
  ],
  "parameters": {
    "url": "https://api.line.me/v2/bot/message/reply",
    "method": "POST",
    "options": {},
    "jsonBody": "={\n \"replyToken\": \"{{ $('Line Receiving').item.json.body.events[0].replyToken }}\",\n \"messages\": [\n {\n \"type\": \"text\",\n \"text\": \"\u0e01\u0e23\u0e38\u0e13\u0e32\u0e2a\u0e48\u0e07\u0e2d\u0e22\u0e48\u0e32\u0e07\u0e2d\u0e37\u0e48\u0e19\u0e40\u0e16\u0e2d\u0e30\u0e19\u0e30\u0e40\u0e15\u0e07\u0e2d\u0e31\u0e27\"\n }\n ]}",
    "sendBody": true,
    "jsonHeaders": "{\n\"Authorization\": \"Bearer ****************************************\",\n\"Content-Type\": \"application/json\"\n}",
    "sendHeaders": true,
    "specifyBody": "json",
    "specifyHeaders": "json"
  },
  "typeVersion": 4.2
}